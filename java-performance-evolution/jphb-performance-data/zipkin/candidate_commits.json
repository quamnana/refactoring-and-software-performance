[
    {
        "commit": "e19058db375832d009f84d91ce9692d001674a59",
        "previous_commit": "c89af0a02eda0d2d89171081a01cc9891ee8db76",
        "date": 1704886113,
        "releases": {
            "previous": "e19058db375832d009f84d91ce9692d001674a59",
            "next": "e19058db375832d009f84d91ce9692d001674a59"
        },
        "commit_message": "Prepares for 3.0 by updating to Spring Boot 3 and floor Java 8 (#3684)\n\nWe currently still have a problem as the latest version shows up as 3.0.0-rc0 due to an accidental release. Moreover, a request to delete that version hasn't happened. This switches to 3.x by dropping support for Java 6 and moving to Spring Boot 3.\r\n\r\nAs noted, recent Zipkin Reporter 3 and Brave 6 decouple instrumentation from this core jar. While it is still in use for other formats, the call sites using them are all minimum Java 8 anyway. By updating to floor Java 8, we can use later JDKs to release than 11, though this change doesn't include doing that, yet.\r\n\r\nAs Spring Boot requires JRE 17, we update the floor JDK to 17. However, zipkin-dependencies is currently stuck at 11, so until that's not the case, this leaves collector and storage modules at Java 11, even if the server can only run in 17+.\r\n\r\nSigned-off-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e19058db375832d009f84d91ce9692d001674a59": {
                "zipkin/src/main/java/zipkin2/Call.java": [
                    "public Call<V> zipkin2.Call<V>.clone()",
                    "public final Call<V> zipkin2.Call<V>.handleError(ErrorHandler<V> errorHandler)",
                    "public final <R> Call<R> zipkin2.Call<V>.flatMap(FlatMapper<V, R> flatMapper)",
                    "public boolean zipkin2.Call<V>.equals(Object o)",
                    "public Call<R> zipkin2.Call<V>.clone()",
                    "public final <R> Call<R> zipkin2.Call<V>.map(Mapper<V, R> mapper)",
                    "public static <V> Call<V> zipkin2.Call<V>.create(V v)"
                ],
                "zipkin/src/main/java/zipkin2/Endpoint.java": [
                    "public boolean zipkin2.Endpoint.equals(Object o)",
                    "static byte[] zipkin2.Endpoint.textToNumericFormatV6(String ipString)"
                ],
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public boolean zipkin2.Span.equals(Object o)",
                    "public Builder zipkin2.Span.merge(Span source)",
                    "public Builder zipkin2.Span.putTag(String key, String value)",
                    "public Builder zipkin2.Span.addAnnotation(long timestamp, String value)"
                ],
                "zipkin/src/main/java/zipkin2/codec/DependencyLinkBytesDecoder.java": [
                    "public List<DependencyLink> decodeList(byte[] links)"
                ],
                "zipkin/src/main/java/zipkin2/codec/SpanBytesDecoder.java": [
                    "Span decodeOne(ReadBuffer buffer)",
                    "static List<Span> doDecodeList(SpanBytesDecoder decoder, ByteBuffer spans)",
                    "static List<Span> doDecodeList(SpanBytesDecoder decoder, byte[] spans)"
                ],
                "zipkin/src/main/java/zipkin2/internal/DateUtil.java": [
                    "public static List<Long> zipkin2.internal.DateUtil.epochDays(long endTs, long lookback)"
                ],
                "zipkin/src/main/java/zipkin2/internal/DelayLimiter.java": [
                    "public <C> DelayLimiter<C> zipkin2.internal.DelayLimiter<C>.build()",
                    "<C> Suppression<C> zipkin2.internal.DelayLimiter<C>.create(C context)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Dependencies.java": [
                    "public static Dependencies zipkin2.internal.Dependencies.fromThrift(ByteBuffer bytes)"
                ],
                "zipkin/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "public static List<DependencyLink> zipkin2.internal.DependencyLinker.merge(Iterable<DependencyLink> in)",
                    "static List<DependencyLink> zipkin2.internal.DependencyLinker.link(Map<Pair, Long> callCounts, Map<Pair, Long> errorCounts)"
                ],
                "zipkin/src/main/java/zipkin2/internal/FilterTraces.java": [
                    "public List<List<Span>> zipkin2.internal.FilterTraces.map(List<List<Span>> input)"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "static IllegalArgumentException zipkin2.internal.JsonCodec.exceptionReading(String type, Exception e)",
                    "public static <T> byte[] zipkin2.internal.JsonCodec.write(WriteBuffer.Writer<T> writer, T value)",
                    "static <T> int zipkin2.internal.JsonCodec.sizeInBytes(WriteBuffer.Writer<T> writer, List<T> value)",
                    "public static @Nullable <T> T zipkin2.internal.JsonCodec.readOne(JsonReaderAdapter<T> adapter, ReadBuffer buffer)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Codec.java": [
                    "static IllegalArgumentException zipkin2.internal.Proto3Codec.exceptionReading(String type, Exception e)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3SpanWriter.java": [
                    "int zipkin2.internal.Proto3SpanWriter.writeList(List<Span> spans, byte[] out, int pos)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3ZipkinFields.java": [
                    "void zipkin2.internal.Proto3ZipkinFields.writeValue(WriteBuffer b, Span value)",
                    "int zipkin2.internal.Proto3ZipkinFields.sizeOfValue(Span span)"
                ],
                "zipkin/src/main/java/zipkin2/internal/SpanNode.java": [
                    "void zipkin2.internal.SpanNode.sortTreeByTimestamp(SpanNode root)",
                    "public boolean zipkin2.internal.SpanNode.equals(Object o)",
                    "SpanNode zipkin2.internal.SpanNode.addChild(SpanNode child)",
                    "public String zipkin2.internal.SpanNode.toString()"
                ],
                "zipkin/src/main/java/zipkin2/internal/ThriftCodec.java": [
                    "public static Span zipkin2.internal.ThriftCodec.readOne(ReadBuffer buffer)",
                    "static <T> int zipkin2.internal.ThriftCodec.listSizeInBytes(WriteBuffer.Writer<T> writer, List<T> values)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Trace.java": [
                    "static int zipkin2.internal.Trace.compareEndpoint(Endpoint left, Endpoint right)",
                    "public static List<Span> zipkin2.internal.Trace.merge(List<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin2/internal/TracesAdapter.java": [
                    "protected List<List<Span>> zipkin2.internal.TracesAdapter.newOutput()",
                    "public Call<List<List<Span>>> zipkin2.internal.TracesAdapter.getTraces(Iterable<String> traceIds)"
                ],
                "zipkin/src/main/java/zipkin2/storage/GroupByTraceId.java": [
                    "public List<List<Span>> zipkin2.storage.GroupByTraceId.map(List<Span> input)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "Collection<TraceIdTimestamp> zipkin2.storage.InMemoryStorage.traceIdTimestampsByServiceName(String serviceName)",
                    "Collection<Span> zipkin2.storage.InMemoryStorage.valueContainer()",
                    "synchronized Call<List<List<Span>>> zipkin2.storage.InMemoryStorage.getTraces(QueryRequest request, boolean strictTraceId)",
                    "public synchronized Call<List<List<Span>>> zipkin2.storage.InMemoryStorage.getTraces(Iterable<String> traceIds)",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getSpanNames(String service)",
                    "static Set<String> zipkin2.storage.InMemoryStorage.lowTraceIdsInRange( Collection<TraceIdTimestamp> descendingByTimestamp, long endTs, long lookback)",
                    "static Collection<List<Span>> zipkin2.storage.InMemoryStorage.strictByTraceId(List<Span> next)",
                    "Set<String> zipkin2.storage.InMemoryStorage.removeServiceIfTraceId(String lowTraceId)",
                    "Collection<TraceIdTimestamp> zipkin2.storage.InMemoryStorage.valueContainer()",
                    "private int zipkin2.storage.InMemoryStorage.deleteOldestTrace()",
                    "public int zipkin2.storage.InMemoryStorage.compare(TraceIdTimestamp left, TraceIdTimestamp right)",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getServiceNames()",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getRemoteServiceNames(String service)",
                    "Collection<String> zipkin2.storage.InMemoryStorage.valueContainer()",
                    "public synchronized List<List<Span>> zipkin2.storage.InMemoryStorage.getTraces()",
                    "public synchronized Call<List<Span>> zipkin2.storage.InMemoryStorage.getTrace(String traceId)",
                    "Set<String> zipkin2.storage.InMemoryStorage.valueContainer()",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getValues(String key)",
                    "List<Span> zipkin2.storage.InMemoryStorage.spansByTraceId(String lowTraceId)"
                ],
                "zipkin/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public boolean zipkin2.storage.QueryRequest.test(List<Span> spans)",
                    "public Builder zipkin2.storage.QueryRequest.parseAnnotationQuery(@Nullable String annotationQuery)"
                ],
                "zipkin/src/main/java/zipkin2/storage/StrictTraceId.java": [
                    "static boolean zipkin2.storage.StrictTraceId.hasClashOnLowerTraceId(List<List<Span>> input)"
                ],
                "zipkin/src/main/java/zipkin2/v1/V1Annotation.java": [
                    "public boolean zipkin2.v1.V1Annotation.equals(Object o)"
                ],
                "zipkin/src/main/java/zipkin2/v1/V1BinaryAnnotation.java": [
                    "public boolean zipkin2.v1.V1BinaryAnnotation.equals(Object o)"
                ],
                "zipkin/src/main/java/zipkin2/v1/V1Span.java": [
                    "public boolean zipkin2.v1.V1Span.equals(Object o)",
                    "static <T extends Comparable<T>> List<T> zipkin2.v1.V1Span.sortedList(List<T> input)",
                    "public Builder zipkin2.v1.V1Span.addAnnotation(long timestamp, String value, @Nullable Endpoint endpoint)",
                    "public Builder zipkin2.v1.V1Span.addBinaryAnnotation(String address, Endpoint endpoint)",
                    "public Builder zipkin2.v1.V1Span.addBinaryAnnotation(String key, String value, Endpoint endpoint)"
                ],
                "zipkin/src/main/java/zipkin2/v1/V1SpanConverter.java": [
                    "void zipkin2.v1.V1SpanConverter.finish(Collection<Span> sink)",
                    "public List<Span> zipkin2.v1.V1SpanConverter.convert(V1Span source)",
                    "static boolean zipkin2.v1.V1SpanConverter.hasSameServiceName(Endpoint left, @Nullable Endpoint right)",
                    "Span.Builder zipkin2.v1.V1SpanConverter.forEndpoint(V1Span source, @Nullable zipkin2.Endpoint e)",
                    "void zipkin2.v1.V1SpanConverter.handleIncompleteRpc(V1Span source)"
                ]
            },
            "c89af0a02eda0d2d89171081a01cc9891ee8db76": {
                "zipkin/src/main/java/zipkin2/Call.java": [
                    "public Call<V> zipkin2.Call<V>.clone()",
                    "public final Call<V> zipkin2.Call<V>.handleError(ErrorHandler<V> errorHandler)",
                    "public final <R> Call<R> zipkin2.Call<V>.flatMap(FlatMapper<V, R> flatMapper)",
                    "public boolean zipkin2.Call<V>.equals(Object o)",
                    "public Call<R> zipkin2.Call<V>.clone()",
                    "public final <R> Call<R> zipkin2.Call<V>.map(Mapper<V, R> mapper)",
                    "public static <V> Call<V> zipkin2.Call<V>.create(V v)"
                ],
                "zipkin/src/main/java/zipkin2/Endpoint.java": [
                    "public boolean zipkin2.Endpoint.equals(Object o)",
                    "static byte[] zipkin2.Endpoint.textToNumericFormatV6(String ipString)"
                ],
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public boolean zipkin2.Span.equals(Object o)",
                    "public Builder zipkin2.Span.merge(Span source)",
                    "public Builder zipkin2.Span.putTag(String key, String value)",
                    "public Builder zipkin2.Span.addAnnotation(long timestamp, String value)"
                ],
                "zipkin/src/main/java/zipkin2/codec/DependencyLinkBytesDecoder.java": [
                    "public List<DependencyLink> decodeList(byte[] links)"
                ],
                "zipkin/src/main/java/zipkin2/codec/SpanBytesDecoder.java": [
                    "Span decodeOne(ReadBuffer buffer)",
                    "static List<Span> doDecodeList(SpanBytesDecoder decoder, ByteBuffer spans)",
                    "static List<Span> doDecodeList(SpanBytesDecoder decoder, byte[] spans)"
                ],
                "zipkin/src/main/java/zipkin2/internal/DateUtil.java": [
                    "public static List<Long> zipkin2.internal.DateUtil.epochDays(long endTs, long lookback)"
                ],
                "zipkin/src/main/java/zipkin2/internal/DelayLimiter.java": [
                    "public <C> DelayLimiter<C> zipkin2.internal.DelayLimiter<C>.build()",
                    "<C> Suppression<C> zipkin2.internal.DelayLimiter<C>.create(C context)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Dependencies.java": [
                    "public static Dependencies zipkin2.internal.Dependencies.fromThrift(ByteBuffer bytes)"
                ],
                "zipkin/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "public static List<DependencyLink> zipkin2.internal.DependencyLinker.merge(Iterable<DependencyLink> in)",
                    "static List<DependencyLink> zipkin2.internal.DependencyLinker.link(Map<Pair, Long> callCounts, Map<Pair, Long> errorCounts)"
                ],
                "zipkin/src/main/java/zipkin2/internal/FilterTraces.java": [
                    "public List<List<Span>> zipkin2.internal.FilterTraces.map(List<List<Span>> input)"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "static IllegalArgumentException zipkin2.internal.JsonCodec.exceptionReading(String type, Exception e)",
                    "public static <T> byte[] zipkin2.internal.JsonCodec.write(WriteBuffer.Writer<T> writer, T value)",
                    "static <T> int zipkin2.internal.JsonCodec.sizeInBytes(WriteBuffer.Writer<T> writer, List<T> value)",
                    "public static @Nullable <T> T zipkin2.internal.JsonCodec.readOne(JsonReaderAdapter<T> adapter, ReadBuffer buffer)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Codec.java": [
                    "static IllegalArgumentException zipkin2.internal.Proto3Codec.exceptionReading(String type, Exception e)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3SpanWriter.java": [
                    "int zipkin2.internal.Proto3SpanWriter.writeList(List<Span> spans, byte[] out, int pos)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3ZipkinFields.java": [
                    "void zipkin2.internal.Proto3ZipkinFields.writeValue(WriteBuffer b, Span value)",
                    "int zipkin2.internal.Proto3ZipkinFields.sizeOfValue(Span span)"
                ],
                "zipkin/src/main/java/zipkin2/internal/SpanNode.java": [
                    "void zipkin2.internal.SpanNode.sortTreeByTimestamp(SpanNode root)",
                    "public boolean zipkin2.internal.SpanNode.equals(Object o)",
                    "SpanNode zipkin2.internal.SpanNode.addChild(SpanNode child)",
                    "public String zipkin2.internal.SpanNode.toString()"
                ],
                "zipkin/src/main/java/zipkin2/internal/ThriftCodec.java": [
                    "public static Span zipkin2.internal.ThriftCodec.readOne(ReadBuffer buffer)",
                    "static <T> int zipkin2.internal.ThriftCodec.listSizeInBytes(WriteBuffer.Writer<T> writer, List<T> values)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Trace.java": [
                    "static int zipkin2.internal.Trace.compareEndpoint(Endpoint left, Endpoint right)",
                    "public static List<Span> zipkin2.internal.Trace.merge(List<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin2/internal/TracesAdapter.java": [
                    "protected List<List<Span>> zipkin2.internal.TracesAdapter.newOutput()",
                    "public Call<List<List<Span>>> zipkin2.internal.TracesAdapter.getTraces(Iterable<String> traceIds)"
                ],
                "zipkin/src/main/java/zipkin2/storage/GroupByTraceId.java": [
                    "public List<List<Span>> zipkin2.storage.GroupByTraceId.map(List<Span> input)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "Collection<TraceIdTimestamp> zipkin2.storage.InMemoryStorage.traceIdTimestampsByServiceName(String serviceName)",
                    "Collection<Span> zipkin2.storage.InMemoryStorage.valueContainer()",
                    "synchronized Call<List<List<Span>>> zipkin2.storage.InMemoryStorage.getTraces(QueryRequest request, boolean strictTraceId)",
                    "public synchronized Call<List<List<Span>>> zipkin2.storage.InMemoryStorage.getTraces(Iterable<String> traceIds)",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getSpanNames(String service)",
                    "static Set<String> zipkin2.storage.InMemoryStorage.lowTraceIdsInRange( Collection<TraceIdTimestamp> descendingByTimestamp, long endTs, long lookback)",
                    "static Collection<List<Span>> zipkin2.storage.InMemoryStorage.strictByTraceId(List<Span> next)",
                    "Set<String> zipkin2.storage.InMemoryStorage.removeServiceIfTraceId(String lowTraceId)",
                    "Collection<TraceIdTimestamp> zipkin2.storage.InMemoryStorage.valueContainer()",
                    "private int zipkin2.storage.InMemoryStorage.deleteOldestTrace()",
                    "public int zipkin2.storage.InMemoryStorage.compare(TraceIdTimestamp left, TraceIdTimestamp right)",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getServiceNames()",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getRemoteServiceNames(String service)",
                    "Collection<String> zipkin2.storage.InMemoryStorage.valueContainer()",
                    "public synchronized List<List<Span>> zipkin2.storage.InMemoryStorage.getTraces()",
                    "public synchronized Call<List<Span>> zipkin2.storage.InMemoryStorage.getTrace(String traceId)",
                    "Set<String> zipkin2.storage.InMemoryStorage.valueContainer()",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getValues(String key)",
                    "List<Span> zipkin2.storage.InMemoryStorage.spansByTraceId(String lowTraceId)"
                ],
                "zipkin/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public boolean zipkin2.storage.QueryRequest.test(List<Span> spans)",
                    "public Builder zipkin2.storage.QueryRequest.parseAnnotationQuery(@Nullable String annotationQuery)"
                ],
                "zipkin/src/main/java/zipkin2/storage/StrictTraceId.java": [
                    "static boolean zipkin2.storage.StrictTraceId.hasClashOnLowerTraceId(List<List<Span>> input)"
                ],
                "zipkin/src/main/java/zipkin2/v1/V1Annotation.java": [
                    "public boolean zipkin2.v1.V1Annotation.equals(Object o)"
                ],
                "zipkin/src/main/java/zipkin2/v1/V1BinaryAnnotation.java": [
                    "public boolean zipkin2.v1.V1BinaryAnnotation.equals(Object o)"
                ],
                "zipkin/src/main/java/zipkin2/v1/V1Span.java": [
                    "public boolean zipkin2.v1.V1Span.equals(Object o)",
                    "static <T extends Comparable<T>> List<T> zipkin2.v1.V1Span.sortedList(List<T> input)",
                    "public Builder zipkin2.v1.V1Span.addAnnotation(long timestamp, String value, @Nullable Endpoint endpoint)",
                    "public Builder zipkin2.v1.V1Span.addBinaryAnnotation(String address, Endpoint endpoint)",
                    "public Builder zipkin2.v1.V1Span.addBinaryAnnotation(String key, String value, Endpoint endpoint)"
                ],
                "zipkin/src/main/java/zipkin2/v1/V1SpanConverter.java": [
                    "void zipkin2.v1.V1SpanConverter.finish(Collection<Span> sink)",
                    "public List<Span> zipkin2.v1.V1SpanConverter.convert(V1Span source)",
                    "static boolean zipkin2.v1.V1SpanConverter.hasSameServiceName(Endpoint left, @Nullable Endpoint right)",
                    "Span.Builder zipkin2.v1.V1SpanConverter.forEndpoint(V1Span source, @Nullable zipkin2.Endpoint e)",
                    "void zipkin2.v1.V1SpanConverter.handleIncompleteRpc(V1Span source)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "12cae10958370b64fbbc450ae31c1a0a642114f4",
        "previous_commit": "62dd3a835359759ef8cf3043516b5f78359e3973",
        "date": 1602974329,
        "releases": {
            "previous": "12cae10958370b64fbbc450ae31c1a0a642114f4",
            "next": "12cae10958370b64fbbc450ae31c1a0a642114f4"
        },
        "commit_message": "Refactors Cassandra queries so they are cheaper and easier to migrate (#3243)\n\nBefore, we used labels a lot, and generally a lot of query builder code.\r\nThis switches most to positional syntax, which is cheaper and easier to\r\nmigrate to cassandra driver 4.\r\n\r\nThis also reformats everything to make the migration feel like less\r\nchange.\r\n\r\nFinally, this consolidates as much code as possible, notably repetitive\r\ninserts and queries, again to reduce the heft needed to upgrade later.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "12cae10958370b64fbbc450ae31c1a0a642114f4": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/AccumulateTraceIdTsLong.java": [
                    "protected BiConsumer<Row, Set<Pair>> zipkin2.storage.cassandra.v1.AccumulateTraceIdTsLong.accumulator()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.v1.CassandraSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public Builder zipkin2.storage.cassandra.v1.CassandraStorage.keyspace(String keyspace)",
                    "public SpanStore zipkin2.storage.cassandra.v1.CassandraStorage.spanStore()",
                    "public CassandraStorage zipkin2.storage.cassandra.v1.CassandraStorage.build()",
                    "public void zipkin2.storage.cassandra.v1.CassandraStorage.close()",
                    "public Builder zipkin2.storage.cassandra.v1.CassandraStorage.ensureSchema(boolean ensureSchema)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/IndexTraceId.java": [
                    "protected IndexTraceId zipkin2.storage.cassandra.v1.IndexTraceId.newCall(Input input)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.IndexTraceId.newFuture()",
                    "public IndexTraceId zipkin2.storage.cassandra.v1.IndexTraceId.clone()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/IndexTraceIdByAnnotation.java": [
                    "public Insert zipkin2.storage.cassandra.v1.IndexTraceIdByAnnotation.declarePartitionKey(Insert insert)",
                    "public BoundStatement zipkin2.storage.cassandra.v1.IndexTraceIdByAnnotation.bindPartitionKey(BoundStatement bound, String partitionKey)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/IndexTraceIdByRemoteServiceName.java": [
                    "public BoundStatement zipkin2.storage.cassandra.v1.IndexTraceIdByRemoteServiceName.bindPartitionKey(BoundStatement bound, String partitionKey)",
                    "public Insert zipkin2.storage.cassandra.v1.IndexTraceIdByRemoteServiceName.declarePartitionKey(Insert insert)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/IndexTraceIdByServiceName.java": [
                    "public BoundStatement zipkin2.storage.cassandra.v1.IndexTraceIdByServiceName.bindPartitionKey(BoundStatement bound, String partitionKey)",
                    "public Insert zipkin2.storage.cassandra.v1.IndexTraceIdByServiceName.declarePartitionKey(Insert insert)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/IndexTraceIdBySpanName.java": [
                    "public Insert zipkin2.storage.cassandra.v1.IndexTraceIdBySpanName.declarePartitionKey(Insert insert)",
                    "public BoundStatement zipkin2.storage.cassandra.v1.IndexTraceIdBySpanName.bindPartitionKey(BoundStatement bound, String partitionKey)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertServiceName.java": [
                    "public InsertServiceName zipkin2.storage.cassandra.v1.InsertServiceName.clone()",
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.InsertServiceName.newFuture()",
                    "protected InsertServiceName zipkin2.storage.cassandra.v1.InsertServiceName.newCall(String input)",
                    "public String zipkin2.storage.cassandra.v1.InsertServiceName.toString()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertTrace.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.InsertTrace.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectAutocompleteValues.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectAutocompleteValues.create(String key)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectAutocompleteValues.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectDependencies.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectDependencies.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectFromTraces.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectFromTraces.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectRemoteServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectRemoteServiceNames.create(String serviceName)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectRemoteServiceNames.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectServiceNames.create()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectSpanNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectSpanNames.create(String serviceName)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectSpanNames.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromServiceNames.java": [
                    "public String zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceNames.toString()",
                    "public Call<Set<Pair>> zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceNames.map(List<String> serviceNames)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java": [
                    "public Session zipkin2.storage.cassandra.v1.Default.create(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/TimestampCodec.java": [
                    "static ByteBuffer zipkin2.storage.cassandra.v1.TimestampCodec.serialize(long timestamp)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "static long zipkin2.storage.cassandra.CassandraSpanConsumer.guessTimestamp(Span span)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.CassandraSpanStore.newBucketedTraceIdCall( QueryRequest request, TimestampRange timestampRange, int traceIndexFetchSize)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public Builder zipkin2.storage.cassandra.CassandraStorage.keyspace(String keyspace)",
                    "public void zipkin2.storage.cassandra.CassandraStorage.close()",
                    "public final String zipkin2.storage.cassandra.CassandraStorage.toString()",
                    "public static Builder zipkin2.storage.cassandra.CassandraStorage.newBuilder()",
                    "public CassandraStorage zipkin2.storage.cassandra.CassandraStorage.build()",
                    "Session zipkin2.storage.cassandra.CassandraStorage.session()",
                    "public AutocompleteTags zipkin2.storage.cassandra.CassandraStorage.autocompleteTags()",
                    "public SpanStore zipkin2.storage.cassandra.CassandraStorage.spanStore()",
                    "public Builder zipkin2.storage.cassandra.CassandraStorage.ensureSchema(boolean ensureSchema)",
                    "public SpanConsumer zipkin2.storage.cassandra.CassandraStorage.spanConsumer()",
                    "Schema.Metadata zipkin2.storage.cassandra.CassandraStorage.metadata()",
                    "public Builder zipkin2.storage.cassandra.CassandraStorage.sessionFactory(SessionFactory sessionFactory)",
                    "public CheckResult zipkin2.storage.cassandra.CassandraStorage.check()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "public Session zipkin2.storage.cassandra.DefaultSessionFactory.create(CassandraStorage cassandra)",
                    "static Session zipkin2.storage.cassandra.DefaultSessionFactory.buildSession(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/InsertTraceByServiceRemoteService.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.InsertTraceByServiceRemoteService.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/InsertTraceByServiceSpan.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.InsertTraceByServiceSpan.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectAutocompleteValues.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectAutocompleteValues.create(String key)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectAutocompleteValues.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectDependencies.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectDependencies.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectFromSpan.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectRemoteServiceNames.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectRemoteServiceNames.newFuture()",
                    "Call<List<String>> zipkin2.storage.cassandra.SelectRemoteServiceNames.create(String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectServiceNames.create()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectSpanNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectSpanNames.create(String serviceName)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectSpanNames.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromServiceRemoteService.java": [
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceRemoteService.newCall(Input input)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectTraceIdsFromServiceRemoteService.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromServiceSpan.java": [
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceSpan.newCall(Input input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromSpan.java": [
                    "protected BiConsumer<Row, Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromSpan.accumulator()",
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromSpan.newCall( @Nullable String serviceName, String annotationKey, TimestampRange timestampRange, int limit)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/AccumulateAllResults.java": [
                    "protected Function<T, T> zipkin2.storage.cassandra.internal.call.AccumulateAllResults<T>.finisher()",
                    "protected ListenableFuture<ResultSet> zipkin2.storage.cassandra.internal.call.AccumulateAllResults<T>.newFuture()",
                    "public Call<T> zipkin2.storage.cassandra.internal.call.AccumulateAllResults<T>.map(ResultSet rs)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/AccumulateTraceIdTsUuid.java": [
                    "protected BiConsumer<Row, Map<String, Long>> zipkin2.storage.cassandra.internal.call.AccumulateTraceIdTsUuid.accumulator()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/DistinctSortedStrings.java": [
                    "protected BiConsumer<Row, List<String>> zipkin2.storage.cassandra.internal.call.DistinctSortedStrings.accumulator()",
                    "public String zipkin2.storage.cassandra.internal.call.DistinctSortedStrings.toString()"
                ]
            },
            "62dd3a835359759ef8cf3043516b5f78359e3973": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/AccumulateTraceIdTsLong.java": [
                    "protected BiConsumer<Row, Set<Pair>> zipkin2.storage.cassandra.v1.AccumulateTraceIdTsLong.accumulator()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.v1.CassandraSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public Builder zipkin2.storage.cassandra.v1.CassandraStorage.keyspace(String keyspace)",
                    "public SpanStore zipkin2.storage.cassandra.v1.CassandraStorage.spanStore()",
                    "public CassandraStorage zipkin2.storage.cassandra.v1.CassandraStorage.build()",
                    "public void zipkin2.storage.cassandra.v1.CassandraStorage.close()",
                    "public Builder zipkin2.storage.cassandra.v1.CassandraStorage.ensureSchema(boolean ensureSchema)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/IndexTraceId.java": [
                    "protected IndexTraceId zipkin2.storage.cassandra.v1.IndexTraceId.newCall(Input input)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.IndexTraceId.newFuture()",
                    "public IndexTraceId zipkin2.storage.cassandra.v1.IndexTraceId.clone()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/IndexTraceIdByAnnotation.java": [
                    "public Insert zipkin2.storage.cassandra.v1.IndexTraceIdByAnnotation.declarePartitionKey(Insert insert)",
                    "public BoundStatement zipkin2.storage.cassandra.v1.IndexTraceIdByAnnotation.bindPartitionKey(BoundStatement bound, String partitionKey)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/IndexTraceIdByRemoteServiceName.java": [
                    "public BoundStatement zipkin2.storage.cassandra.v1.IndexTraceIdByRemoteServiceName.bindPartitionKey(BoundStatement bound, String partitionKey)",
                    "public Insert zipkin2.storage.cassandra.v1.IndexTraceIdByRemoteServiceName.declarePartitionKey(Insert insert)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/IndexTraceIdByServiceName.java": [
                    "public BoundStatement zipkin2.storage.cassandra.v1.IndexTraceIdByServiceName.bindPartitionKey(BoundStatement bound, String partitionKey)",
                    "public Insert zipkin2.storage.cassandra.v1.IndexTraceIdByServiceName.declarePartitionKey(Insert insert)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/IndexTraceIdBySpanName.java": [
                    "public Insert zipkin2.storage.cassandra.v1.IndexTraceIdBySpanName.declarePartitionKey(Insert insert)",
                    "public BoundStatement zipkin2.storage.cassandra.v1.IndexTraceIdBySpanName.bindPartitionKey(BoundStatement bound, String partitionKey)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertServiceName.java": [
                    "public InsertServiceName zipkin2.storage.cassandra.v1.InsertServiceName.clone()",
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.InsertServiceName.newFuture()",
                    "protected InsertServiceName zipkin2.storage.cassandra.v1.InsertServiceName.newCall(String input)",
                    "public String zipkin2.storage.cassandra.v1.InsertServiceName.toString()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertTrace.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.InsertTrace.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectAutocompleteValues.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectAutocompleteValues.create(String key)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectAutocompleteValues.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectDependencies.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectDependencies.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectFromTraces.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectFromTraces.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectRemoteServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectRemoteServiceNames.create(String serviceName)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectRemoteServiceNames.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectServiceNames.create()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectSpanNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectSpanNames.create(String serviceName)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectSpanNames.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromServiceNames.java": [
                    "public String zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceNames.toString()",
                    "public Call<Set<Pair>> zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceNames.map(List<String> serviceNames)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java": [
                    "public Session zipkin2.storage.cassandra.v1.Default.create(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/TimestampCodec.java": [
                    "public ByteBuffer zipkin2.storage.cassandra.v1.TimestampCodec.serialize(long timestamp)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "static long zipkin2.storage.cassandra.CassandraSpanConsumer.guessTimestamp(Span span)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.CassandraSpanStore.newBucketedTraceIdCall( QueryRequest request, TimestampRange timestampRange, int traceIndexFetchSize)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public final String zipkin2.storage.cassandra.CassandraStorage.toString()",
                    "public static Builder zipkin2.storage.cassandra.CassandraStorage.newBuilder()",
                    "public synchronized void zipkin2.storage.cassandra.CassandraStorage.close()",
                    "public AutocompleteTags zipkin2.storage.cassandra.CassandraStorage.autocompleteTags()",
                    "Session zipkin2.storage.cassandra.CassandraStorage.session()",
                    "public SpanConsumer zipkin2.storage.cassandra.CassandraStorage.spanConsumer()",
                    "Schema.Metadata zipkin2.storage.cassandra.CassandraStorage.metadata()",
                    "public SpanStore zipkin2.storage.cassandra.CassandraStorage.spanStore()",
                    "public CheckResult zipkin2.storage.cassandra.CassandraStorage.check()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "public Session zipkin2.storage.cassandra.DefaultSessionFactory.create(CassandraStorage cassandra)",
                    "static Session zipkin2.storage.cassandra.DefaultSessionFactory.buildSession(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/InsertTraceByServiceRemoteService.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.InsertTraceByServiceRemoteService.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/InsertTraceByServiceSpan.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.InsertTraceByServiceSpan.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectAutocompleteValues.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectAutocompleteValues.create(String key)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectAutocompleteValues.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectDependencies.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectDependencies.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectFromSpan.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectRemoteServiceNames.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectRemoteServiceNames.newFuture()",
                    "Call<List<String>> zipkin2.storage.cassandra.SelectRemoteServiceNames.create(String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectServiceNames.create()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectSpanNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectSpanNames.create(String serviceName)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectSpanNames.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromServiceRemoteService.java": [
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceRemoteService.newCall(Input input)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectTraceIdsFromServiceRemoteService.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromServiceSpan.java": [
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceSpan.newCall(Input input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromSpan.java": [
                    "protected BiConsumer<Row, Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromSpan.accumulator()",
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromSpan.newCall( @Nullable String serviceName, String annotationKey, TimestampRange timestampRange, int limit)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/AccumulateAllResults.java": [
                    "protected Function<T, T> zipkin2.storage.cassandra.internal.call.AccumulateAllResults<T>.finisher()",
                    "protected ListenableFuture<ResultSet> zipkin2.storage.cassandra.internal.call.AccumulateAllResults<T>.newFuture()",
                    "public Call<T> zipkin2.storage.cassandra.internal.call.AccumulateAllResults<T>.map(ResultSet rs)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/AccumulateTraceIdTsUuid.java": [
                    "protected BiConsumer<Row, Map<String, Long>> zipkin2.storage.cassandra.internal.call.AccumulateTraceIdTsUuid.accumulator()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/DistinctSortedStrings.java": [
                    "protected BiConsumer<Row, List<String>> zipkin2.storage.cassandra.internal.call.DistinctSortedStrings.accumulator()",
                    "public String zipkin2.storage.cassandra.internal.call.DistinctSortedStrings.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "95ace09d004c92c225ffcf70782ea42a5825760a",
        "previous_commit": "22874711351e61976bda06d3f11dc1115008495c",
        "date": 1601363145,
        "releases": {
            "previous": "95ace09d004c92c225ffcf70782ea42a5825760a",
            "next": "95ace09d004c92c225ffcf70782ea42a5825760a"
        },
        "commit_message": "Allows use of JDK 15+ (#3216)\n\nThis allows builds to work with JDK 15+ even if that JDK cannot compile\r\nJava 1.6 anymore. Specifically, this removes Retrolambda, which formerly\r\nrewrote our main tree to 1.6 bytecode. We had to do this as Retrolambda\r\nno longer works in JDK 15.\r\n\r\nIn order to publish a JRE compatible 1.6 jar to Maven Central, we use\r\nJDK during the release process (Travis). To ensure normal usage and\r\nDocker can use JDK 15, we change our GitHub actions to use JDK 15.\r\n\r\nThis also adds a RATIONALE.md which covers the major aspects around\r\nsource, largely duplicated from Brave (though not exactly the same as\r\ncontext slightly differs here.)",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "95ace09d004c92c225ffcf70782ea42a5825760a": {
                "zipkin-junit/src/main/java/zipkin2/junit/ZipkinRule.java": [
                    "public ZipkinRule zipkin2.junit.ZipkinRule.storeSpans(List<Span> spans)",
                    "public List<Span> zipkin2.junit.ZipkinRule.getTrace(String traceId)"
                ],
                "zipkin/src/main/java/zipkin2/Call.java": [
                    "public static <T> Call<List<T>> zipkin2.Call<V>.emptyList()",
                    "public Call<V> zipkin2.Call<V>.clone()",
                    "public final Call<V> zipkin2.Call<V>.handleError(ErrorHandler<V> errorHandler)",
                    "public final <R> Call<R> zipkin2.Call<V>.flatMap(FlatMapper<V, R> flatMapper)",
                    "public Call<R> zipkin2.Call<V>.clone()",
                    "public final <R> Call<R> zipkin2.Call<V>.map(Mapper<V, R> mapper)",
                    "public static <V> Call<V> zipkin2.Call<V>.create(V v)"
                ],
                "zipkin/src/main/java/zipkin2/Endpoint.java": [
                    "static String zipkin2.Endpoint.writeIpV6(byte[] ipv6)",
                    "static String zipkin2.Endpoint.writeIpV4(byte[] ipBytes)"
                ],
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.addAnnotation(long timestamp, String value)",
                    "static String zipkin2.Span.toLowerHex(long v)",
                    "public Builder zipkin2.Span.putTag(String key, String value)",
                    "public Builder zipkin2.Span.merge(Span source)",
                    "public Builder zipkin2.Span.traceId(long high, long low)",
                    "static String zipkin2.Span.padLeft(String id, int desiredLength)"
                ],
                "zipkin/src/main/java/zipkin2/codec/DependencyLinkBytesDecoder.java": [
                    "public List<DependencyLink> decodeList(byte[] links)"
                ],
                "zipkin/src/main/java/zipkin2/codec/SpanBytesDecoder.java": [
                    "Span decodeOne(ReadBuffer buffer)",
                    "static List<Span> doDecodeList(SpanBytesDecoder decoder, ByteBuffer spans)",
                    "static List<Span> doDecodeList(SpanBytesDecoder decoder, byte[] spans)"
                ],
                "zipkin/src/main/java/zipkin2/internal/DateUtil.java": [
                    "public static List<Long> zipkin2.internal.DateUtil.epochDays(long endTs, long lookback)"
                ],
                "zipkin/src/main/java/zipkin2/internal/DelayLimiter.java": [
                    "public <C> DelayLimiter<C> zipkin2.internal.DelayLimiter<C>.build()",
                    "<C> Suppression<C> zipkin2.internal.DelayLimiter<C>.create(C context)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Dependencies.java": [
                    "public static Dependencies zipkin2.internal.Dependencies.fromThrift(ByteBuffer bytes)"
                ],
                "zipkin/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "public static List<DependencyLink> zipkin2.internal.DependencyLinker.merge(Iterable<DependencyLink> in)",
                    "static List<DependencyLink> zipkin2.internal.DependencyLinker.link(Map<Pair, Long> callCounts, Map<Pair, Long> errorCounts)"
                ],
                "zipkin/src/main/java/zipkin2/internal/FilterTraces.java": [
                    "public List<List<Span>> zipkin2.internal.FilterTraces.map(List<List<Span>> input)"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> byte[] zipkin2.internal.JsonCodec.write(WriteBuffer.Writer<T> writer, T value)",
                    "public static @Nullable <T> T zipkin2.internal.JsonCodec.readOne(JsonReaderAdapter<T> adapter, ReadBuffer buffer)"
                ],
                "zipkin/src/main/java/zipkin2/internal/ReadBuffer.java": [
                    "final String zipkin2.internal.ReadBuffer.readBytesAsHex(int length)",
                    "final String zipkin2.internal.ReadBuffer.readUtf8(int length)"
                ],
                "zipkin/src/main/java/zipkin2/internal/SpanNode.java": [
                    "void zipkin2.internal.SpanNode.sortTreeByTimestamp(SpanNode root)",
                    "SpanNode zipkin2.internal.SpanNode.addChild(SpanNode child)",
                    "public String zipkin2.internal.SpanNode.toString()"
                ],
                "zipkin/src/main/java/zipkin2/internal/ThriftCodec.java": [
                    "public static Span zipkin2.internal.ThriftCodec.readOne(ReadBuffer buffer)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Trace.java": [
                    "public static List<Span> zipkin2.internal.Trace.merge(List<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin2/internal/TracesAdapter.java": [
                    "protected List<List<Span>> zipkin2.internal.TracesAdapter.newOutput()",
                    "public Call<List<List<Span>>> zipkin2.internal.TracesAdapter.getTraces(Iterable<String> traceIds)",
                    "public List<List<Span>> zipkin2.internal.TracesAdapter.map(List<Span> input)"
                ],
                "zipkin/src/main/java/zipkin2/storage/GroupByTraceId.java": [
                    "public List<List<Span>> zipkin2.storage.GroupByTraceId.map(List<Span> input)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "Collection<String> zipkin2.storage.InMemoryStorage.valueContainer()",
                    "Collection<V> zipkin2.storage.InMemoryStorage.get(K key)",
                    "public synchronized List<List<Span>> zipkin2.storage.InMemoryStorage.getTraces()",
                    "static Collection<List<Span>> zipkin2.storage.InMemoryStorage.strictByTraceId(List<Span> next)",
                    "public synchronized Call<List<Span>> zipkin2.storage.InMemoryStorage.getTrace(String traceId)",
                    "Set<String> zipkin2.storage.InMemoryStorage.removeServiceIfTraceId(String lowTraceId)",
                    "Collection<TraceIdTimestamp> zipkin2.storage.InMemoryStorage.traceIdTimestampsByServiceName(String serviceName)",
                    "Collection<TraceIdTimestamp> zipkin2.storage.InMemoryStorage.valueContainer()",
                    "Collection<Span> zipkin2.storage.InMemoryStorage.valueContainer()",
                    "Set<String> zipkin2.storage.InMemoryStorage.traceIdsDescendingByTimestamp(QueryRequest request)",
                    "synchronized Call<List<List<Span>>> zipkin2.storage.InMemoryStorage.getTraces(QueryRequest request, boolean strictTraceId)",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getValues(String key)",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getServiceNames()",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getRemoteServiceNames(String service)",
                    "public synchronized Call<List<List<Span>>> zipkin2.storage.InMemoryStorage.getTraces(Iterable<String> traceIds)",
                    "List<Span> zipkin2.storage.InMemoryStorage.spansByTraceId(String lowTraceId)",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getSpanNames(String service)",
                    "Set<String> zipkin2.storage.InMemoryStorage.valueContainer()"
                ],
                "zipkin/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public boolean zipkin2.storage.QueryRequest.test(List<Span> spans)",
                    "public Builder zipkin2.storage.QueryRequest.parseAnnotationQuery(@Nullable String annotationQuery)"
                ],
                "zipkin/src/main/java/zipkin2/storage/StorageComponent.java": [
                    "public ServiceAndSpanNames zipkin2.storage.StorageComponent.serviceAndSpanNames()"
                ],
                "zipkin/src/main/java/zipkin2/storage/StrictTraceId.java": [
                    "static boolean zipkin2.storage.StrictTraceId.hasClashOnLowerTraceId(List<List<Span>> input)"
                ],
                "zipkin/src/main/java/zipkin2/v1/V1Span.java": [
                    "public Set<String> zipkin2.v1.V1Span.serviceNames()",
                    "static <T extends Comparable<T>> List<T> zipkin2.v1.V1Span.sortedList(List<T> input)",
                    "public Builder zipkin2.v1.V1Span.addAnnotation(long timestamp, String value, @Nullable Endpoint endpoint)",
                    "public Builder zipkin2.v1.V1Span.addBinaryAnnotation(String address, Endpoint endpoint)",
                    "public Builder zipkin2.v1.V1Span.addBinaryAnnotation(String key, String value, Endpoint endpoint)"
                ],
                "zipkin/src/main/java/zipkin2/v1/V1SpanConverter.java": [
                    "public List<Span> zipkin2.v1.V1SpanConverter.convert(V1Span source)"
                ]
            },
            "22874711351e61976bda06d3f11dc1115008495c": {
                "zipkin-junit/src/main/java/zipkin2/junit/ZipkinRule.java": [
                    "public ZipkinRule zipkin2.junit.ZipkinRule.storeSpans(List<Span> spans)",
                    "public List<Span> zipkin2.junit.ZipkinRule.getTrace(String traceId)"
                ],
                "zipkin/src/main/java/zipkin2/Call.java": [
                    "public static <T> Call<List<T>> zipkin2.Call<V>.emptyList()",
                    "public Call<V> zipkin2.Call<V>.clone()",
                    "public final Call<V> zipkin2.Call<V>.handleError(ErrorHandler<V> errorHandler)",
                    "public final <R> Call<R> zipkin2.Call<V>.flatMap(FlatMapper<V, R> flatMapper)",
                    "public Call<R> zipkin2.Call<V>.clone()",
                    "public final <R> Call<R> zipkin2.Call<V>.map(Mapper<V, R> mapper)",
                    "public static <V> Call<V> zipkin2.Call<V>.create(V v)"
                ],
                "zipkin/src/main/java/zipkin2/Endpoint.java": [
                    "static String zipkin2.Endpoint.writeIpV6(byte[] ipv6)",
                    "static String zipkin2.Endpoint.writeIpV4(byte[] ipBytes)"
                ],
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.addAnnotation(long timestamp, String value)",
                    "static String zipkin2.Span.toLowerHex(long v)",
                    "public Builder zipkin2.Span.putTag(String key, String value)",
                    "public Builder zipkin2.Span.merge(Span source)",
                    "public Builder zipkin2.Span.traceId(long high, long low)",
                    "static String zipkin2.Span.padLeft(String id, int desiredLength)"
                ],
                "zipkin/src/main/java/zipkin2/codec/DependencyLinkBytesDecoder.java": [
                    "public List<DependencyLink> decodeList(byte[] links)"
                ],
                "zipkin/src/main/java/zipkin2/codec/SpanBytesDecoder.java": [
                    "Span decodeOne(ReadBuffer buffer)",
                    "static List<Span> doDecodeList(SpanBytesDecoder decoder, ByteBuffer spans)",
                    "static List<Span> doDecodeList(SpanBytesDecoder decoder, byte[] spans)"
                ],
                "zipkin/src/main/java/zipkin2/internal/DateUtil.java": [
                    "public static List<Long> zipkin2.internal.DateUtil.epochDays(long endTs, long lookback)"
                ],
                "zipkin/src/main/java/zipkin2/internal/DelayLimiter.java": [
                    "public <C> DelayLimiter<C> zipkin2.internal.DelayLimiter<C>.build()",
                    "<C> Suppression<C> zipkin2.internal.DelayLimiter<C>.create(C context)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Dependencies.java": [
                    "public static Dependencies zipkin2.internal.Dependencies.fromThrift(ByteBuffer bytes)"
                ],
                "zipkin/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "public static List<DependencyLink> zipkin2.internal.DependencyLinker.merge(Iterable<DependencyLink> in)",
                    "static List<DependencyLink> zipkin2.internal.DependencyLinker.link(Map<Pair, Long> callCounts, Map<Pair, Long> errorCounts)"
                ],
                "zipkin/src/main/java/zipkin2/internal/FilterTraces.java": [
                    "public List<List<Span>> zipkin2.internal.FilterTraces.map(List<List<Span>> input)"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> byte[] zipkin2.internal.JsonCodec.write(WriteBuffer.Writer<T> writer, T value)",
                    "public static @Nullable <T> T zipkin2.internal.JsonCodec.readOne(JsonReaderAdapter<T> adapter, ReadBuffer buffer)"
                ],
                "zipkin/src/main/java/zipkin2/internal/ReadBuffer.java": [
                    "final String zipkin2.internal.ReadBuffer.readBytesAsHex(int length)",
                    "final String zipkin2.internal.ReadBuffer.readUtf8(int length)"
                ],
                "zipkin/src/main/java/zipkin2/internal/SpanNode.java": [
                    "void zipkin2.internal.SpanNode.sortTreeByTimestamp(SpanNode root)",
                    "SpanNode zipkin2.internal.SpanNode.addChild(SpanNode child)",
                    "public String zipkin2.internal.SpanNode.toString()"
                ],
                "zipkin/src/main/java/zipkin2/internal/ThriftCodec.java": [
                    "public static Span zipkin2.internal.ThriftCodec.readOne(ReadBuffer buffer)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Trace.java": [
                    "public static List<Span> zipkin2.internal.Trace.merge(List<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin2/internal/TracesAdapter.java": [
                    "protected List<List<Span>> zipkin2.internal.TracesAdapter.newOutput()",
                    "public Call<List<List<Span>>> zipkin2.internal.TracesAdapter.getTraces(Iterable<String> traceIds)",
                    "public List<List<Span>> zipkin2.internal.TracesAdapter.map(List<Span> input)"
                ],
                "zipkin/src/main/java/zipkin2/storage/GroupByTraceId.java": [
                    "public List<List<Span>> zipkin2.storage.GroupByTraceId.map(List<Span> input)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "Collection<String> zipkin2.storage.InMemoryStorage.valueContainer()",
                    "Collection<V> zipkin2.storage.InMemoryStorage.get(K key)",
                    "public synchronized List<List<Span>> zipkin2.storage.InMemoryStorage.getTraces()",
                    "static Collection<List<Span>> zipkin2.storage.InMemoryStorage.strictByTraceId(List<Span> next)",
                    "public synchronized Call<List<Span>> zipkin2.storage.InMemoryStorage.getTrace(String traceId)",
                    "Set<String> zipkin2.storage.InMemoryStorage.removeServiceIfTraceId(String lowTraceId)",
                    "Collection<TraceIdTimestamp> zipkin2.storage.InMemoryStorage.traceIdTimestampsByServiceName(String serviceName)",
                    "Collection<TraceIdTimestamp> zipkin2.storage.InMemoryStorage.valueContainer()",
                    "Collection<Span> zipkin2.storage.InMemoryStorage.valueContainer()",
                    "Set<String> zipkin2.storage.InMemoryStorage.traceIdsDescendingByTimestamp(QueryRequest request)",
                    "synchronized Call<List<List<Span>>> zipkin2.storage.InMemoryStorage.getTraces(QueryRequest request, boolean strictTraceId)",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getValues(String key)",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getServiceNames()",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getRemoteServiceNames(String service)",
                    "public synchronized Call<List<List<Span>>> zipkin2.storage.InMemoryStorage.getTraces(Iterable<String> traceIds)",
                    "List<Span> zipkin2.storage.InMemoryStorage.spansByTraceId(String lowTraceId)",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getSpanNames(String service)",
                    "Set<String> zipkin2.storage.InMemoryStorage.valueContainer()"
                ],
                "zipkin/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public boolean zipkin2.storage.QueryRequest.test(List<Span> spans)",
                    "public Builder zipkin2.storage.QueryRequest.parseAnnotationQuery(@Nullable String annotationQuery)"
                ],
                "zipkin/src/main/java/zipkin2/storage/StorageComponent.java": [
                    "public ServiceAndSpanNames zipkin2.storage.StorageComponent.serviceAndSpanNames()"
                ],
                "zipkin/src/main/java/zipkin2/storage/StrictTraceId.java": [
                    "static boolean zipkin2.storage.StrictTraceId.hasClashOnLowerTraceId(List<List<Span>> input)"
                ],
                "zipkin/src/main/java/zipkin2/v1/V1Span.java": [
                    "public Set<String> zipkin2.v1.V1Span.serviceNames()",
                    "static <T extends Comparable<T>> List<T> zipkin2.v1.V1Span.sortedList(List<T> input)",
                    "public Builder zipkin2.v1.V1Span.addAnnotation(long timestamp, String value, @Nullable Endpoint endpoint)",
                    "public Builder zipkin2.v1.V1Span.addBinaryAnnotation(String address, Endpoint endpoint)",
                    "public Builder zipkin2.v1.V1Span.addBinaryAnnotation(String key, String value, Endpoint endpoint)"
                ],
                "zipkin/src/main/java/zipkin2/v1/V1SpanConverter.java": [
                    "public List<Span> zipkin2.v1.V1SpanConverter.convert(V1Span source)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a17f26022cdc953f01ff53b5e220dbe55109a62b",
        "previous_commit": "331e4e54b0462c39e1a95a2ad690938f67a58cb5",
        "date": 1471524005,
        "releases": {
            "previous": "a17f26022cdc953f01ff53b5e220dbe55109a62b",
            "next": "a17f26022cdc953f01ff53b5e220dbe55109a62b"
        },
        "commit_message": "Moves zipkin-core language level to JRE 6 (#1245)\n\nThis is an api compatible change to allow code sharing between zipkin\r\nserver and instrumentation, and without having to publish 2 jar files.\r\n\r\nWe accidentally broke the ability to make agent-based instrumentation by\r\ncompiling our model classes against Java 7 bytecode. Particularly, this\r\ncauses a regression in Brave.\r\n\r\nTo move back to Java 6 bytecode, we had to do a few things:\r\n* replace moshi internal dependency with gson, which is java 6 compliant\r\n* remove okio dependency and copy its Base64 class\r\n  * incidentally a class it also copied!\r\n* do variable-size buffer writes w/ OutputBuffer instead of okio\r\n* fix a few nags about diamond ops etc.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a17f26022cdc953f01ff53b5e220dbe55109a62b": {
                "zipkin/src/main/java/zipkin/Annotation.java": [
                    "public int zipkin.Annotation.compareTo(Annotation that)"
                ],
                "zipkin/src/main/java/zipkin/DependencyLink.java": [
                    "public String zipkin.DependencyLink.toString()"
                ],
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.addBinaryAnnotation(BinaryAnnotation binaryAnnotation)",
                    "public Set<String> zipkin.Span.serviceNames()",
                    "public String zipkin.Span.toString()",
                    "public int zipkin.Span.compareTo(Span that)",
                    "public Builder zipkin.Span.addAnnotation(Annotation annotation)",
                    "public Builder zipkin.Span.binaryAnnotations(Collection<BinaryAnnotation> binaryAnnotations)",
                    "public Builder zipkin.Span.annotations(Collection<Annotation> annotations)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "List<Span> zipkin.collector.Collector.sample(List<Span> input)",
                    "public void zipkin.collector.Collector.acceptSpans(List<byte[]> serializedSpans, Codec codec, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static Span zipkin.internal.CorrectForClockSkew.adjustTimestamps(Span span, ClockSkew skew)",
                    "public static List<Span> zipkin.internal.CorrectForClockSkew.apply(List<Span> spans)",
                    "static Map<String, Annotation> zipkin.internal.CorrectForClockSkew.asMap(List<Annotation> annotations)"
                ],
                "zipkin/src/main/java/zipkin/internal/Dependencies.java": [
                    "public void zipkin.internal.Dependencies.write(Dependencies value, Buffer buffer)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public List<DependencyLink> zipkin.internal.DependencyLinker.link()",
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<DependencyLinkSpan> spans)",
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(List<Span> spans)",
                    "public static List<DependencyLink> zipkin.internal.DependencyLinker.merge(Iterable<DependencyLink> in)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public Annotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public void zipkin.internal.JsonCodec.toJson(JsonWriter writer, BinaryAnnotation value)",
                    "public DependencyLink zipkin.internal.JsonCodec.readDependencyLink(byte[] bytes)",
                    "public Endpoint zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "static <T> List<T> zipkin.internal.JsonCodec.readList(JsonAdapter<T> adapter, byte[] bytes)",
                    "public BinaryAnnotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public byte[] zipkin.internal.JsonCodec.writeSpan(Span value)",
                    "public String zipkin.internal.JsonCodec.toString()",
                    "public Span zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public byte[] zipkin.internal.JsonCodec.writeTraces(List<List<Span>> traces)",
                    "public DependencyLink zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public byte[] zipkin.internal.JsonCodec.writeDependencyLink(DependencyLink value)",
                    "static <T> byte[] zipkin.internal.JsonCodec.writeList(JsonAdapter<T> adapter, List<T> values)",
                    "public Span zipkin.internal.JsonCodec.readSpan(byte[] bytes)",
                    "public List<List<Span>> zipkin.internal.JsonCodec.readTraces(byte[] bytes)"
                ],
                "zipkin/src/main/java/zipkin/internal/MergeById.java": [
                    "public static List<Span> zipkin.internal.MergeById.apply(Collection<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/Node.java": [
                    "public Iterator<Node<V>> zipkin.internal.Node<V>.traverse()",
                    "public Node<V> zipkin.internal.Node<V>.addChild(Node<V> child)",
                    "static Node<Span> zipkin.internal.Node<V>.constructTree(List<Span> trace)"
                ],
                "zipkin/src/main/java/zipkin/internal/Pair.java": [
                    "public static <T> Pair<T> zipkin.internal.Pair<T>.create(T _1, T _2)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "void zipkin.internal.ThriftCodec.write(Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Span value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Endpoint value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Annotation value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(DependencyLink value, Buffer buffer)",
                    "static void zipkin.internal.ThriftCodec.writeListBegin(Buffer buffer, int size)",
                    "static <T> byte[] zipkin.internal.ThriftCodec.write(ThriftWriter<T> writer, T value)",
                    "static <T> List<T> zipkin.internal.ThriftCodec.readList(ThriftReader<T> reader, ByteBuffer bytes)",
                    "public void zipkin.internal.ThriftCodec.write(BinaryAnnotation value, Buffer buffer)"
                ],
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static List<Date> zipkin.internal.Util.getDays(long endTs, @Nullable Long lookback)"
                ],
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "public List<DependencyLink> zipkin.storage.InMemorySpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "Set<Pair<Long>> zipkin.storage.InMemorySpanStore.valueContainer()",
                    "static boolean zipkin.storage.InMemorySpanStore.test(QueryRequest request, List<Span> spans)",
                    "Set<Long> zipkin.storage.InMemorySpanStore.traceIdsDescendingByTimestamp(@Nullable String serviceName)",
                    "public synchronized List<List<Span>> zipkin.storage.InMemorySpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin/src/main/java/zipkin/storage/InternalAsyncToBlockingSpanStoreAdapter.java": [
                    "public List<String> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getSpanNames(String serviceName)",
                    "public List<Span> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getTrace(long id)",
                    "public List<Span> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getRawTrace(long traceId)",
                    "public List<List<Span>> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getTraces(QueryRequest request)",
                    "public List<DependencyLink> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getDependencies(long endTs, @Nullable Long lookback)",
                    "public List<String> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getServiceNames()"
                ],
                "zipkin/src/main/java/zipkin/storage/InternalCallbackRunnable.java": [
                    "public void zipkin.storage.InternalCallbackRunnable<V>.run()"
                ]
            },
            "331e4e54b0462c39e1a95a2ad690938f67a58cb5": {
                "zipkin/src/main/java/zipkin/Annotation.java": [
                    "public int zipkin.Annotation.compareTo(Annotation that)"
                ],
                "zipkin/src/main/java/zipkin/DependencyLink.java": [
                    "public String zipkin.DependencyLink.toString()"
                ],
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.addBinaryAnnotation(BinaryAnnotation binaryAnnotation)",
                    "public Set<String> zipkin.Span.serviceNames()",
                    "public String zipkin.Span.toString()",
                    "public int zipkin.Span.compareTo(Span that)",
                    "public Builder zipkin.Span.addAnnotation(Annotation annotation)",
                    "public Builder zipkin.Span.binaryAnnotations(Collection<BinaryAnnotation> binaryAnnotations)",
                    "public Builder zipkin.Span.annotations(Collection<Annotation> annotations)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "List<Span> zipkin.collector.Collector.sample(List<Span> input)",
                    "public void zipkin.collector.Collector.acceptSpans(List<byte[]> serializedSpans, Codec codec, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static Span zipkin.internal.CorrectForClockSkew.adjustTimestamps(Span span, ClockSkew skew)",
                    "public static List<Span> zipkin.internal.CorrectForClockSkew.apply(List<Span> spans)",
                    "static Map<String, Annotation> zipkin.internal.CorrectForClockSkew.asMap(List<Annotation> annotations)"
                ],
                "zipkin/src/main/java/zipkin/internal/Dependencies.java": [
                    "public void zipkin.internal.Dependencies.write(Dependencies value, Buffer buffer)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public List<DependencyLink> zipkin.internal.DependencyLinker.link()",
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<DependencyLinkSpan> spans)",
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(List<Span> spans)",
                    "public static List<DependencyLink> zipkin.internal.DependencyLinker.merge(Iterable<DependencyLink> in)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public Annotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public void zipkin.internal.JsonCodec.toJson(JsonWriter writer, BinaryAnnotation value)",
                    "public DependencyLink zipkin.internal.JsonCodec.readDependencyLink(byte[] bytes)",
                    "public Endpoint zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "static <T> List<T> zipkin.internal.JsonCodec.readList(JsonAdapter<T> adapter, byte[] bytes)",
                    "public BinaryAnnotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public byte[] zipkin.internal.JsonCodec.writeSpan(Span value)",
                    "public String zipkin.internal.JsonCodec.toString()",
                    "public Span zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public byte[] zipkin.internal.JsonCodec.writeTraces(List<List<Span>> traces)",
                    "public DependencyLink zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public byte[] zipkin.internal.JsonCodec.writeDependencyLink(DependencyLink value)",
                    "static <T> byte[] zipkin.internal.JsonCodec.writeList(JsonAdapter<T> adapter, List<T> values)",
                    "public Span zipkin.internal.JsonCodec.readSpan(byte[] bytes)",
                    "public List<List<Span>> zipkin.internal.JsonCodec.readTraces(byte[] bytes)"
                ],
                "zipkin/src/main/java/zipkin/internal/MergeById.java": [
                    "public static List<Span> zipkin.internal.MergeById.apply(Collection<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/Node.java": [
                    "public Iterator<Node<V>> zipkin.internal.Node<V>.traverse()",
                    "public Node<V> zipkin.internal.Node<V>.addChild(Node<V> child)",
                    "static Node<Span> zipkin.internal.Node<V>.constructTree(List<Span> trace)"
                ],
                "zipkin/src/main/java/zipkin/internal/Pair.java": [
                    "public static <T> Pair<T> zipkin.internal.Pair<T>.create(T _1, T _2)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "void zipkin.internal.ThriftCodec.write(Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Span value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Endpoint value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Annotation value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(DependencyLink value, Buffer buffer)",
                    "static void zipkin.internal.ThriftCodec.writeListBegin(Buffer buffer, int size)",
                    "static <T> byte[] zipkin.internal.ThriftCodec.write(ThriftWriter<T> writer, T value)",
                    "static <T> List<T> zipkin.internal.ThriftCodec.readList(ThriftReader<T> reader, ByteBuffer bytes)",
                    "public void zipkin.internal.ThriftCodec.write(BinaryAnnotation value, Buffer buffer)"
                ],
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static List<Date> zipkin.internal.Util.getDays(long endTs, @Nullable Long lookback)"
                ],
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "public List<DependencyLink> zipkin.storage.InMemorySpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "Set<Pair<Long>> zipkin.storage.InMemorySpanStore.valueContainer()",
                    "static boolean zipkin.storage.InMemorySpanStore.test(QueryRequest request, List<Span> spans)",
                    "Set<Long> zipkin.storage.InMemorySpanStore.traceIdsDescendingByTimestamp(@Nullable String serviceName)",
                    "public synchronized List<List<Span>> zipkin.storage.InMemorySpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin/src/main/java/zipkin/storage/InternalAsyncToBlockingSpanStoreAdapter.java": [
                    "public List<String> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getSpanNames(String serviceName)",
                    "public List<Span> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getTrace(long id)",
                    "public List<Span> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getRawTrace(long traceId)",
                    "public List<List<Span>> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getTraces(QueryRequest request)",
                    "public List<DependencyLink> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getDependencies(long endTs, @Nullable Long lookback)",
                    "public List<String> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getServiceNames()"
                ],
                "zipkin/src/main/java/zipkin/storage/InternalCallbackRunnable.java": [
                    "public void zipkin.storage.InternalCallbackRunnable<V>.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8a33b2a6d3ce87cf3a43785b991bc6456965735b",
        "previous_commit": "bbbc721fead729abf20fb8171d4277121865494d",
        "date": 1504327684,
        "releases": {
            "previous": "8a33b2a6d3ce87cf3a43785b991bc6456965735b",
            "next": "8a33b2a6d3ce87cf3a43785b991bc6456965735b"
        },
        "commit_message": "Changes v2 IDs and IPs to validated Strings (#1721)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8a33b2a6d3ce87cf3a43785b991bc6456965735b": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "MockResponse zipkin.junit.ZipkinDispatcher.queryV2(HttpUrl url)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV2.java": [
                    "public String zipkin.server.ZipkinQueryApiV2.getTrace(@PathVariable String traceIdHex, WebRequest request)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "static byte[] zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.prefixWithTimestampMillisAndQuery(Span span, @Nullable Long timestampMillis)",
                    "void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.indexSpans(BulkSpanIndexer indexer, List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "static List<List<Span>> zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.groupByTraceId(Collection<Span> input, boolean strictTraceId)",
                    "public Call<List<List<Span>>> zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public Span zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)",
                    "public Endpoint zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)",
                    "public Annotation zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyJsonAdapters.java": [
                    "public Span zipkin.storage.elasticsearch.http.LegacyJsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkV2SpanIterator.java": [
                    "static Endpoint zipkin.storage.mysql.DependencyLinkV2SpanIterator.ep(@Nullable String serviceName)",
                    "public Span zipkin.storage.mysql.DependencyLinkV2SpanIterator.next()"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "public void zipkin.collector.Collector.acceptSpans(byte[] serializedSpans, SpanDecoder decoder, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static List<Span> zipkin.internal.CorrectForClockSkew.apply(Logger logger, List<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public byte[] writeTraces(List<List<Span>> traces)"
                ],
                "zipkin/src/main/java/zipkin/internal/Node.java": [
                    "public Node<V> zipkin.internal.Node<V>.build()"
                ],
                "zipkin/src/main/java/zipkin/internal/V2Collector.java": [
                    "protected boolean zipkin.internal.V2Collector.isSampled(Span span)",
                    "protected String zipkin.internal.V2Collector.idString(Span span)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2JsonSpanDecoder.java": [
                    "public List<zipkin.Span> zipkin.internal.V2JsonSpanDecoder.readSpans(byte[] span)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanConverter.java": [
                    "Span.Builder zipkin.internal.V2SpanConverter.forEndpoint(zipkin.Span source, @Nullable zipkin.Endpoint e)",
                    "void zipkin.internal.V2SpanConverter.processAnnotations(zipkin.Span source)",
                    "public static zipkin.Span zipkin.internal.V2SpanConverter.toSpan(Span in)",
                    "static Span.Builder zipkin.internal.V2SpanConverter.newBuilder(zipkin.Span source)",
                    "void zipkin.internal.V2SpanConverter.processBinaryAnnotations(zipkin.Span source)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanStoreAdapter.java": [
                    "Call<List<zipkin.Span>> zipkin.internal.V2SpanStoreAdapter.getRawTraceCall(long traceIdHigh, long traceIdLow)",
                    "Call<List<zipkin.Span>> zipkin.internal.V2SpanStoreAdapter.getTraceCall(long traceIdHigh, long traceIdLow)",
                    "public List<String> zipkin.internal.V2SpanStoreAdapter.getServiceNames()",
                    "public List<String> zipkin.internal.V2SpanStoreAdapter.getSpanNames(String serviceName)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/Span.java": [
                    "public String zipkin.internal.v2.Span.remoteServiceName()",
                    "public Builder zipkin.internal.v2.Span.parentId(@Nullable String parentId)",
                    "public Builder zipkin.internal.v2.Span.clear()",
                    "public String zipkin.internal.v2.Span.toString()",
                    "public Span zipkin.internal.v2.Span.build()",
                    "public Builder zipkin.internal.v2.Span.traceId(String traceId)",
                    "public Builder zipkin.internal.v2.Span.id(String id)",
                    "public Builder zipkin.internal.v2.Span.clone()",
                    "public Builder zipkin.internal.v2.Span.addAnnotation(long timestamp, String value)",
                    "public Builder zipkin.internal.v2.Span.putTag(String key, String value)",
                    "public String zipkin.internal.v2.Span.localServiceName()"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/codec/Span2JsonAdapters.java": [
                    "public void zipkin.internal.v2.codec.Span2JsonAdapters.write(Annotation value, Buffer b)",
                    "public void zipkin.internal.v2.codec.Span2JsonAdapters.write(Span value, Buffer b)",
                    "public Span zipkin.internal.v2.codec.Span2JsonAdapters.fromJson(JsonReader reader)",
                    "public int zipkin.internal.v2.codec.Span2JsonAdapters.sizeInBytes(Span value)",
                    "public int zipkin.internal.v2.codec.Span2JsonAdapters.sizeInBytes(Annotation value)",
                    "public void zipkin.internal.v2.codec.Span2JsonAdapters.write(Endpoint value, Buffer b)",
                    "public int zipkin.internal.v2.codec.Span2JsonAdapters.sizeInBytes(Endpoint value)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/storage/InMemoryStorage.java": [
                    "public synchronized Call<List<String>> zipkin.internal.v2.storage.InMemoryStorage.getServiceNames()",
                    "public synchronized Call<List<String>> zipkin.internal.v2.storage.InMemoryStorage.getSpanNames(String service)",
                    "public synchronized List<List<Span>> zipkin.internal.v2.storage.InMemoryStorage.getTraces()",
                    "synchronized public Call<Void> zipkin.internal.v2.storage.InMemoryStorage.accept(List<Span> spans)",
                    "private int zipkin.internal.v2.storage.InMemoryStorage.deleteOldestTrace()",
                    "synchronized Call<List<List<Span>>> zipkin.internal.v2.storage.InMemoryStorage.getTraces(QueryRequest request, boolean strictTraceId)",
                    "static Collection<List<Span>> zipkin.internal.v2.storage.InMemoryStorage.strictByTraceId(List<Span> next)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/storage/QueryRequest.java": [
                    "public boolean zipkin.internal.v2.storage.QueryRequest.test(List<Span> spans)"
                ]
            },
            "bbbc721fead729abf20fb8171d4277121865494d": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "MockResponse zipkin.junit.ZipkinDispatcher.queryV2(HttpUrl url)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV2.java": [
                    "public String zipkin.server.ZipkinQueryApiV2.getTrace(@PathVariable String traceIdHex, WebRequest request)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "static byte[] zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.prefixWithTimestampMillisAndQuery(Span span, @Nullable Long timestampMillis)",
                    "void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.indexSpans(BulkSpanIndexer indexer, List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "static List<List<Span>> zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.groupByTraceId(Collection<Span> input, boolean strictTraceId)",
                    "public Call<List<List<Span>>> zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public Span zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)",
                    "public Endpoint zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)",
                    "public Annotation zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyJsonAdapters.java": [
                    "public Span zipkin.storage.elasticsearch.http.LegacyJsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkV2SpanIterator.java": [
                    "static Endpoint zipkin.storage.mysql.DependencyLinkV2SpanIterator.ep(@Nullable String serviceName)",
                    "public Span zipkin.storage.mysql.DependencyLinkV2SpanIterator.next()"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "public void zipkin.collector.Collector.acceptSpans(byte[] serializedSpans, SpanDecoder decoder, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static List<Span> zipkin.internal.CorrectForClockSkew.apply(Logger logger, List<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public byte[] writeTraces(List<List<Span>> traces)"
                ],
                "zipkin/src/main/java/zipkin/internal/Node.java": [
                    "public Node<V> zipkin.internal.Node<V>.build()"
                ],
                "zipkin/src/main/java/zipkin/internal/V2Collector.java": [
                    "protected boolean zipkin.internal.V2Collector.isSampled(Span span)",
                    "protected String zipkin.internal.V2Collector.idString(Span span)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2JsonSpanDecoder.java": [
                    "public List<zipkin.Span> zipkin.internal.V2JsonSpanDecoder.readSpans(byte[] span)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanConverter.java": [
                    "void zipkin.internal.V2SpanConverter.processAnnotations(zipkin.Span source)",
                    "Span.Builder zipkin.internal.V2SpanConverter.forEndpoint(zipkin.Span source, @Nullable Endpoint e)",
                    "public static zipkin.Span zipkin.internal.V2SpanConverter.toSpan(Span in)",
                    "static Span.Builder zipkin.internal.V2SpanConverter.newBuilder(zipkin.Span source)",
                    "void zipkin.internal.V2SpanConverter.processBinaryAnnotations(zipkin.Span source)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanStoreAdapter.java": [
                    "Call<List<zipkin.Span>> zipkin.internal.V2SpanStoreAdapter.getRawTraceCall(long traceIdHigh, long traceIdLow)",
                    "Call<List<zipkin.Span>> zipkin.internal.V2SpanStoreAdapter.getTraceCall(long traceIdHigh, long traceIdLow)",
                    "public List<String> zipkin.internal.V2SpanStoreAdapter.getServiceNames()",
                    "public List<String> zipkin.internal.V2SpanStoreAdapter.getSpanNames(String serviceName)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/Span.java": [
                    "public String zipkin.internal.v2.Span.remoteServiceName()",
                    "public Builder zipkin.internal.v2.Span.parentId(@Nullable String parentId)",
                    "public Builder zipkin.internal.v2.Span.clear()",
                    "public String zipkin.internal.v2.Span.toString()",
                    "public Span zipkin.internal.v2.Span.build()",
                    "public Builder zipkin.internal.v2.Span.traceId(String traceId)",
                    "public Builder zipkin.internal.v2.Span.id(String id)",
                    "public Builder zipkin.internal.v2.Span.clone()",
                    "public Builder zipkin.internal.v2.Span.addAnnotation(long timestamp, String value)",
                    "public Builder zipkin.internal.v2.Span.putTag(String key, String value)",
                    "public String zipkin.internal.v2.Span.localServiceName()"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/codec/Span2JsonAdapters.java": [
                    "public void zipkin.internal.v2.codec.Span2JsonAdapters.write(Annotation value, Buffer b)",
                    "public void zipkin.internal.v2.codec.Span2JsonAdapters.write(Span value, Buffer b)",
                    "public Span zipkin.internal.v2.codec.Span2JsonAdapters.fromJson(JsonReader reader)",
                    "public int zipkin.internal.v2.codec.Span2JsonAdapters.sizeInBytes(Span value)",
                    "public int zipkin.internal.v2.codec.Span2JsonAdapters.sizeInBytes(Annotation value)",
                    "public void zipkin.internal.v2.codec.Span2JsonAdapters.write(Endpoint value, Buffer b)",
                    "public int zipkin.internal.v2.codec.Span2JsonAdapters.sizeInBytes(Endpoint value)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/storage/InMemoryStorage.java": [
                    "public synchronized Call<List<String>> zipkin.internal.v2.storage.InMemoryStorage.getServiceNames()",
                    "public synchronized Call<List<String>> zipkin.internal.v2.storage.InMemoryStorage.getSpanNames(String service)",
                    "public synchronized List<List<Span>> zipkin.internal.v2.storage.InMemoryStorage.getTraces()",
                    "synchronized public Call<Void> zipkin.internal.v2.storage.InMemoryStorage.accept(List<Span> spans)",
                    "private int zipkin.internal.v2.storage.InMemoryStorage.deleteOldestTrace()",
                    "synchronized Call<List<List<Span>>> zipkin.internal.v2.storage.InMemoryStorage.getTraces(QueryRequest request, boolean strictTraceId)",
                    "static Collection<List<Span>> zipkin.internal.v2.storage.InMemoryStorage.strictByTraceId(List<Span> next)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/storage/QueryRequest.java": [
                    "public boolean zipkin.internal.v2.storage.QueryRequest.test(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7cd7b687aebe52db2923fdd0a7d827df1940ca8d",
        "previous_commit": "0478b2f209bcbe67860e8a7b210ec6d8f43bbe9c",
        "date": 1478924786,
        "releases": {
            "previous": "7cd7b687aebe52db2923fdd0a7d827df1940ca8d",
            "next": "7cd7b687aebe52db2923fdd0a7d827df1940ca8d"
        },
        "commit_message": "Supports querying traces with mixed-length trace IDs (#1385)\n\nUnless you only issue 128-bit traces when all applications support them,\r\nthe process of updating applications from 64 to 128-bit trace IDs results\r\nin a mixed state. This mixed state is mitigated by the setting\r\n`STRICT_TRACE_ID=false`, explained below. Once a migration is complete,\r\nremove the setting `STRICT_TRACE_ID=false` or set it to true.\r\n\r\nSupporting changes are:\r\n\r\n`SpanStore.getTrace(long traceIdHigh, long traceIdLow)`\r\n`StorageComponent.Builder.strictTraceId(boolean strictTraceId)`",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7cd7b687aebe52db2923fdd0a7d827df1940ca8d": {
                "zipkin-guava/src/main/java/zipkin/storage/guava/InternalGuavaSpanStoreAdapter.java": [
                    "public ListenableFuture<List<Span>> zipkin.storage.guava.InternalGuavaSpanStoreAdapter.getTrace(long id)",
                    "public ListenableFuture<List<Span>> zipkin.storage.guava.InternalGuavaSpanStoreAdapter.getRawTrace(long traceId)"
                ],
                "zipkin-guava/src/main/java/zipkin/storage/guava/InternalGuavaToAsyncSpanStoreAdapter.java": [
                    "public void zipkin.storage.guava.InternalGuavaToAsyncSpanStoreAdapter.getTrace(long id, Callback<List<Span>> callback)",
                    "public void zipkin.storage.guava.InternalGuavaToAsyncSpanStoreAdapter.getRawTrace(long traceId, Callback<List<Span>> callback)"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public List<List<Span>> zipkin.junit.ZipkinRule.getTraces()"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/TracedSpanStore.java": [
                    "public List<Span> zipkin.server.brave.TracedSpanStore.getTrace(long traceId)",
                    "public List<Span> zipkin.server.brave.TracedSpanStore.getRawTrace(long traceId)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.apply(Set<Long> traceIds)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "public List<Span> zipkin.storage.cassandra.CassandraSpanStore.apply(List<Span> input)",
                    "public ListenableFuture<List<Span>> zipkin.storage.cassandra.CassandraSpanStore.getRawTrace(long traceId)",
                    "public ListenableFuture<List<Span>> zipkin.storage.cassandra.CassandraSpanStore.getTrace(long traceId)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java": [
                    "protected CassandraSpanStore zipkin.storage.cassandra.CassandraStorage.computeGuavaSpanStore()"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Cassandra3Storage.java": [
                    "protected CassandraSpanStore zipkin.storage.cassandra3.Cassandra3Storage.computeGuavaSpanStore()",
                    "protected CassandraSpanConsumer zipkin.storage.cassandra3.Cassandra3Storage.computeGuavaSpanConsumer()"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeSpan(Span span, TraceIdUDT traceId, Long timestamp)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "public List<Span> zipkin.storage.cassandra3.CassandraSpanStore.apply(List<Span> input)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.apply(Collection<TraceIdUDT> traceIds)",
                    "public ListenableFuture<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.getRawTrace(long traceId)",
                    "public ListenableFuture<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.getTrace(long traceId)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Schema.java": [
                    "public String zipkin.storage.cassandra3.Schema.toString()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<Span>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTrace(long traceId)",
                    "public ListenableFuture<List<Span>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getRawTrace(long traceId)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.apply(List<String> input)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTraces(final QueryRequest request)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchStorage.java": [
                    "protected ElasticsearchSpanStore zipkin.storage.elasticsearch.ElasticsearchStorage.computeGuavaSpanStore()"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanConsumer.java": [
                    "public void zipkin.storage.mysql.MySQLSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "private Endpoint zipkin.storage.mysql.MySQLSpanStore.endpoint(Record a)",
                    "public List<Span> zipkin.storage.mysql.MySQLSpanStore.getRawTrace(long traceId)",
                    "public List<Span> zipkin.storage.mysql.MySQLSpanStore.getTrace(long traceId)",
                    "List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.aggregateDependencies(long endTs, @Nullable Long lookback, Connection conn)",
                    "public List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "public List<List<Span>> zipkin.storage.mysql.MySQLSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLStorage.java": [
                    "public AsyncSpanStore zipkin.storage.mysql.MySQLStorage.asyncSpanStore()",
                    "public SpanStore zipkin.storage.mysql.MySQLStorage.spanStore()",
                    "public AsyncSpanConsumer zipkin.storage.mysql.MySQLStorage.asyncSpanConsumer()"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinkSpan.java": [
                    "public String zipkin.internal.DependencyLinkSpan.toString()"
                ],
                "zipkin/src/main/java/zipkin/internal/MergeById.java": [
                    "public static List<Span> zipkin.internal.MergeById.apply(Collection<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "public List<Span> zipkin.storage.InMemorySpanStore.getTrace(long traceId)",
                    "public synchronized List<Long> zipkin.storage.InMemorySpanStore.traceIds()",
                    "public List<Span> zipkin.storage.InMemorySpanStore.getRawTrace(long traceId)",
                    "public List<DependencyLink> zipkin.storage.InMemorySpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "public synchronized List<List<Span>> zipkin.storage.InMemorySpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin/src/main/java/zipkin/storage/InternalAsyncToBlockingSpanStoreAdapter.java": [
                    "public List<Span> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getRawTrace(long traceId)",
                    "public List<Span> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getTrace(long id)"
                ],
                "zipkin/src/main/java/zipkin/storage/InternalBlockingToAsyncSpanStoreAdapter.java": [
                    "public void zipkin.storage.InternalBlockingToAsyncSpanStoreAdapter.getTrace(final long id, Callback<List<Span>> callback)",
                    "List<Span> zipkin.storage.InternalBlockingToAsyncSpanStoreAdapter.complete()",
                    "public void zipkin.storage.InternalBlockingToAsyncSpanStoreAdapter.getRawTrace(final long traceId, Callback<List<Span>> callback)"
                ]
            },
            "0478b2f209bcbe67860e8a7b210ec6d8f43bbe9c": {
                "zipkin-guava/src/main/java/zipkin/storage/guava/InternalGuavaSpanStoreAdapter.java": [
                    "public ListenableFuture<List<Span>> zipkin.storage.guava.InternalGuavaSpanStoreAdapter.getTrace(long id)",
                    "public ListenableFuture<List<Span>> zipkin.storage.guava.InternalGuavaSpanStoreAdapter.getRawTrace(long traceId)"
                ],
                "zipkin-guava/src/main/java/zipkin/storage/guava/InternalGuavaToAsyncSpanStoreAdapter.java": [
                    "public void zipkin.storage.guava.InternalGuavaToAsyncSpanStoreAdapter.getTrace(long id, Callback<List<Span>> callback)",
                    "public void zipkin.storage.guava.InternalGuavaToAsyncSpanStoreAdapter.getRawTrace(long traceId, Callback<List<Span>> callback)"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public List<List<Span>> zipkin.junit.ZipkinRule.getTraces()"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/TracedSpanStore.java": [
                    "public List<Span> zipkin.server.brave.TracedSpanStore.getTrace(long traceId)",
                    "public List<Span> zipkin.server.brave.TracedSpanStore.getRawTrace(long traceId)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.apply(Set<Long> traceIds)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "public List<Span> zipkin.storage.cassandra.CassandraSpanStore.apply(List<Span> input)",
                    "public ListenableFuture<List<Span>> zipkin.storage.cassandra.CassandraSpanStore.getRawTrace(long traceId)",
                    "public ListenableFuture<List<Span>> zipkin.storage.cassandra.CassandraSpanStore.getTrace(long traceId)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java": [
                    "protected CassandraSpanStore zipkin.storage.cassandra.CassandraStorage.computeGuavaSpanStore()"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Cassandra3Storage.java": [
                    "protected CassandraSpanStore zipkin.storage.cassandra3.Cassandra3Storage.computeGuavaSpanStore()",
                    "protected CassandraSpanConsumer zipkin.storage.cassandra3.Cassandra3Storage.computeGuavaSpanConsumer()"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeSpan(Span span, TraceIdUDT traceId, Long timestamp)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "public List<Span> zipkin.storage.cassandra3.CassandraSpanStore.apply(List<Span> input)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.apply(Collection<TraceIdUDT> traceIds)",
                    "public ListenableFuture<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.getRawTrace(long traceId)",
                    "public ListenableFuture<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.getTrace(long traceId)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Schema.java": [
                    "public String zipkin.storage.cassandra3.Schema.toString()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<Span>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTrace(long traceId)",
                    "public ListenableFuture<List<Span>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getRawTrace(long traceId)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.apply(List<String> input)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchStorage.java": [
                    "protected ElasticsearchSpanStore zipkin.storage.elasticsearch.ElasticsearchStorage.computeGuavaSpanStore()"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanConsumer.java": [
                    "public void zipkin.storage.mysql.MySQLSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "private Endpoint zipkin.storage.mysql.MySQLSpanStore.endpoint(Record a)",
                    "public List<Span> zipkin.storage.mysql.MySQLSpanStore.getRawTrace(long traceId)",
                    "public List<Span> zipkin.storage.mysql.MySQLSpanStore.getTrace(long traceId)",
                    "List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.aggregateDependencies(long endTs, @Nullable Long lookback, Connection conn)",
                    "public List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "public List<List<Span>> zipkin.storage.mysql.MySQLSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLStorage.java": [
                    "public AsyncSpanStore zipkin.storage.mysql.MySQLStorage.asyncSpanStore()",
                    "public SpanStore zipkin.storage.mysql.MySQLStorage.spanStore()",
                    "public AsyncSpanConsumer zipkin.storage.mysql.MySQLStorage.asyncSpanConsumer()"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinkSpan.java": [
                    "public String zipkin.internal.DependencyLinkSpan.toString()"
                ],
                "zipkin/src/main/java/zipkin/internal/MergeById.java": [
                    "public static List<Span> zipkin.internal.MergeById.apply(Collection<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "public synchronized List<Span> zipkin.storage.InMemorySpanStore.getRawTrace(long traceId)",
                    "public synchronized List<Long> zipkin.storage.InMemorySpanStore.traceIds()",
                    "public synchronized List<Span> zipkin.storage.InMemorySpanStore.getTrace(long traceId)",
                    "public List<DependencyLink> zipkin.storage.InMemorySpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "public synchronized List<List<Span>> zipkin.storage.InMemorySpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin/src/main/java/zipkin/storage/InternalAsyncToBlockingSpanStoreAdapter.java": [
                    "public List<Span> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getRawTrace(long traceId)",
                    "public List<Span> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getTrace(long id)"
                ],
                "zipkin/src/main/java/zipkin/storage/InternalBlockingToAsyncSpanStoreAdapter.java": [
                    "public void zipkin.storage.InternalBlockingToAsyncSpanStoreAdapter.getTrace(final long id, Callback<List<Span>> callback)",
                    "List<Span> zipkin.storage.InternalBlockingToAsyncSpanStoreAdapter.complete()",
                    "public void zipkin.storage.InternalBlockingToAsyncSpanStoreAdapter.getRawTrace(final long traceId, Callback<List<Span>> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ad8097a6fc9471799983b44ad8d2744c8506af74",
        "previous_commit": "827a14bda8f13fda3ce87f7ed1b39fce1e479ba8",
        "date": 1480926849,
        "releases": {
            "previous": "ad8097a6fc9471799983b44ad8d2744c8506af74",
            "next": "ad8097a6fc9471799983b44ad8d2744c8506af74"
        },
        "commit_message": "Uses RetroLambda to get rid of IDE setup and cruft (#1425)\n\nThis uses RetroLambda which allows you to use Java 8 source level even\r\nif your bytecode level is Java 6. This makes coding more fun and also\r\nobviates IDE setup needed to manage different source levels between main\r\nand test code trees.\r\n\r\nThis also moves modules who don't use Java 8 types back to language\r\nlevel 7.\r\n\r\nThe same has been in use by zipkin-reporter-java for some time.\r\n\r\nSee https://github.com/orfjackal/retrolambda",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ad8097a6fc9471799983b44ad8d2744c8506af74": {
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/brave/TraceZipkinCassandraStorageAutoConfiguration.java": [
                    "SessionFactory zipkin.autoconfigure.storage.cassandra.brave.TraceZipkinCassandraStorageAutoConfiguration.tracingSessionFactory()"
                ],
                "zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin/autoconfigure/storage/cassandra3/brave/TraceZipkinCassandra3StorageAutoConfiguration.java": [
                    "SessionFactory zipkin.autoconfigure.storage.cassandra3.brave.TraceZipkinCassandra3StorageAutoConfiguration.tracingSessionFactory()"
                ],
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaCollector.java": [
                    "Runnable zipkin.collector.kafka.KafkaCollector.guardFailures(final Runnable delegate)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public List<Span> zipkin.storage.cassandra.CassandraSpanStore.apply(ResultSet input)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.apply(Set<Long> traceIds)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "ListenableFuture<List<Span>> zipkin.storage.cassandra.CassandraSpanStore.getSpansByTraceIds(Set<Long> traceIds, int limit)",
                    "public List<List<Span>> zipkin.storage.cassandra.CassandraSpanStore.apply(List<Span> input)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "ListenableFuture<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.getSpansByTraceIds(Set<TraceIdUDT> traceIds, int limit)",
                    "public List<Span> zipkin.storage.cassandra3.CassandraSpanStore.apply(ResultSet input)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public List<List<Span>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.apply(List<Span> input)",
                    "ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTracesByIds(Collection<String> traceIds, String[] indices, final QueryRequest request)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/Schema.java": [
                    "static <T> List<T> zipkin.storage.mysql.Schema.list(T... elements)"
                ],
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.addBinaryAnnotation(BinaryAnnotation binaryAnnotation)",
                    "public Builder zipkin.Span.binaryAnnotations(Collection<BinaryAnnotation> binaryAnnotations)",
                    "public Builder zipkin.Span.addAnnotation(Annotation annotation)",
                    "public Set<String> zipkin.Span.serviceNames()",
                    "public Builder zipkin.Span.annotations(Collection<Annotation> annotations)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "List<Span> zipkin.collector.Collector.sample(List<Span> input)",
                    "public void zipkin.collector.Collector.acceptSpans(List<byte[]> serializedSpans, Codec codec, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static Span zipkin.internal.CorrectForClockSkew.adjustTimestamps(Span span, ClockSkew skew)",
                    "public static List<Span> zipkin.internal.CorrectForClockSkew.apply(List<Span> spans)",
                    "static Map<String, Annotation> zipkin.internal.CorrectForClockSkew.asMap(List<Annotation> annotations)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public List<DependencyLink> zipkin.internal.DependencyLinker.link()",
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Collection<Span> spans)",
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<DependencyLinkSpan> spans)",
                    "public static List<DependencyLink> zipkin.internal.DependencyLinker.merge(Iterable<DependencyLink> in)"
                ],
                "zipkin/src/main/java/zipkin/internal/GroupByTraceId.java": [
                    "public static List<List<Span>> zipkin.internal.GroupByTraceId.apply(Collection<Span> input, boolean strictTraceId, boolean adjust)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "static <T> List<T> zipkin.internal.JsonCodec.readList(JsonAdapter<T> adapter, byte[] bytes)",
                    "public List<List<Span>> zipkin.internal.JsonCodec.readTraces(byte[] bytes)"
                ],
                "zipkin/src/main/java/zipkin/internal/MergeById.java": [
                    "public static List<Span> zipkin.internal.MergeById.apply(Collection<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/Node.java": [
                    "public Iterator<Node<V>> zipkin.internal.Node<V>.traverse()",
                    "public Node<V> zipkin.internal.Node<V>.addChild(Node<V> child)",
                    "static Node<Span> zipkin.internal.Node<V>.constructTree(List<Span> trace)",
                    "public Node<V> zipkin.internal.Node<V>.build()"
                ],
                "zipkin/src/main/java/zipkin/internal/Pair.java": [
                    "public static <T> Pair<T> zipkin.internal.Pair<T>.create(T _1, T _2)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "static <T> List<T> zipkin.internal.ThriftCodec.readList(ThriftReader<T> reader, ByteBuffer bytes)"
                ],
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static List<Date> zipkin.internal.Util.getDays(long endTs, @Nullable Long lookback)"
                ],
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "Set<Long> zipkin.storage.InMemorySpanStore.traceIdsDescendingByTimestamp(QueryRequest request)",
                    "public synchronized List<List<Span>> zipkin.storage.InMemorySpanStore.getRawTraces()",
                    "public synchronized List<List<Span>> zipkin.storage.InMemorySpanStore.getTraces(QueryRequest request)",
                    "Set<Pair<Long>> zipkin.storage.InMemorySpanStore.valueContainer()",
                    "public synchronized List<Span> zipkin.storage.InMemorySpanStore.getRawTrace(long traceIdHigh, long traceId)"
                ],
                "zipkin/src/main/java/zipkin/storage/InternalAsyncToBlockingSpanStoreAdapter.java": [
                    "public List<String> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getSpanNames(String serviceName)",
                    "public List<List<Span>> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getTraces(QueryRequest request)",
                    "public List<Span> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getTrace(long traceIdHigh, long traceIdLow)",
                    "public List<DependencyLink> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getDependencies(long endTs, @Nullable Long lookback)",
                    "public List<String> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getServiceNames()",
                    "public List<Span> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getRawTrace(long traceIdHigh, long traceIdLow)"
                ],
                "zipkin/src/main/java/zipkin/storage/QueryRequest.java": [
                    "public boolean zipkin.storage.QueryRequest.test(List<Span> spans)"
                ]
            },
            "827a14bda8f13fda3ce87f7ed1b39fce1e479ba8": {
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/brave/TraceZipkinCassandraStorageAutoConfiguration.java": [
                    "SessionFactory zipkin.autoconfigure.storage.cassandra.brave.TraceZipkinCassandraStorageAutoConfiguration.tracingSessionFactory()"
                ],
                "zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin/autoconfigure/storage/cassandra3/brave/TraceZipkinCassandra3StorageAutoConfiguration.java": [
                    "SessionFactory zipkin.autoconfigure.storage.cassandra3.brave.TraceZipkinCassandra3StorageAutoConfiguration.tracingSessionFactory()"
                ],
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaCollector.java": [
                    "Runnable zipkin.collector.kafka.KafkaCollector.guardFailures(final Runnable delegate)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public List<Span> zipkin.storage.cassandra.CassandraSpanStore.apply(ResultSet input)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.apply(Set<Long> traceIds)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "ListenableFuture<List<Span>> zipkin.storage.cassandra.CassandraSpanStore.getSpansByTraceIds(Set<Long> traceIds, int limit)",
                    "public List<List<Span>> zipkin.storage.cassandra.CassandraSpanStore.apply(List<Span> input)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "ListenableFuture<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.getSpansByTraceIds(Set<TraceIdUDT> traceIds, int limit)",
                    "public List<Span> zipkin.storage.cassandra3.CassandraSpanStore.apply(ResultSet input)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public List<List<Span>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.apply(List<Span> input)",
                    "ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTracesByIds(Collection<String> traceIds, String[] indices, final QueryRequest request)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/Schema.java": [
                    "static <T> List<T> zipkin.storage.mysql.Schema.list(T... elements)"
                ],
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.addBinaryAnnotation(BinaryAnnotation binaryAnnotation)",
                    "public Builder zipkin.Span.binaryAnnotations(Collection<BinaryAnnotation> binaryAnnotations)",
                    "public Builder zipkin.Span.addAnnotation(Annotation annotation)",
                    "public Set<String> zipkin.Span.serviceNames()",
                    "public Builder zipkin.Span.annotations(Collection<Annotation> annotations)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "List<Span> zipkin.collector.Collector.sample(List<Span> input)",
                    "public void zipkin.collector.Collector.acceptSpans(List<byte[]> serializedSpans, Codec codec, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static Span zipkin.internal.CorrectForClockSkew.adjustTimestamps(Span span, ClockSkew skew)",
                    "public static List<Span> zipkin.internal.CorrectForClockSkew.apply(List<Span> spans)",
                    "static Map<String, Annotation> zipkin.internal.CorrectForClockSkew.asMap(List<Annotation> annotations)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public List<DependencyLink> zipkin.internal.DependencyLinker.link()",
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Collection<Span> spans)",
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<DependencyLinkSpan> spans)",
                    "public static List<DependencyLink> zipkin.internal.DependencyLinker.merge(Iterable<DependencyLink> in)"
                ],
                "zipkin/src/main/java/zipkin/internal/GroupByTraceId.java": [
                    "public static List<List<Span>> zipkin.internal.GroupByTraceId.apply(Collection<Span> input, boolean strictTraceId, boolean adjust)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "static <T> List<T> zipkin.internal.JsonCodec.readList(JsonAdapter<T> adapter, byte[] bytes)",
                    "public List<List<Span>> zipkin.internal.JsonCodec.readTraces(byte[] bytes)"
                ],
                "zipkin/src/main/java/zipkin/internal/MergeById.java": [
                    "public static List<Span> zipkin.internal.MergeById.apply(Collection<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/Node.java": [
                    "public Iterator<Node<V>> zipkin.internal.Node<V>.traverse()",
                    "public Node<V> zipkin.internal.Node<V>.addChild(Node<V> child)",
                    "static Node<Span> zipkin.internal.Node<V>.constructTree(List<Span> trace)",
                    "public Node<V> zipkin.internal.Node<V>.build()"
                ],
                "zipkin/src/main/java/zipkin/internal/Pair.java": [
                    "public static <T> Pair<T> zipkin.internal.Pair<T>.create(T _1, T _2)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "static <T> List<T> zipkin.internal.ThriftCodec.readList(ThriftReader<T> reader, ByteBuffer bytes)"
                ],
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static List<Date> zipkin.internal.Util.getDays(long endTs, @Nullable Long lookback)"
                ],
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "Set<Long> zipkin.storage.InMemorySpanStore.traceIdsDescendingByTimestamp(QueryRequest request)",
                    "public synchronized List<List<Span>> zipkin.storage.InMemorySpanStore.getRawTraces()",
                    "public synchronized List<List<Span>> zipkin.storage.InMemorySpanStore.getTraces(QueryRequest request)",
                    "Set<Pair<Long>> zipkin.storage.InMemorySpanStore.valueContainer()",
                    "public synchronized List<Span> zipkin.storage.InMemorySpanStore.getRawTrace(long traceIdHigh, long traceId)"
                ],
                "zipkin/src/main/java/zipkin/storage/InternalAsyncToBlockingSpanStoreAdapter.java": [
                    "public List<String> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getSpanNames(String serviceName)",
                    "public List<List<Span>> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getTraces(QueryRequest request)",
                    "public List<Span> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getTrace(long traceIdHigh, long traceIdLow)",
                    "public List<DependencyLink> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getDependencies(long endTs, @Nullable Long lookback)",
                    "public List<String> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getServiceNames()",
                    "public List<Span> zipkin.storage.InternalAsyncToBlockingSpanStoreAdapter.getRawTrace(long traceIdHigh, long traceIdLow)"
                ],
                "zipkin/src/main/java/zipkin/storage/QueryRequest.java": [
                    "public boolean zipkin.storage.QueryRequest.test(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b8646142fa15c8c5f47ff2a2a48dc663c7bb65b3",
        "previous_commit": "7cac371c5e7675e69bcbb992665cc7bd7f20ec74",
        "date": 1555229745,
        "releases": {
            "previous": "b8646142fa15c8c5f47ff2a2a48dc663c7bb65b3",
            "next": "b8646142fa15c8c5f47ff2a2a48dc663c7bb65b3"
        },
        "commit_message": "De-conflate local from remote service names (#2484)\n\nEspecially mentioned in #1794, local and remote service names are undeniably serving different use cases, yet currently conflated in the api.\r\n\r\n/services -> only local serviceNames\r\n/remoteServices?serviceName=X -> new: only remote serviceNames for auto-complete\r\n/spans?remoteServiceName=X -> new: to restore functionality @llinder mentioned",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b8646142fa15c8c5f47ff2a2a48dc663c7bb65b3": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "public AggregatedHttpMessage zipkin2.server.internal.ZipkinQueryApiV2.getServiceNames()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.v1.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "void zipkin2.storage.cassandra.v1.CassandraSpanConsumer.clear()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanStore.java": [
                    "public Call<List<String>> zipkin2.storage.cassandra.v1.CassandraSpanStore.getSpanNames(String serviceName)",
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.v1.CassandraSpanStore.getTraces(QueryRequest request)",
                    "public Call<List<String>> zipkin2.storage.cassandra.v1.CassandraSpanStore.getServiceNames()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Indexer.java": [
                    "void zipkin2.storage.cassandra.v1.Indexer.index(Span span, List<Call<Void>> calls)",
                    "public IndexCall zipkin2.storage.cassandra.v1.Indexer.clone()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertSpanName.java": [
                    "Input zipkin2.storage.cassandra.v1.InsertSpanName.newInput(String service_name, String span_name)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertTraceIdByServiceName.java": [
                    "public Set<String> zipkin2.storage.cassandra.v1.InsertTraceIdByServiceName.partitionKeys(Span span)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertTraceIdBySpanName.java": [
                    "public Set<String> zipkin2.storage.cassandra.v1.InsertTraceIdBySpanName.partitionKeys(Span span)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/LazySession.java": [
                    "Session zipkin2.storage.cassandra.v1.LazySession.get()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Schema.java": [
                    "static Metadata zipkin2.storage.cassandra.v1.Schema.readMetadata(Session session)",
                    "static void zipkin2.storage.cassandra.v1.Schema.ensureExists(String keyspace, Session session)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectAutocompleteValues.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectAutocompleteValues.create(String key)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectServiceNames.create()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectSpanNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectSpanNames.create(String serviceName)",
                    "public String zipkin2.storage.cassandra.v1.SelectSpanNames.toString()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromServiceNames.java": [
                    "FlatMapper<List<String>, Set<Pair>> zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceNames.newFlatMapper(long endTs, long lookback, int limit)",
                    "public Call<Set<Pair>> zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceNames.map(List<String> serviceNames)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.CassandraSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static Metadata zipkin2.storage.cassandra.Schema.readMetadata(Session session)",
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, Session session)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectAutocompleteValues.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectAutocompleteValues.create(String key)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectServiceNames.create()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectSpanNames.java": [
                    "public String zipkin2.storage.cassandra.SelectSpanNames.toString()",
                    "Call<List<String>> zipkin2.storage.cassandra.SelectSpanNames.create(String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromServiceSpan.java": [
                    "public String zipkin2.storage.cassandra.SelectTraceIdsFromServiceSpan.toString()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/AccumulateAllResults.java": [
                    "public Call<T> zipkin2.storage.cassandra.internal.call.AccumulateAllResults<T>.map(ResultSet rs)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<String>> zipkin2.elasticsearch.ElasticsearchSpanStore.getServiceNames()",
                    "public Call<List<List<Span>>> zipkin2.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)",
                    "public Call<List<String>> zipkin2.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLSpanConsumer.java": [
                    "public Void zipkin2.storage.mysql.v1.MySQLSpanConsumer.apply(DSLContext create)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/SelectAnnotationServiceNames.java": [
                    "public List<String> zipkin2.storage.mysql.v1.SelectAnnotationServiceNames.apply(DSLContext context)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/SelectSpanNames.java": [
                    "public List<String> zipkin2.storage.mysql.v1.SelectSpanNames.apply(DSLContext context)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/SelectSpansAndAnnotations.java": [
                    "SelectSpansAndAnnotations zipkin2.storage.mysql.v1.SelectSpansAndAnnotations.create(QueryRequest request)",
                    "SelectOffsetStep<? extends Record> zipkin2.storage.mysql.v1.SelectSpansAndAnnotations.toTraceIdQuery(DSLContext context, QueryRequest request)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "public synchronized Call<Void> zipkin2.storage.InMemoryStorage.accept(List<Span> spans)",
                    "private int zipkin2.storage.InMemoryStorage.deleteOldestTrace()"
                ],
                "zipkin/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public boolean zipkin2.storage.QueryRequest.test(List<Span> spans)",
                    "public String zipkin2.storage.QueryRequest.toString()",
                    "public final QueryRequest zipkin2.storage.QueryRequest.build()"
                ],
                "zipkin/src/main/java/zipkin2/storage/StorageComponent.java": [
                    "public AutocompleteTags zipkin2.storage.StorageComponent.autocompleteTags()"
                ]
            },
            "7cac371c5e7675e69bcbb992665cc7bd7f20ec74": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "public AggregatedHttpMessage zipkin2.server.internal.ZipkinQueryApiV2.getServiceNames()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.v1.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "void zipkin2.storage.cassandra.v1.CassandraSpanConsumer.clear()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanStore.java": [
                    "public Call<List<String>> zipkin2.storage.cassandra.v1.CassandraSpanStore.getSpanNames(String serviceName)",
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.v1.CassandraSpanStore.getTraces(QueryRequest request)",
                    "public Call<List<String>> zipkin2.storage.cassandra.v1.CassandraSpanStore.getServiceNames()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Indexer.java": [
                    "void zipkin2.storage.cassandra.v1.Indexer.index(Span span, List<Call<Void>> calls)",
                    "public IndexCall zipkin2.storage.cassandra.v1.Indexer.clone()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertSpanName.java": [
                    "Input zipkin2.storage.cassandra.v1.InsertSpanName.newInput(String service_name, String span_name)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertTraceIdByServiceName.java": [
                    "public Set<String> zipkin2.storage.cassandra.v1.InsertTraceIdByServiceName.partitionKeys(Span span)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertTraceIdBySpanName.java": [
                    "public Set<String> zipkin2.storage.cassandra.v1.InsertTraceIdBySpanName.partitionKeys(Span span)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/LazySession.java": [
                    "Session zipkin2.storage.cassandra.v1.LazySession.get()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Schema.java": [
                    "static Metadata zipkin2.storage.cassandra.v1.Schema.readMetadata(Session session)",
                    "static void zipkin2.storage.cassandra.v1.Schema.ensureExists(String keyspace, Session session)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectAutocompleteValues.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectAutocompleteValues.create(String key)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectServiceNames.create()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectSpanNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectSpanNames.create(String serviceName)",
                    "public String zipkin2.storage.cassandra.v1.SelectSpanNames.toString()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromServiceNames.java": [
                    "FlatMapper<List<String>, Set<Pair>> zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceNames.newFlatMapper(long endTs, long lookback, int limit)",
                    "public Call<Set<Pair>> zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceNames.map(List<String> serviceNames)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.CassandraSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static Metadata zipkin2.storage.cassandra.Schema.readMetadata(Session session)",
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, Session session)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectAutocompleteValues.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectAutocompleteValues.create(String key)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectServiceNames.create()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectSpanNames.java": [
                    "public String zipkin2.storage.cassandra.SelectSpanNames.toString()",
                    "Call<List<String>> zipkin2.storage.cassandra.SelectSpanNames.create(String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromServiceSpan.java": [
                    "public String zipkin2.storage.cassandra.SelectTraceIdsFromServiceSpan.toString()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/AccumulateAllResults.java": [
                    "public Call<T> zipkin2.storage.cassandra.internal.call.AccumulateAllResults<T>.map(ResultSet rs)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<String>> zipkin2.elasticsearch.ElasticsearchSpanStore.getServiceNames()",
                    "public Call<List<List<Span>>> zipkin2.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)",
                    "public Call<List<String>> zipkin2.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLSpanConsumer.java": [
                    "public Void zipkin2.storage.mysql.v1.MySQLSpanConsumer.apply(DSLContext create)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/SelectAnnotationServiceNames.java": [
                    "public List<String> zipkin2.storage.mysql.v1.SelectAnnotationServiceNames.apply(DSLContext context)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/SelectSpanNames.java": [
                    "public List<String> zipkin2.storage.mysql.v1.SelectSpanNames.apply(DSLContext context)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/SelectSpansAndAnnotations.java": [
                    "SelectSpansAndAnnotations zipkin2.storage.mysql.v1.SelectSpansAndAnnotations.create(QueryRequest request)",
                    "SelectOffsetStep<? extends Record> zipkin2.storage.mysql.v1.SelectSpansAndAnnotations.toTraceIdQuery(DSLContext context, QueryRequest request)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "public synchronized Call<Void> zipkin2.storage.InMemoryStorage.accept(List<Span> spans)",
                    "private int zipkin2.storage.InMemoryStorage.deleteOldestTrace()"
                ],
                "zipkin/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public boolean zipkin2.storage.QueryRequest.test(List<Span> spans)",
                    "public String zipkin2.storage.QueryRequest.toString()",
                    "public final QueryRequest zipkin2.storage.QueryRequest.build()"
                ],
                "zipkin/src/main/java/zipkin2/storage/StorageComponent.java": [
                    "public AutocompleteTags zipkin2.storage.StorageComponent.autocompleteTags()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2fe5142e08b4d74bd38da4ff5837e969777755da",
        "previous_commit": "d1ff1c04f561a4d318eedbe8c43de562653f17a8",
        "date": 1504851032,
        "releases": {
            "previous": "2fe5142e08b4d74bd38da4ff5837e969777755da",
            "next": "2fe5142e08b4d74bd38da4ff5837e969777755da"
        },
        "commit_message": "Decouples v2 types from v1 types, in preparation of a new package (#1726)\n\nThis moves all the code needed for v2 types into zipkin.internal.v2\r\nwithout any references to code outside the package. To reduce\r\nduplication, \"v1\" code can reference v2 types (as they need to in order\r\nto covert for example). Once this is in, we can consider refactoring out\r\na v2 module.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2fe5142e08b4d74bd38da4ff5837e969777755da": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "MockResponse zipkin.junit.ZipkinDispatcher.queryV2(HttpUrl url)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV2.java": [
                    "public String zipkin.server.ZipkinQueryApiV2.getTrace(@PathVariable String traceIdHex, WebRequest request)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/moshi/JsonReaders.java": [
                    "public static List<String> zipkin.moshi.JsonReaders.collectValuesNamed(JsonReader reader, String name)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "static byte[] zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.prefixWithTimestampMillisAndQuery(Span span, @Nullable Long timestampMillis)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "public Call<List<String>> zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getSpanNames(String serviceName)",
                    "public Call<List<String>> zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getServiceNames()",
                    "public Call<List<List<Span>>> zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java": [
                    "void zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.clear(String index)",
                    "static void zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.flush(HttpCall.Factory factory, String index)",
                    "public final Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.hosts(final List<String> hosts)",
                    "IndexTemplates zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.ensureIndexTemplates()",
                    "CheckResult zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.ensureClusterReady(String index)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/EnsureIndexTemplate.java": [
                    "static void zipkin.storage.elasticsearch.http.EnsureIndexTemplate.apply(HttpCall.Factory callFactory, String name, String indexTemplate)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java": [
                    "void zipkin.storage.elasticsearch.http.HttpBulkIndexer.writeIndexMetadata(String index, String typeName, @Nullable String id)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/IndexNameFormatter.java": [
                    "static GregorianCalendar zipkin.storage.elasticsearch.http.IndexNameFormatter.midnightUTC(long epochMillis)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public DependencyLink zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyElasticsearchHttpSpanStore.java": [
                    "void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getDependencies(List<String> indices, Callback<List<DependencyLink>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getSpanNames(String serviceName, Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.onSuccess(@Nullable List<String> value)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getServiceNames(Callback<List<String>> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyJsonAdapters.java": [
                    "public Span zipkin.storage.elasticsearch.http.LegacyJsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/PseudoAddressRecordSet.java": [
                    "static Dns zipkin.storage.elasticsearch.http.PseudoAddressRecordSet.create(List<String> urls, Dns actualDns)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/VersionSpecificTemplates.java": [
                    "static float zipkin.storage.elasticsearch.http.VersionSpecificTemplates.getVersion(HttpCall.Factory callFactory)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "public void zipkin.collector.Collector.acceptSpans(byte[] serializedSpans, SpanDecoder decoder, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public List<DependencyLink> zipkin.internal.DependencyLinker.link()",
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<Span> spans)",
                    "public static List<DependencyLink> zipkin.internal.DependencyLinker.merge(Iterable<DependencyLink> in)",
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Collection<zipkin.Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public void zipkin.internal..write(Span value, Buffer b)",
                    "public void zipkin.internal..write(String value, Buffer buffer)",
                    "public void zipkin.internal..write(BinaryAnnotation value, Buffer b)",
                    "public void zipkin.internal.JsonCodec.write(Annotation value, Buffer b)",
                    "public int zipkin.internal..sizeInBytes(BinaryAnnotation value)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2JsonSpanDecoder.java": [
                    "public List<zipkin.Span> zipkin.internal.V2JsonSpanDecoder.readSpans(byte[] span)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanConverter.java": [
                    "Span.Builder zipkin.internal.V2SpanConverter.forEndpoint(zipkin.Span source, @Nullable zipkin.Endpoint e)",
                    "void zipkin.internal.V2SpanConverter.processAnnotations(zipkin.Span source)",
                    "public static Endpoint zipkin.internal.V2SpanConverter.toEndpoint(zipkin.Endpoint input)",
                    "public static zipkin.Span zipkin.internal.V2SpanConverter.toSpan(Span in)",
                    "void zipkin.internal.V2SpanConverter.processBinaryAnnotations(zipkin.Span source)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanStoreAdapter.java": [
                    "Call<List<DependencyLink>> zipkin.internal.V2SpanStoreAdapter.getDependenciesCall(long endTs, @Nullable Long lookback)",
                    "Call<List<List<zipkin.Span>>> zipkin.internal.V2SpanStoreAdapter.getTracesCall(zipkin.storage.QueryRequest v1Request)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/Span.java": [
                    "public String zipkin.internal.v2.Span.toString()"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/storage/QueryRequest.java": [
                    "public boolean zipkin.internal.v2.storage.QueryRequest.test(List<Span> spans)"
                ]
            },
            "d1ff1c04f561a4d318eedbe8c43de562653f17a8": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "MockResponse zipkin.junit.ZipkinDispatcher.queryV2(HttpUrl url)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV2.java": [
                    "public String zipkin.server.ZipkinQueryApiV2.getTrace(@PathVariable String traceIdHex, WebRequest request)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/moshi/JsonReaders.java": [
                    "public static Set<String> zipkin.moshi.JsonReaders.collectValuesNamed(JsonReader reader, String name)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "static byte[] zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.prefixWithTimestampMillisAndQuery(Span span, @Nullable Long timestampMillis)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "public Call<List<String>> zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getSpanNames(String serviceName)",
                    "public Call<List<String>> zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getServiceNames()",
                    "public Call<List<List<Span>>> zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java": [
                    "void zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.clear(String index)",
                    "static void zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.flush(HttpCall.Factory factory, String index)",
                    "public final Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.hosts(final List<String> hosts)",
                    "IndexTemplates zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.ensureIndexTemplates()",
                    "CheckResult zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.ensureClusterReady(String index)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/EnsureIndexTemplate.java": [
                    "static void zipkin.storage.elasticsearch.http.EnsureIndexTemplate.apply(HttpCall.Factory callFactory, String name, String indexTemplate)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java": [
                    "void zipkin.storage.elasticsearch.http.HttpBulkIndexer.writeIndexMetadata(String index, String typeName, @Nullable String id)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/IndexNameFormatter.java": [
                    "static GregorianCalendar zipkin.storage.elasticsearch.http.IndexNameFormatter.midnightUTC(long epochMillis)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public DependencyLink zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyElasticsearchHttpSpanStore.java": [
                    "void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getDependencies(List<String> indices, Callback<List<DependencyLink>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getSpanNames(String serviceName, Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.onSuccess(@Nullable List<String> value)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getServiceNames(Callback<List<String>> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyJsonAdapters.java": [
                    "public Span zipkin.storage.elasticsearch.http.LegacyJsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/PseudoAddressRecordSet.java": [
                    "static Dns zipkin.storage.elasticsearch.http.PseudoAddressRecordSet.create(List<String> urls, Dns actualDns)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/VersionSpecificTemplates.java": [
                    "static float zipkin.storage.elasticsearch.http.VersionSpecificTemplates.getVersion(HttpCall.Factory callFactory)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "public void zipkin.collector.Collector.acceptSpans(byte[] serializedSpans, SpanDecoder decoder, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public List<DependencyLink> zipkin.internal.DependencyLinker.link()",
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<Span> spans)",
                    "public static List<DependencyLink> zipkin.internal.DependencyLinker.merge(Iterable<DependencyLink> in)",
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Collection<zipkin.Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public void zipkin.internal..write(Span value, Buffer b)",
                    "public void zipkin.internal..write(String value, Buffer buffer)",
                    "public void zipkin.internal..write(BinaryAnnotation value, Buffer b)",
                    "public void zipkin.internal.JsonCodec.write(Annotation value, Buffer b)",
                    "public int zipkin.internal..sizeInBytes(BinaryAnnotation value)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2JsonSpanDecoder.java": [
                    "public List<zipkin.Span> zipkin.internal.V2JsonSpanDecoder.readSpans(byte[] span)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanConverter.java": [
                    "Span.Builder zipkin.internal.V2SpanConverter.forEndpoint(zipkin.Span source, @Nullable zipkin.Endpoint e)",
                    "public static zipkin.internal.v2.Endpoint zipkin.internal.V2SpanConverter.convert(zipkin.Endpoint input)",
                    "void zipkin.internal.V2SpanConverter.processAnnotations(zipkin.Span source)",
                    "public static zipkin.Span zipkin.internal.V2SpanConverter.toSpan(Span in)",
                    "void zipkin.internal.V2SpanConverter.processBinaryAnnotations(zipkin.Span source)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanStoreAdapter.java": [
                    "Call<List<DependencyLink>> zipkin.internal.V2SpanStoreAdapter.getDependenciesCall(long endTs, @Nullable Long lookback)",
                    "Call<List<List<zipkin.Span>>> zipkin.internal.V2SpanStoreAdapter.getTracesCall(zipkin.storage.QueryRequest v1Request)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/Span.java": [
                    "public String zipkin.internal.v2.Span.toString()"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/storage/QueryRequest.java": [
                    "public boolean zipkin.internal.v2.storage.QueryRequest.test(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e7f0b58cf86db62e311f5635a4608777bc36933e",
        "previous_commit": "45600824c20f766ca6f99595df16b297ba043aa0",
        "date": 1499736462,
        "releases": {
            "previous": "e7f0b58cf86db62e311f5635a4608777bc36933e",
            "next": "e7f0b58cf86db62e311f5635a4608777bc36933e"
        },
        "commit_message": "Refactors codec to reduce redundant list creation (#1650)\n\nThis includes cleanups and performance improvements when reading spans.\r\nNotably, this stops recreating lists by re-using Span.Builder\r\n\r\nTo test this, we use the same client-span json from zipkin-reporter.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e7f0b58cf86db62e311f5635a4608777bc36933e": {
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.addBinaryAnnotation(BinaryAnnotation binaryAnnotation)",
                    "public Builder zipkin.Span.merge(Span that)",
                    "public Builder zipkin.Span.addAnnotation(Annotation annotation)"
                ],
                "zipkin/src/main/java/zipkin/internal/Dependencies.java": [
                    "public Dependencies zipkin.internal.Dependencies.read(ByteBuffer bytes)",
                    "public int zipkin.internal.Dependencies.sizeInBytes(Dependencies value)",
                    "public void zipkin.internal.Dependencies.write(Dependencies value, Buffer buffer)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public byte[] writeStrings(List<String> value)",
                    "public List<String> readStrings(byte[] bytes)",
                    "public int zipkin.internal..sizeInBytes(BinaryAnnotation value)",
                    "public List<DependencyLink> readDependencyLinks(byte[] bytes)",
                    "public List<List<Span>> readTraces(byte[] bytes)",
                    "public void zipkin.internal.JsonCodec.write(Annotation value, Buffer b)",
                    "public byte[] writeSpan(Span value)",
                    "public byte[] writeDependencyLinks(List<DependencyLink> value)",
                    "public DependencyLink readDependencyLink(byte[] bytes)",
                    "public Span readSpan(byte[] bytes)",
                    "public int zipkin.internal..sizeInBytes(Span value)",
                    "public byte[] writeDependencyLink(DependencyLink value)",
                    "public void zipkin.internal..write(BinaryAnnotation value, Buffer b)",
                    "public static byte[] writeEndpoint(Endpoint value)",
                    "public void zipkin.internal..write(Span value, Buffer b)",
                    "public byte[] writeSpans(List<Span> value)",
                    "public int sizeInBytes(Span value)",
                    "public byte[] writeTraces(List<List<Span>> traces)",
                    "public Span zipkin.internal.SpanReader.fromJson(JsonReader reader)",
                    "public List<Span> readSpans(byte[] bytes)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(Annotation value)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public List<Span> zipkin.internal.ThriftCodec.readSpans(byte[] bytes)",
                    "public byte[] zipkin.internal.ThriftCodec.writeSpan(Span value)",
                    "public Span zipkin.internal.ThriftCodec.readSpan(ByteBuffer bytes)",
                    "public void zipkin.internal.ThriftCodec.write(Span value, Buffer buffer)",
                    "public Span zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public byte[] zipkin.internal.ThriftCodec.writeDependencyLinks(List<DependencyLink> value)",
                    "public int zipkin.internal.ThriftCodec.sizeInBytes(Span value)",
                    "public Span zipkin.internal.ThriftCodec.readSpan(byte[] bytes)",
                    "public List<DependencyLink> zipkin.internal.ThriftCodec.readDependencyLinks(byte[] bytes)",
                    "public List<DependencyLink> zipkin.internal.ThriftCodec.readDependencyLinks(ByteBuffer bytes)",
                    "static <T> List<T> zipkin.internal.ThriftCodec.readList(ThriftReader<T> reader, ByteBuffer bytes)",
                    "public byte[] zipkin.internal.ThriftCodec.writeSpans(List<Span> value)",
                    "public String zipkin.internal.ThriftCodec.toString()"
                ]
            },
            "45600824c20f766ca6f99595df16b297ba043aa0": {
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.addBinaryAnnotation(BinaryAnnotation binaryAnnotation)",
                    "public Builder zipkin.Span.merge(Span that)",
                    "public Builder zipkin.Span.addAnnotation(Annotation annotation)"
                ],
                "zipkin/src/main/java/zipkin/internal/Dependencies.java": [
                    "public Dependencies zipkin.internal.Dependencies.read(ByteBuffer bytes)",
                    "public int zipkin.internal.Dependencies.sizeInBytes(Dependencies value)",
                    "public void zipkin.internal.Dependencies.write(Dependencies value, Buffer buffer)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public byte[] zipkin.internal.JsonCodec.writeDependencyLinks(List<DependencyLink> value)",
                    "public byte[] zipkin.internal.JsonCodec.writeSpan(Span value)",
                    "public Span zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public byte[] zipkin.internal.JsonCodec.writeTraces(List<List<Span>> traces)",
                    "public List<List<Span>> zipkin.internal.JsonCodec.readTraces(byte[] bytes)",
                    "public List<Span> zipkin.internal.JsonCodec.readSpans(byte[] bytes)",
                    "public byte[] zipkin.internal.JsonCodec.writeStrings(List<String> value)",
                    "public void zipkin.internal.JsonCodec.write(BinaryAnnotation value, Buffer b)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(BinaryAnnotation value)",
                    "public DependencyLink zipkin.internal.JsonCodec.readDependencyLink(byte[] bytes)",
                    "public void zipkin.internal.JsonCodec.write(Annotation value, Buffer b)",
                    "public static byte[] zipkin.internal.JsonCodec.writeEndpoint(Endpoint value)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(Span value)",
                    "public List<DependencyLink> zipkin.internal.JsonCodec.readDependencyLinks(byte[] bytes)",
                    "public byte[] zipkin.internal.JsonCodec.writeSpans(List<Span> value)",
                    "public byte[] zipkin.internal.JsonCodec.writeDependencyLink(DependencyLink value)",
                    "public Span zipkin.internal.JsonCodec.readSpan(byte[] bytes)",
                    "public List<String> zipkin.internal.JsonCodec.readStrings(byte[] bytes)",
                    "public void zipkin.internal.JsonCodec.write(Span value, Buffer b)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(Annotation value)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public List<Span> zipkin.internal.ThriftCodec.readSpans(byte[] bytes)",
                    "public byte[] zipkin.internal.ThriftCodec.writeSpan(Span value)",
                    "public Span zipkin.internal.ThriftCodec.readSpan(ByteBuffer bytes)",
                    "public void zipkin.internal.ThriftCodec.write(Span value, Buffer buffer)",
                    "public Span zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public byte[] zipkin.internal.ThriftCodec.writeDependencyLinks(List<DependencyLink> value)",
                    "public int zipkin.internal.ThriftCodec.sizeInBytes(Span value)",
                    "public Span zipkin.internal.ThriftCodec.readSpan(byte[] bytes)",
                    "public List<DependencyLink> zipkin.internal.ThriftCodec.readDependencyLinks(byte[] bytes)",
                    "public List<DependencyLink> zipkin.internal.ThriftCodec.readDependencyLinks(ByteBuffer bytes)",
                    "static <T> List<T> zipkin.internal.ThriftCodec.readList(ThriftReader<T> reader, ByteBuffer bytes)",
                    "public byte[] zipkin.internal.ThriftCodec.writeSpans(List<Span> value)",
                    "public String zipkin.internal.ThriftCodec.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "120d1a73f2abfb62fd9a41a72cf30ee7e3a5b388",
        "previous_commit": "6655b5de6e6efc95d494d327c4842a03681351cd",
        "date": 1553226632,
        "releases": {
            "previous": "120d1a73f2abfb62fd9a41a72cf30ee7e3a5b388",
            "next": "120d1a73f2abfb62fd9a41a72cf30ee7e3a5b388"
        },
        "commit_message": "Extracts byte array specific code to ByteArrayBuffer\n\nThis starts transitioning the internals of our codec library so that\nother buffers can be used directly.\n\nThe first step is to separate out certain things that have to be done\nfrom how to do it with byte arrays. A few frequently used functions\nare directly implemented with byte array and hopefully can be trivially\nreimplemented with other types of buffers.\n\nSee #2435\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "120d1a73f2abfb62fd9a41a72cf30ee7e3a5b388": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "public void zipkin2.server.internal.ZipkinQueryApiV2.write(String value, Buffer buffer)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.addAutocompleteValues(long indexTimestamp, Span span)"
                ],
                "zipkin/src/main/java/zipkin2/codec/DependencyLinkBytesEncoder.java": [
                    "public void zipkin2.codec..write(DependencyLink value, Buffer b)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Buffer.java": [
                    "void zipkin2.internal.Buffer.writeLongLe(long v)",
                    "void zipkin2.internal.Buffer.writeVarint(long v)",
                    "void zipkin2.internal.Buffer.writeVarint(int v)",
                    "long zipkin2.internal.Buffer.readVarint64()",
                    "long zipkin2.internal.Buffer.readLongLe()",
                    "final byte zipkin2.internal.Buffer.readByte()",
                    "int zipkin2.internal.Buffer.readVarint32()"
                ],
                "zipkin/src/main/java/zipkin2/internal/Dependencies.java": [
                    "public ByteBuffer zipkin2.internal.Dependencies.toThrift()"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> int zipkin2.internal.JsonCodec.writeList(Buffer.Writer<T> writer, List<T> value, byte[] out, int pos)",
                    "public static <T> byte[] zipkin2.internal.JsonCodec.writeList(Buffer.Writer<T> writer, List<T> value)",
                    "public static <T> byte[] zipkin2.internal.JsonCodec.write(Buffer.Writer<T> writer, T value)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Codec.java": [
                    "public static boolean zipkin2.internal.Proto3Codec.readList(byte[] bytes, Collection<Span> out)",
                    "public static @Nullable Span zipkin2.internal.Proto3Codec.readOne(byte[] bytes)",
                    "public static boolean zipkin2.internal.Proto3Codec.read(byte[] bytes, Collection<Span> out)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Fields.java": [
                    "boolean zipkin2.internal.Proto3Fields.read(Buffer b)",
                    "long zipkin2.internal.Proto3Fields.readValue(Buffer buffer)",
                    "byte[] zipkin2.internal.Proto3Fields.readValue(Buffer b, int length)",
                    "final int zipkin2.internal.Proto3Fields.readLengthPrefix(Buffer b)",
                    "String zipkin2.internal.Proto3Fields.readValue(Buffer buffer, int length)",
                    "static boolean zipkin2.internal.Proto3Fields.skipValue(Buffer buffer, int wireType)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3SpanWriter.java": [
                    "public byte[] zipkin2.internal.Proto3SpanWriter.writeList(List<Span> spans)",
                    "int zipkin2.internal.Proto3SpanWriter.writeList(List<Span> spans, byte[] out, int pos)",
                    "byte[] zipkin2.internal.Proto3SpanWriter.write(Span onlySpan)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3ZipkinFields.java": [
                    "Span zipkin2.internal.Proto3ZipkinFields.readValue(Buffer buffer, int length)",
                    "Endpoint zipkin2.internal.Proto3ZipkinFields.readValue(Buffer buffer, int length)",
                    "boolean zipkin2.internal.Proto3ZipkinFields.readLengthPrefixAndValue(Buffer b, Span.Builder builder)",
                    "static void zipkin2.internal.Proto3ZipkinFields.logAndSkip(Buffer buffer, int nextKey)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1SpanWriter.java": [
                    "static void zipkin2.internal.V1SpanWriter.writeBinaryAnnotation(String key, String value, @Nullable byte[] endpoint, Buffer b)",
                    "static byte[] zipkin2.internal.V1SpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)",
                    "public void zipkin2.internal.V1SpanWriter.write(V1Span value, Buffer b)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1ThriftSpanWriter.java": [
                    "public byte[] zipkin2.internal.V1ThriftSpanWriter.writeList(List<Span> spans)",
                    "public byte[] zipkin2.internal.V1ThriftSpanWriter.write(Span onlySpan)",
                    "public int zipkin2.internal.V1ThriftSpanWriter.writeList(List<Span> spans, byte[] out, int pos)",
                    "static byte[] zipkin2.internal.V1ThriftSpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V2SpanWriter.java": [
                    "static void zipkin2.internal.V2SpanWriter.writeEndpoint(Endpoint value, Buffer b, boolean writeEmptyServiceName)",
                    "public void zipkin2.internal.V2SpanWriter.write(Span value, Buffer b)",
                    "static void zipkin2.internal.V2SpanWriter.writeAnnotation(long timestamp, String value, @Nullable byte[] endpoint, Buffer b)"
                ]
            },
            "6655b5de6e6efc95d494d327c4842a03681351cd": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "public void zipkin2.server.internal.ZipkinQueryApiV2.write(String value, Buffer buffer)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.addAutocompleteValues(long indexTimestamp, Span span)"
                ],
                "zipkin/src/main/java/zipkin2/codec/DependencyLinkBytesEncoder.java": [
                    "public void zipkin2.codec..write(DependencyLink value, Buffer b)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Buffer.java": [
                    "public byte[] zipkin2.internal.Buffer.toByteArray()",
                    "void zipkin2.internal.Buffer.writeLongLe(long v)",
                    "void zipkin2.internal.Buffer.writeVarint(long v)",
                    "public int zipkin2.internal.Buffer.pos()",
                    "void zipkin2.internal.Buffer.writeVarint(int v)",
                    "long zipkin2.internal.Buffer.readVarint64()",
                    "int zipkin2.internal.Buffer.remaining()",
                    "long zipkin2.internal.Buffer.readLongLe()",
                    "int zipkin2.internal.Buffer.readVarint32()",
                    "boolean zipkin2.internal.Buffer.skip(int maxCount)",
                    "byte zipkin2.internal.Buffer.readByte()"
                ],
                "zipkin/src/main/java/zipkin2/internal/Dependencies.java": [
                    "public ByteBuffer zipkin2.internal.Dependencies.toThrift()"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> int zipkin2.internal.JsonCodec.writeList(Buffer.Writer<T> writer, List<T> value, byte[] out, int pos)",
                    "public static <T> byte[] zipkin2.internal.JsonCodec.writeList(Buffer.Writer<T> writer, List<T> value)",
                    "public static <T> byte[] zipkin2.internal.JsonCodec.write(Buffer.Writer<T> writer, T value)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Codec.java": [
                    "public static boolean zipkin2.internal.Proto3Codec.readList(byte[] bytes, Collection<Span> out)",
                    "public static @Nullable Span zipkin2.internal.Proto3Codec.readOne(byte[] bytes)",
                    "public static boolean zipkin2.internal.Proto3Codec.read(byte[] bytes, Collection<Span> out)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Fields.java": [
                    "boolean zipkin2.internal.Proto3Fields.read(Buffer b)",
                    "long zipkin2.internal.Proto3Fields.readValue(Buffer buffer)",
                    "byte[] zipkin2.internal.Proto3Fields.readValue(Buffer b, int length)",
                    "final int zipkin2.internal.Proto3Fields.readLengthPrefix(Buffer b)",
                    "String zipkin2.internal.Proto3Fields.readValue(Buffer buffer, int length)",
                    "static boolean zipkin2.internal.Proto3Fields.skipValue(Buffer buffer, int wireType)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3SpanWriter.java": [
                    "public byte[] zipkin2.internal.Proto3SpanWriter.writeList(List<Span> spans)",
                    "int zipkin2.internal.Proto3SpanWriter.writeList(List<Span> spans, byte[] out, int pos)",
                    "byte[] zipkin2.internal.Proto3SpanWriter.write(Span onlySpan)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3ZipkinFields.java": [
                    "Span zipkin2.internal.Proto3ZipkinFields.readValue(Buffer buffer, int length)",
                    "Endpoint zipkin2.internal.Proto3ZipkinFields.readValue(Buffer buffer, int length)",
                    "boolean zipkin2.internal.Proto3ZipkinFields.readLengthPrefixAndValue(Buffer b, Span.Builder builder)",
                    "static void zipkin2.internal.Proto3ZipkinFields.logAndSkip(Buffer buffer, int nextKey)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1SpanWriter.java": [
                    "static void zipkin2.internal.V1SpanWriter.writeBinaryAnnotation(String key, String value, @Nullable byte[] endpoint, Buffer b)",
                    "static byte[] zipkin2.internal.V1SpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)",
                    "public void zipkin2.internal.V1SpanWriter.write(V1Span value, Buffer b)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1ThriftSpanWriter.java": [
                    "public byte[] zipkin2.internal.V1ThriftSpanWriter.writeList(List<Span> spans)",
                    "public byte[] zipkin2.internal.V1ThriftSpanWriter.write(Span onlySpan)",
                    "public int zipkin2.internal.V1ThriftSpanWriter.writeList(List<Span> spans, byte[] out, int pos)",
                    "static byte[] zipkin2.internal.V1ThriftSpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V2SpanWriter.java": [
                    "static void zipkin2.internal.V2SpanWriter.writeEndpoint(Endpoint value, Buffer b, boolean writeEmptyServiceName)",
                    "public void zipkin2.internal.V2SpanWriter.write(Span value, Buffer b)",
                    "static void zipkin2.internal.V2SpanWriter.writeAnnotation(long timestamp, String value, @Nullable byte[] endpoint, Buffer b)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9674c46fa82b5f281fee30c23138aa09c18ee816",
        "previous_commit": "eeb17681af780e563b44503d5af1eadb3ca6abfc",
        "date": 1603251400,
        "releases": {
            "previous": "9674c46fa82b5f281fee30c23138aa09c18ee816",
            "next": "9674c46fa82b5f281fee30c23138aa09c18ee816"
        },
        "commit_message": "Migrates to Datastax Driver v4 (#3246)\n\nThis migrates to the Netty-based Datastax Driver v4, which no longer\r\nuses guava. This is very different library architecture, most obvious in\r\nhow configuration is managed. This migration tries to be as conventional\r\nas possible while retaining defaults as close to as they were as\r\npossible.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9674c46fa82b5f281fee30c23138aa09c18ee816": {
                "zipkin-server/src/main/java/zipkin2/server/internal/cassandra/ZipkinCassandraStorageConfiguration.java": [
                    "public Object zipkin2.server.internal.cassandra.ZipkinCassandraStorageConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/cassandra3/ZipkinCassandra3StorageConfiguration.java": [
                    "public Object zipkin2.server.internal.cassandra3.ZipkinCassandra3StorageConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public CassandraStorage zipkin2.storage.cassandra.v1.CassandraStorage.build()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertTrace.java": [
                    "Input zipkin2.storage.cassandra.v1.InsertTrace.newInput(V1Span v1, ByteBuffer v1Bytes, long ts_micro)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/LazySession.java": [
                    "void zipkin2.storage.cassandra.v1.LazySession.close()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Schema.java": [
                    "static boolean zipkin2.storage.cassandra.v1.Schema.hasUpgrade3_remoteService(KeyspaceMetadata keyspaceMetadata)",
                    "static boolean zipkin2.storage.cassandra.v1.Schema.hasUpgrade1_defaultTtl(KeyspaceMetadata keyspaceMetadata)",
                    "static boolean zipkin2.storage.cassandra.v1.Schema.hasUpgrade2_autocompleteTags(KeyspaceMetadata keyspaceMetadata)",
                    "static void zipkin2.storage.cassandra.v1.Schema.applyCqlFile(String keyspace, CqlSession session, String resource)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectDependencies.java": [
                    "Call<List<DependencyLink>> zipkin2.storage.cassandra.v1.SelectDependencies.create(long endTs, long lookback)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectFromTraces.java": [
                    "Call<List<List<Span>>> zipkin2.storage.cassandra.v1.SelectFromTraces.newCall(Iterable<String> traceIds)",
                    "Call<List<Span>> zipkin2.storage.cassandra.v1.SelectFromTraces.newCall(String hexTraceId)",
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.v1.SelectFromTraces.map(Set<Long> input)",
                    "protected BiConsumer<Row, List<Span>> zipkin2.storage.cassandra.v1.SelectFromTraces.accumulator()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromServiceNames.java": [
                    "void zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceNames.bindPartitionKey(BoundStatementBuilder bound, List<String> serviceNames)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java": [
                    "public CqlSession zipkin2.storage.cassandra.v1.Default.create(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/TimestampCodec.java": [
                    "static ByteBuffer zipkin2.storage.cassandra.v1.TimestampCodec.serialize(long timestamp)",
                    "static long zipkin2.storage.cassandra.v1.TimestampCodec.deserialize(Row row, int i)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/TraceIdIndexer.java": [
                    "Set<Input> zipkin2.storage.cassandra.v1.RealTraceIdIndexer.entriesThatIncreaseGap()",
                    "public Expiration<Map.Entry<String, Long>, Pair> zipkin2.storage.cassandra.v1.OnChangeUpdateMap.apply(Map.Entry<String, Long> key, @Nullable Expiration<Map.Entry<String, Long>, Pair> oldEntry)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public CassandraStorage zipkin2.storage.cassandra.CassandraStorage.build()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "static List<LocalDate> zipkin2.storage.cassandra.CassandraUtil.getDays(long endTs, @Nullable Long lookback)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/LazySession.java": [
                    "void zipkin2.storage.cassandra.LazySession.close()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, CqlSession session)",
                    "static boolean zipkin2.storage.cassandra.Schema.hasUpgrade2_remoteService(KeyspaceMetadata keyspaceMetadata)",
                    "static boolean zipkin2.storage.cassandra.Schema.hasUpgrade1_autocompleteTags(KeyspaceMetadata keyspaceMetadata)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectDependencies.java": [
                    "public List<DependencyLink> zipkin2.storage.cassandra.SelectDependencies.map(AsyncResultSet rs)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "Call<List<Span>> zipkin2.storage.cassandra.SelectFromSpan.newCall(String hexTraceId)",
                    "Call<List<List<Span>>> zipkin2.storage.cassandra.SelectFromSpan.newCall(Iterable<String> traceIds)",
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.SelectFromSpan.map(Set<String> input)",
                    "protected BiConsumer<Row, List<Span>> zipkin2.storage.cassandra.SelectFromSpan.accumulator()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromServiceSpan.java": [
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceSpan.newCall(Input input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromSpan.java": [
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromSpan.newCall( @Nullable String serviceName, String annotationKey, TimestampRange timestampRange, int limit)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/ResultSetFutureCall.java": [
                    "protected void zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.doEnqueue(Callback<V> callback)",
                    "public static boolean zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.isOverCapacity(Throwable e)",
                    "protected void zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.doCancel()",
                    "protected V zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.doExecute()",
                    "protected final boolean zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.doIsCanceled()"
                ]
            },
            "eeb17681af780e563b44503d5af1eadb3ca6abfc": {
                "zipkin-server/src/main/java/zipkin2/server/internal/cassandra/ZipkinCassandraStorageConfiguration.java": [
                    "public Object zipkin2.server.internal.cassandra.ZipkinCassandraStorageConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/cassandra3/ZipkinCassandra3StorageConfiguration.java": [
                    "public Object zipkin2.server.internal.cassandra3.ZipkinCassandra3StorageConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public CassandraStorage zipkin2.storage.cassandra.v1.CassandraStorage.build()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertTrace.java": [
                    "Input zipkin2.storage.cassandra.v1.InsertTrace.newInput(V1Span v1, ByteBuffer v1Bytes, long ts_micro)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/LazySession.java": [
                    "void zipkin2.storage.cassandra.v1.LazySession.close()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Schema.java": [
                    "static boolean zipkin2.storage.cassandra.v1.Schema.hasUpgrade3_remoteService(KeyspaceMetadata keyspaceMetadata)",
                    "static boolean zipkin2.storage.cassandra.v1.Schema.hasUpgrade1_defaultTtl(KeyspaceMetadata keyspaceMetadata)",
                    "static boolean zipkin2.storage.cassandra.v1.Schema.hasUpgrade2_autocompleteTags(KeyspaceMetadata keyspaceMetadata)",
                    "static void zipkin2.storage.cassandra.v1.Schema.applyCqlFile(String keyspace, Session session, String resource)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectDependencies.java": [
                    "Call<List<DependencyLink>> zipkin2.storage.cassandra.v1.SelectDependencies.create(long endTs, long lookback)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectFromTraces.java": [
                    "Call<List<List<Span>>> zipkin2.storage.cassandra.v1.SelectFromTraces.newCall(Iterable<String> traceIds)",
                    "Call<List<Span>> zipkin2.storage.cassandra.v1.SelectFromTraces.newCall(String hexTraceId)",
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.v1.SelectFromTraces.map(Set<Long> input)",
                    "protected BiConsumer<Row, List<Span>> zipkin2.storage.cassandra.v1.SelectFromTraces.accumulator()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromServiceNames.java": [
                    "void zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceNames.bindPartitionKey(BoundStatement bound, List<String> serviceNames)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java": [
                    "public Session zipkin2.storage.cassandra.v1.Default.create(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/TimestampCodec.java": [
                    "static ByteBuffer zipkin2.storage.cassandra.v1.TimestampCodec.serialize(long timestamp)",
                    "static long zipkin2.storage.cassandra.v1.TimestampCodec.deserialize(Row row, int i)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/TraceIdIndexer.java": [
                    "public Expiration<Entry<String, Long>, Pair> zipkin2.storage.cassandra.v1.OnChangeUpdateMap.apply(Entry<String, Long> key, @Nullable Expiration<Entry<String, Long>, Pair> oldEntry)",
                    "Set<Input> zipkin2.storage.cassandra.v1.RealTraceIdIndexer.entriesThatIncreaseGap()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public CassandraStorage zipkin2.storage.cassandra.CassandraStorage.build()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "static List<LocalDate> zipkin2.storage.cassandra.CassandraUtil.getDays(long endTs, @Nullable Long lookback)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/LazySession.java": [
                    "void zipkin2.storage.cassandra.LazySession.close()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static boolean zipkin2.storage.cassandra.Schema.hasUpgrade2_remoteService(KeyspaceMetadata keyspaceMetadata)",
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, Session session)",
                    "static boolean zipkin2.storage.cassandra.Schema.hasUpgrade1_autocompleteTags(KeyspaceMetadata keyspaceMetadata)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectDependencies.java": [
                    "public List<DependencyLink> zipkin2.storage.cassandra.SelectDependencies.map(ResultSet rs)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "Call<List<Span>> zipkin2.storage.cassandra.SelectFromSpan.newCall(String hexTraceId)",
                    "Call<List<List<Span>>> zipkin2.storage.cassandra.SelectFromSpan.newCall(Iterable<String> traceIds)",
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.SelectFromSpan.map(Set<String> input)",
                    "protected BiConsumer<Row, List<Span>> zipkin2.storage.cassandra.SelectFromSpan.accumulator()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromServiceSpan.java": [
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceSpan.newCall(Input input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromSpan.java": [
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromSpan.newCall( @Nullable String serviceName, String annotationKey, TimestampRange timestampRange, int limit)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/ResultSetFutureCall.java": [
                    "protected void zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.doEnqueue(Callback<V> callback)",
                    "public static boolean zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.isOverCapacity(Throwable e)",
                    "protected void zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.doCancel()",
                    "protected V zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.doExecute()",
                    "protected final boolean zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.doIsCanceled()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7e6cfdda11fd6990aadcff542141efa080eae340",
        "previous_commit": "3331eebe83faf0b06c03899addf29c4ff9fac21b",
        "date": 1515737354,
        "releases": {
            "previous": "7e6cfdda11fd6990aadcff542141efa080eae340",
            "next": "7e6cfdda11fd6990aadcff542141efa080eae340"
        },
        "commit_message": "Makes zipkin2 model objects final with serialization impl (#1880)\n\nKryo doesn't work with auto-value. This makes a default implementation\r\nof serialization of top-level types use our json codec (which is\r\nmore efficient than java's default).",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7e6cfdda11fd6990aadcff542141efa080eae340": {
                "zipkin2/src/main/java/zipkin2/Annotation.java": [
                    "public String zipkin2.Annotation.value()",
                    "public long zipkin2.Annotation.timestamp()",
                    "public static Annotation zipkin2.Annotation.create(long timestamp, String value)"
                ],
                "zipkin2/src/main/java/zipkin2/DependencyLink.java": [
                    "public static Builder zipkin2.DependencyLink.newBuilder()",
                    "public long zipkin2.DependencyLink.errorCount()",
                    "public Builder zipkin2.DependencyLink.toBuilder()",
                    "public String zipkin2.DependencyLink.child()",
                    "public Builder zipkin2.DependencyLink.callCount(long callCount)",
                    "public Builder zipkin2.DependencyLink.parent(String parent)",
                    "public long zipkin2.DependencyLink.callCount()",
                    "public DependencyLink zipkin2.DependencyLink.build()",
                    "public String zipkin2.DependencyLink.parent()",
                    "public Builder zipkin2.DependencyLink.errorCount(long errorCount)",
                    "public Builder zipkin2.DependencyLink.child(String child)"
                ],
                "zipkin2/src/main/java/zipkin2/Endpoint.java": [
                    "public String zipkin2.Endpoint.ipv6()",
                    "public final boolean zipkin2.Endpoint.parseIp(@Nullable String ipString)",
                    "public final boolean zipkin2.Endpoint.parseIp(@Nullable InetAddress addr)",
                    "public Endpoint zipkin2.Endpoint.build()",
                    "public Builder zipkin2.Endpoint.toBuilder()",
                    "public String zipkin2.Endpoint.serviceName()",
                    "public String zipkin2.Endpoint.ipv4()",
                    "public static Builder zipkin2.Endpoint.newBuilder()",
                    "public Builder zipkin2.Endpoint.port(@Nullable Integer port)",
                    "public Integer zipkin2.Endpoint.port()",
                    "public Builder zipkin2.Endpoint.serviceName(@Nullable String serviceName)"
                ],
                "zipkin2/src/main/java/zipkin2/Span.java": [
                    "public Map<String, String> zipkin2.Span.tags()",
                    "public Boolean zipkin2.Span.debug()",
                    "public String zipkin2.Span.id()",
                    "public Endpoint zipkin2.Span.remoteEndpoint()",
                    "public String zipkin2.Span.name()",
                    "public String zipkin2.Span.parentId()",
                    "public List<Annotation> zipkin2.Span.annotations()",
                    "public Boolean zipkin2.Span.shared()",
                    "public String zipkin2.Span.traceId()",
                    "public Long zipkin2.Span.duration()",
                    "public Long zipkin2.Span.timestamp()",
                    "public Span zipkin2.Span.build()"
                ]
            },
            "3331eebe83faf0b06c03899addf29c4ff9fac21b": {
                "zipkin2/src/main/java/zipkin2/Annotation.java": [
                    "public static Annotation zipkin2.Annotation.create(long timestamp, String value)"
                ],
                "zipkin2/src/main/java/zipkin2/DependencyLink.java": [
                    "public static Builder zipkin2.DependencyLink.newBuilder()",
                    "public final DependencyLink zipkin2.DependencyLink.build()"
                ],
                "zipkin2/src/main/java/zipkin2/Endpoint.java": [
                    "public final boolean zipkin2.Endpoint.parseIp(@Nullable InetAddress addr)",
                    "public static Builder zipkin2.Endpoint.newBuilder()",
                    "public final Endpoint zipkin2.Endpoint.build()",
                    "public final boolean zipkin2.Endpoint.parseIp(@Nullable String ipString)"
                ],
                "zipkin2/src/main/java/zipkin2/Span.java": [
                    "public Span zipkin2.Span.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "531bedf0528c39a41106c4acce3c3ebed8cac68a",
        "previous_commit": "7498019901726f67b0bcffd45ffb478a31e08ddc",
        "date": 1452215562,
        "releases": {
            "previous": "531bedf0528c39a41106c4acce3c3ebed8cac68a",
            "next": "531bedf0528c39a41106c4acce3c3ebed8cac68a"
        },
        "commit_message": "Fixes imports per style and removes unnecessary \"this\" qualification\n\nSpring Framework style guide requires folks to always qualify fields\nwith `this.`. This project isn't a part of the spring framework, nor\nderives it style from that.\n\nSquare and Google style (from which it derives) does not require such\nqualification. I've contributed to projects from many orgs, and Spring\nis the only place I've seen this. I don't think it is a stretch to call\nthis unconventional.\n\nUnconventional is fine, when it improves the experience of development.\nWriting much of the code in this codebase, I've found the unnecessary\nqualification to cause quite the opposite. It is a cognitive break,\nwhere I wonder what is special which requires this qualification? Other\ntimes, it intrudes on readability, for example chaining with parameters\nends up with `this.` boilerplated throughout the calls. In other words,\nthe fluency is reduced. Minor, but this can make long chains worse, or\ncause wrapping.\n\nWhile I feel it wouldn't be in my place to ask for Spring to change its\nstyle, including use of tabs and `this.` qualifications, I do think it\nis reasonable to not bring this (no pun intended) here.\n\nThe result of reverting this change, if convention isn't valuable, will\nat least be a more joyful experience for the primary contributor.\n",
        "jmh_dependency": {
            "benchmark_directory": "zipkin-java-benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "531bedf0528c39a41106c4acce3c3ebed8cac68a": {
                "zipkin-java-core/src/main/java/io/zipkin/Annotation.java": [
                    "public Annotation io.zipkin.Annotation.build()"
                ],
                "zipkin-java-core/src/main/java/io/zipkin/DependencyLink.java": [
                    "public DependencyLink io.zipkin.DependencyLink.build()"
                ],
                "zipkin-java-core/src/main/java/io/zipkin/Endpoint.java": [
                    "public Endpoint io.zipkin.Endpoint.build()"
                ],
                "zipkin-java-interop/src/main/java/io/zipkin/interop/ScalaSpanStoreAdapter.java": [
                    "public Future<BoxedUnit> io.zipkin.interop.ScalaSpanStoreAdapter.apply(Seq<Span> input)",
                    "public Future<Seq<List<Span>>> io.zipkin.interop.ScalaSpanStoreAdapter.getTracesByIds(Seq<Object> input)",
                    "public Future<Seq<List<Span>>> io.zipkin.interop.ScalaSpanStoreAdapter.getTraces(QueryRequest input)",
                    "public Future<Seq<String>> io.zipkin.interop.ScalaSpanStoreAdapter.getAllServiceNames()",
                    "public Future<Seq<String>> io.zipkin.interop.ScalaSpanStoreAdapter.getSpanNames(String service)"
                ],
                "zipkin-java-jdbc/src/main/java/io/zipkin/jdbc/JDBCSpanStore.java": [
                    "public List<String> io.zipkin.jdbc.JDBCSpanStore.getServiceNames()",
                    "private List<List<Span>> io.zipkin.jdbc.JDBCSpanStore.getTraces(@Nullable QueryRequest request, @Nullable List<Long> traceIds)",
                    "void io.zipkin.jdbc.JDBCSpanStore.clear()",
                    "public List<DependencyLink> io.zipkin.jdbc.JDBCSpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "public void io.zipkin.jdbc.JDBCSpanStore.accept(Iterator<Span> spans)",
                    "public List<String> io.zipkin.jdbc.JDBCSpanStore.getSpanNames(String serviceName)",
                    "private DSLContext io.zipkin.jdbc.JDBCSpanStore.context(Connection conn)"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/ZipkinQueryApiV1.java": [
                    "public void io.zipkin.server.ZipkinQueryApiV1.uploadSpansThrift(@RequestBody byte[] body)",
                    "public List<String> io.zipkin.server.ZipkinQueryApiV1.getServiceNames()",
                    "public byte[] io.zipkin.server.ZipkinQueryApiV1.getTrace(@PathVariable String traceId)",
                    "public void io.zipkin.server.ZipkinQueryApiV1.uploadSpansJson(@RequestBody byte[] body)"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/ZipkinServerConfiguration.java": [
                    "public Object io.zipkin.server.ZipkinServerConfiguration.postProcessAfterInitialization(Object bean, String beanName)",
                    "SpanStore io.zipkin.server.ZipkinServerConfiguration.spanStore()"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/ZipkinServerProperties.java": [
                    "public Store io.zipkin.server.ZipkinServerProperties.getStore()",
                    "public Type io.zipkin.server.ZipkinServerProperties.getType()"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/ZipkinSpanWriter.java": [
                    "public void io.zipkin.server.ZipkinSpanWriter.write(SpanStore spanStore, List<Span> spans)"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/brave/ApiTracerConfiguration.java": [
                    "public boolean io.zipkin.server.brave.ApiTracerConfiguration.preHandle(HttpServletRequest request, HttpServletResponse response, Object o)",
                    "public void io.zipkin.server.brave.ApiTracerConfiguration.addInterceptors(InterceptorRegistry registry)",
                    "public void io.zipkin.server.brave.ApiTracerConfiguration.afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object o)",
                    "public void io.zipkin.server.brave.ApiTracerConfiguration.postHandle(HttpServletRequest request, HttpServletResponse response, Object o, ModelAndView modelAndView)",
                    "public void io.zipkin.server.brave.ApiTracerConfiguration.afterCompletion(HttpServletRequest request, HttpServletResponse response, Object o, Exception e)"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/brave/BraveConfiguration.java": [
                    "public void io.zipkin.server.brave.BraveConfiguration.flushSpans()"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/brave/JDBCTracerConfiguration.java": [
                    "public void io.zipkin.server.brave.JDBCTracerConfiguration.renderEnd(ExecuteContext ctx)",
                    "public void io.zipkin.server.brave.JDBCTracerConfiguration.executeEnd(ExecuteContext ctx)"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/brave/SpanStoreSpanCollector.java": [
                    "public void io.zipkin.server.brave.SpanStoreSpanCollector.collect(Span span)",
                    "public void io.zipkin.server.brave.SpanStoreSpanCollector.flush()"
                ]
            },
            "7498019901726f67b0bcffd45ffb478a31e08ddc": {
                "zipkin-java-core/src/main/java/io/zipkin/Annotation.java": [
                    "public Annotation io.zipkin.Annotation.build()"
                ],
                "zipkin-java-core/src/main/java/io/zipkin/DependencyLink.java": [
                    "public DependencyLink io.zipkin.DependencyLink.build()"
                ],
                "zipkin-java-core/src/main/java/io/zipkin/Endpoint.java": [
                    "public Endpoint io.zipkin.Endpoint.build()"
                ],
                "zipkin-java-interop/src/main/java/io/zipkin/interop/ScalaSpanStoreAdapter.java": [
                    "public Future<BoxedUnit> io.zipkin.interop.ScalaSpanStoreAdapter.apply(Seq<Span> input)",
                    "public Future<Seq<List<Span>>> io.zipkin.interop.ScalaSpanStoreAdapter.getTracesByIds(Seq<Object> input)",
                    "public Future<Seq<List<Span>>> io.zipkin.interop.ScalaSpanStoreAdapter.getTraces(QueryRequest input)",
                    "public Future<Seq<String>> io.zipkin.interop.ScalaSpanStoreAdapter.getAllServiceNames()",
                    "public Future<Seq<String>> io.zipkin.interop.ScalaSpanStoreAdapter.getSpanNames(String service)"
                ],
                "zipkin-java-jdbc/src/main/java/io/zipkin/jdbc/JDBCSpanStore.java": [
                    "public List<String> io.zipkin.jdbc.JDBCSpanStore.getServiceNames()",
                    "private List<List<Span>> io.zipkin.jdbc.JDBCSpanStore.getTraces(@Nullable QueryRequest request, @Nullable List<Long> traceIds)",
                    "void io.zipkin.jdbc.JDBCSpanStore.clear()",
                    "public List<DependencyLink> io.zipkin.jdbc.JDBCSpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "public void io.zipkin.jdbc.JDBCSpanStore.accept(Iterator<Span> spans)",
                    "public List<String> io.zipkin.jdbc.JDBCSpanStore.getSpanNames(String serviceName)",
                    "private DSLContext io.zipkin.jdbc.JDBCSpanStore.context(Connection conn)"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/ZipkinQueryApiV1.java": [
                    "public void io.zipkin.server.ZipkinQueryApiV1.uploadSpansThrift(@RequestBody byte[] body)",
                    "public List<String> io.zipkin.server.ZipkinQueryApiV1.getServiceNames()",
                    "public byte[] io.zipkin.server.ZipkinQueryApiV1.getTrace(@PathVariable String traceId)",
                    "public void io.zipkin.server.ZipkinQueryApiV1.uploadSpansJson(@RequestBody byte[] body)"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/ZipkinServerConfiguration.java": [
                    "public Object io.zipkin.server.ZipkinServerConfiguration.postProcessAfterInitialization(Object bean, String beanName)",
                    "SpanStore io.zipkin.server.ZipkinServerConfiguration.spanStore()"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/ZipkinServerProperties.java": [
                    "public Store io.zipkin.server.ZipkinServerProperties.getStore()",
                    "public Type io.zipkin.server.ZipkinServerProperties.getType()"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/ZipkinSpanWriter.java": [
                    "public void io.zipkin.server.ZipkinSpanWriter.write(SpanStore spanStore, List<Span> spans)"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/brave/ApiTracerConfiguration.java": [
                    "public boolean io.zipkin.server.brave.ApiTracerConfiguration.preHandle(HttpServletRequest request, HttpServletResponse response, Object o)",
                    "public void io.zipkin.server.brave.ApiTracerConfiguration.addInterceptors(InterceptorRegistry registry)",
                    "public void io.zipkin.server.brave.ApiTracerConfiguration.afterConcurrentHandlingStarted(HttpServletRequest request, HttpServletResponse response, Object o)",
                    "public void io.zipkin.server.brave.ApiTracerConfiguration.postHandle(HttpServletRequest request, HttpServletResponse response, Object o, ModelAndView modelAndView)",
                    "public void io.zipkin.server.brave.ApiTracerConfiguration.afterCompletion(HttpServletRequest request, HttpServletResponse response, Object o, Exception e)"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/brave/BraveConfiguration.java": [
                    "public void io.zipkin.server.brave.BraveConfiguration.flushSpans()"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/brave/JDBCTracerConfiguration.java": [
                    "public void io.zipkin.server.brave.JDBCTracerConfiguration.renderEnd(ExecuteContext ctx)",
                    "public void io.zipkin.server.brave.JDBCTracerConfiguration.executeEnd(ExecuteContext ctx)"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/brave/SpanStoreSpanCollector.java": [
                    "public void io.zipkin.server.brave.SpanStoreSpanCollector.collect(Span span)",
                    "public void io.zipkin.server.brave.SpanStoreSpanCollector.flush()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9b1f5295b2bd9715f4c3ded4fd18fdd710b563c9",
        "previous_commit": "9db318e3e04bd20102acd1bdb80e92f0857543c5",
        "date": 1527216647,
        "releases": {
            "previous": "9b1f5295b2bd9715f4c3ded4fd18fdd710b563c9",
            "next": "9b1f5295b2bd9715f4c3ded4fd18fdd710b563c9"
        },
        "commit_message": "Removes auto-value dependency and maven metadata from core jar (#2062)\n\nThis removes the auto-value dependency from the zipkin2 core jar as\r\nwe only use it in a couple places now. This prevents a version problem\r\nwhere new versions require a hard dependency. It also reduces the\r\nnumber of classes and the size (orders of tens of kilobytes\r\nuncompressed).\r\n\r\nBy default, the maven plugin includes a copy of the pom file, which can\r\nbe a kilobyte or more of text. This excludes it in favor of normal\r\ndownload location.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9b1f5295b2bd9715f4c3ded4fd18fdd710b563c9": {
                "zipkin2/src/main/java/zipkin2/CheckResult.java": [
                    "public Throwable zipkin2.CheckResult.error()",
                    "public boolean zipkin2.CheckResult.ok()",
                    "public static CheckResult zipkin2.CheckResult.failed(Throwable error)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/Buffer.java": [
                    "long zipkin2.internal.Buffer.readVarint64()"
                ],
                "zipkin2/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "void zipkin2.internal.DependencyLinker.addLink(String parent, String child, boolean isError)",
                    "static List<DependencyLink> zipkin2.internal.DependencyLinker.link(Map<Pair, Long> callCounts, Map<Pair, Long> errorCounts)",
                    "public static List<DependencyLink> zipkin2.internal.DependencyLinker.merge(Iterable<DependencyLink> in)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/Node.java": [
                    "void zipkin2.internal.Node<V>.processNode(Entry<V> entry)",
                    "public boolean zipkin2.internal.Node<V>.addNode(@Nullable String parentId, String id, V value)",
                    "public V zipkin2.internal.Node<V>.value()"
                ],
                "zipkin2/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "Set<String> zipkin2.storage.InMemoryStorage.traceIdsDescendingByTimestamp(QueryRequest request)",
                    "synchronized public Call<Void> zipkin2.storage.InMemoryStorage.accept(List<Span> spans)",
                    "private int zipkin2.storage.InMemoryStorage.deleteOldestTrace()",
                    "public int zipkin2.storage.InMemoryStorage.compare(TraceIdTimestamp left, TraceIdTimestamp right)"
                ],
                "zipkin2/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public String zipkin2.storage.QueryRequest.serviceName()",
                    "public Builder zipkin2.storage.QueryRequest.limit(int limit)",
                    "public Builder zipkin2.storage.QueryRequest.endTs(long endTs)",
                    "public Builder zipkin2.storage.QueryRequest.spanName(@Nullable String spanName)",
                    "public final QueryRequest zipkin2.storage.QueryRequest.build()",
                    "public Long zipkin2.storage.QueryRequest.minDuration()",
                    "public Builder zipkin2.storage.QueryRequest.minDuration(@Nullable Long minDuration)",
                    "public Builder zipkin2.storage.QueryRequest.toBuilder()",
                    "public int zipkin2.storage.QueryRequest.limit()",
                    "public Long zipkin2.storage.QueryRequest.maxDuration()",
                    "public long zipkin2.storage.QueryRequest.endTs()",
                    "public Builder zipkin2.storage.QueryRequest.annotationQuery(Map<String, String> annotationQuery)",
                    "public Builder zipkin2.storage.QueryRequest.maxDuration(@Nullable Long maxDuration)",
                    "public long zipkin2.storage.QueryRequest.lookback()",
                    "public static Builder zipkin2.storage.QueryRequest.newBuilder()",
                    "public String zipkin2.storage.QueryRequest.spanName()",
                    "public Builder zipkin2.storage.QueryRequest.lookback(long lookback)",
                    "public Builder zipkin2.storage.QueryRequest.serviceName(@Nullable String serviceName)",
                    "public Map<String, String> zipkin2.storage.QueryRequest.annotationQuery()"
                ]
            },
            "9db318e3e04bd20102acd1bdb80e92f0857543c5": {
                "zipkin2/src/main/java/zipkin2/CheckResult.java": [
                    "public static CheckResult zipkin2.CheckResult.failed(Throwable error)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/Buffer.java": [
                    "long zipkin2.internal.Buffer.readVarint64()"
                ],
                "zipkin2/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "void zipkin2.internal.DependencyLinker.addLink(String parent, String child, boolean isError)",
                    "static List<DependencyLink> zipkin2.internal.DependencyLinker.link(Map<Pair, Long> callCounts, Map<Pair, Long> errorCounts)",
                    "public static List<DependencyLink> zipkin2.internal.DependencyLinker.merge(Iterable<DependencyLink> in)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/Node.java": [
                    "void zipkin2.internal.Node<V>.processNode(Entry<V> entry)",
                    "public boolean zipkin2.internal.Node<V>.addNode(@Nullable String parentId, String id, V value)",
                    "public V zipkin2.internal.Node<V>.value()"
                ],
                "zipkin2/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "Set<String> zipkin2.storage.InMemoryStorage.traceIdsDescendingByTimestamp(QueryRequest request)",
                    "synchronized public Call<Void> zipkin2.storage.InMemoryStorage.accept(List<Span> spans)",
                    "private int zipkin2.storage.InMemoryStorage.deleteOldestTrace()",
                    "public int zipkin2.storage.InMemoryStorage.compare(TraceIdTimestamp left, TraceIdTimestamp right)"
                ],
                "zipkin2/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public final QueryRequest zipkin2.storage.QueryRequest.build()",
                    "public static Builder zipkin2.storage.QueryRequest.newBuilder()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "208efe0b5785b3de88d30db00217a50bbaf2d2d9",
        "previous_commit": "6b9ea28e3940628d29913e4e054d97d15eb2d27e",
        "date": 1707381197,
        "releases": {
            "previous": "208efe0b5785b3de88d30db00217a50bbaf2d2d9",
            "next": "208efe0b5785b3de88d30db00217a50bbaf2d2d9"
        },
        "commit_message": "code cleanups, mostly around collections (#3718)\n\nSigned-off-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "208efe0b5785b3de88d30db00217a50bbaf2d2d9": {
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollector.java": [
                    "Runnable zipkin2.collector.kafka.KafkaCollector.guardFailures(final Runnable delegate)"
                ],
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollectorWorker.java": [
                    "public void zipkin2.collector.kafka.KafkaCollectorWorker.onPartitionsAssigned(Collection<TopicPartition> partitions)",
                    "public void zipkin2.collector.kafka.KafkaCollectorWorker.onPartitionsRevoked(Collection<TopicPartition> partitions)",
                    "public void zipkin2.collector.kafka.KafkaCollectorWorker.run()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ConditionalOnSelfTracing.java": [
                    "public ConditionOutcome zipkin2.server.internal.SelfTracingCondition.getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata a)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java": [
                    "static String zipkin2.server.internal.elasticsearch.DynamicCredentialsFileLoader.ensureNotEmptyOrNull(Properties properties, String fileName, String name)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/mysql/ZipkinMySQLStorageProperties.java": [
                    "private String zipkin2.server.internal.mysql.ZipkinMySQLStorageProperties.determineJdbcUrl()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "Call<List<Span>> zipkin2.storage.cassandra.SelectFromSpan.newCall(String hexTraceId)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromServiceRemoteService.java": [
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceRemoteService.newCall(List<Input> inputs)",
                    "public Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceRemoteService.map(List<String> serviceNames)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromServiceSpan.java": [
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceSpan.newCall(List<Input> inputs)",
                    "public Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceSpan.map(List<String> serviceNames)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureIndexTemplatesAndClusterReady(String index)",
                    "public static Builder zipkin2.elasticsearch.ElasticsearchStorage.newBuilder(LazyHttpClient lazyHttpClient)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.spanIndexTemplate(ElasticsearchVersion version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.indexProperties(ElasticsearchVersion version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.autocompleteTemplate(ElasticsearchVersion version)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/Aggregation.java": [
                    "void zipkin2.elasticsearch.internal.client.Aggregation.order(String agg, String direction)",
                    "public static Aggregation zipkin2.elasticsearch.internal.client.Aggregation.min(String field)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/SearchRequest.java": [
                    "SearchRequest zipkin2.elasticsearch.internal.client.SearchRequest.query(Object filter)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/SearchResultConverter.java": [
                    "public List<T> zipkin2.elasticsearch.internal.client.SearchResultConverter<T>.convert(JsonParser parser, Supplier<String> contentString)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/AggregateDependencies.java": [
                    "public List<DependencyLink> zipkin2.storage.mysql.v1.AggregateDependencies.apply(DSLContext context)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/DependencyLinkV2SpanIterator.java": [
                    "static @Nullable String zipkin2.storage.mysql.v1.DependencyLinkV2SpanIterator.emptyToNull(Record next, TableField<Record, String> field)"
                ],
                "zipkin/src/main/java/zipkin2/Call.java": [
                    "public static <T> Call<List<T>> zipkin2.Call<V>.emptyList()"
                ],
                "zipkin/src/main/java/zipkin2/DependencyLink.java": [
                    "public DependencyLink zipkin2.DependencyLink.build()"
                ],
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Span zipkin2.Span.build()"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "Collection<V> zipkin2.storage.InMemoryStorage.get(K key)"
                ],
                "zipkin/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public QueryRequest zipkin2.storage.QueryRequest.build()",
                    "public String zipkin2.storage.QueryRequest.annotationQueryString()"
                ],
                "zipkin/src/main/java/zipkin2/v1/V2SpanConverter.java": [
                    "void zipkin2.v1.V2SpanConverter.parse(Span in)"
                ]
            },
            "6b9ea28e3940628d29913e4e054d97d15eb2d27e": {
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollector.java": [
                    "Runnable zipkin2.collector.kafka.KafkaCollector.guardFailures(final Runnable delegate)"
                ],
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollectorWorker.java": [
                    "public void zipkin2.collector.kafka.KafkaCollectorWorker.onPartitionsAssigned(Collection<TopicPartition> partitions)",
                    "public void zipkin2.collector.kafka.KafkaCollectorWorker.onPartitionsRevoked(Collection<TopicPartition> partitions)",
                    "public void zipkin2.collector.kafka.KafkaCollectorWorker.run()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ConditionalOnSelfTracing.java": [
                    "public ConditionOutcome zipkin2.server.internal.SelfTracingCondition.getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata a)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/DynamicCredentialsFileLoader.java": [
                    "static String zipkin2.server.internal.elasticsearch.DynamicCredentialsFileLoader.ensureNotEmptyOrNull(Properties properties, String fileName, String name)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/mysql/ZipkinMySQLStorageProperties.java": [
                    "private String zipkin2.server.internal.mysql.ZipkinMySQLStorageProperties.determineJdbcUrl()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "Call<List<Span>> zipkin2.storage.cassandra.SelectFromSpan.newCall(String hexTraceId)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromServiceRemoteService.java": [
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceRemoteService.newCall(List<Input> inputs)",
                    "public Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceRemoteService.map(List<String> serviceNames)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromServiceSpan.java": [
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceSpan.newCall(List<Input> inputs)",
                    "public Call<Map<String, Long>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceSpan.map(List<String> serviceNames)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureIndexTemplatesAndClusterReady(String index)",
                    "public static Builder zipkin2.elasticsearch.ElasticsearchStorage.newBuilder(LazyHttpClient lazyHttpClient)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.spanIndexTemplate(ElasticsearchVersion version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.indexProperties(ElasticsearchVersion version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.autocompleteTemplate(ElasticsearchVersion version)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/Aggregation.java": [
                    "void zipkin2.elasticsearch.internal.client.Aggregation.order(String agg, String direction)",
                    "public static Aggregation zipkin2.elasticsearch.internal.client.Aggregation.min(String field)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/SearchRequest.java": [
                    "SearchRequest zipkin2.elasticsearch.internal.client.SearchRequest.query(Object filter)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/SearchResultConverter.java": [
                    "public List<T> zipkin2.elasticsearch.internal.client.SearchResultConverter<T>.convert(JsonParser parser, Supplier<String> contentString)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/AggregateDependencies.java": [
                    "public List<DependencyLink> zipkin2.storage.mysql.v1.AggregateDependencies.apply(DSLContext context)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/DependencyLinkV2SpanIterator.java": [
                    "static @Nullable String zipkin2.storage.mysql.v1.DependencyLinkV2SpanIterator.emptyToNull(Record next, TableField<Record, String> field)"
                ],
                "zipkin/src/main/java/zipkin2/Call.java": [
                    "public static <T> Call<List<T>> zipkin2.Call<V>.emptyList()"
                ],
                "zipkin/src/main/java/zipkin2/DependencyLink.java": [
                    "public DependencyLink zipkin2.DependencyLink.build()"
                ],
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Span zipkin2.Span.build()"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "Collection<V> zipkin2.storage.InMemoryStorage.get(K key)"
                ],
                "zipkin/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public QueryRequest zipkin2.storage.QueryRequest.build()",
                    "public String zipkin2.storage.QueryRequest.annotationQueryString()"
                ],
                "zipkin/src/main/java/zipkin2/v1/V2SpanConverter.java": [
                    "void zipkin2.v1.V2SpanConverter.parse(Span in)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "4e923c30e575e8529e5254ba2f8409020e7c58f1",
        "previous_commit": "5c8a17620674ada895acf05038bfdb209924a47d",
        "date": 1505215897,
        "releases": {
            "previous": "4e923c30e575e8529e5254ba2f8409020e7c58f1",
            "next": "4e923c30e575e8529e5254ba2f8409020e7c58f1"
        },
        "commit_message": "Extracts v2 native Elasticsearch Storage component\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4e923c30e575e8529e5254ba2f8409020e7c58f1": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "InMemoryStorage zipkin.server.ZipkinServerConfiguration.v2Storage(V2StorageComponent component)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java": [
                    "public final Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.pipeline(String pipeline)",
                    "public final Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.namesLookback(int namesLookback)",
                    "public final ElasticsearchHttpStorage zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.build()",
                    "public AsyncSpanStore zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.legacyAsyncSpanStore()",
                    "public final Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.dateSeparator(char dateSeparator)",
                    "public SpanConsumer zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.spanConsumer()",
                    "public final Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.indexShards(int indexShards)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.close()",
                    "public final Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.indexReplicas(int indexReplicas)",
                    "public final Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.toBuilder()",
                    "public final Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.strictTraceId(boolean strictTraceId)",
                    "public final Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.hosts(final List<String> hosts)",
                    "public final Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.index(String index)",
                    "public final Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.maxRequests(int maxRequests)",
                    "public final Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.flushOnWrites(boolean flushOnWrites)",
                    "public static Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.builder(OkHttpClient client)",
                    "public static Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.builder()",
                    "public final Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.legacyReadsEnabled(boolean legacyReadsEnabled)",
                    "public SpanStore zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.spanStore()",
                    "void zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.clear()"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyElasticsearchHttpSpanStore.java": [
                    "void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getDependencies(List<String> indices, Callback<List<DependencyLink>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getSpanNames(String serviceName, Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.onSuccess(@Nullable List<String> value)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getRawTrace(long traceIdHigh, long traceIdLow, Callback<List<Span>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getServiceNames(Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.onSuccess(@Nullable List<String> traceIds)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyJsonAdapters.java": [
                    "public DependencyLink zipkin.storage.elasticsearch.http.LegacyJsonAdapters.fromJson(JsonReader reader)"
                ]
            },
            "5c8a17620674ada895acf05038bfdb209924a47d": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "InMemoryStorage zipkin.server.ZipkinServerConfiguration.v2Storage(V2StorageComponent component)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java": [
                    "public static Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.builder(OkHttpClient client)",
                    "public static Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.builder()",
                    "public AsyncSpanStore zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.legacyAsyncSpanStore()",
                    "public final Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.hosts(final List<String> hosts)",
                    "public final Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.index(String index)",
                    "public final Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.dateSeparator(char dateSeparator)",
                    "public SpanConsumer zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.spanConsumer()",
                    "public SpanStore zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.spanStore()",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.close()",
                    "void zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.clear()"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyElasticsearchHttpSpanStore.java": [
                    "void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getDependencies(List<String> indices, Callback<List<DependencyLink>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getSpanNames(String serviceName, Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.onSuccess(@Nullable List<String> value)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getRawTrace(long traceIdHigh, long traceIdLow, Callback<List<Span>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getServiceNames(Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.onSuccess(@Nullable List<String> traceIds)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyJsonAdapters.java": [
                    "public DependencyLink zipkin.storage.elasticsearch.http.LegacyJsonAdapters.fromJson(JsonReader reader)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5b6efdc70a83fca6e9b09bf8df5a3a861caebf9e",
        "previous_commit": "006d8f6c65adec8ac799e63e41d8cc6e3f2e4aac",
        "date": 1516504774,
        "releases": {
            "previous": "5b6efdc70a83fca6e9b09bf8df5a3a861caebf9e",
            "next": "5b6efdc70a83fca6e9b09bf8df5a3a861caebf9e"
        },
        "commit_message": "Optimizes reference count of Span and squashes an errorprone warning (#1890)\n\nBased on https://www.youtube.com/watch?time_continue=2118&v=YLTD1GBEfwo\r\nwe were a bit noisy for no good reason. Thanks @raphw for noticing\r\n\r\nThis adds and uses asLong accessors to prevent routine Long allocation\r\n\r\nThis also squashes an error-prone warning, which while wasn't a bug\r\nwasn't worth explaining in a surpression why it wasn't.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5b6efdc70a83fca6e9b09bf8df5a3a861caebf9e": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "static byte[] zipkin2.elasticsearch.ElasticsearchSpanConsumer.prefixWithTimestampMillisAndQuery(Span span, long timestampMillis)",
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.indexSpans(BulkSpanIndexer indexer, List<Span> spans)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)",
                    "private static long zipkin2.storage.cassandra.CassandraSpanConsumer.guessTimestamp(Span span)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/InsertSpan.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.InsertSpan.newFuture()",
                    "Input zipkin2.storage.cassandra.InsertSpan.newInput(zipkin2.Span span, UUID ts_uuid)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/InsertTraceByServiceSpan.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.InsertTraceByServiceSpan.newFuture()"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanConverter.java": [
                    "public static zipkin.Span zipkin.internal.V2SpanConverter.toSpan(Span in)"
                ],
                "zipkin2/src/main/java/zipkin2/Span.java": [
                    "public Boolean zipkin2.Span.debug()",
                    "public Builder zipkin2.Span.shared(@Nullable Boolean shared)",
                    "public int zipkin2.Span.hashCode()",
                    "public Builder zipkin2.Span.duration(@Nullable Long duration)",
                    "public Boolean zipkin2.Span.shared()",
                    "public Builder zipkin2.Span.timestamp(@Nullable Long timestamp)",
                    "public Builder zipkin2.Span.clear()",
                    "public boolean zipkin2.Span.equals(Object o)",
                    "public Builder zipkin2.Span.debug(@Nullable Boolean debug)",
                    "public Long zipkin2.Span.duration()",
                    "public Long zipkin2.Span.timestamp()",
                    "public Builder zipkin2.Span.clone()"
                ],
                "zipkin2/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "public Span zipkin2.internal.DependencyLinker.merge(@Nullable Span left, @Nullable Span right)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V1SpanWriter.java": [
                    "static Parsed zipkin2.internal.V1SpanWriter.parse(Span in)",
                    "public void zipkin2.internal.V1SpanWriter.write(Span value, Buffer b)",
                    "public int zipkin2.internal.V1SpanWriter.sizeInBytes(Span value)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V2SpanWriter.java": [
                    "public void zipkin2.internal.V2SpanWriter.write(Span value, Buffer b)",
                    "public int zipkin2.internal.V2SpanWriter.sizeInBytes(Span value)"
                ],
                "zipkin2/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "synchronized public Call<Void> zipkin2.storage.InMemoryStorage.accept(List<Span> spans)"
                ],
                "zipkin2/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public boolean zipkin2.storage.QueryRequest.test(List<Span> spans)"
                ]
            },
            "006d8f6c65adec8ac799e63e41d8cc6e3f2e4aac": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "static byte[] zipkin2.elasticsearch.ElasticsearchSpanConsumer.prefixWithTimestampMillisAndQuery(Span span, @Nullable Long timestampMillis)",
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.indexSpans(BulkSpanIndexer indexer, List<Span> spans)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)",
                    "private static long zipkin2.storage.cassandra.CassandraSpanConsumer.guessTimestamp(Span span)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/InsertSpan.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.InsertSpan.newFuture()",
                    "Input zipkin2.storage.cassandra.InsertSpan.newInput(zipkin2.Span span, UUID ts_uuid)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/InsertTraceByServiceSpan.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.InsertTraceByServiceSpan.newFuture()"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanConverter.java": [
                    "public static zipkin.Span zipkin.internal.V2SpanConverter.toSpan(Span in)"
                ],
                "zipkin2/src/main/java/zipkin2/Span.java": [
                    "public Boolean zipkin2.Span.debug()",
                    "public Builder zipkin2.Span.shared(@Nullable Boolean shared)",
                    "public int zipkin2.Span.hashCode()",
                    "public Builder zipkin2.Span.duration(@Nullable Long duration)",
                    "public Boolean zipkin2.Span.shared()",
                    "public Builder zipkin2.Span.timestamp(@Nullable Long timestamp)",
                    "public Builder zipkin2.Span.clear()",
                    "public boolean zipkin2.Span.equals(Object o)",
                    "public Builder zipkin2.Span.debug(@Nullable Boolean debug)",
                    "public Long zipkin2.Span.duration()",
                    "public Long zipkin2.Span.timestamp()",
                    "public Builder zipkin2.Span.clone()"
                ],
                "zipkin2/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "public Span zipkin2.internal.DependencyLinker.merge(@Nullable Span left, @Nullable Span right)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V1SpanWriter.java": [
                    "static Parsed zipkin2.internal.V1SpanWriter.parse(Span in)",
                    "public void zipkin2.internal.V1SpanWriter.write(Span value, Buffer b)",
                    "public int zipkin2.internal.V1SpanWriter.sizeInBytes(Span value)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V2SpanWriter.java": [
                    "public void zipkin2.internal.V2SpanWriter.write(Span value, Buffer b)",
                    "public int zipkin2.internal.V2SpanWriter.sizeInBytes(Span value)"
                ],
                "zipkin2/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "synchronized public Call<Void> zipkin2.storage.InMemoryStorage.accept(List<Span> spans)"
                ],
                "zipkin2/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public boolean zipkin2.storage.QueryRequest.test(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0ccb2d696a7aa54230473231f713941b07e26881",
        "previous_commit": "7190a6d576e2a26ea3c6041e1f728d56bc3ce43f",
        "date": 1565425959,
        "releases": {
            "previous": "0ccb2d696a7aa54230473231f713941b07e26881",
            "next": "0ccb2d696a7aa54230473231f713941b07e26881"
        },
        "commit_message": "Addresses most errorprone feedback so we have less compile warnings (#2750)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0ccb2d696a7aa54230473231f713941b07e26881": {
                "zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java": [
                    "List<Span> zipkin2.collector.Collector.decodeList(BytesDecoder<Span> decoder, byte[] serialized)"
                ],
                "zipkin-collector/rabbitmq/src/main/java/zipkin2/collector/rabbitmq/RabbitMQCollector.java": [
                    "private void zipkin2.collector.rabbitmq.RabbitMQCollector.declareQueueIfMissing(Connection connection)",
                    "static Address[] zipkin2.collector.rabbitmq.RabbitMQCollector.convertAddresses(List<String> addresses)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/MetricsHealthController.java": [
                    "public ObjectNode zipkin2.server.internal.MetricsHealthController.fetchMetricsFromMicrometer()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/cassandra3/ZipkinCassandra3StorageProperties.java": [
                    "public CassandraStorage.Builder zipkin2.server.internal.cassandra3.ZipkinCassandra3StorageProperties.toBuilder()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledCall.java": [
                    "static boolean zipkin2.server.internal.throttle.ThrottledCall.await(CountDownLatch latch)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.v1.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraUtil.java": [
                    "static Set<String> zipkin2.storage.cassandra.v1.CassandraUtil.annotationKeys(Span span)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Indexer.java": [
                    "void zipkin2.storage.cassandra.v1.Indexer.index(Span span, List<Call<Void>> calls)",
                    "static ImmutableSetMultimap<PartitionKeyToTraceId, Long> zipkin2.storage.cassandra.v1.Indexer.entriesThatIncreaseGap( ConcurrentMap<PartitionKeyToTraceId, Pair> sharedState, ImmutableSetMultimap<PartitionKeyToTraceId, Long> updates)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertTrace.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.InsertTrace.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Schema.java": [
                    "static void zipkin2.storage.cassandra.v1.Schema.applyCqlFile(String keyspace, Session session, String resource)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java": [
                    "static List<InetSocketAddress> zipkin2.storage.cassandra.v1.Default.parseContactPoints(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "static List<InetSocketAddress> zipkin2.storage.cassandra.DefaultSessionFactory.parseContactPoints(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static void zipkin2.storage.cassandra.Schema.applyCqlFile(String keyspace, Session session, String resource)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.indexProperties(float version)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/IndexNameFormatter.java": [
                    "public final IndexNameFormatter zipkin2.elasticsearch.internal.IndexNameFormatter.build()",
                    "public List<String> zipkin2.elasticsearch.internal.IndexNameFormatter.formatTypeAndRange(@Nullable String type, long beginMillis, long endMillis)"
                ],
                "zipkin/src/main/java/zipkin2/codec/DependencyLinkBytesDecoder.java": [
                    "public List<DependencyLink> decodeList(byte[] links)"
                ],
                "zipkin/src/main/java/zipkin2/codec/SpanBytesDecoder.java": [
                    "public List<Span> decodeList(ByteBuffer spans)",
                    "public List<Span> decodeList(byte[] spans)"
                ],
                "zipkin/src/main/java/zipkin2/internal/FilterTraces.java": [
                    "public List<List<Span>> zipkin2.internal.FilterTraces.map(List<List<Span>> input)"
                ],
                "zipkin/src/main/java/zipkin2/internal/ThriftCodec.java": [
                    "static int zipkin2.internal.ThriftCodec.readListLength(ReadBuffer buffer)",
                    "static void zipkin2.internal.ThriftCodec.writeLengthPrefixed(WriteBuffer buffer, String utf8)"
                ],
                "zipkin/src/main/java/zipkin2/storage/GroupByTraceId.java": [
                    "public List<List<Span>> zipkin2.storage.GroupByTraceId.map(List<Span> input)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "Set<String> zipkin2.storage.InMemoryStorage.traceIdsDescendingByTimestamp(QueryRequest request)"
                ]
            },
            "7190a6d576e2a26ea3c6041e1f728d56bc3ce43f": {
                "zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java": [
                    "List<Span> zipkin2.collector.Collector.decodeList(BytesDecoder<Span> decoder, byte[] serialized)"
                ],
                "zipkin-collector/rabbitmq/src/main/java/zipkin2/collector/rabbitmq/RabbitMQCollector.java": [
                    "private void zipkin2.collector.rabbitmq.RabbitMQCollector.declareQueueIfMissing(Connection connection)",
                    "static Address[] zipkin2.collector.rabbitmq.RabbitMQCollector.convertAddresses(List<String> addresses)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/MetricsHealthController.java": [
                    "public ObjectNode zipkin2.server.internal.MetricsHealthController.fetchMetricsFromMicrometer()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/cassandra3/ZipkinCassandra3StorageProperties.java": [
                    "public Builder zipkin2.server.internal.cassandra3.ZipkinCassandra3StorageProperties.toBuilder()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledCall.java": [
                    "static boolean zipkin2.server.internal.throttle.ThrottledCall.await(CountDownLatch latch)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.v1.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraUtil.java": [
                    "static Set<String> zipkin2.storage.cassandra.v1.CassandraUtil.annotationKeys(Span span)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Indexer.java": [
                    "void zipkin2.storage.cassandra.v1.Indexer.index(Span span, List<Call<Void>> calls)",
                    "static ImmutableSetMultimap<PartitionKeyToTraceId, Long> zipkin2.storage.cassandra.v1.Indexer.entriesThatIncreaseGap( ConcurrentMap<PartitionKeyToTraceId, Pair> sharedState, ImmutableSetMultimap<PartitionKeyToTraceId, Long> updates)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertTrace.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.InsertTrace.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Schema.java": [
                    "static void zipkin2.storage.cassandra.v1.Schema.applyCqlFile(String keyspace, Session session, String resource)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java": [
                    "static List<InetSocketAddress> zipkin2.storage.cassandra.v1.Default.parseContactPoints(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "static List<InetSocketAddress> zipkin2.storage.cassandra.DefaultSessionFactory.parseContactPoints(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static void zipkin2.storage.cassandra.Schema.applyCqlFile(String keyspace, Session session, String resource)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.indexProperties(float version)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/IndexNameFormatter.java": [
                    "public final IndexNameFormatter zipkin2.elasticsearch.internal.IndexNameFormatter.build()",
                    "public List<String> zipkin2.elasticsearch.internal.IndexNameFormatter.formatTypeAndRange(@Nullable String type, long beginMillis, long endMillis)"
                ],
                "zipkin/src/main/java/zipkin2/codec/DependencyLinkBytesDecoder.java": [
                    "public List<DependencyLink> decodeList(byte[] links)"
                ],
                "zipkin/src/main/java/zipkin2/codec/SpanBytesDecoder.java": [
                    "public List<Span> decodeList(ByteBuffer spans)",
                    "public List<Span> decodeList(byte[] spans)"
                ],
                "zipkin/src/main/java/zipkin2/internal/FilterTraces.java": [
                    "public List<List<Span>> zipkin2.internal.FilterTraces.map(List<List<Span>> input)"
                ],
                "zipkin/src/main/java/zipkin2/internal/ThriftCodec.java": [
                    "static int zipkin2.internal.ThriftCodec.readListLength(ReadBuffer buffer)",
                    "static void zipkin2.internal.ThriftCodec.writeLengthPrefixed(WriteBuffer buffer, String utf8)"
                ],
                "zipkin/src/main/java/zipkin2/storage/GroupByTraceId.java": [
                    "public List<List<Span>> zipkin2.storage.GroupByTraceId.map(List<Span> input)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "Set<String> zipkin2.storage.InMemoryStorage.traceIdsDescendingByTimestamp(QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e4eb56792c2efb402a6764c5b80a19eff27268e0",
        "previous_commit": "27190bf929b8d64ad0e7b99c05bb4057c046c4f2",
        "date": 1557652063,
        "releases": {
            "previous": "e4eb56792c2efb402a6764c5b80a19eff27268e0",
            "next": "e4eb56792c2efb402a6764c5b80a19eff27268e0"
        },
        "commit_message": "Consolidates buffers and generally improves string decoding (#2588)\n\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e4eb56792c2efb402a6764c5b80a19eff27268e0": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraUtil.java": [
                    "static Set<String> zipkin2.storage.cassandra.v1.CassandraUtil.annotationKeys(Span span)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "static @Nullable String zipkin2.storage.cassandra.CassandraUtil.annotationQuery(Span span)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.addAutocompleteValues(long indexTimestamp, Span span)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.spanIndexTemplate(float version)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BulkIndexWriter.java": [
                    "static void zipkin2.elasticsearch.internal.BulkIndexWriter<T>.addSearchFields(Span span, JsonWriter writer)"
                ],
                "zipkin/src/main/java/zipkin2/Endpoint.java": [
                    "static String zipkin2.Endpoint.writeIpV6(byte[] ipv6)",
                    "static String zipkin2.Endpoint.writeIpV4(byte[] ipBytes)"
                ],
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.traceId(long high, long low)",
                    "static String zipkin2.Span.padLeft(String id, int desiredLength)",
                    "static String zipkin2.Span.toLowerHex(long v)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Codec.java": [
                    "public static boolean zipkin2.internal.Proto3Codec.readList(byte[] bytes, Collection<Span> out)",
                    "public static @Nullable Span zipkin2.internal.Proto3Codec.readOne(byte[] bytes)",
                    "public static boolean zipkin2.internal.Proto3Codec.read(byte[] bytes, Collection<Span> out)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Fields.java": [
                    "final T zipkin2.internal.Proto3Fields.readLengthPrefixAndValue(UnsafeBuffer b)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3ZipkinFields.java": [
                    "Span zipkin2.internal.Proto3ZipkinFields.readValue(UnsafeBuffer buffer, int length)",
                    "boolean zipkin2.internal.Proto3ZipkinFields.readLengthPrefixAndValue(UnsafeBuffer b, Span.Builder builder)"
                ],
                "zipkin/src/main/java/zipkin2/internal/ThriftCodec.java": [
                    "static byte[] zipkin2.internal.ThriftCodec.readByteArray(ByteBuffer bytes)",
                    "static IllegalArgumentException zipkin2.internal.ThriftCodec.exceptionReading(String type, Exception e)",
                    "static String zipkin2.internal.ThriftCodec.readUtf8(ByteBuffer bytes)",
                    "static int zipkin2.internal.ThriftCodec.guardLength(ByteBuffer buffer)"
                ],
                "zipkin/src/main/java/zipkin2/internal/ThriftEndpointCodec.java": [
                    "static Endpoint zipkin2.internal.ThriftEndpointCodec.read(ByteBuffer bytes)"
                ],
                "zipkin/src/main/java/zipkin2/internal/UnsafeBuffer.java": [
                    "String zipkin2.internal.UnsafeBuffer.readBytesAsHex(int length)",
                    "String zipkin2.internal.UnsafeBuffer.readUtf8(int length)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1ThriftSpanReader.java": [
                    "static void zipkin2.internal.V1ThriftSpanReader.read(ByteBuffer bytes, V1Span.Builder builder)",
                    "public V1Span zipkin2.internal.V1ThriftSpanReader.read(ByteBuffer bytes)"
                ]
            },
            "27190bf929b8d64ad0e7b99c05bb4057c046c4f2": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraUtil.java": [
                    "static Set<String> zipkin2.storage.cassandra.v1.CassandraUtil.annotationKeys(Span span)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "static @Nullable String zipkin2.storage.cassandra.CassandraUtil.annotationQuery(Span span)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.addAutocompleteValues(long indexTimestamp, Span span)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.spanIndexTemplate(float version)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BulkIndexWriter.java": [
                    "static void zipkin2.elasticsearch.internal.BulkIndexWriter<T>.addSearchFields(Span span, JsonWriter writer)"
                ],
                "zipkin/src/main/java/zipkin2/Endpoint.java": [
                    "static String zipkin2.Endpoint.writeIpV6(byte[] ipv6)",
                    "static String zipkin2.Endpoint.writeIpV4(byte[] ipBytes)"
                ],
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.traceId(long high, long low)",
                    "static String zipkin2.Span.padLeft(String id, int desiredLength)",
                    "static String zipkin2.Span.toLowerHex(long v)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Codec.java": [
                    "public static boolean zipkin2.internal.Proto3Codec.readList(byte[] bytes, Collection<Span> out)",
                    "public static @Nullable Span zipkin2.internal.Proto3Codec.readOne(byte[] bytes)",
                    "public static boolean zipkin2.internal.Proto3Codec.read(byte[] bytes, Collection<Span> out)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Fields.java": [
                    "final T zipkin2.internal.Proto3Fields.readLengthPrefixAndValue(UnsafeBuffer b)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3ZipkinFields.java": [
                    "Span zipkin2.internal.Proto3ZipkinFields.readValue(UnsafeBuffer buffer, int length)",
                    "boolean zipkin2.internal.Proto3ZipkinFields.readLengthPrefixAndValue(UnsafeBuffer b, Span.Builder builder)"
                ],
                "zipkin/src/main/java/zipkin2/internal/ThriftCodec.java": [
                    "static byte[] zipkin2.internal.ThriftCodec.readByteArray(ByteBuffer bytes)",
                    "static IllegalArgumentException zipkin2.internal.ThriftCodec.exceptionReading(String type, Exception e)",
                    "static String zipkin2.internal.ThriftCodec.readUtf8(ByteBuffer bytes)",
                    "static int zipkin2.internal.ThriftCodec.guardLength(ByteBuffer buffer)"
                ],
                "zipkin/src/main/java/zipkin2/internal/ThriftEndpointCodec.java": [
                    "static Endpoint zipkin2.internal.ThriftEndpointCodec.read(ByteBuffer bytes)"
                ],
                "zipkin/src/main/java/zipkin2/internal/UnsafeBuffer.java": [
                    "String zipkin2.internal.UnsafeBuffer.readBytesAsHex(int length)",
                    "String zipkin2.internal.UnsafeBuffer.readUtf8(int length)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1ThriftSpanReader.java": [
                    "static void zipkin2.internal.V1ThriftSpanReader.read(ByteBuffer bytes, V1Span.Builder builder)",
                    "public V1Span zipkin2.internal.V1ThriftSpanReader.read(ByteBuffer bytes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "36d6e560c7ff3880661e5b158e86ecbe72d67eb0",
        "previous_commit": "2297f9d1e03329bdb67e7cb65890254eea7192b6",
        "date": 1472599385,
        "releases": {
            "previous": "36d6e560c7ff3880661e5b158e86ecbe72d67eb0",
            "next": "36d6e560c7ff3880661e5b158e86ecbe72d67eb0"
        },
        "commit_message": "Adds Codec.sizeInBytes and changes json to write fixed-length arrays (#1260)\n\nThis adds `Codec.sizeInBytes(Span)`, which is used to pre-allocate a\r\nbuffer to write the span into.\r\n\r\nThis changes the json encoder to use this approach, which drops its\r\nencoding overhead by an order of magnitude.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "36d6e560c7ff3880661e5b158e86ecbe72d67eb0": {
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "Buffer zipkin.internal.Buffer.writeAscii(String v)",
                    "Buffer zipkin.internal.Buffer.writeInt(int v)",
                    "Buffer zipkin.internal.Buffer.writeShort(int v)",
                    "Buffer zipkin.internal.Buffer.writeLong(long v)",
                    "byte[] zipkin.internal.Buffer.toByteArray()"
                ],
                "zipkin/src/main/java/zipkin/internal/Dependencies.java": [
                    "public void zipkin.internal.Dependencies.write(Dependencies value, Buffer buffer)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public byte[] zipkin.internal.JsonCodec.writeStrings(List<String> value)",
                    "public Annotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public byte[] zipkin.internal.JsonCodec.writeDependencyLinks(List<DependencyLink> value)",
                    "public Endpoint zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public BinaryAnnotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public byte[] zipkin.internal.JsonCodec.writeSpan(Span value)",
                    "public String zipkin.internal.JsonCodec.toString()",
                    "public Span zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public byte[] zipkin.internal.JsonCodec.writeTraces(List<List<Span>> traces)",
                    "public byte[] zipkin.internal.JsonCodec.writeSpans(List<Span> value)",
                    "public byte[] zipkin.internal.JsonCodec.writeDependencyLink(DependencyLink value)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "void zipkin.internal.ThriftCodec.write(Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Span value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Endpoint value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Annotation value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(DependencyLink value, Buffer buffer)",
                    "static void zipkin.internal.ThriftCodec.writeListBegin(Buffer buffer, int size)",
                    "public void zipkin.internal.ThriftCodec.write(BinaryAnnotation value, Buffer buffer)"
                ]
            },
            "2297f9d1e03329bdb67e7cb65890254eea7192b6": {
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "Buffer zipkin.internal.Buffer.writeAscii(String v)",
                    "Buffer zipkin.internal.Buffer.writeInt(int v)",
                    "Buffer zipkin.internal.Buffer.writeShort(int v)",
                    "Buffer zipkin.internal.Buffer.writeLong(long v)",
                    "byte[] zipkin.internal.Buffer.toByteArray()"
                ],
                "zipkin/src/main/java/zipkin/internal/Dependencies.java": [
                    "public void zipkin.internal.Dependencies.write(Dependencies value, Buffer buffer)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public byte[] zipkin.internal.JsonCodec.writeStrings(List<String> value)",
                    "public T zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public Annotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public byte[] zipkin.internal.JsonCodec.writeDependencyLinks(List<DependencyLink> value)",
                    "public Endpoint zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public BinaryAnnotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public byte[] zipkin.internal.JsonCodec.writeSpan(Span value)",
                    "public String zipkin.internal.JsonCodec.toString()",
                    "public Span zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public byte[] zipkin.internal.JsonCodec.writeTraces(List<List<Span>> traces)",
                    "public byte[] zipkin.internal.JsonCodec.writeSpans(List<Span> value)",
                    "public byte[] zipkin.internal.JsonCodec.writeDependencyLink(DependencyLink value)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "void zipkin.internal.ThriftCodec.write(Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Span value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Endpoint value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Annotation value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(DependencyLink value, Buffer buffer)",
                    "static void zipkin.internal.ThriftCodec.writeListBegin(Buffer buffer, int size)",
                    "public void zipkin.internal.ThriftCodec.write(BinaryAnnotation value, Buffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "854fe8c689eef3071c14fa4e6b33943fbab5cd8a",
        "previous_commit": "37b38868e0ca0e4251cec59f0884933170081080",
        "date": 1593848449,
        "releases": {
            "previous": "854fe8c689eef3071c14fa4e6b33943fbab5cd8a",
            "next": "854fe8c689eef3071c14fa4e6b33943fbab5cd8a"
        },
        "commit_message": "Removes guava dep in preparation of Datastax Driver 4.x (#3134)\n\nWe only needed guava for Cassandra. Removing it here makes migration easier.\r\n\r\nNote: there's still a guava left in cassandra-v1 which is too complex to undo\r\nin this PR (Table and Cache apis).",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "854fe8c689eef3071c14fa4e6b33943fbab5cd8a": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.v1.CassandraSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public Builder zipkin2.storage.cassandra.v1.CassandraStorage.contactPoints(String contactPoints)",
                    "public Builder zipkin2.storage.cassandra.v1.CassandraStorage.keyspace(String keyspace)",
                    "public Builder zipkin2.storage.cassandra.v1.CassandraStorage.sessionFactory(SessionFactory sessionFactory)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraUtil.java": [
                    "static List<String> zipkin2.storage.cassandra.v1.CassandraUtil.annotationKeys(QueryRequest request)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Indexer.java": [
                    "static ImmutableSetMultimap<PartitionKeyToTraceId, Long> zipkin2.storage.cassandra.v1.Indexer.entriesThatIncreaseGap( ConcurrentMap<PartitionKeyToTraceId, Pair> sharedState, ImmutableSetMultimap<PartitionKeyToTraceId, Long> updates)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Schema.java": [
                    "static void zipkin2.storage.cassandra.v1.Schema.applyCqlFile(String keyspace, Session session, String resource)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectRemoteServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectRemoteServiceNames.create(String serviceName)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectSpanNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectSpanNames.create(String serviceName)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromServiceRemoteServiceName.java": [
                    "Call<Set<Pair>> zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceRemoteServiceName.newCall( String serviceName, String remoteServiceName, long endTs, long lookback, int limit)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromServiceSpanName.java": [
                    "Call<Set<Pair>> zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceSpanName.newCall( String serviceName, String spanName, long endTs, long lookback, int limit)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java": [
                    "public Session zipkin2.storage.cassandra.v1.Default.create(CassandraStorage cassandra)",
                    "static int zipkin2.storage.cassandra.v1.Default.findConnectPort(List<InetSocketAddress> contactPoints)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "static int zipkin2.storage.cassandra.DefaultSessionFactory.findConnectPort(List<InetSocketAddress> contactPoints)",
                    "public Session zipkin2.storage.cassandra.DefaultSessionFactory.create(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/InsertSpan.java": [
                    "Input zipkin2.storage.cassandra.InsertSpan.newInput(zipkin2.Span span, UUID ts_uuid)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.getKeyspaceMetadata(Session session, String keyspace)",
                    "static Metadata zipkin2.storage.cassandra.Schema.readMetadata(Session session)",
                    "static void zipkin2.storage.cassandra.Schema.applyCqlFile(String keyspace, Session session, String resource)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "Call<List<Span>> zipkin2.storage.cassandra.SelectFromSpan.newCall(String hexTraceId)",
                    "protected BiConsumer<Row, List<Span>> zipkin2.storage.cassandra.SelectFromSpan.accumulator()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectRemoteServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectRemoteServiceNames.create(String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectSpanNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectSpanNames.create(String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/ResultSetFutureCall.java": [
                    "static ResultSet zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.getUninterruptibly(ListenableFuture<ResultSet> future)"
                ]
            },
            "37b38868e0ca0e4251cec59f0884933170081080": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.v1.CassandraSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public Builder zipkin2.storage.cassandra.v1.CassandraStorage.contactPoints(String contactPoints)",
                    "public Builder zipkin2.storage.cassandra.v1.CassandraStorage.keyspace(String keyspace)",
                    "public Builder zipkin2.storage.cassandra.v1.CassandraStorage.sessionFactory(SessionFactory sessionFactory)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraUtil.java": [
                    "static List<String> zipkin2.storage.cassandra.v1.CassandraUtil.annotationKeys(QueryRequest request)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Indexer.java": [
                    "static ImmutableSetMultimap<PartitionKeyToTraceId, Long> zipkin2.storage.cassandra.v1.Indexer.entriesThatIncreaseGap( ConcurrentMap<PartitionKeyToTraceId, Pair> sharedState, ImmutableSetMultimap<PartitionKeyToTraceId, Long> updates)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Schema.java": [
                    "static void zipkin2.storage.cassandra.v1.Schema.applyCqlFile(String keyspace, Session session, String resource)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectRemoteServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectRemoteServiceNames.create(String serviceName)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectSpanNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectSpanNames.create(String serviceName)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromServiceRemoteServiceName.java": [
                    "Call<Set<Pair>> zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceRemoteServiceName.newCall( String serviceName, String remoteServiceName, long endTs, long lookback, int limit)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromServiceSpanName.java": [
                    "Call<Set<Pair>> zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceSpanName.newCall( String serviceName, String spanName, long endTs, long lookback, int limit)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java": [
                    "public Session zipkin2.storage.cassandra.v1.Default.create(CassandraStorage cassandra)",
                    "static int zipkin2.storage.cassandra.v1.Default.findConnectPort(List<InetSocketAddress> contactPoints)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "static int zipkin2.storage.cassandra.DefaultSessionFactory.findConnectPort(List<InetSocketAddress> contactPoints)",
                    "public Session zipkin2.storage.cassandra.DefaultSessionFactory.create(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/InsertSpan.java": [
                    "Input zipkin2.storage.cassandra.InsertSpan.newInput(zipkin2.Span span, UUID ts_uuid)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.getKeyspaceMetadata(Session session, String keyspace)",
                    "static Metadata zipkin2.storage.cassandra.Schema.readMetadata(Session session)",
                    "static void zipkin2.storage.cassandra.Schema.applyCqlFile(String keyspace, Session session, String resource)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "Call<List<Span>> zipkin2.storage.cassandra.SelectFromSpan.newCall(String hexTraceId)",
                    "protected BiConsumer<Row, List<Span>> zipkin2.storage.cassandra.SelectFromSpan.accumulator()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectRemoteServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectRemoteServiceNames.create(String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectSpanNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectSpanNames.create(String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/ResultSetFutureCall.java": [
                    "static ResultSet zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.getUninterruptibly(ListenableFuture<ResultSet> future)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "feb151f2f9e5a1a10020c8c7eb5c6129112663da",
        "previous_commit": "1f152a418178ef4da75b0f99cbef5674d18114ae",
        "date": 1557901305,
        "releases": {
            "previous": "feb151f2f9e5a1a10020c8c7eb5c6129112663da",
            "next": "feb151f2f9e5a1a10020c8c7eb5c6129112663da"
        },
        "commit_message": "Makes SpanBytesDecoder work on ByteBuffer (#2589)\n\n* Makes SpanBytesDecoder work on ByteBuffer\r\n\r\nInternally, this also covers InputStream.\r\n\r\nThis was easier (though not easy) due to splitting how we handle\r\nencoding from decoding.\r\n\r\nIncidentally, the jar size of zipkin is smaller still vs the last\r\nrelease.\r\n\r\nFixes #2435\r\n\r\n* whoops forgot the important parts\r\n\r\n* de-optimizes for thrift in order to increase clarity\r\n\r\n* bug\r\n\r\n* Adds json comparison benchmarks\r\n\r\n* just review feedback\r\n\r\n* mah endian\r\n\r\n* less code\r\n\r\n* bench\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "feb151f2f9e5a1a10020c8c7eb5c6129112663da": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "public int zipkin2.server.internal.ZipkinQueryApiV2.sizeInBytes(String value)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectFromTraces.java": [
                    "protected BiConsumer<Row, List<Span>> zipkin2.storage.cassandra.v1.SelectFromTraces.accumulator()"
                ],
                "zipkin/src/main/java/zipkin2/codec/DependencyLinkBytesDecoder.java": [
                    "public boolean decode(byte[] link, Collection<DependencyLink> out)",
                    "public boolean decodeList(byte[] links, Collection<DependencyLink> out)",
                    "public DependencyLink decodeOne(byte[] link)"
                ],
                "zipkin/src/main/java/zipkin2/codec/SpanBytesDecoder.java": [
                    "public boolean decodeList(byte[] spans, Collection<Span> out)",
                    "public boolean decode(byte[] span, Collection<Span> out)",
                    "public Span decodeOne(byte[] span)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Dependencies.java": [
                    "public ByteBuffer zipkin2.internal.Dependencies.toThrift()",
                    "public static Dependencies zipkin2.internal.Dependencies.fromThrift(ByteBuffer bytes)"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> int zipkin2.internal.JsonCodec.writeList(WriteBuffer.Writer<T> writer, List<T> value, byte[] out, int pos)"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonEscaper.java": [
                    "public static int zipkin2.internal.JsonEscaper.jsonEscapedSizeInBytes(CharSequence v)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Fields.java": [
                    "static boolean zipkin2.internal.Proto3Fields.skipValue(ReadBuffer buffer, int wireType)",
                    "static int zipkin2.internal.Proto3Fields.sizeOfLengthDelimitedField(int sizeInBytes)",
                    "int zipkin2.internal.Proto3Fields.sizeInBytes(long number)",
                    "int zipkin2.internal.Proto3Fields.sizeOfValue(String utf8)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3SpanWriter.java": [
                    "public byte[] zipkin2.internal.Proto3SpanWriter.writeList(List<Span> spans)",
                    "int zipkin2.internal.Proto3SpanWriter.writeList(List<Span> spans, byte[] out, int pos)",
                    "byte[] zipkin2.internal.Proto3SpanWriter.write(Span onlySpan)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1SpanWriter.java": [
                    "static byte[] zipkin2.internal.V1SpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1ThriftSpanWriter.java": [
                    "public byte[] zipkin2.internal.V1ThriftSpanWriter.writeList(List<Span> spans)",
                    "public byte[] zipkin2.internal.V1ThriftSpanWriter.write(Span onlySpan)",
                    "public int zipkin2.internal.V1ThriftSpanWriter.writeList(List<Span> spans, byte[] out, int pos)",
                    "static byte[] zipkin2.internal.V1ThriftSpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)"
                ]
            },
            "1f152a418178ef4da75b0f99cbef5674d18114ae": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "public int zipkin2.server.internal.ZipkinQueryApiV2.sizeInBytes(String value)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectFromTraces.java": [
                    "protected BiConsumer<Row, List<Span>> zipkin2.storage.cassandra.v1.SelectFromTraces.accumulator()"
                ],
                "zipkin/src/main/java/zipkin2/codec/DependencyLinkBytesDecoder.java": [
                    "public boolean decode(byte[] link, Collection<DependencyLink> out)",
                    "public boolean decodeList(byte[] links, Collection<DependencyLink> out)",
                    "public DependencyLink decodeOne(byte[] link)"
                ],
                "zipkin/src/main/java/zipkin2/codec/SpanBytesDecoder.java": [
                    "public boolean decodeList(byte[] spans, Collection<Span> out)",
                    "public boolean decode(byte[] span, Collection<Span> out)",
                    "public Span decodeOne(byte[] span)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Dependencies.java": [
                    "public ByteBuffer zipkin2.internal.Dependencies.toThrift()",
                    "public static Dependencies zipkin2.internal.Dependencies.fromThrift(ByteBuffer bytes)"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> int zipkin2.internal.JsonCodec.writeList(UnsafeBuffer.Writer<T> writer, List<T> value, byte[] out, int pos)"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonEscaper.java": [
                    "public static int zipkin2.internal.JsonEscaper.jsonEscapedSizeInBytes(CharSequence v)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Fields.java": [
                    "static boolean zipkin2.internal.Proto3Fields.skipValue(UnsafeBuffer buffer, int wireType)",
                    "static int zipkin2.internal.Proto3Fields.sizeOfLengthDelimitedField(int sizeInBytes)",
                    "int zipkin2.internal.Proto3Fields.sizeInBytes(long number)",
                    "int zipkin2.internal.Proto3Fields.sizeOfValue(String utf8)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3SpanWriter.java": [
                    "public byte[] zipkin2.internal.Proto3SpanWriter.writeList(List<Span> spans)",
                    "int zipkin2.internal.Proto3SpanWriter.writeList(List<Span> spans, byte[] out, int pos)",
                    "byte[] zipkin2.internal.Proto3SpanWriter.write(Span onlySpan)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1SpanWriter.java": [
                    "static byte[] zipkin2.internal.V1SpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1ThriftSpanWriter.java": [
                    "public byte[] zipkin2.internal.V1ThriftSpanWriter.writeList(List<Span> spans)",
                    "public byte[] zipkin2.internal.V1ThriftSpanWriter.write(Span onlySpan)",
                    "public int zipkin2.internal.V1ThriftSpanWriter.writeList(List<Span> spans, byte[] out, int pos)",
                    "static byte[] zipkin2.internal.V1ThriftSpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c9159480e07e16e7be5e4b14ecf6730dbe8b1c65",
        "previous_commit": "3de6c0470ce260be350dca6ed512fbefc4f519c7",
        "date": 1486002389,
        "releases": {
            "previous": "c9159480e07e16e7be5e4b14ecf6730dbe8b1c65",
            "next": "c9159480e07e16e7be5e4b14ecf6730dbe8b1c65"
        },
        "commit_message": "Decouples zipkin-elasticsearch-http from Elasticsearch 2.x libraries (#1509)\n\nFormerly, the http Elasticsearch module had a hard dependency on\r\nElasticsearch 2.x libraries. This was simply work left unfinished, as\r\nthe effort to completely decouple was high.\r\n\r\nThis change completes the separation of the http elasticsearch code\r\nfrom the prior codebase. You can now drop in `ElasticsearchHttpStorage`\r\nwhere you previously used `ElasticsearchStorage`. You can now use\r\nElasticsearch without a guava or native library dependency.\r\n\r\nServer dependencies and default configuration are left unaffected except\r\nthat there is no more sharing between the auto-configuration classes of\r\nthe native transport vs the http transport. This means that if you make\r\na custom server with `zipkin-autoconfigure-storage-elasticsearch-http`,\r\nyou won't transitively pull in Guava or Elasticsearch 2.x libraries.\r\n\r\nThe old `HttpClientBuilder` is now deprecated and as mentioned above, no\r\nlonger used. Until it is removed, there is an optional dependency on the\r\nnative code in `zipkin-storage-elasticsearch-http`. Beyond clutter, and\r\nincreasing test duration, there's little impact to this.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c9159480e07e16e7be5e4b14ecf6730dbe8b1c65": {
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/ZipkinElasticsearchAwsStorageAutoConfiguration.java": [
                    "public boolean zipkin.autoconfigure.storage.elasticsearch.aws.ZipkinElasticsearchAwsStorageAutoConfiguration.matches(ConditionContext condition, AnnotatedTypeMetadata md)"
                ],
                "zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchHttpStorageAutoConfiguration.java": [
                    "public boolean zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageAutoConfiguration.matches(ConditionContext condition, AnnotatedTypeMetadata md)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java": [
                    "void zipkin.storage.elasticsearch.http.HttpBulkIndexer<T>.add(String index, T object, @Nullable String id)",
                    "void zipkin.storage.elasticsearch.http.HttpBulkIndexer<T>.execute(Callback<Void> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkSpanIndexer.java": [
                    "HttpBulkSpanIndexer zipkin.storage.elasticsearch.http.HttpBulkSpanIndexer.add(String index, Span span, Long timestampMillis)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "public void zipkin.storage.elasticsearch.http.HttpClient.close()",
                    "protected void zipkin.storage.elasticsearch.http.HttpClient.ensureTemplate(String name, String indexTemplate)",
                    "protected ListenableFuture<List<String>> zipkin.storage.elasticsearch.http.HttpClient.collectBucketKeys(String[] indices, QueryBuilder query, AbstractAggregationBuilder... aggregations)",
                    "protected ListenableFuture<List<Span>> zipkin.storage.elasticsearch.http.HttpClient.findSpans(String[] indices, QueryBuilder query)",
                    "protected BulkSpanIndexer zipkin.storage.elasticsearch.http.HttpClient.bulkSpanIndexer()",
                    "protected ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.http.HttpClient.findDependencies(String[] indices)",
                    "protected void zipkin.storage.elasticsearch.http.HttpClient.ensureClusterReady(String catchAll)",
                    "HttpUrl zipkin.storage.elasticsearch.http.HttpClient.lenientSearch(String[] indices, String type)",
                    "protected String zipkin.storage.elasticsearch.http.HttpClient.getVersion()",
                    "protected void zipkin.storage.elasticsearch.http.HttpClient.clear(String index)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClientBuilder.java": [
                    "public static HttpClientBuilder zipkin.storage.elasticsearch.http.HttpClientBuilder.create(OkHttpClient client)",
                    "public HttpClientBuilder zipkin.storage.elasticsearch.http.HttpClientBuilder.hosts(Lazy<List<String>> hosts)",
                    "public HttpClientBuilder zipkin.storage.elasticsearch.http.HttpClientBuilder.flushOnWrites(boolean flushOnWrites)",
                    "public HttpClientBuilder zipkin.storage.elasticsearch.http.HttpClientBuilder.maxRequests(int maxRequests)",
                    "public HttpClientBuilder zipkin.storage.elasticsearch.http.HttpClientBuilder.pipeline(String pipeline)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/PseudoAddressRecordSet.java": [
                    "static Dns zipkin.storage.elasticsearch.http.PseudoAddressRecordSet.create(List<String> urls, Dns actualDns)",
                    "public List<InetAddress> zipkin.storage.elasticsearch.http.PseudoAddressRecordSet.lookup(String hostname)"
                ]
            },
            "3de6c0470ce260be350dca6ed512fbefc4f519c7": {
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/ZipkinElasticsearchAwsStorageAutoConfiguration.java": [
                    "public boolean zipkin.autoconfigure.storage.elasticsearch.aws.ZipkinElasticsearchAwsStorageAutoConfiguration.matches(ConditionContext condition, AnnotatedTypeMetadata md)"
                ],
                "zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchHttpStorageAutoConfiguration.java": [
                    "public boolean zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageAutoConfiguration.matches(ConditionContext condition, AnnotatedTypeMetadata md)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java": [
                    "public void zipkin.storage.elasticsearch.http.HttpBulkIndexer<T>.execute(Callback<Void> callback)",
                    "void zipkin.storage.elasticsearch.http.HttpBulkIndexer<T>.add(String index, T object, @Nullable String id)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkSpanIndexer.java": [
                    "public HttpBulkSpanIndexer zipkin.storage.elasticsearch.http.HttpBulkSpanIndexer.add(String index, Span span, Long timestampMillis)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "public void zipkin.storage.elasticsearch.http.HttpClient.close()",
                    "protected void zipkin.storage.elasticsearch.http.HttpClient.ensureTemplate(String name, String indexTemplate)",
                    "protected ListenableFuture<List<String>> zipkin.storage.elasticsearch.http.HttpClient.collectBucketKeys(String[] indices, QueryBuilder query, AbstractAggregationBuilder... aggregations)",
                    "protected ListenableFuture<List<Span>> zipkin.storage.elasticsearch.http.HttpClient.findSpans(String[] indices, QueryBuilder query)",
                    "protected BulkSpanIndexer zipkin.storage.elasticsearch.http.HttpClient.bulkSpanIndexer()",
                    "protected ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.http.HttpClient.findDependencies(String[] indices)",
                    "protected void zipkin.storage.elasticsearch.http.HttpClient.ensureClusterReady(String catchAll)",
                    "HttpUrl zipkin.storage.elasticsearch.http.HttpClient.lenientSearch(String[] indices, String type)",
                    "protected String zipkin.storage.elasticsearch.http.HttpClient.getVersion()",
                    "protected void zipkin.storage.elasticsearch.http.HttpClient.clear(String index)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClientBuilder.java": [
                    "public static HttpClientBuilder zipkin.storage.elasticsearch.http.HttpClientBuilder.create(OkHttpClient client)",
                    "public HttpClientBuilder zipkin.storage.elasticsearch.http.HttpClientBuilder.hosts(Lazy<List<String>> hosts)",
                    "public HttpClientBuilder zipkin.storage.elasticsearch.http.HttpClientBuilder.flushOnWrites(boolean flushOnWrites)",
                    "public HttpClientBuilder zipkin.storage.elasticsearch.http.HttpClientBuilder.maxRequests(int maxRequests)",
                    "public HttpClientBuilder zipkin.storage.elasticsearch.http.HttpClientBuilder.pipeline(String pipeline)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/PseudoAddressRecordSet.java": [
                    "static Dns zipkin.storage.elasticsearch.http.PseudoAddressRecordSet.create(List<String> urls, Dns actualDns)",
                    "public List<InetAddress> zipkin.storage.elasticsearch.http.PseudoAddressRecordSet.lookup(String hostname)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "853ca12419b5dc8be8bf02805f13534cb224f066",
        "previous_commit": "5b6efdc70a83fca6e9b09bf8df5a3a861caebf9e",
        "date": 1516695386,
        "releases": {
            "previous": "853ca12419b5dc8be8bf02805f13534cb224f066",
            "next": "853ca12419b5dc8be8bf02805f13534cb224f066"
        },
        "commit_message": "Adds ability to disable search for in-memory ES and cassandra v2 storage (#1876)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "853ca12419b5dc8be8bf02805f13534cb224f066": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java": [
                    "public final ElasticsearchHttpStorage zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.build()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.add(long indexTimestamp, Span span, long timestampMillis)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<String>> zipkin2.elasticsearch.ElasticsearchSpanStore.getServiceNames()",
                    "static List<List<Span>> zipkin2.elasticsearch.ElasticsearchSpanStore.groupByTraceId(Collection<Span> input, boolean strictTraceId)",
                    "public Call<List<List<Span>>> zipkin2.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)",
                    "public Call<List<String>> zipkin2.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public static Builder zipkin2.elasticsearch.ElasticsearchStorage.newBuilder(OkHttpClient client)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "private String zipkin2.elasticsearch.VersionSpecificTemplates.versionSpecificSpanIndexTemplate(float version)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.CassandraSpanStore.getTraces(QueryRequest request)",
                    "public Call<List<String>> zipkin2.storage.cassandra.CassandraSpanStore.getServiceNames()",
                    "public Call<List<String>> zipkin2.storage.cassandra.CassandraSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public static Builder zipkin2.storage.cassandra.CassandraStorage.newBuilder()"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "private static void zipkin2.storage.cassandra.DefaultSessionFactory.initializeUDTs(Session session)",
                    "public Session zipkin2.storage.cassandra.DefaultSessionFactory.create(CassandraStorage cassandra)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/InsertSpan.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.InsertSpan.newFuture()",
                    "Input zipkin2.storage.cassandra.InsertSpan.newInput(zipkin2.Span span, UUID ts_uuid)"
                ],
                "zipkin2/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "synchronized public Call<Void> zipkin2.storage.InMemoryStorage.accept(List<Span> spans)",
                    "Set<String> zipkin2.storage.InMemoryStorage.traceIdsDescendingByTimestamp(QueryRequest request)",
                    "private int zipkin2.storage.InMemoryStorage.deleteOldestTrace()",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getServiceNames()",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getSpanNames(String service)"
                ]
            },
            "5b6efdc70a83fca6e9b09bf8df5a3a861caebf9e": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java": [
                    "public final ElasticsearchHttpStorage zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.build()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.add(long indexTimestamp, Span span, long timestampMillis)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<String>> zipkin2.elasticsearch.ElasticsearchSpanStore.getServiceNames()",
                    "static List<List<Span>> zipkin2.elasticsearch.ElasticsearchSpanStore.groupByTraceId(Collection<Span> input, boolean strictTraceId)",
                    "public Call<List<List<Span>>> zipkin2.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)",
                    "public Call<List<String>> zipkin2.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public static Builder zipkin2.elasticsearch.ElasticsearchStorage.newBuilder(OkHttpClient client)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "private String zipkin2.elasticsearch.VersionSpecificTemplates.versionSpecificSpanIndexTemplate(float version)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.CassandraSpanStore.getTraces(QueryRequest request)",
                    "public Call<List<String>> zipkin2.storage.cassandra.CassandraSpanStore.getServiceNames()",
                    "public Call<List<String>> zipkin2.storage.cassandra.CassandraSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public static Builder zipkin2.storage.cassandra.CassandraStorage.newBuilder()"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "private static void zipkin2.storage.cassandra.DefaultSessionFactory.initializeUDTs(Session session)",
                    "public Session zipkin2.storage.cassandra.DefaultSessionFactory.create(CassandraStorage cassandra)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/InsertSpan.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.InsertSpan.newFuture()",
                    "Input zipkin2.storage.cassandra.InsertSpan.newInput(zipkin2.Span span, UUID ts_uuid)"
                ],
                "zipkin2/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "synchronized public Call<Void> zipkin2.storage.InMemoryStorage.accept(List<Span> spans)",
                    "Set<String> zipkin2.storage.InMemoryStorage.traceIdsDescendingByTimestamp(QueryRequest request)",
                    "private int zipkin2.storage.InMemoryStorage.deleteOldestTrace()",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getServiceNames()",
                    "public synchronized Call<List<String>> zipkin2.storage.InMemoryStorage.getSpanNames(String service)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f5e396c9038c242a796c14c0ec3c79eee8665df4",
        "previous_commit": "b9c95c98a8ac253d8f96f17e06df98cb8948cf71",
        "date": 1462623389,
        "releases": {
            "previous": "f5e396c9038c242a796c14c0ec3c79eee8665df4",
            "next": "f5e396c9038c242a796c14c0ec3c79eee8665df4"
        },
        "commit_message": "Fixes Cassandra self-tracing and enables POST tracing\n\nThis fixes a thread propagation issue in Cassandra self-tracing that\nprevented us from seeing all the spans.\n\nThis also logs traces for the POST endpoint, so that we can compare\nhow different implementations perform and are implemented.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f5e396c9038c242a796c14c0ec3c79eee8665df4": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "public Object zipkin.server.ZipkinServerConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/ApiTracerConfiguration.java": [
                    "public void zipkin.server.brave.ApiTracerConfiguration.addInterceptors(InterceptorRegistry registry)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/JDBCTracerConfiguration.java": [
                    "public void zipkin.server.brave.JDBCTracerConfiguration.renderEnd(ExecuteContext ctx)",
                    "public void zipkin.server.brave.JDBCTracerConfiguration.executeEnd(ExecuteContext ctx)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/TracedSession.java": [
                    "public void zipkin.server.brave.TracedSession.update(Host host, Statement statement, Exception e, long nanos)",
                    "public static Session zipkin.server.brave.TracedSession.create(Session target, Brave brave, SpanCollector collector)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraDependenciesWriter.java": [
                    "ListenableFuture<?> zipkin.cassandra.CassandraDependenciesWriter.storeDependencies(long epochDayMillis, ByteBuffer dependencies)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanConsumer.java": [
                    "ListenableFuture<?> zipkin.cassandra.CassandraSpanConsumer.storeTraceIdByDuration(String serviceName, String spanName, long timestamp, long duration, long traceId, int ttl)",
                    "ListenableFuture<?> zipkin.cassandra.CassandraSpanConsumer.storeTraceIdByAnnotation(String annotationKey, long timestamp, long traceId, int ttl)",
                    "ListenableFuture<?> zipkin.cassandra.CassandraSpanConsumer.storeSpanName(String serviceName, String spanName, int ttl)",
                    "ListenableFuture<?> zipkin.cassandra.CassandraSpanConsumer.storeSpan(long traceId, long timestamp, String spanName, ByteBuffer span, int ttl)",
                    "ListenableFuture<?> zipkin.cassandra.CassandraSpanConsumer.storeTraceIdByServiceName(String serviceName, long timestamp, long traceId, int ttl)",
                    "ListenableFuture<?> zipkin.cassandra.CassandraSpanConsumer.storeTraceIdBySpanName(String serviceName, String spanName, long timestamp, long traceId, int ttl)",
                    "ListenableFuture<?> zipkin.cassandra.CassandraSpanConsumer.storeServiceName(String serviceName, int ttl)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "ListenableFuture<List<DurationRow>> zipkin.cassandra.CassandraSpanStore.oneBucketDurationQuery(QueryRequest request, int bucket, final long startTs, final long endTs)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsBySpanName(String serviceName, String spanName, long endTs, long lookback, int limit)",
                    "public ListenableFuture<List<String>> zipkin.cassandra.CassandraSpanStore.getServiceNames()",
                    "public ListenableFuture<List<DependencyLink>> zipkin.cassandra.CassandraSpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "ListenableFuture<Collection<List<Span>>> zipkin.cassandra.CassandraSpanStore.getSpansByTraceIds(Set<Long> traceIds, int limit)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsByAnnotation(String annotationKey, long endTs, long lookback, int limit)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsByServiceNames(List<String> serviceNames, long endTs, long lookback, int limit)",
                    "public ListenableFuture<List<String>> zipkin.cassandra.CassandraSpanStore.getSpanNames(String serviceName)"
                ]
            },
            "b9c95c98a8ac253d8f96f17e06df98cb8948cf71": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "public Object zipkin.server.ZipkinServerConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/ApiTracerConfiguration.java": [
                    "public void zipkin.server.brave.ApiTracerConfiguration.addInterceptors(InterceptorRegistry registry)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/JDBCTracerConfiguration.java": [
                    "public void zipkin.server.brave.JDBCTracerConfiguration.renderEnd(ExecuteContext ctx)",
                    "public void zipkin.server.brave.JDBCTracerConfiguration.executeEnd(ExecuteContext ctx)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/TracedSession.java": [
                    "public void zipkin.server.brave.TracedSession.update(Host host, Statement statement, Exception e, long nanos)",
                    "public static Session zipkin.server.brave.TracedSession.create(Session target, Brave brave, SpanCollector collector)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraDependenciesWriter.java": [
                    "ListenableFuture<?> zipkin.cassandra.CassandraDependenciesWriter.storeDependencies(long epochDayMillis, ByteBuffer dependencies)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanConsumer.java": [
                    "ListenableFuture<?> zipkin.cassandra.CassandraSpanConsumer.storeTraceIdByDuration(String serviceName, String spanName, long timestamp, long duration, long traceId, int ttl)",
                    "ListenableFuture<?> zipkin.cassandra.CassandraSpanConsumer.storeTraceIdByAnnotation(String annotationKey, long timestamp, long traceId, int ttl)",
                    "ListenableFuture<?> zipkin.cassandra.CassandraSpanConsumer.storeSpanName(String serviceName, String spanName, int ttl)",
                    "ListenableFuture<?> zipkin.cassandra.CassandraSpanConsumer.storeSpan(long traceId, long timestamp, String spanName, ByteBuffer span, int ttl)",
                    "ListenableFuture<?> zipkin.cassandra.CassandraSpanConsumer.storeTraceIdByServiceName(String serviceName, long timestamp, long traceId, int ttl)",
                    "ListenableFuture<?> zipkin.cassandra.CassandraSpanConsumer.storeTraceIdBySpanName(String serviceName, String spanName, long timestamp, long traceId, int ttl)",
                    "ListenableFuture<?> zipkin.cassandra.CassandraSpanConsumer.storeServiceName(String serviceName, int ttl)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "ListenableFuture<List<DurationRow>> zipkin.cassandra.CassandraSpanStore.oneBucketDurationQuery(QueryRequest request, int bucket, final long startTs, final long endTs)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsBySpanName(String serviceName, String spanName, long endTs, long lookback, int limit)",
                    "public ListenableFuture<List<String>> zipkin.cassandra.CassandraSpanStore.getServiceNames()",
                    "public ListenableFuture<List<DependencyLink>> zipkin.cassandra.CassandraSpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "ListenableFuture<Collection<List<Span>>> zipkin.cassandra.CassandraSpanStore.getSpansByTraceIds(Set<Long> traceIds, int limit)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsByAnnotation(String annotationKey, long endTs, long lookback, int limit)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsByServiceNames(List<String> serviceNames, long endTs, long lookback, int limit)",
                    "public ListenableFuture<List<String>> zipkin.cassandra.CassandraSpanStore.getSpanNames(String serviceName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d3eb7f1221d3b75241f6934f228c5cb4624c01b4",
        "previous_commit": "1ce5d078acfad25512414b3465762aed6232798e",
        "date": 1591230557,
        "releases": {
            "previous": "d3eb7f1221d3b75241f6934f228c5cb4624c01b4",
            "next": "d3eb7f1221d3b75241f6934f228c5cb4624c01b4"
        },
        "commit_message": "Updates build to JDK 14 and addresses latest errorprone warnings (#3103)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d3eb7f1221d3b75241f6934f228c5cb4624c01b4": {
                "zipkin-collector/rabbitmq/src/main/java/zipkin2/collector/rabbitmq/RabbitMQCollector.java": [
                    "static Address[] zipkin2.collector.rabbitmq.RabbitMQCollector.convertAddresses(List<String> addresses)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraUtil.java": [
                    "static Set<Long> zipkin2.storage.cassandra.v1.CassandraUtil.sortTraceIdsByDescTimestamp(Set<Pair> set)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectDependencies.java": [
                    "public SelectDependencies zipkin2.storage.cassandra.v1.SelectDependencies.clone()",
                    "public String zipkin2.storage.cassandra.v1.SelectDependencies.toString()",
                    "Call<List<DependencyLink>> zipkin2.storage.cassandra.v1.SelectDependencies.create(long endTs, long lookback)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectDependencies.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java": [
                    "public Session zipkin2.storage.cassandra.v1.Default.create(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "public Set<String> zipkin2.storage.cassandra.CassandraUtil.map(Map<String, Long> map)",
                    "static List<LocalDate> zipkin2.storage.cassandra.CassandraUtil.getDays(long endTs, @Nullable Long lookback)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "public Session zipkin2.storage.cassandra.DefaultSessionFactory.create(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "protected BiConsumer<Row, List<Span>> zipkin2.storage.cassandra.SelectFromSpan.accumulator()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/ZipkinRetryPolicy.java": [
                    "public RetryDecision zipkin2.storage.cassandra.ZipkinRetryPolicy.onReadTimeout( Statement stmt, ConsistencyLevel cl, int required, int received, boolean retrieved, int retry)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/IndexNameFormatter.java": [
                    "String zipkin2.elasticsearch.internal.IndexNameFormatter.formatIndexPattern(String format, GregorianCalendar current, String prefix)",
                    "public final IndexNameFormatter zipkin2.elasticsearch.internal.IndexNameFormatter.build()",
                    "public String zipkin2.elasticsearch.internal.IndexNameFormatter.formatTypeAndTimestampForInsert(String type, char indexTypeDelimiter, long timestampMillis)",
                    "public String zipkin2.elasticsearch.internal.IndexNameFormatter.formatTypeAndTimestamp(@Nullable String type, long timestampMillis)",
                    "public List<String> zipkin2.elasticsearch.internal.IndexNameFormatter.formatTypeAndRange(@Nullable String type, long beginMillis, long endMillis)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLSpanStore.java": [
                    "public Call<List<DependencyLink>> zipkin2.storage.mysql.v1.MySQLSpanStore.getDependencies(long endTs, long lookback)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/SelectDependencies.java": [
                    "public String zipkin2.storage.mysql.v1.SelectDependencies.toString()",
                    "public List<DependencyLink> zipkin2.storage.mysql.v1.SelectDependencies.apply(DSLContext context)"
                ],
                "zipkin/src/main/java/zipkin2/internal/DateUtil.java": [
                    "public static List<Long> zipkin2.internal.DateUtil.epochDays(long endTs, long lookback)"
                ]
            },
            "1ce5d078acfad25512414b3465762aed6232798e": {
                "zipkin-collector/rabbitmq/src/main/java/zipkin2/collector/rabbitmq/RabbitMQCollector.java": [
                    "static Address[] zipkin2.collector.rabbitmq.RabbitMQCollector.convertAddresses(List<String> addresses)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraUtil.java": [
                    "static Set<Long> zipkin2.storage.cassandra.v1.CassandraUtil.sortTraceIdsByDescTimestamp(Set<Pair> set)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectDependencies.java": [
                    "public SelectDependencies zipkin2.storage.cassandra.v1.SelectDependencies.clone()",
                    "public String zipkin2.storage.cassandra.v1.SelectDependencies.toString()",
                    "Call<List<DependencyLink>> zipkin2.storage.cassandra.v1.SelectDependencies.create(long endTs, long lookback)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectDependencies.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java": [
                    "public Session zipkin2.storage.cassandra.v1.Default.create(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "public Set<String> zipkin2.storage.cassandra.CassandraUtil.map(Map<String, Long> map)",
                    "static List<LocalDate> zipkin2.storage.cassandra.CassandraUtil.getDays(long endTs, @Nullable Long lookback)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "public Session zipkin2.storage.cassandra.DefaultSessionFactory.create(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "protected BiConsumer<Row, List<Span>> zipkin2.storage.cassandra.SelectFromSpan.accumulator()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/ZipkinRetryPolicy.java": [
                    "public RetryDecision zipkin2.storage.cassandra.ZipkinRetryPolicy.onReadTimeout( Statement stmt, ConsistencyLevel cl, int required, int received, boolean retrieved, int retry)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/IndexNameFormatter.java": [
                    "String zipkin2.elasticsearch.internal.IndexNameFormatter.formatIndexPattern(String format, GregorianCalendar current, String prefix)",
                    "public final IndexNameFormatter zipkin2.elasticsearch.internal.IndexNameFormatter.build()",
                    "public String zipkin2.elasticsearch.internal.IndexNameFormatter.formatTypeAndTimestampForInsert(String type, char indexTypeDelimiter, long timestampMillis)",
                    "public String zipkin2.elasticsearch.internal.IndexNameFormatter.formatTypeAndTimestamp(@Nullable String type, long timestampMillis)",
                    "public List<String> zipkin2.elasticsearch.internal.IndexNameFormatter.formatTypeAndRange(@Nullable String type, long beginMillis, long endMillis)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLSpanStore.java": [
                    "public Call<List<DependencyLink>> zipkin2.storage.mysql.v1.MySQLSpanStore.getDependencies(long endTs, long lookback)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/SelectDependencies.java": [
                    "public String zipkin2.storage.mysql.v1.SelectDependencies.toString()",
                    "public List<DependencyLink> zipkin2.storage.mysql.v1.SelectDependencies.apply(DSLContext context)"
                ],
                "zipkin/src/main/java/zipkin2/internal/DateUtil.java": [
                    "public static List<Date> zipkin2.internal.DateUtil.getDays(long endTs, long lookback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1f402e0b3566c460ec26838b4837c45c0ca6402f",
        "previous_commit": "857aa3bfd5d35484a0e782cdf67210b49cc34886",
        "date": 1462536332,
        "releases": {
            "previous": "1f402e0b3566c460ec26838b4837c45c0ca6402f",
            "next": "1f402e0b3566c460ec26838b4837c45c0ca6402f"
        },
        "commit_message": "Moves to consistent builder pattern\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1f402e0b3566c460ec26838b4837c45c0ca6402f": {
                "interop/src/main/java/zipkin/interop/ScalaSpanStoreAdapter.java": [
                    "public Future<Seq<List<Span>>> zipkin.interop.ScalaSpanStoreAdapter.getTraces(QueryRequest input)"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "static QueryRequest zipkin.junit.ZipkinDispatcher.toQueryRequest(HttpUrl url)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanStore.java": [
                    "public List<DependencyLink> zipkin.elasticsearch.ElasticsearchSpanStore.apply(SearchResponse response)"
                ],
                "zipkin-storage/jdbc/src/main/java/zipkin/jdbc/DependencyLinkSpanIterator.java": [
                    "public DependencyLinkSpan zipkin.jdbc.DependencyLinkSpanIterator.next()"
                ],
                "zipkin-storage/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java": [
                    "List<List<Span>> zipkin.jdbc.JDBCSpanStore.getTraces(@Nullable QueryRequest request, @Nullable Long traceId, boolean raw)"
                ],
                "zipkin/src/main/java/zipkin/InMemorySpanStore.java": [
                    "public List<DependencyLink> zipkin.InMemorySpanStore.getDependencies(long endTs, @Nullable Long lookback)"
                ],
                "zipkin/src/main/java/zipkin/QueryRequest.java": [
                    "public int zipkin.QueryRequest.hashCode()",
                    "public boolean zipkin.QueryRequest.equals(Object o)"
                ],
                "zipkin/src/main/java/zipkin/internal/ApplyTimestampAndDuration.java": [
                    "public static Span zipkin.internal.ApplyTimestampAndDuration.apply(Span span)"
                ],
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static Span zipkin.internal.CorrectForClockSkew.adjustTimestamps(Span span, ClockSkew skew)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public BinaryAnnotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public Span zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public Endpoint zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public DependencyLink zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/internal/MergeById.java": [
                    "public static List<Span> zipkin.internal.MergeById.apply(Collection<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public Span zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public DependencyLink zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public BinaryAnnotation zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public Endpoint zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public Annotation zipkin.internal.ThriftCodec.read(ByteBuffer bytes)"
                ]
            },
            "857aa3bfd5d35484a0e782cdf67210b49cc34886": {
                "interop/src/main/java/zipkin/interop/ScalaSpanStoreAdapter.java": [
                    "public Future<Seq<List<Span>>> zipkin.interop.ScalaSpanStoreAdapter.getTraces(QueryRequest input)"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "static QueryRequest zipkin.junit.ZipkinDispatcher.toQueryRequest(HttpUrl url)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanStore.java": [
                    "public List<DependencyLink> zipkin.elasticsearch.ElasticsearchSpanStore.apply(SearchResponse response)"
                ],
                "zipkin-storage/jdbc/src/main/java/zipkin/jdbc/DependencyLinkSpanIterator.java": [
                    "public DependencyLinkSpan zipkin.jdbc.DependencyLinkSpanIterator.next()"
                ],
                "zipkin-storage/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java": [
                    "List<List<Span>> zipkin.jdbc.JDBCSpanStore.getTraces(@Nullable QueryRequest request, @Nullable Long traceId, boolean raw)"
                ],
                "zipkin/src/main/java/zipkin/InMemorySpanStore.java": [
                    "public List<DependencyLink> zipkin.InMemorySpanStore.getDependencies(long endTs, @Nullable Long lookback)"
                ],
                "zipkin/src/main/java/zipkin/QueryRequest.java": [
                    "public int zipkin.QueryRequest.hashCode()",
                    "public boolean zipkin.QueryRequest.equals(Object o)"
                ],
                "zipkin/src/main/java/zipkin/internal/ApplyTimestampAndDuration.java": [
                    "public static Span zipkin.internal.ApplyTimestampAndDuration.apply(Span span)"
                ],
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static Span zipkin.internal.CorrectForClockSkew.adjustTimestamps(Span span, ClockSkew skew)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public BinaryAnnotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public Span zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public Endpoint zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public DependencyLink zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/internal/MergeById.java": [
                    "public static List<Span> zipkin.internal.MergeById.apply(Collection<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public Span zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public DependencyLink zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public BinaryAnnotation zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public Endpoint zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public Annotation zipkin.internal.ThriftCodec.read(ByteBuffer bytes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fc8cc19a78d01c472b4b79412f378a43f179b772",
        "previous_commit": "66897b2947691611576246ed4d3de6add9782e65",
        "date": 1563062802,
        "releases": {
            "previous": "fc8cc19a78d01c472b4b79412f378a43f179b772",
            "next": "fc8cc19a78d01c472b4b79412f378a43f179b772"
        },
        "commit_message": "Migrates Elasticsearch storage from okhttp to armeria (#2653)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fc8cc19a78d01c472b4b79412f378a43f179b772": {
                "zipkin-server/src/main/java/zipkin2/server/internal/MetricsHealthController.java": [
                    "public AggregatedHttpResponse zipkin2.server.internal.MetricsHealthController.getHealth()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder()",
                    "public void zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.setHosts(List<String> hosts)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "IndexTemplates zipkin2.elasticsearch.ElasticsearchStorage.ensureIndexTemplates()",
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)",
                    "public HttpCall.Factory zipkin2.elasticsearch.ElasticsearchStorage.http()",
                    "public static Builder zipkin2.elasticsearch.ElasticsearchStorage.newBuilder()",
                    "public void zipkin2.elasticsearch.ElasticsearchStorage.close()",
                    "void zipkin2.elasticsearch.ElasticsearchStorage.clear(String index)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "static float zipkin2.elasticsearch.VersionSpecificTemplates.getVersion(HttpCall.Factory callFactory)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BulkCallBuilder.java": [
                    "static void zipkin2.elasticsearch.internal.BulkCallBuilder.write(BufferedSink sink, IndexEntry entry, boolean shouldAddType)",
                    "public HttpCall<Void> zipkin2.elasticsearch.internal.BulkCallBuilder.build()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/IndexNameFormatter.java": [
                    "public final IndexNameFormatter zipkin2.elasticsearch.internal.IndexNameFormatter.build()",
                    "protected SimpleDateFormat zipkin2.elasticsearch.internal.IndexNameFormatter.initialValue()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "public String zipkin2.elasticsearch.internal.client.HttpCall<V>.toString()",
                    "public HttpCall<V> zipkin2.elasticsearch.internal.client.HttpCall<V>.clone()",
                    "protected V zipkin2.elasticsearch.internal.client.HttpCall<V>.doExecute()",
                    "protected void zipkin2.elasticsearch.internal.client.HttpCall<V>.doEnqueue(Callback<V> callback)",
                    "protected void zipkin2.elasticsearch.internal.client.HttpCall<V>.doCancel()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/SearchCallFactory.java": [
                    "public <V> HttpCall<V> zipkin2.elasticsearch.internal.client.SearchCallFactory.newCall(SearchRequest request, HttpCall.BodyConverter<V> bodyConverter)"
                ]
            },
            "66897b2947691611576246ed4d3de6add9782e65": {
                "zipkin-server/src/main/java/zipkin2/server/internal/MetricsHealthController.java": [
                    "public HttpResponse zipkin2.server.internal.MetricsHealthController.getHealth()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder(OkHttpClient client)",
                    "public void zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.setHosts(List<String> hosts)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "IndexTemplates zipkin2.elasticsearch.ElasticsearchStorage.ensureIndexTemplates()",
                    "public HttpCall.Factory zipkin2.elasticsearch.ElasticsearchStorage.http()",
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)",
                    "public static Builder zipkin2.elasticsearch.ElasticsearchStorage.newBuilder()",
                    "public void zipkin2.elasticsearch.ElasticsearchStorage.close()",
                    "void zipkin2.elasticsearch.ElasticsearchStorage.clear(String index)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "static float zipkin2.elasticsearch.VersionSpecificTemplates.getVersion(HttpCall.Factory callFactory)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BulkCallBuilder.java": [
                    "static void zipkin2.elasticsearch.internal.BulkCallBuilder.write(BufferedSink sink, IndexEntry entry, boolean shouldAddType)",
                    "public HttpCall<Void> zipkin2.elasticsearch.internal.BulkCallBuilder.build()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/IndexNameFormatter.java": [
                    "public final IndexNameFormatter zipkin2.elasticsearch.internal.IndexNameFormatter.build()",
                    "protected SimpleDateFormat zipkin2.elasticsearch.internal.IndexNameFormatter.initialValue()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "public String zipkin2.elasticsearch.internal.client.HttpCall<V>.toString()",
                    "public HttpCall<V> zipkin2.elasticsearch.internal.client.HttpCall<V>.clone()",
                    "protected V zipkin2.elasticsearch.internal.client.HttpCall<V>.doExecute()",
                    "protected void zipkin2.elasticsearch.internal.client.HttpCall<V>.doEnqueue(Callback<V> callback)",
                    "protected void zipkin2.elasticsearch.internal.client.HttpCall<V>.doCancel()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/SearchCallFactory.java": [
                    "public <V> HttpCall<V> zipkin2.elasticsearch.internal.client.SearchCallFactory.newCall(SearchRequest request, HttpCall.BodyConverter<V> bodyConverter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5c8a17620674ada895acf05038bfdb209924a47d",
        "previous_commit": "e62c86f9093e8eaae5e070e67fd1764c02dfbf2b",
        "date": 1505215897,
        "releases": {
            "previous": "5c8a17620674ada895acf05038bfdb209924a47d",
            "next": "5c8a17620674ada895acf05038bfdb209924a47d"
        },
        "commit_message": "Extracts v2 library\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5c8a17620674ada895acf05038bfdb209924a47d": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "static zipkin2.storage.QueryRequest zipkin.junit.ZipkinDispatcher.toQueryRequest2(HttpUrl url)",
                    "MockResponse zipkin.junit.ZipkinDispatcher.queryV2(HttpUrl url)"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public List<List<Span>> zipkin.junit.ZipkinRule.getTraces()"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinHealthIndicator.java": [
                    "void zipkin.server.ZipkinHealthIndicator.addComponent(Component component)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV2.java": [
                    "public String zipkin.server.ZipkinQueryApiV2.getTrace(@PathVariable String traceIdHex, WebRequest request)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyJsonAdapters.java": [
                    "public DependencyLink zipkin.storage.elasticsearch.http.LegacyJsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "public void zipkin.collector.Collector.acceptSpans(byte[] serializedSpans, SpanDecoder decoder, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public static List<DependencyLink> zipkin.internal.DependencyLinker.merge(Iterable<DependencyLink> in)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2Collector.java": [
                    "protected List<Span> zipkin.internal.V2Collector.decodeList(BytesDecoder<Span> decoder, byte[] serialized)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2JsonSpanDecoder.java": [
                    "public List<zipkin.Span> zipkin.internal.V2JsonSpanDecoder.readSpans(byte[] span)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanConverter.java": [
                    "Span.Builder zipkin.internal.V2SpanConverter.forEndpoint(zipkin.Span source, @Nullable zipkin.Endpoint e)",
                    "public static zipkin.Span zipkin.internal.V2SpanConverter.toSpan(Span in)",
                    "void zipkin.internal.V2SpanConverter.processBinaryAnnotations(zipkin.Span source)",
                    "void zipkin.internal.V2SpanConverter.processAnnotations(zipkin.Span source)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2StorageComponent.java": [
                    "public String zipkin.internal.V2StorageComponent.toString()",
                    "public CheckResult zipkin.internal.V2StorageComponent.check()",
                    "public AsyncSpanStore zipkin.internal.V2StorageComponent.asyncSpanStore()",
                    "public void zipkin.internal.V2StorageComponent.close()",
                    "public final AsyncSpanConsumer zipkin.internal.V2StorageComponent.asyncSpanConsumer()",
                    "public zipkin.storage.SpanStore zipkin.internal.V2StorageComponent.spanStore()"
                ]
            },
            "e62c86f9093e8eaae5e070e67fd1764c02dfbf2b": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "static zipkin.internal.v2.storage.QueryRequest zipkin.junit.ZipkinDispatcher.toQueryRequest2(HttpUrl url)",
                    "MockResponse zipkin.junit.ZipkinDispatcher.queryV2(HttpUrl url)"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public List<List<Span>> zipkin.junit.ZipkinRule.getTraces()"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinHealthIndicator.java": [
                    "void zipkin.server.ZipkinHealthIndicator.addComponent(Component component)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV2.java": [
                    "public String zipkin.server.ZipkinQueryApiV2.getTrace(@PathVariable String traceIdHex, WebRequest request)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyJsonAdapters.java": [
                    "public DependencyLink zipkin.storage.elasticsearch.http.LegacyJsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "public void zipkin.collector.Collector.acceptSpans(byte[] serializedSpans, SpanDecoder decoder, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public static List<DependencyLink> zipkin.internal.DependencyLinker.merge(Iterable<DependencyLink> in)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2Collector.java": [
                    "protected List<Span> zipkin.internal.V2Collector.decodeList(BytesDecoder<Span> decoder, byte[] serialized)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2JsonSpanDecoder.java": [
                    "public List<zipkin.Span> zipkin.internal.V2JsonSpanDecoder.readSpans(byte[] span)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanConverter.java": [
                    "Span.Builder zipkin.internal.V2SpanConverter.forEndpoint(zipkin.Span source, @Nullable zipkin.Endpoint e)",
                    "public static zipkin.Span zipkin.internal.V2SpanConverter.toSpan(Span in)",
                    "void zipkin.internal.V2SpanConverter.processBinaryAnnotations(zipkin.Span source)",
                    "void zipkin.internal.V2SpanConverter.processAnnotations(zipkin.Span source)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2StorageComponent.java": [
                    "public String zipkin.internal.V2StorageComponent.toString()",
                    "public CheckResult zipkin.internal.V2StorageComponent.check()",
                    "public AsyncSpanStore zipkin.internal.V2StorageComponent.asyncSpanStore()",
                    "public void zipkin.internal.V2StorageComponent.close()",
                    "public final AsyncSpanConsumer zipkin.internal.V2StorageComponent.asyncSpanConsumer()",
                    "public zipkin.storage.SpanStore zipkin.internal.V2StorageComponent.spanStore()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e0192fb7334bafb4a00b24de9b970463fb3ee33e",
        "previous_commit": "7a80b84825286e98cb1b96a5bccdbcd6c686239f",
        "date": 1512490388,
        "releases": {
            "previous": "e0192fb7334bafb4a00b24de9b970463fb3ee33e",
            "next": "e0192fb7334bafb4a00b24de9b970463fb3ee33e"
        },
        "commit_message": "Updates to JDK 9\n\n* updates circleci config (travis stays 1.8)\n* moves maven config to allow java 9\n* fixes where retrolambda cannot backport lambdas\n* works around powermock incompatibility\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e0192fb7334bafb4a00b24de9b970463fb3ee33e": {
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaCollector.java": [
                    "Runnable zipkin.collector.kafka.KafkaCollector.guardFailures(final Runnable delegate)"
                ],
                "zipkin-collector/kafka10/src/main/java/zipkin/collector/kafka10/KafkaCollector.java": [
                    "Runnable zipkin.collector.kafka10.KafkaCollector.guardFailures(final Runnable delegate)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.apply(@Nullable Set<Long> traceIds)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "public List<List<Span>> zipkin.storage.cassandra.CassandraSpanStore.apply(@Nullable List<Span> input)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public String zipkin2.elasticsearch.ElasticsearchStorage.toString()",
                    "public static void zipkin2.elasticsearch.ElasticsearchStorage.flush(HttpCall.Factory factory, String index)",
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)",
                    "void zipkin2.elasticsearch.ElasticsearchStorage.clear(String index)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/EnsureIndexTemplate.java": [
                    "static void zipkin2.elasticsearch.EnsureIndexTemplate.apply(HttpCall.Factory callFactory, String name, String indexTemplate)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "static float zipkin2.elasticsearch.VersionSpecificTemplates.getVersion(HttpCall.Factory callFactory)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/HttpBulkIndexer.java": [
                    "public HttpCall<Void> zipkin2.elasticsearch.internal.HttpBulkIndexer.newCall()"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/SelectDependencies.java": [
                    "public String zipkin2.storage.cassandra.SelectDependencies.toString()"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanStoreAdapter.java": [
                    "Call<List<zipkin.Span>> zipkin.internal.V2SpanStoreAdapter.getRawTraceCall(long traceIdHigh, long traceIdLow)",
                    "Call<List<zipkin.Span>> zipkin.internal.V2SpanStoreAdapter.getTraceCall(long traceIdHigh, long traceIdLow)",
                    "Call<List<DependencyLink>> zipkin.internal.V2SpanStoreAdapter.getDependenciesCall(long endTs, @Nullable Long lookback)",
                    "Call<List<List<zipkin.Span>>> zipkin.internal.V2SpanStoreAdapter.getTracesCall(zipkin.storage.QueryRequest v1Request)"
                ],
                "zipkin2/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "public synchronized Call<List<DependencyLink>> zipkin2.storage.InMemoryStorage.getDependencies(long endTs, long lookback)"
                ]
            },
            "7a80b84825286e98cb1b96a5bccdbcd6c686239f": {
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaCollector.java": [
                    "Runnable zipkin.collector.kafka.KafkaCollector.guardFailures(final Runnable delegate)"
                ],
                "zipkin-collector/kafka10/src/main/java/zipkin/collector/kafka10/KafkaCollector.java": [
                    "Runnable zipkin.collector.kafka10.KafkaCollector.guardFailures(final Runnable delegate)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.apply(@Nullable Set<Long> traceIds)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "public List<List<Span>> zipkin.storage.cassandra.CassandraSpanStore.apply(@Nullable List<Span> input)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public String zipkin2.elasticsearch.ElasticsearchStorage.toString()",
                    "public static void zipkin2.elasticsearch.ElasticsearchStorage.flush(HttpCall.Factory factory, String index)",
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)",
                    "void zipkin2.elasticsearch.ElasticsearchStorage.clear(String index)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/EnsureIndexTemplate.java": [
                    "static void zipkin2.elasticsearch.EnsureIndexTemplate.apply(HttpCall.Factory callFactory, String name, String indexTemplate)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "static float zipkin2.elasticsearch.VersionSpecificTemplates.getVersion(HttpCall.Factory callFactory)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/HttpBulkIndexer.java": [
                    "public HttpCall<Void> zipkin2.elasticsearch.internal.HttpBulkIndexer.newCall()"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/SelectDependencies.java": [
                    "public String zipkin2.storage.cassandra.SelectDependencies.toString()"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanStoreAdapter.java": [
                    "Call<List<zipkin.Span>> zipkin.internal.V2SpanStoreAdapter.getRawTraceCall(long traceIdHigh, long traceIdLow)",
                    "Call<List<zipkin.Span>> zipkin.internal.V2SpanStoreAdapter.getTraceCall(long traceIdHigh, long traceIdLow)",
                    "Call<List<DependencyLink>> zipkin.internal.V2SpanStoreAdapter.getDependenciesCall(long endTs, @Nullable Long lookback)",
                    "Call<List<List<zipkin.Span>>> zipkin.internal.V2SpanStoreAdapter.getTracesCall(zipkin.storage.QueryRequest v1Request)"
                ],
                "zipkin2/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "public synchronized Call<List<DependencyLink>> zipkin2.storage.InMemoryStorage.getDependencies(long endTs, long lookback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0bd1c9ebb58b999b2378af07ee77e5775c36a259",
        "previous_commit": "41ff98f8ef2818a85321ddbdf29983f24d953e82",
        "date": 1524793541,
        "releases": {
            "previous": "0bd1c9ebb58b999b2378af07ee77e5775c36a259",
            "next": "0bd1c9ebb58b999b2378af07ee77e5775c36a259"
        },
        "commit_message": "Implements Proto3 decoding and collector detection\n\nThis allows collectors to detect if proto3 is in use. When using http,\nthe media type \"application/x-protobuf\" can also be used.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0bd1c9ebb58b999b2378af07ee77e5775c36a259": {
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.collector.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-collector/kafka10/src/main/java/zipkin/collector/kafka10/KafkaCollectorWorker.java": [
                    "public void zipkin.collector.kafka10.KafkaCollectorWorker.run()"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin/server/internal/ZipkinHttpCollector.java": [
                    "public void zipkin.server.internal.ZipkinHttpCollector.handleRequest(HttpServerExchange exchange)"
                ],
                "zipkin/src/main/java/zipkin/internal/DetectingSpanDecoder.java": [
                    "public static SpanDecoder zipkin.internal.DetectingSpanDecoder.detectFormat(byte[] bytes)",
                    "public List<Span> zipkin.internal.DetectingSpanDecoder.readSpans(byte[] span)"
                ],
                "zipkin2/src/main/java/zipkin2/Span.java": [
                    "Object zipkin2.Span.readResolve()",
                    "final Object zipkin2.Span.writeReplace()"
                ],
                "zipkin2/src/main/java/zipkin2/codec/SpanBytesDecoder.java": [
                    "public List<Span> decodeList(byte[] spans)",
                    "public boolean decodeList(byte[] spans, Collection<Span> out)",
                    "public Span decodeOne(byte[] span)",
                    "public boolean decode(byte[] span, Collection<Span> out)",
                    "public Encoding encoding()"
                ],
                "zipkin2/src/main/java/zipkin2/internal/Proto3Fields.java": [
                    "final int zipkin2.internal.Proto3Fields.sizeInBytes(T value)",
                    "boolean zipkin2.internal.Proto3Fields.read(Buffer b)",
                    "String zipkin2.internal.Proto3Fields.readValue(Buffer buffer)",
                    "static boolean zipkin2.internal.Proto3Fields.skipValue(Buffer buffer, int wireType)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/Proto3ZipkinFields.java": [
                    "Span zipkin2.internal.Proto3ZipkinFields.readValue(Buffer buffer)",
                    "public Span zipkin2.internal.Proto3ZipkinFields.read(Buffer buffer)"
                ]
            },
            "41ff98f8ef2818a85321ddbdf29983f24d953e82": {
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.collector.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-collector/kafka10/src/main/java/zipkin/collector/kafka10/KafkaCollectorWorker.java": [
                    "public void zipkin.collector.kafka10.KafkaCollectorWorker.run()"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin/server/internal/ZipkinHttpCollector.java": [
                    "public void zipkin.server.internal.ZipkinHttpCollector.handleRequest(HttpServerExchange exchange)"
                ],
                "zipkin/src/main/java/zipkin/internal/DetectingSpanDecoder.java": [
                    "public static SpanDecoder zipkin.internal.DetectingSpanDecoder.detectFormat(byte[] bytes)",
                    "public List<Span> zipkin.internal.DetectingSpanDecoder.readSpans(byte[] span)"
                ],
                "zipkin2/src/main/java/zipkin2/Span.java": [
                    "Object zipkin2.Span.readResolve()",
                    "final Object zipkin2.Span.writeReplace()"
                ],
                "zipkin2/src/main/java/zipkin2/codec/SpanBytesDecoder.java": [
                    "public List<Span> decodeList(byte[] spans)",
                    "public boolean decodeList(byte[] spans, Collection<Span> out)",
                    "public Span decodeOne(byte[] span)",
                    "public boolean decode(byte[] span, Collection<Span> out)",
                    "public Encoding encoding()"
                ],
                "zipkin2/src/main/java/zipkin2/internal/Proto3Fields.java": [
                    "final int zipkin2.internal.Proto3Fields.sizeInBytes(T value)",
                    "boolean zipkin2.internal.Proto3Fields.read(Buffer b)",
                    "String zipkin2.internal.Proto3Fields.readValue(Buffer buffer)",
                    "static boolean zipkin2.internal.Proto3Fields.skipValue(Buffer buffer, int wireType)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/Proto3ZipkinFields.java": [
                    "Span zipkin2.internal.Proto3ZipkinFields.readValue(Buffer buffer)",
                    "public Span zipkin2.internal.Proto3ZipkinFields.read(Buffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "09a441f4b4e8734058e8d023367f826b845e9dea",
        "previous_commit": "560f7056fb379759c10d3837b17865f52910a6f9",
        "date": 1557619654,
        "releases": {
            "previous": "09a441f4b4e8734058e8d023367f826b845e9dea",
            "next": "09a441f4b4e8734058e8d023367f826b845e9dea"
        },
        "commit_message": "Folds Buffer tree into UnsafeBuffer to improve performance (#2586)\n\nRecent optimizations required peeking at the underlying byte array. This\r\nchange formalizes the buffer as one that is specialized for being array\r\nbacked (and writes are unsafe eg not bounds checked).\r\n\r\nThe results are now almost the same as google's proto library, despite\r\nthis library being smaller and including proto, json and thrift codecs\r\nand a functional Zipkin storage engine:\r\n\r\nComparison\r\n```\r\nProtoCodecBenchmarks.bytes_protobufDecoder:bytes_protobufDecoder\u00b7p0.99       sample            1953.710                us/op\r\nProtoCodecBenchmarks.bytes_protobufDecoder:\u00b7gc.alloc.rate.norm               sample     15  2023206.265 \u00b1     32.203    B/op\r\nProtoCodecBenchmarks.bytes_wireDecoder:bytes_wireDecoder\u00b7p0.99               sample            2351.104                us/op\r\nProtoCodecBenchmarks.bytes_wireDecoder:\u00b7gc.alloc.rate.norm                   sample     15  2435408.568 \u00b1     53.612    B/op\r\n```\r\n\r\nBefore\r\n```\r\nProtoCodecBenchmarks.bytes_zipkinDecoder:bytes_zipkinDecoder\u00b7p0.99           sample            2162.688                us/op\r\nProtoCodecBenchmarks.bytes_zipkinDecoder:\u00b7gc.alloc.rate.norm                 sample     15  2095172.026 \u00b1     45.379    B/op\r\n```\r\n\r\nAfter\r\n```\r\nProtoCodecBenchmarks.bytes_zipkinDecoder:bytes_zipkinDecoder\u00b7p0.99           sample            1996.800                us/op\r\nProtoCodecBenchmarks.bytes_zipkinDecoder:\u00b7gc.alloc.rate.norm                 sample     15  2095168.617 \u00b1     36.985    B/op\r\n```\r\n\r\nFYI: While this is array backed, it doesn't imply allocating a new array\r\nper span. Those looking to read large amounts of data can use this by\r\nslicing a buffer and filling for each length-prefixed byte string.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "09a441f4b4e8734058e8d023367f826b845e9dea": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "public int zipkin2.server.internal.ZipkinQueryApiV2.sizeInBytes(String value)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Dependencies.java": [
                    "public ByteBuffer zipkin2.internal.Dependencies.toThrift()"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> byte[] zipkin2.internal.JsonCodec.write(UnsafeBuffer.Writer<T> writer, T value)",
                    "public static <T> int zipkin2.internal.JsonCodec.writeList(UnsafeBuffer.Writer<T> writer, List<T> value, byte[] out, int pos)"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonEscaper.java": [
                    "public static int zipkin2.internal.JsonEscaper.jsonEscapedSizeInBytes(CharSequence v)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Codec.java": [
                    "public static boolean zipkin2.internal.Proto3Codec.readList(byte[] bytes, Collection<Span> out)",
                    "public static @Nullable Span zipkin2.internal.Proto3Codec.readOne(byte[] bytes)",
                    "public static boolean zipkin2.internal.Proto3Codec.read(byte[] bytes, Collection<Span> out)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Fields.java": [
                    "static int zipkin2.internal.Proto3Fields.sizeOfLengthDelimitedField(int sizeInBytes)",
                    "int zipkin2.internal.Proto3Fields.sizeInBytes(long number)",
                    "int zipkin2.internal.Proto3Fields.sizeOfValue(String utf8)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3SpanWriter.java": [
                    "public byte[] zipkin2.internal.Proto3SpanWriter.writeList(List<Span> spans)",
                    "int zipkin2.internal.Proto3SpanWriter.writeList(List<Span> spans, byte[] out, int pos)",
                    "byte[] zipkin2.internal.Proto3SpanWriter.write(Span onlySpan)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1SpanWriter.java": [
                    "static byte[] zipkin2.internal.V1SpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1ThriftSpanWriter.java": [
                    "public byte[] zipkin2.internal.V1ThriftSpanWriter.writeList(List<Span> spans)",
                    "public byte[] zipkin2.internal.V1ThriftSpanWriter.write(Span onlySpan)",
                    "public int zipkin2.internal.V1ThriftSpanWriter.writeList(List<Span> spans, byte[] out, int pos)",
                    "static byte[] zipkin2.internal.V1ThriftSpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)"
                ]
            },
            "560f7056fb379759c10d3837b17865f52910a6f9": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "public int zipkin2.server.internal.ZipkinQueryApiV2.sizeInBytes(String value)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Dependencies.java": [
                    "public ByteBuffer zipkin2.internal.Dependencies.toThrift()"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> int zipkin2.internal.JsonCodec.writeList(Buffer.Writer<T> writer, List<T> value, byte[] out, int pos)",
                    "public static <T> byte[] zipkin2.internal.JsonCodec.write(Buffer.Writer<T> writer, T value)"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonEscaper.java": [
                    "public static int zipkin2.internal.JsonEscaper.jsonEscapedSizeInBytes(CharSequence v)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Codec.java": [
                    "public static boolean zipkin2.internal.Proto3Codec.readList(byte[] bytes, Collection<Span> out)",
                    "public static @Nullable Span zipkin2.internal.Proto3Codec.readOne(byte[] bytes)",
                    "public static boolean zipkin2.internal.Proto3Codec.read(byte[] bytes, Collection<Span> out)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Fields.java": [
                    "static int zipkin2.internal.Proto3Fields.sizeOfLengthDelimitedField(int sizeInBytes)",
                    "int zipkin2.internal.Proto3Fields.sizeInBytes(long number)",
                    "int zipkin2.internal.Proto3Fields.sizeOfValue(String utf8)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3SpanWriter.java": [
                    "public byte[] zipkin2.internal.Proto3SpanWriter.writeList(List<Span> spans)",
                    "int zipkin2.internal.Proto3SpanWriter.writeList(List<Span> spans, byte[] out, int pos)",
                    "byte[] zipkin2.internal.Proto3SpanWriter.write(Span onlySpan)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1SpanWriter.java": [
                    "static byte[] zipkin2.internal.V1SpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1ThriftSpanWriter.java": [
                    "public byte[] zipkin2.internal.V1ThriftSpanWriter.writeList(List<Span> spans)",
                    "public byte[] zipkin2.internal.V1ThriftSpanWriter.write(Span onlySpan)",
                    "public int zipkin2.internal.V1ThriftSpanWriter.writeList(List<Span> spans, byte[] out, int pos)",
                    "static byte[] zipkin2.internal.V1ThriftSpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4c612fabdd876e618fee2b8ea49247bcef396bbb",
        "previous_commit": "9d99e5adab46578f48e01abe3a2ed97ce2785717",
        "date": 1459815968,
        "releases": {
            "previous": "4c612fabdd876e618fee2b8ea49247bcef396bbb",
            "next": "4c612fabdd876e618fee2b8ea49247bcef396bbb"
        },
        "commit_message": "Adds StorageComponent, an object graph for storage interfaces\n\nThis add `StorageComponent`, which centralizes how storage plugins\nprovide interfaces to consumers such as zipkin-server. This also\nre-organizes transports similarly, though not yet exposing\n`TransportComponent`.\n\nA key feature of this is lazy instantiation. This prevents transient\nconditions such as Cassandra being down from crashing bootstrap.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4c612fabdd876e618fee2b8ea49247bcef396bbb": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public int zipkin.junit.ZipkinRule.receivedSpanCount()",
                    "public ZipkinRule zipkin.junit.ZipkinRule.storeSpans(List<Span> spans)",
                    "public List<List<Span>> zipkin.junit.ZipkinRule.getTraces()"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinHttpTransport.java": [
                    "ResponseEntity<?> zipkin.server.ZipkinHttpTransport.validateAndStoreSpans(String encoding, Codec codec, byte[] body)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "public Object zipkin.server.ZipkinServerConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/SpanStoreSpanCollector.java": [
                    "public void zipkin.server.brave.SpanStoreSpanCollector.flush()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.elasticsearch.ElasticsearchSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java": [
                    "List<List<Span>> zipkin.jdbc.JDBCSpanStore.getTraces(@Nullable QueryRequest request, @Nullable Long traceId, boolean raw)",
                    "public List<String> zipkin.jdbc.JDBCSpanStore.getServiceNames()",
                    "public List<DependencyLink> zipkin.jdbc.JDBCSpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "public List<String> zipkin.jdbc.JDBCSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaTransport.java": [
                    "public Builder zipkin.kafka.KafkaTransport.zookeeper(String zookeeper)",
                    "public Builder zipkin.kafka.KafkaTransport.topic(String topic)",
                    "public Builder zipkin.kafka.KafkaTransport.groupId(String groupId)"
                ],
                "zipkin-transports/scribe/src/main/java/zipkin/scribe/ScribeSpanConsumer.java": [
                    "public ListenableFuture<ResultCode> zipkin.scribe.ScribeSpanConsumer.log(List<LogEntry> messages)"
                ],
                "zipkin-transports/scribe/src/main/java/zipkin/scribe/ScribeTransport.java": [
                    "public Builder zipkin.scribe.ScribeTransport.category(String category)"
                ],
                "zipkin/src/main/java/zipkin/InMemorySpanStore.java": [
                    "public void zipkin.InMemorySpanStore.accept(List<Span> spans)"
                ]
            },
            "9d99e5adab46578f48e01abe3a2ed97ce2785717": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public int zipkin.junit.ZipkinRule.receivedSpanCount()",
                    "public ZipkinRule zipkin.junit.ZipkinRule.storeSpans(List<Span> spans)",
                    "public List<List<Span>> zipkin.junit.ZipkinRule.getTraces()"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinHttpTransport.java": [
                    "ResponseEntity<?> zipkin.server.ZipkinHttpTransport.validateAndStoreSpans(String encoding, Codec codec, byte[] body)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "public Object zipkin.server.ZipkinServerConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/SpanStoreSpanCollector.java": [
                    "public void zipkin.server.brave.SpanStoreSpanCollector.flush()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.elasticsearch.ElasticsearchSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java": [
                    "List<List<Span>> zipkin.jdbc.JDBCSpanStore.getTraces(@Nullable QueryRequest request, @Nullable Long traceId, boolean raw)",
                    "public List<String> zipkin.jdbc.JDBCSpanStore.getServiceNames()",
                    "public List<DependencyLink> zipkin.jdbc.JDBCSpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "public List<String> zipkin.jdbc.JDBCSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaTransport.java": [
                    "public Builder zipkin.kafka.KafkaConfig.zookeeper(String zookeeper)",
                    "public Builder zipkin.kafka.KafkaConfig.topic(String topic)",
                    "public Builder zipkin.kafka.KafkaConfig.groupId(String groupId)"
                ],
                "zipkin-transports/scribe/src/main/java/zipkin/scribe/ScribeSpanConsumer.java": [
                    "public ListenableFuture<ResultCode> zipkin.scribe.ScribeSpanConsumer.log(List<LogEntry> messages)"
                ],
                "zipkin-transports/scribe/src/main/java/zipkin/scribe/ScribeTransport.java": [
                    "public Builder zipkin.scribe.ScribeConfig.category(String category)"
                ],
                "zipkin/src/main/java/zipkin/InMemorySpanStore.java": [
                    "public synchronized void zipkin.InMemorySpanStore.accept(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ae4a19eb5c77dabbaa1a26055d504936a6433b66",
        "previous_commit": "822835d5e423eeb11ff3f236d515fe2e566151fb",
        "date": 1474085380,
        "releases": {
            "previous": "ae4a19eb5c77dabbaa1a26055d504936a6433b66",
            "next": "ae4a19eb5c77dabbaa1a26055d504936a6433b66"
        },
        "commit_message": "Unbreaks ElasticsearchStorage.Builder; reduces scope of internal client (#1304)\n\nThis does a few things to make the recently refactored Elasticsearch\r\ncomponent more maintainable:\r\n\r\n* Unbreaks api changes to ElasticsearchStorage.Builder\r\n  * This now delegates to InternalElasticsearchClient.Builder\r\n* Reduces scope of InternalElasticsearchClient\r\n  * Removes dependency writes as this is only used in tests\r\n* Various small cleanups.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ae4a19eb5c77dabbaa1a26055d504936a6433b66": {
                "zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin.autoconfigure.storage.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.elasticsearch.ElasticsearchSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)",
                    "public List<List<Span>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.apply(List<Span> response)",
                    "public ListenableFuture<List<Span>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getRawTrace(long traceId)",
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getServiceNames()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchStorage.java": [
                    "public static Builder zipkin.storage.elasticsearch.ElasticsearchStorage.builder()",
                    "public CheckResult zipkin.storage.elasticsearch.ElasticsearchStorage.check()",
                    "void zipkin.storage.elasticsearch.ElasticsearchStorage.clear()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/LazyClient.java": [
                    "protected InternalElasticsearchClient zipkin.storage.elasticsearch.LazyClient.compute()",
                    "public String zipkin.storage.elasticsearch.LazyClient.toString()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/NativeClient.java": [
                    "public ListenableFuture<Collection<DependencyLink>> zipkin.storage.elasticsearch.NativeClient.findDependencies(String[] indices)",
                    "public Collection<DependencyLink> zipkin.storage.elasticsearch.NativeClient.apply(SearchResponse response)",
                    "public ListenableFuture<Void> zipkin.storage.elasticsearch.NativeClient.indexSpans(List<IndexableSpan> spans)",
                    "public InternalElasticsearchClient zipkin.storage.elasticsearch.NativeClient.create()",
                    "public ListenableFuture<List<Span>> zipkin.storage.elasticsearch.NativeClient.findSpans(String[] indices, QueryBuilder query)",
                    "private IndexRequestBuilder zipkin.storage.elasticsearch.NativeClient.toIndexRequest(IndexableSpan span)",
                    "public ListenableFuture<Buckets> zipkin.storage.elasticsearch.NativeClient.scanTraces(String[] indices, QueryBuilder query, AbstractAggregationBuilder... aggregations)"
                ]
            },
            "822835d5e423eeb11ff3f236d515fe2e566151fb": {
                "zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin.autoconfigure.storage.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.elasticsearch.ElasticsearchSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)",
                    "public List<List<Span>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.apply(List<Span> response)",
                    "public ListenableFuture<List<Span>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getRawTrace(long traceId)",
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getServiceNames()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchStorage.java": [
                    "public static Builder zipkin.storage.elasticsearch.ElasticsearchStorage.builder()",
                    "public CheckResult zipkin.storage.elasticsearch.ElasticsearchStorage.check()",
                    "void zipkin.storage.elasticsearch.ElasticsearchStorage.clear()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/LazyClient.java": [
                    "protected InternalElasticsearchClient zipkin.storage.elasticsearch.LazyClient.compute()",
                    "public String zipkin.storage.elasticsearch.LazyClient.toString()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/NativeClient.java": [
                    "public ListenableFuture<Collection<DependencyLink>> zipkin.storage.elasticsearch.NativeClient.findDependencies(String[] indices)",
                    "public Collection<DependencyLink> zipkin.storage.elasticsearch.NativeClient.apply(SearchResponse response)",
                    "public ListenableFuture<Void> zipkin.storage.elasticsearch.NativeClient.indexSpans(List<IndexableSpan> spans)",
                    "public ListenableFuture<List<Span>> zipkin.storage.elasticsearch.NativeClient.findSpans(String[] indices, QueryBuilder query)",
                    "public InternalElasticsearchClient zipkin.storage.elasticsearch.NativeClient.create(String[] allIndices)",
                    "private IndexRequestBuilder zipkin.storage.elasticsearch.NativeClient.toIndexRequest(IndexableSpan span)",
                    "public ListenableFuture<Buckets> zipkin.storage.elasticsearch.NativeClient.scanTraces(String[] indices, QueryBuilder query, AbstractAggregationBuilder... aggregations)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5f2e29c72119fbf1623b3cb1d934e6f17892dc94",
        "previous_commit": "b23ab20e9ca9ed09bfe7f608dc79377a0a28294c",
        "date": 1501507095,
        "releases": {
            "previous": "5f2e29c72119fbf1623b3cb1d934e6f17892dc94",
            "next": "5f2e29c72119fbf1623b3cb1d934e6f17892dc94"
        },
        "commit_message": "Adds errorCount to the dependency graph and colors accordingly (#1675)\n\nThis adds errorCount to the dependency links, indicating how many of\r\ncallCount were in error. Once merged, this should be followed by an\r\nupdate to the zipkin-api project, documenting the new field.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5f2e29c72119fbf1623b3cb1d934e6f17892dc94": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public DependencyLink zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkSpan2Iterator.java": [
                    "public Span2 zipkin.storage.mysql.DependencyLinkSpan2Iterator.next()"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.aggregateDependencies(long endTs, @Nullable Long lookback, Connection conn)",
                    "public List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.getDependencies(long endTs, @Nullable Long lookback)"
                ],
                "zipkin/src/main/java/zipkin/DependencyLink.java": [
                    "public boolean zipkin.DependencyLink.equals(Object o)",
                    "public DependencyLink zipkin.DependencyLink.build()",
                    "public static DependencyLink zipkin.DependencyLink.create(String parent, String child, long callCount)",
                    "public int zipkin.DependencyLink.hashCode()"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public List<DependencyLink> zipkin.internal.DependencyLinker.link()",
                    "Span2 zipkin.internal.DependencyLinker.findRpcAncestor(Node<Span2> current)",
                    "public static List<DependencyLink> zipkin.internal.DependencyLinker.merge(Iterable<DependencyLink> in)",
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<Span2> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public void zipkin.internal..write(DependencyLink value, Buffer b)",
                    "public int zipkin.internal..sizeInBytes(DependencyLink value)",
                    "public DependencyLink zipkin.internal..fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public int zipkin.internal.ThriftCodec.sizeInBytes(DependencyLink value)",
                    "public DependencyLink zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public void zipkin.internal.ThriftCodec.write(DependencyLink value, Buffer buffer)"
                ]
            },
            "b23ab20e9ca9ed09bfe7f608dc79377a0a28294c": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public DependencyLink zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkSpan2Iterator.java": [
                    "public Span2 zipkin.storage.mysql.DependencyLinkSpan2Iterator.next()"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.aggregateDependencies(long endTs, @Nullable Long lookback, Connection conn)",
                    "public List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.getDependencies(long endTs, @Nullable Long lookback)"
                ],
                "zipkin/src/main/java/zipkin/DependencyLink.java": [
                    "public boolean zipkin.DependencyLink.equals(Object o)",
                    "public DependencyLink zipkin.DependencyLink.build()",
                    "public static DependencyLink zipkin.DependencyLink.create(String parent, String child, long callCount)",
                    "public int zipkin.DependencyLink.hashCode()"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public List<DependencyLink> zipkin.internal.DependencyLinker.link()",
                    "String zipkin.internal.DependencyLinker.findRpcAncestor(Node<Span2> current)",
                    "public static List<DependencyLink> zipkin.internal.DependencyLinker.merge(Iterable<DependencyLink> in)",
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<Span2> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public void zipkin.internal..write(DependencyLink value, Buffer b)",
                    "public int zipkin.internal..sizeInBytes(DependencyLink value)",
                    "public DependencyLink zipkin.internal..fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public int zipkin.internal.ThriftCodec.sizeInBytes(DependencyLink value)",
                    "public DependencyLink zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public void zipkin.internal.ThriftCodec.write(DependencyLink value, Buffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "65e7db8921d7c2b2a7421a1be1d7e85c224b4f21",
        "previous_commit": "ac1b01fed8af7c89bad8afc3e479061f248b555d",
        "date": 1503577217,
        "releases": {
            "previous": "65e7db8921d7c2b2a7421a1be1d7e85c224b4f21",
            "next": "65e7db8921d7c2b2a7421a1be1d7e85c224b4f21"
        },
        "commit_message": "Removes old nullable annotation and fixes problems caught with analyzer (#1703)\n\nThis can't break anything at runtime because the nullable annotation\r\nremoved was source retention. This makes Intellij Nullable analysis\r\npossible.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "65e7db8921d7c2b2a7421a1be1d7e85c224b4f21": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "MockResponse zipkin.junit.ZipkinDispatcher.acceptSpans(RecordedRequest request, SpanDecoder decoder)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.storage.cassandra.CassandraSpanStore.getServiceNames()",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.apply(@Nullable Set<Long> traceIds)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsByAnnotation(String annotationKey, long endTs, long lookback, int limit)",
                    "ListenableFuture<List<Span>> zipkin.storage.cassandra.CassandraSpanStore.getSpansByTraceIds(Set<Long> traceIds, int limit)",
                    "public ListenableFuture<List<Span>> zipkin.storage.cassandra.CassandraSpanStore.getRawTrace(final long traceIdHigh, long traceIdLow)",
                    "public ListenableFuture<List<String>> zipkin.storage.cassandra.CassandraSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/DeduplicatingExecutor.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra.DeduplicatingExecutor.load(final BoundStatementKey key)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "private static <T extends Comparable> AsyncFunction<ResultSet, List<T>> zipkin.storage.cassandra3.CassandraSpanStore.readResultAsOrderedSet( final List<T> results, Function<Row, T> rowMapper)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "private static <K, T> AsyncFunction<ResultSet, Map<K, T>> zipkin.storage.cassandra3.CassandraSpanStore.readResultsAsMap(final Map<K, T> results, Function<Row, Map.Entry<K, T>> rowMapper)",
                    "private static <T> AsyncFunction<ResultSet, List<T>> zipkin.storage.cassandra3.CassandraSpanStore.readResults(final List<T> results, Function<Row, T> rowMapper)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.apply(@Nullable Collection<TraceIdUDT> traceIds)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getServiceNames(Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getSpanNames(String serviceName, Callback<List<String>> callback)"
                ]
            },
            "ac1b01fed8af7c89bad8afc3e479061f248b555d": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "MockResponse zipkin.junit.ZipkinDispatcher.acceptSpans(RecordedRequest request, SpanDecoder decoder)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.storage.cassandra.CassandraSpanStore.getServiceNames()",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.apply(Set<Long> traceIds)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsByAnnotation(String annotationKey, long endTs, long lookback, int limit)",
                    "ListenableFuture<List<Span>> zipkin.storage.cassandra.CassandraSpanStore.getSpansByTraceIds(Set<Long> traceIds, int limit)",
                    "public ListenableFuture<List<Span>> zipkin.storage.cassandra.CassandraSpanStore.getRawTrace(final long traceIdHigh, long traceIdLow)",
                    "public ListenableFuture<List<String>> zipkin.storage.cassandra.CassandraSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/DeduplicatingExecutor.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra.DeduplicatingExecutor.load(final BoundStatementKey key)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "private static <T extends Comparable> AsyncFunction<ResultSet, List<T>> zipkin.storage.cassandra3.CassandraSpanStore.readResultAsOrderedSet( final List<T> results, Function<Row, T> rowMapper)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "private static <K, T> AsyncFunction<ResultSet, Map<K, T>> zipkin.storage.cassandra3.CassandraSpanStore.readResultsAsMap(final Map<K, T> results, Function<Row, Map.Entry<K, T>> rowMapper)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.apply(Collection<TraceIdUDT> traceIds)",
                    "private static <T> AsyncFunction<ResultSet, List<T>> zipkin.storage.cassandra3.CassandraSpanStore.readResults(final List<T> results, Function<Row, T> rowMapper)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getServiceNames(Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getSpanNames(String serviceName, Callback<List<String>> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "eeb17681af780e563b44503d5af1eadb3ca6abfc",
        "previous_commit": "c3fe66e36355d1678bdb4c6f65cdf62a3bbfc7a7",
        "date": 1603248781,
        "releases": {
            "previous": "eeb17681af780e563b44503d5af1eadb3ca6abfc",
            "next": "eeb17681af780e563b44503d5af1eadb3ca6abfc"
        },
        "commit_message": "Refactors integration tests to be more isolated (#3249)\n\nThis makes all integration tests use unique data. Notably, they no\r\nlonger use constant trace ID or service names, as this can lead to\r\ndifficulty when a keyspace is re-used. For example, service names and\r\ntrace IDs are often partitions. When debugging it is easier when test\r\ndata is isolated by a service name as it can be easily queried.\r\n\r\nThis also pulls the heaviest tests into their own classes so that they\r\ndon't overload the storage containers used by the bulk of our tests.\r\n\r\nFinally, this fixes a few glitches in the v1 cassandra storage.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "eeb17681af780e563b44503d5af1eadb3ca6abfc": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.v1.CassandraSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/IndexTraceIdByServiceName.java": [
                    "public BoundStatement zipkin2.storage.cassandra.v1.IndexTraceIdByServiceName.bindPartitionKey(BoundStatement bound, String partitionKey)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdIndex.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectTraceIdIndex<K>.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromAnnotations.java": [
                    "Select.Where zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromAnnotations.declarePartitionKey(Select select)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromServiceName.java": [
                    "Select.Where zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceName.declarePartitionKey(Select select)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromServiceNames.java": [
                    "Select.Where zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceNames.declarePartitionKey(Select select)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/TimestampCodec.java": [
                    "static ByteBuffer zipkin2.storage.cassandra.v1.TimestampCodec.serialize(long timestamp)",
                    "static long zipkin2.storage.cassandra.v1.TimestampCodec.deserialize(Row row, int i)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, Session session)"
                ],
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public static String zipkin2.Span.normalizeTraceId(String traceId)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "synchronized void zipkin2.storage.InMemoryStorage.doAccept(List<Span> spans)",
                    "Set<String> zipkin2.storage.InMemoryStorage.traceIdsDescendingByTimestamp(QueryRequest request)",
                    "public synchronized Call<List<DependencyLink>> zipkin2.storage.InMemoryStorage.getDependencies(long endTs, long lookback)",
                    "synchronized Call<List<List<Span>>> zipkin2.storage.InMemoryStorage.getTraces(QueryRequest request, boolean strictTraceId)",
                    "public synchronized List<DependencyLink> zipkin2.storage.InMemoryStorage.getDependencies()"
                ],
                "zipkin/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public String zipkin2.storage.QueryRequest.toString()"
                ]
            },
            "c3fe66e36355d1678bdb4c6f65cdf62a3bbfc7a7": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.v1.CassandraSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/IndexTraceIdByServiceName.java": [
                    "public BoundStatement zipkin2.storage.cassandra.v1.IndexTraceIdByServiceName.bindPartitionKey(BoundStatement bound, String partitionKey)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdIndex.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectTraceIdIndex<K>.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromAnnotations.java": [
                    "Select.Where zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromAnnotations.declarePartitionKey(Select select)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromServiceName.java": [
                    "Select.Where zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceName.declarePartitionKey(Select select)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectTraceIdTimestampFromServiceNames.java": [
                    "Select.Where zipkin2.storage.cassandra.v1.SelectTraceIdTimestampFromServiceNames.declarePartitionKey(Select select)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/TimestampCodec.java": [
                    "static ByteBuffer zipkin2.storage.cassandra.v1.TimestampCodec.serialize(long timestamp)",
                    "static long zipkin2.storage.cassandra.v1.TimestampCodec.deserialize(Row row, int i)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, Session session)"
                ],
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public static String zipkin2.Span.normalizeTraceId(String traceId)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "synchronized void zipkin2.storage.InMemoryStorage.doAccept(List<Span> spans)",
                    "Set<String> zipkin2.storage.InMemoryStorage.traceIdsDescendingByTimestamp(QueryRequest request)",
                    "synchronized Call<List<List<Span>>> zipkin2.storage.InMemoryStorage.getTraces(QueryRequest request, boolean strictTraceId)",
                    "public List<DependencyLink> zipkin2.storage.InMemoryStorage.getDependencies()",
                    "public Call<List<DependencyLink>> zipkin2.storage.InMemoryStorage.getDependencies(long endTs, long lookback)"
                ],
                "zipkin/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public String zipkin2.storage.QueryRequest.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "73bd8652480faea803aafcda4ea4e6efc10f5f4c",
        "previous_commit": "ab604b0fb5dee05bf5ff9ded2f3703ff70f50b88",
        "date": 1597636421,
        "releases": {
            "previous": "73bd8652480faea803aafcda4ea4e6efc10f5f4c",
            "next": "73bd8652480faea803aafcda4ea4e6efc10f5f4c"
        },
        "commit_message": "Uses prepared statements for all Cassandra Queries (#3175)\n\nIn #3156, we stopped using prepared statements for simple queries for\r\nreasons including a bug in logging, which is now fixed. This restores\r\nuse of prepared statements for all Cassandra queries and backfills\r\nrationale of why this helps.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "73bd8652480faea803aafcda4ea4e6efc10f5f4c": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public CheckResult zipkin2.storage.cassandra.v1.CassandraStorage.check()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertTrace.java": [
                    "Input zipkin2.storage.cassandra.v1.InsertTrace.newInput(V1Span v1, ByteBuffer v1Bytes, long ts_micro)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/LazySession.java": [
                    "Session zipkin2.storage.cassandra.v1.LazySession.get()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Schema.java": [
                    "static Metadata zipkin2.storage.cassandra.v1.Schema.readMetadata(Session session)",
                    "static void zipkin2.storage.cassandra.v1.Schema.ensureExists(String keyspace, Session session)",
                    "static boolean zipkin2.storage.cassandra.v1.Schema.hasUpgrade1_defaultTtl(KeyspaceMetadata keyspaceMetadata)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectServiceNames.java": [
                    "public SelectServiceNames zipkin2.storage.cassandra.v1.SelectServiceNames.clone()",
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectServiceNames.newFuture()",
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectServiceNames.create()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "Session zipkin2.storage.cassandra.CassandraStorage.session()",
                    "public CheckResult zipkin2.storage.cassandra.CassandraStorage.check()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/InsertServiceRemoteService.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.InsertServiceRemoteService.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/InsertServiceSpan.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.InsertServiceSpan.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectServiceNames.create()",
                    "public SelectServiceNames zipkin2.storage.cassandra.SelectServiceNames.clone()",
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectServiceNames.newFuture()"
                ]
            },
            "ab604b0fb5dee05bf5ff9ded2f3703ff70f50b88": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public CheckResult zipkin2.storage.cassandra.v1.CassandraStorage.check()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertTrace.java": [
                    "Input zipkin2.storage.cassandra.v1.InsertTrace.newInput(V1Span v1, ByteBuffer v1Bytes, long ts_micro)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/LazySession.java": [
                    "Session zipkin2.storage.cassandra.v1.LazySession.get()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Schema.java": [
                    "static Metadata zipkin2.storage.cassandra.v1.Schema.readMetadata(Session session)",
                    "static void zipkin2.storage.cassandra.v1.Schema.ensureExists(String keyspace, Session session)",
                    "static boolean zipkin2.storage.cassandra.v1.Schema.hasUpgrade1_defaultTtl(KeyspaceMetadata keyspaceMetadata)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectServiceNames.java": [
                    "public SelectServiceNames zipkin2.storage.cassandra.v1.SelectServiceNames.clone()",
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectServiceNames.newFuture()",
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectServiceNames.create()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "Session zipkin2.storage.cassandra.CassandraStorage.session()",
                    "public CheckResult zipkin2.storage.cassandra.CassandraStorage.check()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/InsertServiceRemoteService.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.InsertServiceRemoteService.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/InsertServiceSpan.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.InsertServiceSpan.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectServiceNames.create()",
                    "public SelectServiceNames zipkin2.storage.cassandra.SelectServiceNames.clone()",
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectServiceNames.newFuture()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f0eabc049aaedead7bfe73d6b79f30f9a55e825b",
        "previous_commit": "4f99f6390217dd4024da3784fcc9d786233a324c",
        "date": 1502030110,
        "releases": {
            "previous": "f0eabc049aaedead7bfe73d6b79f30f9a55e825b",
            "next": "f0eabc049aaedead7bfe73d6b79f30f9a55e825b"
        },
        "commit_message": "Adds Elasticsearch 6.x support using Span2 model (#1674)\n\nThis adds Elasticsearch 6.x support via single-type indexes:\r\n\r\n* zipkin:span-2017-08-05 - span2 (single endpoint) format\r\n* zipkin:dependency-2017-08-05 - dependency links in existing format\r\n\r\nThis indexing model will be available in the next minor release of\r\nZipkin, particularly for Elasticsearch 2.4+. If you aren't running\r\nElasticsearch 2.4+, yet. Please upgrade.\r\n\r\nThose wishing to experiment with this format before the next minor\r\nrelease can set `ES_EXPERIMENTAL_SPAN2=true` to use this style now.\r\nWhen set, writes will use the above scheme, but both the former and new\r\nindexes will be read.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f0eabc049aaedead7bfe73d6b79f30f9a55e825b": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.accept(List<Span> spans, Callback<Void> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getDependencies(long endTs, @Nullable Long lookback, Callback<List<DependencyLink>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getRawTrace(long traceIdHigh, long traceIdLow, Callback<List<Span>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.onSuccess(@Nullable List<String> traceIds)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getSpanNames(String serviceName, Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getServiceNames(Callback<List<String>> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java": [
                    "public static Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.builder(OkHttpClient client)",
                    "public AsyncSpanConsumer zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.asyncSpanConsumer()",
                    "public AsyncSpanStore zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.asyncSpanStore()",
                    "public CheckResult zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.check()",
                    "void zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.clear()"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java": [
                    "void zipkin.storage.elasticsearch.http.HttpBulkIndexer.execute(Callback<Void> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public Span zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/internal/client/HttpCall.java": [
                    "public void zipkin.storage.elasticsearch.http.internal.client.HttpCall<V>.onResponse(Call call, Response response)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/internal/client/SearchRequest.java": [
                    "public Filters zipkin.storage.elasticsearch.http.internal.client.SearchRequest.addTerm(String field, String value)"
                ]
            },
            "4f99f6390217dd4024da3784fcc9d786233a324c": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.accept(List<Span> spans, Callback<Void> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getDependencies(long endTs, @Nullable Long lookback, Callback<List<DependencyLink>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getRawTrace(long traceIdHigh, long traceIdLow, Callback<List<Span>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.onSuccess(@Nullable List<String> traceIds)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getSpanNames(String serviceName, Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getServiceNames(Callback<List<String>> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java": [
                    "public static Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.builder(OkHttpClient client)",
                    "public AsyncSpanConsumer zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.asyncSpanConsumer()",
                    "public AsyncSpanStore zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.asyncSpanStore()",
                    "public CheckResult zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.check()",
                    "void zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.clear()"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java": [
                    "void zipkin.storage.elasticsearch.http.HttpBulkIndexer.execute(Callback<Void> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public Span zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/internal/client/HttpCall.java": [
                    "public void zipkin.storage.elasticsearch.http.internal.client.HttpCall<V>.onResponse(Call call, Response response)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/internal/client/SearchRequest.java": [
                    "public Filters zipkin.storage.elasticsearch.http.internal.client.SearchRequest.addTerm(String field, String value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "acc688e066223d31e8a6aae9c3ea967a1ab82570",
        "previous_commit": "b295c3ab18eb2538f9144321d272601fe7d3dfba",
        "date": 1467352208,
        "releases": {
            "previous": "acc688e066223d31e8a6aae9c3ea967a1ab82570",
            "next": "acc688e066223d31e8a6aae9c3ea967a1ab82570"
        },
        "commit_message": "Replaces hand-written query logging with DataStax QueryLogger (#1156)\n\nHand-written query logging has resulted in bugs and also clutters the\r\ncodebase. This change replaces that with DataStax QueryLogger, which is\r\nenabled when the category \"com.datastax.driver.core.QueryLogger\" is at\r\ndebug or trace level. Trace level includes bound values.\r\n\r\nEx.\r\n\r\n```bash\r\n$ STORAGE_TYPE=cassandra java -jar zipkin-server/target/zipkin-server-*-exec.jar  --logging.level.zipkin=debug --logging.level.com.datastax.driver.core.QueryLogger=trace\r\n--snip--\r\n2016-06-30 15:28:05.742 TRACE 27669 --- [r2-nio-worker-1] c.d.driver.core.QueryLogger.NORMAL       : [cluster2] [localhost/127.0.0.1:9042] Query completed normally, took 10 ms: [4 bound values] INSERT INTO annotations_index (annotation,bucket,ts,trace_id) VALUES (:annotation,:bucket,:ts,:trace_id); [annotation:0x7a69706b696e2d7365727665723a4170706c69636174696f... [truncated output], bucket:9, ts:1467271680225, trace_id:3814895566661605459]\r\n```\r\n\r\nSee [Logging Query Latencies](http://docs.datastax.com/en/developer/java-driver/2.1/supplemental/manual/logging/#logging-query-latencies) for more details.\r\nFixes https://github.com/openzipkin/zipkin-java/issues/190",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "acc688e066223d31e8a6aae9c3ea967a1ab82570": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraDependenciesWriter.java": [
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraDependenciesWriter.storeDependencies(long epochDayMillis, ByteBuffer dependencies)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdByDuration(String serviceName, String spanName, long timestamp, long duration, long traceId)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdBySpanName(String serviceName, String spanName, long timestamp, long traceId)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeServiceName(String serviceName)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdByAnnotation(String annotationKey, long timestamp, long traceId)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeSpanName(String serviceName, String spanName)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdByServiceName(String serviceName, long timestamp, long traceId)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.storage.cassandra.CassandraSpanStore.getServiceNames()",
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsByAnnotation(String annotationKey, long endTs, long lookback, int limit)",
                    "ListenableFuture<List<DurationRow>> zipkin.storage.cassandra.CassandraSpanStore.oneBucketDurationQuery(QueryRequest request, int bucket, final long startTs, final long endTs)",
                    "ListenableFuture<Collection<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getSpansByTraceIds(Set<Long> traceIds, int limit)",
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsByServiceNames(List<String> serviceNames, long endTs, long lookback, int limit)",
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.cassandra.CassandraSpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsBySpanName(String serviceName, String spanName, long endTs, long lookback, int limit)",
                    "public ListenableFuture<List<String>> zipkin.storage.cassandra.CassandraSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/SessionFactory.java": [
                    "public Session zipkin.storage.cassandra.Default.create(CassandraStorage cassandra)"
                ]
            },
            "b295c3ab18eb2538f9144321d272601fe7d3dfba": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraDependenciesWriter.java": [
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraDependenciesWriter.storeDependencies(long epochDayMillis, ByteBuffer dependencies)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdByDuration(String serviceName, String spanName, long timestamp, long duration, long traceId)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdBySpanName(String serviceName, String spanName, long timestamp, long traceId)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeServiceName(String serviceName)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdByAnnotation(String annotationKey, long timestamp, long traceId)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeSpanName(String serviceName, String spanName)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdByServiceName(String serviceName, long timestamp, long traceId)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.storage.cassandra.CassandraSpanStore.getServiceNames()",
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsByAnnotation(String annotationKey, long endTs, long lookback, int limit)",
                    "ListenableFuture<List<DurationRow>> zipkin.storage.cassandra.CassandraSpanStore.oneBucketDurationQuery(QueryRequest request, int bucket, final long startTs, final long endTs)",
                    "ListenableFuture<Collection<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getSpansByTraceIds(Set<Long> traceIds, int limit)",
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsByServiceNames(List<String> serviceNames, long endTs, long lookback, int limit)",
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.cassandra.CassandraSpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsBySpanName(String serviceName, String spanName, long endTs, long lookback, int limit)",
                    "public ListenableFuture<List<String>> zipkin.storage.cassandra.CassandraSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/SessionFactory.java": [
                    "public Session zipkin.storage.cassandra.Default.create(CassandraStorage cassandra)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ee154b5d04aaddc5ef777e414a0b3ff3c87aae23",
        "previous_commit": "5c1d9eacbe3f397bf192209dbfd7af94e9d2108e",
        "date": 1464784289,
        "releases": {
            "previous": "ee154b5d04aaddc5ef777e414a0b3ff3c87aae23",
            "next": "ee154b5d04aaddc5ef777e414a0b3ff3c87aae23"
        },
        "commit_message": "Updates Cassandra schema to include default ttls and adds upgrade logic\n\nImprovements to the Cassandra storage\n - the schema now defines default TTL for each table\n - deprecates manually controlling span and index ttl\n - supports upgrading the schema\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ee154b5d04aaddc5ef777e414a0b3ff3c87aae23": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdByDuration(String serviceName, String spanName, long timestamp, long duration, long traceId)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeServiceName(String serviceName)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdBySpanName(String serviceName, String spanName, long timestamp, long traceId)",
                    "private String zipkin.storage.cassandra.CassandraSpanConsumer.debugInsertTraceIdBySpanDuration(int bucket, String serviceName, String spanName, long timestamp, long duration, long traceId)",
                    "private String zipkin.storage.cassandra.CassandraSpanConsumer.debugInsertSpanName(int bucket, String serviceName, String spanName)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdByAnnotation(String annotationKey, long timestamp, long traceId)",
                    "private String zipkin.storage.cassandra.CassandraSpanConsumer.debugInsertTraceIdByServiceName(int bucket, String serviceName, long timestamp, long traceId)",
                    "private String zipkin.storage.cassandra.CassandraSpanConsumer.debugInsertSpan(long traceId, long timestamp, String spanName, ByteBuffer span)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeSpanName(String serviceName, String spanName)",
                    "private String zipkin.storage.cassandra.CassandraSpanConsumer.debugInsertTraceIdByAnnotation(int bucket, String annotationKey, long timestamp, long traceId)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdByServiceName(String serviceName, long timestamp, long traceId)",
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsByDuration(QueryRequest request)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/Schema.java": [
                    "static void zipkin.storage.cassandra.Schema.applyCqlFile(String keyspace, Session session, String resource)",
                    "static void zipkin.storage.cassandra.Schema.ensureExists(String keyspace, Session session)"
                ]
            },
            "5c1d9eacbe3f397bf192209dbfd7af94e9d2108e": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "private String zipkin.storage.cassandra.CassandraSpanConsumer.debugInsertTraceIdBySpanDuration(int bucket, String serviceName, String spanName, long timestamp, long duration, long traceId, int ttl)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdBySpanName(String serviceName, String spanName, long timestamp, long traceId, int ttl)",
                    "private String zipkin.storage.cassandra.CassandraSpanConsumer.debugInsertSpanName(int bucket, String serviceName, String spanName, int ttl)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdByAnnotation(String annotationKey, long timestamp, long traceId, int ttl)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdByDuration(String serviceName, String spanName, long timestamp, long duration, long traceId, int ttl)",
                    "private String zipkin.storage.cassandra.CassandraSpanConsumer.debugInsertTraceIdByAnnotation(int bucket, String annotationKey, long timestamp, long traceId, int ttl)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdByServiceName(String serviceName, long timestamp, long traceId, int ttl)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeSpanName(String serviceName, String spanName, int ttl)",
                    "private String zipkin.storage.cassandra.CassandraSpanConsumer.debugInsertTraceIdByServiceName(int bucket, String serviceName, long timestamp, long traceId, int ttl)",
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> spans)",
                    "private String zipkin.storage.cassandra.CassandraSpanConsumer.debugInsertSpan(long traceId, long timestamp, String spanName, ByteBuffer span, int ttl)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeServiceName(String serviceName, int ttl)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsByDuration(QueryRequest request)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/Schema.java": [
                    "static void zipkin.storage.cassandra.Schema.ensureExists(String keyspace, Session session)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "797f36d0ab169173d43de5de1cb7e7bd98dcd39a",
        "previous_commit": "844c43b9cde02b84583f0e3641fc20e670a3b25f",
        "date": 1569928422,
        "releases": {
            "previous": "797f36d0ab169173d43de5de1cb7e7bd98dcd39a",
            "next": "797f36d0ab169173d43de5de1cb7e7bd98dcd39a"
        },
        "commit_message": "Ensures index templates are verified before passing health. (#2827)\n\nCurrently, we pass health checks which can hide errors provisioning\r\nindex templates, and also worsen template provisioning race conditions.\r\n\r\nThis makes sure index templates are at least checked once per startup.\r\n\r\nThis also refactors the code so that someone can later do offline\r\ntemplate installation.\r\n\r\nFixes #2825",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "797f36d0ab169173d43de5de1cb7e7bd98dcd39a": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchAutocompleteTags.java": [
                    "public Call<List<String>> zipkin2.elasticsearch.ElasticsearchAutocompleteTags.getValues(String key)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.addAutocompleteValues(long indexTimestamp, Span span)",
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.add(long indexTimestamp, Span span)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<String>> zipkin2.elasticsearch.ElasticsearchSpanStore.getServiceNames()",
                    "Call<List<String>> zipkin2.elasticsearch.ElasticsearchSpanStore.aggregatedFieldByServiceName(String serviceName, String term)",
                    "public Call<List<List<Span>>> zipkin2.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)",
                    "public Call<List<DependencyLink>> zipkin2.elasticsearch.ElasticsearchSpanStore.getDependencies(long endTs, long lookback)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public CheckResult zipkin2.elasticsearch.ElasticsearchStorage.check()",
                    "public void zipkin2.elasticsearch.ElasticsearchStorage.clear()",
                    "IndexTemplates zipkin2.elasticsearch.ElasticsearchStorage.ensureIndexTemplates()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.dependencyTemplate(float version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.autocompleteTemplate(float version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.indexProperties(float version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.indexPattern(String type, float version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.spanIndexTemplate(float version)"
                ]
            },
            "844c43b9cde02b84583f0e3641fc20e670a3b25f": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchAutocompleteTags.java": [
                    "public Call<List<String>> zipkin2.elasticsearch.ElasticsearchAutocompleteTags.getValues(String key)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.addAutocompleteValues(long indexTimestamp, Span span)",
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.add(long indexTimestamp, Span span)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<String>> zipkin2.elasticsearch.ElasticsearchSpanStore.getServiceNames()",
                    "Call<List<String>> zipkin2.elasticsearch.ElasticsearchSpanStore.aggregatedFieldByServiceName(String serviceName, String term)",
                    "public Call<List<List<Span>>> zipkin2.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)",
                    "public Call<List<DependencyLink>> zipkin2.elasticsearch.ElasticsearchSpanStore.getDependencies(long endTs, long lookback)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public CheckResult zipkin2.elasticsearch.ElasticsearchStorage.check()",
                    "public void zipkin2.elasticsearch.ElasticsearchStorage.clear()",
                    "IndexTemplates zipkin2.elasticsearch.ElasticsearchStorage.ensureIndexTemplates()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.dependencyTemplate(float version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.autocompleteTemplate(float version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.indexProperties(float version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.indexPattern(String type, float version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.spanIndexTemplate(float version)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8aeea3aef9d9f5ea7dea58e7df66a025070de47f",
        "previous_commit": "f895b832db6f9658f05edc084d6afa55dfaf34ac",
        "date": 1505032775,
        "releases": {
            "previous": "8aeea3aef9d9f5ea7dea58e7df66a025070de47f",
            "next": "8aeea3aef9d9f5ea7dea58e7df66a025070de47f"
        },
        "commit_message": "Adds v2 StorageComponent and allows the server to use it directly (#1729)\n\nThis adds a type for the v2 StorageComponent so that future storage\r\nimplementations can be made without a compile dependency on the v1 jar.\r\n\r\nThis is internal until everything is verified.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8aeea3aef9d9f5ea7dea58e7df66a025070de47f": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public ZipkinRule zipkin.junit.ZipkinRule.storeSpans(List<Span> spans)",
                    "public List<List<Span>> zipkin.junit.ZipkinRule.getTraces()"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV2.java": [
                    "public String zipkin.server.ZipkinQueryApiV2.getTrace(@PathVariable String traceIdHex, WebRequest request)",
                    "public ResponseEntity<List<String>> zipkin.server.ZipkinQueryApiV2.getServiceNames()"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public int zipkin.internal.JsonCodec.sizeInBytes(Endpoint v)",
                    "public void zipkin.internal.JsonCodec.write(Endpoint v, Buffer b)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2Collector.java": [
                    "protected void zipkin.internal.V2Collector.record(List<Span> sampled, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanConverter.java": [
                    "Span.Builder zipkin.internal.V2SpanConverter.forEndpoint(zipkin.Span source, @Nullable zipkin.Endpoint e)",
                    "void zipkin.internal.V2SpanConverter.processBinaryAnnotations(zipkin.Span source)",
                    "void zipkin.internal.V2SpanConverter.processAnnotations(zipkin.Span source)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2StorageComponent.java": [
                    "public zipkin.storage.SpanStore zipkin.internal.V2StorageComponent.spanStore()",
                    "public final AsyncSpanConsumer zipkin.internal.V2StorageComponent.asyncSpanConsumer()",
                    "public AsyncSpanStore zipkin.internal.V2StorageComponent.asyncSpanStore()"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/Endpoint.java": [
                    "private static boolean zipkin.internal.v2.Endpoint.isValidIpV4Word(CharSequence word, int from, int toExclusive)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/internal/V1SpanWriter.java": [
                    "static byte[] zipkin.internal.v2.internal.V1SpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)"
                ]
            },
            "f895b832db6f9658f05edc084d6afa55dfaf34ac": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public ZipkinRule zipkin.junit.ZipkinRule.storeSpans(List<Span> spans)",
                    "public List<List<Span>> zipkin.junit.ZipkinRule.getTraces()"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV2.java": [
                    "public String zipkin.server.ZipkinQueryApiV2.getTrace(@PathVariable String traceIdHex, WebRequest request)",
                    "public ResponseEntity<List<String>> zipkin.server.ZipkinQueryApiV2.getServiceNames()"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public int zipkin.internal.JsonCodec.sizeInBytes(Endpoint v)",
                    "public void zipkin.internal.JsonCodec.write(Endpoint v, Buffer b)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2Collector.java": [
                    "protected void zipkin.internal.V2Collector.record(List<Span> sampled, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanConverter.java": [
                    "Span.Builder zipkin.internal.V2SpanConverter.forEndpoint(zipkin.Span source, @Nullable zipkin.Endpoint e)",
                    "void zipkin.internal.V2SpanConverter.processBinaryAnnotations(zipkin.Span source)",
                    "void zipkin.internal.V2SpanConverter.processAnnotations(zipkin.Span source)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2StorageComponent.java": [
                    "public zipkin.storage.SpanStore zipkin.internal.V2StorageComponent.spanStore()",
                    "public final AsyncSpanConsumer zipkin.internal.V2StorageComponent.asyncSpanConsumer()",
                    "public AsyncSpanStore zipkin.internal.V2StorageComponent.asyncSpanStore()",
                    "protected AsyncSpanStore zipkin.internal.V2StorageComponent.legacyAsyncSpanStore()"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/Endpoint.java": [
                    "private static boolean zipkin.internal.v2.Endpoint.isValidIpV4Word(CharSequence word, int from, int toExclusive)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/internal/V1SpanWriter.java": [
                    "static byte[] zipkin.internal.v2.internal.V1SpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2755987aa31699bf02d9e6e0366453092ba4a944",
        "previous_commit": "d3c4308368c483fb6e0f0b799517881720d2e7e8",
        "date": 1468371123,
        "releases": {
            "previous": "2755987aa31699bf02d9e6e0366453092ba4a944",
            "next": "2755987aa31699bf02d9e6e0366453092ba4a944"
        },
        "commit_message": "Adds Endpoint.ipv6 field with supporting changes to MySQL and UI\n\nThis adds `Endpoint.ipv6` as a fixed-width byte array (16 bytes). This\nformalizes `Endpoint.ipv4 == 0` implying there's no ipv4 address.\n\nIn thrift, this remains a byte array (String) at field 4.\nIn json, this is normal string formatting.\n * normal java utilities are used for codec (Inet6Address)\n\nIn the UI, the ipv6 address is preferred and bracketed when present.\nEx. [2001:db8:0:0:0:0:0:c002]:8080\n\nIn MySQL, this is mapped to a `BINARY(16)` field named\n`zipkin_annotations.endpoint_ipv6`. When this column is missing a\nwarning like below is printed:\n\n```\nJul 11, 2016 4:08:53 PM zipkin.storage.mysql.HasIpv6 compute\nWARNING: zipkin_annotations.ipv6 doesn't exist, so Endpoint.ipv6 is not supported. Execute: alter table zipkin_annotations add `endpoint_ipv6` BINARY(16)\n```\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2755987aa31699bf02d9e6e0366453092ba4a944": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanConsumer.java": [
                    "public void zipkin.storage.mysql.MySQLSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "List<List<Span>> zipkin.storage.mysql.MySQLSpanStore.getTraces(@Nullable QueryRequest request, @Nullable Long traceId, boolean raw)",
                    "private Endpoint zipkin.storage.mysql.MySQLSpanStore.endpoint(Record a)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLStorage.java": [
                    "void zipkin.storage.mysql.MySQLStorage.clear()"
                ],
                "zipkin/src/main/java/zipkin/Endpoint.java": [
                    "public static Endpoint zipkin.Endpoint.create(String serviceName, int ipv4, int port)",
                    "public boolean zipkin.Endpoint.equals(Object o)",
                    "public static Endpoint zipkin.Endpoint.create(String serviceName, int ipv4)",
                    "public int zipkin.Endpoint.hashCode()",
                    "public Endpoint zipkin.Endpoint.build()"
                ],
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static Span zipkin.internal.CorrectForClockSkew.adjustTimestamps(Span span, ClockSkew skew)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public void zipkin.internal.JsonCodec.toJson(JsonWriter writer, Endpoint value)",
                    "public Endpoint zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public Endpoint zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public void zipkin.internal.ThriftCodec.write(Endpoint value, Buffer buffer)"
                ]
            },
            "d3c4308368c483fb6e0f0b799517881720d2e7e8": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanConsumer.java": [
                    "public void zipkin.storage.mysql.MySQLSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "List<List<Span>> zipkin.storage.mysql.MySQLSpanStore.getTraces(@Nullable QueryRequest request, @Nullable Long traceId, boolean raw)",
                    "static Endpoint zipkin.storage.mysql.MySQLSpanStore.endpoint(Record a)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLStorage.java": [
                    "void zipkin.storage.mysql.MySQLStorage.clear()"
                ],
                "zipkin/src/main/java/zipkin/Endpoint.java": [
                    "public static Endpoint zipkin.Endpoint.create(String serviceName, int ipv4, int port)",
                    "public boolean zipkin.Endpoint.equals(Object o)",
                    "public static Endpoint zipkin.Endpoint.create(String serviceName, int ipv4)",
                    "public int zipkin.Endpoint.hashCode()",
                    "public Endpoint zipkin.Endpoint.build()"
                ],
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static Span zipkin.internal.CorrectForClockSkew.adjustTimestamps(Span span, ClockSkew skew)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public void zipkin.internal.JsonCodec.toJson(JsonWriter writer, Endpoint value)",
                    "public Endpoint zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public Endpoint zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public void zipkin.internal.ThriftCodec.write(Endpoint value, Buffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f895b832db6f9658f05edc084d6afa55dfaf34ac",
        "previous_commit": "2fe5142e08b4d74bd38da4ff5837e969777755da",
        "date": 1504936524,
        "releases": {
            "previous": "f895b832db6f9658f05edc084d6afa55dfaf34ac",
            "next": "f895b832db6f9658f05edc084d6afa55dfaf34ac"
        },
        "commit_message": "Teaches the v2 tree how to encode v1 format (#1728)\n\nThe zipkin v2 library is intended to be used by itself in tracers. Since\r\ntracers cannot control the span transport, it likely will need to write\r\nthe old (historical) json format for at least months. To avoid requiring\r\ndual versions of jars to accomplish this, we add an encoder that writes\r\njson v1 format given a v2 span.\r\n\r\nNote: we don't decode as the library problem is easier to manage on the\r\nserver side. For example, zipkin-server will need both versions of the\r\njars for things like collection for a while.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f895b832db6f9658f05edc084d6afa55dfaf34ac": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "MockResponse zipkin.junit.ZipkinDispatcher.queryV2(HttpUrl url)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV2.java": [
                    "public String zipkin.server.ZipkinQueryApiV2.getTrace(@PathVariable String traceIdHex, WebRequest request)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "static byte[] zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.prefixWithTimestampMillisAndQuery(Span span, @Nullable Long timestampMillis)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "public void zipkin.collector.Collector.acceptSpans(byte[] serializedSpans, SpanDecoder decoder, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2JsonSpanDecoder.java": [
                    "public List<zipkin.Span> zipkin.internal.V2JsonSpanDecoder.readSpans(byte[] span)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/Span.java": [
                    "public String zipkin.internal.v2.Span.toString()"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/codec/SpanBytesCodec.java": [
                    "public int sizeInBytes(Span input)",
                    "public byte[] encodeNestedList(List<List<Span>> traces)",
                    "public byte[] encodeList(List<Span> input)",
                    "public byte[] encode(Span input)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/codec/SpanBytesEncoder.java": [
                    "public int sizeInBytes(Span input)",
                    "public byte[] encodeList(List<Span> spans)",
                    "public byte[] encode(Span span)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/internal/JsonEscaper.java": [
                    "public static String zipkin.internal.v2.internal.JsonEscaper.jsonEscape(String v)"
                ]
            },
            "2fe5142e08b4d74bd38da4ff5837e969777755da": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "MockResponse zipkin.junit.ZipkinDispatcher.queryV2(HttpUrl url)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV2.java": [
                    "public String zipkin.server.ZipkinQueryApiV2.getTrace(@PathVariable String traceIdHex, WebRequest request)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "static byte[] zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.prefixWithTimestampMillisAndQuery(Span span, @Nullable Long timestampMillis)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "public void zipkin.collector.Collector.acceptSpans(byte[] serializedSpans, SpanDecoder decoder, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2JsonSpanDecoder.java": [
                    "public List<zipkin.Span> zipkin.internal.V2JsonSpanDecoder.readSpans(byte[] span)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/Span.java": [
                    "public String zipkin.internal.v2.Span.toString()"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/codec/SpanBytesCodec.java": [
                    "public int sizeInBytes(Span input)",
                    "public byte[] encodeNestedList(List<List<Span>> traces)",
                    "public byte[] encodeList(List<Span> input)",
                    "public byte[] encode(Span input)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/codec/SpanBytesEncoder.java": [
                    "public int sizeInBytes(Span input)",
                    "public byte[] encodeList(List<Span> spans)",
                    "public byte[] encode(Span span)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/internal/JsonEscaper.java": [
                    "public static String zipkin.internal.v2.internal.JsonEscaper.jsonEscape(String v)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3373bcd2934342755790770b674b41b286675558",
        "previous_commit": "cc34b20d583962441beec84a459334dbdc5a481c",
        "date": 1523971145,
        "releases": {
            "previous": "3373bcd2934342755790770b674b41b286675558",
            "next": "3373bcd2934342755790770b674b41b286675558"
        },
        "commit_message": "Adds Endpoint.portAsInt to avoid allocations\n\nThis adds and uses Endpoint.portAsInt accessors to prevent routine\nobject allocation.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3373bcd2934342755790770b674b41b286675558": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/JsonAdapters.java": [
                    "public Endpoint zipkin2.elasticsearch.JsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/Endpoint.java": [
                    "public zipkin2.Endpoint zipkin.Endpoint.toV2()"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public int zipkin.internal.JsonCodec.sizeInBytes(Endpoint v)",
                    "public void zipkin.internal.JsonCodec.write(Endpoint v, Buffer b)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanConverter.java": [
                    "public static zipkin.Endpoint zipkin.internal.V2SpanConverter.toEndpoint(Endpoint input)"
                ],
                "zipkin2/src/main/java/zipkin2/Endpoint.java": [
                    "public boolean zipkin2.Endpoint.equals(Object o)",
                    "public int zipkin2.Endpoint.hashCode()",
                    "public Builder zipkin2.Endpoint.port(@Nullable Integer port)",
                    "public Integer zipkin2.Endpoint.port()"
                ],
                "zipkin2/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.duration(@Nullable Long duration)",
                    "public Builder zipkin2.Span.timestamp(@Nullable Long timestamp)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V2SpanWriter.java": [
                    "static int zipkin2.internal.V2SpanWriter.endpointSizeInBytes(Endpoint value)",
                    "static void zipkin2.internal.V2SpanWriter.writeEndpoint(Endpoint value, Buffer b)"
                ]
            },
            "cc34b20d583962441beec84a459334dbdc5a481c": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/JsonAdapters.java": [
                    "public Endpoint zipkin2.elasticsearch.JsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/Endpoint.java": [
                    "public zipkin2.Endpoint zipkin.Endpoint.toV2()"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public int zipkin.internal.JsonCodec.sizeInBytes(Endpoint v)",
                    "public void zipkin.internal.JsonCodec.write(Endpoint v, Buffer b)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanConverter.java": [
                    "public static zipkin.Endpoint zipkin.internal.V2SpanConverter.toEndpoint(Endpoint input)"
                ],
                "zipkin2/src/main/java/zipkin2/Endpoint.java": [
                    "public boolean zipkin2.Endpoint.equals(Object o)",
                    "public int zipkin2.Endpoint.hashCode()",
                    "public Builder zipkin2.Endpoint.port(@Nullable Integer port)",
                    "public Integer zipkin2.Endpoint.port()"
                ],
                "zipkin2/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.duration(@Nullable Long duration)",
                    "public Builder zipkin2.Span.timestamp(@Nullable Long timestamp)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V2SpanWriter.java": [
                    "static int zipkin2.internal.V2SpanWriter.endpointSizeInBytes(Endpoint value)",
                    "static void zipkin2.internal.V2SpanWriter.writeEndpoint(Endpoint value, Buffer b)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b711e805cc55be789509c62ed38060800569b321",
        "previous_commit": "7adc2897804891b75e9c1f98cd7defaa529d3702",
        "date": 1475595192,
        "releases": {
            "previous": "b711e805cc55be789509c62ed38060800569b321",
            "next": "b711e805cc55be789509c62ed38060800569b321"
        },
        "commit_message": "Rewrites elasticsearch-http as an OkHttp client (#1320)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b711e805cc55be789509c62ed38060800569b321": {
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/ElasticsearchDomainEndpoint.java": [
                    "protected List<String> zipkin.autoconfigure.storage.elasticsearch.aws.ElasticsearchDomainEndpoint.compute()"
                ],
                "zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchHttpStorageAutoConfiguration.java": [
                    "public boolean zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageAutoConfiguration.matches(ConditionContext condition, AnnotatedTypeMetadata md)"
                ],
                "zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/ZipkinElasticsearchStorageAutoConfiguration.java": [
                    "StorageComponent zipkin.autoconfigure.storage.elasticsearch.ZipkinElasticsearchStorageAutoConfiguration.storage(ZipkinElasticsearchStorageProperties elasticsearch)"
                ],
                "zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ZipkinElasticsearchStorageProperties zipkin.autoconfigure.storage.elasticsearch.ZipkinElasticsearchStorageProperties.setHosts(List<String> hosts)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "public void zipkin.storage.elasticsearch.http.HttpClient.close()",
                    "protected void zipkin.storage.elasticsearch.http.HttpClient.ensureTemplate(String name, String indexTemplate)",
                    "protected ListenableFuture<List<String>> zipkin.storage.elasticsearch.http.HttpClient.collectBucketKeys(String[] indices, QueryBuilder query, AbstractAggregationBuilder... aggregations)",
                    "protected ListenableFuture<List<Span>> zipkin.storage.elasticsearch.http.HttpClient.findSpans(String[] indices, QueryBuilder query)",
                    "protected BulkSpanIndexer zipkin.storage.elasticsearch.http.HttpClient.bulkSpanIndexer()",
                    "protected ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.http.HttpClient.findDependencies(String[] indices)",
                    "protected void zipkin.storage.elasticsearch.http.HttpClient.ensureClusterReady(String catchAll)",
                    "protected void zipkin.storage.elasticsearch.http.HttpClient.clear(String index)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/InternalElasticsearchClient.java": [
                    "public final void zipkin.storage.elasticsearch.InternalElasticsearchClient.add(String index, Span span, Long timestampMillis)"
                ]
            },
            "7adc2897804891b75e9c1f98cd7defaa529d3702": {
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/ElasticsearchDomainEndpoint.java": [
                    "protected List<String> zipkin.autoconfigure.storage.elasticsearch.aws.ElasticsearchDomainEndpoint.compute()"
                ],
                "zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchHttpStorageAutoConfiguration.java": [
                    "public boolean zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageAutoConfiguration.matches(ConditionContext condition, AnnotatedTypeMetadata md)"
                ],
                "zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/ZipkinElasticsearchStorageAutoConfiguration.java": [
                    "StorageComponent zipkin.autoconfigure.storage.elasticsearch.ZipkinElasticsearchStorageAutoConfiguration.storage(ZipkinElasticsearchStorageProperties elasticsearch)"
                ],
                "zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ZipkinElasticsearchStorageProperties zipkin.autoconfigure.storage.elasticsearch.ZipkinElasticsearchStorageProperties.setHosts(List<String> hosts)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "public void zipkin.storage.elasticsearch.http.HttpClient.clear(String index)",
                    "public void zipkin.storage.elasticsearch.http.HttpClient.close()",
                    "public ListenableFuture<List<Span>> zipkin.storage.elasticsearch.http.HttpClient.findSpans(String[] indices, QueryBuilder query)",
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.http.HttpClient.findDependencies(String[] indices)",
                    "protected BulkSpanIndexer zipkin.storage.elasticsearch.http.HttpClient.bulkSpanIndexer()",
                    "public void zipkin.storage.elasticsearch.http.HttpClient.ensureTemplate(String name, String indexTemplate)",
                    "protected void zipkin.storage.elasticsearch.http.HttpClient.ensureClusterReady(String catchAll)",
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.http.HttpClient.collectBucketKeys(String[] indices, QueryBuilder query, AbstractAggregationBuilder... aggregations)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/InternalElasticsearchClient.java": [
                    "public final void zipkin.storage.elasticsearch.InternalElasticsearchClient.add(String index, Span span, Long timestampMillis)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "dd9046985e21e2b34e229a0eda326bf403607232",
        "previous_commit": "ad5fa1c3a18e89e9da3cf21e0f081907b76b79f5",
        "date": 1459258055,
        "releases": {
            "previous": "dd9046985e21e2b34e229a0eda326bf403607232",
            "next": "dd9046985e21e2b34e229a0eda326bf403607232"
        },
        "commit_message": "Makes AsyncSpanConsumer the authoritative type for receiving spans\n\nBefore, `accept(List<Span>)` was on `SpanStore`, a blocking interface.\nThis helped for a while, but it is clear storage commands should be\nasync, particularly for reasons listed in #133.\n\nThis change removes writes from `SpanStore` and re-organizes the code\naround `AsyncSpanConsumer`. This is the first refactor on the way\ntowards a component model #135.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "dd9046985e21e2b34e229a0eda326bf403607232": {
                "interop/src/main/java/zipkin/interop/AsyncToScalaSpanStoreAdapter.java": [
                    "public Future<BoxedUnit> zipkin.interop.AsyncToScalaSpanStoreAdapter.apply(Seq<Span> input)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "CassandraSpanStore zipkin.server.ZipkinServerConfiguration.cassandraSpanStore()",
                    "SpanStore zipkin.server.ZipkinServerConfiguration.spanStore()",
                    "public Object zipkin.server.ZipkinServerConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/SpanStoreSpanCollector.java": [
                    "public void zipkin.server.brave.SpanStoreSpanCollector.flush()"
                ],
                "zipkin-spanstores/guava/src/main/java/zipkin/spanstore/guava/GuavaSpanStoreAdapter.java": [
                    "public ListenableFuture<List<Span>> zipkin.spanstore.guava.GuavaSpanStoreAdapter.getRawTrace(long traceId)",
                    "public ListenableFuture<Void> zipkin.spanstore.guava.GuavaSpanStoreAdapter.accept(List<Span> spans)",
                    "public ListenableFuture<List<Span>> zipkin.spanstore.guava.GuavaSpanStoreAdapter.getTrace(long id)",
                    "public ListenableFuture<List<String>> zipkin.spanstore.guava.GuavaSpanStoreAdapter.getSpanNames(String serviceName)",
                    "public ListenableFuture<List<DependencyLink>> zipkin.spanstore.guava.GuavaSpanStoreAdapter.getDependencies(long endTs, @Nullable Long lookback)",
                    "public ListenableFuture<List<String>> zipkin.spanstore.guava.GuavaSpanStoreAdapter.getServiceNames()",
                    "public ListenableFuture<List<List<Span>>> zipkin.spanstore.guava.GuavaSpanStoreAdapter.getTraces(QueryRequest request)"
                ],
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.kafka.KafkaStreamProcessor.run()"
                ]
            },
            "ad5fa1c3a18e89e9da3cf21e0f081907b76b79f5": {
                "interop/src/main/java/zipkin/interop/AsyncToScalaSpanStoreAdapter.java": [
                    "public Future<BoxedUnit> zipkin.interop.AsyncToScalaSpanStoreAdapter.apply(Seq<Span> input)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "SpanStore zipkin.server.ZipkinServerConfiguration.cassandraSpanStore(ZipkinCassandraProperties cassandra)",
                    "SpanStore zipkin.server.ZipkinServerConfiguration.spanStore()",
                    "public Object zipkin.server.ZipkinServerConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/SpanStoreSpanCollector.java": [
                    "public void zipkin.server.brave.SpanStoreSpanCollector.flush()"
                ],
                "zipkin-spanstores/guava/src/main/java/zipkin/spanstore/guava/GuavaSpanStoreAdapter.java": [
                    "public ListenableFuture<List<Span>> zipkin.spanstore.guava.GuavaSpanStoreAdapter.getRawTrace(long traceId)",
                    "public ListenableFuture<Void> zipkin.spanstore.guava.GuavaSpanStoreAdapter.accept(List<Span> spans)",
                    "public ListenableFuture<List<Span>> zipkin.spanstore.guava.GuavaSpanStoreAdapter.getTrace(long id)",
                    "public ListenableFuture<List<String>> zipkin.spanstore.guava.GuavaSpanStoreAdapter.getSpanNames(String serviceName)",
                    "public ListenableFuture<List<DependencyLink>> zipkin.spanstore.guava.GuavaSpanStoreAdapter.getDependencies(long endTs, @Nullable Long lookback)",
                    "public ListenableFuture<List<String>> zipkin.spanstore.guava.GuavaSpanStoreAdapter.getServiceNames()",
                    "public ListenableFuture<List<List<Span>>> zipkin.spanstore.guava.GuavaSpanStoreAdapter.getTraces(QueryRequest request)"
                ],
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.kafka.KafkaStreamProcessor.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f11f2c4af9105190c6ca5e961df54cf226301b0e",
        "previous_commit": "92a4db56be45775de5d34c81c1a97c895ce7cfe7",
        "date": 1462242606,
        "releases": {
            "previous": "f11f2c4af9105190c6ca5e961df54cf226301b0e",
            "next": "f11f2c4af9105190c6ca5e961df54cf226301b0e"
        },
        "commit_message": "Refactors Cassandra codebase so as to only depend on Session\n\nThis is a first stab of code cleaning, mostly refactoring state around\nthe Cassandra connection used and removing functional complexity.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f11f2c4af9105190c6ca5e961df54cf226301b0e": {
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.cassandra.CassandraSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.cassandra.CassandraSpanStore.getServiceNames()",
                    "public ListenableFuture<List<List<Span>>> zipkin.cassandra.CassandraSpanStore.apply(Set<Long> traceIds)",
                    "public String zipkin.cassandra.CassandraSpanStore.toString()",
                    "public ListenableFuture<List<DependencyLink>> zipkin.cassandra.CassandraSpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "public ListenableFuture<List<List<Span>>> zipkin.cassandra.CassandraSpanStore.getTraces(QueryRequest request)",
                    "public ListenableFuture<List<Span>> zipkin.cassandra.CassandraSpanStore.getRawTrace(long traceId)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraStorage.java": [
                    "protected CassandraSpanStore zipkin.cassandra.CassandraStorage.computeGuavaSpanStore()",
                    "public void zipkin.cassandra.CassandraStorage.close()",
                    "protected CassandraSpanConsumer zipkin.cassandra.CassandraStorage.computeGuavaSpanConsumer()",
                    "void zipkin.cassandra.CassandraStorage.clear()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraUtil.java": [
                    "static List<String> zipkin.cassandra.CassandraUtil.annotationKeys(Span span)",
                    "static List<String> zipkin.cassandra.CassandraUtil.annotationKeys(QueryRequest request)"
                ]
            },
            "92a4db56be45775de5d34c81c1a97c895ce7cfe7": {
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.cassandra.CassandraSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.cassandra.CassandraSpanStore.getServiceNames()",
                    "public ListenableFuture<List<List<Span>>> zipkin.cassandra.CassandraSpanStore.apply(Set<Long> traceIds)",
                    "public String zipkin.cassandra.CassandraSpanStore.toString()",
                    "public ListenableFuture<List<DependencyLink>> zipkin.cassandra.CassandraSpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "public ListenableFuture<List<List<Span>>> zipkin.cassandra.CassandraSpanStore.getTraces(QueryRequest request)",
                    "public ListenableFuture<List<Span>> zipkin.cassandra.CassandraSpanStore.getRawTrace(long traceId)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraStorage.java": [
                    "protected CassandraSpanStore zipkin.cassandra.CassandraStorage.computeGuavaSpanStore()",
                    "public void zipkin.cassandra.CassandraStorage.close()",
                    "protected CassandraSpanConsumer zipkin.cassandra.CassandraStorage.computeGuavaSpanConsumer()",
                    "void zipkin.cassandra.CassandraStorage.clear()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraUtil.java": [
                    "static List<ByteBuffer> zipkin.cassandra.CassandraUtil.annotationKeys(QueryRequest request)",
                    "static List<ByteBuffer> zipkin.cassandra.CassandraUtil.annotationKeys(Span span)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8e4ada890c1b4f0f21babaf1a2315af128aeb4f4",
        "previous_commit": "4a2df5a324cfd227c7f1f9339e39af49882717f8",
        "date": 1546839611,
        "releases": {
            "previous": "8e4ada890c1b4f0f21babaf1a2315af128aeb4f4",
            "next": "8e4ada890c1b4f0f21babaf1a2315af128aeb4f4"
        },
        "commit_message": "Adds delay limiter for autocomplete tags (#2341)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8e4ada890c1b4f0f21babaf1a2315af128aeb4f4": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public static Builder zipkin2.storage.cassandra.CassandraStorage.newBuilder()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/DeduplicatingCall.java": [
                    "public final Call<ResultSet> zipkin2.storage.cassandra.internal.call.DeduplicatingCall<I>.create(I input)",
                    "protected ResultSet zipkin2.storage.cassandra.internal.call.DeduplicatingCall<I>.doExecute()",
                    "protected void zipkin2.storage.cassandra.internal.call.DeduplicatingCall<I>.doEnqueue(Callback<ResultSet> callback)",
                    "protected void zipkin2.storage.cassandra.internal.call.DeduplicatingCall<I>.doCancel()",
                    "public void zipkin2.storage.cassandra.internal.call.DeduplicatingCall<I>.onError(Throwable t)",
                    "public final void zipkin2.storage.cassandra.internal.call.DeduplicatingCall<I>.clear()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "static byte[] zipkin2.elasticsearch.ElasticsearchSpanConsumer.prefixWithTimestampMillisAndQuery(Span span, long timestampMillis)",
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.add(long indexTimestamp, Span span, long timestampMillis)",
                    "public Call<Void> zipkin2.elasticsearch.ElasticsearchSpanConsumer.accept(List<Span> spans)",
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.indexSpans(BulkSpanIndexer indexer, List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public static Builder zipkin2.elasticsearch.ElasticsearchStorage.newBuilder(OkHttpClient client)"
                ]
            },
            "4a2df5a324cfd227c7f1f9339e39af49882717f8": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public static Builder zipkin2.storage.cassandra.CassandraStorage.newBuilder()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/DeduplicatingCall.java": [
                    "public final Call<ResultSet> zipkin2.storage.cassandra.internal.call.DeduplicatingCall<I>.create(I input)",
                    "protected ResultSet zipkin2.storage.cassandra.internal.call.DeduplicatingCall<I>.doExecute()",
                    "protected void zipkin2.storage.cassandra.internal.call.DeduplicatingCall<I>.doEnqueue(Callback<ResultSet> callback)",
                    "protected void zipkin2.storage.cassandra.internal.call.DeduplicatingCall<I>.doCancel()",
                    "public void zipkin2.storage.cassandra.internal.call.DeduplicatingCall<I>.onError(Throwable t)",
                    "public final void zipkin2.storage.cassandra.internal.call.DeduplicatingCall<I>.clear()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "static byte[] zipkin2.elasticsearch.ElasticsearchSpanConsumer.prefixWithTimestampMillisAndQuery(Span span, long timestampMillis)",
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.add(long indexTimestamp, Span span, long timestampMillis)",
                    "public Call<Void> zipkin2.elasticsearch.ElasticsearchSpanConsumer.accept(List<Span> spans)",
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.indexSpans(BulkSpanIndexer indexer, List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public static Builder zipkin2.elasticsearch.ElasticsearchStorage.newBuilder(OkHttpClient client)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3ad789741688699a55a4a9404c851c8976ef6383",
        "previous_commit": "cac1ace2c6e1d4e998a290bb6ae7a07da7025063",
        "date": 1510052080,
        "releases": {
            "previous": "3ad789741688699a55a4a9404c851c8976ef6383",
            "next": "3ad789741688699a55a4a9404c851c8976ef6383"
        },
        "commit_message": "Bumps versions, notably kafka and spring-boot\n\nAlso addresses error-prone warnings\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3ad789741688699a55a4a9404c851c8976ef6383": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java": [
                    "void zipkin.storage.cassandra.CassandraStorage.clear()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/SessionFactory.java": [
                    "static List<InetSocketAddress> zipkin.storage.cassandra.Default.parseContactPoints(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/DefaultSessionFactory.java": [
                    "static List<InetSocketAddress> zipkin.storage.cassandra3.DefaultSessionFactory.parseContactPoints(Cassandra3Storage cassandra)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Collection<zipkin.Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/GroupByTraceId.java": [
                    "public static List<List<Span>> zipkin.internal.GroupByTraceId.apply(Collection<Span> input, boolean strictTraceId, boolean adjust)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public static <T> List<T> readList(JsonReaderAdapter<T> adapter, byte[] bytes)",
                    "public List<Span> zipkin.internal.SpanListReader.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/internal/MergeById.java": [
                    "public static List<Span> zipkin.internal.MergeById.apply(Iterable<Span> spans)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static @Nullable <T> T zipkin2.internal.JsonCodec.readOne(JsonReaderAdapter<T> adapter, byte[] bytes)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/Node.java": [
                    "public Node<V> zipkin2.internal.Node<V>.addChild(Node<V> child)"
                ],
                "zipkin2/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "Collection<Span> zipkin2.storage.InMemoryStorage.valueContainer()",
                    "static Collection<List<Span>> zipkin2.storage.InMemoryStorage.strictByTraceId(List<Span> next)"
                ]
            },
            "cac1ace2c6e1d4e998a290bb6ae7a07da7025063": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java": [
                    "void zipkin.storage.cassandra.CassandraStorage.clear()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/SessionFactory.java": [
                    "static List<InetSocketAddress> zipkin.storage.cassandra.Default.parseContactPoints(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/DefaultSessionFactory.java": [
                    "static List<InetSocketAddress> zipkin.storage.cassandra3.DefaultSessionFactory.parseContactPoints(Cassandra3Storage cassandra)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Collection<zipkin.Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/GroupByTraceId.java": [
                    "public static List<List<Span>> zipkin.internal.GroupByTraceId.apply(Collection<Span> input, boolean strictTraceId, boolean adjust)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public static <T> List<T> readList(JsonReaderAdapter<T> adapter, byte[] bytes)",
                    "public List<Span> zipkin.internal.SpanListReader.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/internal/MergeById.java": [
                    "public static List<Span> zipkin.internal.MergeById.apply(Iterable<Span> spans)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static @Nullable <T> T zipkin2.internal.JsonCodec.readOne(JsonReaderAdapter<T> adapter, byte[] bytes)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/Node.java": [
                    "public Node<V> zipkin2.internal.Node<V>.addChild(Node<V> child)"
                ],
                "zipkin2/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "Collection<Span> zipkin2.storage.InMemoryStorage.valueContainer()",
                    "static Collection<List<Span>> zipkin2.storage.InMemoryStorage.strictByTraceId(List<Span> next)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "72e593bcce4486ebcdde7982ac7478a811753991",
        "previous_commit": "7c26a8131b0fe97d1712d94b2789b017230aa48c",
        "date": 1542344238,
        "releases": {
            "previous": "72e593bcce4486ebcdde7982ac7478a811753991",
            "next": "72e593bcce4486ebcdde7982ac7478a811753991"
        },
        "commit_message": "Adds Span.merge and cleans up errorprone warnings (#2252)\n\nThis adds Span.merge which should only be used in cases where\r\ninstrumentation send late data. This should not be used for merging\r\nclient and server spans, as v2 format is explicitly single-host.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "72e593bcce4486ebcdde7982ac7478a811753991": {
                "zipkin/src/main/java/zipkin2/Annotation.java": [
                    "public boolean zipkin2.Annotation.equals(Object o)"
                ],
                "zipkin/src/main/java/zipkin2/DependencyLink.java": [
                    "public boolean zipkin2.DependencyLink.equals(Object o)"
                ],
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.shared(@Nullable Boolean shared)",
                    "public static String zipkin2.Span.normalizeTraceId(String traceId)",
                    "public Builder zipkin2.Span.parentId(@Nullable String parentId)",
                    "public boolean zipkin2.Span.equals(Object o)",
                    "public Builder zipkin2.Span.debug(@Nullable Boolean debug)",
                    "public Builder zipkin2.Span.id(String id)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Buffer.java": [
                    "void zipkin2.internal.Buffer.writeLongLe(long v)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Dependencies.java": [
                    "public boolean zipkin2.internal.Dependencies.equals(Object o)"
                ],
                "zipkin/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin2.internal.DependencyLinker.putTrace(Iterator<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin2/v1/V1Span.java": [
                    "public boolean zipkin2.v1.V1Span.equals(Object o)"
                ]
            },
            "7c26a8131b0fe97d1712d94b2789b017230aa48c": {
                "zipkin/src/main/java/zipkin2/Annotation.java": [
                    "public boolean zipkin2.Annotation.equals(Object o)"
                ],
                "zipkin/src/main/java/zipkin2/DependencyLink.java": [
                    "public boolean zipkin2.DependencyLink.equals(Object o)"
                ],
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.shared(@Nullable Boolean shared)",
                    "public static String zipkin2.Span.normalizeTraceId(String traceId)",
                    "public Builder zipkin2.Span.parentId(@Nullable String parentId)",
                    "public boolean zipkin2.Span.equals(Object o)",
                    "public Builder zipkin2.Span.debug(@Nullable Boolean debug)",
                    "public Builder zipkin2.Span.id(String id)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Buffer.java": [
                    "void zipkin2.internal.Buffer.writeLongLe(long v)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Dependencies.java": [
                    "public boolean zipkin2.internal.Dependencies.equals(Object o)"
                ],
                "zipkin/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin2.internal.DependencyLinker.putTrace(Iterator<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin2/v1/V1Span.java": [
                    "public boolean zipkin2.v1.V1Span.equals(Object o)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "dc9de8ba44ef6dd65efa5e298e175bae06e12cbf",
        "previous_commit": "88e0ef19ded7a5054e58196c5d1c2ebce8a63fea",
        "date": 1503295390,
        "releases": {
            "previous": "dc9de8ba44ef6dd65efa5e298e175bae06e12cbf",
            "next": "dc9de8ba44ef6dd65efa5e298e175bae06e12cbf"
        },
        "commit_message": "Starts preparing v2 Codec package (#1696)\n\nAll current Zipkin codec operations include the following:\r\n* encoding spans one-by-one as reported by instrumentation\r\n* encoding a list of encoded spans ready to send into a bytes message\r\n* decoding a list of spans off a transport message\r\n\r\nZipkin v1 includes legacy encoding, which is a bit different. For\r\nexample, old variants of Kafka accepted single-element messages instead\r\nof a list. We don't need to carry-forward this anymore. Moreover,\r\ninterfaces of reporter vs collector were split across jars in Zipkin v1\r\ndue to the former being defined late.\r\n\r\nThis introduces the following key interfaces and cleans up some code\r\naround codec.\r\n\r\n* `byte[] Encoder.encode(S span)`\r\n* `M MessageEncoder.encode(List<byte[]> encodedSpans)`\r\n* `List<S> Decoder.decodeList(byte[] message)`\r\n\r\nAll of these are temporarily placed in an internal package until other\r\ncode around it stabilizes.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "dc9de8ba44ef6dd65efa5e298e175bae06e12cbf": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "static byte[] zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.prefixWithTimestampMillisAndQuery(Span2 span, @Nullable Long timestampMillis)"
                ],
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "public static int zipkin.internal.Buffer.jsonEscapedSizeInBytes(String v)"
                ],
                "zipkin/src/main/java/zipkin/internal/DetectingSpanDecoder.java": [
                    "public static SpanDecoder zipkin.internal.DetectingSpanDecoder.detectJsonFormat(byte[] bytes)",
                    "public List<Span> zipkin.internal.DetectingSpanDecoder.readSpans(byte[] span)",
                    "public Span zipkin.internal.DetectingSpanDecoder.readSpan(byte[] span)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public int zipkin.internal..sizeInBytes(DependencyLink value)",
                    "public void zipkin.internal..write(BinaryAnnotation value, Buffer b)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(Annotation value)",
                    "public int zipkin.internal..sizeInBytes(BinaryAnnotation value)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(Endpoint value)"
                ],
                "zipkin/src/main/java/zipkin/internal/Span2.java": [
                    "public String zipkin.internal.Span2.toString()"
                ],
                "zipkin/src/main/java/zipkin/internal/Span2Converter.java": [
                    "void zipkin.internal.Span2Converter.processBinaryAnnotations(Span source)"
                ]
            },
            "88e0ef19ded7a5054e58196c5d1c2ebce8a63fea": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "static byte[] zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.prefixWithTimestampMillisAndQuery(Span2 span, @Nullable Long timestampMillis)"
                ],
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "static int zipkin.internal.Buffer.jsonEscapedSizeInBytes(String v)"
                ],
                "zipkin/src/main/java/zipkin/internal/DetectingSpanDecoder.java": [
                    "static SpanDecoder zipkin.internal.DetectingSpanDecoder.detectJsonFormat(byte[] bytes)",
                    "public List<Span> zipkin.internal.DetectingSpanDecoder.readSpans(byte[] span)",
                    "public Span zipkin.internal.DetectingSpanDecoder.readSpan(byte[] span)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public int zipkin.internal..sizeInBytes(DependencyLink value)",
                    "public void zipkin.internal..write(BinaryAnnotation value, Buffer b)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(Annotation value)",
                    "public int zipkin.internal..sizeInBytes(BinaryAnnotation value)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(Endpoint value)"
                ],
                "zipkin/src/main/java/zipkin/internal/Span2.java": [
                    "public String zipkin.internal.Span2.toString()"
                ],
                "zipkin/src/main/java/zipkin/internal/Span2Converter.java": [
                    "void zipkin.internal.Span2Converter.processBinaryAnnotations(Span source)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "822835d5e423eeb11ff3f236d515fe2e566151fb",
        "previous_commit": "15144416acff8ecd02ef2727e853eb7a3bf305de",
        "date": 1474075695,
        "releases": {
            "previous": "822835d5e423eeb11ff3f236d515fe2e566151fb",
            "next": "822835d5e423eeb11ff3f236d515fe2e566151fb"
        },
        "commit_message": "storage: introduce elasticsearch client shim (#1303)\n\nIn order to support elasticsearch on AWS (and other *aaS vendors) that\r\nchoose not to expose the ES binary protocol, we must have an option for\r\nclients to use the native transport or REST.\r\n\r\nTowards that end, this change refactors the existing storage client\r\ninteractions behind an interface that can be replaced by a different\r\ntransport. Almost all the changes were non-functional, with the\r\nexception of three methods:\r\n\r\n* getRawTrace\r\n* getServiceNames\r\n* getSpanNames\r\n\r\nWhich now use the leinientExpandOpen strategy for their index selection.\r\nWe anticipate this is a positive change, as skipping unavailable (or\r\nclosed) indexes will at worst present a partial span for the period\r\nof time that the index is unavailable, which seems be prefereable to\r\na hard error.\r\n\r\nAlso, when using the same elasticsearch cluster for multiple Zipkin\r\ninstances (i.e. running tests + a local development server) the\r\ninstances will race to claim the `zipkin_template` with a pattern\r\nthat will match only their indices \u2013 so if the tests are run first,\r\nthen the local server's indices will have only an implicit schema, or\r\n vice versa.\r\n\r\nThis change modifies the name of the template on a per-index-pattern\r\nbasis, so multiple templates can happily coexist. For the default\r\n`zipkin` index prefix, users should not observe any change in\r\nbehavior. NB: It may be necessary to delete unstructured indexes or\r\nclear out old `zipkin_template` templates in some cases to get\r\nmultiple instances working together.\r\n\r\nThis commit is the first step in support of #1302",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "822835d5e423eeb11ff3f236d515fe2e566151fb": {
                "zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin.autoconfigure.storage.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.elasticsearch.ElasticsearchSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTracesByIds(Collection<Long> traceIds, String[] indices)",
                    "public ListenableFuture<List<Span>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getRawTrace(long traceId)",
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getDependencies(long endMillis, @Nullable Long lookback)",
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)",
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getServiceNames()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchStorage.java": [
                    "public CheckResult zipkin.storage.elasticsearch.ElasticsearchStorage.check()",
                    "void zipkin.storage.elasticsearch.ElasticsearchStorage.clear()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/LazyClient.java": [
                    "public void zipkin.storage.elasticsearch.LazyClient.close()",
                    "public String zipkin.storage.elasticsearch.LazyClient.toString()"
                ]
            },
            "15144416acff8ecd02ef2727e853eb7a3bf305de": {
                "zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin.autoconfigure.storage.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.elasticsearch.ElasticsearchSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTracesByIds(Collection<Long> traceIds, String[] indices)",
                    "public ListenableFuture<List<Span>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getRawTrace(long traceId)",
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getDependencies(long endMillis, @Nullable Long lookback)",
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)",
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getServiceNames()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchStorage.java": [
                    "public CheckResult zipkin.storage.elasticsearch.ElasticsearchStorage.check()",
                    "void zipkin.storage.elasticsearch.ElasticsearchStorage.clear()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/LazyClient.java": [
                    "public void zipkin.storage.elasticsearch.LazyClient.close()",
                    "public String zipkin.storage.elasticsearch.LazyClient.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7f60427c86daf1e35aefcd911edbc3ca8025b246",
        "previous_commit": "b6535e6ba4edcb659122e0ed521e1c192ee02a87",
        "date": 1582615940,
        "releases": {
            "previous": "7f60427c86daf1e35aefcd911edbc3ca8025b246",
            "next": "7f60427c86daf1e35aefcd911edbc3ca8025b246"
        },
        "commit_message": "Migrate to Armeria 0.98.2 (#2977)\n\n* Migrate to Armeria 0.98.1\r\n\r\n* Exclamation\r\n\r\n* Scrubs\r\n\r\n* Remove RawContentLogger\r\n\r\n* Workaround https://github.com/line/armeria/issues/2493\r\n\r\n* Different exception\r\n\r\n* 0.98.2 and fixes\r\n\r\n* Man\r\n\r\n* Nice test\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7f60427c86daf1e35aefcd911edbc3ca8025b246": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "static HttpData zipkin2.server.internal.UnzippingBytesRequestConverter.convertRequest(ServiceRequestContext ctx, AggregatedHttpRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/HttpClientFactory.java": [
                    "public void zipkin2.server.internal.elasticsearch.HttpClientFactory.close()",
                    "ClientOptionsBuilder zipkin2.server.internal.elasticsearch.HttpClientFactory.configureOptionsExceptLogging(ClientOptionsBuilder options)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "HealthCheckedEndpointGroup zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.decorateHealthCheck(EndpointGroup endpointGroup)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java": [
                    "ClientFactory zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.esClientFactory( ZipkinElasticsearchStorageProperties es, MeterRegistry meterRegistry)",
                    "static ClientFactoryBuilder zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.configureSsl(ClientFactoryBuilder builder, Ssl ssl)",
                    "Consumer<ClientOptionsBuilder> zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.esTracing(Optional<HttpTracing> maybeHttpTracing)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "private static Tag zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.uri(RequestLog requestLog)",
                    "static String zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.getPathInfo(RequestLog requestLog)",
                    "public static void zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.setup(RequestContext ctx, MeterRegistry registry, String metricName)",
                    "private static Iterable<Tag> zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.getTags(RequestLog requestLog)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "CompletableFuture<AggregatedHttpResponse> zipkin2.elasticsearch.internal.client.HttpCall<V>.sendRequest()"
                ]
            },
            "b6535e6ba4edcb659122e0ed521e1c192ee02a87": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "static HttpData zipkin2.server.internal.UnzippingBytesRequestConverter.convertRequest(ServiceRequestContext ctx, AggregatedHttpRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/HttpClientFactory.java": [
                    "public void zipkin2.server.internal.elasticsearch.HttpClientFactory.close()",
                    "ClientOptionsBuilder zipkin2.server.internal.elasticsearch.HttpClientFactory.configureOptionsExceptLogging(ClientOptionsBuilder options)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "HealthCheckedEndpointGroup zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.decorateHealthCheck(EndpointGroup endpointGroup)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java": [
                    "ClientFactory zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.esClientFactory( ZipkinElasticsearchStorageProperties es, MeterRegistry meterRegistry)",
                    "static ClientFactoryBuilder zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.configureSsl(ClientFactoryBuilder builder, Ssl ssl)",
                    "Consumer<ClientOptionsBuilder> zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.esTracing(Optional<HttpTracing> maybeHttpTracing)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "private static Tag zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.uri(RequestLog requestLog)",
                    "static String zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.getPathInfo(RequestLog requestLog)",
                    "public static void zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.setup(RequestContext ctx, MeterRegistry registry, String metricName)",
                    "private static Iterable<Tag> zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.getTags(RequestLog requestLog)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "CompletableFuture<AggregatedHttpResponse> zipkin2.elasticsearch.internal.client.HttpCall<V>.sendRequest()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "77869db165c268ccef615d920aef058baa7232a4",
        "previous_commit": "68d77db15fb70eed50e23c7959396cf2c722a482",
        "date": 1703840346,
        "releases": {
            "previous": "77869db165c268ccef615d920aef058baa7232a4",
            "next": "77869db165c268ccef615d920aef058baa7232a4"
        },
        "commit_message": "Makes all except core jar Java 11+ (#3666)\n\nThis moves all code to minimum Java 11, except the core jar, which\r\nremains (mostly) Java 1.6 for use in zipkin-reporter.\r\n\r\nNotably, this pushes animal-sniffer to the core module, as the others\r\ncan rely on the release property of modern compilers.\r\n\r\nJava 11 instead of 11 or 21 because that's the last SDK that can also\r\ncompile 1.6.\r\n\r\nNote: this bumps to the next minor as it is worth communicating.\r\n\r\nSigned-off-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "77869db165c268ccef615d920aef058baa7232a4": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java": [
                    "Consumer<ClientOptionsBuilder> zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.esTracing(Optional<HttpTracing> maybeHttpTracing)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, CqlSession session)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLSpanConsumer.java": [
                    "public Void zipkin2.storage.mysql.v1.MySQLSpanConsumer.apply(DSLContext create)",
                    "InsertSetMoreStep<Record> zipkin2.storage.mysql.v1.MySQLSpanConsumer.addEndpoint(InsertSetMoreStep<Record> insert, Endpoint ep, int ipv4)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/SelectSpansAndAnnotations.java": [
                    "SelectOffsetStep<? extends Record> zipkin2.storage.mysql.v1.SelectSpansAndAnnotations.toTraceIdQuery(DSLContext context, QueryRequest request)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/DefaultCatalog.java": [
                    "public final List<Schema> zipkin2.storage.mysql.v1.internal.generated.DefaultCatalog.getSchemas()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/Zipkin.java": [
                    "public final List<Table<?>> zipkin2.storage.mysql.v1.internal.generated.Zipkin.getTables()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getIndexes()",
                    "public Schema zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getSchema()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinDependencies.java": [
                    "public Schema zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinDependencies.getSchema()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public Schema zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getSchema()",
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()"
                ]
            },
            "68d77db15fb70eed50e23c7959396cf2c722a482": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java": [
                    "Consumer<ClientOptionsBuilder> zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.esTracing(Optional<HttpTracing> maybeHttpTracing)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, CqlSession session)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLSpanConsumer.java": [
                    "public Void zipkin2.storage.mysql.v1.MySQLSpanConsumer.apply(DSLContext create)",
                    "void zipkin2.storage.mysql.v1.MySQLSpanConsumer.addEndpoint(InsertSetMoreStep<Record> insert, Endpoint ep, int ipv4)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/SelectSpansAndAnnotations.java": [
                    "SelectOffsetStep<? extends Record> zipkin2.storage.mysql.v1.SelectSpansAndAnnotations.toTraceIdQuery(DSLContext context, QueryRequest request)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/DefaultCatalog.java": [
                    "public final List<Schema> zipkin2.storage.mysql.v1.internal.generated.DefaultCatalog.getSchemas()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/Zipkin.java": [
                    "public final List<Table<?>> zipkin2.storage.mysql.v1.internal.generated.Zipkin.getTables()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getIndexes()",
                    "public Schema zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getSchema()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinDependencies.java": [
                    "public Schema zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinDependencies.getSchema()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public Schema zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getSchema()",
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "610b8bf796c5f91d2b73d8914a48308b2a3786a4",
        "previous_commit": "2047930ef93f14ed8f38816b5af8d7cb49ee5ff3",
        "date": 1531419431,
        "releases": {
            "previous": "610b8bf796c5f91d2b73d8914a48308b2a3786a4",
            "next": "610b8bf796c5f91d2b73d8914a48308b2a3786a4"
        },
        "commit_message": "Completes storage test conversion to v2 model\n\nNote this isn't precisely the same as SpanStoreTest as functionality\nmoved out of the api and into javascript as a part of defining the v2\napi contract.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "610b8bf796c5f91d2b73d8914a48308b2a3786a4": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.v1.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanStore.java": [
                    "public Call<List<String>> zipkin2.storage.cassandra.v1.CassandraSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<String>> zipkin2.storage.cassandra.CassandraSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectSpanNames.java": [
                    "protected BiConsumer<Row, List<String>> zipkin2.storage.cassandra.SelectSpanNames.accumulator()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromServiceSpan.java": [
                    "Call<Set<Entry<String, Long>>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceSpan.newCall(List<Input> inputs)",
                    "public Call<Set<Entry<String, Long>>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceSpan.map(List<String> serviceNames)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<String>> zipkin2.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLSpanStore.java": [
                    "public Call<List<String>> zipkin2.storage.mysql.v1.MySQLSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/SelectSpanNames.java": [
                    "public List<String> zipkin2.storage.mysql.v1.SelectSpanNames.apply(DSLContext context)"
                ],
                "zipkin2/src/main/java/zipkin2/storage/StrictTraceId.java": [
                    "public List<List<Span>> zipkin2.storage.StrictTraceId.map(List<List<Span>> input)",
                    "public List<Span> zipkin2.storage.StrictTraceId.map(List<Span> input)"
                ]
            },
            "2047930ef93f14ed8f38816b5af8d7cb49ee5ff3": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.v1.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanStore.java": [
                    "public Call<List<String>> zipkin2.storage.cassandra.v1.CassandraSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<String>> zipkin2.storage.cassandra.CassandraSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectSpanNames.java": [
                    "protected BiConsumer<Row, List<String>> zipkin2.storage.cassandra.SelectSpanNames.accumulator()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromServiceSpan.java": [
                    "Call<Set<Entry<String, Long>>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceSpan.newCall(List<Input> inputs)",
                    "public Call<Set<Entry<String, Long>>> zipkin2.storage.cassandra.SelectTraceIdsFromServiceSpan.map(List<String> serviceNames)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<String>> zipkin2.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLSpanStore.java": [
                    "public Call<List<String>> zipkin2.storage.mysql.v1.MySQLSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/SelectSpanNames.java": [
                    "public List<String> zipkin2.storage.mysql.v1.SelectSpanNames.apply(DSLContext context)"
                ],
                "zipkin2/src/main/java/zipkin2/storage/StrictTraceId.java": [
                    "public List<List<Span>> zipkin2.storage.StrictTraceId.map(List<List<Span>> input)",
                    "public List<Span> zipkin2.storage.StrictTraceId.map(List<Span> input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6e32e74ab01c4759018806f85c862596c516d264",
        "previous_commit": "8892aa30842c646daa4157b25e03cd863624bc40",
        "date": 1503478914,
        "releases": {
            "previous": "6e32e74ab01c4759018806f85c862596c516d264",
            "next": "6e32e74ab01c4759018806f85c862596c516d264"
        },
        "commit_message": "Organizes v2 classes into corresponding internal packages (#1702)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6e32e74ab01c4759018806f85c862596c516d264": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.indexSpans(BulkSpanIndexer indexer, List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public zipkin.Span zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "public List<zipkin.Span> zipkin.storage.mysql.MySQLSpanStore.getRawTrace(long traceIdHigh, long traceIdLow)",
                    "List<List<zipkin.Span>> zipkin.storage.mysql.MySQLSpanStore.getTraces(@Nullable QueryRequest request, @Nullable Long traceIdHigh, @Nullable Long traceIdLow, boolean raw)",
                    "List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.aggregateDependencies(long endTs, @Nullable Long lookback, Connection conn)",
                    "public List<zipkin.Span> zipkin.storage.mysql.MySQLSpanStore.getTrace(long traceIdHigh, long traceIdLow)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "public void zipkin.collector.Collector.acceptSpans(byte[] serializedSpans, SpanDecoder decoder, Callback<Void> callback)",
                    "public void zipkin.collector.Collector.accept(List<zipkin.Span> spans, Callback<Void> callback)",
                    "public void zipkin.collector.Collector.acceptSpans(List<byte[]> serializedSpans, SpanDecoder decoder, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<Span> spans)",
                    "public Span zipkin.internal.DependencyLinker.merge(Span left, Span right)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/codec/Span2JsonAdapters.java": [
                    "public Span zipkin.internal.v2.codec.Span2JsonAdapters.fromJson(JsonReader reader)"
                ]
            },
            "8892aa30842c646daa4157b25e03cd863624bc40": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.indexSpans(BulkSpanIndexer indexer, List<Span2> spans)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public Span zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "public List<Span> zipkin.storage.mysql.MySQLSpanStore.getTrace(long traceIdHigh, long traceIdLow)",
                    "List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.aggregateDependencies(long endTs, @Nullable Long lookback, Connection conn)",
                    "public List<Span> zipkin.storage.mysql.MySQLSpanStore.getRawTrace(long traceIdHigh, long traceIdLow)",
                    "List<List<Span>> zipkin.storage.mysql.MySQLSpanStore.getTraces(@Nullable QueryRequest request, @Nullable Long traceIdHigh, @Nullable Long traceIdLow, boolean raw)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "public void zipkin.collector.Collector.acceptSpans(byte[] serializedSpans, SpanDecoder decoder, Callback<Void> callback)",
                    "public void zipkin.collector.Collector.accept(List<Span> spans, Callback<Void> callback)",
                    "public void zipkin.collector.Collector.acceptSpans(List<byte[]> serializedSpans, SpanDecoder decoder, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public Span2 zipkin.internal.DependencyLinker.merge(Span2 left, Span2 right)",
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<Span2> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/codec/Span2JsonAdapters.java": [
                    "public Span2 zipkin.internal.v2.codec.Span2JsonAdapters.fromJson(JsonReader reader)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "230277363f35b6f2972dc9a2f5de1a69b8d45561",
        "previous_commit": "39972495b009b0a3c7c84a3a93efc79eb1b82033",
        "date": 1528297781,
        "releases": {
            "previous": "230277363f35b6f2972dc9a2f5de1a69b8d45561",
            "next": "230277363f35b6f2972dc9a2f5de1a69b8d45561"
        },
        "commit_message": "Extracts common logic\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "230277363f35b6f2972dc9a2f5de1a69b8d45561": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/v1/SelectFromTraces.java": [
                    "public String zipkin2.storage.cassandra.v1.SelectFromTraces.toString()",
                    "Call<List<Span>> zipkin2.storage.cassandra.v1.SelectFromTraces.newCall(String hexTraceId)",
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.v1.SelectFromTraces.map(Set<Long> input)",
                    "FlatMapper<Set<Long>, List<List<Span>>> zipkin2.storage.cassandra.v1.SelectFromTraces.newFlatMapper(QueryRequest request)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)",
                    "public Call<List<Span>> zipkin2.elasticsearch.ElasticsearchSpanStore.map(List<String> input)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.CassandraSpanStore.getTraces(QueryRequest request)",
                    "public String zipkin2.storage.cassandra.CassandraSpanStore.toString()"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "public String zipkin2.storage.cassandra.SelectFromSpan.toString()",
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.SelectFromSpan.map(Set<String> input)",
                    "protected BiConsumer<Row, List<Span>> zipkin2.storage.cassandra.SelectFromSpan.accumulator()"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanStoreAdapter.java": [
                    "public List<zipkin.Span> zipkin.internal.V2SpanStoreAdapter.map(List<Span> spans)"
                ]
            },
            "39972495b009b0a3c7c84a3a93efc79eb1b82033": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/v1/SelectFromTraces.java": [
                    "public String zipkin2.storage.cassandra.v1.SelectFromTraces.toString()",
                    "Call<List<Span>> zipkin2.storage.cassandra.v1.SelectFromTraces.newCall(String hexTraceId)",
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.v1.SelectFromTraces.map(Set<Long> input)",
                    "FlatMapper<Set<Long>, List<List<Span>>> zipkin2.storage.cassandra.v1.SelectFromTraces.newFlatMapper(QueryRequest request)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)",
                    "public Call<List<List<Span>>> zipkin2.elasticsearch.ElasticsearchSpanStore.map(List<String> input)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.CassandraSpanStore.getTraces(QueryRequest request)",
                    "public String zipkin2.storage.cassandra.CassandraSpanStore.toString()"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "public String zipkin2.storage.cassandra.SelectFromSpan.toString()",
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.SelectFromSpan.map(Set<String> input)",
                    "protected BiConsumer<Row, List<Span>> zipkin2.storage.cassandra.SelectFromSpan.accumulator()"
                ],
                "zipkin/src/main/java/zipkin/internal/V2SpanStoreAdapter.java": [
                    "public List<zipkin.Span> zipkin.internal.V2SpanStoreAdapter.map(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "862e3f3d6979cd66fa75f83e4def1e3bbcf1f3b0",
        "previous_commit": "2539a77fee84d925f6f52d80c3fb850620db1cc9",
        "date": 1557541525,
        "releases": {
            "previous": "862e3f3d6979cd66fa75f83e4def1e3bbcf1f3b0",
            "next": "862e3f3d6979cd66fa75f83e4def1e3bbcf1f3b0"
        },
        "commit_message": "Makes it an error to store during assembly of a call (#2580)\n\nBefore this, there was some extra code in the throttle package handling\r\na bug in our in memory storage. This fixes that and removes the extra\r\ncode.\r\n\r\nSee #2502\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "862e3f3d6979cd66fa75f83e4def1e3bbcf1f3b0": {
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledCall.java": [
                    "public void zipkin2.server.internal.throttle.ThrottledCall<V>.run()",
                    "public String zipkin2.server.internal.throttle.ThrottledCall<V>.toString()",
                    "public void zipkin2.server.internal.throttle.ThrottledCall<V>.onSuccess(V value)",
                    "public void zipkin2.server.internal.throttle.ThrottledCall<V>.onError(Throwable t)",
                    "public Call<V> zipkin2.server.internal.throttle.ThrottledCall<V>.clone()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledStorageComponent.java": [
                    "public String zipkin2.server.internal.throttle.ThrottledStorageComponent.toString()",
                    "public Call<Void> zipkin2.server.internal.throttle.ThrottledStorageComponent.accept(List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BulkCallBuilder.java": [
                    "public void zipkin2.elasticsearch.internal.BulkCallBuilder.writeTo(BufferedSink sink)",
                    "public HttpCall<Void> zipkin2.elasticsearch.internal.BulkCallBuilder.build()",
                    "public <T> void zipkin2.elasticsearch.internal.BulkCallBuilder.index(String index, String typeName, T input, BulkIndexWriter<T> writer)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "public Call<Void> zipkin2.storage.InMemoryStorage.accept(List<Span> spans)"
                ]
            },
            "2539a77fee84d925f6f52d80c3fb850620db1cc9": {
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledCall.java": [
                    "public void zipkin2.server.internal.throttle.ThrottledCall<V>.run()",
                    "public String zipkin2.server.internal.throttle.ThrottledCall<V>.toString()",
                    "public void zipkin2.server.internal.throttle.ThrottledCall<V>.onSuccess(V value)",
                    "public void zipkin2.server.internal.throttle.ThrottledCall<V>.onError(Throwable t)",
                    "public Call<V> zipkin2.server.internal.throttle.ThrottledCall<V>.clone()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledStorageComponent.java": [
                    "public String zipkin2.server.internal.throttle.ThrottledStorageComponent.toString()",
                    "public Call<Void> zipkin2.server.internal.throttle.ThrottledStorageComponent.accept(List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BulkCallBuilder.java": [
                    "public void zipkin2.elasticsearch.internal.BulkCallBuilder.writeTo(BufferedSink sink)",
                    "public HttpCall<Void> zipkin2.elasticsearch.internal.BulkCallBuilder.build()",
                    "public <T> void zipkin2.elasticsearch.internal.BulkCallBuilder.index(String index, String typeName, T input, BulkIndexWriter<T> writer)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "public synchronized Call<Void> zipkin2.storage.InMemoryStorage.accept(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "134b53c4abb1b3209a534799b8cdc901478dbb56",
        "previous_commit": "d10815715b018ca76eb818a508bfd145bacbdf8d",
        "date": 1556769707,
        "releases": {
            "previous": "134b53c4abb1b3209a534799b8cdc901478dbb56",
            "next": "134b53c4abb1b3209a534799b8cdc901478dbb56"
        },
        "commit_message": "Fixes logging and metrics for collectors (#2552)\n\nBefore, we were inconsistent about incrementing metrics, and in worst\r\ncase, we double-incremented. This adds tests for the messaging based\r\ncollectors and backfills tests to make the base Collector class 100%\r\ncoverage.\r\n\r\nSeparately, we have recently changed our web endpoint to produce its\r\nown error messages to the client. In other words, we no longer rely on\r\n(often unnecessary) wrapping of exceptions to correct the message being\r\nsent back. This changes the logic around message formatting so it is\r\nonly used when logging is enabled.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "134b53c4abb1b3209a534799b8cdc901478dbb56": {
                "zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java": [
                    "public void zipkin2.collector.Collector.acceptSpans( byte[] serializedSpans, BytesDecoder<Span> decoder, Callback<Void> callback)",
                    "public void zipkin2.collector.Collector.onError(Throwable t)",
                    "public void zipkin2.collector.Collector.accept(List<Span> spans, Callback<Void> callback)",
                    "public void zipkin2.collector.Collector.acceptSpans(byte[] serialized, Callback<Void> callback)",
                    "String zipkin2.collector.Collector.appendSpanIds(List<Span> spans, StringBuilder message)",
                    "public String zipkin2.collector.Collector.toString()"
                ],
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollectorWorker.java": [
                    "public void zipkin2.collector.kafka.KafkaCollectorWorker.run()"
                ],
                "zipkin-collector/kafka08/src/main/java/zipkin2/collector/kafka08/KafkaStreamProcessor.java": [
                    "public void zipkin2.collector.kafka08.KafkaStreamProcessor.run()"
                ],
                "zipkin-junit/src/main/java/zipkin2/junit/ZipkinDispatcher.java": [
                    "MockResponse zipkin2.junit.ZipkinDispatcher.acceptSpans(RecordedRequest request, SpanBytesDecoder decoder)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinGrpcCollector.java": [
                    "protected CompletableFuture<byte[]> zipkin2.server.internal.ZipkinGrpcCollector.handleMessage(byte[] bytes)"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "static IllegalArgumentException zipkin2.internal.JsonCodec.exceptionReading(String type, Exception e)"
                ]
            },
            "d10815715b018ca76eb818a508bfd145bacbdf8d": {
                "zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java": [
                    "public void zipkin2.collector.Collector.acceptSpans( byte[] serializedSpans, BytesDecoder<Span> decoder, Callback<Void> callback)",
                    "StringBuilder zipkin2.collector.Collector.appendSpanIds(List<Span> spans, StringBuilder message)",
                    "public void zipkin2.collector.Collector.onError(Throwable t)",
                    "public void zipkin2.collector.Collector.accept(List<Span> spans, Callback<Void> callback)",
                    "public void zipkin2.collector.Collector.acceptSpans(byte[] serialized, Callback<Void> callback)",
                    "public String zipkin2.collector.Collector.toString()"
                ],
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollectorWorker.java": [
                    "public void zipkin2.collector.kafka.KafkaCollectorWorker.run()"
                ],
                "zipkin-collector/kafka08/src/main/java/zipkin2/collector/kafka08/KafkaStreamProcessor.java": [
                    "public void zipkin2.collector.kafka08.KafkaStreamProcessor.run()"
                ],
                "zipkin-junit/src/main/java/zipkin2/junit/ZipkinDispatcher.java": [
                    "MockResponse zipkin2.junit.ZipkinDispatcher.acceptSpans(RecordedRequest request, SpanBytesDecoder decoder)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinGrpcCollector.java": [
                    "protected CompletableFuture<byte[]> zipkin2.server.internal.ZipkinGrpcCollector.handleMessage(byte[] bytes)"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "static IllegalArgumentException zipkin2.internal.JsonCodec.exceptionReading(String type, Exception e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b0f22b5bd0f29dd1539cb797129fb1d61dd7b3de",
        "previous_commit": "51ebe793da57b0355f47217af1724053c4a9e03e",
        "date": 1477473056,
        "releases": {
            "previous": "b0f22b5bd0f29dd1539cb797129fb1d61dd7b3de",
            "next": "b0f22b5bd0f29dd1539cb797129fb1d61dd7b3de"
        },
        "commit_message": "Adds traceIdHigh (default 0) to zipkin.Span and implements codec\n\nIn json, it is simply a longer traceId field to accommodate the extra\n16 hex characters.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b0f22b5bd0f29dd1539cb797129fb1d61dd7b3de": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ZipkinAdapters.java": [
                    "public Span zipkin.storage.elasticsearch.http.ZipkinAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public boolean zipkin.Span.equals(Object o)",
                    "public Builder zipkin.Span.merge(Span that)",
                    "public int zipkin.Span.hashCode()",
                    "public String zipkin.Span.idString()"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public Span zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public void zipkin.internal.JsonCodec.write(Span value, Buffer b)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public Span zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public void zipkin.internal.ThriftCodec.write(Span value, Buffer buffer)",
                    "public int zipkin.internal.ThriftCodec.sizeInBytes(Span value)"
                ],
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static long zipkin.internal.Util.lowerHexToUnsignedLong(String lowerHex)"
                ]
            },
            "51ebe793da57b0355f47217af1724053c4a9e03e": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ZipkinAdapters.java": [
                    "public Span zipkin.storage.elasticsearch.http.ZipkinAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public boolean zipkin.Span.equals(Object o)",
                    "public Builder zipkin.Span.merge(Span that)",
                    "public int zipkin.Span.hashCode()",
                    "public String zipkin.Span.idString()"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public Span zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public void zipkin.internal.JsonCodec.write(Span value, Buffer b)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public Span zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public void zipkin.internal.ThriftCodec.write(Span value, Buffer buffer)",
                    "public int zipkin.internal.ThriftCodec.sizeInBytes(Span value)"
                ],
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static long zipkin.internal.Util.lowerHexToUnsignedLong(String lowerHex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e52fc8607d6625ad0f7e42c76cc039e6bb379e93",
        "previous_commit": "55702c638b83996f47498af13bb9c10bfe80b28a",
        "date": 1563523100,
        "releases": {
            "previous": "e52fc8607d6625ad0f7e42c76cc039e6bb379e93",
            "next": "e52fc8607d6625ad0f7e42c76cc039e6bb379e93"
        },
        "commit_message": "Cleans up some Elasticsearch configuration prior to release (#2687)\n\nNotably `ES_MAX_REQUESTS` is unusable in real life, so this removes\r\nsupport as we've changed other things anyway. This also exposes the\r\n`HostsSupplier` so that zipkin-aws can use it in case of static urls.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e52fc8607d6625ad0f7e42c76cc039e6bb379e93": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder()",
                    "public void zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.setPipeline(String pipeline)",
                    "public void zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.setUsername(String username)",
                    "public void zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.setIndex(String index)",
                    "public void zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.setPassword(String password)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public static Builder zipkin2.elasticsearch.ElasticsearchStorage.newBuilder()",
                    "public HttpCall.Factory zipkin2.elasticsearch.ElasticsearchStorage.http()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "public HttpCall<V> zipkin2.elasticsearch.internal.client.HttpCall<V>.clone()",
                    "protected V zipkin2.elasticsearch.internal.client.HttpCall<V>.doExecute()",
                    "public <V> HttpCall<V> zipkin2.elasticsearch.internal.client.HttpCall<V>.newCall(AggregatedHttpRequest request, BodyConverter<V> bodyConverter)",
                    "protected void zipkin2.elasticsearch.internal.client.HttpCall<V>.doEnqueue(Callback<V> callback)"
                ]
            },
            "55702c638b83996f47498af13bb9c10bfe80b28a": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder()",
                    "public void zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.setPipeline(String pipeline)",
                    "public void zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.setUsername(String username)",
                    "public void zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.setIndex(String index)",
                    "public void zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.setPassword(String password)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public static Builder zipkin2.elasticsearch.ElasticsearchStorage.newBuilder()",
                    "public HttpCall.Factory zipkin2.elasticsearch.ElasticsearchStorage.http()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "public HttpCall<V> zipkin2.elasticsearch.internal.client.HttpCall<V>.clone()",
                    "protected V zipkin2.elasticsearch.internal.client.HttpCall<V>.doExecute()",
                    "public <V> HttpCall<V> zipkin2.elasticsearch.internal.client.HttpCall<V>.newCall(AggregatedHttpRequest request, BodyConverter<V> bodyConverter)",
                    "protected void zipkin2.elasticsearch.internal.client.HttpCall<V>.doEnqueue(Callback<V> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1845702272992ec430af6dc23a340186b5c9d285",
        "previous_commit": "eb7608883239750b02782e4afa6d0abfa571b1d8",
        "date": 1596772620,
        "releases": {
            "previous": "1845702272992ec430af6dc23a340186b5c9d285",
            "next": "1845702272992ec430af6dc23a340186b5c9d285"
        },
        "commit_message": "Update Armeria and Netty dependencies (#3167)\n\nArmeria 0.99.8 -> 0.99.9\r\nNetty 4.1.50.Final -> 4.1.51.Final",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1845702272992ec430af6dc23a340186b5c9d285": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeInboundHandler.java": [
                    "public void zipkin2.collector.scribe.ScribeInboundHandler.channelRead(ChannelHandlerContext ctx, Object payload)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "static HttpData zipkin2.server.internal.UnzippingBytesRequestConverter.convertRequest(ServiceRequestContext ctx, AggregatedHttpRequest request)",
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java": [
                    "public HttpResponse zipkin2.server.internal.elasticsearch.BasicAuthInterceptor.execute(ClientRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/HttpClientFactory.java": [
                    "void zipkin2.server.internal.elasticsearch.HttpClientFactory.configureHttpLogging(HttpLogging httpLogging, ClientOptionsBuilder options)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/health/ZipkinHealthController.java": [
                    "CompletableFuture<HttpResponse> zipkin2.server.internal.health.ZipkinHealthController.health(ServiceRequestContext ctx, MediaType mediaType)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "public HttpResponse zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.serve(ServiceRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "HttpCall.Factory zipkin2.elasticsearch.ElasticsearchStorage.http()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "V zipkin2.elasticsearch.internal.client.HttpCall<V>.parseResponse(AggregatedHttpResponse response, BodyConverter<V> bodyConverter)",
                    "CompletableFuture<AggregatedHttpResponse> zipkin2.elasticsearch.internal.client.HttpCall<V>.sendRequest()",
                    "protected void zipkin2.elasticsearch.internal.client.HttpCall<V>.doCancel()"
                ]
            },
            "eb7608883239750b02782e4afa6d0abfa571b1d8": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeInboundHandler.java": [
                    "public void zipkin2.collector.scribe.ScribeInboundHandler.channelRead(ChannelHandlerContext ctx, Object payload)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "static HttpData zipkin2.server.internal.UnzippingBytesRequestConverter.convertRequest(ServiceRequestContext ctx, AggregatedHttpRequest request)",
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java": [
                    "public HttpResponse zipkin2.server.internal.elasticsearch.BasicAuthInterceptor.execute(ClientRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/HttpClientFactory.java": [
                    "void zipkin2.server.internal.elasticsearch.HttpClientFactory.configureHttpLogging(HttpLogging httpLogging, ClientOptionsBuilder options)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/health/ZipkinHealthController.java": [
                    "CompletableFuture<HttpResponse> zipkin2.server.internal.health.ZipkinHealthController.health(ServiceRequestContext ctx, MediaType mediaType)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "public HttpResponse zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.serve(ServiceRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "HttpCall.Factory zipkin2.elasticsearch.ElasticsearchStorage.http()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "CompletableFuture<PooledAggregatedHttpResponse> zipkin2.elasticsearch.internal.client.HttpCall<V>.sendRequest()",
                    "V zipkin2.elasticsearch.internal.client.HttpCall<V>.parseResponse(AggregatedHttpResponse response, BodyConverter<V> bodyConverter)",
                    "protected void zipkin2.elasticsearch.internal.client.HttpCall<V>.doCancel()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "59030cf508f84025c5ce58f8f27fd9bb384c1b5d",
        "previous_commit": "57dc2ec9c65fe6144e401c0c933b4400463a69df",
        "date": 1493813782,
        "releases": {
            "previous": "59030cf508f84025c5ce58f8f27fd9bb384c1b5d",
            "next": "59030cf508f84025c5ce58f8f27fd9bb384c1b5d"
        },
        "commit_message": "Breaking test for trace search in ES. (#1581)\n\n* Breaking test for trace search in ES.\r\n\r\nThe Elastic Search implementation should be able to search traces\r\nby serviceName of the server, when the server is not also a client\r\nof another service.\r\n\r\nFor @adriancole\r\n\r\n* Fixes bug where server-side service names aren't indexed\r\n\r\nWhile defending against accidentally overwriting the client's timestamp,\r\nwe accidentally clobbered the ability to refine by the server's service\r\nname.\r\n\r\nThis fixes the issue and backports a test. It also buffs out some dodgy\r\ncode where we accidentally searched before 1970.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "59030cf508f84025c5ce58f8f27fd9bb384c1b5d": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeSpan(long traceId, long timestamp, String key, ByteBuffer span)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsByAnnotation(String annotationKey, long endTs, long lookback, int limit)",
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsBySpanName(String serviceName, String spanName, long endTs, long lookback, int limit)",
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsByServiceNames(List<String> serviceNames, long endTs, long lookback, int limit)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeSpan(Span span, TraceIdUDT traceId, Long timestamp)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "ListenableFuture<Map<TraceIdUDT, Long>> zipkin.storage.cassandra3.CassandraSpanStore.getTraceIdsByAnnotation( String annotationKey, long endTsMillis, long lookbackMillis, int limit)",
                    "ListenableFuture<Map<TraceIdUDT, Long>> zipkin.storage.cassandra3.CassandraSpanStore.getTraceIdsByServiceNames(QueryRequest request)"
                ],
                "zipkin/src/main/java/zipkin/internal/ApplyTimestampAndDuration.java": [
                    "public static Long zipkin.internal.ApplyTimestampAndDuration.guessTimestamp(Span span)"
                ],
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static List<Date> zipkin.internal.Util.getDays(long endTs, @Nullable Long lookback)"
                ]
            },
            "57dc2ec9c65fe6144e401c0c933b4400463a69df": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeSpan(long traceId, long timestamp, boolean isServerRecvSpan, String key, ByteBuffer span)",
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsByAnnotation(String annotationKey, long endTs, long lookback, int limit)",
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsBySpanName(String serviceName, String spanName, long endTs, long lookback, int limit)",
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsByServiceNames(List<String> serviceNames, long endTs, long lookback, int limit)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeSpan(Span span, TraceIdUDT traceId, boolean isServerRecvSpan, Long timestamp)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "ListenableFuture<Map<TraceIdUDT, Long>> zipkin.storage.cassandra3.CassandraSpanStore.getTraceIdsByAnnotation( String annotationKey, long endTsMillis, long lookbackMillis, int limit)",
                    "ListenableFuture<Map<TraceIdUDT, Long>> zipkin.storage.cassandra3.CassandraSpanStore.getTraceIdsByServiceNames(QueryRequest request)"
                ],
                "zipkin/src/main/java/zipkin/internal/ApplyTimestampAndDuration.java": [
                    "public static Long zipkin.internal.ApplyTimestampAndDuration.guessTimestamp(Span span)"
                ],
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static List<Date> zipkin.internal.Util.getDays(long endTs, @Nullable Long lookback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "762a79539ac3ed945038ee759cfec3a28971105c",
        "previous_commit": "f2d9cc8c7e874bae7531cdc94c11eb5cc23f987d",
        "date": 1556881729,
        "releases": {
            "previous": "762a79539ac3ed945038ee759cfec3a28971105c",
            "next": "762a79539ac3ed945038ee759cfec3a28971105c"
        },
        "commit_message": "Supports Elasticsearch 7.x (#2398)\n\nFixes #2219",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "762a79539ac3ed945038ee759cfec3a28971105c": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.addAutocompleteValues(long indexTimestamp, Span span)",
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.add(long indexTimestamp, Span span, long timestampMillis)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public CheckResult zipkin2.elasticsearch.ElasticsearchStorage.convert(BufferedSource b)",
                    "IndexTemplates zipkin2.elasticsearch.ElasticsearchStorage.ensureIndexTemplates()",
                    "void zipkin2.elasticsearch.ElasticsearchStorage.clear(String index)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "private String zipkin2.elasticsearch.VersionSpecificTemplates.versionSpecificDependencyLinkIndexTemplate(float version)",
                    "private String zipkin2.elasticsearch.VersionSpecificTemplates.versionSpecificAutocompleteIndexTemplate(float version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.spanIndexTemplate()",
                    "private String zipkin2.elasticsearch.VersionSpecificTemplates.versionSpecificSpanIndexTemplate(float version)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/HttpBulkIndexer.java": [
                    "public HttpCall<Void> zipkin2.elasticsearch.internal.HttpBulkIndexer.newCall()",
                    "void zipkin2.elasticsearch.internal.HttpBulkIndexer.writeIndexMetadata(String index, String typeName, @Nullable String id)"
                ]
            },
            "f2d9cc8c7e874bae7531cdc94c11eb5cc23f987d": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.addAutocompleteValues(long indexTimestamp, Span span)",
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.add(long indexTimestamp, Span span, long timestampMillis)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public CheckResult zipkin2.elasticsearch.ElasticsearchStorage.convert(BufferedSource b)",
                    "IndexTemplates zipkin2.elasticsearch.ElasticsearchStorage.ensureIndexTemplates()",
                    "void zipkin2.elasticsearch.ElasticsearchStorage.clear(String index)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "private String zipkin2.elasticsearch.VersionSpecificTemplates.versionSpecificDependencyLinkIndexTemplate(float version)",
                    "private String zipkin2.elasticsearch.VersionSpecificTemplates.versionSpecificAutocompleteIndexTemplate(float version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.spanIndexTemplate()",
                    "private String zipkin2.elasticsearch.VersionSpecificTemplates.versionSpecificSpanIndexTemplate(float version)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/HttpBulkIndexer.java": [
                    "public HttpCall<Void> zipkin2.elasticsearch.internal.HttpBulkIndexer.newCall()",
                    "void zipkin2.elasticsearch.internal.HttpBulkIndexer.writeIndexMetadata(String index, String typeName, @Nullable String id)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "31338b52714c2dbb989b07beaa58cf7957d12e8c",
        "previous_commit": "ac3fe210bfe6c65f834519a54b5c6c75b039f8c6",
        "date": 1564737500,
        "releases": {
            "previous": "31338b52714c2dbb989b07beaa58cf7957d12e8c",
            "next": "31338b52714c2dbb989b07beaa58cf7957d12e8c"
        },
        "commit_message": "Allows throttling to re-use 3rd party exceptions as opposed to wrapping (#2723)\n\nWhile re-wrapping exceptions can still make sense (ex to trim huge stack\r\ntraces), re-wrapping only to fit `RejectedExecutionException` can be\r\ncounter-productive and result in debates about naming that don't need to\r\nbe debated.\r\n\r\nThis adds `StorageComponent.isOvercapacity(Throwable)` to make\r\nclassification more flexible.\r\n\r\nFixes #2721",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "31338b52714c2dbb989b07beaa58cf7957d12e8c": {
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledCall.java": [
                    "protected void zipkin2.server.internal.throttle.ThrottledCall<V>.doEnqueue(Callback<V> callback)",
                    "public String zipkin2.server.internal.throttle.ThrottledCall<V>.toString()",
                    "void zipkin2.server.internal.throttle.ThrottledCall<V>.await()",
                    "public void zipkin2.server.internal.throttle.ThrottledCall<V>.onSuccess(V value)",
                    "public void zipkin2.server.internal.throttle.ThrottledCall<V>.onError(Throwable t)",
                    "void zipkin2.server.internal.throttle.ThrottledCall<V>.enqueueAndWait()",
                    "protected V zipkin2.server.internal.throttle.ThrottledCall<V>.doExecute()",
                    "public Call<V> zipkin2.server.internal.throttle.ThrottledCall<V>.clone()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledStorageComponent.java": [
                    "public SpanConsumer zipkin2.server.internal.throttle.ThrottledStorageComponent.spanConsumer()",
                    "public Call<Void> zipkin2.server.internal.throttle.ThrottledStorageComponent.accept(List<Span> spans)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/ResultSetFutureCall.java": [
                    "static ResultSet zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.getUninterruptibly(ListenableFuture<ResultSet> future)"
                ]
            },
            "ac3fe210bfe6c65f834519a54b5c6c75b039f8c6": {
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledCall.java": [
                    "protected void zipkin2.server.internal.throttle.ThrottledCall<V>.doEnqueue(Callback<V> callback)",
                    "public String zipkin2.server.internal.throttle.ThrottledCall<V>.toString()",
                    "void zipkin2.server.internal.throttle.ThrottledCall<V>.await()",
                    "public void zipkin2.server.internal.throttle.ThrottledCall<V>.onSuccess(V value)",
                    "public void zipkin2.server.internal.throttle.ThrottledCall<V>.onError(Throwable t)",
                    "void zipkin2.server.internal.throttle.ThrottledCall<V>.enqueueAndWait()",
                    "protected V zipkin2.server.internal.throttle.ThrottledCall<V>.doExecute()",
                    "public Call<V> zipkin2.server.internal.throttle.ThrottledCall<V>.clone()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledStorageComponent.java": [
                    "public SpanConsumer zipkin2.server.internal.throttle.ThrottledStorageComponent.spanConsumer()",
                    "public Call<Void> zipkin2.server.internal.throttle.ThrottledStorageComponent.accept(List<Span> spans)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/ResultSetFutureCall.java": [
                    "static ResultSet zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.getUninterruptibly(ListenableFuture<ResultSet> future)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4a732e8deefb73a83785adad5ea9b45a810759b9",
        "previous_commit": "d81159324e53559210b57f5a7602b6a0d50617f2",
        "date": 1473080723,
        "releases": {
            "previous": "4a732e8deefb73a83785adad5ea9b45a810759b9",
            "next": "4a732e8deefb73a83785adad5ea9b45a810759b9"
        },
        "commit_message": "Handles RFC 7159 json escaping (#1273)\n\nWe accept data that might violate json escaping rules. This escapes\r\nany UTF-8 String we accept, even binary annotations.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4a732e8deefb73a83785adad5ea9b45a810759b9": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public void zipkin.internal.JsonCodec.write(BinaryAnnotation value, Buffer b)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(BinaryAnnotation value)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(String value)",
                    "public void zipkin.internal.JsonCodec.write(Endpoint value, Buffer b)",
                    "public void zipkin.internal.JsonCodec.write(Span value, Buffer b)",
                    "public void zipkin.internal.JsonCodec.write(DependencyLink value, Buffer b)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(DependencyLink value)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(Annotation value)",
                    "public void zipkin.internal.JsonCodec.write(Annotation value, Buffer b)",
                    "public void zipkin.internal.JsonCodec.write(String value, Buffer buffer)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(Endpoint value)"
                ]
            },
            "d81159324e53559210b57f5a7602b6a0d50617f2": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public void zipkin.internal.JsonCodec.write(BinaryAnnotation value, Buffer b)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(BinaryAnnotation value)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(String value)",
                    "public void zipkin.internal.JsonCodec.write(Endpoint value, Buffer b)",
                    "public void zipkin.internal.JsonCodec.write(Span value, Buffer b)",
                    "public void zipkin.internal.JsonCodec.write(DependencyLink value, Buffer b)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(DependencyLink value)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(Annotation value)",
                    "public void zipkin.internal.JsonCodec.write(Annotation value, Buffer b)",
                    "public void zipkin.internal.JsonCodec.write(String value, Buffer buffer)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(Endpoint value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6ef5b8474723156f7443dcc1268a369fe0e2e1ca",
        "previous_commit": "9dc2da910c0e7b30a37420b487d7e70306249f8b",
        "date": 1453196154,
        "releases": {
            "previous": "6ef5b8474723156f7443dcc1268a369fe0e2e1ca",
            "next": "6ef5b8474723156f7443dcc1268a369fe0e2e1ca"
        },
        "commit_message": "Removes null coersion in Codec in favor of IllegalArgumentException\n\nWhen a codec is reading, it is from a byte array, so the only possiblity\nof problems is malformed input. This uses IllegalArgumentException to\nindicate something the user can fix.\n\nSince all domain objects are locally defined in core, and validated at\nconstruction time, any errors writing to a byte array are bugs. This\nuses AssertionError to indicate a bug.\n\nBefore, we weren't sending an error message to the user. This sends a\nsingle-line description back in the 400 response. It also moves logging\nto the call-site (`ZipkinQueryApiV1`).\n\nFixes #66\n",
        "jmh_dependency": {
            "benchmark_directory": "zipkin-java-benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6ef5b8474723156f7443dcc1268a369fe0e2e1ca": {
                "zipkin-java-core/src/main/java/io/zipkin/internal/JsonCodec.java": [
                    "public List<Span> io.zipkin.internal.JsonCodec.readSpans(byte[] bytes)",
                    "public byte[] io.zipkin.internal.JsonCodec.writeSpan(Span value)",
                    "public BinaryAnnotation io.zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public Span io.zipkin.internal.JsonCodec.readSpan(byte[] bytes)",
                    "private static <T> List<T> io.zipkin.internal.JsonCodec.readList(JsonAdapter<T> adapter, byte[] bytes)",
                    "private static <T> byte[] io.zipkin.internal.JsonCodec.writeList(JsonAdapter<T> adapter, List<T> values)",
                    "public byte[] io.zipkin.internal.JsonCodec.writeTraces(List<List<Span>> traces)",
                    "public List<DependencyLink> io.zipkin.internal.JsonCodec.readDependencyLinks(byte[] bytes)"
                ],
                "zipkin-java-core/src/main/java/io/zipkin/internal/ThriftCodec.java": [
                    "private static <T> byte[] io.zipkin.internal.ThriftCodec.write(ThriftWriter<T> writer, T value)",
                    "static <T> List<T> io.zipkin.internal.ThriftCodec.readList(ThriftReader<T> reader, TProtocol iprot)",
                    "private static <T> T io.zipkin.internal.ThriftCodec.read(ThriftReader<T> reader, byte[] bytes)"
                ]
            },
            "9dc2da910c0e7b30a37420b487d7e70306249f8b": {
                "zipkin-java-core/src/main/java/io/zipkin/internal/JsonCodec.java": [
                    "public List<Span> io.zipkin.internal.JsonCodec.readSpans(byte[] bytes)",
                    "public byte[] io.zipkin.internal.JsonCodec.writeSpan(Span value)",
                    "public BinaryAnnotation io.zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public Span io.zipkin.internal.JsonCodec.readSpan(byte[] bytes)",
                    "private static <T> List<T> io.zipkin.internal.JsonCodec.readList(JsonAdapter<T> adapter, byte[] bytes)",
                    "private static <T> byte[] io.zipkin.internal.JsonCodec.writeList(JsonAdapter<T> adapter, List<T> values)",
                    "public byte[] io.zipkin.internal.JsonCodec.writeTraces(List<List<Span>> traces)",
                    "public List<DependencyLink> io.zipkin.internal.JsonCodec.readDependencyLinks(byte[] bytes)"
                ],
                "zipkin-java-core/src/main/java/io/zipkin/internal/ThriftCodec.java": [
                    "private static <T> byte[] io.zipkin.internal.ThriftCodec.write(ThriftWriter<T> writer, T value)",
                    "static <T> List<T> io.zipkin.internal.ThriftCodec.readList(ThriftReader<T> reader, TProtocol iprot)",
                    "private static <T> T io.zipkin.internal.ThriftCodec.read(ThriftReader<T> reader, byte[] bytes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "78ca75121d30ce631a9e8016e57c1793fd831c63",
        "previous_commit": "f061c8b960e61030edcb356e29d91797f2750075",
        "date": 1563675258,
        "releases": {
            "previous": "78ca75121d30ce631a9e8016e57c1793fd831c63",
            "next": "78ca75121d30ce631a9e8016e57c1793fd831c63"
        },
        "commit_message": "Performs cleanups in Elasticsearch code, seeking better test coverage (#2693)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "78ca75121d30ce631a9e8016e57c1793fd831c63": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public String zipkin2.elasticsearch.ElasticsearchStorage.toString()",
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)",
                    "public final String zipkin2.elasticsearch.ElasticsearchStorage.toString()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/EnsureIndexTemplate.java": [
                    "static void zipkin2.elasticsearch.EnsureIndexTemplate.ensureIndexTemplate(Factory callFactory, String templateUrl, String indexTemplate)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "static float zipkin2.elasticsearch.VersionSpecificTemplates.getVersion(HttpCall.Factory callFactory)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BasicAuthInterceptor.java": [
                    "public HttpResponse zipkin2.elasticsearch.internal.BasicAuthInterceptor.execute(ClientRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BulkCallBuilder.java": [
                    "public HttpCall<Void> zipkin2.elasticsearch.internal.BulkCallBuilder.build()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/JsonReaders.java": [
                    "static void zipkin2.elasticsearch.internal.JsonReaders.visitObject(JsonParser parser, String name, Set<String> result)",
                    "public static List<String> zipkin2.elasticsearch.internal.JsonReaders.collectValuesNamed(JsonParser parser, String name)",
                    "public static JsonParser zipkin2.elasticsearch.internal.JsonReaders.enterPath(JsonParser parser, String path)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "<V> V zipkin2.elasticsearch.internal.client.HttpCall<V>.parseResponse(AggregatedHttpResponse response, BodyConverter<V> bodyConverter)"
                ]
            },
            "f061c8b960e61030edcb356e29d91797f2750075": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public String zipkin2.elasticsearch.ElasticsearchStorage.toString()",
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)",
                    "public final String zipkin2.elasticsearch.ElasticsearchStorage.toString()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/EnsureIndexTemplate.java": [
                    "static void zipkin2.elasticsearch.EnsureIndexTemplate.ensureIndexTemplate(Factory callFactory, String templateUrl, String indexTemplate)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "static float zipkin2.elasticsearch.VersionSpecificTemplates.getVersion(HttpCall.Factory callFactory)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BasicAuthInterceptor.java": [
                    "public HttpResponse zipkin2.elasticsearch.internal.BasicAuthInterceptor.execute(ClientRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BulkCallBuilder.java": [
                    "public HttpCall<Void> zipkin2.elasticsearch.internal.BulkCallBuilder.build()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/JsonReaders.java": [
                    "static void zipkin2.elasticsearch.internal.JsonReaders.visitObject(JsonParser parser, String name, Set<String> result)",
                    "public static List<String> zipkin2.elasticsearch.internal.JsonReaders.collectValuesNamed(JsonParser parser, String name)",
                    "public static JsonParser zipkin2.elasticsearch.internal.JsonReaders.enterPath(JsonParser parser, String path)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "<V> V zipkin2.elasticsearch.internal.client.HttpCall<V>.parseResponse(AggregatedHttpResponse response, BodyConverter<V> bodyConverter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b44940d5c82952e33b198fc1c20ab66a29abc1a6",
        "previous_commit": "846ad9a0aa240f5af24e17aa8a91606c5a3df1e6",
        "date": 1713249853,
        "releases": {
            "previous": "b44940d5c82952e33b198fc1c20ab66a29abc1a6",
            "next": "b44940d5c82952e33b198fc1c20ab66a29abc1a6"
        },
        "commit_message": "Raises floor JRE version from 11 to 17 except core (#3763)\n\nThis raises the floor JRE version of libraries except core from 11 to\r\n17. The only reason we had 17 in the past was due to Spark limitations\r\nthat affected zipkin-dependencies. After this, folks can also consider\r\ngetting rid of AutoValue for the record type (sadly no OpenRewrite for\r\nthat ;).\r\n\r\nThis change was manual except the parts about string formatting,\r\nexception coercing and multi-line literals. Those parts were done with\r\nOpenRewrite via below (reverting changes to core):\r\n\r\n```bash\r\n$ mvn -U org.openrewrite.maven:rewrite-maven-plugin:run -Drewrite.recipeArtifactCoordinates=org.openrewrite.recipe:rewrite-migrate-java:RELEASE -Drewrite.activeRecipes=org.openrewrite.java.migrate.UpgradeToJava17\r\n```\r\n\r\nThe other non-manual step was about JOOQ, which was copy/pasting\r\ncommands from the README, which worked without any issue.\r\n\r\n---------\r\n\r\nSigned-off-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "b44940d5c82952e33b198fc1c20ab66a29abc1a6": {
                "zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java": [
                    "void zipkin2.collector.Collector.handleError(Throwable e, Supplier<String> defaultLogMessage, Callback<Void> callback)"
                ],
                "zipkin-junit5/src/main/java/zipkin2/junit5/ZipkinExtension.java": [
                    "public String zipkin2.junit5.ZipkinExtension.httpUrl()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureKeyspaceMetadata(CqlSession session, String keyspace)",
                    "static void zipkin2.storage.cassandra.Schema.applyCqlFile(Version version, String keyspace, CqlSession session, String resource)",
                    "static Version zipkin2.storage.cassandra.Schema.ensureVersion(com.datastax.oss.driver.api.core.metadata.Metadata metadata)",
                    "static void zipkin2.storage.cassandra.Schema.logAndThrow(String messageFormat, Object... args)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/IndexNameFormatter.java": [
                    "String zipkin2.elasticsearch.internal.IndexNameFormatter.formatIndexPattern(String format, GregorianCalendar current, String prefix)",
                    "public List<String> zipkin2.elasticsearch.internal.IndexNameFormatter.formatTypeAndRange(@Nullable String type, long beginMillis, long endMillis)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getIndexes()",
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getUniqueKeys()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()"
                ]
            },
            "846ad9a0aa240f5af24e17aa8a91606c5a3df1e6": {
                "zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java": [
                    "void zipkin2.collector.Collector.handleError(Throwable e, Supplier<String> defaultLogMessage, Callback<Void> callback)"
                ],
                "zipkin-junit5/src/main/java/zipkin2/junit5/ZipkinExtension.java": [
                    "public String zipkin2.junit5.ZipkinExtension.httpUrl()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureKeyspaceMetadata(CqlSession session, String keyspace)",
                    "static void zipkin2.storage.cassandra.Schema.applyCqlFile(Version version, String keyspace, CqlSession session, String resource)",
                    "static Version zipkin2.storage.cassandra.Schema.ensureVersion(com.datastax.oss.driver.api.core.metadata.Metadata metadata)",
                    "static void zipkin2.storage.cassandra.Schema.logAndThrow(String messageFormat, Object... args)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/IndexNameFormatter.java": [
                    "String zipkin2.elasticsearch.internal.IndexNameFormatter.formatIndexPattern(String format, GregorianCalendar current, String prefix)",
                    "public List<String> zipkin2.elasticsearch.internal.IndexNameFormatter.formatTypeAndRange(@Nullable String type, long beginMillis, long endMillis)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getIndexes()",
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getUniqueKeys()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()"
                ]
            }
        },
        "java_version": {
            "version": "17",
            "should_update_pom": false
        }
    },
    {
        "commit": "f2ac83c90ab12cfdf8761306f75dc6c9f00f5fd6",
        "previous_commit": "73c0a488e7e1b65f08ffd683a8784fd5d419ea0a",
        "date": 1557561084,
        "releases": {
            "previous": "f2ac83c90ab12cfdf8761306f75dc6c9f00f5fd6",
            "next": "f2ac83c90ab12cfdf8761306f75dc6c9f00f5fd6"
        },
        "commit_message": "Remove array copy when decoding UTF-8 field.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f2ac83c90ab12cfdf8761306f75dc6c9f00f5fd6": {
                "zipkin/src/main/java/zipkin2/internal/Dependencies.java": [
                    "public ByteBuffer zipkin2.internal.Dependencies.toThrift()"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> byte[] zipkin2.internal.JsonCodec.writeList(Buffer.Writer<T> writer, List<T> value)",
                    "public static <T> byte[] zipkin2.internal.JsonCodec.write(Buffer.Writer<T> writer, T value)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Fields.java": [
                    "String zipkin2.internal.Proto3Fields.readValue(Buffer buffer, int length)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3SpanWriter.java": [
                    "public byte[] zipkin2.internal.Proto3SpanWriter.writeList(List<Span> spans)",
                    "byte[] zipkin2.internal.Proto3SpanWriter.write(Span onlySpan)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1SpanWriter.java": [
                    "static byte[] zipkin2.internal.V1SpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1ThriftSpanWriter.java": [
                    "public byte[] zipkin2.internal.V1ThriftSpanWriter.writeList(List<Span> spans)",
                    "public byte[] zipkin2.internal.V1ThriftSpanWriter.write(Span onlySpan)",
                    "static byte[] zipkin2.internal.V1ThriftSpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)"
                ]
            },
            "73c0a488e7e1b65f08ffd683a8784fd5d419ea0a": {
                "zipkin/src/main/java/zipkin2/internal/Dependencies.java": [
                    "public ByteBuffer zipkin2.internal.Dependencies.toThrift()"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> byte[] zipkin2.internal.JsonCodec.writeList(Buffer.Writer<T> writer, List<T> value)",
                    "public static <T> byte[] zipkin2.internal.JsonCodec.write(Buffer.Writer<T> writer, T value)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3Fields.java": [
                    "String zipkin2.internal.Proto3Fields.readValue(Buffer buffer, int length)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3SpanWriter.java": [
                    "public byte[] zipkin2.internal.Proto3SpanWriter.writeList(List<Span> spans)",
                    "byte[] zipkin2.internal.Proto3SpanWriter.write(Span onlySpan)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1SpanWriter.java": [
                    "static byte[] zipkin2.internal.V1SpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)"
                ],
                "zipkin/src/main/java/zipkin2/internal/V1ThriftSpanWriter.java": [
                    "public byte[] zipkin2.internal.V1ThriftSpanWriter.writeList(List<Span> spans)",
                    "public byte[] zipkin2.internal.V1ThriftSpanWriter.write(Span onlySpan)",
                    "static byte[] zipkin2.internal.V1ThriftSpanWriter.legacyEndpointBytes(@Nullable Endpoint localEndpoint)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "64266621df25280bb4d5d455f3ef3e3b6a51a44a",
        "previous_commit": "194fff881a542d35557f7cc5e9a5c9f4a1827438",
        "date": 1478444209,
        "releases": {
            "previous": "64266621df25280bb4d5d455f3ef3e3b6a51a44a",
            "next": "64266621df25280bb4d5d455f3ef3e3b6a51a44a"
        },
        "commit_message": "Moves cassandra3 traceId from BigInteger to TraceIdUDT(high,low) (#1394)\n\nThis moves cassandra3's schema to high/low which is more precise and\r\nallows us more options on how to index by only the low 64-bits of the\r\ntrace ID.\r\n\r\nSee #1364",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "64266621df25280bb4d5d455f3ef3e3b6a51a44a": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeSpan(Span span, TraceIdUDT traceId, Long timestamp)",
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeTraceServiceSpanName( String serviceName, String spanName, long timestamp_micro, Long duration, TraceIdUDT traceId)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "public Collection<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.apply(ResultSet input)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.apply(Collection<TraceIdUDT> traceIds)",
                    "public ListenableFuture<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.getRawTrace(long traceId)",
                    "ListenableFuture<Map<TraceIdUDT, Long>> zipkin.storage.cassandra3.CassandraSpanStore.getTraceIdsByAnnotation( String annotationKey, long endTsMillis, long lookbackMillis, int limit)",
                    "ListenableFuture<Map<TraceIdUDT, Long>> zipkin.storage.cassandra3.CassandraSpanStore.getTraceIdsByServiceNames(QueryRequest request)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/DefaultSessionFactory.java": [
                    "private static void zipkin.storage.cassandra3.DefaultSessionFactory.initializeUDTs(Session session)"
                ]
            },
            "194fff881a542d35557f7cc5e9a5c9f4a1827438": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeSpan(Span span, BigInteger traceId, Long timestamp)",
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeTraceServiceSpanName( String serviceName, String spanName, long timestamp_micro, Long duration, BigInteger traceId)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "ListenableFuture<Map<BigInteger, Long>> zipkin.storage.cassandra3.CassandraSpanStore.getTraceIdsByAnnotation( String annotationKey, long endTsMillis, long lookbackMillis, int limit)",
                    "public Collection<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.apply(ResultSet input)",
                    "public ListenableFuture<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.getRawTrace(long traceId)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.apply(Collection<BigInteger> traceIds)",
                    "ListenableFuture<Map<BigInteger, Long>> zipkin.storage.cassandra3.CassandraSpanStore.getTraceIdsByServiceNames(QueryRequest request)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/DefaultSessionFactory.java": [
                    "private static void zipkin.storage.cassandra3.DefaultSessionFactory.initializeUDTs(Session session)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c93e153a407a2df7eaeecff68c6e45eaafbfb683",
        "previous_commit": "fd9054c0a283203ef0d0108aaf0693ca35bee025",
        "date": 1564185740,
        "releases": {
            "previous": "c93e153a407a2df7eaeecff68c6e45eaafbfb683",
            "next": "c93e153a407a2df7eaeecff68c6e45eaafbfb683"
        },
        "commit_message": "Set custom name for elasticsearch requests for nicer traces. (#2709)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c93e153a407a2df7eaeecff68c6e45eaafbfb683": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java": [
                    "Consumer<ClientOptionsBuilder> zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.elasticsearchTracing(Optional<HttpTracing> maybeHttpTracing)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)",
                    "void zipkin2.elasticsearch.ElasticsearchStorage.clear(String index)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/EnsureIndexTemplate.java": [
                    "static void zipkin2.elasticsearch.EnsureIndexTemplate.ensureIndexTemplate(Factory callFactory, String templateUrl, String indexTemplate)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "static float zipkin2.elasticsearch.VersionSpecificTemplates.getVersion(HttpCall.Factory callFactory)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BulkCallBuilder.java": [
                    "public HttpCall<Void> zipkin2.elasticsearch.internal.BulkCallBuilder.build()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "public HttpCall<V> zipkin2.elasticsearch.internal.client.HttpCall<V>.clone()",
                    "CompletableFuture<AggregatedHttpResponse> zipkin2.elasticsearch.internal.client.HttpCall<V>.sendRequest()",
                    "public <V> HttpCall<V> zipkin2.elasticsearch.internal.client.HttpCall<V>.newCall( AggregatedHttpRequest request, BodyConverter<V> bodyConverter, String name)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/SearchCallFactory.java": [
                    "public <V> HttpCall<V> zipkin2.elasticsearch.internal.client.SearchCallFactory.newCall(SearchRequest request, HttpCall.BodyConverter<V> bodyConverter)"
                ]
            },
            "fd9054c0a283203ef0d0108aaf0693ca35bee025": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java": [
                    "Consumer<ClientOptionsBuilder> zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.elasticsearchTracing(Optional<HttpTracing> maybeHttpTracing)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)",
                    "void zipkin2.elasticsearch.ElasticsearchStorage.clear(String index)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/EnsureIndexTemplate.java": [
                    "static void zipkin2.elasticsearch.EnsureIndexTemplate.ensureIndexTemplate(Factory callFactory, String templateUrl, String indexTemplate)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "static float zipkin2.elasticsearch.VersionSpecificTemplates.getVersion(HttpCall.Factory callFactory)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BulkCallBuilder.java": [
                    "public HttpCall<Void> zipkin2.elasticsearch.internal.BulkCallBuilder.build()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "public HttpCall<V> zipkin2.elasticsearch.internal.client.HttpCall<V>.clone()",
                    "public <V> HttpCall<V> zipkin2.elasticsearch.internal.client.HttpCall<V>.newCall(AggregatedHttpRequest request, BodyConverter<V> bodyConverter)",
                    "CompletableFuture<AggregatedHttpResponse> zipkin2.elasticsearch.internal.client.HttpCall<V>.sendRequest()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/SearchCallFactory.java": [
                    "public <V> HttpCall<V> zipkin2.elasticsearch.internal.client.SearchCallFactory.newCall(SearchRequest request, HttpCall.BodyConverter<V> bodyConverter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "51ff45feec501690b0e05f7faac0b0c6101d995e",
        "previous_commit": "b715e4ba9d79e58c3c23cfd426b880fb0f86c52b",
        "date": 1526890059,
        "releases": {
            "previous": "51ff45feec501690b0e05f7faac0b0c6101d995e",
            "next": "51ff45feec501690b0e05f7faac0b0c6101d995e"
        },
        "commit_message": "Aligns versions with Spring Boot 2.0.2 (#2056)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "51ff45feec501690b0e05f7faac0b0c6101d995e": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<UniqueKey<Record>> zipkin.storage.mysql.internal.generated.tables.ZipkinAnnotations.getKeys()",
                    "public ZipkinAnnotations zipkin.storage.mysql.internal.generated.tables.ZipkinAnnotations.rename(String name)",
                    "public ZipkinAnnotations zipkin.storage.mysql.internal.generated.tables.ZipkinAnnotations.as(String alias)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/tables/ZipkinDependencies.java": [
                    "public ZipkinDependencies zipkin.storage.mysql.internal.generated.tables.ZipkinDependencies.rename(String name)",
                    "public List<UniqueKey<Record>> zipkin.storage.mysql.internal.generated.tables.ZipkinDependencies.getKeys()",
                    "public ZipkinDependencies zipkin.storage.mysql.internal.generated.tables.ZipkinDependencies.as(String alias)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/tables/ZipkinSpans.java": [
                    "public ZipkinSpans zipkin.storage.mysql.internal.generated.tables.ZipkinSpans.rename(String name)",
                    "public List<UniqueKey<Record>> zipkin.storage.mysql.internal.generated.tables.ZipkinSpans.getKeys()",
                    "public ZipkinSpans zipkin.storage.mysql.internal.generated.tables.ZipkinSpans.as(String alias)"
                ]
            },
            "b715e4ba9d79e58c3c23cfd426b880fb0f86c52b": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<UniqueKey<Record>> zipkin.storage.mysql.internal.generated.tables.ZipkinAnnotations.getKeys()",
                    "public ZipkinAnnotations zipkin.storage.mysql.internal.generated.tables.ZipkinAnnotations.rename(String name)",
                    "public ZipkinAnnotations zipkin.storage.mysql.internal.generated.tables.ZipkinAnnotations.as(String alias)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/tables/ZipkinDependencies.java": [
                    "public ZipkinDependencies zipkin.storage.mysql.internal.generated.tables.ZipkinDependencies.rename(String name)",
                    "public List<UniqueKey<Record>> zipkin.storage.mysql.internal.generated.tables.ZipkinDependencies.getKeys()",
                    "public ZipkinDependencies zipkin.storage.mysql.internal.generated.tables.ZipkinDependencies.as(String alias)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/tables/ZipkinSpans.java": [
                    "public ZipkinSpans zipkin.storage.mysql.internal.generated.tables.ZipkinSpans.rename(String name)",
                    "public List<UniqueKey<Record>> zipkin.storage.mysql.internal.generated.tables.ZipkinSpans.getKeys()",
                    "public ZipkinSpans zipkin.storage.mysql.internal.generated.tables.ZipkinSpans.as(String alias)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4dc8ba9e9c12550067d699ae3a8ac7bc20e4e6c5",
        "previous_commit": "d45ec7a74c1442fa25b51d8709708bde3c2f786e",
        "date": 1468045210,
        "releases": {
            "previous": "4dc8ba9e9c12550067d699ae3a8ac7bc20e4e6c5",
            "next": "4dc8ba9e9c12550067d699ae3a8ac7bc20e4e6c5"
        },
        "commit_message": "Optimizes out cassandra index inserts that don't improve query results (#1172)\n\nFor example, a trace that fans out into N spans against the same service\r\nwill end up with a fixed amount of cassandra inserts as opposed to a\r\nfunction of N.\r\n\r\nThis removes extra requests when a collector receives a large amount of\r\nspan data for a single trace. That could be the case when one or more of\r\nthe following are true:\r\n\r\n* instrumentation bundles all local spans in a trace into one message\r\n* traces are routed consistently to a single storage component\r\n* there's only one collector\r\n\r\nThe overhead of this feature with defaults should be tens of megabytes\r\nheap. Disable by setting `CassandraStorage.Builder.indexCacheMax(0)`",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4dc8ba9e9c12550067d699ae3a8ac7bc20e4e6c5": {
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/ZipkinCassandraStorageProperties.java": [
                    "public CassandraStorage.Builder zipkin.autoconfigure.storage.cassandra.ZipkinCassandraStorageProperties.toBuilder()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdByDuration(String serviceName, String spanName, long timestamp, long duration, long traceId)",
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "private RegularStatement zipkin.storage.cassandra.CassandraSpanConsumer.maybeUseTtl(Insert value)",
                    "void zipkin.storage.cassandra.CassandraSpanConsumer.clear()",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeSpanName(String serviceName, String spanName)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeServiceName(final String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java": [
                    "protected CassandraSpanConsumer zipkin.storage.cassandra.CassandraStorage.computeGuavaSpanConsumer()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java": [
                    "static Set<String> zipkin.storage.cassandra.CassandraUtil.annotationKeys(Span span)"
                ]
            },
            "d45ec7a74c1442fa25b51d8709708bde3c2f786e": {
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/ZipkinCassandraStorageProperties.java": [
                    "public CassandraStorage.Builder zipkin.autoconfigure.storage.cassandra.ZipkinCassandraStorageProperties.toBuilder()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeTraceIdByDuration(String serviceName, String spanName, long timestamp, long duration, long traceId)",
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "private RegularStatement zipkin.storage.cassandra.CassandraSpanConsumer.maybeUseTtl(Insert value)",
                    "void zipkin.storage.cassandra.CassandraSpanConsumer.clear()",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeSpanName(String serviceName, String spanName)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeServiceName(final String serviceName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java": [
                    "protected CassandraSpanConsumer zipkin.storage.cassandra.CassandraStorage.computeGuavaSpanConsumer()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java": [
                    "static List<String> zipkin.storage.cassandra.CassandraUtil.annotationKeys(Span span)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0a1c40b642b6e2fced936d50a2da67df15daa0f2",
        "previous_commit": "aa474588fd59a82157e5076f823a6bac887457f5",
        "date": 1483970679,
        "releases": {
            "previous": "0a1c40b642b6e2fced936d50a2da67df15daa0f2",
            "next": "0a1c40b642b6e2fced936d50a2da67df15daa0f2"
        },
        "commit_message": "Moves off deprecated brave methods (#1467)\n\nThis updates to the latest version of Brave and avoids deprecated code.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0a1c40b642b6e2fced936d50a2da67df15daa0f2": {
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/brave/TraceZipkinCassandraStorageAutoConfiguration.java": [
                    "SessionFactory zipkin.autoconfigure.storage.cassandra.brave.TraceZipkinCassandraStorageAutoConfiguration.tracingSessionFactory()"
                ],
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/brave/TracedSession.java": [
                    "public void zipkin.autoconfigure.storage.cassandra.brave.TracedSession.update(Host host, Statement statement, Exception e, long nanos)",
                    "public static Session zipkin.autoconfigure.storage.cassandra.brave.TracedSession.create(Session target, Brave brave)"
                ],
                "zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin/autoconfigure/storage/cassandra3/brave/TraceZipkinCassandra3StorageAutoConfiguration.java": [
                    "SessionFactory zipkin.autoconfigure.storage.cassandra3.brave.TraceZipkinCassandra3StorageAutoConfiguration.tracingSessionFactory()"
                ],
                "zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin/autoconfigure/storage/cassandra3/brave/TracedSession.java": [
                    "public static Session zipkin.autoconfigure.storage.cassandra3.brave.TracedSession.create(Session target, Brave brave)",
                    "public void zipkin.autoconfigure.storage.cassandra3.brave.TracedSession.update(Host host, Statement statement, Exception e, long nanos)"
                ],
                "zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/brave/TraceZipkinElasticsearchHttpStorageAutoConfiguration.java": [
                    "OkHttpClient.Builder zipkin.autoconfigure.storage.elasticsearch.http.brave.TraceZipkinElasticsearchHttpStorageAutoConfiguration.elasticsearchOkHttpClientBuilder()"
                ],
                "zipkin-autoconfigure/storage-mysql/src/main/java/zipkin/autoconfigure/storage/mysql/brave/TraceZipkinMySQLStorageAutoConfiguration.java": [
                    "public void zipkin.autoconfigure.storage.mysql.brave.TraceZipkinMySQLStorageAutoConfiguration.renderEnd(ExecuteContext ctx)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/ApiTracerConfiguration.java": [
                    "public void zipkin.server.brave.ApiTracerConfiguration.addInterceptors(InterceptorRegistry registry)"
                ]
            },
            "aa474588fd59a82157e5076f823a6bac887457f5": {
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/brave/TraceZipkinCassandraStorageAutoConfiguration.java": [
                    "SessionFactory zipkin.autoconfigure.storage.cassandra.brave.TraceZipkinCassandraStorageAutoConfiguration.tracingSessionFactory()"
                ],
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/brave/TracedSession.java": [
                    "public void zipkin.autoconfigure.storage.cassandra.brave.TracedSession.update(Host host, Statement statement, Exception e, long nanos)",
                    "public static Session zipkin.autoconfigure.storage.cassandra.brave.TracedSession.create(Session target, Brave brave, SpanCollector collector)"
                ],
                "zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin/autoconfigure/storage/cassandra3/brave/TraceZipkinCassandra3StorageAutoConfiguration.java": [
                    "SessionFactory zipkin.autoconfigure.storage.cassandra3.brave.TraceZipkinCassandra3StorageAutoConfiguration.tracingSessionFactory()"
                ],
                "zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin/autoconfigure/storage/cassandra3/brave/TracedSession.java": [
                    "public void zipkin.autoconfigure.storage.cassandra3.brave.TracedSession.update(Host host, Statement statement, Exception e, long nanos)",
                    "public static Session zipkin.autoconfigure.storage.cassandra3.brave.TracedSession.create(Session target, Brave brave, SpanCollector collector)"
                ],
                "zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/brave/TraceZipkinElasticsearchHttpStorageAutoConfiguration.java": [
                    "OkHttpClient.Builder zipkin.autoconfigure.storage.elasticsearch.http.brave.TraceZipkinElasticsearchHttpStorageAutoConfiguration.elasticsearchOkHttpClientBuilder()"
                ],
                "zipkin-autoconfigure/storage-mysql/src/main/java/zipkin/autoconfigure/storage/mysql/brave/TraceZipkinMySQLStorageAutoConfiguration.java": [
                    "public void zipkin.autoconfigure.storage.mysql.brave.TraceZipkinMySQLStorageAutoConfiguration.renderEnd(ExecuteContext ctx)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/ApiTracerConfiguration.java": [
                    "public void zipkin.server.brave.ApiTracerConfiguration.addInterceptors(InterceptorRegistry registry)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "89d81a7fb344141a2b4e673b560e621f121dcc07",
        "previous_commit": "38c63c1301697ab1b1cf8407cc829a2ff1c69d14",
        "date": 1524568340,
        "releases": {
            "previous": "89d81a7fb344141a2b4e673b560e621f121dcc07",
            "next": "89d81a7fb344141a2b4e673b560e621f121dcc07"
        },
        "commit_message": "Migrates metrics to Micrometer (#2014)\n\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "89d81a7fb344141a2b4e673b560e621f121dcc07": {
                "zipkin-autoconfigure/metrics-prometheus/src/main/java/zipkin/autoconfigure/prometheus/ZipkinPrometheusMetricsAutoConfiguration.java": [
                    "UndertowDeploymentInfoCustomizer zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.httpRequestDurationCustomizer()",
                    "public HttpHandler zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.wrap(HttpHandler next)",
                    "public void zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.handleRequest(HttpServerExchange exchange)"
                ],
                "zipkin-server/src/main/java/zipkin/server/internal/ActuateCollectorMetrics.java": [
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementMessagesDropped()",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementMessages()",
                    "public ActuateCollectorMetrics zipkin.server.internal.ActuateCollectorMetrics.forTransport(String transportType)",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementSpans(int quantity)",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementSpansDropped(int quantity)",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementBytes(int quantity)"
                ]
            },
            "38c63c1301697ab1b1cf8407cc829a2ff1c69d14": {
                "zipkin-autoconfigure/metrics-prometheus/src/main/java/zipkin/autoconfigure/prometheus/ZipkinPrometheusMetricsAutoConfiguration.java": [
                    "UndertowDeploymentInfoCustomizer zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.httpRequestDurationCustomizer()",
                    "public HttpHandler zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.wrap(HttpHandler next)",
                    "public void zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.handleRequest(HttpServerExchange exchange)"
                ],
                "zipkin-server/src/main/java/zipkin/server/internal/ActuateCollectorMetrics.java": [
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementMessagesDropped()",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementMessages()",
                    "public ActuateCollectorMetrics zipkin.server.internal.ActuateCollectorMetrics.forTransport(String transportType)",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementSpans(int quantity)",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementSpansDropped(int quantity)",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementBytes(int quantity)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1009002f05bf8239e5438cc14ad5490e192f25f0",
        "previous_commit": "30e848ee7b81c4aba54ee7afa229ddc1cfe029d8",
        "date": 1510466177,
        "releases": {
            "previous": "1009002f05bf8239e5438cc14ad5490e192f25f0",
            "next": "1009002f05bf8239e5438cc14ad5490e192f25f0"
        },
        "commit_message": "Switches cassandra3 to span2 model\n\nUpgrade cassandra3 storage backend use the zipkin2.* API instead of zipkin.*\nBump cassandra3 backend to require minimum Java8.\nTake service_name out of the annotation search index, using a combination of two SASI instead.\nRemove TraceIdUDT and BinaryAnnotationUDT. Trace ID is now stored as text instead of a UDT.\nAdds the ListenableFutureCall class, which handles our Call->guava interactions.\nChange the default keyspace to \"zipkin2_cassandra3\", making it explicit it's a fresh start and breaking compatibility.\nAdd the precondition check that SimpleStrategy and LOCAL_* consistency levels can not be used together.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1009002f05bf8239e5438cc14ad5490e192f25f0": {
                "zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin/autoconfigure/storage/cassandra3/ZipkinCassandra3StorageProperties.java": [
                    "public Builder zipkin.autoconfigure.storage.cassandra3.ZipkinCassandra3StorageProperties.toBuilder()"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "ListenableFuture<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.getSpansByTraceIds(Set<String> traceIds, int limit)",
                    "public List<DependencyLink> zipkin.storage.cassandra3.CassandraSpanStore.apply(@Nullable ResultSet rs)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraUtil.java": [
                    "static List<String> zipkin.storage.cassandra3.CassandraUtil.annotationKeys(QueryRequest request)",
                    "static Set<String> zipkin.storage.cassandra3.CassandraUtil.annotationKeys(Span span)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/DefaultSessionFactory.java": [
                    "private static void zipkin.storage.cassandra3.DefaultSessionFactory.initializeUDTs(Session session)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Schema.java": [
                    "Endpoint zipkin.storage.cassandra3.Schema.toEndpoint()",
                    "static Metadata zipkin.storage.cassandra3.Schema.readMetadata(Session session)",
                    "Annotation zipkin.storage.cassandra3.Schema.toAnnotation()"
                ]
            },
            "30e848ee7b81c4aba54ee7afa229ddc1cfe029d8": {
                "zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin/autoconfigure/storage/cassandra3/ZipkinCassandra3StorageProperties.java": [
                    "public Builder zipkin.autoconfigure.storage.cassandra3.ZipkinCassandra3StorageProperties.toBuilder()"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "ListenableFuture<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.getSpansByTraceIds(Set<TraceIdUDT> traceIds, int limit)",
                    "public List<DependencyLink> zipkin.storage.cassandra3.CassandraSpanStore.apply(@Nullable ResultSet rs)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraUtil.java": [
                    "static List<String> zipkin.storage.cassandra3.CassandraUtil.annotationKeys(QueryRequest request)",
                    "static Set<String> zipkin.storage.cassandra3.CassandraUtil.annotationKeys(Span span)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/DefaultSessionFactory.java": [
                    "private static void zipkin.storage.cassandra3.DefaultSessionFactory.initializeUDTs(Session session)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Schema.java": [
                    "private Endpoint zipkin.storage.cassandra3.Schema.toEndpoint()",
                    "static Metadata zipkin.storage.cassandra3.Schema.readMetadata(Session session)",
                    "Annotation zipkin.storage.cassandra3.Schema.toAnnotation()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d1345b92740824e442e68a10f9ef44adcb43eef0",
        "previous_commit": "5037e4fc6c2a3b06128e70bdde56ec6e8409c4fb",
        "date": 1510795770,
        "releases": {
            "previous": "d1345b92740824e442e68a10f9ef44adcb43eef0",
            "next": "d1345b92740824e442e68a10f9ef44adcb43eef0"
        },
        "commit_message": "Pretties cassandra3 toString and backfills tests (#1797)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d1345b92740824e442e68a10f9ef44adcb43eef0": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)",
                    "public StoreSpansCall zipkin2.storage.cassandra.CassandraSpanConsumer.clone()"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.CassandraSpanStore.getTraces(QueryRequest request)",
                    "public Call<List<Span>> zipkin2.storage.cassandra.CassandraSpanStore.getTrace(String traceId)",
                    "Call<List<List<Span>>> zipkin2.storage.cassandra.CassandraSpanStore.doGetTraces(QueryRequest request)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "public String zipkin2.storage.cassandra.SelectFromSpan.toString()",
                    "FlatMapper<Set<String>, List<List<Span>>> zipkin2.storage.cassandra.SelectFromSpan.newFlatMapper(int limit)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectFromSpan.newFuture()"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/AggregateIntoSet.java": [
                    "public AggregateIntoSet<T> zipkin2.storage.cassandra.internal.call.AggregateIntoSet<T>.clone()"
                ]
            },
            "5037e4fc6c2a3b06128e70bdde56ec6e8409c4fb": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)",
                    "public StoreSpansCall zipkin2.storage.cassandra.CassandraSpanConsumer.clone()"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.CassandraSpanStore.getTraces(QueryRequest request)",
                    "public Call<List<Span>> zipkin2.storage.cassandra.CassandraSpanStore.getTrace(String traceId)",
                    "Call<List<List<Span>>> zipkin2.storage.cassandra.CassandraSpanStore.doGetTraces(QueryRequest request)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "public String zipkin2.storage.cassandra.SelectFromSpan.toString()",
                    "FlatMapper<Set<String>, List<List<Span>>> zipkin2.storage.cassandra.SelectFromSpan.newFlatMapper(int limit)",
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectFromSpan.newFuture()"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/AggregateIntoSet.java": [
                    "public AggregateIntoSet<T> zipkin2.storage.cassandra.internal.call.AggregateIntoSet<T>.clone()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bf9f2529f14401d04b66dd59de8a81d05f548cac",
        "previous_commit": "7cac2ebea37c66040ce0d59b32f65b7452615637",
        "date": 1528383256,
        "releases": {
            "previous": "bf9f2529f14401d04b66dd59de8a81d05f548cac",
            "next": "bf9f2529f14401d04b66dd59de8a81d05f548cac"
        },
        "commit_message": "Adds and uses io.zipkin.zipkin2:zipkin-collector a v2 port\n\nThis adds and uses a port of the v1 collector, making the server no\nlonger depedendent on beans from the `io.zipkin.java` package. This\nmeans modules such as in zipkin-aws and zipkin-gcp.. they no longer\nneed to declare any dependencies on `io.zipkin.java`.\n\n* Adds zipkin-collector which is a Java 8+ port of the old collector\n* Renames old kafka to kafka08 and new one to kafka\n* Makes the server not depend on the old collector code.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bf9f2529f14401d04b66dd59de8a81d05f548cac": {
                "zipkin-autoconfigure/collector-scribe/src/main/java/zipkin/autoconfigure/collector/scribe/ZipkinScribeCollectorProperties.java": [
                    "public ScribeCollector.Builder zipkin.autoconfigure.collector.scribe.ZipkinScribeCollectorProperties.toBuilder()"
                ],
                "zipkin-server/src/main/java/zipkin/server/internal/ActuateCollectorMetrics.java": [
                    "public ActuateCollectorMetrics zipkin.server.internal.ActuateCollectorMetrics.forTransport(String transportType)"
                ],
                "zipkin-server/src/main/java/zipkin/server/internal/ZipkinHealthIndicator.java": [
                    "void zipkin.server.internal.ZipkinHealthIndicator.addComponent(Component component)",
                    "public synchronized Health zipkin.server.internal.ZipkinHealthIndicator.health()"
                ],
                "zipkin-server/src/main/java/zipkin/server/internal/ZipkinQueryApiV2.java": [
                    "public String zipkin.server.internal.ZipkinQueryApiV2.getTrace(@PathVariable String traceIdHex, WebRequest request)",
                    "public ResponseEntity<List<String>> zipkin.server.internal.ZipkinQueryApiV2.getServiceNames()"
                ],
                "zipkin-server/src/main/java/zipkin/server/internal/brave/TracingConfiguration.java": [
                    "public Encoding zipkin.server.internal.brave.TracingConfiguration.encoding()",
                    "public Call<Void> zipkin.server.internal.brave.TracingConfiguration.sendSpans(List<byte[]> encodedSpans)",
                    "public int zipkin.server.internal.brave.TracingConfiguration.messageSizeInBytes(List<byte[]> list)"
                ]
            },
            "7cac2ebea37c66040ce0d59b32f65b7452615637": {
                "zipkin-autoconfigure/collector-scribe/src/main/java/zipkin/autoconfigure/collector/scribe/ZipkinScribeCollectorProperties.java": [
                    "public ScribeCollector.Builder zipkin.autoconfigure.collector.scribe.ZipkinScribeCollectorProperties.toBuilder()"
                ],
                "zipkin-server/src/main/java/zipkin/server/internal/ActuateCollectorMetrics.java": [
                    "public ActuateCollectorMetrics zipkin.server.internal.ActuateCollectorMetrics.forTransport(String transportType)"
                ],
                "zipkin-server/src/main/java/zipkin/server/internal/ZipkinHealthIndicator.java": [
                    "void zipkin.server.internal.ZipkinHealthIndicator.addComponent(Component component)",
                    "public synchronized Health zipkin.server.internal.ZipkinHealthIndicator.health()"
                ],
                "zipkin-server/src/main/java/zipkin/server/internal/ZipkinQueryApiV2.java": [
                    "public String zipkin.server.internal.ZipkinQueryApiV2.getTrace(@PathVariable String traceIdHex, WebRequest request)",
                    "public ResponseEntity<List<String>> zipkin.server.internal.ZipkinQueryApiV2.getServiceNames()"
                ],
                "zipkin-server/src/main/java/zipkin/server/internal/brave/TracingConfiguration.java": [
                    "public Encoding zipkin.server.internal.brave.TracingConfiguration.encoding()",
                    "public Call<Void> zipkin.server.internal.brave.TracingConfiguration.sendSpans(List<byte[]> encodedSpans)",
                    "public int zipkin.server.internal.brave.TracingConfiguration.messageSizeInBytes(List<byte[]> list)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "88e0ef19ded7a5054e58196c5d1c2ebce8a63fea",
        "previous_commit": "a1444f7053aa10f01cf28ed934369fb9cf75540b",
        "date": 1502871622,
        "releases": {
            "previous": "88e0ef19ded7a5054e58196c5d1c2ebce8a63fea",
            "next": "88e0ef19ded7a5054e58196c5d1c2ebce8a63fea"
        },
        "commit_message": "Quiets build warnings and fixes IPv6 clock skew bug (#1692)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "88e0ef19ded7a5054e58196c5d1c2ebce8a63fea": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/PartitionKeyToTraceId.java": [
                    "public int zipkin.storage.cassandra.PartitionKeyToTraceId.hashCode()"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Schema.java": [
                    "public int zipkin.storage.cassandra3.Schema.hashCode()"
                ],
                "zipkin/src/main/java/zipkin/Annotation.java": [
                    "public int zipkin.Annotation.hashCode()"
                ],
                "zipkin/src/main/java/zipkin/DependencyLink.java": [
                    "public int zipkin.DependencyLink.hashCode()"
                ],
                "zipkin/src/main/java/zipkin/Endpoint.java": [
                    "public Builder zipkin.Endpoint.ipv6(@Nullable byte[] ipv6)"
                ],
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public int zipkin.Span.hashCode()"
                ],
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static boolean zipkin.internal.CorrectForClockSkew.ipsMatch(Endpoint skew, Endpoint that)"
                ],
                "zipkin/src/main/java/zipkin/internal/Dependencies.java": [
                    "public int zipkin.internal.Dependencies.hashCode()"
                ],
                "zipkin/src/main/java/zipkin/storage/QueryRequest.java": [
                    "public int zipkin.storage.QueryRequest.hashCode()"
                ]
            },
            "a1444f7053aa10f01cf28ed934369fb9cf75540b": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/PartitionKeyToTraceId.java": [
                    "public int zipkin.storage.cassandra.PartitionKeyToTraceId.hashCode()"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Schema.java": [
                    "public int zipkin.storage.cassandra3.Schema.hashCode()"
                ],
                "zipkin/src/main/java/zipkin/Annotation.java": [
                    "public int zipkin.Annotation.hashCode()"
                ],
                "zipkin/src/main/java/zipkin/DependencyLink.java": [
                    "public int zipkin.DependencyLink.hashCode()"
                ],
                "zipkin/src/main/java/zipkin/Endpoint.java": [
                    "public Builder zipkin.Endpoint.ipv6(@Nullable byte[] ipv6)"
                ],
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public int zipkin.Span.hashCode()"
                ],
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static boolean zipkin.internal.CorrectForClockSkew.ipsMatch(Endpoint skew, Endpoint that)"
                ],
                "zipkin/src/main/java/zipkin/internal/Dependencies.java": [
                    "public int zipkin.internal.Dependencies.hashCode()"
                ],
                "zipkin/src/main/java/zipkin/storage/QueryRequest.java": [
                    "public int zipkin.storage.QueryRequest.hashCode()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e43a03162032783f5d4fa12b8b16bca61b0474bc",
        "previous_commit": "5d6177ae8641472a4bb51bfa1b3bd7e3741b4828",
        "date": 1553657838,
        "releases": {
            "previous": "e43a03162032783f5d4fa12b8b16bca61b0474bc",
            "next": "e43a03162032783f5d4fa12b8b16bca61b0474bc"
        },
        "commit_message": "Extracts AggregateCall so other storage consumers can use it (#2470)\n\nAggregateCall is used by a couple cassandra implementations here. It is\r\nalso used by voltdb and soon dynamodb. This extracts it.\r\n\r\nThis also fixes an overhead problem where null rate limited calls were\r\naccidentally added to the aggregate in cassandra.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e43a03162032783f5d4fa12b8b16bca61b0474bc": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.v1.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectDependencies.java": [
                    "public List<DependencyLink> zipkin2.storage.cassandra.v1.SelectDependencies.map(ResultSet rs)",
                    "public String zipkin2.storage.cassandra.v1.SelectDependencies.toString()",
                    "Call<List<DependencyLink>> zipkin2.storage.cassandra.v1.SelectDependencies.create(long endTs, long lookback)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectDependencies.java": [
                    "public String zipkin2.storage.cassandra.SelectDependencies.toString()",
                    "Call<List<DependencyLink>> zipkin2.storage.cassandra.SelectDependencies.create(long endTs, long lookback)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "protected BiConsumer<Row, List<Span>> zipkin2.storage.cassandra.SelectFromSpan.accumulator()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/ResultSetFutureCall.java": [
                    "public void zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.run()"
                ]
            },
            "5d6177ae8641472a4bb51bfa1b3bd7e3741b4828": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.v1.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectDependencies.java": [
                    "public List<DependencyLink> zipkin2.storage.cassandra.v1.SelectDependencies.map(ResultSet rs)",
                    "public String zipkin2.storage.cassandra.v1.SelectDependencies.toString()",
                    "Call<List<DependencyLink>> zipkin2.storage.cassandra.v1.SelectDependencies.create(long endTs, long lookback)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectDependencies.java": [
                    "public String zipkin2.storage.cassandra.SelectDependencies.toString()",
                    "Call<List<DependencyLink>> zipkin2.storage.cassandra.SelectDependencies.create(long endTs, long lookback)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "protected BiConsumer<Row, List<Span>> zipkin2.storage.cassandra.SelectFromSpan.accumulator()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/ResultSetFutureCall.java": [
                    "public void zipkin2.storage.cassandra.internal.call.ResultSetFutureCall.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6e54d49f4f2726863fb66ff016ae8da713bdf707",
        "previous_commit": "9674c46fa82b5f281fee30c23138aa09c18ee816",
        "date": 1603279248,
        "releases": {
            "previous": "6e54d49f4f2726863fb66ff016ae8da713bdf707",
            "next": "6e54d49f4f2726863fb66ff016ae8da713bdf707"
        },
        "commit_message": "Removes Cassandra querybuilder dependency (#3250)\n\nThis removes the querybuilder dependency in efforts to reduce size.\r\n\r\nWhile this saves a couple hundred K, it doesn't change things further as\r\ndatastax core lib depends still on a 2.8M shaded guava jar.\r\n\r\nI've raised a help request on that for now, but reducing the API surface\r\narea to only core libs should help anyway.\r\n\r\nhttps://groups.google.com/u/1/a/lists.datastax.com/g/java-driver-user/c/aN7NkxX_yQk",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6e54d49f4f2726863fb66ff016ae8da713bdf707": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertTrace.java": [
                    "protected CompletionStage<AsyncResultSet> zipkin2.storage.cassandra.v1.InsertTrace.newCompletionStage()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectFromTraces.java": [
                    "Call<List<List<Span>>> zipkin2.storage.cassandra.v1.SelectFromTraces.newCall(Iterable<String> traceIds)",
                    "Call<List<Span>> zipkin2.storage.cassandra.v1.SelectFromTraces.newCall(String hexTraceId)",
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.v1.SelectFromTraces.map(Set<Long> input)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/TraceIdIndexer.java": [
                    "public Iterator<Input> zipkin2.storage.cassandra.v1.RealTraceIdIndexer.iterator()",
                    "public Iterator<Input> zipkin2.storage.cassandra.v1..iterator()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromServiceSpan.java": [
                    "protected CompletionStage<AsyncResultSet> zipkin2.storage.cassandra.SelectTraceIdsFromServiceSpan.newCompletionStage()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromSpan.java": [
                    "protected CompletionStage<AsyncResultSet> zipkin2.storage.cassandra.SelectTraceIdsFromSpan.newCompletionStage()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/InsertEntry.java": [
                    "public String zipkin2.storage.cassandra.internal.call.InsertEntry.toString()"
                ]
            },
            "9674c46fa82b5f281fee30c23138aa09c18ee816": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertTrace.java": [
                    "protected CompletionStage<AsyncResultSet> zipkin2.storage.cassandra.v1.InsertTrace.newCompletionStage()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectFromTraces.java": [
                    "Call<List<List<Span>>> zipkin2.storage.cassandra.v1.SelectFromTraces.newCall(Iterable<String> traceIds)",
                    "Call<List<Span>> zipkin2.storage.cassandra.v1.SelectFromTraces.newCall(String hexTraceId)",
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.v1.SelectFromTraces.map(Set<Long> input)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/TraceIdIndexer.java": [
                    "public Iterator<Input> zipkin2.storage.cassandra.v1.RealTraceIdIndexer.iterator()",
                    "public Iterator<Input> zipkin2.storage.cassandra.v1..iterator()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromServiceSpan.java": [
                    "protected CompletionStage<AsyncResultSet> zipkin2.storage.cassandra.SelectTraceIdsFromServiceSpan.newCompletionStage()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromSpan.java": [
                    "protected CompletionStage<AsyncResultSet> zipkin2.storage.cassandra.SelectTraceIdsFromSpan.newCompletionStage()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/InsertEntry.java": [
                    "public String zipkin2.storage.cassandra.internal.call.InsertEntry.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f238246b30ffae0e52b8323e3547a0d97b9aef0c",
        "previous_commit": "5586bbe83e2a8c6f05c385bf6558053a1694d41b",
        "date": 1563322989,
        "releases": {
            "previous": "f238246b30ffae0e52b8323e3547a0d97b9aef0c",
            "next": "f238246b30ffae0e52b8323e3547a0d97b9aef0c"
        },
        "commit_message": "Makes toString of components sane and fixes self-tracing initialization (#2675)\n\nThis fixes toString used in health check and some wonky wiring that\r\ndidn't work.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f238246b30ffae0e52b8323e3547a0d97b9aef0c": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingConfiguration.java": [
                    "public void zipkin2.server.internal.brave.TracingConfiguration.incrementMessages()",
                    "public Call<Void> zipkin2.server.internal.brave.TracingConfiguration.sendSpans(List<byte[]> encodedSpans)",
                    "public void zipkin2.server.internal.brave.TracingConfiguration.incrementSpanBytes(int i)",
                    "public void zipkin2.server.internal.brave.TracingConfiguration.incrementMessagesDropped(Throwable throwable)",
                    "public void zipkin2.server.internal.brave.TracingConfiguration.incrementSpansDropped(int i)",
                    "public void zipkin2.server.internal.brave.TracingConfiguration.incrementSpans(int i)",
                    "public CheckResult zipkin2.server.internal.brave.TracingConfiguration.check()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public String zipkin2.elasticsearch.ElasticsearchStorage.toString()",
                    "public final String zipkin2.elasticsearch.ElasticsearchStorage.toString()"
                ]
            },
            "5586bbe83e2a8c6f05c385bf6558053a1694d41b": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingConfiguration.java": [
                    "public void zipkin2.server.internal.brave.TracingConfiguration.incrementMessages()",
                    "public Call<Void> zipkin2.server.internal.brave.TracingConfiguration.sendSpans(List<byte[]> encodedSpans)",
                    "public void zipkin2.server.internal.brave.TracingConfiguration.incrementSpanBytes(int i)",
                    "public void zipkin2.server.internal.brave.TracingConfiguration.incrementMessagesDropped(Throwable throwable)",
                    "public void zipkin2.server.internal.brave.TracingConfiguration.incrementSpansDropped(int i)",
                    "public void zipkin2.server.internal.brave.TracingConfiguration.incrementSpans(int i)",
                    "public CheckResult zipkin2.server.internal.brave.TracingConfiguration.check()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public String zipkin2.elasticsearch.ElasticsearchStorage.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b543f09a89284a193a030469e854bd0e828c2df0",
        "previous_commit": "cf4df43952f2b82496c2e4c730765e7b70eba22b",
        "date": 1484715527,
        "releases": {
            "previous": "b543f09a89284a193a030469e854bd0e828c2df0",
            "next": "b543f09a89284a193a030469e854bd0e828c2df0"
        },
        "commit_message": "Begins migration off Elasticsearch 2.x library (and Guava) (#1495)\n\nCurrently, our Elasticsearch 2.x dependency makes it impossible to load\r\nrecent versions of Elasticsearch or Guava.\r\n\r\nThis begins work to migrate off by porting write and health code to not\r\nuse guava types.\r\n\r\nSee #1431",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b543f09a89284a193a030469e854bd0e828c2df0": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java": [
                    "Void zipkin.storage.elasticsearch.http.HttpBulkIndexer<T>.convert(ResponseBody responseBody)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "protected String zipkin.storage.elasticsearch.http.HttpClient.getVersion()",
                    "protected void zipkin.storage.elasticsearch.http.HttpClient.ensureTemplate(String name, String indexTemplate)",
                    "protected void zipkin.storage.elasticsearch.http.HttpClient.ensureClusterReady(String catchAll)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchStorage.java": [
                    "public CheckResult zipkin.storage.elasticsearch.ElasticsearchStorage.check()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/LazyClient.java": [
                    "protected InternalElasticsearchClient zipkin.storage.elasticsearch.LazyClient.compute()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/NativeClient.java": [
                    "protected void zipkin.storage.elasticsearch.NativeClient.add(String index, byte[] spanBytes)",
                    "protected BulkSpanIndexer zipkin.storage.elasticsearch.NativeClient.bulkSpanIndexer()"
                ]
            },
            "cf4df43952f2b82496c2e4c730765e7b70eba22b": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java": [
                    "Void zipkin.storage.elasticsearch.http.HttpBulkIndexer<T>.convert(ResponseBody responseBody)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "protected String zipkin.storage.elasticsearch.http.HttpClient.getVersion()",
                    "protected void zipkin.storage.elasticsearch.http.HttpClient.ensureTemplate(String name, String indexTemplate)",
                    "protected void zipkin.storage.elasticsearch.http.HttpClient.ensureClusterReady(String catchAll)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchStorage.java": [
                    "public CheckResult zipkin.storage.elasticsearch.ElasticsearchStorage.check()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/LazyClient.java": [
                    "protected InternalElasticsearchClient zipkin.storage.elasticsearch.LazyClient.compute()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/NativeClient.java": [
                    "protected void zipkin.storage.elasticsearch.NativeClient.add(String index, byte[] spanBytes)",
                    "protected BulkSpanIndexer zipkin.storage.elasticsearch.NativeClient.bulkSpanIndexer()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4afa5d8f25195e9d2fa77b78e679d2ebb73d265d",
        "previous_commit": "22f93ed1c96adfb570414e03d3accc735eead474",
        "date": 1543823531,
        "releases": {
            "previous": "4afa5d8f25195e9d2fa77b78e679d2ebb73d265d",
            "next": "4afa5d8f25195e9d2fa77b78e679d2ebb73d265d"
        },
        "commit_message": "Removes some redundant code and allocations in SpanNode\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4afa5d8f25195e9d2fa77b78e679d2ebb73d265d": {
                "zipkin/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin2.internal.DependencyLinker.putTrace(List<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin2/internal/SpanNode.java": [
                    "void zipkin2.internal.SpanNode.process(Span span)",
                    "public SpanNode zipkin2.internal.SpanNode.next()",
                    "public SpanNode zipkin2.internal.SpanNode.build(List<Span> spans)",
                    "public int zipkin2.internal.SpanNode.hashCode()",
                    "public boolean zipkin2.internal.SpanNode.equals(Object o)",
                    "void zipkin2.internal.SpanNode.index(Span span)",
                    "SpanNode zipkin2.internal.SpanNode.addChild(SpanNode child)"
                ]
            },
            "22f93ed1c96adfb570414e03d3accc735eead474": {
                "zipkin/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin2.internal.DependencyLinker.putTrace(List<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin2/internal/SpanNode.java": [
                    "void zipkin2.internal.SpanNode.process(Span span)",
                    "public SpanNode zipkin2.internal.SpanNode.next()",
                    "public SpanNode zipkin2.internal.SpanNode.build(List<Span> spans)",
                    "public int zipkin2.internal.SpanNode.hashCode()",
                    "public boolean zipkin2.internal.SpanNode.equals(Object o)",
                    "void zipkin2.internal.SpanNode.index(Span span)",
                    "SpanNode zipkin2.internal.SpanNode.addChild(SpanNode child)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "184894c692583f9e99ae053bab174b5613b8dd11",
        "previous_commit": "1f402e0b3566c460ec26838b4837c45c0ca6402f",
        "date": 1462536599,
        "releases": {
            "previous": "184894c692583f9e99ae053bab174b5613b8dd11",
            "next": "184894c692583f9e99ae053bab174b5613b8dd11"
        },
        "commit_message": "Makes /api/v1/traces serviceName parameter optional\n\nThis makes it possible to make cross-service tools without an explicit\nfan-out.\n\nFixes #182\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "184894c692583f9e99ae053bab174b5613b8dd11": {
                "interop/src/main/java/zipkin/interop/ScalaSpanStoreAdapter.java": [
                    "public Future<Seq<List<Span>>> zipkin.interop.ScalaSpanStoreAdapter.getTraces(QueryRequest input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsByDuration(QueryRequest request)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsBySpanName(String serviceName, String spanName, long endTs, long lookback, int limit)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java": [
                    "private static SelectOffsetStep<Record1<Long>> zipkin.jdbc.JDBCSpanStore.toTraceIdQuery(DSLContext context, QueryRequest request)"
                ],
                "zipkin/src/main/java/zipkin/InMemorySpanStore.java": [
                    "static boolean zipkin.InMemorySpanStore.test(QueryRequest request, List<Span> spans)",
                    "public int zipkin.InMemorySpanStore.compare(Pair<Long> left, Pair<Long> right)",
                    "public void zipkin.InMemorySpanStore.accept(List<Span> spans)"
                ]
            },
            "1f402e0b3566c460ec26838b4837c45c0ca6402f": {
                "interop/src/main/java/zipkin/interop/ScalaSpanStoreAdapter.java": [
                    "public Future<Seq<List<Span>>> zipkin.interop.ScalaSpanStoreAdapter.getTraces(QueryRequest input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsByDuration(QueryRequest request)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsBySpanName(String serviceName, String spanName, long endTs, long lookback, int limit)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java": [
                    "private static SelectOffsetStep<Record1<Long>> zipkin.jdbc.JDBCSpanStore.toTraceIdQuery(DSLContext context, QueryRequest request)"
                ],
                "zipkin/src/main/java/zipkin/InMemorySpanStore.java": [
                    "public int zipkin.InMemorySpanStore.compare(Pair<Long> left, Pair<Long> right)",
                    "public void zipkin.InMemorySpanStore.accept(List<Span> spans)",
                    "private static boolean zipkin.InMemorySpanStore.test(QueryRequest request, List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "50c748ca4645ab05e0ba3469197b2a9559d407e5",
        "previous_commit": "fa5230b1fdae152bb812d10312d95c724861538d",
        "date": 1596354065,
        "releases": {
            "previous": "50c748ca4645ab05e0ba3469197b2a9559d407e5",
            "next": "50c748ca4645ab05e0ba3469197b2a9559d407e5"
        },
        "commit_message": "Stops using prepared or query builder statements for simple queries (#3156)\n\nBefore, we needlessly prepared service name query, which would have no\r\nparameters. While, this is being followed up below, it is unlikely that\r\npreparing is better than directly executing the statement:\r\nhttps://groups.google.com/a/lists.datastax.com/forum/#!topic/java-driver-user/d6wLkH3xDLI\r\n\r\nMore importantly, there is a bug in the cassandra driver >v3.6 which\r\ncrashes on `QueryBuilder` statements that have no parameters. This\r\nuses a simple statement for that instead (healthcheck). Moreover, the\r\nlog category that shows connection failures is now suggested in our\r\ndocs.\r\n\r\nSee https://github.com/datastax/java-driver/pull/1138 for the NPE",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "50c748ca4645ab05e0ba3469197b2a9559d407e5": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public CheckResult zipkin2.storage.cassandra.v1.CassandraStorage.check()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectServiceNames.java": [
                    "public SelectServiceNames zipkin2.storage.cassandra.v1.SelectServiceNames.clone()",
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectServiceNames.newFuture()",
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectServiceNames.create()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public CheckResult zipkin2.storage.cassandra.CassandraStorage.check()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectServiceNames.create()",
                    "public SelectServiceNames zipkin2.storage.cassandra.SelectServiceNames.clone()",
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectServiceNames.newFuture()"
                ]
            },
            "fa5230b1fdae152bb812d10312d95c724861538d": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public CheckResult zipkin2.storage.cassandra.v1.CassandraStorage.check()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectServiceNames.java": [
                    "public SelectServiceNames zipkin2.storage.cassandra.v1.SelectServiceNames.clone()",
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectServiceNames.newFuture()",
                    "Call<List<String>> zipkin2.storage.cassandra.v1.SelectServiceNames.create()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public CheckResult zipkin2.storage.cassandra.CassandraStorage.check()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectServiceNames.java": [
                    "Call<List<String>> zipkin2.storage.cassandra.SelectServiceNames.create()",
                    "public SelectServiceNames zipkin2.storage.cassandra.SelectServiceNames.clone()",
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectServiceNames.newFuture()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fa4bee068b3366be3440b15f50b4b9368917cbc2",
        "previous_commit": "a931221c9d1bd9c3e3148ba3c853665ddaa08788",
        "date": 1560502974,
        "releases": {
            "previous": "fa4bee068b3366be3440b15f50b4b9368917cbc2",
            "next": "fa4bee068b3366be3440b15f50b4b9368917cbc2"
        },
        "commit_message": "Updates to Armeria 0.87 and addresses deprecations (#2631)\n\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fa4bee068b3366be3440b15f50b4b9368917cbc2": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeInboundHandler.java": [
                    "void zipkin2.collector.scribe.ScribeInboundHandler.maybeReadPayload(ChannelHandlerContext ctx)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/MetricsHealthController.java": [
                    "public HttpResponse zipkin2.server.internal.MetricsHealthController.getHealth()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "static HttpData zipkin2.server.internal.UnzippingBytesRequestConverter.convertRequest(ServiceRequestContext ctx, AggregatedHttpRequest request)",
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "AggregatedHttpResponse zipkin2.server.internal.ZipkinQueryApiV2.maybeCacheNames(boolean shouldCacheControl, List<String> values)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "ArmeriaServerConfigurator zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.notFoundMetricCollector()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "ArmeriaServerConfigurator zipkin2.server.internal.ui.ZipkinUiConfiguration.uiServerConfigurator( CompressionProperties compressionProperties, IndexSwitchingService indexSwitchingService)",
                    "IndexSwitchingService zipkin2.server.internal.ui.ZipkinUiConfiguration.indexSwitchingService()"
                ]
            },
            "a931221c9d1bd9c3e3148ba3c853665ddaa08788": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeInboundHandler.java": [
                    "void zipkin2.collector.scribe.ScribeInboundHandler.maybeReadPayload(ChannelHandlerContext ctx)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/MetricsHealthController.java": [
                    "public HttpResponse zipkin2.server.internal.MetricsHealthController.getHealth()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)",
                    "static HttpData zipkin2.server.internal.UnzippingBytesRequestConverter.convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage request)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "AggregatedHttpMessage zipkin2.server.internal.ZipkinQueryApiV2.maybeCacheNames(boolean shouldCacheControl, List<String> values)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "ArmeriaServerConfigurator zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.notFoundMetricCollector()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "ArmeriaServerConfigurator zipkin2.server.internal.ui.ZipkinUiConfiguration.uiServerConfigurator( CompressionProperties compressionProperties, IndexSwitchingService indexSwitchingService)",
                    "IndexSwitchingService zipkin2.server.internal.ui.ZipkinUiConfiguration.indexSwitchingService()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b6f5f7f7078539c99be513f66c4afc1e7e6d9a1f",
        "previous_commit": "e535720d753d7958a018d9a67b2d2d9f4f79e548",
        "date": 1709791583,
        "releases": {
            "previous": "b6f5f7f7078539c99be513f66c4afc1e7e6d9a1f",
            "next": "b6f5f7f7078539c99be513f66c4afc1e7e6d9a1f"
        },
        "commit_message": "cassandra: fail at startup if search enabled, but SASI disabled (#3741)\n\nSigned-off-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b6f5f7f7078539c99be513f66c4afc1e7e6d9a1f": {
                "zipkin-server/src/main/java/zipkin2/server/internal/BodyIsExceptionMessage.java": [
                    "public HttpResponse zipkin2.server.internal.BodyIsExceptionMessage.handleException(ServiceRequestContext ctx, HttpRequest req, Throwable cause)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/health/ComponentHealth.java": [
                    "static ComponentHealth zipkin2.server.internal.health.ComponentHealth.ofComponent(Component component)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public CassandraStorage zipkin2.storage.cassandra.CassandraStorage.build()",
                    "public CheckResult zipkin2.storage.cassandra.CassandraStorage.check()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "public CqlSession zipkin2.storage.cassandra.DefaultSessionFactory.create(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/LazySession.java": [
                    "CqlSession zipkin2.storage.cassandra.LazySession.get()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureKeyspaceMetadata(CqlSession session, String keyspace)",
                    "static String zipkin2.storage.cassandra.Schema.reviseCQL(Version version, String cql)"
                ]
            },
            "e535720d753d7958a018d9a67b2d2d9f4f79e548": {
                "zipkin-server/src/main/java/zipkin2/server/internal/BodyIsExceptionMessage.java": [
                    "public HttpResponse zipkin2.server.internal.BodyIsExceptionMessage.handleException(ServiceRequestContext ctx, HttpRequest req, Throwable cause)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/health/ComponentHealth.java": [
                    "static ComponentHealth zipkin2.server.internal.health.ComponentHealth.ofComponent(Component component)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public CassandraStorage zipkin2.storage.cassandra.CassandraStorage.build()",
                    "public CheckResult zipkin2.storage.cassandra.CassandraStorage.check()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "public CqlSession zipkin2.storage.cassandra.DefaultSessionFactory.create(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/LazySession.java": [
                    "CqlSession zipkin2.storage.cassandra.LazySession.get()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureKeyspaceMetadata(CqlSession session, String keyspace)",
                    "static String zipkin2.storage.cassandra.Schema.reviseCQL(Version version, String cql)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "ac1b01fed8af7c89bad8afc3e479061f248b555d",
        "previous_commit": "6e32e74ab01c4759018806f85c862596c516d264",
        "date": 1503569929,
        "releases": {
            "previous": "ac1b01fed8af7c89bad8afc3e479061f248b555d",
            "next": "ac1b01fed8af7c89bad8afc3e479061f248b555d"
        },
        "commit_message": "Reinstates hard limit on Elasticsearch lookback (#1704)\n\nIn e764137a9fa2a229d99f1ce64b772066d3cb26c3, we compressed index\r\nexpressions to avoid overrunning request line limits. This wasn't\r\nquite enough to avoid >4096 character request lines. This reinstates\r\nthe old defense, which was to not attempt to look back farther than\r\nwhen ES support was added\r\n\r\nSee #1371",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ac1b01fed8af7c89bad8afc3e479061f248b555d": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getDependencies(long endTs, @Nullable Long lookback, Callback<List<DependencyLink>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getSpanNames(String serviceName, Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getServiceNames(Callback<List<String>> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getServiceNames(Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getDependencies(long endTs, @Nullable Long lookback, Callback<List<DependencyLink>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getSpanNames(String serviceName, Callback<List<String>> callback)"
                ]
            },
            "6e32e74ab01c4759018806f85c862596c516d264": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getDependencies(long endTs, @Nullable Long lookback, Callback<List<DependencyLink>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getSpanNames(String serviceName, Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getServiceNames(Callback<List<String>> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getServiceNames(Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getDependencies(long endTs, @Nullable Long lookback, Callback<List<DependencyLink>> callback)",
                    "public void zipkin.storage.elasticsearch.http.LegacyElasticsearchHttpSpanStore.getSpanNames(String serviceName, Callback<List<String>> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "568e3e3ffdd9f319c877692b2d268a894f95bef0",
        "previous_commit": "2326fd16aa3c840cd870424f588e251d149c830f",
        "date": 1462095278,
        "releases": {
            "previous": "568e3e3ffdd9f319c877692b2d268a894f95bef0",
            "next": "568e3e3ffdd9f319c877692b2d268a894f95bef0"
        },
        "commit_message": "Adds CollectorMetrics and implements for each transport\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "568e3e3ffdd9f319c877692b2d268a894f95bef0": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java": [
                    "ResponseEntity<?> zipkin.server.ZipkinHttpCollector.validateAndStoreSpans(String encoding, Codec codec, byte[] body)"
                ],
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaCollector.java": [
                    "protected AsyncSpanConsumer zipkin.kafka.KafkaCollector.compute()"
                ],
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-transports/scribe/src/main/java/zipkin/scribe/ScribeCollector.java": [
                    "protected AsyncSpanConsumer zipkin.scribe.ScribeCollector.compute()"
                ],
                "zipkin-transports/scribe/src/main/java/zipkin/scribe/ScribeSpanConsumer.java": [
                    "public ListenableFuture<ResultCode> zipkin.scribe.ScribeSpanConsumer.log(List<LogEntry> messages)"
                ],
                "zipkin/src/main/java/zipkin/InternalSamplingAsyncSpanConsumer.java": [
                    "public void zipkin.InternalSamplingAsyncSpanConsumer.accept(List<Span> input, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/SpanConsumerLogger.java": [
                    "public String zipkin.internal.SpanConsumerLogger.errorAcceptingSpans(List<Span> spans, Throwable e)"
                ]
            },
            "2326fd16aa3c840cd870424f588e251d149c830f": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java": [
                    "ResponseEntity<?> zipkin.server.ZipkinHttpCollector.validateAndStoreSpans(String encoding, Codec codec, byte[] body)"
                ],
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaCollector.java": [
                    "protected AsyncSpanConsumer zipkin.kafka.KafkaCollector.compute()"
                ],
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-transports/scribe/src/main/java/zipkin/scribe/ScribeCollector.java": [
                    "protected AsyncSpanConsumer zipkin.scribe.ScribeCollector.compute()"
                ],
                "zipkin-transports/scribe/src/main/java/zipkin/scribe/ScribeSpanConsumer.java": [
                    "public ListenableFuture<ResultCode> zipkin.scribe.ScribeSpanConsumer.log(List<LogEntry> messages)"
                ],
                "zipkin/src/main/java/zipkin/InternalSamplingAsyncSpanConsumer.java": [
                    "public void zipkin.InternalSamplingAsyncSpanConsumer.accept(List<Span> input, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/SpanConsumerLogger.java": [
                    "public String zipkin.internal.SpanConsumerLogger.errorAcceptingSpans(List<Span> spans, Throwable e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d70fce997275fcbd65620344da4d3fc54c661080",
        "previous_commit": "cb7ff352fd6655728366c47ec44f6a0e9342a0a0",
        "date": 1473674944,
        "releases": {
            "previous": "d70fce997275fcbd65620344da4d3fc54c661080",
            "next": "d70fce997275fcbd65620344da4d3fc54c661080"
        },
        "commit_message": "Qualifies annotation queries against a service (#1292)\n\nThis ensures that annotation or binary annotation queries are qualified\r\nagainst a service.\r\n\r\nThis also removes the binary annotation key indexing used in cassandra,\r\nbut nowhere else. There's nothing in the api, javadoc or web UI docs\r\nthat suggest binary annotation key should substitute for annotation\r\nvalue. Removing this indexing halves writes per binary annotation\r\nwithout violating our api contract.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d70fce997275fcbd65620344da4d3fc54c661080": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java": [
                    "static Set<String> zipkin.storage.cassandra.CassandraUtil.annotationKeys(Span span)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "ListenableFuture<Collection<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getSpansByTraceIds(Set<BigInteger> traceIds, int limit)",
                    "ListenableFuture<Map<BigInteger, Long>> zipkin.storage.cassandra3.CassandraSpanStore.getTraceIdsByAnnotation( String annotationKey, long endTsMillis, long lookbackMillis, int limit)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraUtil.java": [
                    "static Set<String> zipkin.storage.cassandra3.CassandraUtil.annotationKeys(Span span)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "private static SelectOffsetStep<Record1<Long>> zipkin.storage.mysql.MySQLSpanStore.toTraceIdQuery(DSLContext context, QueryRequest request)"
                ],
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "static boolean zipkin.storage.InMemorySpanStore.test(QueryRequest request, List<Span> spans)"
                ]
            },
            "cb7ff352fd6655728366c47ec44f6a0e9342a0a0": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java": [
                    "static Set<String> zipkin.storage.cassandra.CassandraUtil.annotationKeys(Span span)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "ListenableFuture<Collection<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getSpansByTraceIds(Set<BigInteger> traceIds, int limit)",
                    "ListenableFuture<Map<BigInteger, Long>> zipkin.storage.cassandra3.CassandraSpanStore.getTraceIdsByAnnotation( String annotationKey, long endTsMillis, long lookbackMillis, int limit)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraUtil.java": [
                    "static Set<String> zipkin.storage.cassandra3.CassandraUtil.annotationKeys(Span span)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "private static SelectOffsetStep<Record1<Long>> zipkin.storage.mysql.MySQLSpanStore.toTraceIdQuery(DSLContext context, QueryRequest request)"
                ],
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "static boolean zipkin.storage.InMemorySpanStore.test(QueryRequest request, List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3e9c457bfa1c110524bcd1dab15131e81d2ffdb9",
        "previous_commit": "25eee89078e4eb1df2b8b44c40f75e5eb5b46c41",
        "date": 1568792231,
        "releases": {
            "previous": "3e9c457bfa1c110524bcd1dab15131e81d2ffdb9",
            "next": "3e9c457bfa1c110524bcd1dab15131e81d2ffdb9"
        },
        "commit_message": "Adds CollectedSpanHandler\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3e9c457bfa1c110524bcd1dab15131e81d2ffdb9": {
                "zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java": [
                    "public String zipkin2.collector.Collector.toString()",
                    "public void zipkin2.collector.Collector.onError(Throwable t)",
                    "public void zipkin2.collector.Collector.accept(List<Span> spans, Callback<Void> callback, Executor executor)",
                    "public Builder zipkin2.collector.Collector.sampler(CollectorSampler sampler)"
                ],
                "zipkin-collector/core/src/main/java/zipkin2/collector/CollectorSampler.java": [
                    "public boolean zipkin2.collector.CollectorSampler.isSampled(String hexTraceId, boolean debug)",
                    "public static CollectorSampler zipkin2.collector.CollectorSampler.create(float rate)"
                ],
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollector.java": [
                    "public Builder zipkin2.collector.kafka.KafkaCollector.sampler(CollectorSampler sampler)"
                ],
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeCollector.java": [
                    "public Builder zipkin2.collector.scribe.ScribeCollector.sampler(CollectorSampler sampler)"
                ]
            },
            "25eee89078e4eb1df2b8b44c40f75e5eb5b46c41": {
                "zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java": [
                    "public String zipkin2.collector.Collector.toString()",
                    "public void zipkin2.collector.Collector.accept(List<Span> spans, Callback<Void> callback, Executor executor)",
                    "public void zipkin2.collector.Collector.onError(Throwable t)",
                    "public Builder zipkin2.collector.Collector.sampler(CollectorSampler sampler)"
                ],
                "zipkin-collector/core/src/main/java/zipkin2/collector/CollectorSampler.java": [
                    "public boolean zipkin2.collector.CollectorSampler.isSampled(String hexTraceId, boolean debug)",
                    "public static CollectorSampler zipkin2.collector.CollectorSampler.create(float rate)"
                ],
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollector.java": [
                    "public Builder zipkin2.collector.kafka.KafkaCollector.sampler(CollectorSampler sampler)"
                ],
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeCollector.java": [
                    "public Builder zipkin2.collector.scribe.ScribeCollector.sampler(CollectorSampler sampler)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "dd7d03a0ebc0231bbae0b9f25dbabff77204ffc8",
        "previous_commit": "d352031eb658e10979d323333f3792229dbce083",
        "date": 1472535270,
        "releases": {
            "previous": "dd7d03a0ebc0231bbae0b9f25dbabff77204ffc8",
            "next": "dd7d03a0ebc0231bbae0b9f25dbabff77204ffc8"
        },
        "commit_message": "Improves thrift encoding performance by special-casing ascii (#1258)\n\nIn many cases, annotation values are ascii strings. This special-cases\r\nfor this, improving thrift encoding performance dramatically.\r\n\r\nThis finally gets encoding overhead of a client span under 1 microsecond\r\n  (on \"my laptop\")\r\n\r\nBefore:\r\n```\r\nBenchmark                                         Mode  Cnt  Score   Error  Units\r\nCodecBenchmarks.writeClientSpan_thrift_zipkin     avgt   15  1.029 \u00b1 0.041  us/op\r\nCodecBenchmarks.writeLocalSpan_thrift_zipkin      avgt   15  0.741 \u00b1 0.108  us/op\r\nCodecBenchmarks.writeRpcSpan_thrift_zipkin        avgt   15  2.956 \u00b1 0.128  us/op\r\nCodecBenchmarks.writeRpcV6Span_thrift_zipkin      avgt   15  3.490 \u00b1 0.104  us/op\r\n```\r\n\r\nAfter:\r\n```\r\nBenchmark                                         Mode  Cnt  Score   Error  Units\r\nCodecBenchmarks.writeClientSpan_thrift_zipkin     avgt   15  0.779 \u00b1 0.024  us/op\r\nCodecBenchmarks.writeLocalSpan_thrift_zipkin      avgt   15  0.497 \u00b1 0.026  us/op\r\nCodecBenchmarks.writeRpcSpan_thrift_zipkin        avgt   15  2.018 \u00b1 0.093  us/op\r\nCodecBenchmarks.writeRpcV6Span_thrift_zipkin      avgt   15  2.407 \u00b1 0.048  us/op\r\n```",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "dd7d03a0ebc0231bbae0b9f25dbabff77204ffc8": {
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "byte[] zipkin.internal.Buffer.toByteArray()",
                    "public void zipkin.internal.Buffer.write(byte[] v)",
                    "public void zipkin.internal.Buffer.write(int v)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public void zipkin.internal.ThriftCodec.write(Span value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Endpoint value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Annotation value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(DependencyLink value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(BinaryAnnotation value, Buffer buffer)"
                ]
            },
            "d352031eb658e10979d323333f3792229dbce083": {
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "byte[] zipkin.internal.Buffer.toByteArray()",
                    "public void zipkin.internal.Buffer.write(byte[] v)",
                    "public void zipkin.internal.Buffer.write(int v)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public void zipkin.internal.ThriftCodec.write(Span value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Endpoint value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Annotation value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(DependencyLink value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(BinaryAnnotation value, Buffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c095c355169c0440c23132c0ccb41ccf226274fd",
        "previous_commit": "57b5a5123996c1589c8fcde56570ba2ff45a1b50",
        "date": 1463062836,
        "releases": {
            "previous": "c095c355169c0440c23132c0ccb41ccf226274fd",
            "next": "c095c355169c0440c23132c0ccb41ccf226274fd"
        },
        "commit_message": "Renames transport to collector and settles on CollectorComponent\n\nThis completes work of removing I/O from exposed constructors. By using\nCollectorComponent, you can defer I/O to the `start` method.\n\nThis also moves all code formerly called transport to collector packages\nin preparation of adding a reporter package.\n\nFinally, this consolidates code duplication around the collectors.\n\nFixes #187\nSee #181\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c095c355169c0440c23132c0ccb41ccf226274fd": {
                "zipkin-guava/src/main/java/zipkin/spanstore/guava/GuavaStorageComponent.java": [
                    "public AsyncSpanStore zipkin.spanstore.guava.GuavaStorageComponent.asyncSpanStore()"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java": [
                    "public byte[] zipkin.server.ZipkinQueryApiV1.getTrace(@PathVariable String traceId, WebRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "ScribeCollector zipkin.server.ZipkinServerConfiguration.scribe( ZipkinScribeProperties scribe, CollectorSampler sampler, CollectorMetrics metrics, StorageComponent storage)",
                    "KafkaCollector zipkin.server.ZipkinServerConfiguration.kafka( ZipkinKafkaProperties kafka, CollectorSampler sampler, CollectorMetrics metrics, StorageComponent storage)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/LocalSpanCollector.java": [
                    "protected void zipkin.server.brave.LocalSpanCollector.sendSpans(byte[] thrift)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/elasticsearch/LazyClient.java": [
                    "public void zipkin.elasticsearch.LazyClient.close()"
                ],
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static String zipkin.internal.Util.toLowerHex(long v)"
                ]
            },
            "57b5a5123996c1589c8fcde56570ba2ff45a1b50": {
                "zipkin-guava/src/main/java/zipkin/spanstore/guava/GuavaStorageComponent.java": [
                    "public AsyncSpanStore zipkin.spanstore.guava.GuavaStorageComponent.asyncSpanStore()"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java": [
                    "public byte[] zipkin.server.ZipkinQueryApiV1.getTrace(@PathVariable String traceId, WebRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "KafkaCollector zipkin.server.ZipkinServerConfiguration.kafka(ZipkinKafkaProperties kafka, CollectorSampler sampler, CollectorMetrics metrics, StorageComponent storage)",
                    "ScribeCollector zipkin.server.ZipkinServerConfiguration.scribe(ZipkinScribeProperties scribe, CollectorSampler sampler, CollectorMetrics metrics, StorageComponent storage)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/LocalSpanCollector.java": [
                    "protected void zipkin.server.brave.LocalSpanCollector.sendSpans(byte[] thrift)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/elasticsearch/LazyClient.java": [
                    "public void zipkin.elasticsearch.LazyClient.close()"
                ],
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static String zipkin.internal.Util.toLowerHex(long v)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c7e5520d087e593c155699146f210fc46a7b87c3",
        "previous_commit": "c80c19e2c66baa8226a58ff83150b3f1e35ea2fe",
        "date": 1458119620,
        "releases": {
            "previous": "c7e5520d087e593c155699146f210fc46a7b87c3",
            "next": "c7e5520d087e593c155699146f210fc46a7b87c3"
        },
        "commit_message": "Changes SpanStore.getTracesByIds to getTrace\n\nIn zipkin-scala, `SpanStore.getTracesByIds` served its \"slice query\"\nimplementation. Basically, the old infrastructure performed queries in\ntwo steps: first, fetch ids. then, get traces by ID.\n\nFrom an HTTP Api point of view, it is single-id `GET /api/v1/trace/id`.\nMoreover, how or if to fan-out is an implemantation detail that varies\nper storage layer.\n\nThis rips out `SpanStore.getTracesByIds` for `getTrace`, as it\nsimplifies the api, and the [raw query](https://github.com/openzipkin/zipkin/pull/1027) easier to implement.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c7e5520d087e593c155699146f210fc46a7b87c3": {
                "interop/src/main/java/zipkin/interop/ScalaSpanStoreAdapter.java": [
                    "public Future<Seq<List<Span>>> zipkin.interop.ScalaSpanStoreAdapter.getTracesByIds(Seq<Object> input)"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public List<List<Span>> zipkin.junit.ZipkinRule.getTraces()"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java": [
                    "public byte[] zipkin.server.ZipkinQueryApiV1.getTrace(@PathVariable String traceId)"
                ],
                "zipkin-spanstores/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java": [
                    "List<List<Span>> zipkin.jdbc.JDBCSpanStore.getTraces(@Nullable QueryRequest request, @Nullable Long traceId)"
                ],
                "zipkin/src/main/java/zipkin/InMemorySpanStore.java": [
                    "public synchronized void zipkin.InMemorySpanStore.accept(List<Span> spans)",
                    "public synchronized List<List<Span>> zipkin.InMemorySpanStore.getTraces(QueryRequest request)",
                    "public synchronized List<String> zipkin.InMemorySpanStore.getServiceNames()"
                ]
            },
            "c80c19e2c66baa8226a58ff83150b3f1e35ea2fe": {
                "interop/src/main/java/zipkin/interop/ScalaSpanStoreAdapter.java": [
                    "public Future<Seq<List<Span>>> zipkin.interop.ScalaSpanStoreAdapter.getTracesByIds(Seq<Object> input)"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public List<List<Span>> zipkin.junit.ZipkinRule.getTraces()"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java": [
                    "public byte[] zipkin.server.ZipkinQueryApiV1.getTrace(@PathVariable String traceId)"
                ],
                "zipkin-spanstores/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java": [
                    "List<List<Span>> zipkin.jdbc.JDBCSpanStore.getTraces(@Nullable QueryRequest request, @Nullable Collection<Long> traceIds)"
                ],
                "zipkin/src/main/java/zipkin/InMemorySpanStore.java": [
                    "public synchronized void zipkin.InMemorySpanStore.accept(List<Span> spans)",
                    "public synchronized List<List<Span>> zipkin.InMemorySpanStore.getTraces(QueryRequest request)",
                    "public synchronized List<String> zipkin.InMemorySpanStore.getServiceNames()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a41c0f26923fdf06f8d5253e5e723619db4c7efd",
        "previous_commit": "5a37e92d5ff372a922277beed5b6a10f87a7bc8d",
        "date": 1462496799,
        "releases": {
            "previous": "a41c0f26923fdf06f8d5253e5e723619db4c7efd",
            "next": "a41c0f26923fdf06f8d5253e5e723619db4c7efd"
        },
        "commit_message": "Cleans up async behavior in CassandaStorage\n\nThere were a couple glitches in the async behavior of cassandra. First,\nwe were inconsistent on future collecting, and accidentally mapped\nagainst failed futures. Less importantly, we forgot to chain one future\nin the storage query.\n\nThis fixes those issues and documents the results.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a41c0f26923fdf06f8d5253e5e723619db4c7efd": {
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.cassandra.CassandraSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.cassandra.CassandraSpanStore.getServiceNames()",
                    "public ListenableFuture<List<DependencyLink>> zipkin.cassandra.CassandraSpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsByServiceName(String serviceName, long endTs, long lookback, int limit)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsByDuration(QueryRequest request)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsByAnnotation(String annotationKey, long endTs, long lookback, int limit)",
                    "ListenableFuture<Map<Long, List<Span>>> zipkin.cassandra.CassandraSpanStore.getSpansByTraceIds(Long[] traceIds, int limit)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsBySpanName(String serviceName, String spanName, long endTs, long lookback, int limit)"
                ]
            },
            "5a37e92d5ff372a922277beed5b6a10f87a7bc8d": {
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.cassandra.CassandraSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.cassandra.CassandraSpanStore.getServiceNames()",
                    "public ListenableFuture<List<DependencyLink>> zipkin.cassandra.CassandraSpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsByServiceName(String serviceName, long endTs, long lookback, int limit)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsByDuration(QueryRequest request)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsByAnnotation(String annotationKey, long endTs, long lookback, int limit)",
                    "ListenableFuture<Map<Long, List<Span>>> zipkin.cassandra.CassandraSpanStore.getSpansByTraceIds(Long[] traceIds, int limit)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsBySpanName(String serviceName, String spanName, long endTs, long lookback, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c5916f339159ca521be0bb4912b24a280d2beb46",
        "previous_commit": "8e58562a88f8d3e3c91d66c105bcaa8bd6bc5833",
        "date": 1473424862,
        "releases": {
            "previous": "c5916f339159ca521be0bb4912b24a280d2beb46",
            "next": "c5916f339159ca521be0bb4912b24a280d2beb46"
        },
        "commit_message": "Only write good span timestamp guesses at ingest\n\nPreviously, Zipkin wrote the wrong timestamp when receiving spans that\nare missing timestamp data. It is still the case that instrumentation\nlibraries aren't updated to add this. Until then, we have to guess a\nlittle more smartly so as to not record incorrect timestamps.\n\nThis does the following when Span.timestamp is missing:\n* If there is a \"cs\", use that (because client always is authoritative)\n* If there is an \"sr\" in a root span, use that\n* Otherwise, return null instead of choosing an arbitrary low value.\n\nThis also is more careful when updating timestamps, for example, in\nMySQL, we only update if the span's timestamp is set or on client send.\n\nThis change has some impact, notably that duration queries now require\ninstrumentation to update to actually set Span.duration. Also,\nelasticsearch \"timestamp_millis\" field is now used directly for queries.\n\nTo facilitate better instrumentation, I've added more documentation:\nhttps://github.com/openzipkin/openzipkin.github.io/pull/46\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c5916f339159ca521be0bb4912b24a280d2beb46": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/Indexer.java": [
                    "ImmutableSet<ListenableFuture<?>> zipkin.storage.cassandra.Indexer.index(List<Span> spans)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeSpan(Span span, Long timestamp)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanConsumer.java": [
                    "public void zipkin.storage.mysql.MySQLSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/ApplyTimestampAndDuration.java": [
                    "public static Span zipkin.internal.ApplyTimestampAndDuration.apply(Span span)"
                ],
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "public void zipkin.storage.InMemorySpanStore.accept(List<Span> spans)"
                ]
            },
            "8e58562a88f8d3e3c91d66c105bcaa8bd6bc5833": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/Indexer.java": [
                    "ImmutableSet<ListenableFuture<?>> zipkin.storage.cassandra.Indexer.index(List<Span> spans)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeSpan(Span rawSpan, Span span)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanConsumer.java": [
                    "public void zipkin.storage.mysql.MySQLSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/ApplyTimestampAndDuration.java": [
                    "public static Span zipkin.internal.ApplyTimestampAndDuration.apply(Span span)"
                ],
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "public void zipkin.storage.InMemorySpanStore.accept(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "76edbbf0491ced8295fa8ec1ad89fa1aaa83b618",
        "previous_commit": "198503414bf583c9fa01113c205cbea5c39decc1",
        "date": 1474887340,
        "releases": {
            "previous": "76edbbf0491ced8295fa8ec1ad89fa1aaa83b618",
            "next": "76edbbf0491ced8295fa8ec1ad89fa1aaa83b618"
        },
        "commit_message": "Cleans up InternalElasticsearchClient and fixes aggregation bug (#1313)\n\nThis cleans up InternalElasticsearchClient in preparation of\r\nElasticsearch 5 work.\r\n\r\nFormerly, the client implementation was required to search the response\r\nof a request for specific paths of aggregation bucket keys. This\r\nrequired an intermediary to allow the same response to be read for two\r\npaths. Since implementations are trusted, the change is that we search\r\nfor \"any\" bucket keys. This is simpler to test and requires less\r\ncoordination.\r\n\r\nOn that note, there was a bug in the aggregation logic, where annotation\r\naggregations weren't treated as nested. This fixes the bug and rewrites\r\nthe test to expose it in the future.\r\n\r\nIn order to plug-in a different span indexer, I needed to re-organize\r\nthat code. Now, there's a BulkSpanIndexer type which can be exteded as\r\nneeded.\r\n\r\nSee #1312",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "76edbbf0491ced8295fa8ec1ad89fa1aaa83b618": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "public List<Span> zipkin.storage.elasticsearch.http.HttpClient.apply(SearchResult input)",
                    "public ListenableFuture<List<Span>> zipkin.storage.elasticsearch.http.HttpClient.findSpans(String[] indices, QueryBuilder query)",
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.http.HttpClient.findDependencies(String[] indices)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.elasticsearch.ElasticsearchSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)",
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getDependencies(long endMillis, @Nullable Long lookback)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)",
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getServiceNames()"
                ]
            },
            "198503414bf583c9fa01113c205cbea5c39decc1": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "public List<Span> zipkin.storage.elasticsearch.http.HttpClient.apply(SearchResult input)",
                    "public ListenableFuture<List<Span>> zipkin.storage.elasticsearch.http.HttpClient.findSpans(String[] indices, QueryBuilder query)",
                    "public ListenableFuture<Collection<DependencyLink>> zipkin.storage.elasticsearch.http.HttpClient.findDependencies(String[] indices)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.elasticsearch.ElasticsearchSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)",
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getDependencies(long endMillis, @Nullable Long lookback)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)",
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getServiceNames()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "21fc32b965e70f0985a164f34ed89ae55e115a11",
        "previous_commit": "5d3e5c7f049ce301576ef5a3554580fd96677b28",
        "date": 1477532314,
        "releases": {
            "previous": "21fc32b965e70f0985a164f34ed89ae55e115a11",
            "next": "21fc32b965e70f0985a164f34ed89ae55e115a11"
        },
        "commit_message": "Logs 128-bit trace id when performing dependency links (#1361)\n\nBefore this change, if you had dependency linking on debug, you would\r\nnot see the full 128-bit trace id of a span, rather only the lower 64\r\nbits. This changes the intermediate (internal) data structure to include\r\nall 128-bits eventhough it is only used for logging.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "21fc32b965e70f0985a164f34ed89ae55e115a11": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkSpanIterator.java": [
                    "public DependencyLinkSpan zipkin.storage.mysql.DependencyLinkSpanIterator.next()",
                    "public Iterator<DependencyLinkSpan> zipkin.storage.mysql.DependencyLinkSpanIterator.next()",
                    "public boolean zipkin.storage.mysql.DependencyLinkSpanIterator.hasNext()"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.aggregateDependencies(long endTs, @Nullable Long lookback, Connection conn)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinkSpan.java": [
                    "public String zipkin.internal.DependencyLinkSpan.toString()",
                    "public int zipkin.internal.DependencyLinkSpan.hashCode()",
                    "public boolean zipkin.internal.DependencyLinkSpan.equals(Object o)",
                    "public static DependencyLinkSpan zipkin.internal.DependencyLinkSpan.from(Span s)"
                ]
            },
            "5d3e5c7f049ce301576ef5a3554580fd96677b28": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkSpanIterator.java": [
                    "public DependencyLinkSpan zipkin.storage.mysql.DependencyLinkSpanIterator.next()",
                    "public Iterator<DependencyLinkSpan> zipkin.storage.mysql.DependencyLinkSpanIterator.next()",
                    "public boolean zipkin.storage.mysql.DependencyLinkSpanIterator.hasNext()"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.aggregateDependencies(long endTs, @Nullable Long lookback, Connection conn)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinkSpan.java": [
                    "public static DependencyLinkSpan zipkin.internal.DependencyLinkSpan.from(Span s)",
                    "public int zipkin.internal.DependencyLinkSpan.hashCode()",
                    "public String zipkin.internal.DependencyLinkSpan.toString()",
                    "public boolean zipkin.internal.DependencyLinkSpan.equals(Object o)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "39a4aa7fa3a1420be5f4e24304595bb3e8edb0d4",
        "previous_commit": "bb4b8002be619b392f08ffd576a639f628579f49",
        "date": 1531706358,
        "releases": {
            "previous": "39a4aa7fa3a1420be5f4e24304595bb3e8edb0d4",
            "next": "39a4aa7fa3a1420be5f4e24304595bb3e8edb0d4"
        },
        "commit_message": "Moves empty endpoint coersion to Span and V1Span types\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "39a4aa7fa3a1420be5f4e24304595bb3e8edb0d4": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/SelectSpansAndAnnotations.java": [
                    "static Endpoint zipkin2.storage.mysql.v1.SelectSpansAndAnnotations.endpoint(Record a)"
                ],
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.remoteEndpoint(@Nullable Endpoint remoteEndpoint)",
                    "public Builder zipkin2.Span.localEndpoint(@Nullable Endpoint localEndpoint)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3ZipkinFields.java": [
                    "int zipkin2.internal.Proto3ZipkinFields.sizeOfValue(Endpoint value)",
                    "Endpoint zipkin2.internal.Proto3ZipkinFields.readValue(Buffer buffer, int length)"
                ],
                "zipkin/src/main/java/zipkin2/v1/V1Span.java": [
                    "public Builder zipkin2.v1.V1Span.addBinaryAnnotation(String address, Endpoint endpoint)",
                    "public Builder zipkin2.v1.V1Span.addAnnotation(long timestamp, String value, @Nullable Endpoint endpoint)",
                    "public Builder zipkin2.v1.V1Span.addBinaryAnnotation(String key, String value, Endpoint endpoint)"
                ]
            },
            "bb4b8002be619b392f08ffd576a639f628579f49": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/SelectSpansAndAnnotations.java": [
                    "static Endpoint zipkin2.storage.mysql.v1.SelectSpansAndAnnotations.endpoint(Record a)"
                ],
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.remoteEndpoint(@Nullable Endpoint remoteEndpoint)",
                    "public Builder zipkin2.Span.localEndpoint(@Nullable Endpoint localEndpoint)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Proto3ZipkinFields.java": [
                    "int zipkin2.internal.Proto3ZipkinFields.sizeOfValue(Endpoint value)",
                    "Endpoint zipkin2.internal.Proto3ZipkinFields.readValue(Buffer buffer, int length)"
                ],
                "zipkin/src/main/java/zipkin2/v1/V1Span.java": [
                    "public Builder zipkin2.v1.V1Span.addBinaryAnnotation(String address, Endpoint endpoint)",
                    "public Builder zipkin2.v1.V1Span.addAnnotation(long timestamp, String value, @Nullable Endpoint endpoint)",
                    "public Builder zipkin2.v1.V1Span.addBinaryAnnotation(String key, String value, Endpoint endpoint)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "644bb0fbf84de55a834d7f4b90415924187f9a13",
        "previous_commit": "3e9c457bfa1c110524bcd1dab15131e81d2ffdb9",
        "date": 1568792277,
        "releases": {
            "previous": "644bb0fbf84de55a834d7f4b90415924187f9a13",
            "next": "644bb0fbf84de55a834d7f4b90415924187f9a13"
        },
        "commit_message": "Revert \"Adds CollectedSpanHandler\"\n\nThis reverts commit 3e9c457bfa1c110524bcd1dab15131e81d2ffdb9.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "644bb0fbf84de55a834d7f4b90415924187f9a13": {
                "zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java": [
                    "public String zipkin2.collector.Collector.toString()",
                    "public void zipkin2.collector.Collector.accept(List<Span> spans, Callback<Void> callback, Executor executor)",
                    "public void zipkin2.collector.Collector.onError(Throwable t)",
                    "public Builder zipkin2.collector.Collector.sampler(CollectorSampler sampler)"
                ],
                "zipkin-collector/core/src/main/java/zipkin2/collector/CollectorSampler.java": [
                    "public boolean zipkin2.collector.CollectorSampler.isSampled(String hexTraceId, boolean debug)",
                    "public static CollectorSampler zipkin2.collector.CollectorSampler.create(float rate)"
                ],
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollector.java": [
                    "public Builder zipkin2.collector.kafka.KafkaCollector.sampler(CollectorSampler sampler)"
                ],
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeCollector.java": [
                    "public Builder zipkin2.collector.scribe.ScribeCollector.sampler(CollectorSampler sampler)"
                ]
            },
            "3e9c457bfa1c110524bcd1dab15131e81d2ffdb9": {
                "zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java": [
                    "public String zipkin2.collector.Collector.toString()",
                    "public void zipkin2.collector.Collector.onError(Throwable t)",
                    "public void zipkin2.collector.Collector.accept(List<Span> spans, Callback<Void> callback, Executor executor)",
                    "public Builder zipkin2.collector.Collector.sampler(CollectorSampler sampler)"
                ],
                "zipkin-collector/core/src/main/java/zipkin2/collector/CollectorSampler.java": [
                    "public boolean zipkin2.collector.CollectorSampler.isSampled(String hexTraceId, boolean debug)",
                    "public static CollectorSampler zipkin2.collector.CollectorSampler.create(float rate)"
                ],
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollector.java": [
                    "public Builder zipkin2.collector.kafka.KafkaCollector.sampler(CollectorSampler sampler)"
                ],
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeCollector.java": [
                    "public Builder zipkin2.collector.scribe.ScribeCollector.sampler(CollectorSampler sampler)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1214e77c08b63529f4f3d7416d45bc09e24e3df3",
        "previous_commit": "d5d6781086a75dc61516e641975d8096ef337c6e",
        "date": 1569204815,
        "releases": {
            "previous": "1214e77c08b63529f4f3d7416d45bc09e24e3df3",
            "next": "1214e77c08b63529f4f3d7416d45bc09e24e3df3"
        },
        "commit_message": "Updates to Armeria 0.92 and cleans up things (#2813)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1214e77c08b63529f4f3d7416d45bc09e24e3df3": {
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollector.java": [
                    "public CheckResult zipkin2.collector.kafka.KafkaCollector.check()"
                ],
                "zipkin-collector/rabbitmq/src/main/java/zipkin2/collector/rabbitmq/RabbitMQCollector.java": [
                    "public CheckResult zipkin2.collector.rabbitmq.RabbitMQCollector.check()"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinServer.java": [
                    "public static void zipkin.server.ZipkinServer.main(String[] args)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/RegisterZipkinHealthIndicators.java": [
                    "public void zipkin2.server.internal.RegisterZipkinHealthIndicators.onApplicationEvent(ApplicationEvent event)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public CheckResult zipkin2.storage.cassandra.v1.CassandraStorage.check()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public CheckResult zipkin2.storage.cassandra.CassandraStorage.check()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLStorage.java": [
                    "public CheckResult zipkin2.storage.mysql.v1.MySQLStorage.check()"
                ]
            },
            "d5d6781086a75dc61516e641975d8096ef337c6e": {
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollector.java": [
                    "public CheckResult zipkin2.collector.kafka.KafkaCollector.check()"
                ],
                "zipkin-collector/rabbitmq/src/main/java/zipkin2/collector/rabbitmq/RabbitMQCollector.java": [
                    "public CheckResult zipkin2.collector.rabbitmq.RabbitMQCollector.check()"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinServer.java": [
                    "public static void zipkin.server.ZipkinServer.main(String[] args)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/RegisterZipkinHealthIndicators.java": [
                    "public void zipkin2.server.internal.RegisterZipkinHealthIndicators.onApplicationEvent(ApplicationEvent event)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public CheckResult zipkin2.storage.cassandra.v1.CassandraStorage.check()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public CheckResult zipkin2.storage.cassandra.CassandraStorage.check()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLStorage.java": [
                    "public CheckResult zipkin2.storage.mysql.v1.MySQLStorage.check()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c91aeccff395659943c8f115550e1e9311a7f11a",
        "previous_commit": "cf151135f26f666795e921f53db7f35fd18a1881",
        "date": 1462546432,
        "releases": {
            "previous": "c91aeccff395659943c8f115550e1e9311a7f11a",
            "next": "c91aeccff395659943c8f115550e1e9311a7f11a"
        },
        "commit_message": "Improves json codec performance by being more efficient with hex codec\n\nBefore, we were very slow at hex encoding, and this made the json\nencoding notably slower than necessary. We were also inefficient by\nusing regex to check a hex string. This fixes both issues, notably\nimproving encoding performance.\n\n```\nCodecBenchmarks.readLocalSpan_json_java  thrpt   15  155.571 \u00b1 10.273  ops/ms\nCodecBenchmarks.writeLocalSpan_json_java  thrpt   15  131.598 \u00b1 11.653  ops/ms\n\nCodecBenchmarks.readLocalSpan_json_java  thrpt   15  162.043 \u00b1 2.652  ops/ms\nCodecBenchmarks.writeLocalSpan_json_java  thrpt   15  203.380 \u00b1 6.892  ops/ms\n```\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c91aeccff395659943c8f115550e1e9311a7f11a": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<Span>> zipkin.elasticsearch.ElasticsearchSpanStore.getRawTrace(long traceId)",
                    "ListenableFuture<List<List<Span>>> zipkin.elasticsearch.ElasticsearchSpanStore.getTracesByIds(Collection<Long> traceIds, String[] indices)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinkSpan.java": [
                    "public String zipkin.internal.DependencyLinkSpan.toString()"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public void zipkin.internal.JsonCodec.toJson(JsonWriter writer, Long value)",
                    "public Long zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/internal/SpanConsumerLogger.java": [
                    "static StringBuilder zipkin.internal.SpanConsumerLogger.appendSpanIds(List<Span> spans, StringBuilder message)"
                ],
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static long zipkin.internal.Util.lowerHexToUnsignedLong(String lowerHex)"
                ]
            },
            "cf151135f26f666795e921f53db7f35fd18a1881": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<Span>> zipkin.elasticsearch.ElasticsearchSpanStore.getRawTrace(long traceId)",
                    "ListenableFuture<List<List<Span>>> zipkin.elasticsearch.ElasticsearchSpanStore.getTracesByIds(Collection<Long> traceIds, String[] indices)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinkSpan.java": [
                    "public String zipkin.internal.DependencyLinkSpan.toString()"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public void zipkin.internal.JsonCodec.toJson(JsonWriter writer, Long value)",
                    "public Long zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/internal/SpanConsumerLogger.java": [
                    "static StringBuilder zipkin.internal.SpanConsumerLogger.appendSpanIds(List<Span> spans, StringBuilder message)"
                ],
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static long zipkin.internal.Util.lowerHexToUnsignedLong(String lowerHex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "338637914f463c7282b737351ab71bf8b3e30bad",
        "previous_commit": "9d1c94b9ded7a316140d694866eda25ec98bee97",
        "date": 1524782840,
        "releases": {
            "previous": "338637914f463c7282b737351ab71bf8b3e30bad",
            "next": "338637914f463c7282b737351ab71bf8b3e30bad"
        },
        "commit_message": "Implements proto3 encoding\n\nThis is the first part of proto3 implementation, raised separately to\nkeep things readable.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "338637914f463c7282b737351ab71bf8b3e30bad": {
                "zipkin2/src/main/java/zipkin2/codec/Encoding.java": [
                    "public int listSizeInBytes(int encodedSizeInBytes)",
                    "public int listSizeInBytes(List<byte[]> values)"
                ],
                "zipkin2/src/main/java/zipkin2/codec/SpanBytesEncoder.java": [
                    "public int encodeList(List<Span> spans, byte[] out, int pos)",
                    "public Encoding encoding()",
                    "public int sizeInBytes(Span input)",
                    "public byte[] encodeList(List<Span> spans)",
                    "public byte[] encode(Span span)"
                ]
            },
            "9d1c94b9ded7a316140d694866eda25ec98bee97": {
                "zipkin2/src/main/java/zipkin2/codec/Encoding.java": [
                    "public int listSizeInBytes(int encodedSizeInBytes)",
                    "public int listSizeInBytes(List<byte[]> values)"
                ],
                "zipkin2/src/main/java/zipkin2/codec/SpanBytesEncoder.java": [
                    "public int encodeList(List<Span> spans, byte[] out, int pos)",
                    "public Encoding encoding()",
                    "public int sizeInBytes(Span input)",
                    "public byte[] encodeList(List<Span> spans)",
                    "public byte[] encode(Span span)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "190ae60f66b62e71aa06c046491728809982ddb9",
        "previous_commit": "ef521594f47a10a7aa5052524318fce9005bbd31",
        "date": 1503448960,
        "releases": {
            "previous": "190ae60f66b62e71aa06c046491728809982ddb9",
            "next": "190ae60f66b62e71aa06c046491728809982ddb9"
        },
        "commit_message": "Switches Elasticsearch to only write single-type indexes (#1698)\n\nMulti-type indexes are no longer supported starting with Elasticsearch\r\n6. We added support for single-type writes in Zipkin 1.29 as an opt-in\r\nfunctionality via `ES_EXPERIMENTAL_SPAN2=true`. This makes single-\r\ntype writes the only means to ingest spans, eventhough we still read\r\nboth models.\r\n\r\nTo turn off dual-reads, set `ES_LEGACY_READS_ENABLED=false` once your\r\ncollectors have been updated to Zipkin 1.31 and old indexes are no longer\r\nvaluable.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "190ae60f66b62e71aa06c046491728809982ddb9": {
                "zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchHttpStorageProperties.java": [
                    "public ElasticsearchHttpStorage.Builder zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageProperties.toBuilder(OkHttpClient client)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java": [
                    "public static Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.builder(OkHttpClient client)",
                    "public AsyncSpanConsumer zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.asyncSpanConsumer()",
                    "public AsyncSpanStore zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.asyncSpanStore()",
                    "IndexTemplates zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.ensureIndexTemplates()",
                    "void zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.clear()"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/VersionSpecificTemplates.java": [
                    "IndexTemplates zipkin.storage.elasticsearch.http.VersionSpecificTemplates.get(HttpCall.Factory callFactory)"
                ]
            },
            "ef521594f47a10a7aa5052524318fce9005bbd31": {
                "zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchHttpStorageProperties.java": [
                    "public ElasticsearchHttpStorage.Builder zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageProperties.toBuilder(OkHttpClient client)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java": [
                    "public static Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.builder(OkHttpClient client)",
                    "public AsyncSpanConsumer zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.asyncSpanConsumer()",
                    "public AsyncSpanStore zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.asyncSpanStore()",
                    "IndexTemplates zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.ensureIndexTemplates()",
                    "void zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.clear()"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/VersionSpecificTemplates.java": [
                    "IndexTemplates zipkin.storage.elasticsearch.http.VersionSpecificTemplates.get(HttpCall.Factory callFactory)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "40ec2770a170bc7222f3678ad9515a96ed8f6072",
        "previous_commit": "d66fe45f0d3412fa46196cb0735183deae391c26",
        "date": 1499301161,
        "releases": {
            "previous": "40ec2770a170bc7222f3678ad9515a96ed8f6072",
            "next": "40ec2770a170bc7222f3678ad9515a96ed8f6072"
        },
        "commit_message": "Refactors in-memory storage eviction logic to remove lockups (#1645)\n\nI ran the server with self-tracing-enabled and did get services in a\r\nfor loop. The previous variant wasn't happy due to some race conditions\r\nand in attempting to fix it, I noticed some places to simplify things.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "40ec2770a170bc7222f3678ad9515a96ed8f6072": {
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "Set<Long> zipkin.storage.InMemorySpanStore.traceIdsDescendingByTimestamp(QueryRequest request)",
                    "private int zipkin.storage.InMemorySpanStore.deleteOldestTrace()",
                    "public void zipkin.storage.InMemorySpanStore.accept(List<Span> spans)",
                    "Collection<V> zipkin.storage.InMemorySpanStore.remove(K key)",
                    "public synchronized List<String> zipkin.storage.InMemorySpanStore.getServiceNames()",
                    "void zipkin.storage.InMemorySpanStore.put(K key, V value)",
                    "synchronized void zipkin.storage.InMemorySpanStore.addSpans(List<Span> spans)"
                ]
            },
            "d66fe45f0d3412fa46196cb0735183deae391c26": {
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "public void zipkin.storage.InMemorySpanStore.accept(List<Span> spans)",
                    "Collection<V> zipkin.storage.InMemorySpanStore.remove(K key)",
                    "public synchronized List<String> zipkin.storage.InMemorySpanStore.getServiceNames()",
                    "void zipkin.storage.InMemorySpanStore.put(K key, V value)",
                    "private synchronized int zipkin.storage.InMemorySpanStore.deleteOldestTrace()",
                    "synchronized void zipkin.storage.InMemorySpanStore.addSpans(List<Span> spans)",
                    "synchronized Set<Long> zipkin.storage.InMemorySpanStore.traceIdsDescendingByTimestamp(QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "70bbba12f5094195bb364d0693272b44f3637dc8",
        "previous_commit": "e41f89fba4a4b79fc4d3d59a1f3ca0f2f56d1de1",
        "date": 1502453685,
        "releases": {
            "previous": "70bbba12f5094195bb364d0693272b44f3637dc8",
            "next": "70bbba12f5094195bb364d0693272b44f3637dc8"
        },
        "commit_message": "Changes Elasticsearch single-type indexing to work around dotted tags (#1685)\n\nTags are stored as a dictionary. Since some tag names will include\r\ninconsistent number of dots (ex \"error\" and perhaps \"error.message\"), we\r\ncannot index them naturally with elasticsearch. Instead, we add an\r\nindex-only (non-source) field of _q which includes valid search queries.\r\n\r\nFor example, the tag error -> 500 results in \"_q\":[\"error\", \"error=500\"].\r\nThis matches the input query syntax, and can be checked manually with curl.\r\n\r\nEx `curl -s localhost:9200/zipkin:span-2017-08-11/_search?q=_q:error=500`",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "70bbba12f5094195bb364d0693272b44f3637dc8": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.add(long indexTimestamp, Span span, @Nullable Long timestampMillis)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java": [
                    "public AsyncSpanStore zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.asyncSpanStore()"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/VersionSpecificTemplates.java": [
                    "private String zipkin.storage.elasticsearch.http.VersionSpecificTemplates.versionSpecificSpanIndexTemplate(float version)",
                    "IndexTemplates zipkin.storage.elasticsearch.http.VersionSpecificTemplates.get(HttpCall.Factory callFactory)",
                    "static float zipkin.storage.elasticsearch.http.VersionSpecificTemplates.getVersion(HttpCall.Factory callFactory)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/internal/client/SearchRequest.java": [
                    "public Filters zipkin.storage.elasticsearch.http.internal.client.SearchRequest.addTerm(String field, String value)"
                ]
            },
            "e41f89fba4a4b79fc4d3d59a1f3ca0f2f56d1de1": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.add(long indexTimestamp, Span span, @Nullable Long timestampMillis)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java": [
                    "public AsyncSpanStore zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.asyncSpanStore()"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/VersionSpecificTemplates.java": [
                    "private String zipkin.storage.elasticsearch.http.VersionSpecificTemplates.versionSpecificSpanIndexTemplate(float version)",
                    "IndexTemplates zipkin.storage.elasticsearch.http.VersionSpecificTemplates.get(HttpCall.Factory callFactory)",
                    "static float zipkin.storage.elasticsearch.http.VersionSpecificTemplates.getVersion(HttpCall.Factory callFactory)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/internal/client/SearchRequest.java": [
                    "public Filters zipkin.storage.elasticsearch.http.internal.client.SearchRequest.addTerm(String field, String value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "19816eb57c051b9ad68cff2dee52882d27da3513",
        "previous_commit": "f92dd23ed9ac8987067adb55732fe9a587247d8f",
        "date": 1498849628,
        "releases": {
            "previous": "19816eb57c051b9ad68cff2dee52882d27da3513",
            "next": "19816eb57c051b9ad68cff2dee52882d27da3513"
        },
        "commit_message": "Refactors in-memory storage so that there's a common type across data sets (#1636)\n\nThis rejigs things so that the pair of (traceID, timestamp) is used consistently\r\nacross all data sets that grow unbounded. This should make it easier to support\r\npurging later. For example one implementation could be to iterate\r\ntraceIdToTraceIdTimeStamps in reverse (using delegate.descendingKeySet()),\r\nwhich should give the eldest trace ID and delete that. When weak references are\r\nused elsewhere, GC should clean them up. Other mechanisms besides weak\r\nreferences could be used as well.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "19816eb57c051b9ad68cff2dee52882d27da3513": {
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "Collection<V> zipkin.storage.InMemorySpanStore.get(K key)",
                    "Set<Long> zipkin.storage.InMemorySpanStore.traceIdsDescendingByTimestamp(QueryRequest request)",
                    "public synchronized List<Long> zipkin.storage.InMemorySpanStore.traceIds()",
                    "public void zipkin.storage.InMemorySpanStore.accept(List<Span> spans)",
                    "public synchronized List<Span> zipkin.storage.InMemorySpanStore.getRawTrace(long traceIdHigh, long traceId)",
                    "public synchronized List<List<Span>> zipkin.storage.InMemorySpanStore.getRawTraces()",
                    "public synchronized List<List<Span>> zipkin.storage.InMemorySpanStore.getTraces(QueryRequest request)"
                ]
            },
            "f92dd23ed9ac8987067adb55732fe9a587247d8f": {
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "Collection<V> zipkin.storage.InMemorySpanStore.get(K key)",
                    "Set<Long> zipkin.storage.InMemorySpanStore.traceIdsDescendingByTimestamp(QueryRequest request)",
                    "public synchronized List<Long> zipkin.storage.InMemorySpanStore.traceIds()",
                    "public void zipkin.storage.InMemorySpanStore.accept(List<Span> spans)",
                    "public synchronized List<Span> zipkin.storage.InMemorySpanStore.getRawTrace(long traceIdHigh, long traceId)",
                    "public synchronized List<List<Span>> zipkin.storage.InMemorySpanStore.getRawTraces()",
                    "public synchronized List<List<Span>> zipkin.storage.InMemorySpanStore.getTraces(QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d0cc512b2614527f0592f2a560bda8d273eb66ac",
        "previous_commit": "cd1f3aeb5aa0d4bc1af67781efbfafaee241f3ca",
        "date": 1467771434,
        "releases": {
            "previous": "d0cc512b2614527f0592f2a560bda8d273eb66ac",
            "next": "d0cc512b2614527f0592f2a560bda8d273eb66ac"
        },
        "commit_message": "Adds error-prone checks to the build (#1166)\n\nerror-prone is a tool that catches common problems at compile time. For\r\nexample, it can figure out if you wrote equals incorrectly, or didn't\r\nuse a volatile when double-checking a value.\r\n\r\nNon-critical concerns print out as warnings in the compiler log.\r\n\r\nSee http://errorprone.info/",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d0cc512b2614527f0592f2a560bda8d273eb66ac": {
                "zipkin/src/main/java/zipkin/internal/Dependencies.java": [
                    "public Dependencies zipkin.internal.Dependencies.read(ByteBuffer bytes)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public BinaryAnnotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public Span zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public DependencyLink zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public BinaryAnnotation zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public Endpoint zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public Annotation zipkin.internal.ThriftCodec.read(ByteBuffer bytes)"
                ]
            },
            "cd1f3aeb5aa0d4bc1af67781efbfafaee241f3ca": {
                "zipkin/src/main/java/zipkin/internal/Dependencies.java": [
                    "public Dependencies zipkin.internal.Dependencies.read(ByteBuffer bytes)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public BinaryAnnotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public Span zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public DependencyLink zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public BinaryAnnotation zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public Endpoint zipkin.internal.ThriftCodec.read(ByteBuffer bytes)",
                    "public Annotation zipkin.internal.ThriftCodec.read(ByteBuffer bytes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "37687b1f1872ef01ed10f1b677eae73d8184bc22",
        "previous_commit": "4dc8ba9e9c12550067d699ae3a8ac7bc20e4e6c5",
        "date": 1468113672,
        "releases": {
            "previous": "37687b1f1872ef01ed10f1b677eae73d8184bc22",
            "next": "37687b1f1872ef01ed10f1b677eae73d8184bc22"
        },
        "commit_message": "Over-fetches cassandra trace indexes to improve UX and fixes Cassandra index (#1177)\n\n* Over-fetches cassandra trace indexes to improve UX\r\n\r\nEven when optimized, cassandra indexes will have more rows than distinct\r\n(trace_id, timestamp) needed to satisfy query requests. This side-effect\r\nin most cases is that users get less than `QueryRequest.limit` results\r\nback. Lacking the ability to do any deduplication server-side, the only\r\nopportunity left is to address this client-side.\r\n\r\nThis over-fetches by a multiplier `CASSANDRA_INDEX_FETCH_MULTIPLIER`,\r\nwhich defaults to 3. For example, if a user requests 10 traces, 30 rows\r\nare requested from indexes, but only 10 distinct trace ids are queried\r\nfor span data.\r\n\r\nTo disable this feature, set `CASSANDRA_INDEX_FETCH_MULTIPLIER=1`\r\n\r\nFixes #1142\r\n\r\n* Fixes Cassandra indexes that lost traces in the same millisecond (#1153)\r\n\r\nA schema bug resulted in Cassandra not indexing more than bucket count\r\n(10) trace ids per millisecond+search input. This manifested as less\r\ntraces retrieved by UI search or Api query than expected. For example,\r\nif you had 1000 traces that happened on the same service in the same\r\nmillisecond, only 10 would return.\r\n\r\nThe indexes affected are `service_span_name_index`, `service_name_index`\r\nand `annotations_index` and this was a schema-only change. Those with\r\nexisting zipkin installations should recreate these indexes to solve the\r\nproblem.\r\n\r\nFixes #1142\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "37687b1f1872ef01ed10f1b677eae73d8184bc22": {
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/ZipkinCassandraStorageProperties.java": [
                    "public CassandraStorage.Builder zipkin.autoconfigure.storage.cassandra.ZipkinCassandraStorageProperties.toBuilder()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.apply(Set<Long> traceIds)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "ListenableFuture<List<DurationRow>> zipkin.storage.cassandra.CassandraSpanStore.oneBucketDurationQuery(QueryRequest request, int bucket, final long startTs, final long endTs, int indexFetchSize)",
                    "public ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.apply(List<String> serviceNames)",
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsByDuration(QueryRequest request, int indexFetchSize)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java": [
                    "protected CassandraSpanStore zipkin.storage.cassandra.CassandraStorage.computeGuavaSpanStore()"
                ]
            },
            "4dc8ba9e9c12550067d699ae3a8ac7bc20e4e6c5": {
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/ZipkinCassandraStorageProperties.java": [
                    "public CassandraStorage.Builder zipkin.autoconfigure.storage.cassandra.ZipkinCassandraStorageProperties.toBuilder()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.apply(Set<Long> traceIds)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.getTraceIdsByDuration(QueryRequest request)",
                    "ListenableFuture<List<DurationRow>> zipkin.storage.cassandra.CassandraSpanStore.oneBucketDurationQuery(QueryRequest request, int bucket, final long startTs, final long endTs)",
                    "public ListenableFuture<Map<Long, Long>> zipkin.storage.cassandra.CassandraSpanStore.apply(List<String> serviceNames)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java": [
                    "protected CassandraSpanStore zipkin.storage.cassandra.CassandraStorage.computeGuavaSpanStore()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "68412118cf8df493bb0e54beb223120663e5ce22",
        "previous_commit": "5637db07b3d824647760cf9751da956f1fbd7bd9",
        "date": 1565082545,
        "releases": {
            "previous": "68412118cf8df493bb0e54beb223120663e5ce22",
            "next": "68412118cf8df493bb0e54beb223120663e5ce22"
        },
        "commit_message": "Instruments when STORAGE_THROTTLE_ENABLED=true (#2735)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "68412118cf8df493bb0e54beb223120663e5ce22": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "public HttpResponse zipkin2.server.internal.BodyIsExceptionMessage.handleException(RequestContext ctx, HttpRequest req, Throwable cause)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinServerConfiguration.java": [],
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingConfiguration.java": [
                    "Tracing zipkin2.server.internal.brave.TracingConfiguration.tracing(Reporter<Span> reporter)",
                    "public <Req> Boolean zipkin2.server.internal.brave.TracingConfiguration.trySample(HttpAdapter<Req, ?> adapter, Req request)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledCall.java": [
                    "public void zipkin2.server.internal.throttle.ThrottledCall.run()",
                    "public void zipkin2.server.internal.throttle.ThrottledCall.onError(Throwable t)",
                    "public String zipkin2.server.internal.throttle.ThrottledCall.toString()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledStorageComponent.java": [
                    "public Call<Void> zipkin2.server.internal.throttle.ThrottledStorageComponent.accept(List<Span> spans)"
                ]
            },
            "5637db07b3d824647760cf9751da956f1fbd7bd9": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "public HttpResponse zipkin2.server.internal.BodyIsExceptionMessage.handleException(RequestContext ctx, HttpRequest req, Throwable cause)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinServerConfiguration.java": [
                    "public Object zipkin2.server.internal.ThrottledStorageComponentEnhancer.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingConfiguration.java": [
                    "Tracing zipkin2.server.internal.brave.TracingConfiguration.tracing(Reporter<Span> reporter, Sampler sampler)",
                    "public <Req> Boolean zipkin2.server.internal.brave.TracingConfiguration.trySample(HttpAdapter<Req, ?> adapter, Req request)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledCall.java": [
                    "public void zipkin2.server.internal.throttle.ThrottledCall<V>.run()",
                    "public String zipkin2.server.internal.throttle.ThrottledCall<V>.toString()",
                    "public void zipkin2.server.internal.throttle.ThrottledCall<V>.onError(Throwable t)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledStorageComponent.java": [
                    "public Call<Void> zipkin2.server.internal.throttle.ThrottledStorageComponent.accept(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c9c373e52308b1f8ff073553b625834ef3fee926",
        "previous_commit": "d7343f88c95af64fbc61b08a80314d1d2c5c1711",
        "date": 1460691140,
        "releases": {
            "previous": "c9c373e52308b1f8ff073553b625834ef3fee926",
            "next": "c9c373e52308b1f8ff073553b625834ef3fee926"
        },
        "commit_message": "Makes empty spans cheaper to create\n\nI noticed another test was making my CPU fan go on. Turns out we are\nneedlessly doing work on sparse spans.\n\nHere are the before and after from my laptop:\n\n```\nSpanBenchmarks.buildMinimalClientSpan  thrpt   15   7.440 \u00b1 0.418  ops/us\nSpanBenchmarks.buildMinimalSpan        thrpt   15  16.224 \u00b1 1.089  ops/us\nSpanBenchmarks.buildRPCSpan            thrpt   15   3.249 \u00b1 0.270  ops/us\n\nSpanBenchmarks.buildMinimalClientSpan  thrpt   15   12.384 \u00b1 0.193  ops/us\nSpanBenchmarks.buildMinimalSpan        thrpt   15  128.275 \u00b1 1.363  ops/us\nSpanBenchmarks.buildRPCSpan            thrpt   15    3.624 \u00b1 0.209  ops/us\n```\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c9c373e52308b1f8ff073553b625834ef3fee926": {
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.addBinaryAnnotation(BinaryAnnotation binaryAnnotation)",
                    "public Builder zipkin.Span.merge(Span that)",
                    "public Span zipkin.Span.build()",
                    "public Builder zipkin.Span.addAnnotation(Annotation annotation)",
                    "public Builder zipkin.Span.binaryAnnotations(Collection<BinaryAnnotation> binaryAnnotations)",
                    "public Builder zipkin.Span.annotations(Collection<Annotation> annotations)"
                ],
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static <T extends Comparable<? super T>> List<T> zipkin.internal.Util.sortedList(@Nullable Collection<T> input)"
                ]
            },
            "d7343f88c95af64fbc61b08a80314d1d2c5c1711": {
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.addBinaryAnnotation(BinaryAnnotation binaryAnnotation)",
                    "public Builder zipkin.Span.merge(Span that)",
                    "public Span zipkin.Span.build()",
                    "public Builder zipkin.Span.addAnnotation(Annotation annotation)",
                    "public Builder zipkin.Span.binaryAnnotations(Collection<BinaryAnnotation> binaryAnnotations)",
                    "public Builder zipkin.Span.annotations(Collection<Annotation> annotations)"
                ],
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static <T extends Comparable<? super T>> List<T> zipkin.internal.Util.sortedList(@Nullable Collection<T> input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "59a634052c33d87565b17f632e4c10ae53302cd0",
        "previous_commit": "9f2004ee89a3a6bbd9cc7b1747c10124af2471a5",
        "date": 1489562997,
        "releases": {
            "previous": "59a634052c33d87565b17f632e4c10ae53302cd0",
            "next": "59a634052c33d87565b17f632e4c10ae53302cd0"
        },
        "commit_message": "Speed up ActuateCollectorMetrics (#1539)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "59a634052c33d87565b17f632e4c10ae53302cd0": {
                "zipkin-server/src/main/java/zipkin/server/ActuateCollectorMetrics.java": [
                    "public void zipkin.server.ActuateCollectorMetrics.incrementBytes(int quantity)",
                    "public void zipkin.server.ActuateCollectorMetrics.incrementMessages()",
                    "public void zipkin.server.ActuateCollectorMetrics.incrementSpans(int quantity)",
                    "public void zipkin.server.ActuateCollectorMetrics.incrementSpansDropped(int quantity)",
                    "public void zipkin.server.ActuateCollectorMetrics.incrementMessagesDropped()",
                    "void zipkin.server.ActuateCollectorMetrics.reset()",
                    "public ActuateCollectorMetrics zipkin.server.ActuateCollectorMetrics.forTransport(String transportType)"
                ]
            },
            "9f2004ee89a3a6bbd9cc7b1747c10124af2471a5": {
                "zipkin-server/src/main/java/zipkin/server/ActuateCollectorMetrics.java": [
                    "public void zipkin.server.ActuateCollectorMetrics.incrementBytes(int quantity)",
                    "public void zipkin.server.ActuateCollectorMetrics.incrementMessages()",
                    "public void zipkin.server.ActuateCollectorMetrics.incrementSpans(int quantity)",
                    "public void zipkin.server.ActuateCollectorMetrics.incrementSpansDropped(int quantity)",
                    "public void zipkin.server.ActuateCollectorMetrics.incrementMessagesDropped()",
                    "void zipkin.server.ActuateCollectorMetrics.reset()",
                    "public ActuateCollectorMetrics zipkin.server.ActuateCollectorMetrics.forTransport(String transportType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fe14098030ab7ee5e305376c232ac72d852890b5",
        "previous_commit": "4ddc4b5fa336e204284638a0d357fb6b20a07f34",
        "date": 1482222034,
        "releases": {
            "previous": "fe14098030ab7ee5e305376c232ac72d852890b5",
            "next": "fe14098030ab7ee5e305376c232ac72d852890b5"
        },
        "commit_message": "Updates to latest error-prone and fixes issues (#1446)\n\nerror-prone now only runs on the main source tree.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fe14098030ab7ee5e305376c232ac72d852890b5": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/Schema.java": [
                    "static void zipkin.storage.cassandra.Schema.applyCqlFile(String keyspace, Session session, String resource)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Schema.java": [
                    "static void zipkin.storage.cassandra3.Schema.applyCqlFile(String keyspace, Session session, String resource)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "protected ListenableFuture<List<String>> zipkin.storage.elasticsearch.http.HttpClient.collectBucketKeys(String[] indices, QueryBuilder query, AbstractAggregationBuilder... aggregations)"
                ],
                "zipkin-zookeeper/src/main/java/zipkin/collector/zookeeper/ZooKeeperCollectorSampler.java": [
                    "static GroupMember zipkin.collector.zookeeper.ZooKeeperCollectorSampler.storeRateGroup(CuratorFramework client, Builder builder, Closer closer, AtomicInteger spanCount, AtomicInteger storeRate)",
                    "static AtomicInteger zipkin.collector.zookeeper.ZooKeeperCollectorSampler.targetStoreRate(CuratorFramework client, Builder builder, Closer closer)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "private static JsonReader zipkin.internal.JsonCodec.jsonReader(byte[] bytes)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "static <T> T zipkin.internal.ThriftCodec.read(ThriftReader<T> reader, ByteBuffer bytes)"
                ]
            },
            "4ddc4b5fa336e204284638a0d357fb6b20a07f34": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/Schema.java": [
                    "static void zipkin.storage.cassandra.Schema.applyCqlFile(String keyspace, Session session, String resource)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Schema.java": [
                    "static void zipkin.storage.cassandra3.Schema.applyCqlFile(String keyspace, Session session, String resource)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "protected ListenableFuture<List<String>> zipkin.storage.elasticsearch.http.HttpClient.collectBucketKeys(String[] indices, QueryBuilder query, AbstractAggregationBuilder... aggregations)"
                ],
                "zipkin-zookeeper/src/main/java/zipkin/collector/zookeeper/ZooKeeperCollectorSampler.java": [
                    "static GroupMember zipkin.collector.zookeeper.ZooKeeperCollectorSampler.storeRateGroup(CuratorFramework client, Builder builder, Closer closer, AtomicInteger spanCount, AtomicInteger storeRate)",
                    "static AtomicInteger zipkin.collector.zookeeper.ZooKeeperCollectorSampler.targetStoreRate(CuratorFramework client, Builder builder, Closer closer)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "private static JsonReader zipkin.internal.JsonCodec.jsonReader(byte[] bytes)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "static <T> T zipkin.internal.ThriftCodec.read(ThriftReader<T> reader, ByteBuffer bytes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "80e99c482e06da7fa0fdc8cbf1055d07bb690853",
        "previous_commit": "3481b4ade2e293e0d1d25fe33c86d1f86d28431b",
        "date": 1482314878,
        "releases": {
            "previous": "80e99c482e06da7fa0fdc8cbf1055d07bb690853",
            "next": "80e99c482e06da7fa0fdc8cbf1055d07bb690853"
        },
        "commit_message": "Prefers client span duration on conflict\n\nThis avoids issues when there's skew between client and server\ntimestamps, but without interfering with authoritative data.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "80e99c482e06da7fa0fdc8cbf1055d07bb690853": {
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.addBinaryAnnotation(BinaryAnnotation binaryAnnotation)",
                    "public boolean zipkin.Span.equals(Object o)",
                    "public Builder zipkin.Span.merge(Span that)",
                    "public Builder zipkin.Span.clear()",
                    "public Builder zipkin.Span.addAnnotation(Annotation annotation)",
                    "public Builder zipkin.Span.binaryAnnotations(Collection<BinaryAnnotation> binaryAnnotations)",
                    "public Builder zipkin.Span.annotations(Collection<Annotation> annotations)"
                ]
            },
            "3481b4ade2e293e0d1d25fe33c86d1f86d28431b": {
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.addBinaryAnnotation(BinaryAnnotation binaryAnnotation)",
                    "public boolean zipkin.Span.equals(Object o)",
                    "public Builder zipkin.Span.merge(Span that)",
                    "public Builder zipkin.Span.clear()",
                    "public Builder zipkin.Span.addAnnotation(Annotation annotation)",
                    "public Builder zipkin.Span.binaryAnnotations(Collection<BinaryAnnotation> binaryAnnotations)",
                    "public Builder zipkin.Span.annotations(Collection<Annotation> annotations)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f061c8b960e61030edcb356e29d91797f2750075",
        "previous_commit": "e4eff177bca6ad918c181e1a6f5e2c07e0a0595b",
        "date": 1563616283,
        "releases": {
            "previous": "f061c8b960e61030edcb356e29d91797f2750075",
            "next": "f061c8b960e61030edcb356e29d91797f2750075"
        },
        "commit_message": "Switches to always issue onError with throwable (#2696)\n\n* Switches to always issue onError with throwable\r\n\r\nThis helps prevent subtle bugs. It will take a bit to write tests for these.\r\n\r\n* Make sure to return null in doEnqueue.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f061c8b960e61030edcb356e29d91797f2750075": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledCall.java": [
                    "public void zipkin2.server.internal.throttle.ThrottledCall<V>.run()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/ResultSetFutureCall.java": [
                    "protected void zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.doEnqueue(Callback<V> callback)",
                    "public void zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.run()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "protected void zipkin2.elasticsearch.internal.client.HttpCall<V>.doEnqueue(Callback<V> callback)"
                ],
                "zipkin/src/main/java/zipkin2/Call.java": [
                    "protected void zipkin2.Call<V>.doEnqueue(final Callback<R> callback)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "protected void zipkin2.storage.InMemoryStorage.doEnqueue(Callback<Void> callback)"
                ]
            },
            "e4eff177bca6ad918c181e1a6f5e2c07e0a0595b": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledCall.java": [
                    "public void zipkin2.server.internal.throttle.ThrottledCall<V>.run()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/ResultSetFutureCall.java": [
                    "protected void zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.doEnqueue(Callback<V> callback)",
                    "public void zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.run()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "protected void zipkin2.elasticsearch.internal.client.HttpCall<V>.doEnqueue(Callback<V> callback)"
                ],
                "zipkin/src/main/java/zipkin2/Call.java": [
                    "protected void zipkin2.Call<V>.doEnqueue(final Callback<R> callback)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "protected void zipkin2.storage.InMemoryStorage.doEnqueue(Callback<Void> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4426d401e6769806416e62e319fcbb0789821ed2",
        "previous_commit": "94e7365695c46e731a93a2d0ff97a27e5837973f",
        "date": 1458880401,
        "releases": {
            "previous": "4426d401e6769806416e62e319fcbb0789821ed2",
            "next": "4426d401e6769806416e62e319fcbb0789821ed2"
        },
        "commit_message": "Makes it possible for all span stores to implement AsyncSpanStore\n\nIn a previous pull request, Elasticsearch implemented AsyncSpanStore.\n\nThis completes the work, with the following summary:\n\n* `AsyncToScalaSpanStoreAdapter` can port an AsyncSpanStore to the scala SpanStore\n* `BlockingToAsyncSpanStoreAdapter` lets (the blockin) SpanStore implement AsyncSpanStore\n  * `JDBCSpanStore` is blocking and can wrap with ^^\n* `GuavaToAsyncSpanStoreAdapter` lets Guava implement AsyncSpanStore\n  * `CassandraSpanStore` and `ElasticSearchSpanStore` now extend ^^\n* `InMemorySpanStore` now directly implements AsyncSpanStore\n  * callbacks are issued on the calling thread as opposed to defering\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4426d401e6769806416e62e319fcbb0789821ed2": {
                "interop/src/main/java/zipkin/interop/ScalaDependencyStoreAdapter.java": [
                    "public Future<Seq<DependencyLink>> zipkin.interop.ScalaDependencyStoreAdapter.getDependencies(long endTs, Option<Object> lookback)",
                    "public void zipkin.interop.ScalaDependencyStoreAdapter.close()"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "SpanStore zipkin.server.ZipkinServerConfiguration.cassandraSpanStore(ZipkinCassandraProperties cassandra)",
                    "SpanStore zipkin.server.ZipkinServerConfiguration.elasticsearchSpanStore(ZipkinElasticsearchProperties elasticsearch)"
                ],
                "zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "void zipkin.cassandra.CassandraSpanStore.clear()"
                ],
                "zipkin-spanstores/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticFutures.java": [
                    "public void zipkin.elasticsearch.ElasticFutures.onFailure(Throwable e)"
                ],
                "zipkin-spanstores/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)"
                ]
            },
            "94e7365695c46e731a93a2d0ff97a27e5837973f": {
                "interop/src/main/java/zipkin/interop/ScalaDependencyStoreAdapter.java": [
                    "public Future<Seq<DependencyLink>> zipkin.interop.ScalaDependencyStoreAdapter.getDependencies(long endTs, Option<Object> lookback)",
                    "public void zipkin.interop.ScalaDependencyStoreAdapter.close()"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "SpanStore zipkin.server.ZipkinServerConfiguration.cassandraSpanStore(ZipkinCassandraProperties cassandra)",
                    "SpanStore zipkin.server.ZipkinServerConfiguration.elasticsearchSpanStore(ZipkinElasticsearchProperties elasticsearch)"
                ],
                "zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "void zipkin.cassandra.CassandraSpanStore.clear()"
                ],
                "zipkin-spanstores/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticFutures.java": [
                    "public void zipkin.elasticsearch.ElasticFutures.onFailure(Throwable e)"
                ],
                "zipkin-spanstores/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanStore.java": [
                    "public void zipkin.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request, final Callback<List<List<Span>>> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4d4c6f3858ee0a85d770efd5c690f1f5bc8d05a4",
        "previous_commit": "b0f22b5bd0f29dd1539cb797129fb1d61dd7b3de",
        "date": 1477473056,
        "releases": {
            "previous": "4d4c6f3858ee0a85d770efd5c690f1f5bc8d05a4",
            "next": "4d4c6f3858ee0a85d770efd5c690f1f5bc8d05a4"
        },
        "commit_message": "Adjusts storage components such that they retain 128-bit trace ids\n\nThis adds a test that the high 64 bits of a trace id aren't lost when\nstoring. This also adds a test that traces with any length trace id\ncan be retrieved by the lower-64 bits.\n\nNotes on storage of 128-bit trace id:\n\n* mysql needs the following schema update:\n\n```mysql\nmysql> alter table zipkin_spans add `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit';\n```\n\nNotes on retrieval by lower-64 bit:\n\n* cassandra3 doesn't support retrieval by lower-64 bit\n  * This is likely solvable but too much for this PR.\n* elasticsearch requires an index template update\n  * This automatically applies when the day rolls over.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4d4c6f3858ee0a85d770efd5c690f1f5bc8d05a4": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeServiceSpanName( String serviceName, String spanName, long timestamp_micro, Long duration, BigInteger traceId)",
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeSpan(Span span, BigInteger traceId, Long timestamp)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "ListenableFuture<Collection<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getSpansByTraceIds(Set<BigInteger> traceIds, int limit)",
                    "public Collection<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.apply(ResultSet input)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanConsumer.java": [
                    "public void zipkin.storage.mysql.MySQLSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "List<List<Span>> zipkin.storage.mysql.MySQLSpanStore.getTraces(@Nullable QueryRequest request, @Nullable Long traceId, boolean raw)"
                ]
            },
            "b0f22b5bd0f29dd1539cb797129fb1d61dd7b3de": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeServiceSpanName( String serviceName, String spanName, long timestamp_micro, Long duration, long traceId)",
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeSpan(Span span, Long timestamp)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "ListenableFuture<Collection<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getSpansByTraceIds(Set<BigInteger> traceIds, int limit)",
                    "public Collection<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.apply(ResultSet input)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanConsumer.java": [
                    "public void zipkin.storage.mysql.MySQLSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "List<List<Span>> zipkin.storage.mysql.MySQLSpanStore.getTraces(@Nullable QueryRequest request, @Nullable Long traceId, boolean raw)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "93163b1fc9f4e6c0429c74a822d53709e1515abb",
        "previous_commit": "1b96cb763763eecc1949d0c66e51fd444aebc1f9",
        "date": 1546318197,
        "releases": {
            "previous": "93163b1fc9f4e6c0429c74a822d53709e1515abb",
            "next": "93163b1fc9f4e6c0429c74a822d53709e1515abb"
        },
        "commit_message": "Adds Cassandra support for Autocomplete tags (#2309)\n\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "93163b1fc9f4e6c0429c74a822d53709e1515abb": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.v1.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "void zipkin2.storage.cassandra.v1.CassandraSpanConsumer.clear()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Schema.java": [
                    "static void zipkin2.storage.cassandra.v1.Schema.ensureExists(String keyspace, Session session)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "static long zipkin2.storage.cassandra.CassandraSpanConsumer.guessTimestamp(Span span)",
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public static Builder zipkin2.storage.cassandra.CassandraStorage.newBuilder()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, Session session)"
                ]
            },
            "1b96cb763763eecc1949d0c66e51fd444aebc1f9": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.v1.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "void zipkin2.storage.cassandra.v1.CassandraSpanConsumer.clear()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Schema.java": [
                    "static void zipkin2.storage.cassandra.v1.Schema.ensureExists(String keyspace, Session session)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "static long zipkin2.storage.cassandra.CassandraSpanConsumer.guessTimestamp(Span span)",
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public static Builder zipkin2.storage.cassandra.CassandraStorage.newBuilder()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, Session session)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8ed14443fd0ce5a4982c125f3b6719972f88cad8",
        "previous_commit": "9dd10cdc41c424648e93b2a1a1f849beabe4d838",
        "date": 1522226362,
        "releases": {
            "previous": "8ed14443fd0ce5a4982c125f3b6719972f88cad8",
            "next": "8ed14443fd0ce5a4982c125f3b6719972f88cad8"
        },
        "commit_message": "Inlines actuate metrics buffer code to dodge conflicts on Spring Boot 2 (#1975)\n\nSpring Boot 2 removes the buffers package we used. This inlines the\r\nessential work going on.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8ed14443fd0ce5a4982c125f3b6719972f88cad8": {
                "zipkin-server/src/main/java/zipkin/server/internal/ActuateCollectorMetrics.java": [
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementMessagesDropped()",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementMessages()",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementSpans(int quantity)",
                    "public Collection<Metric<?>> zipkin.server.internal.ActuateCollectorMetrics.metrics()",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementSpansDropped(int quantity)",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementBytes(int quantity)"
                ]
            },
            "9dd10cdc41c424648e93b2a1a1f849beabe4d838": {
                "zipkin-server/src/main/java/zipkin/server/internal/ActuateCollectorMetrics.java": [
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementMessagesDropped()",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementMessages()",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementSpans(int quantity)",
                    "public Collection<Metric<?>> zipkin.server.internal.ActuateCollectorMetrics.metrics()",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementSpansDropped(int quantity)",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementBytes(int quantity)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "20e50337c463b3d8f8029dcd7c9f00c157864b20",
        "previous_commit": "3fbee819c1266be5193df14350e8136e60761443",
        "date": 1458736317,
        "releases": {
            "previous": "20e50337c463b3d8f8029dcd7c9f00c157864b20",
            "next": "20e50337c463b3d8f8029dcd7c9f00c157864b20"
        },
        "commit_message": "Adds AsyncSpanStore: an SPI to adapt to async composition libraries\n\nThis adds a callback-driven AsyncSpanStore, which can be used to build\nfutures or other async constructs. This isn't intended to be used\ndirectly by users. Rather, it is an SPI used to intermediate between\nlibraries that can drift, such as Guava or RxJava.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "20e50337c463b3d8f8029dcd7c9f00c157864b20": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "SpanStore zipkin.server.ZipkinServerConfiguration.elasticsearchSpanStore(ZipkinElasticsearchProperties elasticsearch)"
                ],
                "zipkin-spanstores/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanStore.java": [
                    "ListenableFuture<List<Span>> zipkin.elasticsearch.ElasticsearchSpanStore.getRawTrace(long traceId)",
                    "public List<List<Span>> zipkin.elasticsearch.ElasticsearchSpanStore.apply(SearchResponse response)",
                    "public List<DependencyLink> zipkin.elasticsearch.ElasticsearchSpanStore.apply(SearchResponse response)",
                    "public List<Span> zipkin.elasticsearch.ElasticsearchSpanStore.apply(SearchResponse response)",
                    "public List<String> zipkin.elasticsearch.ElasticsearchSpanStore.apply(SearchResponse response)"
                ]
            },
            "3fbee819c1266be5193df14350e8136e60761443": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "SpanStore zipkin.server.ZipkinServerConfiguration.elasticsearchSpanStore(ZipkinElasticsearchProperties elasticsearch)"
                ],
                "zipkin-spanstores/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanStore.java": [
                    "public List<List<Span>> zipkin.elasticsearch.ElasticsearchSpanStore.apply(SearchResponse response)",
                    "public List<DependencyLink> zipkin.elasticsearch.ElasticsearchSpanStore.apply(SearchResponse response)",
                    "public List<Span> zipkin.elasticsearch.ElasticsearchSpanStore.apply(SearchResponse response)",
                    "public List<String> zipkin.elasticsearch.ElasticsearchSpanStore.apply(SearchResponse response)",
                    "public ListenableFuture<List<Span>> zipkin.elasticsearch.ElasticsearchSpanStore.getRawTrace(long traceId)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5cfde9ea1264779dadce175a5c2fd1e43294a13c",
        "previous_commit": "bc17082781504ed4910d52f44c80b2d22727b4f6",
        "date": 1593785002,
        "releases": {
            "previous": "5cfde9ea1264779dadce175a5c2fd1e43294a13c",
            "next": "5cfde9ea1264779dadce175a5c2fd1e43294a13c"
        },
        "commit_message": "Updates versions, most notably Armeria (#3130)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5cfde9ea1264779dadce175a5c2fd1e43294a13c": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeInboundHandler.java": [
                    "public void zipkin2.collector.scribe.ScribeInboundHandler.channelRead(ChannelHandlerContext ctx, Object payload)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "EndpointGroup zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.getEndpoint()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "HttpCall.Factory zipkin2.elasticsearch.ElasticsearchStorage.http()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "CompletableFuture<PooledAggregatedHttpResponse> zipkin2.elasticsearch.internal.client.HttpCall<V>.sendRequest()",
                    "protected void zipkin2.elasticsearch.internal.client.HttpCall<V>.doCancel()"
                ]
            },
            "bc17082781504ed4910d52f44c80b2d22727b4f6": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeInboundHandler.java": [
                    "public void zipkin2.collector.scribe.ScribeInboundHandler.channelRead(ChannelHandlerContext ctx, Object payload)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "EndpointGroup zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.getEndpoint()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "HttpCall.Factory zipkin2.elasticsearch.ElasticsearchStorage.http()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "CompletableFuture<AggregatedHttpResponse> zipkin2.elasticsearch.internal.client.HttpCall<V>.sendRequest()",
                    "protected void zipkin2.elasticsearch.internal.client.HttpCall<V>.doCancel()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5615df3a88b83f8f7aebcd6d8ac14cdaa6f48067",
        "previous_commit": "f8e5e976a67c085b14f9d5b2d3880975c105305f",
        "date": 1458202834,
        "releases": {
            "previous": "5615df3a88b83f8f7aebcd6d8ac14cdaa6f48067",
            "next": "5615df3a88b83f8f7aebcd6d8ac14cdaa6f48067"
        },
        "commit_message": "Supports viewing raw traces via GET /api/v1/trace/:id?raw\nWhen troubleshooting instrumentation, we sometimes need to hop to the\ndatabase to see what the collector stored (which is closer to what the\ninstrumentation sent).\n\nIn some cases, we are hunting down \"clock skew\" problems, and sometimes\nthat's a red herring. Some times we are looking to see if applications\nare sending the same span multiple times. The reason we have to go to\nthe database is we can't quite tell if query-time adjustment logic is\nhelping or hurting.\n\nThis introduces a new query flag \"raw\" to the get trace endpoint. When\nspecified, no query time adjustments are made after data is returned\nfrom the backend.\n\nSee https://github.com/openzipkin/zipkin/pull/1027\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5615df3a88b83f8f7aebcd6d8ac14cdaa6f48067": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "List<List<Span>> zipkin.cassandra.CassandraSpanStore.getTracesByIds(Collection<Long> traceIds)"
                ],
                "zipkin-spanstores/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java": [
                    "List<List<Span>> zipkin.jdbc.JDBCSpanStore.getTraces(@Nullable QueryRequest request, @Nullable Long traceId, boolean raw)",
                    "public List<Span> zipkin.jdbc.JDBCSpanStore.getTrace(long traceId)",
                    "public List<List<Span>> zipkin.jdbc.JDBCSpanStore.getTraces(QueryRequest request)"
                ],
                "zipkin/src/main/java/zipkin/InMemorySpanStore.java": [
                    "public synchronized List<Span> zipkin.InMemorySpanStore.getTrace(long traceId)"
                ]
            },
            "f8e5e976a67c085b14f9d5b2d3880975c105305f": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "List<List<Span>> zipkin.cassandra.CassandraSpanStore.getTracesByIds(Collection<Long> traceIds)"
                ],
                "zipkin-spanstores/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java": [
                    "public List<Span> zipkin.jdbc.JDBCSpanStore.getTrace(long traceId)",
                    "public List<List<Span>> zipkin.jdbc.JDBCSpanStore.getTraces(QueryRequest request)",
                    "List<List<Span>> zipkin.jdbc.JDBCSpanStore.getTraces(@Nullable QueryRequest request, @Nullable Long traceId)"
                ],
                "zipkin/src/main/java/zipkin/InMemorySpanStore.java": [
                    "public synchronized List<Span> zipkin.InMemorySpanStore.getTrace(long traceId)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "10c478ba049696e9ef32e8400a3d7209e3f31c5a",
        "previous_commit": "69d74a4ddd2ac52512237a13ae5082d3d2c54809",
        "date": 1586928604,
        "releases": {
            "previous": "10c478ba049696e9ef32e8400a3d7209e3f31c5a",
            "next": "10c478ba049696e9ef32e8400a3d7209e3f31c5a"
        },
        "commit_message": "Allows opting out via ES_ENSURE_TEMPLATES=false (#3063)\n\nUsers can now disable Elasticsearch index template creation at startup\r\nvia `ES_ENSURE_TEMPLATES=false`. This breaks the warranty of the install\r\nand any upgrades when they do this.\r\n\r\nFixes #3025",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "10c478ba049696e9ef32e8400a3d7209e3f31c5a": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder(LazyHttpClient httpClient)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "IndexTemplates zipkin2.elasticsearch.ElasticsearchStorage.doEnsureIndexTemplates()",
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureIndexTemplatesAndClusterReady(String index)",
                    "public float zipkin2.elasticsearch.ElasticsearchStorage.version()",
                    "public static Builder zipkin2.elasticsearch.ElasticsearchStorage.newBuilder(LazyHttpClient lazyHttpClient)",
                    "char zipkin2.elasticsearch.ElasticsearchStorage.indexTypeDelimiter()"
                ]
            },
            "69d74a4ddd2ac52512237a13ae5082d3d2c54809": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder(LazyHttpClient httpClient)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "IndexTemplates zipkin2.elasticsearch.ElasticsearchStorage.doEnsureIndexTemplates()",
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureIndexTemplatesAndClusterReady(String index)",
                    "public float zipkin2.elasticsearch.ElasticsearchStorage.version()",
                    "public static Builder zipkin2.elasticsearch.ElasticsearchStorage.newBuilder(LazyHttpClient lazyHttpClient)",
                    "char zipkin2.elasticsearch.ElasticsearchStorage.indexTypeDelimiter()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4be2ce186dda41f5f2ed65335b457fa2cbde46e4",
        "previous_commit": "23cbf598fea10f3a5a1e172f3afb6d705a83a026",
        "date": 1457938618,
        "releases": {
            "previous": "4be2ce186dda41f5f2ed65335b457fa2cbde46e4",
            "next": "4be2ce186dda41f5f2ed65335b457fa2cbde46e4"
        },
        "commit_message": "Adds SpanConsumer and settles on List, not Iterator\n\nBefore this change, we accepted Iterator of spans instead of a list,\nmainly to accomodate the sampling use case. It turns out that this is\nawkward, and it also interferes with being able to know the count of\nthe input. Finally, in most cases the call to accept spans comes from\na codec, and that codec has already decoded a List. This changes the\nprimary input to a List instead of an Iterator.\n\nThis also moves the code that stores spans received by a transport into\na type `SpanConsumer`. This helps reduce the coupling around facets such\nas collection-tier sampling, and also makes it easier to write other\ntransports such as Kafka.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4be2ce186dda41f5f2ed65335b457fa2cbde46e4": {
                "interop/src/main/java/zipkin/interop/ScalaSpanStoreAdapter.java": [
                    "public Future<BoxedUnit> zipkin.interop.ScalaSpanStoreAdapter.apply(Seq<Span> input)"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java": [
                    "private ResponseEntity<?> zipkin.server.ZipkinQueryApiV1.validateAndStoreSpans(String encoding, Codec codec, byte[] body)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/SpanStoreSpanCollector.java": [
                    "public void zipkin.server.brave.SpanStoreSpanCollector.flush()"
                ],
                "zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraSpanConsumer.java": [
                    "public void zipkin.cassandra.CassandraSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-spanstores/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java": [
                    "public void zipkin.jdbc.JDBCSpanStore.accept(List<Span> spans)"
                ]
            },
            "23cbf598fea10f3a5a1e172f3afb6d705a83a026": {
                "interop/src/main/java/zipkin/interop/ScalaSpanStoreAdapter.java": [
                    "public Future<BoxedUnit> zipkin.interop.ScalaSpanStoreAdapter.apply(Seq<Span> input)"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java": [
                    "private ResponseEntity<?> zipkin.server.ZipkinQueryApiV1.validateAndStoreSpans(String encoding, Codec codec, byte[] body)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/SpanStoreSpanCollector.java": [
                    "public void zipkin.server.brave.SpanStoreSpanCollector.flush()"
                ],
                "zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraSpanConsumer.java": [
                    "void zipkin.cassandra.CassandraSpanConsumer.accept(Iterator<Span> spans)"
                ],
                "zipkin-spanstores/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java": [
                    "public void zipkin.jdbc.JDBCSpanStore.accept(Iterator<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "473fdc76991452c9c81b8bafa21a1e4b5322f568",
        "previous_commit": "c06e8e761a5feacc66e4ce2e531aef7bde3bc5fc",
        "date": 1564495649,
        "releases": {
            "previous": "473fdc76991452c9c81b8bafa21a1e4b5322f568",
            "next": "473fdc76991452c9c81b8bafa21a1e4b5322f568"
        },
        "commit_message": "Moves Elasticsearch Armeria client wiring to spring (#2711)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "473fdc76991452c9c81b8bafa21a1e4b5322f568": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java": [
                    "Consumer<ClientOptionsBuilder> zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.esBasicAuth(ZipkinElasticsearchStorageProperties es)",
                    "public String zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.toString()",
                    "public void zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.accept(ClientOptionsBuilder client)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public CheckResult zipkin2.elasticsearch.ElasticsearchStorage.check()",
                    "HttpCall.Factory zipkin2.elasticsearch.ElasticsearchStorage.http()",
                    "public void zipkin2.elasticsearch.ElasticsearchStorage.close()"
                ]
            },
            "c06e8e761a5feacc66e4ce2e531aef7bde3bc5fc": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java": [
                    "public String zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.toString()",
                    "public void zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.accept(ClientOptionsBuilder client)",
                    "Consumer<ClientOptionsBuilder> zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.zipkinElasticsearchHttpBasicAuth( ZipkinElasticsearchStorageProperties es)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public CheckResult zipkin2.elasticsearch.ElasticsearchStorage.check()",
                    "public HttpCall.Factory zipkin2.elasticsearch.ElasticsearchStorage.http()",
                    "public void zipkin2.elasticsearch.ElasticsearchStorage.close()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8a6ae58ff09c7b227b8cdf403b0950e5b137edf2",
        "previous_commit": "2099c9d489deb0c56197d7524c64e9b4ceaa3f24",
        "date": 1528265767,
        "releases": {
            "previous": "8a6ae58ff09c7b227b8cdf403b0950e5b137edf2",
            "next": "8a6ae58ff09c7b227b8cdf403b0950e5b137edf2"
        },
        "commit_message": "Adds V1 conversion library\n\nThis allows us to port old storage to zipkin2 packaged code while still\nbeing able to read v1 structs.\n\nNote: this intentionally ignores unsupported Binary Annotation types\nsuch as I64. In doing so, the code is less difficult to maintain.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8a6ae58ff09c7b227b8cdf403b0950e5b137edf2": {
                "zipkin/src/main/java/zipkin/internal/V2SpanStoreAdapter.java": [
                    "public List<zipkin.Span> zipkin.internal.V2SpanStoreAdapter.map(List<Span> spans)"
                ],
                "zipkin2/src/main/java/zipkin2/codec/DependencyLinkBytesDecoder.java": [
                    "public List<DependencyLink> decodeList(byte[] links)"
                ],
                "zipkin2/src/main/java/zipkin2/codec/SpanBytesDecoder.java": [
                    "public List<Span> decodeList(byte[] spans)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin2.internal.DependencyLinker.putTrace(Iterator<Span> spans)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V2SpanWriter.java": [
                    "public void zipkin2.internal.V2SpanWriter.write(Span value, Buffer b)",
                    "public int zipkin2.internal.V2SpanWriter.sizeInBytes(Span value)"
                ]
            },
            "2099c9d489deb0c56197d7524c64e9b4ceaa3f24": {
                "zipkin/src/main/java/zipkin/internal/V2SpanStoreAdapter.java": [
                    "public List<zipkin.Span> zipkin.internal.V2SpanStoreAdapter.map(List<Span> spans)"
                ],
                "zipkin2/src/main/java/zipkin2/codec/DependencyLinkBytesDecoder.java": [
                    "public List<DependencyLink> decodeList(byte[] links)"
                ],
                "zipkin2/src/main/java/zipkin2/codec/SpanBytesDecoder.java": [
                    "public List<Span> decodeList(byte[] spans)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin2.internal.DependencyLinker.putTrace(Iterator<Span> spans)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V2SpanWriter.java": [
                    "public void zipkin2.internal.V2SpanWriter.write(Span value, Buffer b)",
                    "public int zipkin2.internal.V2SpanWriter.sizeInBytes(Span value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "eed3c5b00f58543034a116d7072dc62f4c19319b",
        "previous_commit": "5ff0a5f7d59e44045e4b7bb60bddd041a45fe7f9",
        "date": 1510466177,
        "releases": {
            "previous": "eed3c5b00f58543034a116d7072dc62f4c19319b",
            "next": "eed3c5b00f58543034a116d7072dc62f4c19319b"
        },
        "commit_message": "Removes guava async composition as conflicts with spark\n\nThis extracts out calls in efforts to make the overall flow inside\nCassandra easier to read and the commands themselves easier to debug.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "eed3c5b00f58543034a116d7072dc62f4c19319b": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public StoreSpansCall zipkin2.storage.cassandra.CassandraSpanConsumer.clone()"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<String>> zipkin2.storage.cassandra.CassandraSpanStore.getSpanNames(String serviceName)",
                    "public Call<List<DependencyLink>> zipkin2.storage.cassandra.CassandraSpanStore.getDependencies(long endTs, long lookback)",
                    "public Call<List<String>> zipkin2.storage.cassandra.CassandraSpanStore.getServiceNames()",
                    "public Call<List<Span>> zipkin2.storage.cassandra.CassandraSpanStore.getTrace(String traceId)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "private static void zipkin2.storage.cassandra.DefaultSessionFactory.initializeUDTs(Session session)"
                ]
            },
            "5ff0a5f7d59e44045e4b7bb60bddd041a45fe7f9": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public StoreSpansCall zipkin2.storage.cassandra.CassandraSpanConsumer.clone()"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<String>> zipkin2.storage.cassandra.CassandraSpanStore.getSpanNames(String serviceName)",
                    "public Call<List<DependencyLink>> zipkin2.storage.cassandra.CassandraSpanStore.getDependencies(long endTs, long lookback)",
                    "public Call<List<String>> zipkin2.storage.cassandra.CassandraSpanStore.getServiceNames()",
                    "public Call<List<Span>> zipkin2.storage.cassandra.CassandraSpanStore.getTrace(String traceId)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "private static void zipkin2.storage.cassandra.DefaultSessionFactory.initializeUDTs(Session session)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "972072a4662d9f6053b25afa4a687f130ab7fe19",
        "previous_commit": "2f9f2da9392bb14476efba48a1c635ea6aa23a98",
        "date": 1507644517,
        "releases": {
            "previous": "972072a4662d9f6053b25afa4a687f130ab7fe19",
            "next": "972072a4662d9f6053b25afa4a687f130ab7fe19"
        },
        "commit_message": "Attempt to use semaphore as might be more reliable to read than queue size\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "972072a4662d9f6053b25afa4a687f130ab7fe19": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public // hosts resolution might imply a network call, and we might make a new okhttp instance\n HttpCall.Factory zipkin2.elasticsearch.ElasticsearchStorage.http()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "public void zipkin2.elasticsearch.internal.client.HttpCall<V>.onResponse(okhttp3.Call call, Response response)",
                    "public HttpCall<V> zipkin2.elasticsearch.internal.client.HttpCall<V>.clone()",
                    "public V zipkin2.elasticsearch.internal.client.HttpCall<V>.execute()",
                    "public void zipkin2.elasticsearch.internal.client.HttpCall<V>.onFailure(okhttp3.Call call, IOException e)",
                    "public void zipkin2.elasticsearch.internal.client.HttpCall<V>.enqueue(Callback<V> delegate)"
                ]
            },
            "2f9f2da9392bb14476efba48a1c635ea6aa23a98": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public // hosts resolution might imply a network call, and we might make a new okhttp instance\n HttpCall.Factory zipkin2.elasticsearch.ElasticsearchStorage.http()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "public void zipkin2.elasticsearch.internal.client.HttpCall<V>.onResponse(okhttp3.Call call, Response response)",
                    "public HttpCall<V> zipkin2.elasticsearch.internal.client.HttpCall<V>.clone()",
                    "public V zipkin2.elasticsearch.internal.client.HttpCall<V>.execute()",
                    "public void zipkin2.elasticsearch.internal.client.HttpCall<V>.onFailure(okhttp3.Call call, IOException e)",
                    "public void zipkin2.elasticsearch.internal.client.HttpCall<V>.enqueue(Callback<V> delegate)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6051f962d13e78f09c5a60d566b13fa5df2a651e",
        "previous_commit": "7016f275a34f7f0e264b462e8aa0ace623199944",
        "date": 1461734900,
        "releases": {
            "previous": "6051f962d13e78f09c5a60d566b13fa5df2a651e",
            "next": "6051f962d13e78f09c5a60d566b13fa5df2a651e"
        },
        "commit_message": "Makes Span.equals less brittle to binary annotation order\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6051f962d13e78f09c5a60d566b13fa5df2a651e": {
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.addBinaryAnnotation(BinaryAnnotation binaryAnnotation)",
                    "public Builder zipkin.Span.binaryAnnotations(Collection<BinaryAnnotation> binaryAnnotations)",
                    "public Builder zipkin.Span.addAnnotation(Annotation annotation)",
                    "public Set<String> zipkin.Span.serviceNames()",
                    "public Builder zipkin.Span.annotations(Collection<Annotation> annotations)"
                ],
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static <T extends Comparable<? super T>> List<T> zipkin.internal.Util.sortedList(@Nullable Collection<T> input)"
                ]
            },
            "7016f275a34f7f0e264b462e8aa0ace623199944": {
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.addBinaryAnnotation(BinaryAnnotation binaryAnnotation)",
                    "public Builder zipkin.Span.binaryAnnotations(Collection<BinaryAnnotation> binaryAnnotations)",
                    "public Builder zipkin.Span.addAnnotation(Annotation annotation)",
                    "public Set<String> zipkin.Span.serviceNames()",
                    "public Builder zipkin.Span.annotations(Collection<Annotation> annotations)"
                ],
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static <T extends Comparable<? super T>> List<T> zipkin.internal.Util.sortedList(@Nullable Collection<T> input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4e16f7944404501d50be0f83f7ac1beb88cd8833",
        "previous_commit": "f98c4790ca6c8b1717964265bec72a1a7dab4ab9",
        "date": 1474632081,
        "releases": {
            "previous": "4e16f7944404501d50be0f83f7ac1beb88cd8833",
            "next": "4e16f7944404501d50be0f83f7ac1beb88cd8833"
        },
        "commit_message": "elasticsearch: add aws request signing capability\n\nWhen connecting to an aws elasticsearch managed cluster, requests for\nany non-open domain must be signed with the requester's IAM\ncredentials. This change looks for AWS-managed elasticsearch in the\nconnection URL, and, if present, adds a request signing interceptor\nto allow access.\n\nAdditionally, it is sometimes convenient to refer to the domain by\nhuman-readable name rather than machine-unique \"endpoint\": an\nadditional set of configuration parameters have been added to support\nthis case.\n\nExample usage:\n```bash\n$ aws es describe-elasticsearch-domain --domain-name mydomain|jq .DomainStatus.Endpoint\n\"search-mydomain-2rlih66ibw43ftlk4342ceeewu.ap-southeast-1.es.amazonaws.com\"\n$ STORAGE_TYPE=elasticsearch ES_HOSTS=https://search-mydomain-2rlih66ibw43ftlk4342ceeewu.ap-southeast-1.es.amazonaws.com java -jar zipkin.jar\n$ STORAGE_TYPE=elasticsearch ES_AWS_DOMAIN=mycluster ES_AWS_REGION=ap-southeast-1 java -jar zipkin.jar\n```\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4e16f7944404501d50be0f83f7ac1beb88cd8833": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "public ListenableFuture<List<Span>> zipkin.storage.elasticsearch.http.HttpClient.findSpans(String[] indices, QueryBuilder query)",
                    "public ListenableFuture<Buckets> zipkin.storage.elasticsearch.http.HttpClient.scanTraces(String[] indices, QueryBuilder query, AbstractAggregationBuilder... aggregations)",
                    "protected String zipkin.storage.elasticsearch.http.HttpClient.buildURI()",
                    "public ListenableFuture<Collection<DependencyLink>> zipkin.storage.elasticsearch.http.HttpClient.findDependencies(String[] indices)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/NativeClient.java": [
                    "public InternalElasticsearchClient zipkin.storage.elasticsearch.NativeClient.create(String allIndices)",
                    "public String zipkin.storage.elasticsearch.NativeClient.toString()"
                ]
            },
            "f98c4790ca6c8b1717964265bec72a1a7dab4ab9": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "public ListenableFuture<List<Span>> zipkin.storage.elasticsearch.http.HttpClient.findSpans(String[] indices, QueryBuilder query)",
                    "public ListenableFuture<Buckets> zipkin.storage.elasticsearch.http.HttpClient.scanTraces(String[] indices, QueryBuilder query, AbstractAggregationBuilder... aggregations)",
                    "protected String zipkin.storage.elasticsearch.http.HttpClient.buildURI()",
                    "public ListenableFuture<Collection<DependencyLink>> zipkin.storage.elasticsearch.http.HttpClient.findDependencies(String[] indices)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/NativeClient.java": [
                    "public InternalElasticsearchClient zipkin.storage.elasticsearch.NativeClient.create(String allIndices)",
                    "public String zipkin.storage.elasticsearch.NativeClient.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ca33e30fa3da96d8562c53ea8b5505051ee22675",
        "previous_commit": "190ae60f66b62e71aa06c046491728809982ddb9",
        "date": 1503452058,
        "releases": {
            "previous": "ca33e30fa3da96d8562c53ea8b5505051ee22675",
            "next": "ca33e30fa3da96d8562c53ea8b5505051ee22675"
        },
        "commit_message": "Deprecates Collector.acceptSpans(List<byte[]> ..\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ca33e30fa3da96d8562c53ea8b5505051ee22675": {
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.collector.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-collector/kafka10/src/main/java/zipkin/collector/kafka10/KafkaCollectorWorker.java": [
                    "public void zipkin.collector.kafka10.KafkaCollectorWorker.run()"
                ],
                "zipkin-collector/scribe/src/main/java/zipkin/collector/scribe/ScribeSpanConsumer.java": [
                    "public ListenableFuture<ResultCode> zipkin.collector.scribe.ScribeSpanConsumer.log(List<LogEntry> messages)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "public void zipkin.collector.Collector.acceptSpans(byte[] serializedSpans, SpanDecoder decoder, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/DetectingSpanDecoder.java": [
                    "public List<Span> zipkin.internal.DetectingSpanDecoder.readSpans(byte[] span)",
                    "public Span zipkin.internal.DetectingSpanDecoder.readSpan(byte[] span)"
                ]
            },
            "190ae60f66b62e71aa06c046491728809982ddb9": {
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.collector.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-collector/kafka10/src/main/java/zipkin/collector/kafka10/KafkaCollectorWorker.java": [
                    "public void zipkin.collector.kafka10.KafkaCollectorWorker.run()"
                ],
                "zipkin-collector/scribe/src/main/java/zipkin/collector/scribe/ScribeSpanConsumer.java": [
                    "public ListenableFuture<ResultCode> zipkin.collector.scribe.ScribeSpanConsumer.log(List<LogEntry> messages)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "public void zipkin.collector.Collector.acceptSpans(byte[] serializedSpans, SpanDecoder decoder, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/DetectingSpanDecoder.java": [
                    "public List<Span> zipkin.internal.DetectingSpanDecoder.readSpans(byte[] span)",
                    "public Span zipkin.internal.DetectingSpanDecoder.readSpan(byte[] span)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bc9e282e44f95f08f071eb2592d8d189cf29755a",
        "previous_commit": "2a592074702f5b03334f765c6e8e59856d315001",
        "date": 1510466177,
        "releases": {
            "previous": "bc9e282e44f95f08f071eb2592d8d189cf29755a",
            "next": "bc9e282e44f95f08f071eb2592d8d189cf29755a"
        },
        "commit_message": "Fixes tests\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bc9e282e44f95f08f071eb2592d8d189cf29755a": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> spans)",
                    "private static long zipkin2.storage.cassandra.CassandraSpanConsumer.guessTimestamp(Span span)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "protected ListenableFuture<List<Span>> zipkin2.storage.cassandra.CassandraSpanStore.newFuture()",
                    "public Call<List<Span>> zipkin2.storage.cassandra.CassandraSpanStore.getTrace(String traceId)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "void zipkin2.storage.cassandra.CassandraStorage.clear()"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "static Set<String> zipkin2.storage.cassandra.CassandraUtil.annotationKeys(Span span)"
                ]
            },
            "2a592074702f5b03334f765c6e8e59856d315001": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> spans)",
                    "private static long zipkin2.storage.cassandra.CassandraSpanConsumer.guessTimestamp(Span span)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "protected ListenableFuture<List<Span>> zipkin2.storage.cassandra.CassandraSpanStore.newFuture()",
                    "public Call<List<Span>> zipkin2.storage.cassandra.CassandraSpanStore.getTrace(String traceId)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "void zipkin2.storage.cassandra.CassandraStorage.clear()"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "static Set<String> zipkin2.storage.cassandra.CassandraUtil.annotationKeys(Span span)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "346ac51601043b6299e9e856f7a070aae8f4b65e",
        "previous_commit": "d57f2be66fbe6788867d3bffd05fd98060941f53",
        "date": 1599198743,
        "releases": {
            "previous": "346ac51601043b6299e9e856f7a070aae8f4b65e",
            "next": "346ac51601043b6299e9e856f7a070aae8f4b65e"
        },
        "commit_message": "Composable index templates for ES 7.8 (#3185)\n\nCo-authored-by: Chanatan Charnkijtawarush <C.Charnkijtawarush@allegiantair.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "346ac51601043b6299e9e856f7a070aae8f4b65e": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder(LazyHttpClient httpClient)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "String zipkin2.elasticsearch.ElasticsearchStorage.buildUrl(IndexTemplates templates, String type)",
                    "IndexTemplates zipkin2.elasticsearch.ElasticsearchStorage.versionSpecificTemplates(float version)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.dependencyTemplate(float version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.spanIndexTemplate(float version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.autocompleteTemplate(float version)"
                ]
            },
            "d57f2be66fbe6788867d3bffd05fd98060941f53": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder(LazyHttpClient httpClient)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "String zipkin2.elasticsearch.ElasticsearchStorage.buildUrl(IndexTemplates templates, String type)",
                    "IndexTemplates zipkin2.elasticsearch.ElasticsearchStorage.versionSpecificTemplates(float version)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.dependencyTemplate(float version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.spanIndexTemplate(float version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.autocompleteTemplate(float version)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bdedc932115c9c9d43773eb5853ae77ea91d539f",
        "previous_commit": "935af06289e33ec115a21e61cb795e0bf6d474e9",
        "date": 1459504669,
        "releases": {
            "previous": "bdedc932115c9c9d43773eb5853ae77ea91d539f",
            "next": "bdedc932115c9c9d43773eb5853ae77ea91d539f"
        },
        "commit_message": "Exposes StorageAdapters and GuavaStorageAdapters, hides incidental types\n\nThis prefers transformation to inheritance, which makes wiring more\ntransparent and reduces the amount of types we need to expose as public.\n\nEx.\n```java\n@Bean AsyncSpanConsumer spanConsumer(JDBCSpanStore jdbc, Sampler sampler) {\n  AsyncSpanConsumer consumer = blockingToAsync(jdbc::accept, executor());\n  return makeSampled(sampler, consumer);\n}\n```\n\nThis introduces some temporary tech debt which should be cleared shortly\nwhen we implement storage components.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bdedc932115c9c9d43773eb5853ae77ea91d539f": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "AsyncSpanConsumer zipkin.server.ZipkinServerConfiguration.spanConsumer(Sampler sampler)",
                    "CassandraConfig zipkin.server.ZipkinServerConfiguration.config()",
                    "SpanStore zipkin.server.ZipkinServerConfiguration.spanStore()",
                    "AsyncSpanConsumer zipkin.server.ZipkinServerConfiguration.spanConsumer(JDBCSpanStore jdbc, Sampler sampler)"
                ],
                "zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "public void zipkin.cassandra.CassandraSpanStore.close()"
                ],
                "zipkin/src/main/java/zipkin/Endpoint.java": [
                    "public static Endpoint zipkin.Endpoint.create(String serviceName, int ipv4, int port)"
                ]
            },
            "935af06289e33ec115a21e61cb795e0bf6d474e9": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "CassandraSpanStore zipkin.server.ZipkinServerConfiguration.cassandraSpanStore()",
                    "AsyncSpanConsumer zipkin.server.ZipkinServerConfiguration.spanConsumer(Sampler sampler)",
                    "SpanStore zipkin.server.ZipkinServerConfiguration.spanStore()",
                    "AsyncSpanConsumer zipkin.server.ZipkinServerConfiguration.spanConsumer(JDBCSpanStore jdbc, Sampler sampler)"
                ],
                "zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "public void zipkin.cassandra.CassandraSpanStore.close()"
                ],
                "zipkin/src/main/java/zipkin/Endpoint.java": [
                    "public static Endpoint zipkin.Endpoint.create(String serviceName, int ipv4, int port)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "39f37f930df18ecd8c680b8e6303f46886f9644d",
        "previous_commit": "017828e94ad2640fd35a94d93fc0c8b55b548b1a",
        "date": 1462437192,
        "releases": {
            "previous": "39f37f930df18ecd8c680b8e6303f46886f9644d",
            "next": "39f37f930df18ecd8c680b8e6303f46886f9644d"
        },
        "commit_message": "Fixes self-tracing auto-configuration by quitting ConditionalOnClass\n\nConditionalOnClass lookups have proven unreliable and extremely\ndifficult to unwind. For example, the behavior is inconsistent between\nthe JRE on alpine linux and on a macbook. Rather than continue losing\ntime on matters like these, this moves to a more explicit condition.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "39f37f930df18ecd8c680b8e6303f46886f9644d": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java": [
                    "ResponseEntity<?> zipkin.server.ZipkinHttpCollector.validateAndStoreSpans(String encoding, Codec codec, byte[] body)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "KafkaCollector zipkin.server.ZipkinServerConfiguration.kafka(ZipkinKafkaProperties kafka, CollectorSampler sampler, CollectorMetrics metrics, StorageComponent storage)",
                    "ScribeCollector zipkin.server.ZipkinServerConfiguration.scribe(ZipkinScribeProperties scribe, CollectorSampler sampler, CollectorMetrics metrics, StorageComponent storage)",
                    "StorageComponent zipkin.server.ZipkinServerConfiguration.storage(Executor executor)",
                    "StorageComponent zipkin.server.ZipkinServerConfiguration.storage(ZipkinElasticsearchProperties elasticsearch)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/LazySession.java": [
                    "protected Session zipkin.cassandra.LazySession.compute()"
                ]
            },
            "017828e94ad2640fd35a94d93fc0c8b55b548b1a": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java": [
                    "ResponseEntity<?> zipkin.server.ZipkinHttpCollector.validateAndStoreSpans(String encoding, Codec codec, byte[] body)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "KafkaCollector zipkin.server.ZipkinServerConfiguration.kafka(ZipkinKafkaProperties kafka, CollectorSampler sampler, CollectorMetrics metrics, StorageComponent storage)",
                    "ScribeCollector zipkin.server.ZipkinServerConfiguration.scribe(ZipkinScribeProperties scribe, CollectorSampler sampler, CollectorMetrics metrics, StorageComponent storage)",
                    "StorageComponent zipkin.server.ZipkinServerConfiguration.storage(Executor executor)",
                    "StorageComponent zipkin.server.ZipkinServerConfiguration.storage(ZipkinElasticsearchProperties elasticsearch)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/LazySession.java": [
                    "protected Session zipkin.cassandra.LazySession.compute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1c39f51ede84a2895449a396a15eb460152e106f",
        "previous_commit": "43a039611fedbb3ee780f257a276512da62590c7",
        "date": 1479253312,
        "releases": {
            "previous": "1c39f51ede84a2895449a396a15eb460152e106f",
            "next": "1c39f51ede84a2895449a396a15eb460152e106f"
        },
        "commit_message": "Adds Elasticsearch 5.x support via storage type: elasticsearch-http (#1403)\n\nThis allows use of Elasticsearch 5.x and its notable ingest pipeline\r\nfeature when using `zipkin-storage-elasticsearch-http`.\r\n\r\nIt is important to note that `zipkin-storage-elasticsearch` remains\r\npinned to ES 2.x libraries as they are compile incompatible with 5.x.\r\nIn other words, you must use http if you want to use ES 5 (for now).\r\n\r\nVersion detection is implemented in order to choose the coirrect index\r\ntemplate format for the major version number. The implementation of\r\nsuch is string manip, as it was less work than making a new type.\r\n\r\nThis adds a new parameter `ES_PIPELINE` which allows you to manipulate\r\nthe json sent by Zipkin collector before it is indexed. This could be\r\nused for many things including cleaning service names or adding ingest\r\ntimestamps.\r\n\r\nIntegration tests run version 2.x on CircleCI and 5.x on Travis",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1c39f51ede84a2895449a396a15eb460152e106f": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/CallbackListenableFuture.java": [
                    "public void zipkin.storage.elasticsearch.http.CallbackListenableFuture<V>.onResponse(Call call, Response response)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java": [
                    "public ListenableFuture<Void> zipkin.storage.elasticsearch.http.HttpBulkIndexer<T>.execute()"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkSpanIndexer.java": [
                    "public HttpBulkSpanIndexer zipkin.storage.elasticsearch.http.HttpBulkSpanIndexer.add(String index, Span span, Long timestampMillis)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/LazyClient.java": [
                    "protected InternalElasticsearchClient zipkin.storage.elasticsearch.LazyClient.compute()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/NativeClient.java": [
                    "public InternalElasticsearchClient zipkin.storage.elasticsearch.NativeClient.create(String allIndices)",
                    "public Factory zipkin.storage.elasticsearch.NativeClient.buildFactory()"
                ]
            },
            "43a039611fedbb3ee780f257a276512da62590c7": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/CallbackListenableFuture.java": [
                    "public void zipkin.storage.elasticsearch.http.CallbackListenableFuture<V>.onResponse(Call call, Response response)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java": [
                    "public ListenableFuture<Void> zipkin.storage.elasticsearch.http.HttpBulkIndexer<T>.execute()"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkSpanIndexer.java": [
                    "public void zipkin.storage.elasticsearch.http.HttpBulkSpanIndexer.add(String index, Span span, Long timestampMillis)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/LazyClient.java": [
                    "protected InternalElasticsearchClient zipkin.storage.elasticsearch.LazyClient.compute()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/NativeClient.java": [
                    "public InternalElasticsearchClient zipkin.storage.elasticsearch.NativeClient.create(String allIndices)",
                    "public Factory zipkin.storage.elasticsearch.NativeClient.buildFactory()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e4786e46e6ac807434aa76a7b10b6517e3562494",
        "previous_commit": "1494c8af1320e40eb413ea8a311d41a3456d1b7f",
        "date": 1565222070,
        "releases": {
            "previous": "e4786e46e6ac807434aa76a7b10b6517e3562494",
            "next": "e4786e46e6ac807434aa76a7b10b6517e3562494"
        },
        "commit_message": "Simplifies ThrottledCall to reduce GC overhead (#2740)\n\n@Logic-32 in one review noticed we could re-use a countdown latch when\r\ndoing execute. IIRC, he mentioned `Call` is one-shot anyway, which is\r\ntrue. This was good advice. Flattening `ThrottledCall` made measurably\r\nless GC in micro benchmarks.\r\n\r\nBefore\r\n```\r\nBenchmark                                                           Mode     Cnt     Score     Error   Units\r\nThrottledCallBenchmarks.execute                                   sample  774208    17.379 \u00b1   0.077   us/op\r\nThrottledCallBenchmarks.execute:execute\u00b7p0.00                     sample             1.696             us/op\r\nThrottledCallBenchmarks.execute:execute\u00b7p0.50                     sample            15.376             us/op\r\nThrottledCallBenchmarks.execute:execute\u00b7p0.90                     sample            23.712             us/op\r\nThrottledCallBenchmarks.execute:execute\u00b7p0.95                     sample            29.664             us/op\r\nThrottledCallBenchmarks.execute:execute\u00b7p0.99                     sample            54.208             us/op\r\nThrottledCallBenchmarks.execute:execute\u00b7p0.999                    sample            95.616             us/op\r\nThrottledCallBenchmarks.execute:execute\u00b7p0.9999                   sample           185.829             us/op\r\nThrottledCallBenchmarks.execute:execute\u00b7p1.00                     sample          5464.064             us/op\r\nThrottledCallBenchmarks.execute:\u00b7gc.alloc.rate                    sample      15    40.681 \u00b1   5.778  MB/sec\r\nThrottledCallBenchmarks.execute:\u00b7gc.alloc.rate.norm               sample      15   552.430 \u00b1  77.257    B/op\r\nThrottledCallBenchmarks.execute:\u00b7gc.churn.G1_Eden_Space           sample      15    44.803 \u00b1  53.001  MB/sec\r\nThrottledCallBenchmarks.execute:\u00b7gc.churn.G1_Eden_Space.norm      sample      15   612.823 \u00b1 727.247    B/op\r\nThrottledCallBenchmarks.execute:\u00b7gc.churn.G1_Old_Gen              sample      15     0.052 \u00b1   0.110  MB/sec\r\nThrottledCallBenchmarks.execute:\u00b7gc.churn.G1_Old_Gen.norm         sample      15     0.704 \u00b1   1.488    B/op\r\nThrottledCallBenchmarks.execute:\u00b7gc.churn.G1_Survivor_Space       sample      15     0.044 \u00b1   0.184  MB/sec\r\nThrottledCallBenchmarks.execute:\u00b7gc.churn.G1_Survivor_Space.norm  sample      15     0.588 \u00b1   2.434    B/op\r\nThrottledCallBenchmarks.execute:\u00b7gc.count                         sample      15     7.000            counts\r\nThrottledCallBenchmarks.execute:\u00b7gc.time                          sample      15    29.000                ms\r\n```\r\n\r\nAfter\r\n```\r\nBenchmark                                                     Mode       Cnti       Score   Error   Units\r\nThrottledCallBenchmarks.execute                               sample  606001     17.678 \u00b1   0.429   us/op\r\nThrottledCallBenchmarks.execute:execute\u00b7p0.00                 sample              9.152             us/op\r\nThrottledCallBenchmarks.execute:execute\u00b7p0.50                 sample             14.368             us/op\r\nThrottledCallBenchmarks.execute:execute\u00b7p0.90                 sample             23.360             us/op\r\nThrottledCallBenchmarks.execute:execute\u00b7p0.95                 sample             27.904             us/op\r\nThrottledCallBenchmarks.execute:execute\u00b7p0.99                 sample             42.368             us/op\r\nThrottledCallBenchmarks.execute:execute\u00b7p0.999                sample             80.768             us/op\r\nThrottledCallBenchmarks.execute:execute\u00b7p0.9999               sample           3725.718             us/op\r\nThrottledCallBenchmarks.execute:execute\u00b7p1.00                 sample          30277.632             us/op\r\nThrottledCallBenchmarks.execute:\u00b7gc.alloc.rate                sample      15     30.837 \u00b1   6.145  MB/sec\r\nThrottledCallBenchmarks.execute:\u00b7gc.alloc.rate.norm           sample      15    401.481 \u00b1  60.868    B/op\r\nThrottledCallBenchmarks.execute:\u00b7gc.churn.G1_Eden_Space       sample      15     32.435 \u00b1  50.762  MB/sec\r\nThrottledCallBenchmarks.execute:\u00b7gc.churn.G1_Eden_Space.norm  sample      15    442.977 \u00b1 708.124    B/op\r\nThrottledCallBenchmarks.execute:\u00b7gc.churn.G1_Old_Gen          sample      15      0.046 \u00b1   0.130  MB/sec\r\nThrottledCallBenchmarks.execute:\u00b7gc.churn.G1_Old_Gen.norm     sample      15      0.567 \u00b1   1.615    B/op\r\nThrottledCallBenchmarks.execute:\u00b7gc.count                     sample      15      5.000            counts\r\nThrottledCallBenchmarks.execute:\u00b7gc.time                      sample      15     18.000                ms\r\n```",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e4786e46e6ac807434aa76a7b10b6517e3562494": {
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledCall.java": [
                    "protected void zipkin2.server.internal.throttle.ThrottledCall.doEnqueue(Callback<Void> callback)",
                    "public void zipkin2.server.internal.throttle.ThrottledCall.run()",
                    "public String zipkin2.server.internal.throttle.ThrottledCall.toString()",
                    "protected Void zipkin2.server.internal.throttle.ThrottledCall.doExecute()",
                    "public void zipkin2.server.internal.throttle.ThrottledCall.onError(Throwable t)",
                    "public void zipkin2.server.internal.throttle.ThrottledCall.onSuccess(Void value)"
                ]
            },
            "1494c8af1320e40eb413ea8a311d41a3456d1b7f": {
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledCall.java": [
                    "protected void zipkin2.server.internal.throttle.ThrottledCall.doEnqueue(Callback<Void> callback)",
                    "public void zipkin2.server.internal.throttle.ThrottledCall.run()",
                    "public String zipkin2.server.internal.throttle.ThrottledCall.toString()",
                    "protected Void zipkin2.server.internal.throttle.ThrottledCall.doExecute()",
                    "public void zipkin2.server.internal.throttle.ThrottledCall.onError(Throwable t)",
                    "public void zipkin2.server.internal.throttle.ThrottledCall.onSuccess(Void value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a762a03f59e61d396cc335cd7202076390a19712",
        "previous_commit": "40fa08df9fec34b8a3dd8c0a7f7d7ce3e245f69b",
        "date": 1568350711,
        "releases": {
            "previous": "a762a03f59e61d396cc335cd7202076390a19712",
            "next": "a762a03f59e61d396cc335cd7202076390a19712"
        },
        "commit_message": "Upgrades versions to latest and tweaks ES InitialEndpointSupplier (#2799)\n\nNotable, the latest Armeria update allows us to focus Elasticsearch\r\n`InitialEndpointSupplier` code on parsing as opposed to composition.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a762a03f59e61d396cc335cd7202076390a19712": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/InitialEndpointSupplier.java": [
                    "public EndpointGroup zipkin2.server.internal.elasticsearch.InitialEndpointSupplier.get()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "Endpoint zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.getEndpoint()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/SearchCallFactory.java": [
                    "String zipkin2.elasticsearch.internal.client.SearchCallFactory.lenientSearch(List<String> indices, @Nullable String type)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getIndexes()",
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getKeys()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()"
                ]
            },
            "40fa08df9fec34b8a3dd8c0a7f7d7ce3e245f69b": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/InitialEndpointSupplier.java": [
                    "public EndpointGroup zipkin2.server.internal.elasticsearch.InitialEndpointSupplier.get()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "Endpoint zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.getEndpoint()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/SearchCallFactory.java": [
                    "String zipkin2.elasticsearch.internal.client.SearchCallFactory.lenientSearch(List<String> indices, @Nullable String type)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getIndexes()",
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getKeys()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ef42a7d394b603f15f52b40a6c94835367be960a",
        "previous_commit": "bf9f2529f14401d04b66dd59de8a81d05f548cac",
        "date": 1528388973,
        "releases": {
            "previous": "ef42a7d394b603f15f52b40a6c94835367be960a",
            "next": "ef42a7d394b603f15f52b40a6c94835367be960a"
        },
        "commit_message": "Fixes typos in mysql\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ef42a7d394b603f15f52b40a6c94835367be960a": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getIndexes()",
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getKeys()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinDependencies.java": [
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinDependencies.getKeys()",
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinDependencies.getIndexes()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()",
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getKeys()"
                ]
            },
            "bf9f2529f14401d04b66dd59de8a81d05f548cac": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getIndexes()",
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getKeys()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinDependencies.java": [
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinDependencies.getKeys()",
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinDependencies.getIndexes()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()",
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getKeys()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "61580cb82f9bb43338935be747818b34e0da56b4",
        "previous_commit": "b9a62d8a7b7fa07d48588e997fe8e371ff60bd0a",
        "date": 1474696294,
        "releases": {
            "previous": "61580cb82f9bb43338935be747818b34e0da56b4",
            "next": "61580cb82f9bb43338935be747818b34e0da56b4"
        },
        "commit_message": "Fixes thread safety issues and improves health checks on elasticsearch (#1311)\n\nThis fixes a thread-safety concern raised by @sethp-jive on AWS signing.\r\n\r\nIt also improves health check by not wrapping exceptions. This will\r\nallow users to troubleshoot the system easier.\r\n\r\nFinally, this throws on misconfigured credentials vs swallowing the\r\nexception. This will help people use health checks also, as it makes\r\nthis configuration error visible without enabling debug logging.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "61580cb82f9bb43338935be747818b34e0da56b4": {
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/ZipkinElasticsearchAwsStorageProperties.java": [
                    "ElasticsearchStorage.Builder zipkin.autoconfigure.storage.elasticsearch.aws.ZipkinElasticsearchAwsStorageProperties.toBuilder()"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "public void zipkin.storage.elasticsearch.http.HttpClient.clear(String index)",
                    "protected void zipkin.storage.elasticsearch.http.HttpClient.ensureClusterReady(String catchAll)",
                    "public void zipkin.storage.elasticsearch.http.HttpClient.ensureTemplate(String name, String indexTemplate)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchStorage.java": [
                    "public CheckResult zipkin.storage.elasticsearch.ElasticsearchStorage.check()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/LazyClient.java": [
                    "protected InternalElasticsearchClient zipkin.storage.elasticsearch.LazyClient.compute()"
                ]
            },
            "b9a62d8a7b7fa07d48588e997fe8e371ff60bd0a": {
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/ZipkinElasticsearchAwsStorageProperties.java": [
                    "ElasticsearchStorage.Builder zipkin.autoconfigure.storage.elasticsearch.aws.ZipkinElasticsearchAwsStorageProperties.toBuilder()"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "public void zipkin.storage.elasticsearch.http.HttpClient.clear(String index)",
                    "protected void zipkin.storage.elasticsearch.http.HttpClient.ensureClusterReady(String catchAll)",
                    "public void zipkin.storage.elasticsearch.http.HttpClient.ensureTemplate(String name, String indexTemplate)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchStorage.java": [
                    "public CheckResult zipkin.storage.elasticsearch.ElasticsearchStorage.check()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/LazyClient.java": [
                    "protected InternalElasticsearchClient zipkin.storage.elasticsearch.LazyClient.compute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ef521594f47a10a7aa5052524318fce9005bbd31",
        "previous_commit": "dc9de8ba44ef6dd65efa5e298e175bae06e12cbf",
        "date": 1503300528,
        "releases": {
            "previous": "ef521594f47a10a7aa5052524318fce9005bbd31",
            "next": "ef521594f47a10a7aa5052524318fce9005bbd31"
        },
        "commit_message": "Switches CollectorSampler to use (trace ID, debug) vs Span v1 object (#1697)\n\nCurrently, transports can decode zipkin2 format, but it has to be\r\nconverted to v1 objects prior to storage. Part of the reason is\r\nCollectorSampler (used for load shedding to protect storage), accepts\r\nan object type as opposed to the parameters trace ID and debug. This\r\ndeprecates the former in favor of the latter, as trace ID and debug\r\nexist in both formats.\r\nWe are switching code to permit use of zipkin2 format in transports.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ef521594f47a10a7aa5052524318fce9005bbd31": {
                "zipkin-zookeeper/src/main/java/zipkin/collector/zookeeper/ZooKeeperCollectorSampler.java": [
                    "public boolean zipkin.collector.zookeeper.ZooKeeperCollectorSampler.isSampled(Span span)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "RuntimeException zipkin.collector.Collector.doError(String message, Throwable e)",
                    "List<Span> zipkin.collector.Collector.sample(List<Span> input)",
                    "StringBuilder zipkin.collector.Collector.appendSpanIds(List<Span> spans, StringBuilder message)"
                ],
                "zipkin/src/main/java/zipkin/collector/CollectorSampler.java": [
                    "public boolean zipkin.collector.CollectorSampler.isSampled(Span span)"
                ]
            },
            "dc9de8ba44ef6dd65efa5e298e175bae06e12cbf": {
                "zipkin-zookeeper/src/main/java/zipkin/collector/zookeeper/ZooKeeperCollectorSampler.java": [
                    "public boolean zipkin.collector.zookeeper.ZooKeeperCollectorSampler.isSampled(Span span)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "RuntimeException zipkin.collector.Collector.doError(String message, Throwable e)",
                    "List<Span> zipkin.collector.Collector.sample(List<Span> input)",
                    "static StringBuilder zipkin.collector.Collector.appendSpanIds(List<Span> spans, StringBuilder message)"
                ],
                "zipkin/src/main/java/zipkin/collector/CollectorSampler.java": [
                    "public boolean zipkin.collector.CollectorSampler.isSampled(Span span)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e764137a9fa2a229d99f1ce64b772066d3cb26c3",
        "previous_commit": "e6fa2f179cb34dd74beab5230b0fc5ff85c81a8f",
        "date": 1477996772,
        "releases": {
            "previous": "e764137a9fa2a229d99f1ce64b772066d3cb26c3",
            "next": "e764137a9fa2a229d99f1ce64b772066d3cb26c3"
        },
        "commit_message": "Compresses indexes to search based on date expression (#1377)\n\n* Compresses indexes to search based on date expression\r\n\r\nThis adds `IndexNameFormatter.indexNamePatternsForRange` which\r\ncompresses api requests by using wildcard expressions for months or\r\nyears.\r\n\r\nFor example, if begin is 2016-11-30 and end is 2017-01-02, the result\r\nwill be 2016-11-30, 2016-12-*, 2017-01-01 and 2017-01-02 as opposed to\r\na set of >30 individual index names.\r\n\r\nAs a side effect, we no longer need special http configuration as we\r\nwon't create request lines larger than 4096 on account of index names.\r\n\r\n* Revert \"Hard limits ES queries to not lookback earlier than ES support was added (#1371)\"\r\n\r\nThis reverts commit 4e078aab57a9300776936b5e32537a6c60313d0f.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e764137a9fa2a229d99f1ce64b772066d3cb26c3": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "protected ListenableFuture<List<Span>> zipkin.storage.elasticsearch.http.HttpClient.findSpans(String[] indices, QueryBuilder query)",
                    "protected ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.http.HttpClient.findDependencies(String[] indices)",
                    "protected ListenableFuture<List<String>> zipkin.storage.elasticsearch.http.HttpClient.collectBucketKeys(String[] indices, QueryBuilder query, AbstractAggregationBuilder... aggregations)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getDependencies(long endMillis, @Nullable Long lookback)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)"
                ]
            },
            "e6fa2f179cb34dd74beab5230b0fc5ff85c81a8f": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "protected ListenableFuture<List<Span>> zipkin.storage.elasticsearch.http.HttpClient.findSpans(String[] indices, QueryBuilder query)",
                    "protected ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.http.HttpClient.findDependencies(String[] indices)",
                    "protected ListenableFuture<List<String>> zipkin.storage.elasticsearch.http.HttpClient.collectBucketKeys(String[] indices, QueryBuilder query, AbstractAggregationBuilder... aggregations)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getDependencies(long endMillis, @Nullable Long lookback)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7e6c07650fbb7ca05764d48a820e148c87f2dd85",
        "previous_commit": "dde769db4bb66f33ada3becf1d58cc85419b7fa1",
        "date": 1557472701,
        "releases": {
            "previous": "7e6c07650fbb7ca05764d48a820e148c87f2dd85",
            "next": "7e6c07650fbb7ca05764d48a820e148c87f2dd85"
        },
        "commit_message": "Implements deduplication in Elasticsearch (#2573)\n\nThis sets span index ID to `${traceID}-${MD5(json)}` to allow for\r\nserver-side deduplication and uses okio based libraries to be more\r\nefficient writing to Elasticsearch.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7e6c07650fbb7ca05764d48a820e148c87f2dd85": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.indexSpans(BulkSpanIndexer indexer, List<Span> spans)",
                    "Call<Void> zipkin2.elasticsearch.ElasticsearchSpanConsumer.newCall()",
                    "public int zipkin2.elasticsearch.ElasticsearchSpanConsumer.hashCode()",
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.addAutocompleteValues(long indexTimestamp, Span span)",
                    "public boolean zipkin2.elasticsearch.ElasticsearchSpanConsumer.equals(Object o)"
                ]
            },
            "dde769db4bb66f33ada3becf1d58cc85419b7fa1": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.indexSpans(BulkSpanIndexer indexer, List<Span> spans)",
                    "Call<Void> zipkin2.elasticsearch.ElasticsearchSpanConsumer.newCall()",
                    "public int zipkin2.elasticsearch.ElasticsearchSpanConsumer.hashCode()",
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.addAutocompleteValues(long indexTimestamp, Span span)",
                    "public boolean zipkin2.elasticsearch.ElasticsearchSpanConsumer.equals(Object o)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6900ddbac922c9cf24dd62b96e83dfbceac1a509",
        "previous_commit": "79098da8948cd6d4d38fb4d4011efeb49c773c14",
        "date": 1571528876,
        "releases": {
            "previous": "6900ddbac922c9cf24dd62b96e83dfbceac1a509",
            "next": "6900ddbac922c9cf24dd62b96e83dfbceac1a509"
        },
        "commit_message": "Remove invocation of Bean methods. (#2867)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6900ddbac922c9cf24dd62b96e83dfbceac1a509": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/ZipkinSelfTracingConfiguration.java": [
                    "Tracing tracing(Reporter<Span> reporter, CurrentTraceContext currentTraceContext)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/health/ZipkinHealthController.java": [
                    "static String zipkin2.server.internal.health.ZipkinHealthController.writeJsonError(String error)",
                    "static String zipkin2.server.internal.health.ZipkinHealthController.writeJson(String overallStatus, List<ComponentHealth> healths)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinMetricsController.java": [
                    "public HttpResponse zipkin2.server.internal.prometheus.ZipkinMetricsController.fetchMetricsFromMicrometer()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "static String writeConfig(ZipkinUiProperties ui)"
                ]
            },
            "79098da8948cd6d4d38fb4d4011efeb49c773c14": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/ZipkinSelfTracingConfiguration.java": [
                    "Tracing tracing(Reporter<Span> reporter)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/health/ZipkinHealthController.java": [
                    "static String zipkin2.server.internal.health.ZipkinHealthController.writeJsonError(String error)",
                    "static String zipkin2.server.internal.health.ZipkinHealthController.writeJson(String overallStatus, List<ComponentHealth> healths)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinMetricsController.java": [
                    "public HttpResponse zipkin2.server.internal.prometheus.ZipkinMetricsController.fetchMetricsFromMicrometer()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "static String writeConfig(ZipkinUiProperties ui)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a4c6c84e517907a0938c9830c8c955e63bf4bf90",
        "previous_commit": "59030cf508f84025c5ce58f8f27fd9bb384c1b5d",
        "date": 1493862371,
        "releases": {
            "previous": "a4c6c84e517907a0938c9830c8c955e63bf4bf90",
            "next": "a4c6c84e517907a0938c9830c8c955e63bf4bf90"
        },
        "commit_message": "Enables search by binary annotation aka tag key (#1582)\n\nI believe we once were able to search by presence of a tag key. Ex\r\n\"http.method\" would return any traces that included any http request.\r\nSomewhere along the way this stopped working. This resurrects the\r\nfeature along with tests. Here's the impact:\r\n\r\n* Cassandra will index a bit more: once per unique service/tag key\r\n* Elasticsearch now does two nested queries when looking for a key\r\n* MySQL now considers all annotation rows when looking for a key\r\n\r\nI think the value is greater than the impact as this is intuitive and\r\nanswers a functionality many expect to \"just work\".",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a4c6c84e517907a0938c9830c8c955e63bf4bf90": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java": [
                    "static Set<String> zipkin.storage.cassandra.CassandraUtil.annotationKeys(Span span)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraUtil.java": [
                    "static Set<String> zipkin.storage.cassandra3.CassandraUtil.annotationKeys(Span span)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "SelectOffsetStep<? extends Record> zipkin.storage.mysql.MySQLSpanStore.toTraceIdQuery(DSLContext context, QueryRequest request)"
                ],
                "zipkin/src/main/java/zipkin/storage/QueryRequest.java": [
                    "public boolean zipkin.storage.QueryRequest.test(List<Span> spans)"
                ]
            },
            "59030cf508f84025c5ce58f8f27fd9bb384c1b5d": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java": [
                    "static Set<String> zipkin.storage.cassandra.CassandraUtil.annotationKeys(Span span)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraUtil.java": [
                    "static Set<String> zipkin.storage.cassandra3.CassandraUtil.annotationKeys(Span span)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getTraces(QueryRequest request, Callback<List<List<Span>>> callback)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "SelectOffsetStep<? extends Record> zipkin.storage.mysql.MySQLSpanStore.toTraceIdQuery(DSLContext context, QueryRequest request)"
                ],
                "zipkin/src/main/java/zipkin/storage/QueryRequest.java": [
                    "public boolean zipkin.storage.QueryRequest.test(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f5a93eae1494e62f2ad787f679fcce74afd7ab2c",
        "previous_commit": "fe3a3c4319a8ef9347d48564bd92c8175926b553",
        "date": 1456377651,
        "releases": {
            "previous": "f5a93eae1494e62f2ad787f679fcce74afd7ab2c",
            "next": "f5a93eae1494e62f2ad787f679fcce74afd7ab2c"
        },
        "commit_message": "Removes internal use of libthrift\n\nThis implements TBinaryProtocol directly in the ThriftCodec. By doing\nthe code, dependencies, and exceptions are simpler (as we are decoding\nvia a buffer not a network). This uses Okio Buffer, which also\nsimplified some code.\n\nThe payment was having to implement a couple utilities from libthrift,\nnamely the skip logic. Overall, the code is smaller and the binary\nshrunk from 275k to 225k.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f5a93eae1494e62f2ad787f679fcce74afd7ab2c": {
                "interop/src/main/java/zipkin/interop/ScalaSpanStoreAdapter.java": [
                    "private static java.util.List<zipkin.Span> zipkin.interop.ScalaSpanStoreAdapter.invert(Seq<Span> input)",
                    "private static java.util.List<Span> zipkin.interop.ScalaSpanStoreAdapter.convert(java.util.List<zipkin.Span> input)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "static <T> byte[] zipkin.internal.ThriftCodec.write(ThriftWriter<T> writer, T value)",
                    "static <T> T zipkin.internal.ThriftCodec.read(ThriftReader<T> reader, byte[] bytes)",
                    "static IllegalArgumentException zipkin.internal.ThriftCodec.exceptionReading(String type, byte[] bytes, Exception e)"
                ]
            },
            "fe3a3c4319a8ef9347d48564bd92c8175926b553": {
                "interop/src/main/java/zipkin/interop/ScalaSpanStoreAdapter.java": [
                    "private static java.util.List<zipkin.Span> zipkin.interop.ScalaSpanStoreAdapter.invert(Seq<Span> input)",
                    "private static java.util.List<Span> zipkin.interop.ScalaSpanStoreAdapter.convert(java.util.List<zipkin.Span> input)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "private static <T> byte[] zipkin.internal.ThriftCodec.write(ThriftWriter<T> writer, T value)",
                    "private static <T> T zipkin.internal.ThriftCodec.read(ThriftReader<T> reader, byte[] bytes)",
                    "static IllegalArgumentException zipkin.internal.ThriftCodec.exceptionReading(String type, byte[] bytes, Exception e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "05da29c35871b740911357592ecddef31df8daf0",
        "previous_commit": "8e14ac167035a8ed03a0afd7691c69dc67b483de",
        "date": 1528348527,
        "releases": {
            "previous": "05da29c35871b740911357592ecddef31df8daf0",
            "next": "05da29c35871b740911357592ecddef31df8daf0"
        },
        "commit_message": "Ensures we only decode addresses from v1 boolean annotations\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "05da29c35871b740911357592ecddef31df8daf0": {
                "zipkin2/src/main/java/zipkin2/internal/ThriftCodec.java": [
                    "static void zipkin2.internal.ThriftCodec.skip(ByteBuffer bytes, int count)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V1JsonSpanReader.java": [
                    "void zipkin2.internal.V1JsonSpanReader.readBinaryAnnotation(JsonReader reader)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V1ThriftSpanReader.java": [
                    "static void zipkin2.internal.V1ThriftSpanReader.read(ByteBuffer bytes, V1Span.Builder builder)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V1ThriftSpanWriter.java": [
                    "public int zipkin2.internal.V1ThriftSpanWriter.sizeInBytes(Span value)",
                    "public void zipkin2.internal.V1ThriftSpanWriter.write(Span value, Buffer buffer)"
                ]
            },
            "8e14ac167035a8ed03a0afd7691c69dc67b483de": {
                "zipkin2/src/main/java/zipkin2/internal/ThriftCodec.java": [
                    "static void zipkin2.internal.ThriftCodec.skip(ByteBuffer bytes, int count)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V1JsonSpanReader.java": [
                    "void zipkin2.internal.V1JsonSpanReader.readBinaryAnnotation(JsonReader reader)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V1ThriftSpanReader.java": [
                    "static void zipkin2.internal.V1ThriftSpanReader.read(ByteBuffer bytes, V1Span.Builder builder)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V1ThriftSpanWriter.java": [
                    "public int zipkin2.internal.V1ThriftSpanWriter.sizeInBytes(Span value)",
                    "public void zipkin2.internal.V1ThriftSpanWriter.write(Span value, Buffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bc37ee7823bfadde7e331b7a6ff1e76bacd8362f",
        "previous_commit": "42cf9c867ac457a3173421692ca74939dc42ef13",
        "date": 1596253446,
        "releases": {
            "previous": "bc37ee7823bfadde7e331b7a6ff1e76bacd8362f",
            "next": "bc37ee7823bfadde7e331b7a6ff1e76bacd8362f"
        },
        "commit_message": "Cleans up Cassandra Session logic in preparation of Driver v4 (#3154)\n\nThe more notable change in Datastax Driver v4 is consolidation of\r\nCluster and Session types. This centralizes logic to create a session\r\nregardless of test or mainline. It also ensures the cluster object is\r\nclosed during main and test code when storage is.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bc37ee7823bfadde7e331b7a6ff1e76bacd8362f": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/LazySession.java": [
                    "void zipkin2.storage.cassandra.v1.LazySession.close()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public synchronized void zipkin2.storage.cassandra.CassandraStorage.close()",
                    "Session zipkin2.storage.cassandra.CassandraStorage.session()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "static Cluster zipkin2.storage.cassandra.DefaultSessionFactory.buildCluster(CassandraStorage cassandra)",
                    "public Session zipkin2.storage.cassandra.DefaultSessionFactory.create(CassandraStorage cassandra)"
                ]
            },
            "42cf9c867ac457a3173421692ca74939dc42ef13": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/LazySession.java": [
                    "void zipkin2.storage.cassandra.v1.LazySession.close()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public synchronized void zipkin2.storage.cassandra.CassandraStorage.close()",
                    "Session zipkin2.storage.cassandra.CassandraStorage.session()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "static Cluster zipkin2.storage.cassandra.DefaultSessionFactory.buildCluster(CassandraStorage cassandra)",
                    "public Session zipkin2.storage.cassandra.DefaultSessionFactory.create(CassandraStorage cassandra)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "206abbc26c333f974e09a08063995f4a23af0a39",
        "previous_commit": "de9c70434b1281e03fb8c4ff3a96a24d0ac70775",
        "date": 1582700658,
        "releases": {
            "previous": "206abbc26c333f974e09a08063995f4a23af0a39",
            "next": "206abbc26c333f974e09a08063995f4a23af0a39"
        },
        "commit_message": "Bumps all versions to latest (#2986)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "206abbc26c333f974e09a08063995f4a23af0a39": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/DefaultCatalog.java": [
                    "public final List<Schema> zipkin2.storage.mysql.v1.internal.generated.DefaultCatalog.getSchemas()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/Zipkin.java": [
                    "public final List<Table<?>> zipkin2.storage.mysql.v1.internal.generated.Zipkin.getTables()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getIndexes()",
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getKeys()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()"
                ]
            },
            "de9c70434b1281e03fb8c4ff3a96a24d0ac70775": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/DefaultCatalog.java": [
                    "public final List<Schema> zipkin2.storage.mysql.v1.internal.generated.DefaultCatalog.getSchemas()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/Zipkin.java": [
                    "public final List<Table<?>> zipkin2.storage.mysql.v1.internal.generated.Zipkin.getTables()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getIndexes()",
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getKeys()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e2ffacdaf050853d2c3932da49b488a44422ff2b",
        "previous_commit": "5454c157f249f0f796d7f3b7beabc5f7c43b1a27",
        "date": 1702458871,
        "releases": {
            "previous": "e2ffacdaf050853d2c3932da49b488a44422ff2b",
            "next": "e2ffacdaf050853d2c3932da49b488a44422ff2b"
        },
        "commit_message": "refactor: SLF4J best practices (#3639)\n\nUse this link to re-run the recipe: https://app.moderne.io/recipes/org.openrewrite.java.logging.slf4j.Slf4jBestPractices\r\n\r\nCo-authored-by: Moderne <team@moderne.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e2ffacdaf050853d2c3932da49b488a44422ff2b": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinActuatorImporter.java": [
                    "public void zipkin2.server.internal.ZipkinActuatorImporter.initialize(GenericApplicationContext context)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinModuleImporter.java": [
                    "public void zipkin2.server.internal.ZipkinModuleImporter.initialize(GenericApplicationContext context)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "static SelectTraceIdsFromSpan.Factory zipkin2.storage.cassandra.CassandraSpanStore.initialiseSelectTraceIdsFromSpan(CqlSession session)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "static InetAddress zipkin2.storage.cassandra.CassandraUtil.inetAddressOrNull(@Nullable String string, @Nullable byte[] bytes)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/SessionBuilder.java": [
                    "public static CqlSession zipkin2.storage.cassandra.internal.SessionBuilder.buildSession( String contactPoints, String localDc, Map<DriverOption, Integer> poolingOptions, @Nullable AuthProvider authProvider, boolean useSsl )"
                ]
            },
            "5454c157f249f0f796d7f3b7beabc5f7c43b1a27": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinActuatorImporter.java": [
                    "public void zipkin2.server.internal.ZipkinActuatorImporter.initialize(GenericApplicationContext context)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinModuleImporter.java": [
                    "public void zipkin2.server.internal.ZipkinModuleImporter.initialize(GenericApplicationContext context)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "static SelectTraceIdsFromSpan.Factory zipkin2.storage.cassandra.CassandraSpanStore.initialiseSelectTraceIdsFromSpan(CqlSession session)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "static InetAddress zipkin2.storage.cassandra.CassandraUtil.inetAddressOrNull(@Nullable String string, @Nullable byte[] bytes)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/SessionBuilder.java": [
                    "public static CqlSession zipkin2.storage.cassandra.internal.SessionBuilder.buildSession( String contactPoints, String localDc, Map<DriverOption, Integer> poolingOptions, @Nullable AuthProvider authProvider, boolean useSsl )"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "186499889a0823e3cb90fe490f194ce4eebaab24",
        "previous_commit": "7ffc9721a59a23809f4632b72ee62751dbabdf69",
        "date": 1530258811,
        "releases": {
            "previous": "186499889a0823e3cb90fe490f194ce4eebaab24",
            "next": "186499889a0823e3cb90fe490f194ce4eebaab24"
        },
        "commit_message": "Simplifies Node (tree) code before porting to javascript\n\nThis reduces some logic and improves coverage.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "186499889a0823e3cb90fe490f194ce4eebaab24": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static void zipkin.internal.CorrectForClockSkew.adjust(Node<Span> node, @Nullable ClockSkew skewFromParent)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin2.internal.DependencyLinker.putTrace(Iterator<Span> spans)",
                    "Span zipkin2.internal.DependencyLinker.findRpcAncestor(Node<Span> current)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/Node.java": [
                    "void zipkin2.internal.Node<V>.processNode(Entry<V> entry)",
                    "public Node<V> zipkin2.internal.Node<V>.build()"
                ]
            },
            "7ffc9721a59a23809f4632b72ee62751dbabdf69": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static void zipkin.internal.CorrectForClockSkew.adjust(Node<Span> node, @Nullable ClockSkew skewFromParent)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin2.internal.DependencyLinker.putTrace(Iterator<Span> spans)",
                    "Span zipkin2.internal.DependencyLinker.findRpcAncestor(Node<Span> current)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/Node.java": [
                    "void zipkin2.internal.Node<V>.processNode(Entry<V> entry)",
                    "public Node<V> zipkin2.internal.Node<V>.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d7cdf7d6d0041a45ed13c3cce0dd9bcce37968ae",
        "previous_commit": "fefaa8e566ba0dc86b04a648e3b9da84f824210a",
        "date": 1498758750,
        "releases": {
            "previous": "d7cdf7d6d0041a45ed13c3cce0dd9bcce37968ae",
            "next": "d7cdf7d6d0041a45ed13c3cce0dd9bcce37968ae"
        },
        "commit_message": "Fixes #1542: avoid blocking fetch in C* store (#1564)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d7cdf7d6d0041a45ed13c3cce0dd9bcce37968ae": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.storage.cassandra3.CassandraSpanStore.getSpanNames(String serviceName)",
                    "public ListenableFuture<List<String>> zipkin.storage.cassandra3.CassandraSpanStore.getServiceNames()",
                    "ListenableFuture<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.getSpansByTraceIds(Set<TraceIdUDT> traceIds, int limit)",
                    "ListenableFuture<Map<TraceIdUDT, Long>> zipkin.storage.cassandra3.CassandraSpanStore.getTraceIdsByAnnotation( String annotationKey, long endTsMillis, long lookbackMillis, int limit)",
                    "ListenableFuture<Map<TraceIdUDT, Long>> zipkin.storage.cassandra3.CassandraSpanStore.getTraceIdsByServiceNames(QueryRequest request)"
                ]
            },
            "fefaa8e566ba0dc86b04a648e3b9da84f824210a": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.storage.cassandra3.CassandraSpanStore.getSpanNames(String serviceName)",
                    "public ListenableFuture<List<String>> zipkin.storage.cassandra3.CassandraSpanStore.getServiceNames()",
                    "ListenableFuture<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.getSpansByTraceIds(Set<TraceIdUDT> traceIds, int limit)",
                    "ListenableFuture<Map<TraceIdUDT, Long>> zipkin.storage.cassandra3.CassandraSpanStore.getTraceIdsByAnnotation( String annotationKey, long endTsMillis, long lookbackMillis, int limit)",
                    "ListenableFuture<Map<TraceIdUDT, Long>> zipkin.storage.cassandra3.CassandraSpanStore.getTraceIdsByServiceNames(QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1cb4bfec95d55c0eeadfd982920465e92cd3caed",
        "previous_commit": "df5a90bf00728816cef3e7b8e8a82cc94f979fa4",
        "date": 1585299554,
        "releases": {
            "previous": "1cb4bfec95d55c0eeadfd982920465e92cd3caed",
            "next": "1cb4bfec95d55c0eeadfd982920465e92cd3caed"
        },
        "commit_message": "Updates to latest Armeria and Spring Boot (#3049)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1cb4bfec95d55c0eeadfd982920465e92cd3caed": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "static HttpData zipkin2.server.internal.UnzippingBytesRequestConverter.convertRequest(ServiceRequestContext ctx, AggregatedHttpRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpConfiguration.java": [
                    "HttpService infoService(MediaType mediaType)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "static HttpService maybeIndexService(String basePath, Resource resource)",
                    "ArmeriaServerConfigurator zipkin2.server.internal.ui.ZipkinUiConfiguration.uiServerConfigurator( HttpService indexService, Optional<MeterRegistry> meterRegistry )"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "protected V zipkin2.elasticsearch.internal.client.HttpCall<V>.doExecute()"
                ]
            },
            "df5a90bf00728816cef3e7b8e8a82cc94f979fa4": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "static HttpData zipkin2.server.internal.UnzippingBytesRequestConverter.convertRequest(ServiceRequestContext ctx, AggregatedHttpRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpConfiguration.java": [
                    "static HttpService infoService(MediaType mediaType)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "static HttpService maybeIndexService(String basePath, Resource resource)",
                    "ArmeriaServerConfigurator zipkin2.server.internal.ui.ZipkinUiConfiguration.uiServerConfigurator( HttpService indexService, Optional<MeterRegistry> meterRegistry )"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "protected V zipkin2.elasticsearch.internal.client.HttpCall<V>.doExecute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4854ae53ef77da4060813fd199c8e0e4f758d5ce",
        "previous_commit": "f419eae55434db22825649515aa9499b05523014",
        "date": 1557450383,
        "releases": {
            "previous": "4854ae53ef77da4060813fd199c8e0e4f758d5ce",
            "next": "4854ae53ef77da4060813fd199c8e0e4f758d5ce"
        },
        "commit_message": "Polishes scribe module (#2575)\n\nThis fixes the maven configuration of scribe resulting in a module jar\r\nless than half a meg. Besides reformatting files, it fixes a couple\r\nglitches: `Unknown channel option 'SO_BACKLOG'` in logs, and some areas\r\nwhere fatal errors weren't propagated (however unlikely).\r\n\r\nTested under load with no errors or dropped messages.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4854ae53ef77da4060813fd199c8e0e4f758d5ce": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/NettyScribeServer.java": [
                    "void zipkin2.collector.scribe.NettyScribeServer.start()"
                ],
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeInboundHandler.java": [
                    "public void zipkin2.collector.scribe.ScribeInboundHandler.channelRead(final ChannelHandlerContext ctx, Object msg)",
                    "void zipkin2.collector.scribe.ScribeInboundHandler.maybeReadHeader(ChannelHandlerContext ctx)",
                    "void zipkin2.collector.scribe.ScribeInboundHandler.maybeReadPayload(ChannelHandlerContext ctx)"
                ],
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeSpanConsumer.java": [
                    "public void zipkin2.collector.scribe.ScribeSpanConsumer.Log(List<LogEntry> messages, AsyncMethodCallback<ResultCode> resultHandler)"
                ]
            },
            "f419eae55434db22825649515aa9499b05523014": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/NettyScribeServer.java": [
                    "void zipkin2.collector.scribe.NettyScribeServer.start()"
                ],
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeInboundHandler.java": [
                    "public void zipkin2.collector.scribe.ScribeInboundHandler.channelRead(final ChannelHandlerContext ctx, Object msg)",
                    "void zipkin2.collector.scribe.ScribeInboundHandler.maybeReadHeader(ChannelHandlerContext ctx)",
                    "void zipkin2.collector.scribe.ScribeInboundHandler.maybeReadPayload(ChannelHandlerContext ctx)"
                ],
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeSpanConsumer.java": [
                    "public void zipkin2.collector.scribe.ScribeSpanConsumer.Log(List<LogEntry> messages, AsyncMethodCallback<ResultCode> resultHandler)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "02cad5d4f2ca8012c16166654863bde15bf4071b",
        "previous_commit": "4b31ecb94bc164f70ceb51380db696c8300b76e2",
        "date": 1524821611,
        "releases": {
            "previous": "02cad5d4f2ca8012c16166654863bde15bf4071b",
            "next": "02cad5d4f2ca8012c16166654863bde15bf4071b"
        },
        "commit_message": "Removes empty prometheus metrics\n\nMicrometer eagerly initializes metrics for prometheus. Our actuate\nmetrics adapter was accidentally initializing metrics never written.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "02cad5d4f2ca8012c16166654863bde15bf4071b": {
                "zipkin-server/src/main/java/zipkin/server/internal/ActuateCollectorMetrics.java": [
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementMessagesDropped()",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementMessages()",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementSpans(int quantity)",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementSpansDropped(int quantity)",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementBytes(int quantity)"
                ]
            },
            "4b31ecb94bc164f70ceb51380db696c8300b76e2": {
                "zipkin-server/src/main/java/zipkin/server/internal/ActuateCollectorMetrics.java": [
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementMessagesDropped()",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementMessages()",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementSpans(int quantity)",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementSpansDropped(int quantity)",
                    "public void zipkin.server.internal.ActuateCollectorMetrics.incrementBytes(int quantity)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4cac5b2a983c3fd56badea26d8ee4ceac86fde9f",
        "previous_commit": "40ce0774fc63671ce87d23b6b2998d8af589ceb5",
        "date": 1502535278,
        "releases": {
            "previous": "4cac5b2a983c3fd56badea26d8ee4ceac86fde9f",
            "next": "4cac5b2a983c3fd56badea26d8ee4ceac86fde9f"
        },
        "commit_message": "Accepts Zipkin v2 Span format in all current transports (#1684)\n\nThis accepts the json format from #1499 on current transports. It does\r\nso by generalizing format detection from the two Kafka libraries, and\r\na new `SpanDecoder` interface. Types are still internal, but this allows\r\nus to proceed with other work in #1644, including implementing reporters\r\nin any language.\r\n\r\nConcretely, you can send a json list of span2 format as a Kafka or Http\r\nmessage. If using http, use the /api/v2/spans endpoint like so:\r\n\r\n```bash\r\n$ curl -X POST -s localhost:9411/api/v2/spans -H'Content-Type: application/json' -d'[{\r\n  \"timestamp_millis\": 1502101460678,\r\n  \"traceId\": \"9032b04972e475c5\",\r\n  \"id\": \"9032b04972e475c5\",\r\n  \"kind\": \"SERVER\",\r\n  \"name\": \"get\",\r\n  \"timestamp\": 1502101460678880,\r\n  \"duration\": 612898,\r\n  \"localEndpoint\": {\r\n    \"serviceName\": \"brave-webmvc-example\",\r\n    \"ipv4\": \"192.168.1.113\"\r\n  },\r\n  \"remoteEndpoint\": {\r\n    \"serviceName\": \"\",\r\n    \"ipv4\": \"127.0.0.1\",\r\n    \"port\": 60149\r\n  },\r\n  \"tags\": {\r\n    \"error\": \"500 Internal Server Error\",\r\n    \"http.path\": \"/a\"\r\n  }\r\n}]'\r\n```",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4cac5b2a983c3fd56badea26d8ee4ceac86fde9f": {
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.collector.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-collector/kafka10/src/main/java/zipkin/collector/kafka10/KafkaCollectorWorker.java": [
                    "public void zipkin.collector.kafka10.KafkaCollectorWorker.run()"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java": [
                    "ListenableFuture<ResponseEntity<?>> zipkin.server.ZipkinHttpCollector.validateAndStoreSpans(String encoding, SpanDecoder decoder, byte[] body)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "public void zipkin.collector.Collector.acceptSpans(List<byte[]> serializedSpans, SpanDecoder decoder, Callback<Void> callback)"
                ]
            },
            "40ce0774fc63671ce87d23b6b2998d8af589ceb5": {
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.collector.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-collector/kafka10/src/main/java/zipkin/collector/kafka10/KafkaCollectorWorker.java": [
                    "public void zipkin.collector.kafka10.KafkaCollectorWorker.run()"
                ],
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java": [
                    "ListenableFuture<ResponseEntity<?>> zipkin.server.ZipkinHttpCollector.validateAndStoreSpans(String encoding, Codec codec, byte[] body)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "public void zipkin.collector.Collector.acceptSpans(List<byte[]> serializedSpans, Codec codec, Callback<Void> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "89b013e978c60b17b53804dd2e5ee3476948b8ee",
        "previous_commit": "6d855a56811bcef576188dd96c44f2e6b8e055e9",
        "date": 1593915637,
        "releases": {
            "previous": "89b013e978c60b17b53804dd2e5ee3476948b8ee",
            "next": "89b013e978c60b17b53804dd2e5ee3476948b8ee"
        },
        "commit_message": "Refactors DelayLimiter in preparation of re-use in cassandra v1 (#3136)\n\nThis refactors code relating to DelayLimiter so that it is easier to\r\nreuse later. What will happen in a separate PR (or what will be\r\nattempted) is change the limiter so that it can run a predicate instead\r\nof an exact match. For example Cassandra v1's Indexer currently mutes\r\nindex insertions which are logically equivalent to data already written.\r\n\r\nConcretely, a service name that appears 3 times in the same trace,\r\nresults in two writes (earliest and latest). If it appears again, and\r\nbetween those timestamps, that write is muted as it is redundant.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "89b013e978c60b17b53804dd2e5ee3476948b8ee": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public SpanConsumer zipkin2.storage.cassandra.v1.CassandraStorage.spanConsumer()"
                ],
                "zipkin/src/main/java/zipkin2/internal/DelayLimiter.java": [
                    "public Builder zipkin2.internal.DelayLimiter<C>.cardinality(int cardinality)",
                    "public <C> DelayLimiter<C> zipkin2.internal.DelayLimiter<C>.build()",
                    "public boolean zipkin2.internal.DelayLimiter<C>.shouldInvoke(C context)",
                    "public long zipkin2.internal.DelayLimiter<C>.getDelay(TimeUnit unit)"
                ]
            },
            "6d855a56811bcef576188dd96c44f2e6b8e055e9": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public SpanConsumer zipkin2.storage.cassandra.v1.CassandraStorage.spanConsumer()"
                ],
                "zipkin/src/main/java/zipkin2/internal/DelayLimiter.java": [
                    "public Builder zipkin2.internal.DelayLimiter<C>.cardinality(int cardinality)",
                    "public <C> DelayLimiter<C> zipkin2.internal.DelayLimiter<C>.build()",
                    "public boolean zipkin2.internal.DelayLimiter<C>.shouldInvoke(C context)",
                    "public long zipkin2.internal.DelayLimiter<C>.getDelay(TimeUnit unit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fdc3ca93e321bbdf2a83dd94172c87a2d44ecf33",
        "previous_commit": "30d77be54906142915165ce714150bfe4e31067d",
        "date": 1481416254,
        "releases": {
            "previous": "fdc3ca93e321bbdf2a83dd94172c87a2d44ecf33",
            "next": "fdc3ca93e321bbdf2a83dd94172c87a2d44ecf33"
        },
        "commit_message": "Allows arbitrary overriding of Kafka consumer properties (#1429)\n\nYou may need to override other consumer properties than what zipkin\r\nexplicitly defines. In such case, you need to prefix that property name\r\nwith \"zipkin.collector.kafka.overrides\" and pass it as a CLI argument or\r\nsystem property.\r\n\r\nFor example, to override \"overrides.auto.offset.reset\", you can set a\r\nprefixed system property:\r\n\r\n```bash\r\n$ KAFKA_ZOOKEEPER=127.0.0.1:2181 java -Dzipkin.collector.kafka.overrides.auto.offset.reset=largest -jar zipkin.jar\r\n```\r\n\r\nFixes #1427",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fdc3ca93e321bbdf2a83dd94172c87a2d44ecf33": {
                "zipkin-autoconfigure/collector-kafka/src/main/java/zipkin/autoconfigure/collector/kafka/ZipkinKafkaCollectorProperties.java": [
                    "public KafkaCollector.Builder zipkin.autoconfigure.collector.kafka.ZipkinKafkaCollectorProperties.toBuilder()"
                ],
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaCollector.java": [
                    "public Builder zipkin.collector.kafka.KafkaCollector.groupId(String groupId)",
                    "public Builder zipkin.collector.kafka.KafkaCollector.maxMessageSize(int bytes)",
                    "public Builder zipkin.collector.kafka.KafkaCollector.zookeeper(String zookeeper)"
                ]
            },
            "30d77be54906142915165ce714150bfe4e31067d": {
                "zipkin-autoconfigure/collector-kafka/src/main/java/zipkin/autoconfigure/collector/kafka/ZipkinKafkaCollectorProperties.java": [
                    "public KafkaCollector.Builder zipkin.autoconfigure.collector.kafka.ZipkinKafkaCollectorProperties.toBuilder()"
                ],
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaCollector.java": [
                    "public Builder zipkin.collector.kafka.KafkaCollector.groupId(String groupId)",
                    "public Builder zipkin.collector.kafka.KafkaCollector.maxMessageSize(int bytes)",
                    "public Builder zipkin.collector.kafka.KafkaCollector.zookeeper(String zookeeper)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2297f9d1e03329bdb67e7cb65890254eea7192b6",
        "previous_commit": "dd7d03a0ebc0231bbae0b9f25dbabff77204ffc8",
        "date": 1472552266,
        "releases": {
            "previous": "2297f9d1e03329bdb67e7cb65890254eea7192b6",
            "next": "2297f9d1e03329bdb67e7cb65890254eea7192b6"
        },
        "commit_message": "Cuts thrift encoding overhead by allocating the correct sized array (#1259)\n\nThis computes the serialized length prior to serializing thrifts. Then,\r\na buffer of exactly the right size is allocated, avoiding growth via\r\nrebuffering. The resulting array can be returned directly as it is the\r\ncorrect length.\r\n\r\nThis is the last low-hanging fruit of thrift write optimization, and\r\nresults in ~4x higher efficiency than typical libthrift usage.\r\n\r\n```\r\nBenchmark                                         Mode  Cnt  Score   Error  Units\r\nCodecBenchmarks.writeClientSpan_json_zipkin       avgt   15  17.165 \u00b1 0.785  us/op\r\nCodecBenchmarks.writeClientSpan_thrift_libthrift  avgt   15   2.112 \u00b1 0.073  us/op\r\nCodecBenchmarks.writeClientSpan_thrift_zipkin     avgt   15   0.488 \u00b1 0.026  us/op\r\n```",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2297f9d1e03329bdb67e7cb65890254eea7192b6": {
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "byte[] zipkin.internal.Buffer.toByteArray()"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "static <T> byte[] zipkin.internal.ThriftCodec.write(ThriftWriter<T> writer, T value)",
                    "public void zipkin.internal.ThriftCodec.write(Annotation value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Span value, Buffer buffer)"
                ]
            },
            "dd7d03a0ebc0231bbae0b9f25dbabff77204ffc8": {
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "byte[] zipkin.internal.Buffer.toByteArray()"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "static <T> byte[] zipkin.internal.ThriftCodec.write(ThriftWriter<T> writer, T value)",
                    "public void zipkin.internal.ThriftCodec.write(Annotation value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Span value, Buffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "523d1a7ddb89ad1e7345571eac0ffb1d0713fff0",
        "previous_commit": "825e270c6dc1885bea0cc5fae5b5c163feeffdec",
        "date": 1571965522,
        "releases": {
            "previous": "523d1a7ddb89ad1e7345571eac0ffb1d0713fff0",
            "next": "523d1a7ddb89ad1e7345571eac0ffb1d0713fff0"
        },
        "commit_message": "Bump span name and autocomplete limit to 10k (#2880)\n\nThe main monolith at Yelp has more than 1k span names. This is due to\r\nseveral reasons, main one being that all mysql queries also have\r\n\"yelp-main\" as localEndpoint.serviceName. Since we use the query\r\nfingerprint as name, this causes us to have around 6k span names.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "523d1a7ddb89ad1e7345571eac0ffb1d0713fff0": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectAutocompleteValues.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectAutocompleteValues.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectSpanNames.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectSpanNames.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectAutocompleteValues.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectAutocompleteValues.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectSpanNames.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectSpanNames.newFuture()"
                ]
            },
            "825e270c6dc1885bea0cc5fae5b5c163feeffdec": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectAutocompleteValues.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectAutocompleteValues.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectSpanNames.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.SelectSpanNames.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectAutocompleteValues.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectAutocompleteValues.newFuture()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectSpanNames.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.SelectSpanNames.newFuture()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4f263def864b2117bcfbb9f8cfbc73e8c5f077be",
        "previous_commit": "29044e21fd15331afdd278f27ff5d858d600616b",
        "date": 1706146466,
        "releases": {
            "previous": "4f263def864b2117bcfbb9f8cfbc73e8c5f077be",
            "next": "4f263def864b2117bcfbb9f8cfbc73e8c5f077be"
        },
        "commit_message": "cassandra: cleans up code and tests (#3709)\n\nThis cleans up deprecation and style issues found in IntelliJ analysis.\r\nIt also migrates docker tests to junit-jupiter and fixes the logging\r\nconfiguration which broke when we updated to SLF4J 2.x.\r\n\r\nThis also updates all use of docker test images to the latest, in\r\nattempts to share base image layers.\r\n\r\nSigned-off-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4f263def864b2117bcfbb9f8cfbc73e8c5f077be": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.CassandraSpanStore.newBucketedTraceIdCall( QueryRequest request, TimestampRange timestampRange, int traceIndexFetchSize)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static void zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, CqlSession session)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/SessionBuilder.java": [
                    "public static CqlSession zipkin2.storage.cassandra.internal.SessionBuilder.buildSession( String contactPoints, String localDc, Map<DriverOption, Integer> poolingOptions, @Nullable AuthProvider authProvider, boolean useSsl, boolean sslHostnameValidation )"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/DeduplicatingInsert.java": [
                    "protected final void zipkin2.storage.cassandra.internal.call.DeduplicatingInsert<I>.doEnqueue(Callback<Void> callback)"
                ]
            },
            "29044e21fd15331afdd278f27ff5d858d600616b": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "Call<Map<String, Long>> zipkin2.storage.cassandra.CassandraSpanStore.newBucketedTraceIdCall( QueryRequest request, TimestampRange timestampRange, int traceIndexFetchSize)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, CqlSession session)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/SessionBuilder.java": [
                    "public static CqlSession zipkin2.storage.cassandra.internal.SessionBuilder.buildSession( String contactPoints, String localDc, Map<DriverOption, Integer> poolingOptions, @Nullable AuthProvider authProvider, boolean useSsl, boolean sslHostnameValidation )"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/DeduplicatingInsert.java": [
                    "protected final void zipkin2.storage.cassandra.internal.call.DeduplicatingInsert<I>.doEnqueue(Callback<Void> callback)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "06b4e4013c4896c220c407dbfec4c371d4392d69",
        "previous_commit": "f9138ba0ae840ce3e1323ad2f4020603b8c4466b",
        "date": 1485418675,
        "releases": {
            "previous": "06b4e4013c4896c220c407dbfec4c371d4392d69",
            "next": "06b4e4013c4896c220c407dbfec4c371d4392d69"
        },
        "commit_message": "Set result size when fetching dependency links from ElasticSearch (#1504)\n\nOtherwise it only returns 10.\r\n\r\nFixes #1503",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "06b4e4013c4896c220c407dbfec4c371d4392d69": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "protected ListenableFuture<List<Span>> zipkin.storage.elasticsearch.http.HttpClient.findSpans(String[] indices, QueryBuilder query)",
                    "protected ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.http.HttpClient.findDependencies(String[] indices)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/NativeClient.java": [
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.NativeClient.findDependencies(String[] indices)",
                    "public ListenableFuture<List<Span>> zipkin.storage.elasticsearch.NativeClient.findSpans(String[] indices, QueryBuilder query)"
                ]
            },
            "f9138ba0ae840ce3e1323ad2f4020603b8c4466b": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpClient.java": [
                    "protected ListenableFuture<List<Span>> zipkin.storage.elasticsearch.http.HttpClient.findSpans(String[] indices, QueryBuilder query)",
                    "protected ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.http.HttpClient.findDependencies(String[] indices)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/NativeClient.java": [
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.NativeClient.findDependencies(String[] indices)",
                    "public ListenableFuture<List<Span>> zipkin.storage.elasticsearch.NativeClient.findSpans(String[] indices, QueryBuilder query)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c16172126f586137e7b7bb8db634d308b85c167e",
        "previous_commit": "19816eb57c051b9ad68cff2dee52882d27da3513",
        "date": 1499135056,
        "releases": {
            "previous": "c16172126f586137e7b7bb8db634d308b85c167e",
            "next": "c16172126f586137e7b7bb8db634d308b85c167e"
        },
        "commit_message": "Bound in-memory (#1631)\n\nLimits in-memory storage to a max number of spans (500,000 default)\r\n\r\nFixes #1528",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c16172126f586137e7b7bb8db634d308b85c167e": {
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "synchronized void zipkin.storage.InMemorySpanStore.clear()",
                    "void zipkin.storage.InMemorySpanStore.clear()",
                    "void zipkin.storage.InMemorySpanStore.put(K key, V value)",
                    "public void zipkin.storage.InMemorySpanStore.accept(List<Span> spans)"
                ]
            },
            "19816eb57c051b9ad68cff2dee52882d27da3513": {
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "synchronized void zipkin.storage.InMemorySpanStore.clear()",
                    "void zipkin.storage.InMemorySpanStore.clear()",
                    "void zipkin.storage.InMemorySpanStore.put(K key, V value)",
                    "public void zipkin.storage.InMemorySpanStore.accept(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4aa179db1109259f0fdb32bfcc76f5006a6e2379",
        "previous_commit": "ce7d386cc67c0700bc805c017e1462d4262082d6",
        "date": 1478157774,
        "releases": {
            "previous": "4aa179db1109259f0fdb32bfcc76f5006a6e2379",
            "next": "4aa179db1109259f0fdb32bfcc76f5006a6e2379"
        },
        "commit_message": "Reduces differences between Elasticsearch 2.x and 5 (#1383)\n\nElasticsearch 2.x supports an alias of zero for max int whereas ES 5\r\ndoes not. Also, we are needlessly converting in and out of strings.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4aa179db1109259f0fdb32bfcc76f5006a6e2379": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getServiceNames()",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.apply(List<String> input)",
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)"
                ]
            },
            "ce7d386cc67c0700bc805c017e1462d4262082d6": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getServiceNames()",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.apply(List<String> input)",
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b03ea32667f496287633b56814c557dabb28e7ce",
        "previous_commit": "b262b9957c4cb6b965d5f915aa8eea05620054e7",
        "date": 1475309312,
        "releases": {
            "previous": "b03ea32667f496287633b56814c557dabb28e7ce",
            "next": "b03ea32667f496287633b56814c557dabb28e7ce"
        },
        "commit_message": "Adds Endpoint.toString in json form (#1324)\n\nThis is helpful for debugging instrumentation, particularly their local\r\nendpoints.\r\n\r\nSee https://github.com/openzipkin/brave/pull/245",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b03ea32667f496287633b56814c557dabb28e7ce": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public int zipkin.internal.JsonCodec.sizeInBytes(Annotation value)",
                    "public void zipkin.internal.JsonCodec.write(Annotation value, Buffer b)",
                    "public void zipkin.internal.JsonCodec.write(BinaryAnnotation value, Buffer b)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(BinaryAnnotation value)"
                ]
            },
            "b262b9957c4cb6b965d5f915aa8eea05620054e7": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public int zipkin.internal.JsonCodec.sizeInBytes(Annotation value)",
                    "public void zipkin.internal.JsonCodec.write(Annotation value, Buffer b)",
                    "public void zipkin.internal.JsonCodec.write(BinaryAnnotation value, Buffer b)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(BinaryAnnotation value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "db088fc853a0f32fec1b9d0f279b320b5e2ce807",
        "previous_commit": "d86bfc43622ec891f76b6a4efc56bda61ac56f5b",
        "date": 1550472315,
        "releases": {
            "previous": "db088fc853a0f32fec1b9d0f279b320b5e2ce807",
            "next": "db088fc853a0f32fec1b9d0f279b320b5e2ce807"
        },
        "commit_message": "Consistently fail when endTs or lookback are set to zero (#2399)\n\nCurrently, we only fail when spans are searched on endTs or lookback\r\nzero. This fails the same way for dependency queries.\r\n\r\nFixes #2356",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "db088fc853a0f32fec1b9d0f279b320b5e2ce807": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanStore.java": [
                    "public Call<List<DependencyLink>> zipkin2.storage.cassandra.v1.CassandraSpanStore.getDependencies(long endTs, long lookback)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<DependencyLink>> zipkin2.storage.cassandra.CassandraSpanStore.getDependencies(long endTs, long lookback)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<DependencyLink>> zipkin2.elasticsearch.ElasticsearchSpanStore.getDependencies(long endTs, long lookback)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLSpanStore.java": [
                    "public Call<List<DependencyLink>> zipkin2.storage.mysql.v1.MySQLSpanStore.getDependencies(long endTs, long lookback)"
                ]
            },
            "d86bfc43622ec891f76b6a4efc56bda61ac56f5b": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanStore.java": [
                    "public Call<List<DependencyLink>> zipkin2.storage.cassandra.v1.CassandraSpanStore.getDependencies(long endTs, long lookback)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<DependencyLink>> zipkin2.storage.cassandra.CassandraSpanStore.getDependencies(long endTs, long lookback)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<DependencyLink>> zipkin2.elasticsearch.ElasticsearchSpanStore.getDependencies(long endTs, long lookback)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLSpanStore.java": [
                    "public Call<List<DependencyLink>> zipkin2.storage.mysql.v1.MySQLSpanStore.getDependencies(long endTs, long lookback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f259817bd1d676d425c0d29ff826ca13d4653519",
        "previous_commit": "b956bfbb81bea76d9b5735a47c7569d726313402",
        "date": 1507635065,
        "releases": {
            "previous": "f259817bd1d676d425c0d29ff826ca13d4653519",
            "next": "f259817bd1d676d425c0d29ff826ca13d4653519"
        },
        "commit_message": "Bounds the amount of data dumped to the WARN category (#1764)\n\nBefore, when there were problems, the entire input json and any trace\r\nIDs ended up in the server logs. This by itself can take out the server.\r\n\r\nThis takes a conservative step forward, leaving warning level, but\r\nsignificantly reducing the output.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f259817bd1d676d425c0d29ff826ca13d4653519": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public static <T> T read(JsonReaderAdapter<T> adapter, byte[] bytes)",
                    "public static <T> List<T> readList(JsonReaderAdapter<T> adapter, byte[] bytes)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> boolean zipkin2.internal.JsonCodec.readList(JsonReaderAdapter<T> adapter, byte[] bytes, Collection<T> out)",
                    "public static <T> boolean zipkin2.internal.JsonCodec.read(JsonReaderAdapter<T> adapter, byte[] bytes, Collection<T> out)"
                ]
            },
            "b956bfbb81bea76d9b5735a47c7569d726313402": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public static <T> T read(JsonReaderAdapter<T> adapter, byte[] bytes)",
                    "public static <T> List<T> readList(JsonReaderAdapter<T> adapter, byte[] bytes)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> boolean zipkin2.internal.JsonCodec.readList(JsonReaderAdapter<T> adapter, byte[] bytes, Collection<T> out)",
                    "public static <T> boolean zipkin2.internal.JsonCodec.read(JsonReaderAdapter<T> adapter, byte[] bytes, Collection<T> out)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ee95e4b7f48c1c0755fce26757d0890a253951e4",
        "previous_commit": "4e078aab57a9300776936b5e32537a6c60313d0f",
        "date": 1477926801,
        "releases": {
            "previous": "ee95e4b7f48c1c0755fce26757d0890a253951e4",
            "next": "ee95e4b7f48c1c0755fce26757d0890a253951e4"
        },
        "commit_message": "Serializes I64 numbers greater than 53bits as strings in json (#1373)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ee95e4b7f48c1c0755fce26757d0890a253951e4": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ZipkinAdapters.java": [
                    "public BinaryAnnotation zipkin.storage.elasticsearch.http.ZipkinAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public BinaryAnnotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public void zipkin.internal.JsonCodec.write(BinaryAnnotation value, Buffer b)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(BinaryAnnotation value)"
                ]
            },
            "4e078aab57a9300776936b5e32537a6c60313d0f": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ZipkinAdapters.java": [
                    "public BinaryAnnotation zipkin.storage.elasticsearch.http.ZipkinAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public BinaryAnnotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)",
                    "public void zipkin.internal.JsonCodec.write(BinaryAnnotation value, Buffer b)",
                    "public int zipkin.internal.JsonCodec.sizeInBytes(BinaryAnnotation value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6b678b302f8e0f200d7c84aafb3fc7ce2107b01e",
        "previous_commit": "41e1333bcf6ad2e70e6b1de0654ce9e389d375cb",
        "date": 1570822195,
        "releases": {
            "previous": "6b678b302f8e0f200d7c84aafb3fc7ce2107b01e",
            "next": "6b678b302f8e0f200d7c84aafb3fc7ce2107b01e"
        },
        "commit_message": "Removes remaining use of jackson-databind from zipkin-server (#2821)\n\nThis is still in use in elasticsearch, but the server no longer uses it.\r\nAlso addresses feedback from @anuraaga in https://github.com/openzipkin/zipkin/pull/2819",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6b678b302f8e0f200d7c84aafb3fc7ce2107b01e": {
                "zipkin-server/src/main/java/zipkin2/server/internal/health/ZipkinHealthController.java": [
                    "static String zipkin2.server.internal.health.ZipkinHealthController.writeJsonError(String error)",
                    "static String zipkin2.server.internal.health.ZipkinHealthController.writeJson(String overallStatus, List<ComponentHealth> healths)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "IndexSwitchingService zipkin2.server.internal.ui.ZipkinUiConfiguration.indexSwitchingService()",
                    "ArmeriaServerConfigurator zipkin2.server.internal.ui.ZipkinUiConfiguration.uiServerConfigurator( IndexSwitchingService indexSwitchingService)"
                ]
            },
            "41e1333bcf6ad2e70e6b1de0654ce9e389d375cb": {
                "zipkin-server/src/main/java/zipkin2/server/internal/health/ZipkinHealthController.java": [
                    "static String zipkin2.server.internal.health.ZipkinHealthController.writeJsonError(String error)",
                    "static String zipkin2.server.internal.health.ZipkinHealthController.writeJson(String overallStatus, List<ComponentHealth> healths)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "IndexSwitchingService zipkin2.server.internal.ui.ZipkinUiConfiguration.indexSwitchingService()",
                    "ArmeriaServerConfigurator zipkin2.server.internal.ui.ZipkinUiConfiguration.uiServerConfigurator( IndexSwitchingService indexSwitchingService)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5d56d19cb74f1b7e50b94ad1c0f21afb3eef9912",
        "previous_commit": "d1793a13485d80824bd631847e80fc55f910c844",
        "date": 1563183961,
        "releases": {
            "previous": "5d56d19cb74f1b7e50b94ad1c0f21afb3eef9912",
            "next": "5d56d19cb74f1b7e50b94ad1c0f21afb3eef9912"
        },
        "commit_message": "Await endpoints in check, not httpClient (#2667)\n\n* Await endpoints in check, not httpClient\r\n\r\n* More explicit cleanup order in autocomplete tests.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5d56d19cb74f1b7e50b94ad1c0f21afb3eef9912": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public CheckResult zipkin2.elasticsearch.ElasticsearchStorage.check()",
                    "public HttpClient zipkin2.elasticsearch.ElasticsearchStorage.httpClient()"
                ],
                "zipkin-tests/src/main/java/zipkin2/storage/ITAutocompleteTags.java": [
                    "public void zipkin2.storage.ITAutocompleteTags.after()",
                    "public void zipkin2.storage.ITAutocompleteTags.before()"
                ]
            },
            "d1793a13485d80824bd631847e80fc55f910c844": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public CheckResult zipkin2.elasticsearch.ElasticsearchStorage.check()",
                    "public HttpClient zipkin2.elasticsearch.ElasticsearchStorage.httpClient()"
                ],
                "zipkin-tests/src/main/java/zipkin2/storage/ITAutocompleteTags.java": [
                    "public void zipkin2.storage.ITAutocompleteTags.after()",
                    "public void zipkin2.storage.ITAutocompleteTags.before()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "942c1b8c9e7e9fd6d2a72abcebf35b6a17726732",
        "previous_commit": "5f2e29c72119fbf1623b3cb1d934e6f17892dc94",
        "date": 1501660452,
        "releases": {
            "previous": "942c1b8c9e7e9fd6d2a72abcebf35b6a17726732",
            "next": "942c1b8c9e7e9fd6d2a72abcebf35b6a17726732"
        },
        "commit_message": "Adds support for Messaging Spans (#1677)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "942c1b8c9e7e9fd6d2a72abcebf35b6a17726732": {
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<Span2> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/Span2Converter.java": [
                    "void zipkin.internal.Span2Converter.processAnnotations(Span source)",
                    "void zipkin.internal.Span2Converter.processBinaryAnnotations(Span source)",
                    "public static Span zipkin.internal.Span2Converter.toSpan(Span2 in)"
                ]
            },
            "5f2e29c72119fbf1623b3cb1d934e6f17892dc94": {
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<Span2> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/Span2Converter.java": [
                    "void zipkin.internal.Span2Converter.processAnnotations(Span source)",
                    "void zipkin.internal.Span2Converter.processBinaryAnnotations(Span source)",
                    "public static Span zipkin.internal.Span2Converter.toSpan(Span2 in)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7ffc9721a59a23809f4632b72ee62751dbabdf69",
        "previous_commit": "2c08e2be07bf004b5d3cb480731a907e60f9a36b",
        "date": 1530239338,
        "releases": {
            "previous": "7ffc9721a59a23809f4632b72ee62751dbabdf69",
            "next": "7ffc9721a59a23809f4632b72ee62751dbabdf69"
        },
        "commit_message": "Raises CorrectForClockSkew coverage to 100% in preparation of js port\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7ffc9721a59a23809f4632b72ee62751dbabdf69": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static Span zipkin.internal.CorrectForClockSkew.adjustTimestamps(Span span, ClockSkew skew)",
                    "static ClockSkew zipkin.internal.CorrectForClockSkew.getClockSkew(Span span)",
                    "static void zipkin.internal.CorrectForClockSkew.adjust(Node<Span> node, @Nullable ClockSkew skewFromParent)",
                    "static boolean zipkin.internal.CorrectForClockSkew.ipsMatch(Endpoint skew, Endpoint that)"
                ]
            },
            "2c08e2be07bf004b5d3cb480731a907e60f9a36b": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static Span zipkin.internal.CorrectForClockSkew.adjustTimestamps(Span span, ClockSkew skew)",
                    "static ClockSkew zipkin.internal.CorrectForClockSkew.getClockSkew(Span span)",
                    "static void zipkin.internal.CorrectForClockSkew.adjust(Node<Span> node, @Nullable ClockSkew skewFromParent)",
                    "static boolean zipkin.internal.CorrectForClockSkew.ipsMatch(Endpoint skew, Endpoint that)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "54d1eb883d5341ece525e5b3c6c57d800299ef18",
        "previous_commit": "9a83aa6ed2f7a33c457a802f4b165a7bb14e456a",
        "date": 1484561924,
        "releases": {
            "previous": "54d1eb883d5341ece525e5b3c6c57d800299ef18",
            "next": "54d1eb883d5341ece525e5b3c6c57d800299ef18"
        },
        "commit_message": "Skips creating dependency links when the serviceName is empty string (#1491)\n\nSometimes, empty string is sent for endpoint.serviceName. This prevents\r\nempty string from showing up in the dependency graph.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "54d1eb883d5341ece525e5b3c6c57d800299ef18": {
                "zipkin/src/main/java/zipkin/internal/DependencyLinkSpan.java": [
                    "public Builder zipkin.internal.DependencyLinkSpan.srService(String srService)",
                    "public Builder zipkin.internal.DependencyLinkSpan.csService(String csService)",
                    "public Builder zipkin.internal.DependencyLinkSpan.saService(String saService)",
                    "public Builder zipkin.internal.DependencyLinkSpan.caService(String caService)"
                ]
            },
            "9a83aa6ed2f7a33c457a802f4b165a7bb14e456a": {
                "zipkin/src/main/java/zipkin/internal/DependencyLinkSpan.java": [
                    "public Builder zipkin.internal.DependencyLinkSpan.srService(String srService)",
                    "public Builder zipkin.internal.DependencyLinkSpan.csService(String csService)",
                    "public Builder zipkin.internal.DependencyLinkSpan.saService(String saService)",
                    "public Builder zipkin.internal.DependencyLinkSpan.caService(String caService)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "81a481b490399a797bc5d04c00ee7de400a4f015",
        "previous_commit": "c93e153a407a2df7eaeecff68c6e45eaafbfb683",
        "date": 1564392945,
        "releases": {
            "previous": "81a481b490399a797bc5d04c00ee7de400a4f015",
            "next": "81a481b490399a797bc5d04c00ee7de400a4f015"
        },
        "commit_message": "Uses more things from Armeria 0.89 and more polish (#2710)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "81a481b490399a797bc5d04c00ee7de400a4f015": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "ClientFactory zipkin2.elasticsearch.ElasticsearchStorage.clientFactory()",
                    "public HttpClient zipkin2.elasticsearch.ElasticsearchStorage.httpClient()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "public Float zipkin2.elasticsearch.VersionSpecificTemplates.convert(HttpData content)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/SearchResultConverter.java": [
                    "public List<T> zipkin2.elasticsearch.internal.client.SearchResultConverter<T>.convert(InputStream content)"
                ]
            },
            "c93e153a407a2df7eaeecff68c6e45eaafbfb683": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "ClientFactory zipkin2.elasticsearch.ElasticsearchStorage.clientFactory()",
                    "public HttpClient zipkin2.elasticsearch.ElasticsearchStorage.httpClient()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "public Float zipkin2.elasticsearch.VersionSpecificTemplates.convert(HttpData content)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/SearchResultConverter.java": [
                    "public List<T> zipkin2.elasticsearch.internal.client.SearchResultConverter<T>.convert(HttpData content)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "130e2851e5a2a36886cee4c066fc050ec1df530c",
        "previous_commit": "19e39d543f4916c435232d47a307dae27ce46093",
        "date": 1451919999,
        "releases": {
            "previous": "130e2851e5a2a36886cee4c066fc050ec1df530c",
            "next": "130e2851e5a2a36886cee4c066fc050ec1df530c"
        },
        "commit_message": "Honor COLLECTOR_SAMPLE_RATE with TraceIdSampler\n\nThis introduces a port of the zipkin-scala sampler as TraceIdSampler.\nThis is used to implement the `COLLECTOR_SAMPLE_RATE` env property.\n\nIn order to make filtering easy and portable with language level 7, this\nchanges `SpanStore.accept` to take an iterator as opposed to a list.\n\nFixes #52\n",
        "jmh_dependency": {
            "benchmark_directory": "zipkin-java-benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "130e2851e5a2a36886cee4c066fc050ec1df530c": {
                "zipkin-java-interop/src/main/java/io/zipkin/interop/ScalaSpanStoreAdapter.java": [
                    "public Future<BoxedUnit> io.zipkin.interop.ScalaSpanStoreAdapter.apply(Seq<Span> input)"
                ],
                "zipkin-java-jdbc/src/main/java/io/zipkin/jdbc/JDBCSpanStore.java": [
                    "public void io.zipkin.jdbc.JDBCSpanStore.accept(Iterator<Span> spans)"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/ZipkinSpanWriter.java": [
                    "public void io.zipkin.server.ZipkinSpanWriter.write(SpanStore spanStore, List<Span> spans)"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/brave/SpanStoreSpanCollector.java": [
                    "public void io.zipkin.server.brave.SpanStoreSpanCollector.flush()"
                ]
            },
            "19e39d543f4916c435232d47a307dae27ce46093": {
                "zipkin-java-interop/src/main/java/io/zipkin/interop/ScalaSpanStoreAdapter.java": [
                    "public Future<BoxedUnit> io.zipkin.interop.ScalaSpanStoreAdapter.apply(Seq<Span> input)"
                ],
                "zipkin-java-jdbc/src/main/java/io/zipkin/jdbc/JDBCSpanStore.java": [
                    "public void io.zipkin.jdbc.JDBCSpanStore.accept(List<Span> spans)"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/ZipkinSpanWriter.java": [
                    "public void io.zipkin.server.ZipkinSpanWriter.write(SpanStore spanStore, List<Span> spans)"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/brave/SpanStoreSpanCollector.java": [
                    "public void io.zipkin.server.brave.SpanStoreSpanCollector.flush()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d985e932aa8b700b82c39859adbc4b3ef2c0ca1b",
        "previous_commit": "4310a1ad9289eaa8dd9bfbabe3704eb881caacbe",
        "date": 1563533797,
        "releases": {
            "previous": "d985e932aa8b700b82c39859adbc4b3ef2c0ca1b",
            "next": "d985e932aa8b700b82c39859adbc4b3ef2c0ca1b"
        },
        "commit_message": "Migrate from moshi/okio to jackson (#2688)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d985e932aa8b700b82c39859adbc4b3ef2c0ca1b": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BasicAuthInterceptor.java": [
                    "public HttpResponse zipkin2.elasticsearch.internal.BasicAuthInterceptor.execute(ClientRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BulkCallBuilder.java": [
                    "public HttpCall<Void> zipkin2.elasticsearch.internal.BulkCallBuilder.build()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "<V> V zipkin2.elasticsearch.internal.client.HttpCall<V>.parseResponse(AggregatedHttpResponse response, BodyConverter<V> bodyConverter)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/SearchCallFactory.java": [
                    "public <V> HttpCall<V> zipkin2.elasticsearch.internal.client.SearchCallFactory.newCall(SearchRequest request, HttpCall.BodyConverter<V> bodyConverter)"
                ]
            },
            "4310a1ad9289eaa8dd9bfbabe3704eb881caacbe": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BasicAuthInterceptor.java": [
                    "public HttpResponse zipkin2.elasticsearch.internal.BasicAuthInterceptor.execute(ClientRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BulkCallBuilder.java": [
                    "public HttpCall<Void> zipkin2.elasticsearch.internal.BulkCallBuilder.build()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "<V> V zipkin2.elasticsearch.internal.client.HttpCall<V>.parseResponse(AggregatedHttpResponse response, BodyConverter<V> bodyConverter)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/SearchCallFactory.java": [
                    "public <V> HttpCall<V> zipkin2.elasticsearch.internal.client.SearchCallFactory.newCall(SearchRequest request, HttpCall.BodyConverter<V> bodyConverter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a80c90a179b4e5327be02cbc5d9d7e447c0ac729",
        "previous_commit": "56db80658230adcdf3161c147745c2fe48a1fcaa",
        "date": 1469017111,
        "releases": {
            "previous": "a80c90a179b4e5327be02cbc5d9d7e447c0ac729",
            "next": "a80c90a179b4e5327be02cbc5d9d7e447c0ac729"
        },
        "commit_message": "Conditionally supports pre-aggregated dependencies in MySQL\n\nThis adds the table `zipkin_dependencies`, which is read when present\nto return pre-aggregated dependencies (from the zipkin-dependencies job)\n\nIf there is no data in the `zipkin_dependencies` table, results will be\naggregated on-demand. This allows backwards compatibility for those who\nhaven't added the new table, or run the spark job yet.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a80c90a179b4e5327be02cbc5d9d7e447c0ac729": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.cassandra.CassandraSpanStore.getDependencies(long endTs, @Nullable Long lookback)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "public List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.getDependencies(long endTs, @Nullable Long lookback)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLStorage.java": [
                    "void zipkin.storage.mysql.MySQLStorage.clear()"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/Zipkin.java": [
                    "private final List<Table<?>> zipkin.storage.mysql.internal.generated.Zipkin.getTables0()"
                ]
            },
            "56db80658230adcdf3161c147745c2fe48a1fcaa": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.cassandra.CassandraSpanStore.getDependencies(long endTs, @Nullable Long lookback)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "public List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.getDependencies(long endTs, @Nullable Long lookback)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLStorage.java": [
                    "void zipkin.storage.mysql.MySQLStorage.clear()"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/internal/generated/Zipkin.java": [
                    "private final List<Table<?>> zipkin.storage.mysql.internal.generated.Zipkin.getTables0()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cc6912779526ffa72523bf85f68511104bc2999e",
        "previous_commit": "5f89df48a7b240868ca706ccfd4e845a05fa7b7a",
        "date": 1563442141,
        "releases": {
            "previous": "cc6912779526ffa72523bf85f68511104bc2999e",
            "next": "cc6912779526ffa72523bf85f68511104bc2999e"
        },
        "commit_message": "Trace storage commands (#2682)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "cc6912779526ffa72523bf85f68511104bc2999e": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracedCall.java": [
                    "public void zipkin2.server.internal.brave.TracedCall<V>.enqueue(Callback<V> callback)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingStorageComponent.java": [
                    "public String zipkin2.server.internal.brave.TracingStorageComponent.toString()",
                    "public SpanConsumer zipkin2.server.internal.brave.TracingStorageComponent.spanConsumer()"
                ]
            },
            "5f89df48a7b240868ca706ccfd4e845a05fa7b7a": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracedCall.java": [
                    "public void zipkin2.server.internal.brave.TracedCall<V>.enqueue(Callback<V> callback)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingStorageComponent.java": [
                    "public String zipkin2.server.internal.brave.TracingStorageComponent.toString()",
                    "public SpanConsumer zipkin2.server.internal.brave.TracingStorageComponent.spanConsumer()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f43f1905d0d0fc057ba1da0631a6be9fab4d0e2d",
        "previous_commit": "fc8cc19a78d01c472b4b79412f378a43f179b772",
        "date": 1563090266,
        "releases": {
            "previous": "f43f1905d0d0fc057ba1da0631a6be9fab4d0e2d",
            "next": "f43f1905d0d0fc057ba1da0631a6be9fab4d0e2d"
        },
        "commit_message": "Accept many spans at once instead of in a loop in service name ITs. (#2665)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f43f1905d0d0fc057ba1da0631a6be9fab4d0e2d": {
                "zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java": [
                    "public void zipkin2.storage.ITServiceAndSpanNames.getRemoteServiceNames_allReturned()",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getRemoteServiceNames_dedupes()",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getSpanNames_allReturned()",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getSpanNames_dedupes()"
                ]
            },
            "fc8cc19a78d01c472b4b79412f378a43f179b772": {
                "zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java": [
                    "public void zipkin2.storage.ITServiceAndSpanNames.getRemoteServiceNames_allReturned()",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getRemoteServiceNames_dedupes()",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getSpanNames_allReturned()",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getSpanNames_dedupes()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "899170cd4099ca38e8d3433aef8121e1d4f06566",
        "previous_commit": "41b4a37ee948b521b69a242a79eadd9ed7c6da64",
        "date": 1706002914,
        "releases": {
            "previous": "899170cd4099ca38e8d3433aef8121e1d4f06566",
            "next": "899170cd4099ca38e8d3433aef8121e1d4f06566"
        },
        "commit_message": "cassandra: adds CASSANDRA_SSL_HOSTNAME_VALIDATION (#3701)\n\nThis adds `CASSANDRA_SSL_HOSTNAME_VALIDATION` with the same behavior as defined in cassandra's [SSL_HOSTNAME_VALIDATION](https://github.com/apache/cassandra-java-driver/blob/8d5849cb38995b312f29314d18256c0c3e94cf07/core/src/main/java/com/datastax/oss/driver/api/core/config/TypedDriverOption.java#L230), with the same default value of true.\r\n\r\nSigned-off-by: Adrian Cole <adrian@tetrate.io>\r\nCo-authored-by: Priya Sharma <priyasharma.osv@fedex.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "899170cd4099ca38e8d3433aef8121e1d4f06566": {
                "zipkin-server/src/main/java/zipkin2/server/internal/cassandra3/ZipkinCassandra3StorageProperties.java": [
                    "public CassandraStorage.Builder zipkin2.server.internal.cassandra3.ZipkinCassandra3StorageProperties.toBuilder()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public CassandraStorage zipkin2.storage.cassandra.CassandraStorage.build()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "static CqlSession zipkin2.storage.cassandra.DefaultSessionFactory.buildSession(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/SessionBuilder.java": [
                    "public static CqlSession zipkin2.storage.cassandra.internal.SessionBuilder.buildSession( String contactPoints, String localDc, Map<DriverOption, Integer> poolingOptions, @Nullable AuthProvider authProvider, boolean useSsl, boolean sslHostnameValidation )"
                ]
            },
            "41b4a37ee948b521b69a242a79eadd9ed7c6da64": {
                "zipkin-server/src/main/java/zipkin2/server/internal/cassandra3/ZipkinCassandra3StorageProperties.java": [
                    "public CassandraStorage.Builder zipkin2.server.internal.cassandra3.ZipkinCassandra3StorageProperties.toBuilder()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public CassandraStorage zipkin2.storage.cassandra.CassandraStorage.build()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "static CqlSession zipkin2.storage.cassandra.DefaultSessionFactory.buildSession(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/SessionBuilder.java": [
                    "public static CqlSession zipkin2.storage.cassandra.internal.SessionBuilder.buildSession( String contactPoints, String localDc, Map<DriverOption, Integer> poolingOptions, @Nullable AuthProvider authProvider, boolean useSsl )"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "9bb0f3da6a34c06ccd272736877404e4ed0be54e",
        "previous_commit": "f47e930e3277de483ea15ab50985957c82c49d8a",
        "date": 1568861814,
        "releases": {
            "previous": "9bb0f3da6a34c06ccd272736877404e4ed0be54e",
            "next": "9bb0f3da6a34c06ccd272736877404e4ed0be54e"
        },
        "commit_message": "Adds Traces api for retrieving multiple traces at the same time\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9bb0f3da6a34c06ccd272736877404e4ed0be54e": {
                "zipkin-junit/src/main/java/zipkin2/junit/ZipkinRule.java": [
                    "public List<Span> zipkin2.junit.ZipkinRule.getTrace(String traceId)"
                ],
                "zipkin/src/main/java/zipkin2/storage/GroupByTraceId.java": [
                    "public List<List<Span>> zipkin2.storage.GroupByTraceId.map(List<Span> input)"
                ],
                "zipkin/src/main/java/zipkin2/storage/StrictTraceId.java": [
                    "public List<List<Span>> zipkin2.storage.StrictTraceId.map(List<List<Span>> input)",
                    "public String zipkin2.storage.StrictTraceId.toString()"
                ]
            },
            "f47e930e3277de483ea15ab50985957c82c49d8a": {
                "zipkin-junit/src/main/java/zipkin2/junit/ZipkinRule.java": [
                    "public List<Span> zipkin2.junit.ZipkinRule.getTrace(String traceId)"
                ],
                "zipkin/src/main/java/zipkin2/storage/GroupByTraceId.java": [
                    "public List<List<Span>> zipkin2.storage.GroupByTraceId.map(List<Span> input)"
                ],
                "zipkin/src/main/java/zipkin2/storage/StrictTraceId.java": [
                    "public List<List<Span>> zipkin2.storage.StrictTraceId.map(List<List<Span>> input)",
                    "public String zipkin2.storage.StrictTraceId.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2757975b33ac32a2fd4581460db866bbb8fb924b",
        "previous_commit": "c45b744038ecf92e5af44b983a7dec7a80d67a84",
        "date": 1482931973,
        "releases": {
            "previous": "2757975b33ac32a2fd4581460db866bbb8fb924b",
            "next": "2757975b33ac32a2fd4581460db866bbb8fb924b"
        },
        "commit_message": "Don't spam logs when RPC spans are in use. (#1459)\n\nAs mentionned in openzipkin/openzipkin.github.io#49, timestamp should be set on span originators.\r\nIn the case of a span sent from a mid-tier server (e.g. receiving a request from a instrumented service), it is not supposed to set the timestamp, leading to a log message when using cassandra as storage.\r\nThis log can be only wrote when the span is an originator. It is still trying to guess the correct timestamp to cope with non-compliant tracers.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2757975b33ac32a2fd4581460db866bbb8fb924b": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeSpan(long traceId, long timestamp, boolean isServerRecvSpan, String key, ByteBuffer span)",
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeSpan(Span span, TraceIdUDT traceId, boolean isServerRecvSpan, Long timestamp)"
                ]
            },
            "c45b744038ecf92e5af44b983a7dec7a80d67a84": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeSpan(long traceId, long timestamp, String key, ByteBuffer span)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)",
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeSpan(Span span, TraceIdUDT traceId, Long timestamp)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5905ba58013c493d750a46ef27167f682bd3f3ad",
        "previous_commit": "f35c0dd7fab4f3533840cdb79ecbd9efe9a24214",
        "date": 1479210346,
        "releases": {
            "previous": "5905ba58013c493d750a46ef27167f682bd3f3ad",
            "next": "5905ba58013c493d750a46ef27167f682bd3f3ad"
        },
        "commit_message": "Use default withSSL() settings for cassandra (#1401)\n\nConfigured via CASSANDRA_USE_SSL",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5905ba58013c493d750a46ef27167f682bd3f3ad": {
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/ZipkinCassandraStorageProperties.java": [
                    "public CassandraStorage.Builder zipkin.autoconfigure.storage.cassandra.ZipkinCassandraStorageProperties.toBuilder()"
                ],
                "zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin/autoconfigure/storage/cassandra3/ZipkinCassandra3StorageProperties.java": [
                    "public Builder zipkin.autoconfigure.storage.cassandra3.ZipkinCassandra3StorageProperties.toBuilder()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/SessionFactory.java": [
                    "static Cluster zipkin.storage.cassandra.Default.buildCluster(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/DefaultSessionFactory.java": [
                    "static Cluster zipkin.storage.cassandra3.DefaultSessionFactory.buildCluster(Cassandra3Storage cassandra)"
                ]
            },
            "f35c0dd7fab4f3533840cdb79ecbd9efe9a24214": {
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/ZipkinCassandraStorageProperties.java": [
                    "public CassandraStorage.Builder zipkin.autoconfigure.storage.cassandra.ZipkinCassandraStorageProperties.toBuilder()"
                ],
                "zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin/autoconfigure/storage/cassandra3/ZipkinCassandra3StorageProperties.java": [
                    "public Builder zipkin.autoconfigure.storage.cassandra3.ZipkinCassandra3StorageProperties.toBuilder()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/SessionFactory.java": [
                    "static Cluster zipkin.storage.cassandra.Default.buildCluster(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/DefaultSessionFactory.java": [
                    "static Cluster zipkin.storage.cassandra3.DefaultSessionFactory.buildCluster(Cassandra3Storage cassandra)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7e9855bcc26d3e5e7888be35c8d91b6cabeafe4d",
        "previous_commit": "31338b52714c2dbb989b07beaa58cf7957d12e8c",
        "date": 1564744407,
        "releases": {
            "previous": "7e9855bcc26d3e5e7888be35c8d91b6cabeafe4d",
            "next": "7e9855bcc26d3e5e7888be35c8d91b6cabeafe4d"
        },
        "commit_message": "Unhooks protocols that are usually synchronous from storage commands (#2729)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7e9855bcc26d3e5e7888be35c8d91b6cabeafe4d": {
                "zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java": [
                    "public void zipkin2.collector.Collector.accept(List<Span> spans, Callback<Void> callback)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinGrpcCollector.java": [
                    "protected CompletableFuture<ByteBuf> zipkin2.server.internal.ZipkinGrpcCollector.handleMessage(ByteBuf bytes)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracedCall.java": [
                    "public void zipkin2.server.internal.brave.TracedCall<V>.enqueue(Callback<V> callback)"
                ]
            },
            "31338b52714c2dbb989b07beaa58cf7957d12e8c": {
                "zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java": [
                    "public void zipkin2.collector.Collector.accept(List<Span> spans, Callback<Void> callback)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinGrpcCollector.java": [
                    "protected CompletableFuture<ByteBuf> zipkin2.server.internal.ZipkinGrpcCollector.handleMessage(ByteBuf bytes)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracedCall.java": [
                    "public void zipkin2.server.internal.brave.TracedCall<V>.enqueue(Callback<V> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "38a0e73734885ee5b2c25f4e8d05b1a6700ae471",
        "previous_commit": "2a55aa1c7a1d2fd82b148ed8ad166ff89e7a8b80",
        "date": 1557217142,
        "releases": {
            "previous": "38a0e73734885ee5b2c25f4e8d05b1a6700ae471",
            "next": "38a0e73734885ee5b2c25f4e8d05b1a6700ae471"
        },
        "commit_message": "Conditionally wraps in Elasticsearch index template based on version (#2562)\n\nElasticsearch 7.x no longer wraps mappings by top-level type. They have\r\na compatibility mode, but it complicates secondary templates as noticed\r\nby @chefky\r\n\r\n> For my custom index issue in elasticsearch 7.0 -- I figured it out, but I think it does have an implication with the code. You are still creating the index template with the mapping type, which ElasticSearch has deprecated in 7.0. When I do a 'GET /_template/zipkin-span_template', the mapping type 'span' is removed, and so my updated version did not include the mapping type. I can only get it to work by including the mapping type 'span' in my updated index template, but I have to append 'includeTypeName=true' in the URL, which then results in a message from ElasticSearch indicating that this is deprecated and that they will not support this in the next major version. Do you also use 'includeTypeName=true' when creating the span index template in ElasticSearch? Because I tried to edit the source code to remove the mapping type, but I was getting this error: \"Malformed [mappings] section for type [dynamic_templates], should include an inner object describing the mapping\". I was able to replicate it in the Kibana dev tool if I explicitly pass in includeTypeName=true and omit the mapping type in my json.\r\n\r\nThis addresses the issue depending on the version of Elasticsearch in\r\nuse.\r\n\r\nFixes #2559",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "38a0e73734885ee5b2c25f4e8d05b1a6700ae471": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.indexSpans(BulkSpanIndexer indexer, List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "IndexTemplates zipkin2.elasticsearch.ElasticsearchStorage.ensureIndexTemplates()",
                    "HttpUrl zipkin2.elasticsearch.ElasticsearchStorage.buildUrl(HttpCall.Factory http, IndexTemplates templates, String type)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/HttpBulkIndexer.java": [
                    "void zipkin2.elasticsearch.internal.HttpBulkIndexer.writeIndexMetadata(String index, String typeName, @Nullable String id)"
                ]
            },
            "2a55aa1c7a1d2fd82b148ed8ad166ff89e7a8b80": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.indexSpans(BulkSpanIndexer indexer, List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "IndexTemplates zipkin2.elasticsearch.ElasticsearchStorage.ensureIndexTemplates()",
                    "HttpUrl zipkin2.elasticsearch.ElasticsearchStorage.buildUrl(HttpCall.Factory http, IndexTemplates templates, String type)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/HttpBulkIndexer.java": [
                    "void zipkin2.elasticsearch.internal.HttpBulkIndexer.writeIndexMetadata(String index, String typeName, @Nullable String id)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7d4b89d29afde8187c974f2b1989b06a2912036c",
        "previous_commit": "f4f933d159834d6a383b15b0258670dcd13417ac",
        "date": 1511355505,
        "releases": {
            "previous": "7d4b89d29afde8187c974f2b1989b06a2912036c",
            "next": "7d4b89d29afde8187c974f2b1989b06a2912036c"
        },
        "commit_message": "Guard against long strings and byte arrays when encoding spans to thr\u2026 (#1809)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7d4b89d29afde8187c974f2b1989b06a2912036c": {
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public void zipkin.internal.ThriftCodec.write(Span value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Annotation value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Endpoint value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(BinaryAnnotation value, Buffer buffer)"
                ]
            },
            "f4f933d159834d6a383b15b0258670dcd13417ac": {
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public void zipkin.internal.ThriftCodec.write(Span value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Annotation value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(Endpoint value, Buffer buffer)",
                    "public void zipkin.internal.ThriftCodec.write(BinaryAnnotation value, Buffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bcf3b65ce87ae3e3a2c1fcf6d682de6a12a17db3",
        "previous_commit": "ea5e01354f2023141b4c6ac5a752d57c2c58f519",
        "date": 1468996813,
        "releases": {
            "previous": "bcf3b65ce87ae3e3a2c1fcf6d682de6a12a17db3",
            "next": "bcf3b65ce87ae3e3a2c1fcf6d682de6a12a17db3"
        },
        "commit_message": "Adds trace id to DependencyLinkSpan to aid in debugging\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bcf3b65ce87ae3e3a2c1fcf6d682de6a12a17db3": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkSpanIterator.java": [
                    "public DependencyLinkSpan zipkin.storage.mysql.DependencyLinkSpanIterator.next()"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinkSpan.java": [
                    "public static DependencyLinkSpan zipkin.internal.DependencyLinkSpan.from(Span s)",
                    "public DependencyLinkSpan zipkin.internal.DependencyLinkSpan.build()",
                    "public String zipkin.internal.DependencyLinkSpan.toString()"
                ]
            },
            "ea5e01354f2023141b4c6ac5a752d57c2c58f519": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkSpanIterator.java": [
                    "public DependencyLinkSpan zipkin.storage.mysql.DependencyLinkSpanIterator.next()"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinkSpan.java": [
                    "public static DependencyLinkSpan zipkin.internal.DependencyLinkSpan.from(Span s)",
                    "public DependencyLinkSpan zipkin.internal.DependencyLinkSpan.build()",
                    "public String zipkin.internal.DependencyLinkSpan.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a69877bf684a35ff3af0970687bbea115bc7fa31",
        "previous_commit": "ec41317a0ebd4a4057082f50fe0c8385611fe18f",
        "date": 1461756506,
        "releases": {
            "previous": "a69877bf684a35ff3af0970687bbea115bc7fa31",
            "next": "a69877bf684a35ff3af0970687bbea115bc7fa31"
        },
        "commit_message": "Tweaks codec performance and adds benchmarks\n\nThis adds benchmarks around codecs, mainly to ensure the bundled\n`Span.Codec` is competitive.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a69877bf684a35ff3af0970687bbea115bc7fa31": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "static <T> byte[] zipkin.internal.JsonCodec.writeList(JsonAdapter<T> adapter, List<T> values)",
                    "static <T> List<T> zipkin.internal.JsonCodec.readList(JsonAdapter<T> adapter, byte[] bytes)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "static <T> void zipkin.internal.ThriftCodec.writeList(ThriftWriter<T> writer, List<T> value, Buffer buffer)",
                    "static <T> List<T> zipkin.internal.ThriftCodec.readList(ThriftReader<T> reader, ByteBuffer bytes)"
                ]
            },
            "ec41317a0ebd4a4057082f50fe0c8385611fe18f": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "static <T> byte[] zipkin.internal.JsonCodec.writeList(JsonAdapter<T> adapter, List<T> values)",
                    "static <T> List<T> zipkin.internal.JsonCodec.readList(JsonAdapter<T> adapter, byte[] bytes)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "static <T> void zipkin.internal.ThriftCodec.writeList(ThriftWriter<T> writer, List<T> value, Buffer buffer)",
                    "static <T> List<T> zipkin.internal.ThriftCodec.readList(ThriftReader<T> reader, ByteBuffer bytes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "909ee5ff1421c752b611f2ed8817c3297751f3f8",
        "previous_commit": "136402b3dabfd55ff7c4136711c4366a8ba835c4",
        "date": 1565404657,
        "releases": {
            "previous": "909ee5ff1421c752b611f2ed8817c3297751f3f8",
            "next": "909ee5ff1421c752b611f2ed8817c3297751f3f8"
        },
        "commit_message": "Updates to latest armeria (#2743)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "909ee5ff1421c752b611f2ed8817c3297751f3f8": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingConfiguration.java": [
                    "Reporter<Span> zipkin2.server.internal.brave.TracingConfiguration.reporter(BeanFactory factory, SelfTracingProperties config)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/InitialEndpointSupplier.java": [
                    "public List<Endpoint> zipkin2.server.internal.elasticsearch.InitialEndpointSupplier.endpoints()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "Endpoint zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.getEndpoint()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledStorageComponent.java": [
                    "public void zipkin2.server.internal.throttle.ThrottledStorageComponent.run()"
                ]
            },
            "136402b3dabfd55ff7c4136711c4366a8ba835c4": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingConfiguration.java": [
                    "Reporter<Span> zipkin2.server.internal.brave.TracingConfiguration.reporter(BeanFactory factory, SelfTracingProperties config)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/InitialEndpointSupplier.java": [
                    "public List<Endpoint> zipkin2.server.internal.elasticsearch.InitialEndpointSupplier.endpoints()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "Endpoint zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.getEndpoint()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledStorageComponent.java": [
                    "public void zipkin2.server.internal.throttle.ThrottledStorageComponent.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f47ac65bad7ea2442b47b368b166d63f527ed3ef",
        "previous_commit": "3ad789741688699a55a4a9404c851c8976ef6383",
        "date": 1510280659,
        "releases": {
            "previous": "f47ac65bad7ea2442b47b368b166d63f527ed3ef",
            "next": "f47ac65bad7ea2442b47b368b166d63f527ed3ef"
        },
        "commit_message": "Exposes Call.Base and makes toString pretty\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f47ac65bad7ea2442b47b368b166d63f527ed3ef": {
                "zipkin2/src/main/java/zipkin2/Call.java": [
                    "public final V zipkin2.Call<V>.execute()",
                    "public final boolean zipkin2.Call<V>.isCanceled()",
                    "public final void zipkin2.Call<V>.cancel()",
                    "public final void zipkin2.Call<V>.enqueue(Callback<V> callback)"
                ]
            },
            "3ad789741688699a55a4a9404c851c8976ef6383": {
                "zipkin2/src/main/java/zipkin2/Call.java": [
                    "public V zipkin2.Call<V>.execute()",
                    "public boolean zipkin2.Call<V>.isCanceled()",
                    "public void zipkin2.Call<V>.enqueue(Callback<V> callback)",
                    "public void zipkin2.Call<V>.cancel()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3a8f9cba0c3b4272a636b6b0f487ca5d2ebf7953",
        "previous_commit": "64266621df25280bb4d5d455f3ef3e3b6a51a44a",
        "date": 1478563204,
        "releases": {
            "previous": "3a8f9cba0c3b4272a636b6b0f487ca5d2ebf7953",
            "next": "3a8f9cba0c3b4272a636b6b0f487ca5d2ebf7953"
        },
        "commit_message": "Fixes tests not run due to bad naming convention (#1395)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3a8f9cba0c3b4272a636b6b0f487ca5d2ebf7953": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java": [
                    "public void zipkin.server.ZipkinHttpCollector.onSuccess(@Nullable Void value)",
                    "public void zipkin.server.ZipkinHttpCollector.onError(Throwable t)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java": [
                    "public String zipkin.server.ZipkinQueryApiV1.getTrace(@PathVariable String traceId, WebRequest request)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "RuntimeException zipkin.collector.Collector.doError(String message, Throwable e)"
                ]
            },
            "64266621df25280bb4d5d455f3ef3e3b6a51a44a": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java": [
                    "public void zipkin.server.ZipkinHttpCollector.onSuccess(@Nullable Void value)",
                    "public void zipkin.server.ZipkinHttpCollector.onError(Throwable t)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java": [
                    "public byte[] zipkin.server.ZipkinQueryApiV1.getTrace(@PathVariable String traceId, WebRequest request)"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "RuntimeException zipkin.collector.Collector.doError(String message, Throwable e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "097fc9d392e470bd2288ced071280ba83bb0d885",
        "previous_commit": "25125079e8bf4b4cf4dfdcaf25eb9aec63a3b1ee",
        "date": 1557148707,
        "releases": {
            "previous": "097fc9d392e470bd2288ced071280ba83bb0d885",
            "next": "097fc9d392e470bd2288ced071280ba83bb0d885"
        },
        "commit_message": "Removes support for Elasticsearch 2.x\n\nAs discussed, this removes support for Elasticsearch 2.x\n\nSee https://lists.apache.org/thread.html/ac01ebd12b6ecaac6496e146570652a3e804d45d9b9d2100001f5c75@%3Cdev.zipkin.apache.org%3E\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "097fc9d392e470bd2288ced071280ba83bb0d885": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "private String zipkin2.elasticsearch.VersionSpecificTemplates.versionSpecificSpanIndexTemplate(float version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.spanIndexTemplate()",
                    "public Float zipkin2.elasticsearch.VersionSpecificTemplates.convert(BufferedSource content)",
                    "private String zipkin2.elasticsearch.VersionSpecificTemplates.versionSpecificAutocompleteIndexTemplate(float version)"
                ]
            },
            "25125079e8bf4b4cf4dfdcaf25eb9aec63a3b1ee": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "private String zipkin2.elasticsearch.VersionSpecificTemplates.versionSpecificSpanIndexTemplate(float version)",
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.spanIndexTemplate()",
                    "public Float zipkin2.elasticsearch.VersionSpecificTemplates.convert(BufferedSource content)",
                    "private String zipkin2.elasticsearch.VersionSpecificTemplates.versionSpecificAutocompleteIndexTemplate(float version)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9a5a5d09184390040127316b6d309ac68af62575",
        "previous_commit": "6f6cb328107ba0e77494c80ebca51165d97caa9c",
        "date": 1557555384,
        "releases": {
            "previous": "9a5a5d09184390040127316b6d309ac68af62575",
            "next": "9a5a5d09184390040127316b6d309ac68af62575"
        },
        "commit_message": "Updates libraries and link references to ASF Zipkin\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9a5a5d09184390040127316b6d309ac68af62575": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeInboundHandler.java": [
                    "void zipkin2.collector.scribe.ScribeInboundHandler.maybeReadPayload(ChannelHandlerContext ctx)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/MetricsHealthController.java": [
                    "public HttpResponse zipkin2.server.internal.MetricsHealthController.getHealth()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "AggregatedHttpMessage zipkin2.server.internal.ZipkinQueryApiV2.maybeCacheNames(boolean shouldCacheControl, List<String> values)",
                    "static AggregatedHttpMessage zipkin2.server.internal.ZipkinQueryApiV2.jsonResponse(byte[] body)"
                ]
            },
            "6f6cb328107ba0e77494c80ebca51165d97caa9c": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeInboundHandler.java": [
                    "void zipkin2.collector.scribe.ScribeInboundHandler.maybeReadPayload(ChannelHandlerContext ctx)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/MetricsHealthController.java": [
                    "public HttpResponse zipkin2.server.internal.MetricsHealthController.getHealth()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "AggregatedHttpMessage zipkin2.server.internal.ZipkinQueryApiV2.maybeCacheNames(boolean shouldCacheControl, List<String> values)",
                    "static AggregatedHttpMessage zipkin2.server.internal.ZipkinQueryApiV2.jsonResponse(byte[] body)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d40b21ede063876134ee3868d4e42b79c04704d3",
        "previous_commit": "7bbc94f6f2eb400624fa97e471a9a546de7e2eda",
        "date": 1468738350,
        "releases": {
            "previous": "d40b21ede063876134ee3868d4e42b79c04704d3",
            "next": "d40b21ede063876134ee3868d4e42b79c04704d3"
        },
        "commit_message": "Allows dependency link jobs to be replayed\n\nBefore, the experimental Elasticsearch dependency link query would\ndouble-count as there was no way to know if there were duplicates or\nnot. This does two things to address it:\n\n* Sets the id of a dependency-link document to its parent-child\n  * This makes documents overwritable in a bucket\n* Moves summing of links from an aggregation query to client-side\n  * This logic is simpler and matches the Cassandra implementation\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d40b21ede063876134ee3868d4e42b79c04704d3": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public List<DependencyLink> zipkin.storage.cassandra.CassandraSpanStore.apply(ResultSet rs)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public List<DependencyLink> zipkin.storage.elasticsearch.ElasticsearchSpanStore.apply(SearchResponse response)",
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getDependencies(long endMillis, @Nullable Long lookback)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchStorage.java": [
                    "void zipkin.storage.elasticsearch.ElasticsearchStorage.writeDependencyLinks(List<DependencyLink> links, long timestampMillis)"
                ]
            },
            "7bbc94f6f2eb400624fa97e471a9a546de7e2eda": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public List<DependencyLink> zipkin.storage.cassandra.CassandraSpanStore.apply(ResultSet rs)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public List<DependencyLink> zipkin.storage.elasticsearch.ElasticsearchSpanStore.apply(SearchResponse response)",
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getDependencies(long endMillis, @Nullable Long lookback)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchStorage.java": [
                    "void zipkin.storage.elasticsearch.ElasticsearchStorage.writeDependencyLinks(List<DependencyLink> links, long timestampMillis)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8423afc56c0bdc4bfca15ec43b5add974c383405",
        "previous_commit": "c6578423fef1853916df6006ebe3685c3113ec07",
        "date": 1566454129,
        "releases": {
            "previous": "8423afc56c0bdc4bfca15ec43b5add974c383405",
            "next": "8423afc56c0bdc4bfca15ec43b5add974c383405"
        },
        "commit_message": "Define an interface for supplying a request to give call sites more c\u2026 (#2761)\n\n* Define an interface for supplying a request to give call sites more control over how the request is created (e.g., using pooled buffers or streaming).\r\n\r\n* Don't serialize if request aborted.\r\n\r\n* Refactor\r\n\r\n* Test\r\n\r\n* Fix\r\n\r\n* Better test\r\n\r\n* javadoc drifted\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8423afc56c0bdc4bfca15ec43b5add974c383405": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BulkCallBuilder.java": [
                    "public HttpCall<Void> zipkin2.elasticsearch.internal.BulkCallBuilder.build()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "V zipkin2.elasticsearch.internal.client.HttpCall<V>.parseResponse(AggregatedHttpResponse response, BodyConverter<V> bodyConverter)",
                    "CompletableFuture<AggregatedHttpResponse> zipkin2.elasticsearch.internal.client.HttpCall<V>.sendRequest()",
                    "public <V> HttpCall<V> zipkin2.elasticsearch.internal.client.HttpCall<V>.newCall( AggregatedHttpRequest request, BodyConverter<V> bodyConverter, String name)"
                ]
            },
            "c6578423fef1853916df6006ebe3685c3113ec07": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BulkCallBuilder.java": [
                    "public HttpCall<Void> zipkin2.elasticsearch.internal.BulkCallBuilder.build()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "V zipkin2.elasticsearch.internal.client.HttpCall<V>.parseResponse(AggregatedHttpResponse response, BodyConverter<V> bodyConverter)",
                    "CompletableFuture<AggregatedHttpResponse> zipkin2.elasticsearch.internal.client.HttpCall<V>.sendRequest()",
                    "public <V> HttpCall<V> zipkin2.elasticsearch.internal.client.HttpCall<V>.newCall( AggregatedHttpRequest request, BodyConverter<V> bodyConverter, String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e03a4f039eb19fd5f0176cb3d3f5b00d73427e64",
        "previous_commit": "14a2528a9d7719e960dcb7499a353aba98cb68a1",
        "date": 1554280670,
        "releases": {
            "previous": "e03a4f039eb19fd5f0176cb3d3f5b00d73427e64",
            "next": "e03a4f039eb19fd5f0176cb3d3f5b00d73427e64"
        },
        "commit_message": "Polishes MySQL schema and resurrects test initialization (#2483)\n\nI noticed the init scripts in our docker mysql tests were never invoked.\r\n\r\nWhen fixing them, I noticed some cases where we were using more\r\ncomplicated unique key + index statements when we had no nullable fields\r\ndeclared. Particularly, this caused a syntax glitch in mariadb on the\r\ndependencies table. Easiest way out was to switch these to primary keys.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e03a4f039eb19fd5f0176cb3d3f5b00d73427e64": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinDependencies.java": [
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinDependencies.getKeys()",
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinDependencies.getIndexes()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()",
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getKeys()"
                ]
            },
            "14a2528a9d7719e960dcb7499a353aba98cb68a1": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinDependencies.java": [
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinDependencies.getKeys()",
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinDependencies.getIndexes()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()",
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getKeys()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b7d50774151d8390acf4cd9ba07ab48832f3b340",
        "previous_commit": "c5bb8765f0a05977d7661ca51aff6e5d93f1bfa4",
        "date": 1473832690,
        "releases": {
            "previous": "b7d50774151d8390acf4cd9ba07ab48832f3b340",
            "next": "b7d50774151d8390acf4cd9ba07ab48832f3b340"
        },
        "commit_message": "Lowers scope of Elasticsearch to code used in prod (#1295)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b7d50774151d8390acf4cd9ba07ab48832f3b340": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchStorage.java": [
                    "protected ElasticsearchSpanStore zipkin.storage.elasticsearch.ElasticsearchStorage.computeGuavaSpanStore()",
                    "public CheckResult zipkin.storage.elasticsearch.ElasticsearchStorage.check()",
                    "protected ElasticsearchSpanConsumer zipkin.storage.elasticsearch.ElasticsearchStorage.computeGuavaSpanConsumer()",
                    "void zipkin.storage.elasticsearch.ElasticsearchStorage.clear()"
                ]
            },
            "c5bb8765f0a05977d7661ca51aff6e5d93f1bfa4": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchStorage.java": [
                    "protected ElasticsearchSpanStore zipkin.storage.elasticsearch.ElasticsearchStorage.computeGuavaSpanStore()",
                    "public CheckResult zipkin.storage.elasticsearch.ElasticsearchStorage.check()",
                    "protected ElasticsearchSpanConsumer zipkin.storage.elasticsearch.ElasticsearchStorage.computeGuavaSpanConsumer()",
                    "void zipkin.storage.elasticsearch.ElasticsearchStorage.clear()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "81a36c4d3910badb80a9b4af5a4f66ae7acfb7f5",
        "previous_commit": "58f4aa8a19f7a08a360373cf81dfed81cb99f6d3",
        "date": 1554871265,
        "releases": {
            "previous": "81a36c4d3910badb80a9b4af5a4f66ae7acfb7f5",
            "next": "81a36c4d3910badb80a9b4af5a4f66ae7acfb7f5"
        },
        "commit_message": "Refactors index parsing of cassandra-v1 to make change easier to see (#2492)\n\nIn #2484, we will stop indexing the remote service conflated with the\r\nlocal service. This refactors the index parsing logic to allow that\r\nchange to be visible. This also corrects for some drift noticed while\r\nrefactoring.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "81a36c4d3910badb80a9b4af5a4f66ae7acfb7f5": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.v1.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/PartitionKeyToTraceId.java": [
                    "public boolean zipkin2.storage.cassandra.v1.PartitionKeyToTraceId.equals(Object o)",
                    "public int zipkin2.storage.cassandra.v1.PartitionKeyToTraceId.hashCode()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Schema.java": [
                    "static boolean zipkin2.storage.cassandra.v1.Schema.hasUpgrade2_autocompleteTags(KeyspaceMetadata keyspaceMetadata)"
                ]
            },
            "58f4aa8a19f7a08a360373cf81dfed81cb99f6d3": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.v1.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/PartitionKeyToTraceId.java": [
                    "public boolean zipkin2.storage.cassandra.v1.PartitionKeyToTraceId.equals(Object o)",
                    "public int zipkin2.storage.cassandra.v1.PartitionKeyToTraceId.hashCode()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Schema.java": [
                    "static boolean zipkin2.storage.cassandra.v1.Schema.hasUpgrade2_autocompleteTags(KeyspaceMetadata keyspaceMetadata)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "45fa8ea2f1dcbf1bbbe9a65e9e05879fe7799f73",
        "previous_commit": "8e16134aba4db96529c2228aafc432a84126377f",
        "date": 1584080693,
        "releases": {
            "previous": "45fa8ea2f1dcbf1bbbe9a65e9e05879fe7799f73",
            "next": "45fa8ea2f1dcbf1bbbe9a65e9e05879fe7799f73"
        },
        "commit_message": "Use blocking executor for delegating span collection in scribe collec\u2026 (#3029)\n\n* Use blocking executor for delegating span collection in scribe collector.\r\n\r\n* Revert unnecessary\r\n\r\n* Cleanup\r\n\r\n* Fix test and reduce boilerplate by letting Netty handle deframing.\r\n\r\n* Licenses\r\n\r\n* Switch to jupiter since RepeatedTest helped debug flakiness and wait for storage write.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "45fa8ea2f1dcbf1bbbe9a65e9e05879fe7799f73": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/NettyScribeServer.java": [
                    "void zipkin2.collector.scribe.NettyScribeServer.start()",
                    "protected void zipkin2.collector.scribe.NettyScribeServer.initChannel(SocketChannel ch)"
                ],
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeInboundHandler.java": [
                    "void zipkin2.collector.scribe.ScribeInboundHandler.release()"
                ],
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeSpanConsumer.java": [
                    "public void zipkin2.collector.scribe.ScribeSpanConsumer.Log(List<LogEntry> messages, AsyncMethodCallback<ResultCode> resultHandler)"
                ]
            },
            "8e16134aba4db96529c2228aafc432a84126377f": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/NettyScribeServer.java": [
                    "void zipkin2.collector.scribe.NettyScribeServer.start()",
                    "protected void zipkin2.collector.scribe.NettyScribeServer.initChannel(SocketChannel ch)"
                ],
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeInboundHandler.java": [
                    "void zipkin2.collector.scribe.ScribeInboundHandler.release()"
                ],
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeSpanConsumer.java": [
                    "public void zipkin2.collector.scribe.ScribeSpanConsumer.Log(List<LogEntry> messages, AsyncMethodCallback<ResultCode> resultHandler)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7ca650db33407bc5f95218750de36ac89e91c842",
        "previous_commit": "93163b1fc9f4e6c0429c74a822d53709e1515abb",
        "date": 1546510494,
        "releases": {
            "previous": "7ca650db33407bc5f95218750de36ac89e91c842",
            "next": "7ca650db33407bc5f95218750de36ac89e91c842"
        },
        "commit_message": "Adds Elasticsearch support for Autocomplete tags (#2333)\n\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7ca650db33407bc5f95218750de36ac89e91c842": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.indexSpans(BulkSpanIndexer indexer, List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "IndexTemplates zipkin2.elasticsearch.ElasticsearchStorage.ensureIndexTemplates()",
                    "public static Builder zipkin2.elasticsearch.ElasticsearchStorage.newBuilder(OkHttpClient client)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "IndexTemplates zipkin2.elasticsearch.VersionSpecificTemplates.get(HttpCall.Factory callFactory)"
                ]
            },
            "93163b1fc9f4e6c0429c74a822d53709e1515abb": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "void zipkin2.elasticsearch.ElasticsearchSpanConsumer.indexSpans(BulkSpanIndexer indexer, List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "IndexTemplates zipkin2.elasticsearch.ElasticsearchStorage.ensureIndexTemplates()",
                    "public static Builder zipkin2.elasticsearch.ElasticsearchStorage.newBuilder(OkHttpClient client)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "IndexTemplates zipkin2.elasticsearch.VersionSpecificTemplates.get(HttpCall.Factory callFactory)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "10b855231a6736552cf1e01064fdea3afa9704bc",
        "previous_commit": "b2e3425c02b49c36532d08a953f32aff2a2fe6ac",
        "date": 1478318497,
        "releases": {
            "previous": "10b855231a6736552cf1e01064fdea3afa9704bc",
            "next": "10b855231a6736552cf1e01064fdea3afa9704bc"
        },
        "commit_message": "Revert \"Use span name table instead of materialized view (#1374)\"\n\nThis reverts #1374 and associated cleanup as the tests are failing.\nIt wasn't noticed earlier that circleci wasn't running cassandra3\ntests!\n\nhttps://circleci.com/gh/openzipkin/zipkin/374\n\nThis reverts commit 64abfdd7b6d0da4339bef6e437d1c16dac487746.\nThis reverts commit f9c7af10860b5e9776dbe7de65f21842cfa6f522.\nThis reverts commit b2e3425c02b49c36532d08a953f32aff2a2fe6ac.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "10b855231a6736552cf1e01064fdea3afa9704bc": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Cassandra3Storage.java": [
                    "void zipkin.storage.cassandra3.Cassandra3Storage.clear()"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.apply(Collection<BigInteger> traceIds)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getTraces(final QueryRequest request)"
                ]
            },
            "b2e3425c02b49c36532d08a953f32aff2a2fe6ac": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Cassandra3Storage.java": [
                    "void zipkin.storage.cassandra3.Cassandra3Storage.clear()"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.apply(Collection<BigInteger> traceIds)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getTraces(final QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "57dc2ec9c65fe6144e401c0c933b4400463a69df",
        "previous_commit": "d770f31852a6f7c1b7ea08044a192e56ff05da6e",
        "date": 1493705301,
        "releases": {
            "previous": "57dc2ec9c65fe6144e401c0c933b4400463a69df",
            "next": "57dc2ec9c65fe6144e401c0c933b4400463a69df"
        },
        "commit_message": "Helps tracers be more safe about IP Addresses (#1580)\n\nBefore, tracers including Brave and Finagle blindly assumed addresses\r\nand strings were IPv4. While that's usually the case, it can lead to\r\nvery late problems, such as runtime exceptions.\r\n\r\nThis adds a utility to encourage safe parsing practice of potentially\r\nnull inputs. By re-using code from guava, we can safely parse IP\r\nliterals as well, avoiding troublesome IP from name service lookups.\r\n\r\nEx. if your input is an `HttpServletRequest`, the following is safe:\r\n```java\r\nif (!builder.parseIp(input.getHeader(\"X-Forwarded-For\"))) {\r\n  builder.parseIp(input.getRemoteAddr());\r\n}\r\n```",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "57dc2ec9c65fe6144e401c0c933b4400463a69df": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Schema.java": [
                    "private Endpoint zipkin.storage.cassandra3.Schema.toEndpoint()"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public Endpoint zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/Endpoint.java": [
                    "public Builder zipkin.Endpoint.port(int port)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public Endpoint zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ]
            },
            "d770f31852a6f7c1b7ea08044a192e56ff05da6e": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Schema.java": [
                    "private Endpoint zipkin.storage.cassandra3.Schema.toEndpoint()"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public Endpoint zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/Endpoint.java": [
                    "public Builder zipkin.Endpoint.port(int port)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public Endpoint zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ac0ba02e9f43bc1125c8bfad0b3de14495c709f3",
        "previous_commit": "65e7db8921d7c2b2a7421a1be1d7e85c224b4f21",
        "date": 1503802219,
        "releases": {
            "previous": "ac0ba02e9f43bc1125c8bfad0b3de14495c709f3",
            "next": "ac0ba02e9f43bc1125c8bfad0b3de14495c709f3"
        },
        "commit_message": "Adds v2 Call interface based on okhttp and retrofit (#1705)\n\nIn Zipkin v1, we had a pair of interfaces, like `SpanConsumer` and\r\n`AsyncSpanConsumer`.\r\n\r\nFor example, this would define the same thing twice:\r\n\r\n```java\r\nvoid accept(List<Span> spans);\r\n\r\n// and\r\n\r\nvoid accept(List<Span> spans, Callback<Void> spans);\r\n```\r\n\r\nin v2, it looks like this (inspired by OkHttp's call):\r\n\r\n```java\r\nCall<Void> accept(List<Span> spans);\r\n\r\n// then make a call like this..\r\ncall = spanConsumer.accept(spans);\r\n\r\n// to do a blocking call..\r\ncall.execute();\r\n\r\n// to do an async call..\r\ncall.enqueue(callback);\r\n\r\n// to cancel\r\ncall.cancel();\r\n```\r\n\r\nThe important part of this design is that it reduces the redundant\r\ninterfaces. Also, libraries like retrofit prove that this design is\r\ncompatible with other async abstractions like guava or rxjava.\r\n\r\nWe end up making less work for users and implementors at the cost of an\r\nintermediary type: Call.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ac0ba02e9f43bc1125c8bfad0b3de14495c709f3": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java": [
                    "HttpCall<Void> zipkin.storage.elasticsearch.http.HttpBulkIndexer.newCall()"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/internal/client/HttpCall.java": [
                    "public <V> HttpCall<V> zipkin.storage.elasticsearch.http.internal.client.HttpCall<V>.newCall(Request request, BodyConverter<V> bodyConverter)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2Collector.java": [
                    "protected void zipkin.internal.V2Collector.record(List<Span> sampled, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2StorageComponent.java": [
                    "public void zipkin.internal.V2StorageComponent.accept(List<zipkin.Span> spans, Callback<Void> callback)"
                ]
            },
            "65e7db8921d7c2b2a7421a1be1d7e85c224b4f21": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java": [
                    "void zipkin.storage.elasticsearch.http.HttpBulkIndexer.execute(Callback<Void> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/internal/client/HttpCall.java": [
                    "public <V> HttpCall<V> zipkin.storage.elasticsearch.http.internal.client.HttpCall<V>.newCall(Request request, BodyConverter<V> bodyConverter)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2Collector.java": [
                    "protected void zipkin.internal.V2Collector.record(List<Span> sampled, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2StorageComponent.java": [
                    "public void zipkin.internal.V2StorageComponent.accept(List<zipkin.Span> spans, Callback<Void> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4dc19291a409ee59c4a9249babc5fe2044e4caf4",
        "previous_commit": "d70fce997275fcbd65620344da4d3fc54c661080",
        "date": 1473677128,
        "releases": {
            "previous": "4dc19291a409ee59c4a9249babc5fe2044e4caf4",
            "next": "4dc19291a409ee59c4a9249babc5fe2044e4caf4"
        },
        "commit_message": "Renders client-originated traces in the dependencies diagram (#1293)\n\nMost root spans have uninstrumented clients. This change allows\r\ninstrumented clients to appear in the dependencies view. Particularly,\r\nthis looks for a \"cs\" annotation.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4dc19291a409ee59c4a9249babc5fe2044e4caf4": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkSpanIterator.java": [
                    "void zipkin.storage.mysql.DependencyLinkSpanIterator.parseClientAndServerNames(DependencyLinkSpan.Builder span, String key, String value)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.aggregateDependencies(long endTs, @Nullable Long lookback, Connection conn)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinkSpan.java": [
                    "public static DependencyLinkSpan zipkin.internal.DependencyLinkSpan.from(Span s)",
                    "public DependencyLinkSpan zipkin.internal.DependencyLinkSpan.build()"
                ]
            },
            "d70fce997275fcbd65620344da4d3fc54c661080": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkSpanIterator.java": [
                    "void zipkin.storage.mysql.DependencyLinkSpanIterator.parseClientAndServerNames(DependencyLinkSpan.Builder span, String key, String value)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.aggregateDependencies(long endTs, @Nullable Long lookback, Connection conn)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinkSpan.java": [
                    "public static DependencyLinkSpan zipkin.internal.DependencyLinkSpan.from(Span s)",
                    "public DependencyLinkSpan zipkin.internal.DependencyLinkSpan.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4dc7ea565da5d6d338eed1ff3acae5a1a7b3468b",
        "previous_commit": "08b699a2fcdb7ed5830d1421b47dd47c79b0ac44",
        "date": 1461229027,
        "releases": {
            "previous": "4dc7ea565da5d6d338eed1ff3acae5a1a7b3468b",
            "next": "4dc7ea565da5d6d338eed1ff3acae5a1a7b3468b"
        },
        "commit_message": "Teaches Sampler to test spans and adds ZooKeeper support\n\nIn practice, there are two purposes for sampler: instrumentation and\nstorage. This change allows a sampler to be used for both purposes.\n\nIt also makes the sampler extensible, so that the rate can be dynamic.\nWith this feature, it is possible to implement adaptive sampling via\nZooKeeper.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4dc7ea565da5d6d338eed1ff3acae5a1a7b3468b": {
                "zipkin/src/main/java/zipkin/InternalSamplingAsyncSpanConsumer.java": [
                    "public void zipkin.InternalSamplingAsyncSpanConsumer.accept(List<Span> input, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/Sampler.java": [
                    "public String zipkin.Sampler.toString()",
                    "public boolean zipkin.Sampler.isSampled(long traceId)",
                    "public static Sampler zipkin.Sampler.create(float rate)"
                ]
            },
            "08b699a2fcdb7ed5830d1421b47dd47c79b0ac44": {
                "zipkin/src/main/java/zipkin/InternalSamplingAsyncSpanConsumer.java": [
                    "public void zipkin.InternalSamplingAsyncSpanConsumer.accept(List<Span> input, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/Sampler.java": [
                    "public String zipkin.Sampler.toString()",
                    "public boolean zipkin.Sampler.isSampled(long traceId)",
                    "public static Sampler zipkin.Sampler.create(float rate)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "194fff881a542d35557f7cc5e9a5c9f4a1827438",
        "previous_commit": "8f56d231fc99bef81ea53d0e9f797d2468fbff2a",
        "date": 1478434884,
        "releases": {
            "previous": "194fff881a542d35557f7cc5e9a5c9f4a1827438",
            "next": "194fff881a542d35557f7cc5e9a5c9f4a1827438"
        },
        "commit_message": "Use span name table instead of materialized view (#1392)\n\n- This switches span name and service name lookups to use a table instead of a materialized view.  This change will fix #1360\r\n- Change limit logic to limit on a set of trace IDs instead of limiting on the provided collection first. In pracitce this didn't make a noticiable difference in the results but it seems like the intended logic.\r\n- update stress profiles for new span_name_by_service tables\r\n\r\nreferences:\r\n - https://github.com/openzipkin/zipkin/pull/1392\r\n - https://github.com/openzipkin/zipkin/issues/1360\r\n - https://github.com/openzipkin/zipkin/pull/1374",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "194fff881a542d35557f7cc5e9a5c9f4a1827438": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Cassandra3Storage.java": [
                    "void zipkin.storage.cassandra3.Cassandra3Storage.clear()"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.apply(Collection<BigInteger> traceIds)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getTraces(final QueryRequest request)"
                ]
            },
            "8f56d231fc99bef81ea53d0e9f797d2468fbff2a": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Cassandra3Storage.java": [
                    "void zipkin.storage.cassandra3.Cassandra3Storage.clear()"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.apply(Collection<BigInteger> traceIds)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getTraces(final QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b9c95c98a8ac253d8f96f17e06df98cb8948cf71",
        "previous_commit": "fc59316918938deb4744f93a26092bdb6dde2792",
        "date": 1462599014,
        "releases": {
            "previous": "b9c95c98a8ac253d8f96f17e06df98cb8948cf71",
            "next": "b9c95c98a8ac253d8f96f17e06df98cb8948cf71"
        },
        "commit_message": "Removes some complexity from cassandra span query conversion\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b9c95c98a8ac253d8f96f17e06df98cb8948cf71": {
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "public Collection<List<Span>> zipkin.cassandra.CassandraSpanStore.apply(ResultSet input)",
                    "public ListenableFuture<List<List<Span>>> zipkin.cassandra.CassandraSpanStore.apply(Set<Long> traceIds)",
                    "public ListenableFuture<List<Span>> zipkin.cassandra.CassandraSpanStore.getRawTrace(long traceId)"
                ]
            },
            "fc59316918938deb4744f93a26092bdb6dde2792": {
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "public ListenableFuture<List<List<Span>>> zipkin.cassandra.CassandraSpanStore.apply(Set<Long> traceIds)",
                    "public Map<Long, List<Span>> zipkin.cassandra.CassandraSpanStore.apply(ResultSet input)",
                    "public ListenableFuture<List<Span>> zipkin.cassandra.CassandraSpanStore.getRawTrace(long traceId)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ad1085a492fa955d2a5969ba903a5e4ac3ebe51b",
        "previous_commit": "02dc2f30806c16a8f6d1f76fa49569921456108a",
        "date": 1473467983,
        "releases": {
            "previous": "ad1085a492fa955d2a5969ba903a5e4ac3ebe51b",
            "next": "ad1085a492fa955d2a5969ba903a5e4ac3ebe51b"
        },
        "commit_message": "Removes duration query support from Cassandra 2.2 (#1283)\n\nThe duration query is unusable for most people, yet adds load every time\r\na span is written. It is also complicated code that hasn't improved much\r\nsince being written.\r\n\r\nThis removes this feature, punting to cassandra3 which can address the\r\nproblem more effectively via SASI indexing.\r\n\r\nFixes #1224\r\nObviates #1204",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ad1085a492fa955d2a5969ba903a5e4ac3ebe51b": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "public String zipkin.storage.cassandra.CassandraSpanStore.toString()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java": [
                    "void zipkin.storage.cassandra.CassandraStorage.clear()"
                ]
            },
            "02dc2f30806c16a8f6d1f76fa49569921456108a": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "public String zipkin.storage.cassandra.CassandraSpanStore.toString()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java": [
                    "void zipkin.storage.cassandra.CassandraStorage.clear()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0efe65a8685c01d2b09da20c94667fb2c07d21c4",
        "previous_commit": "37d26cc69bb4ac73ff8ce05719734dc766251740",
        "date": 1545113555,
        "releases": {
            "previous": "0efe65a8685c01d2b09da20c94667fb2c07d21c4",
            "next": "0efe65a8685c01d2b09da20c94667fb2c07d21c4"
        },
        "commit_message": "Adds MySQL support for Autocomplete tags and disabling search (#2334)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0efe65a8685c01d2b09da20c94667fb2c07d21c4": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLSpanStore.java": [
                    "public Call<List<String>> zipkin2.storage.mysql.v1.MySQLSpanStore.getServiceNames()",
                    "public Call<List<List<Span>>> zipkin2.storage.mysql.v1.MySQLSpanStore.getTraces(QueryRequest request)",
                    "public Call<List<String>> zipkin2.storage.mysql.v1.MySQLSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLStorage.java": [
                    "public SpanStore zipkin2.storage.mysql.v1.MySQLStorage.spanStore()"
                ]
            },
            "37d26cc69bb4ac73ff8ce05719734dc766251740": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLSpanStore.java": [
                    "public Call<List<String>> zipkin2.storage.mysql.v1.MySQLSpanStore.getServiceNames()",
                    "public Call<List<List<Span>>> zipkin2.storage.mysql.v1.MySQLSpanStore.getTraces(QueryRequest request)",
                    "public Call<List<String>> zipkin2.storage.mysql.v1.MySQLSpanStore.getSpanNames(String serviceName)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLStorage.java": [
                    "public SpanStore zipkin2.storage.mysql.v1.MySQLStorage.spanStore()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "79d55eac1c6cb4c237cfa852d7b0e5571dd38e18",
        "previous_commit": "8576bd57b9e2f0493185c61b1058c35ddf1c247f",
        "date": 1527761175,
        "releases": {
            "previous": "79d55eac1c6cb4c237cfa852d7b0e5571dd38e18",
            "next": "79d55eac1c6cb4c237cfa852d7b0e5571dd38e18"
        },
        "commit_message": "Adds Encoding.THRIFT constant and fixes v1 glitches\n\nThis is preparation work for a backported v1 thrift codec.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "79d55eac1c6cb4c237cfa852d7b0e5571dd38e18": {
                "zipkin2/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public boolean zipkin2.internal.JsonCodec.peekNull()"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V1SpanWriter.java": [
                    "public void zipkin2.internal.V1SpanWriter.write(Span value, Buffer b)",
                    "public int zipkin2.internal.V1SpanWriter.sizeInBytes(Span value)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V2SpanWriter.java": [
                    "public int zipkin2.internal.V2SpanWriter.sizeInBytes(Span value)"
                ]
            },
            "8576bd57b9e2f0493185c61b1058c35ddf1c247f": {
                "zipkin2/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public boolean zipkin2.internal.JsonCodec.peekNull()"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V1SpanWriter.java": [
                    "public void zipkin2.internal.V1SpanWriter.write(Span value, Buffer b)",
                    "public int zipkin2.internal.V1SpanWriter.sizeInBytes(Span value)"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V2SpanWriter.java": [
                    "public int zipkin2.internal.V2SpanWriter.sizeInBytes(Span value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f60c5a212447d7c835e15396c6147e28f9b35ece",
        "previous_commit": "76ea0fa3a64d75c030d977bacd9308542c3894bf",
        "date": 1513664908,
        "releases": {
            "previous": "f60c5a212447d7c835e15396c6147e28f9b35ece",
            "next": "f60c5a212447d7c835e15396c6147e28f9b35ece"
        },
        "commit_message": "Fixes mixed trace ID length in MySQL\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f60c5a212447d7c835e15396c6147e28f9b35ece": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLStorage.java": [
                    "protected Schema zipkin.storage.mysql.MySQLStorage.compute()"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/Schema.java": [
                    "Condition zipkin.storage.mysql.Schema.spanTraceIdCondition(SelectOffsetStep<? extends Record> traceIdQuery)",
                    "Condition zipkin.storage.mysql.Schema.annotationsTraceIdCondition(Set<Pair<Long>> traceIds)"
                ]
            },
            "76ea0fa3a64d75c030d977bacd9308542c3894bf": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLStorage.java": [
                    "protected Schema zipkin.storage.mysql.MySQLStorage.compute()"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/Schema.java": [
                    "Condition zipkin.storage.mysql.Schema.spanTraceIdCondition(SelectOffsetStep<? extends Record> traceIdQuery)",
                    "Condition zipkin.storage.mysql.Schema.annotationsTraceIdCondition(Set<Pair<Long>> traceIds)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ec3b446104e81c064cd523ab23ca42db3112db90",
        "previous_commit": "c3a2924069f86b384d1bb7b370a4a8fb9effd8ae",
        "date": 1564643294,
        "releases": {
            "previous": "ec3b446104e81c064cd523ab23ca42db3112db90",
            "next": "ec3b446104e81c064cd523ab23ca42db3112db90"
        },
        "commit_message": "Translate UnprocessedRequestException to RejectedExecutionException. (#2719)\n\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ec3b446104e81c064cd523ab23ca42db3112db90": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "protected V zipkin2.elasticsearch.internal.client.HttpCall<V>.doExecute()",
                    "CompletableFuture<AggregatedHttpResponse> zipkin2.elasticsearch.internal.client.HttpCall<V>.sendRequest()"
                ]
            },
            "c3a2924069f86b384d1bb7b370a4a8fb9effd8ae": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "protected V zipkin2.elasticsearch.internal.client.HttpCall<V>.doExecute()",
                    "CompletableFuture<AggregatedHttpResponse> zipkin2.elasticsearch.internal.client.HttpCall<V>.sendRequest()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8cbd0328979de377bfd1237f6a8c217e994d9990",
        "previous_commit": "7f6801286e2d7f19fc1198e7cdc4c6345e99b6fa",
        "date": 1564897170,
        "releases": {
            "previous": "8cbd0328979de377bfd1237f6a8c217e994d9990",
            "next": "8cbd0328979de377bfd1237f6a8c217e994d9990"
        },
        "commit_message": "Slight server cleanups around /health and self-tracing (#2732)\n\nBefore, we were ignoring the sampling rate during self-tracing by\r\nreturning a constant (true) as opposed to deferring to the rate-limited\r\nglobal sampler. Also, we put variables in the toString for\r\nInMemoryStorage which isn't helpful as spring caches it in the /health\r\nendpoint.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8cbd0328979de377bfd1237f6a8c217e994d9990": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingConfiguration.java": [
                    "HttpTracing zipkin2.server.internal.brave.TracingConfiguration.httpTracing(Tracing tracing)",
                    "public <Req> Boolean zipkin2.server.internal.brave.TracingConfiguration.trySample(HttpAdapter<Req, ?> adapter, Req request)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "public String zipkin2.storage.InMemoryStorage.toString()"
                ]
            },
            "7f6801286e2d7f19fc1198e7cdc4c6345e99b6fa": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingConfiguration.java": [
                    "HttpTracing zipkin2.server.internal.brave.TracingConfiguration.httpTracing(Tracing tracing)",
                    "public <Req> Boolean zipkin2.server.internal.brave.TracingConfiguration.trySample(HttpAdapter<Req, ?> adapter, Req request)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "public String zipkin2.storage.InMemoryStorage.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2a592074702f5b03334f765c6e8e59856d315001",
        "previous_commit": "6b8184a073d161c0d1f119e5e9d7715c9f8ae349",
        "date": 1510466177,
        "releases": {
            "previous": "2a592074702f5b03334f765c6e8e59856d315001",
            "next": "2a592074702f5b03334f765c6e8e59856d315001"
        },
        "commit_message": "change duration to be indexed as milliseconds\n\nthis will make the SASI on this column contain fewer distinct values, improving write performance.\nusers won't be discerning within milliseconds about searches they perform in the UI, in regards to the duration field.\n\nduration is always rounded up, so the result list would not skip any results. and duration in the span table would remain accurate to microseconds.\n\nref: https://github.com/openzipkin/zipkin/pull/1758#discussion_r143885341\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2a592074702f5b03334f765c6e8e59856d315001": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "void zipkin2.storage.cassandra.CassandraSpanConsumer.storeTraceServiceSpanName( String serviceName, String spanName, long timestamp_micro, Long duration, String traceId)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "ListenableFuture<Map<String, Long>> zipkin2.storage.cassandra.CassandraSpanStore.getTraceIdsByServiceNames(QueryRequest request)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "public static int zipkin2.storage.cassandra.CassandraUtil.durationIndexBucket(long ts_micro)"
                ]
            },
            "6b8184a073d161c0d1f119e5e9d7715c9f8ae349": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "void zipkin2.storage.cassandra.CassandraSpanConsumer.storeTraceServiceSpanName( String serviceName, String spanName, long timestamp_micro, Long duration, String traceId)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "ListenableFuture<Map<String, Long>> zipkin2.storage.cassandra.CassandraSpanStore.getTraceIdsByServiceNames(QueryRequest request)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "public static int zipkin2.storage.cassandra.CassandraUtil.durationIndexBucket(long ts_micro)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7f8367590ecd0fa7c13593b66dc5c32f164f4622",
        "previous_commit": "1cb1f19e888d7e76e46836fb9eb0ce546a9d382e",
        "date": 1463135550,
        "releases": {
            "previous": "7f8367590ecd0fa7c13593b66dc5c32f164f4622",
            "next": "7f8367590ecd0fa7c13593b66dc5c32f164f4622"
        },
        "commit_message": "Extracts Component, which has a check() method for determining health\n\nThis pulls out an interface: Component, which has the ability to report\nits health via a `check()` method. This is ported to all storage and\ncollector components. Notably, this also fixes a crash when Kafka isn't\nrunning when zipkin was started.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7f8367590ecd0fa7c13593b66dc5c32f164f4622": {
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaCollector.java": [
                    "protected ExecutorService zipkin.collector.kafka.KafkaCollector.compute()"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "KafkaCollector zipkin.server.ZipkinServerConfiguration.kafka(ZipkinKafkaProperties kafka, CollectorSampler sampler, CollectorMetrics metrics, StorageComponent storage)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/TracedSession.java": [
                    "protected Object zipkin.server.brave.TracedSession.handleInvocation(Object proxy, Method method, Object[] args)"
                ]
            },
            "1cb1f19e888d7e76e46836fb9eb0ce546a9d382e": {
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaCollector.java": [
                    "protected ExecutorService zipkin.collector.kafka.KafkaCollector.compute()"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "KafkaCollector zipkin.server.ZipkinServerConfiguration.kafka( ZipkinKafkaProperties kafka, CollectorSampler sampler, CollectorMetrics metrics, StorageComponent storage)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/TracedSession.java": [
                    "protected Object zipkin.server.brave.TracedSession.handleInvocation(Object proxy, Method method, Object[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "47c69c626c2c39636d651b03b2c5511b65b0d17a",
        "previous_commit": "3ba146c147fcbd76ff4cb63a9e0318683db84e62",
        "date": 1560428927,
        "releases": {
            "previous": "47c69c626c2c39636d651b03b2c5511b65b0d17a",
            "next": "47c69c626c2c39636d651b03b2c5511b65b0d17a"
        },
        "commit_message": "Restores OpenZipkin publishing configuration (#2630)\n\nThis reverts back to OpenZipkin publishing configuration.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "47c69c626c2c39636d651b03b2c5511b65b0d17a": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getIndexes()",
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getKeys()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()"
                ]
            },
            "3ba146c147fcbd76ff4cb63a9e0318683db84e62": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getIndexes()",
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getKeys()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f419eae55434db22825649515aa9499b05523014",
        "previous_commit": "7a819ff31afceedc7d5e7b7e3211bb7f9e888dfe",
        "date": 1557413683,
        "releases": {
            "previous": "f419eae55434db22825649515aa9499b05523014",
            "next": "f419eae55434db22825649515aa9499b05523014"
        },
        "commit_message": "Ports the scribe collector to armeria (#2563)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f419eae55434db22825649515aa9499b05523014": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeCollector.java": [
                    "public CheckResult zipkin2.collector.scribe.ScribeCollector.check()"
                ],
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeSpanConsumer.java": [
                    "public void zipkin2.collector.scribe.ScribeSpanConsumer.onSuccess(@Nullable Void value)",
                    "public void zipkin2.collector.scribe.ScribeSpanConsumer.onError(Throwable t)"
                ]
            },
            "7a819ff31afceedc7d5e7b7e3211bb7f9e888dfe": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeCollector.java": [
                    "public CheckResult zipkin2.collector.scribe.ScribeCollector.check()"
                ],
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeSpanConsumer.java": [
                    "public void zipkin2.collector.scribe.ScribeSpanConsumer.onSuccess(@Nullable Void value)",
                    "public void zipkin2.collector.scribe.ScribeSpanConsumer.onError(Throwable t)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "686d86b0d1d4dd19e44118ed99da1c2a41ee91c3",
        "previous_commit": "9843177dd4547bfbc9a0e2117a0a7c18913068f3",
        "date": 1606458030,
        "releases": {
            "previous": "686d86b0d1d4dd19e44118ed99da1c2a41ee91c3",
            "next": "686d86b0d1d4dd19e44118ed99da1c2a41ee91c3"
        },
        "commit_message": "Adjusts Cassandra image to work with JRE 11 and preps for Cassandra 4 (#3318)\n\nThis adds some workarounds for Cassandra when used on JRE 11, allowing\r\nus a single base image in this repo (note zipkin-dependencies still\r\nuses JRE 8 until Elasticsearch updates their spark support).\r\n\r\nA single base image helps us as we don't need to download a couple\r\nhundred meg only for one storage option. This also carves in Cassandra\r\n4 support based on 4.0.0-beta-3 which passes almost all tests, but\r\ndeserves to wait until the next beta before we formalize in any way.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "686d86b0d1d4dd19e44118ed99da1c2a41ee91c3": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureKeyspaceMetadata(CqlSession session, String keyspace)",
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, CqlSession session)",
                    "static void zipkin2.storage.cassandra.Schema.applyCqlFile(String keyspace, CqlSession session, String resource)"
                ]
            },
            "9843177dd4547bfbc9a0e2117a0a7c18913068f3": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureKeyspaceMetadata(CqlSession session, String keyspace)",
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, CqlSession session)",
                    "static void zipkin2.storage.cassandra.Schema.applyCqlFile(String keyspace, CqlSession session, String resource)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "61dccc89104525c968ddeb0e178a4a9a70a90756",
        "previous_commit": "b077db612bc1f5ddf50dde2c75a95f803c89d9da",
        "date": 1501074478,
        "releases": {
            "previous": "61dccc89104525c968ddeb0e178a4a9a70a90756",
            "next": "61dccc89104525c968ddeb0e178a4a9a70a90756"
        },
        "commit_message": "Don't use strict ID when processing dependency links (in-memory) (#1665)\n\nThe existing code inadvertently used strict trace IDs when looking up\r\ndependency link spans. This caused me a lot of head scratching when\r\ntrying to figure out why later refactoring caused multiple links on a\r\nmixed trace.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "61dccc89104525c968ddeb0e178a4a9a70a90756": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkSpanIterator.java": [
                    "public boolean zipkin.storage.mysql.DependencyLinkSpanIterator.hasNext()"
                ],
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "public synchronized List<DependencyLink> zipkin.storage.InMemorySpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "public List<List<Span>> zipkin.storage.InMemorySpanStore.getTraces(QueryRequest request)"
                ]
            },
            "b077db612bc1f5ddf50dde2c75a95f803c89d9da": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkSpanIterator.java": [
                    "public boolean zipkin.storage.mysql.DependencyLinkSpanIterator.hasNext()"
                ],
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "public synchronized List<DependencyLink> zipkin.storage.InMemorySpanStore.getDependencies(long endTs, @Nullable Long lookback)",
                    "public synchronized List<List<Span>> zipkin.storage.InMemorySpanStore.getTraces(QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "64abfdd7b6d0da4339bef6e437d1c16dac487746",
        "previous_commit": "4aa179db1109259f0fdb32bfcc76f5006a6e2379",
        "date": 1478227528,
        "releases": {
            "previous": "64abfdd7b6d0da4339bef6e437d1c16dac487746",
            "next": "64abfdd7b6d0da4339bef6e437d1c16dac487746"
        },
        "commit_message": "Use span name table instead of materialized view (#1374)\n\n- This switches span name and service name lookups to use a table instead of a materialized view.  This change will fix #1360\r\n- Change limit logic to limit on a set of trace IDs instead of limiting on the provided collection first. In pracitce this didn't make a noticiable difference in the results but it seems like the intended logic.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "64abfdd7b6d0da4339bef6e437d1c16dac487746": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.apply(Collection<BigInteger> traceIds)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getTraces(final QueryRequest request)"
                ]
            },
            "4aa179db1109259f0fdb32bfcc76f5006a6e2379": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.apply(Collection<BigInteger> traceIds)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getTraces(final QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d0d9493fd897be434b78b0d5e9c5de32cc25b74e",
        "previous_commit": "2787ab00c8af35d201bbca2e5c4043a1dbfbd5da",
        "date": 1524986337,
        "releases": {
            "previous": "d0d9493fd897be434b78b0d5e9c5de32cc25b74e",
            "next": "d0d9493fd897be434b78b0d5e9c5de32cc25b74e"
        },
        "commit_message": "Switches to micrometer metric name\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d0d9493fd897be434b78b0d5e9c5de32cc25b74e": {
                "zipkin-autoconfigure/metrics-prometheus/src/main/java/zipkin/autoconfigure/prometheus/ZipkinPrometheusMetricsAutoConfiguration.java": [
                    "public HttpHandler zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.wrap(HttpHandler next)",
                    "UndertowDeploymentInfoCustomizer zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.httpRequestDurationCustomizer()",
                    "private Timer.Builder zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.getTimeBuilder(HttpServerExchange exchange)"
                ]
            },
            "2787ab00c8af35d201bbca2e5c4043a1dbfbd5da": {
                "zipkin-autoconfigure/metrics-prometheus/src/main/java/zipkin/autoconfigure/prometheus/ZipkinPrometheusMetricsAutoConfiguration.java": [
                    "public HttpHandler zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.wrap(HttpHandler next)",
                    "UndertowDeploymentInfoCustomizer zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.httpRequestDurationCustomizer()",
                    "private Timer.Builder zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.getTimeBuilder(HttpServerExchange exchange)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7f6801286e2d7f19fc1198e7cdc4c6345e99b6fa",
        "previous_commit": "ba96f1f9ea4ecd8babf85aef5c2f40c1d3caedf9",
        "date": 1564865001,
        "releases": {
            "previous": "7f6801286e2d7f19fc1198e7cdc4c6345e99b6fa",
            "next": "7f6801286e2d7f19fc1198e7cdc4c6345e99b6fa"
        },
        "commit_message": "Makes the toString of Elasticsearch nicer as it is in the health check (#2730)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7f6801286e2d7f19fc1198e7cdc4c6345e99b6fa": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "Endpoint zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.getEndpoint()",
                    "public final String zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.toString()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java": [
                    "Supplier<EndpointGroup> zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.esInitialEndpoints( SessionProtocol esSessionProtocol, ZipkinElasticsearchStorageProperties es)"
                ]
            },
            "ba96f1f9ea4ecd8babf85aef5c2f40c1d3caedf9": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "Endpoint zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.getEndpoint()",
                    "public final String zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.toString()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java": [
                    "Supplier<EndpointGroup> zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.esInitialEndpoints( SessionProtocol esSessionProtocol, ZipkinElasticsearchStorageProperties es)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "efa5110078e6d64dc336996b36bf25872765c259",
        "previous_commit": "5c37ef87b36872c9b5300f86f8257c09f10f8e4a",
        "date": 1604481833,
        "releases": {
            "previous": "efa5110078e6d64dc336996b36bf25872765c259",
            "next": "efa5110078e6d64dc336996b36bf25872765c259"
        },
        "commit_message": "Updates to latest dependencies and deletes invoker tests (#3285)\n\nWe originally supported server extensions, and so had Maven invoker\r\ntests which isolate the classpath to hit a few areas. This deletes those\r\ntests as we now use Docker for integrated server tests. This speeds up\r\nthe non-docker build quite a bit.\r\n\r\nThis also prunes the dependencies used in zipkin-server as the default\r\nspring boot starter for test pulls in different versions of common\r\nlibraries such as assertj and jupiter. The only cost is maintaining the\r\nspring-test version, which is only used in a few test runners, so not\r\nparticularly fragile.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "efa5110078e6d64dc336996b36bf25872765c259": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getIndexes()",
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getKeys()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()"
                ]
            },
            "5c37ef87b36872c9b5300f86f8257c09f10f8e4a": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getIndexes()",
                    "public List<UniqueKey<Record>> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getKeys()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinSpans.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinSpans.getIndexes()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f77668a2baa8c3aa23610421dc697158dfb4c111",
        "previous_commit": "402f6cfcea4e38655ac7957a3e322cdb9aeaaf2a",
        "date": 1531706358,
        "releases": {
            "previous": "f77668a2baa8c3aa23610421dc697158dfb4c111",
            "next": "f77668a2baa8c3aa23610421dc697158dfb4c111"
        },
        "commit_message": "Corrects edge case conversion code around v1 address annotations\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f77668a2baa8c3aa23610421dc697158dfb4c111": {
                "zipkin/src/main/java/zipkin2/v1/V1SpanConverter.java": [
                    "void zipkin2.v1.V1SpanConverter.processAnnotations(V1Span source)",
                    "void zipkin2.v1.V1SpanConverter.processBinaryAnnotations(V1Span source)",
                    "static boolean zipkin2.v1.V1SpanConverter.closeEnoughEndpoint(Span.Builder builder, Endpoint e)"
                ]
            },
            "402f6cfcea4e38655ac7957a3e322cdb9aeaaf2a": {
                "zipkin/src/main/java/zipkin2/v1/V1SpanConverter.java": [
                    "void zipkin2.v1.V1SpanConverter.processAnnotations(V1Span source)",
                    "void zipkin2.v1.V1SpanConverter.processBinaryAnnotations(V1Span source)",
                    "static boolean zipkin2.v1.V1SpanConverter.closeEnoughEndpoint(Span.Builder builder, Endpoint e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "82f5285e5c6bbb591a47831b380aebc4050bbc30",
        "previous_commit": "9bb0f3da6a34c06ccd272736877404e4ed0be54e",
        "date": 1568861814,
        "releases": {
            "previous": "82f5285e5c6bbb591a47831b380aebc4050bbc30",
            "next": "82f5285e5c6bbb591a47831b380aebc4050bbc30"
        },
        "commit_message": "Adds getByTraceIds to mysql\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "82f5285e5c6bbb591a47831b380aebc4050bbc30": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLStorage.java": [
                    "public ServiceAndSpanNames zipkin2.storage.mysql.v1.MySQLStorage.serviceAndSpanNames()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/Schema.java": [
                    "Condition zipkin2.storage.mysql.v1.Schema.annotationsTraceIdCondition(Set<Pair> traceIds)",
                    "Condition zipkin2.storage.mysql.v1.Schema.traceIdCondition( TableField<Record, Long> TRACE_ID_HIGH, TableField<Record, Long> TRACE_ID, Set<Pair> traceIds )"
                ]
            },
            "9bb0f3da6a34c06ccd272736877404e4ed0be54e": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/MySQLStorage.java": [
                    "public ServiceAndSpanNames zipkin2.storage.mysql.v1.MySQLStorage.serviceAndSpanNames()"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/Schema.java": [
                    "Condition zipkin2.storage.mysql.v1.Schema.annotationsTraceIdCondition(Set<Pair> traceIds)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b23ab20e9ca9ed09bfe7f608dc79377a0a28294c",
        "previous_commit": "998f50d5916fbddac4b78a8a351960db823a5413",
        "date": 1501210903,
        "releases": {
            "previous": "b23ab20e9ca9ed09bfe7f608dc79377a0a28294c",
            "next": "b23ab20e9ca9ed09bfe7f608dc79377a0a28294c"
        },
        "commit_message": "Drops internal DependencyLinkSpan for Span2\n\nThis drops the internal type of DependencyLinkSpan in favor of the Span2\ntype coming in #1499. Doing so now gives us practice, solves a few bugs\nalong the way. When Span2 becomes non-internal, the change will be a\nsimple package rename.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b23ab20e9ca9ed09bfe7f608dc79377a0a28294c": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.aggregateDependencies(long endTs, @Nullable Long lookback, Connection conn)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Collection<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/Node.java": [
                    "public boolean zipkin.internal.Node<V>.addNode(@Nullable Long parentId, long id, V value)"
                ]
            },
            "998f50d5916fbddac4b78a8a351960db823a5413": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.aggregateDependencies(long endTs, @Nullable Long lookback, Connection conn)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Collection<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/Node.java": [
                    "public boolean zipkin.internal.Node<V>.addNode(@Nullable Long parentId, long id, V value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f88ae5c8dcdc8dee3bcff5863cf3c7df9731a67b",
        "previous_commit": "754bab4b64da829181526de209d0cad7f89b33da",
        "date": 1510466177,
        "releases": {
            "previous": "f88ae5c8dcdc8dee3bcff5863cf3c7df9731a67b",
            "next": "f88ae5c8dcdc8dee3bcff5863cf3c7df9731a67b"
        },
        "commit_message": "Allows customization of pooling options\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f88ae5c8dcdc8dee3bcff5863cf3c7df9731a67b": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public final Builder zipkin2.storage.cassandra.CassandraStorage.maxConnections(int maxConnections)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "static Cluster zipkin2.storage.cassandra.DefaultSessionFactory.buildCluster(CassandraStorage cassandra)"
                ]
            },
            "754bab4b64da829181526de209d0cad7f89b33da": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "static Cluster zipkin2.storage.cassandra.DefaultSessionFactory.buildCluster(CassandraStorage cassandra)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "316878c5666eefe921f280e53592d30637396a96",
        "previous_commit": "6421115598b2c9abf954701608e7c8cc8758a571",
        "date": 1504098215,
        "releases": {
            "previous": "316878c5666eefe921f280e53592d30637396a96",
            "next": "316878c5666eefe921f280e53592d30637396a96"
        },
        "commit_message": "Adds Call.handleError to address remote resource not found (#1717)\n\nTo complete an http span store adapter, we need to be able to coerce\r\n404 to empty. This does that like this:\r\n\r\n```java\r\ncall.handleError((error, callback) -> {\r\n  if (error instanceof HttpException && ((HttpException) error).code == 404) {\r\n    callback.onSuccess(Collections.emptyList());\r\n  } else {\r\n    callback.onError(error);\r\n  }\r\n});\r\n```",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "316878c5666eefe921f280e53592d30637396a96": {
                "zipkin/src/main/java/zipkin/internal/v2/Call.java": [
                    "public void zipkin.internal.v2.Call<V>.onSuccess(V value)",
                    "public Call<V> zipkin.internal.v2.Call<V>.clone()",
                    "public void zipkin.internal.v2.Call<V>.onError(Throwable t)"
                ]
            },
            "6421115598b2c9abf954701608e7c8cc8758a571": {
                "zipkin/src/main/java/zipkin/internal/v2/Call.java": [
                    "public void zipkin.internal.v2.Call<V>.onSuccess(V value)",
                    "public Call<V> zipkin.internal.v2.Call<V>.clone()",
                    "public void zipkin.internal.v2.Call<V>.onError(Throwable t)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "27190bf929b8d64ad0e7b99c05bb4057c046c4f2",
        "previous_commit": "09a441f4b4e8734058e8d023367f826b845e9dea",
        "date": 1557626120,
        "releases": {
            "previous": "27190bf929b8d64ad0e7b99c05bb4057c046c4f2",
            "next": "27190bf929b8d64ad0e7b99c05bb4057c046c4f2"
        },
        "commit_message": "Reduces array copying when converting uint64 to hex strings (#2587)\n\nThis will affect those using Brave or Thrift encoding.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "27190bf929b8d64ad0e7b99c05bb4057c046c4f2": {
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.traceId(long high, long low)",
                    "static String zipkin2.Span.padLeft(String id, int desiredLength)",
                    "static String zipkin2.Span.toLowerHex(long v)"
                ]
            },
            "09a441f4b4e8734058e8d023367f826b845e9dea": {
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.traceId(long high, long low)",
                    "static String zipkin2.Span.padLeft(String id, int desiredLength)",
                    "static String zipkin2.Span.toLowerHex(long v)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2f9f2da9392bb14476efba48a1c635ea6aa23a98",
        "previous_commit": "513e79d983fd291aaed21e6a4d7f79c1efa8ffa1",
        "date": 1507644517,
        "releases": {
            "previous": "2f9f2da9392bb14476efba48a1c635ea6aa23a98",
            "next": "2f9f2da9392bb14476efba48a1c635ea6aa23a98"
        },
        "commit_message": "Prevents backlog when writing to Elasticsearch\n\nIn the past, delayed or otherwise unhealthy elasticsearch clusters could\ncreate a backlog leading to a OOM arising from the http dispatcher ready\nqueue. This chooses to prevent a ready queue instead. This means we drop\nspans when the backend isn't responding instead of crashing the server.\n\nFixes #1760\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2f9f2da9392bb14476efba48a1c635ea6aa23a98": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public // hosts resolution might imply a network call, and we might make a new okhttp instance\n HttpCall.Factory zipkin2.elasticsearch.ElasticsearchStorage.http()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "public HttpCall<V> zipkin2.elasticsearch.internal.client.HttpCall<V>.clone()",
                    "public void zipkin2.elasticsearch.internal.client.HttpCall<V>.enqueue(Callback<V> delegate)"
                ]
            },
            "513e79d983fd291aaed21e6a4d7f79c1efa8ffa1": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public // hosts resolution might imply a network call, and we might make a new okhttp instance\n HttpCall.Factory zipkin2.elasticsearch.ElasticsearchStorage.http()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "public HttpCall<V> zipkin2.elasticsearch.internal.client.HttpCall<V>.clone()",
                    "public void zipkin2.elasticsearch.internal.client.HttpCall<V>.enqueue(Callback<V> delegate)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "560f7056fb379759c10d3837b17865f52910a6f9",
        "previous_commit": "ffc91aff0b59b3cc1bf66ef76dd443d06c5c8a2e",
        "date": 1557573124,
        "releases": {
            "previous": "560f7056fb379759c10d3837b17865f52910a6f9",
            "next": "560f7056fb379759c10d3837b17865f52910a6f9"
        },
        "commit_message": "Adds cheap string encoding for IpV4 path used in protobuf (#2584)\n\n* Adds cheap string encoding for IpV4 path used in protobuf\r\n\r\nCommonly, we parse protobuf, but write json. This implies reading bytes\r\nand encoding IP literals. This improves performance of IpV4 address\r\nencoding and tries to pay for the extra bytecode by removing some.\r\n\r\n* copy/pasta\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "560f7056fb379759c10d3837b17865f52910a6f9": {
                "zipkin/src/main/java/zipkin2/Endpoint.java": [
                    "public final boolean zipkin2.Endpoint.parseIp(byte[] ipBytes)",
                    "static String zipkin2.Endpoint.writeIpV6(byte[] ipv6)"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> byte[] zipkin2.internal.JsonCodec.write(Buffer.Writer<T> writer, T value)"
                ]
            },
            "ffc91aff0b59b3cc1bf66ef76dd443d06c5c8a2e": {
                "zipkin/src/main/java/zipkin2/Endpoint.java": [
                    "public final boolean zipkin2.Endpoint.parseIp(byte[] ipBytes)",
                    "static String zipkin2.Endpoint.writeIpV6(byte[] ipv6)"
                ],
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> byte[] zipkin2.internal.JsonCodec.write(Buffer.Writer<T> writer, T value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "35973a9a74ffacdd5b7f424a1e7239ee8b10cb77",
        "previous_commit": "59a634052c33d87565b17f632e4c10ae53302cd0",
        "date": 1489618535,
        "releases": {
            "previous": "35973a9a74ffacdd5b7f424a1e7239ee8b10cb77",
            "next": "35973a9a74ffacdd5b7f424a1e7239ee8b10cb77"
        },
        "commit_message": "Limits names lookback in Elasticsearch (#1538)\n\nThis reuses `QUERY_LOOKBACK` to limit names queries (service and span\r\nnames) from searching all indexes. This is particularly important for\r\nhigh-volume sites (ex 100% sampling or high traffic), and those who do\r\nnot use curator or otherwise to prune data.\r\n\r\nFixes #1462 (at least helps a lot with no schema change)",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "35973a9a74ffacdd5b7f424a1e7239ee8b10cb77": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getSpanNames(String serviceName, Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getServiceNames(Callback<List<String>> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java": [
                    "public static Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.builder(OkHttpClient client)"
                ]
            },
            "59a634052c33d87565b17f632e4c10ae53302cd0": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getSpanNames(String serviceName, Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getServiceNames(Callback<List<String>> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java": [
                    "public static Builder zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.builder(OkHttpClient client)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "245e5c02d40d12699b381b622f0b0db78e0de112",
        "previous_commit": "0ce6a016324bf58cebb06449a1e848efa3ac1b9e",
        "date": 1466995619,
        "releases": {
            "previous": "245e5c02d40d12699b381b622f0b0db78e0de112",
            "next": "245e5c02d40d12699b381b622f0b0db78e0de112"
        },
        "commit_message": "Uses ES bulk api only when there's more than one span (#1146)\n\nDuring a test where 100 single-span messages are sent to Kafka at the\r\nsame time, I noticed only 58-97 of them would end up in storage\r\neventhough all messages parsed properly and no operations failed.\r\n\r\nAfter a 100ms/message pause was added, the store rate of this test went\r\nto 100%, so figured it was some sort of state issue. I noticed the code\r\nwas using Bulk operations regardless of input size, so as a wild guess\r\nchanged the special-case single-span messages. At least in this test, it\r\nraised the success rate to 100% without any pausing needed.\r\n\r\nI don't know why this worked, but it seems sensible to not use bulk apis\r\nwhen there's no bulk action to perform.\r\n\r\nI started to write a unit test to validate single-length lists don't use\r\nbulk, but the Mockito involved became too verbose as the Elasticsearch\r\nclient uses chaining and other patterns that are tedious to mock.\r\n\r\nInstead, we should make a parallel integration test and apply them to\r\nall storage components.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "245e5c02d40d12699b381b622f0b0db78e0de112": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "private IndexRequestBuilder zipkin.storage.elasticsearch.ElasticsearchSpanConsumer.createSpanIndexRequest(Span input)",
                    "public ListenableFuture<Void> zipkin.storage.elasticsearch.ElasticsearchSpanConsumer.accept(List<Span> spans)",
                    "public ListenableFuture zipkin.storage.elasticsearch.ElasticsearchSpanConsumer.apply(Object input)"
                ]
            },
            "0ce6a016324bf58cebb06449a1e848efa3ac1b9e": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "private IndexRequestBuilder zipkin.storage.elasticsearch.ElasticsearchSpanConsumer.createSpanIndexRequest(Span span)",
                    "public ListenableFuture<Void> zipkin.storage.elasticsearch.ElasticsearchSpanConsumer.accept(List<Span> spans)",
                    "public ListenableFuture zipkin.storage.elasticsearch.ElasticsearchSpanConsumer.apply(Object input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f",
        "previous_commit": "14de677f4a5e987a4a1953ec5d84d6273db3628e",
        "date": 1586826622,
        "releases": {
            "previous": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f",
            "next": "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f"
        },
        "commit_message": "Adds Dynamic elasticsearch credentials file (#3050)\n\nLoad elasticsearch credentials from a properties file in a fixed rate interval. There are two parameters to control it:\r\n\r\n    ES_CREDENTIALS_FILE: An absolute path of the file.\r\n    ES_CREDENTIALS_REFRESH_INTERVAL: Refresh interval in\r\n    seconds.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e3e4832dd4e9f3737c612db7128b3a7f5c56d01f": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java": [
                    "public HttpResponse zipkin2.server.internal.elasticsearch.BasicAuthInterceptor.execute(ClientRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java": [
                    "public void zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.accept(ClientOptionsBuilder client)",
                    "public boolean zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.matches(ConditionContext condition, AnnotatedTypeMetadata ignored)"
                ]
            },
            "14de677f4a5e987a4a1953ec5d84d6273db3628e": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/BasicAuthInterceptor.java": [
                    "public HttpResponse zipkin2.server.internal.elasticsearch.BasicAuthInterceptor.execute(ClientRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java": [
                    "public void zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.accept(ClientOptionsBuilder client)",
                    "public boolean zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.matches(ConditionContext condition, AnnotatedTypeMetadata ignored)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8553e44ff7195aff991685197d51d6aebbdba207",
        "previous_commit": "f60c5a212447d7c835e15396c6147e28f9b35ece",
        "date": 1513667902,
        "releases": {
            "previous": "8553e44ff7195aff991685197d51d6aebbdba207",
            "next": "8553e44ff7195aff991685197d51d6aebbdba207"
        },
        "commit_message": "Fix SelectFromSpan with 128bit TraceIDs and strict-trace-id=false\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8553e44ff7195aff991685197d51d6aebbdba207": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<Span>> zipkin2.storage.cassandra.CassandraSpanStore.getTrace(String traceId)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/InsertTraceByServiceSpan.java": [
                    "Input zipkin2.storage.cassandra.InsertTraceByServiceSpan.newInput( String service, String span, int bucket, UUID ts, String trace_id, @Nullable Long durationMillis )"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "Call<List<Span>> zipkin2.storage.cassandra.SelectFromSpan.newCall(String traceId)"
                ]
            },
            "f60c5a212447d7c835e15396c6147e28f9b35ece": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<Span>> zipkin2.storage.cassandra.CassandraSpanStore.getTrace(String traceId)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/InsertTraceByServiceSpan.java": [
                    "Input zipkin2.storage.cassandra.InsertTraceByServiceSpan.newInput( String service, String span, int bucket, UUID ts, String trace_id, @Nullable Long durationMillis )"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "Call<List<Span>> zipkin2.storage.cassandra.SelectFromSpan.newCall(String traceId)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7bd40d01e7ddc416c8689426b822ad2c980e61c1",
        "previous_commit": "89b013e978c60b17b53804dd2e5ee3476948b8ee",
        "date": 1594555083,
        "releases": {
            "previous": "7bd40d01e7ddc416c8689426b822ad2c980e61c1",
            "next": "7bd40d01e7ddc416c8689426b822ad2c980e61c1"
        },
        "commit_message": "Refactors Cassandra v1 indexing code and fixes some glitches (#3137)\n\nThis change performs more cleanups in preparation of the move to Datastax\r\nJava Driver 4, mostly consolidation in nature:\r\n\r\n* Fixes bug when drop-down choices were added when span data wasn't indexed\r\n* Uses less auto-value by choosing Map.Entry for pair/tuple data\r\n* Simplify index state management by giving each indexer a separate cache\r\n* Moves index clash test to CassandraSpanConsumerTest\r\n* Adds a bunch of comments explaining loop logic of CassandraSpanConsumer\r\n* Removes guava dep (except ListenableFuture)",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7bd40d01e7ddc416c8689426b822ad2c980e61c1": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "void zipkin2.storage.cassandra.v1.CassandraSpanConsumer.clear()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertRemoteServiceName.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.InsertRemoteServiceName.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertSpanName.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.InsertSpanName.newFuture()"
                ]
            },
            "89b013e978c60b17b53804dd2e5ee3476948b8ee": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "void zipkin2.storage.cassandra.v1.CassandraSpanConsumer.clear()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertRemoteServiceName.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.InsertRemoteServiceName.newFuture()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/InsertSpanName.java": [
                    "protected ResultSetFuture zipkin2.storage.cassandra.v1.InsertSpanName.newFuture()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f02a993656f506277ca83737ddf494ed45fde4b3",
        "previous_commit": "238d19fa73abbf2c313c2721906c4271ba5bbd6e",
        "date": 1462595096,
        "releases": {
            "previous": "f02a993656f506277ca83737ddf494ed45fde4b3",
            "next": "f02a993656f506277ca83737ddf494ed45fde4b3"
        },
        "commit_message": "Buys Cassandra 2.1 users a little more time to upgrade\n\nWhile `GET /api/v1/traces` without `serviceName` won't work, and\nprobably other features will also break 2.1, this adds a workaround\nwhich should buy Cassandra 2.1 users a little more time to upgrade.\n\nSee https://groups.google.com/forum/#!forum/zipkin-user\nFixes #208\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f02a993656f506277ca83737ddf494ed45fde4b3": {
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "private String zipkin.cassandra.CassandraSpanStore.debugSelectTraceIdsByServiceNames(List<String> serviceNames, Set<Integer> buckets, long startTs, long endTs, int limit)",
                    "public ListenableFuture<List<List<Span>>> zipkin.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsByServiceNames(List<String> serviceNames, long endTs, long lookback, int limit)"
                ]
            },
            "238d19fa73abbf2c313c2721906c4271ba5bbd6e": {
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "private String zipkin.cassandra.CassandraSpanStore.debugSelectTraceIdsByServiceNames(List<String> serviceNames, Set<Integer> buckets, long startTs, long endTs, int limit)",
                    "public ListenableFuture<List<List<Span>>> zipkin.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)",
                    "ListenableFuture<Map<Long, Long>> zipkin.cassandra.CassandraSpanStore.getTraceIdsByServiceNames(List<String> serviceNames, long endTs, long lookback, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "42df4bf96f4edc67bb348cc606aa397be0f87267",
        "previous_commit": "7cb3bd38b47828d1f68cd1f8a787b27c87a6b1f3",
        "date": 1596858583,
        "releases": {
            "previous": "42df4bf96f4edc67bb348cc606aa397be0f87267",
            "next": "42df4bf96f4edc67bb348cc606aa397be0f87267"
        },
        "commit_message": "Updates off deprecated Brave apis (#3164)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "42df4bf96f4edc67bb348cc606aa397be0f87267": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/ZipkinSelfTracingConfiguration.java": [
                    "public Call<Void> zipkin2.server.internal.brave.LocalSender.sendSpans(List<byte[]> encodedSpans)",
                    "public Encoding zipkin2.server.internal.brave.LocalSender.encoding()",
                    "public int zipkin2.server.internal.brave.LocalSender.messageSizeInBytes(List<byte[]> list)"
                ]
            },
            "7cb3bd38b47828d1f68cd1f8a787b27c87a6b1f3": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/ZipkinSelfTracingConfiguration.java": [
                    "public Call<Void> zipkin2.server.internal.brave.LocalSender.sendSpans(List<byte[]> encodedSpans)",
                    "public Encoding zipkin2.server.internal.brave.LocalSender.encoding()",
                    "public int zipkin2.server.internal.brave.LocalSender.messageSizeInBytes(List<byte[]> list)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e3d251c583b73e1106fdebc0055e9e1bea63ef77",
        "previous_commit": "ff174772f4e25afdd22a8ccf92b346197bf88c91",
        "date": 1462015088,
        "releases": {
            "previous": "e3d251c583b73e1106fdebc0055e9e1bea63ef77",
            "next": "e3d251c583b73e1106fdebc0055e9e1bea63ef77"
        },
        "commit_message": "Updates to Datastax Cassandra Driver 3.0\n\nBy updating to Datastax Driver 3, we still support Cassandra 2.2+, but\nalso 3.0.\n\nTested against Cassandra 2.2, 3.0 and 3.5\n\nFixes #183\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e3d251c583b73e1106fdebc0055e9e1bea63ef77": {
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/internal/Repository.java": [
                    "public ListenableFuture<Void> zipkin.cassandra.internal.Repository.storeDependencies(long epochDayMillis, ByteBuffer dependencies)",
                    "private long zipkin.cassandra.internal.Repository.deserializeTs(Row row, String name)",
                    "private ByteBuffer zipkin.cassandra.internal.Repository.serializeTs(long timestamp)"
                ]
            },
            "ff174772f4e25afdd22a8ccf92b346197bf88c91": {
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/internal/Repository.java": [
                    "public ListenableFuture<Void> zipkin.cassandra.internal.Repository.storeDependencies(long epochDayMillis, ByteBuffer dependencies)",
                    "private long zipkin.cassandra.internal.Repository.deserializeTs(Row row, String name)",
                    "private ByteBuffer zipkin.cassandra.internal.Repository.serializeTs(long timestamp)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b3eefbee1aec34b1036b61913149d805712ea2fc",
        "previous_commit": "7e6c07650fbb7ca05764d48a820e148c87f2dd85",
        "date": 1557475835,
        "releases": {
            "previous": "b3eefbee1aec34b1036b61913149d805712ea2fc",
            "next": "b3eefbee1aec34b1036b61913149d805712ea2fc"
        },
        "commit_message": "Adding storage-throttle module to address \"over capacity\" issues (#2502)\n\nAdding ThrottledStorageComponent/etc. to contain logic for wrapping other storage implementations and limiting the number of requests that can go through to them at a given time.\r\n\r\nElasticsearch storage's maxRequests can be override by throttle properties if the throttle is \r\nenabled.\r\n\r\nInspired by work done on #2169.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b3eefbee1aec34b1036b61913149d805712ea2fc": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinServerConfiguration.java": [
                    "public Object zipkin2.server.internal.ThrottledStorageComponentEnhancer.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder(OkHttpClient client)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "public String zipkin2.storage.InMemoryStorage.toString()"
                ]
            },
            "7e6c07650fbb7ca05764d48a820e148c87f2dd85": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinServerConfiguration.java": [],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder(OkHttpClient client)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "public String zipkin2.storage.InMemoryStorage.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5bb25f55ce59061602c0e982dedb6cf3da1e3d87",
        "previous_commit": "a6764f326863d16414b2ba3e780c918c25a0c112",
        "date": 1510665155,
        "releases": {
            "previous": "5bb25f55ce59061602c0e982dedb6cf3da1e3d87",
            "next": "5bb25f55ce59061602c0e982dedb6cf3da1e3d87"
        },
        "commit_message": "Fixes accidental hot partition with empty service name\n\nIn porting over the all-services query, I accidentally created a piping\nhot partition. This re-instates code similar to what we had in the old\nschema, except that we can avoid an all-service fan out in more cases.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5bb25f55ce59061602c0e982dedb6cf3da1e3d87": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "Call<List<List<Span>>> zipkin2.storage.cassandra.CassandraSpanStore.doGetTraces(QueryRequest request)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "public Set<String> zipkin2.storage.cassandra.CassandraUtil.map(Map<String, Long> map)"
                ]
            },
            "a6764f326863d16414b2ba3e780c918c25a0c112": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "public Call<Void> zipkin2.storage.cassandra.CassandraSpanConsumer.accept(List<Span> input)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "Call<List<List<Span>>> zipkin2.storage.cassandra.CassandraSpanStore.doGetTraces(QueryRequest request)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "public Set<String> zipkin2.storage.cassandra.CassandraUtil.map(Map<String, Long> map)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d45ec7a74c1442fa25b51d8709708bde3c2f786e",
        "previous_commit": "28d0a3af61601adec33d29fdfd5808a5ccdadcca",
        "date": 1468036941,
        "releases": {
            "previous": "d45ec7a74c1442fa25b51d8709708bde3c2f786e",
            "next": "d45ec7a74c1442fa25b51d8709708bde3c2f786e"
        },
        "commit_message": "Clarifies Span.duration as positive; coerces Span.duration 0 -> null (#1176)\n\nDuration of 0 is confusing to plot and can be misinterpreted as null.\r\n\r\nFixes #1174",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d45ec7a74c1442fa25b51d8709708bde3c2f786e": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.duration(@Nullable Long duration)",
                    "public Builder zipkin.Span.timestamp(@Nullable Long timestamp)"
                ]
            },
            "28d0a3af61601adec33d29fdfd5808a5ccdadcca": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.duration(@Nullable Long duration)",
                    "public Builder zipkin.Span.timestamp(@Nullable Long timestamp)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4a8a55f227cc54ccb997b43d584d77b671b425fa",
        "previous_commit": "b63465017935e346661d3fb5982660f735b08a64",
        "date": 1542901066,
        "releases": {
            "previous": "4a8a55f227cc54ccb997b43d584d77b671b425fa",
            "next": "4a8a55f227cc54ccb997b43d584d77b671b425fa"
        },
        "commit_message": "Migrates java aggregation code to v2 format (#2268)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4a8a55f227cc54ccb997b43d584d77b671b425fa": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/AggregateDependencies.java": [
                    "public List<DependencyLink> zipkin2.storage.mysql.v1.AggregateDependencies.apply(DSLContext context)"
                ],
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Span zipkin2.Span.build()"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "public List<DependencyLink> zipkin2.storage.InMemoryStorage.map(List<List<Span>> traces)"
                ]
            },
            "b63465017935e346661d3fb5982660f735b08a64": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/AggregateDependencies.java": [
                    "public List<DependencyLink> zipkin2.storage.mysql.v1.AggregateDependencies.apply(DSLContext context)"
                ],
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Span zipkin2.Span.build()"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "public List<DependencyLink> zipkin2.storage.InMemoryStorage.map(List<List<Span>> traces)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a0958e617d1b0598aeee5c62f9c2eb60b2a075ca",
        "previous_commit": "5195c17a875a501ea0da445878aabbd9cfd96705",
        "date": 1542785919,
        "releases": {
            "previous": "a0958e617d1b0598aeee5c62f9c2eb60b2a075ca",
            "next": "a0958e617d1b0598aeee5c62f9c2eb60b2a075ca"
        },
        "commit_message": "Conditionally filters when strictTraceId == true (#2263)\n\nIn order to read data written before switching from strictTraceId == false, we\r\nfilter client side even when strictTraceId == true. This broke some behavior\r\nNetflix relied on that allowed multi-tag based query on \"fit\" experiments.\r\n\r\nThere are a few ways to address this, including adding another flag to say if\r\nyou have any old data or not. In this case, you'd never want to filter client-\r\nside. OTOH introducing a new flag is burdensome from a documentation POV.\r\n\r\nThis addresses the concern in a different way. The only reason we would have to\r\nfilter client side, is if there is a clash on the lower 64-bits of the trace ID.\r\nKnowing this, we can achieve the same with no configuration just by looking for\r\na clash and doing no filtering if there is no clash.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a0958e617d1b0598aeee5c62f9c2eb60b2a075ca": {
                "zipkin/src/main/java/zipkin2/storage/GroupByTraceId.java": [
                    "public List<List<Span>> zipkin2.storage.GroupByTraceId.map(List<Span> input)"
                ],
                "zipkin/src/main/java/zipkin2/storage/StrictTraceId.java": [
                    "public static Call.Mapper<List<List<Span>>, List<List<Span>>> zipkin2.storage.StrictTraceId.filterTraces(QueryRequest request)",
                    "public List<List<Span>> zipkin2.storage.StrictTraceId.map(List<List<Span>> input)"
                ]
            },
            "5195c17a875a501ea0da445878aabbd9cfd96705": {
                "zipkin/src/main/java/zipkin2/storage/GroupByTraceId.java": [
                    "public List<List<Span>> zipkin2.storage.GroupByTraceId.map(List<Span> input)"
                ],
                "zipkin/src/main/java/zipkin2/storage/StrictTraceId.java": [
                    "public static Call.Mapper<List<List<Span>>, List<List<Span>>> zipkin2.storage.StrictTraceId.filterTraces(QueryRequest request)",
                    "public List<List<Span>> zipkin2.storage.StrictTraceId.map(List<List<Span>> input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "41ff98f8ef2818a85321ddbdf29983f24d953e82",
        "previous_commit": "338637914f463c7282b737351ab71bf8b3e30bad",
        "date": 1524793541,
        "releases": {
            "previous": "41ff98f8ef2818a85321ddbdf29983f24d953e82",
            "next": "41ff98f8ef2818a85321ddbdf29983f24d953e82"
        },
        "commit_message": "Fixes Kafka 1.1 setup\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "41ff98f8ef2818a85321ddbdf29983f24d953e82": {
                "zipkin-collector/kafka10/src/main/java/zipkin/collector/kafka10/KafkaCollector.java": [
                    "Runnable zipkin.collector.kafka10.KafkaCollector.guardFailures(final Runnable delegate)",
                    "public void zipkin.collector.kafka10.KafkaCollector.run()"
                ],
                "zipkin-collector/kafka10/src/main/java/zipkin/collector/kafka10/KafkaCollectorWorker.java": [
                    "public void zipkin.collector.kafka10.KafkaCollectorWorker.run()"
                ]
            },
            "338637914f463c7282b737351ab71bf8b3e30bad": {
                "zipkin-collector/kafka10/src/main/java/zipkin/collector/kafka10/KafkaCollector.java": [
                    "Runnable zipkin.collector.kafka10.KafkaCollector.guardFailures(final Runnable delegate)",
                    "public void zipkin.collector.kafka10.KafkaCollector.run()"
                ],
                "zipkin-collector/kafka10/src/main/java/zipkin/collector/kafka10/KafkaCollectorWorker.java": [
                    "public void zipkin.collector.kafka10.KafkaCollectorWorker.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "be26b6d98ab57c4f72faf97c9ffdcfc256f4fe3b",
        "previous_commit": "76970051ea8f56ba7cf835bfe448f0d57907e560",
        "date": 1456807026,
        "releases": {
            "previous": "be26b6d98ab57c4f72faf97c9ffdcfc256f4fe3b",
            "next": "be26b6d98ab57c4f72faf97c9ffdcfc256f4fe3b"
        },
        "commit_message": "Adds codec methods needed for Cassandra compatibility\n\nThis adds thrift read methods that accept ByteBuffers. This is in\nsupport of the underlying DataStax Cassandra driver, which returns data\nin ByteBuffers. The implementation takes care not to re-buffer input\ndata.\n\nThis also introduces an internal type, Dependencies, which is only used\nin cassandra: https://github.com/openzipkin/zipkin/issues/1008\n\nSee #89\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "be26b6d98ab57c4f72faf97c9ffdcfc256f4fe3b": {
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public List<Span> zipkin.internal.ThriftCodec.readSpans(byte[] bytes)",
                    "public List<DependencyLink> zipkin.internal.ThriftCodec.readDependencyLinks(byte[] bytes)",
                    "public Span zipkin.internal.ThriftCodec.readSpan(byte[] bytes)"
                ]
            },
            "76970051ea8f56ba7cf835bfe448f0d57907e560": {
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public List<Span> zipkin.internal.ThriftCodec.readSpans(byte[] bytes)",
                    "public List<DependencyLink> zipkin.internal.ThriftCodec.readDependencyLinks(byte[] bytes)",
                    "public Span zipkin.internal.ThriftCodec.readSpan(byte[] bytes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a9c17955bafd8536c08d9b425b4185666d50f68b",
        "previous_commit": "bf5fa50788844dd4db4f622b9819afa0f4282b24",
        "date": 1500261763,
        "releases": {
            "previous": "a9c17955bafd8536c08d9b425b4185666d50f68b",
            "next": "a9c17955bafd8536c08d9b425b4185666d50f68b"
        },
        "commit_message": "Adds toString to Annotation and BinaryAnnotation (#1652)\n\nIf you use Span.toString, embedded annotations and binary annotations\r\nlook good. However, in tests or debugger they don't. This fixes this.\r\n\r\nThx @sirtyro for reporting",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a9c17955bafd8536c08d9b425b4185666d50f68b": {
                "zipkin/src/main/java/zipkin/Annotation.java": [
                    "public boolean zipkin.Annotation.equals(Object o)"
                ],
                "zipkin/src/main/java/zipkin/BinaryAnnotation.java": [
                    "public static BinaryAnnotation zipkin.BinaryAnnotation.create(String key, String value, @Nullable Endpoint endpoint)",
                    "public boolean zipkin.BinaryAnnotation.equals(Object o)"
                ]
            },
            "bf5fa50788844dd4db4f622b9819afa0f4282b24": {
                "zipkin/src/main/java/zipkin/Annotation.java": [
                    "public boolean zipkin.Annotation.equals(Object o)"
                ],
                "zipkin/src/main/java/zipkin/BinaryAnnotation.java": [
                    "public static BinaryAnnotation zipkin.BinaryAnnotation.create(String key, String value, @Nullable Endpoint endpoint)",
                    "public boolean zipkin.BinaryAnnotation.equals(Object o)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a40ebcb47986ed1efb85a0543a17611d78404eb2",
        "previous_commit": "ec0b80fc245cd19486292f20795fdf7c8bc63fa1",
        "date": 1529649683,
        "releases": {
            "previous": "a40ebcb47986ed1efb85a0543a17611d78404eb2",
            "next": "a40ebcb47986ed1efb85a0543a17611d78404eb2"
        },
        "commit_message": "Fixes accidental ID zero when parsing empty strings\n\nGlitches noticed when updating Wingtips, which has tests for these.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a40ebcb47986ed1efb85a0543a17611d78404eb2": {
                "zipkin2/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.id(String id)",
                    "public static String zipkin2.Span.normalizeTraceId(String traceId)",
                    "public Builder zipkin2.Span.parentId(@Nullable String parentId)"
                ]
            },
            "ec0b80fc245cd19486292f20795fdf7c8bc63fa1": {
                "zipkin2/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.id(String id)",
                    "public static String zipkin2.Span.normalizeTraceId(String traceId)",
                    "public Builder zipkin2.Span.parentId(@Nullable String parentId)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a687c4990d372c93b363cdacfe7469d578b6cff4",
        "previous_commit": "874351a56d87b518faa683744e1c5dc895124ad7",
        "date": 1550360435,
        "releases": {
            "previous": "a687c4990d372c93b363cdacfe7469d578b6cff4",
            "next": "a687c4990d372c93b363cdacfe7469d578b6cff4"
        },
        "commit_message": "Fixes bugs in the Cassandra v1 impl (#2396)\n\nStorage cache cleared on check, not close\r\nStorage cache clearing blindly accessed a potentially null ref.\r\n\r\nFixes #2392",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a687c4990d372c93b363cdacfe7469d578b6cff4": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "void zipkin2.storage.cassandra.v1.CassandraSpanConsumer.clear()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public CheckResult zipkin2.storage.cassandra.v1.CassandraStorage.check()",
                    "public void zipkin2.storage.cassandra.v1.CassandraStorage.close()"
                ]
            },
            "874351a56d87b518faa683744e1c5dc895124ad7": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "void zipkin2.storage.cassandra.v1.CassandraSpanConsumer.clear()"
                ],
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public CheckResult zipkin2.storage.cassandra.v1.CassandraStorage.check()",
                    "public void zipkin2.storage.cassandra.v1.CassandraStorage.close()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "946b96ce18e9b5cdc31bb447bcf09dc1df383f0f",
        "previous_commit": "72bd5a08cd12571e7a1fff9f674f9b0200a21f22",
        "date": 1583921263,
        "releases": {
            "previous": "946b96ce18e9b5cdc31bb447bcf09dc1df383f0f",
            "next": "946b96ce18e9b5cdc31bb447bcf09dc1df383f0f"
        },
        "commit_message": "Fixes incorrect handling of getTrace and IT access modifiers (#3019)\n\nI noticed porting zipkin-voltdb to latest, that we incorrectly handled\r\ngetTrace in some places. Basically, we treated a non-nullable result as\r\nnullable. This fixes that and also corrects method protection so that\r\nsubclasses of the IT can override (ex to ignore).",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "946b96ce18e9b5cdc31bb447bcf09dc1df383f0f": {
                "zipkin-junit/src/main/java/zipkin2/junit/ZipkinRule.java": [
                    "public List<Span> zipkin2.junit.ZipkinRule.getTrace(String traceId)"
                ],
                "zipkin/src/main/java/zipkin2/internal/TracesAdapter.java": [
                    "protected void zipkin2.internal.TracesAdapter.append(List<Span> input, List<List<Span>> output)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "public synchronized Call<List<Span>> zipkin2.storage.InMemoryStorage.getTrace(String traceId)"
                ]
            },
            "72bd5a08cd12571e7a1fff9f674f9b0200a21f22": {
                "zipkin-junit/src/main/java/zipkin2/junit/ZipkinRule.java": [
                    "public List<Span> zipkin2.junit.ZipkinRule.getTrace(String traceId)"
                ],
                "zipkin/src/main/java/zipkin2/internal/TracesAdapter.java": [
                    "protected void zipkin2.internal.TracesAdapter.append(List<Span> input, List<List<Span>> output)"
                ],
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "public synchronized Call<List<Span>> zipkin2.storage.InMemoryStorage.getTrace(String traceId)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9f671ebfaf511e7dea413be38facd7b9de53572f",
        "previous_commit": "d3c4308368c483fb6e0f0b799517881720d2e7e8",
        "date": 1468377928,
        "releases": {
            "previous": "9f671ebfaf511e7dea413be38facd7b9de53572f",
            "next": "9f671ebfaf511e7dea413be38facd7b9de53572f"
        },
        "commit_message": "Adds SELF_TRACING_SAMPLE_RATE and fixes a C* self-tracing exception (#1182)\n\nProduction sites should never run 100% self-tracing. This adds a\r\nparameter to control the rate.\r\n\r\nThis also fixes a mistake where self-tracing could result in a state\r\nexception. By logging instead, self-tracing is less dangerous in\r\nproduction.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9f671ebfaf511e7dea413be38facd7b9de53572f": {
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/brave/TracedSession.java": [
                    "protected Object zipkin.autoconfigure.storage.cassandra.brave.TracedSession.handleInvocation(Object proxy, Method method, Object[] args)",
                    "public void zipkin.autoconfigure.storage.cassandra.brave.TracedSession.addListener(Runnable listener, Executor executor)",
                    "public void zipkin.autoconfigure.storage.cassandra.brave.TracedSession.update(Host host, Statement statement, Exception e, long nanos)"
                ]
            },
            "d3c4308368c483fb6e0f0b799517881720d2e7e8": {
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/brave/TracedSession.java": [
                    "protected Object zipkin.autoconfigure.storage.cassandra.brave.TracedSession.handleInvocation(Object proxy, Method method, Object[] args)",
                    "public void zipkin.autoconfigure.storage.cassandra.brave.TracedSession.addListener(Runnable listener, Executor executor)",
                    "public void zipkin.autoconfigure.storage.cassandra.brave.TracedSession.update(Host host, Statement statement, Exception e, long nanos)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5bc7a894043e9d8fa932f167c0af32f960bb7aef",
        "previous_commit": "2d41a5f6fab8dbceae9ac35520b960ef44507973",
        "date": 1552959831,
        "releases": {
            "previous": "5bc7a894043e9d8fa932f167c0af32f960bb7aef",
            "next": "5bc7a894043e9d8fa932f167c0af32f960bb7aef"
        },
        "commit_message": "Fix InterruptedException when KafkaCollectorWorker stops (#2450)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5bc7a894043e9d8fa932f167c0af32f960bb7aef": {
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollector.java": [
                    "public void zipkin2.collector.kafka.KafkaCollector.close()",
                    "void zipkin2.collector.kafka.KafkaCollector.close()"
                ],
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollectorWorker.java": [
                    "public void zipkin2.collector.kafka.KafkaCollectorWorker.run()"
                ]
            },
            "2d41a5f6fab8dbceae9ac35520b960ef44507973": {
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollector.java": [
                    "public void zipkin2.collector.kafka.KafkaCollector.close()",
                    "void zipkin2.collector.kafka.KafkaCollector.close()"
                ],
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollectorWorker.java": [
                    "public void zipkin2.collector.kafka.KafkaCollectorWorker.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fd0376cdc4704053169901f4a18f9a125092f68b",
        "previous_commit": "a762a03f59e61d396cc335cd7202076390a19712",
        "date": 1568374436,
        "releases": {
            "previous": "fd0376cdc4704053169901f4a18f9a125092f68b",
            "next": "fd0376cdc4704053169901f4a18f9a125092f68b"
        },
        "commit_message": "Deletes code no longer needed regarding state checking of ES hosts (#2800)\n\nWe no longer need two-tiered checking of ES addresses because single\r\nendpoint is special cased to not cause notable overhead.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fd0376cdc4704053169901f4a18f9a125092f68b": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/InitialEndpointSupplier.java": [
                    "public EndpointGroup zipkin2.server.internal.elasticsearch.InitialEndpointSupplier.get()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "HealthCheckedEndpointGroup zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.decorateHealthCheck(EndpointGroup endpointGroup)",
                    "Endpoint zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.getEndpoint()"
                ]
            },
            "a762a03f59e61d396cc335cd7202076390a19712": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/InitialEndpointSupplier.java": [
                    "public EndpointGroup zipkin2.server.internal.elasticsearch.InitialEndpointSupplier.get()"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "HealthCheckedEndpointGroup zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.decorateHealthCheck(EndpointGroup endpointGroup)",
                    "Endpoint zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.getEndpoint()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ba5d47ca53846dfb6ab32832ccae5fbbf2d11cd7",
        "previous_commit": "4afa5d8f25195e9d2fa77b78e679d2ebb73d265d",
        "date": 1543823531,
        "releases": {
            "previous": "ba5d47ca53846dfb6ab32832ccae5fbbf2d11cd7",
            "next": "ba5d47ca53846dfb6ab32832ccae5fbbf2d11cd7"
        },
        "commit_message": "Fixes regression found in spark dependencies job\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ba5d47ca53846dfb6ab32832ccae5fbbf2d11cd7": {
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.merge(Span source)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Trace.java": [
                    "public int zipkin2.internal.Trace.compare(Span left, Span right)",
                    "public static List<Span> zipkin2.internal.Trace.merge(List<Span> spans)"
                ]
            },
            "4afa5d8f25195e9d2fa77b78e679d2ebb73d265d": {
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.merge(Span source)"
                ],
                "zipkin/src/main/java/zipkin2/internal/Trace.java": [
                    "public int zipkin2.internal.Trace.compare(Span left, Span right)",
                    "public static List<Span> zipkin2.internal.Trace.merge(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5963df6cc53ca546b2055168252c506189c7f6fc",
        "previous_commit": "8f47208e719a9476b39e029d5eec1aa2385e3f39",
        "date": 1551912744,
        "releases": {
            "previous": "5963df6cc53ca546b2055168252c506189c7f6fc",
            "next": "5963df6cc53ca546b2055168252c506189c7f6fc"
        },
        "commit_message": "Converts to armeria server (#2348)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5963df6cc53ca546b2055168252c506189c7f6fc": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "public void zipkin2.server.internal.CompletableCallback.onError(Throwable t)",
                    "public void zipkin2.server.internal.CompletableCallback.onSuccess(Void value)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingConfiguration.java": [
                    "CurrentTraceContext zipkin2.server.internal.brave.TracingConfiguration.currentTraceContext()"
                ]
            },
            "8f47208e719a9476b39e029d5eec1aa2385e3f39": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "public void zipkin2.server.internal.ZipkinHttpCollector.onError(Throwable t)",
                    "public void zipkin2.server.internal.ZipkinHttpCollector.onSuccess(Void value)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingConfiguration.java": [
                    "CurrentTraceContext zipkin2.server.internal.brave.TracingConfiguration.currentTraceContext()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9777c9bd7121958adbb8cfd272f00f9f08d50ac1",
        "previous_commit": "69879499d6383d6d32abd7f2e71738c61df3b879",
        "date": 1474451771,
        "releases": {
            "previous": "9777c9bd7121958adbb8cfd272f00f9f08d50ac1",
            "next": "9777c9bd7121958adbb8cfd272f00f9f08d50ac1"
        },
        "commit_message": "Deprecates Endpoint.create(String,int,int) as it leads to null pointers (#1309)\n\nMultiple people have been bitten by `Endpoint.create(String,int,int)` as\r\n`Endpoint.port` is nullable. This deprecates that method and advises to\r\nuse a better documented builder method or simply `Endpoint.toBuilder()`\r\nwhen copying an endpoint.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9777c9bd7121958adbb8cfd272f00f9f08d50ac1": {
                "zipkin-autoconfigure/storage-mysql/src/main/java/zipkin/autoconfigure/storage/mysql/brave/TraceZipkinMySQLStorageAutoConfiguration.java": [
                    "Endpoint zipkin.autoconfigure.storage.mysql.brave.TraceZipkinMySQLStorageAutoConfiguration.mysql()"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public Endpoint zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public Endpoint zipkin.internal.ThriftCodec.read(ByteBuffer bytes)"
                ]
            },
            "69879499d6383d6d32abd7f2e71738c61df3b879": {
                "zipkin-autoconfigure/storage-mysql/src/main/java/zipkin/autoconfigure/storage/mysql/brave/TraceZipkinMySQLStorageAutoConfiguration.java": [
                    "Endpoint zipkin.autoconfigure.storage.mysql.brave.TraceZipkinMySQLStorageAutoConfiguration.mysql()"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public Endpoint zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ],
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public Endpoint zipkin.internal.ThriftCodec.read(ByteBuffer bytes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f1b1ec762298a030c3f5268b333711164a63c85d",
        "previous_commit": "d90799fcb3dec0f74623a602770a6e2f54adfdf8",
        "date": 1562112590,
        "releases": {
            "previous": "f1b1ec762298a030c3f5268b333711164a63c85d",
            "next": "f1b1ec762298a030c3f5268b333711164a63c85d"
        },
        "commit_message": "Bumps to latest, notably Armeria (#2647)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f1b1ec762298a030c3f5268b333711164a63c85d": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingConfiguration.java": [
                    "CurrentTraceContext zipkin2.server.internal.brave.TracingConfiguration.currentTraceContext()",
                    "ArmeriaServerConfigurator zipkin2.server.internal.brave.TracingConfiguration.tracingConfigurator(Tracing tracing)",
                    "public CheckResult zipkin2.server.internal.brave.TracingConfiguration.check()"
                ]
            },
            "d90799fcb3dec0f74623a602770a6e2f54adfdf8": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingConfiguration.java": [
                    "CurrentTraceContext zipkin2.server.internal.brave.TracingConfiguration.currentTraceContext()",
                    "ArmeriaServerConfigurator zipkin2.server.internal.brave.TracingConfiguration.tracingConfigurator(Tracing tracing)",
                    "public CheckResult zipkin2.server.internal.brave.TracingConfiguration.check()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4a30b8cbbc8a08bbc2144e148936eec2caae7520",
        "previous_commit": "53d790c407ad501246066de24c46746cdbdb53c7",
        "date": 1462330701,
        "releases": {
            "previous": "4a30b8cbbc8a08bbc2144e148936eec2caae7520",
            "next": "4a30b8cbbc8a08bbc2144e148936eec2caae7520"
        },
        "commit_message": "Adds cassandra client-side self-tracing\n\npropagation penciled in for later\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4a30b8cbbc8a08bbc2144e148936eec2caae7520": {
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraStorage.java": [
                    "protected CassandraSpanConsumer zipkin.cassandra.CassandraStorage.computeGuavaSpanConsumer()",
                    "void zipkin.cassandra.CassandraStorage.clear()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/Schema.java": [
                    "static Map<String, String> zipkin.cassandra.Schema.readMetadata(Session session)"
                ]
            },
            "53d790c407ad501246066de24c46746cdbdb53c7": {
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/CassandraStorage.java": [
                    "protected CassandraSpanConsumer zipkin.cassandra.CassandraStorage.computeGuavaSpanConsumer()",
                    "void zipkin.cassandra.CassandraStorage.clear()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/cassandra/Schema.java": [
                    "static Map<String, String> zipkin.cassandra.Schema.readMetadata(String keyspace, Session session)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c1440149426477c30a8b84e22a9392ad0704179b",
        "previous_commit": "2fe6f18134a129751c31d521bcd00902a977a86e",
        "date": 1474433020,
        "releases": {
            "previous": "c1440149426477c30a8b84e22a9392ad0704179b",
            "next": "c1440149426477c30a8b84e22a9392ad0704179b"
        },
        "commit_message": "storage: provide http-based elasticsearch client\n\nTaking advantage of & expanding the previous commit's shim, this chnage\nintroduces an elasticsearch client that operates over the HTTP(S)\nprotocol. This commit's functional changes are minimal, limited to\nrestricting flushes on a few operations to the desired indices\ninstead of globally.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c1440149426477c30a8b84e22a9392ad0704179b": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/LazyClient.java": [
                    "protected InternalElasticsearchClient zipkin.storage.elasticsearch.LazyClient.compute()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/NativeClient.java": [
                    "public Builder zipkin.storage.elasticsearch.NativeClient.flushOnWrites(boolean flushOnWrites)",
                    "public ListenableFuture<Void> zipkin.storage.elasticsearch.NativeClient.indexSpans(List<IndexableSpan> spans)"
                ]
            },
            "2fe6f18134a129751c31d521bcd00902a977a86e": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/LazyClient.java": [
                    "protected InternalElasticsearchClient zipkin.storage.elasticsearch.LazyClient.compute()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/NativeClient.java": [
                    "public Builder zipkin.storage.elasticsearch.NativeClient.flushOnWrites(boolean flushOnWrites)",
                    "public ListenableFuture<Void> zipkin.storage.elasticsearch.NativeClient.indexSpans(List<IndexableSpan> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8f99f3cf44cbcdc678b9ae845d501ba2fc2422a4",
        "previous_commit": "14325ea1b1d1b3c0c3947dfd50098625226fba34",
        "date": 1528683737,
        "releases": {
            "previous": "8f99f3cf44cbcdc678b9ae845d501ba2fc2422a4",
            "next": "8f99f3cf44cbcdc678b9ae845d501ba2fc2422a4"
        },
        "commit_message": "Migrates zipkin-junit to zipkin2 packages dropping http read apis\n\nThe read apis for zipkin's query interface are not required in a unit\ntest, as you can just access the rule to query for dependencies or\ntraces you sent. Restricting this functionality dramatically reduces\nthe maintenance surface area.\n\nSee #2047\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8f99f3cf44cbcdc678b9ae845d501ba2fc2422a4": {
                "zipkin2/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public String zipkin2.internal.JsonCodec.toString()"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V1JsonSpanWriter.java": [
                    "public void zipkin2.internal.V1JsonSpanWriter.write(Span value, Buffer b)",
                    "public int zipkin2.internal.V1JsonSpanWriter.sizeInBytes(Span value)"
                ]
            },
            "14325ea1b1d1b3c0c3947dfd50098625226fba34": {
                "zipkin2/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public String zipkin2.internal.JsonCodec.toString()"
                ],
                "zipkin2/src/main/java/zipkin2/internal/V1JsonSpanWriter.java": [
                    "public void zipkin2.internal.V1JsonSpanWriter.write(Span value, Buffer b)",
                    "public int zipkin2.internal.V1JsonSpanWriter.sizeInBytes(Span value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4d36208c0166adf9b85a3f73d8b05d601ad3d592",
        "previous_commit": "15f64f6a5d921f3c9b57402f6d3201531f471ca4",
        "date": 1519047746,
        "releases": {
            "previous": "4d36208c0166adf9b85a3f73d8b05d601ad3d592",
            "next": "4d36208c0166adf9b85a3f73d8b05d601ad3d592"
        },
        "commit_message": "Allow the RabbitMQ collector to be configured via URI (#1922)\n\nIn addition to the existing methods for configuration, this adds the ability to configure the RabbitMQ server to connect to via a RabbitMQ URI spec-compliant URI. When the URI is used, the other connection properties will be ignored, since they should be set via the URI.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4d36208c0166adf9b85a3f73d8b05d601ad3d592": {
                "zipkin-autoconfigure/collector-rabbitmq/src/main/java/zipkin/autoconfigure/collector/rabbitmq/ZipkinRabbitMQCollectorAutoConfiguration.java": [
                    "public boolean zipkin.autoconfigure.collector.rabbitmq.ZipkinRabbitMQCollectorAutoConfiguration.matches(ConditionContext context, AnnotatedTypeMetadata a)"
                ],
                "zipkin-autoconfigure/collector-rabbitmq/src/main/java/zipkin/autoconfigure/collector/rabbitmq/ZipkinRabbitMQCollectorProperties.java": [
                    "public RabbitMQCollector.Builder zipkin.autoconfigure.collector.rabbitmq.ZipkinRabbitMQCollectorProperties.toBuilder()"
                ],
                "zipkin-collector/rabbitmq/src/main/java/zipkin/collector/rabbitmq/RabbitMQCollector.java": [
                    "protected Connection zipkin.collector.rabbitmq.RabbitMQCollector.compute()"
                ]
            },
            "15f64f6a5d921f3c9b57402f6d3201531f471ca4": {
                "zipkin-autoconfigure/collector-rabbitmq/src/main/java/zipkin/autoconfigure/collector/rabbitmq/ZipkinRabbitMQCollectorAutoConfiguration.java": [
                    "public boolean zipkin.autoconfigure.collector.rabbitmq.ZipkinRabbitMQCollectorAutoConfiguration.matches(ConditionContext context, AnnotatedTypeMetadata a)"
                ],
                "zipkin-autoconfigure/collector-rabbitmq/src/main/java/zipkin/autoconfigure/collector/rabbitmq/ZipkinRabbitMQCollectorProperties.java": [
                    "public RabbitMQCollector.Builder zipkin.autoconfigure.collector.rabbitmq.ZipkinRabbitMQCollectorProperties.toBuilder()"
                ],
                "zipkin-collector/rabbitmq/src/main/java/zipkin/collector/rabbitmq/RabbitMQCollector.java": [
                    "protected Connection zipkin.collector.rabbitmq.RabbitMQCollector.compute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8bfab5af77e39b00b9fc946133ee648080706a48",
        "previous_commit": "0a6ce574c15053315d80df9fa13b2926653f100d",
        "date": 1518401836,
        "releases": {
            "previous": "8bfab5af77e39b00b9fc946133ee648080706a48",
            "next": "8bfab5af77e39b00b9fc946133ee648080706a48"
        },
        "commit_message": "fixes formatting\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8bfab5af77e39b00b9fc946133ee648080706a48": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkV2SpanIterator.java": [
                    "public Span zipkin.storage.mysql.DependencyLinkV2SpanIterator.next()",
                    "public Iterator<Span> zipkin.storage.mysql.DependencyLinkV2SpanIterator.next()"
                ],
                "zipkin2/src/main/java/zipkin2/internal/Node.java": [
                    "public Node<V> zipkin2.internal.Node<V>.next()"
                ]
            },
            "0a6ce574c15053315d80df9fa13b2926653f100d": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkV2SpanIterator.java": [
                    "public Span zipkin.storage.mysql.DependencyLinkV2SpanIterator.next()",
                    "public Iterator<Span> zipkin.storage.mysql.DependencyLinkV2SpanIterator.next()"
                ],
                "zipkin2/src/main/java/zipkin2/internal/Node.java": [
                    "public Node<V> zipkin2.internal.Node<V>.next()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d22f91f80cf9015ac42f01c3ae582a43bde18194",
        "previous_commit": "2a4cbdb6ae26e7c64583b883d499a124d41a7724",
        "date": 1707321708,
        "releases": {
            "previous": "d22f91f80cf9015ac42f01c3ae582a43bde18194",
            "next": "d22f91f80cf9015ac42f01c3ae582a43bde18194"
        },
        "commit_message": "Updates to Armeria 1.27.1 and fixes Eureka VIP registration bug (#3715)\n\nThis updates to latest Armeria 1.27.0, which removes some tech debt.\r\nThis also fixes a bug in the default behavior of Armeria, which is that\r\nit sets a `host:port` value for the VIP address in Eureka. While the\r\n`instanceId` needs to be qualified with port, the VIP address must not,\r\nas there's already a port field.\r\n\r\nSigned-off-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d22f91f80cf9015ac42f01c3ae582a43bde18194": {
                "zipkin-server/src/main/java/zipkin2/server/internal/eureka/ZipkinEurekaDiscoveryProperties.java": [
                    "EurekaUpdatingListenerBuilder zipkin2.server.internal.eureka.ZipkinEurekaDiscoveryProperties.toBuilder()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BulkCallBuilder.java": [
                    "public Void zipkin2.elasticsearch.internal.BulkCallBuilder.convert(JsonParser parser, Supplier<String> contentString)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "V zipkin2.elasticsearch.internal.client.HttpCall<V>.parseResponse(AggregatedHttpResponse response, BodyConverter<V> bodyConverter)"
                ]
            },
            "2a4cbdb6ae26e7c64583b883d499a124d41a7724": {
                "zipkin-server/src/main/java/zipkin2/server/internal/eureka/ZipkinEurekaDiscoveryProperties.java": [
                    "EurekaUpdatingListenerBuilder zipkin2.server.internal.eureka.ZipkinEurekaDiscoveryProperties.toBuilder()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/BulkCallBuilder.java": [
                    "public Void zipkin2.elasticsearch.internal.BulkCallBuilder.convert(JsonParser parser, Supplier<String> contentString)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "V zipkin2.elasticsearch.internal.client.HttpCall<V>.parseResponse(AggregatedHttpResponse response, BodyConverter<V> bodyConverter)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "fefaa8e566ba0dc86b04a648e3b9da84f824210a",
        "previous_commit": "b7207dde1a4f2164cc4437698c08da78f3736f1e",
        "date": 1498738966,
        "releases": {
            "previous": "fefaa8e566ba0dc86b04a648e3b9da84f824210a",
            "next": "fefaa8e566ba0dc86b04a648e3b9da84f824210a"
        },
        "commit_message": "Fixes bug where self-referencing spans NPE on dependency links (#1640)\n\nInstead, this allocates self-referencing spans as direct children of the\r\nroot span.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fefaa8e566ba0dc86b04a648e3b9da84f824210a": {
                "zipkin/src/main/java/zipkin/internal/Node.java": [
                    "public Node<V> zipkin.internal.Node<V>.addChild(Node<V> child)",
                    "public Node<V> zipkin.internal.Node<V>.value(V newValue)",
                    "public Node<V> zipkin.internal.Node<V>.build()"
                ]
            },
            "b7207dde1a4f2164cc4437698c08da78f3736f1e": {
                "zipkin/src/main/java/zipkin/internal/Node.java": [
                    "public Node<V> zipkin.internal.Node<V>.addChild(Node<V> child)",
                    "public Node<V> zipkin.internal.Node<V>.value(V newValue)",
                    "public Node<V> zipkin.internal.Node<V>.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "22e41aaa1643f43f92fe02141469901fc955ac14",
        "previous_commit": "efb18ab991a61ac35c2cd6033ed0cf032b948adc",
        "date": 1519996694,
        "releases": {
            "previous": "22e41aaa1643f43f92fe02141469901fc955ac14",
            "next": "22e41aaa1643f43f92fe02141469901fc955ac14"
        },
        "commit_message": "Allows no date separator in Elasticsearch (#1941)\n\nBefore, you couldn't opt-out of a date separator in ES indexes. Now,\r\nyou can. Just export ES_DATE_SEPARATOR=    (leave it empty)\r\n\r\nFixes #1925",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "22e41aaa1643f43f92fe02141469901fc955ac14": {
                "zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchHttpStorageProperties.java": [
                    "public ElasticsearchHttpStorage.Builder zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageProperties.toBuilder(OkHttpClient client)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/IndexNameFormatter.java": [
                    "public final IndexNameFormatter zipkin2.elasticsearch.internal.IndexNameFormatter.build()",
                    "protected SimpleDateFormat zipkin2.elasticsearch.internal.IndexNameFormatter.initialValue()"
                ]
            },
            "efb18ab991a61ac35c2cd6033ed0cf032b948adc": {
                "zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchHttpStorageProperties.java": [
                    "public ElasticsearchHttpStorage.Builder zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageProperties.toBuilder(OkHttpClient client)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/IndexNameFormatter.java": [
                    "public final IndexNameFormatter zipkin2.elasticsearch.internal.IndexNameFormatter.build()",
                    "protected SimpleDateFormat zipkin2.elasticsearch.internal.IndexNameFormatter.initialValue()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c3358f3473987bc75d5489c0c9f2730e320e2606",
        "previous_commit": "5d36ab8d852852c947a9317c2191899b4118e8f7",
        "date": 1563788432,
        "releases": {
            "previous": "c3358f3473987bc75d5489c0c9f2730e320e2606",
            "next": "c3358f3473987bc75d5489c0c9f2730e320e2606"
        },
        "commit_message": "Run span accepting logic on blocking executor. (#2703)\n\n* Eagerly initialize storage components since they often run blocking logic in constructors.\r\n\r\n* Accept spans blocking\r\n\r\n* Update comment and accept gRPC spans in blocking executor too.\r\n\r\n* Clean\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c3358f3473987bc75d5489c0c9f2730e320e2606": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinGrpcCollector.java": [
                    "protected CompletableFuture<ByteBuf> zipkin2.server.internal.ZipkinGrpcCollector.handleMessage(ByteBuf bytes)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "protected V zipkin2.elasticsearch.internal.client.HttpCall<V>.doExecute()"
                ]
            },
            "5d36ab8d852852c947a9317c2191899b4118e8f7": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinGrpcCollector.java": [
                    "protected CompletableFuture<ByteBuf> zipkin2.server.internal.ZipkinGrpcCollector.handleMessage(ByteBuf bytes)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "protected V zipkin2.elasticsearch.internal.client.HttpCall<V>.doExecute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "92ae8ca040729267785ebc3809c1aaacc62626c8",
        "previous_commit": "712de3d26a27877536c8a35703543f0eab6b21bf",
        "date": 1571623257,
        "releases": {
            "previous": "92ae8ca040729267785ebc3809c1aaacc62626c8",
            "next": "92ae8ca040729267785ebc3809c1aaacc62626c8"
        },
        "commit_message": "Updates to Spring Boot 2.2 and stops using proxyBeanMethods (#2864)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "92ae8ca040729267785ebc3809c1aaacc62626c8": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinConfiguration.java": [
                    "public Object zipkin2.server.internal.ZipkinConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/cassandra/ZipkinCassandraStorageConfiguration.java": [
                    "public Object zipkin2.server.internal.cassandra.ZipkinCassandraStorageConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/cassandra3/ZipkinCassandra3StorageConfiguration.java": [
                    "public Object zipkin2.server.internal.cassandra3.ZipkinCassandra3StorageConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ]
            },
            "712de3d26a27877536c8a35703543f0eab6b21bf": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinConfiguration.java": [
                    "public Object zipkin2.server.internal.ZipkinConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/cassandra/ZipkinCassandraStorageConfiguration.java": [
                    "public Object zipkin2.server.internal.cassandra.ZipkinCassandraStorageConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/cassandra3/ZipkinCassandra3StorageConfiguration.java": [
                    "public Object zipkin2.server.internal.cassandra3.ZipkinCassandra3StorageConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "eee7db16c3ba859f218e3d1f6d1345654bd4f794",
        "previous_commit": "b2c3627a2c2d59d2789683dd15f1985356a20ea6",
        "date": 1461932500,
        "releases": {
            "previous": "eee7db16c3ba859f218e3d1f6d1345654bd4f794",
            "next": "eee7db16c3ba859f218e3d1f6d1345654bd4f794"
        },
        "commit_message": "Doubles performance of CountingTraceIdSampler while increasing precision\n\nThis doubles the performance and increases the precision of the counting\ntrace ID sampler by using a bitset. After this, both the boundary and\ncounting sampler support a precision of 0.0001, or 0.01% sample rate.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "eee7db16c3ba859f218e3d1f6d1345654bd4f794": {
                "zipkin/src/main/java/zipkin/CountingTraceIdSampler.java": [
                    "public String zipkin.CountingTraceIdSampler.toString()",
                    "public static TraceIdSampler zipkin.CountingTraceIdSampler.create(final float rate)",
                    "public synchronized boolean zipkin.CountingTraceIdSampler.isSampled(long traceIdIgnored)"
                ]
            },
            "b2c3627a2c2d59d2789683dd15f1985356a20ea6": {
                "zipkin/src/main/java/zipkin/CountingTraceIdSampler.java": [
                    "public String zipkin.CountingTraceIdSampler.toString()",
                    "public static TraceIdSampler zipkin.CountingTraceIdSampler.create(final float rate)",
                    "public synchronized boolean zipkin.CountingTraceIdSampler.isSampled(long traceIdIgnored)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f309c19345069eb09604f09858d427bdb1d3e18a",
        "previous_commit": "9f8ace82544de031a7bab9be1d9b04a310d512d9",
        "date": 1518659448,
        "releases": {
            "previous": "f309c19345069eb09604f09858d427bdb1d3e18a",
            "next": "f309c19345069eb09604f09858d427bdb1d3e18a"
        },
        "commit_message": "Installs Cassandra UDT keyspace only when allowed (#1918)\n\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f309c19345069eb09604f09858d427bdb1d3e18a": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "private static void zipkin2.storage.cassandra.DefaultSessionFactory.initializeUDTs(Session session)",
                    "public Session zipkin2.storage.cassandra.DefaultSessionFactory.create(CassandraStorage cassandra)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, Session session)"
                ]
            },
            "9f8ace82544de031a7bab9be1d9b04a310d512d9": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "private static void zipkin2.storage.cassandra.DefaultSessionFactory.initializeUDTs(Session session)",
                    "public Session zipkin2.storage.cassandra.DefaultSessionFactory.create(CassandraStorage cassandra)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, Session session)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "278b484e3ea116831b05ce5ad042045ac717d729",
        "previous_commit": "ee017d8a8bee21ee07cceaf842b3bfa49879b3cf",
        "date": 1459599003,
        "releases": {
            "previous": "278b484e3ea116831b05ce5ad042045ac717d729",
            "next": "278b484e3ea116831b05ce5ad042045ac717d729"
        },
        "commit_message": "Adds SpanConsumerLogger to make logging consistent across transports\n\nCommon logging patterns for span consumption lead to a consistent\ntroubleshooting experience, despite transport diversity.\n\nEx.\n```bash\n$ curl -X POST -s localhost:9411/api/v1/spans -d 'asdsadas'\nCannot decode spans due to IllegalArgumentException(Malformed reading List<Span> from json: asdsadas=)\n```\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "278b484e3ea116831b05ce5ad042045ac717d729": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinHttpTransport.java": [
                    "ResponseEntity<?> zipkin.server.ZipkinHttpTransport.validateAndStoreSpans(String encoding, Codec codec, byte[] body)"
                ],
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/SpansDecoder.java": [
                    "public List<Span> zipkin.kafka.SpansDecoder.fromBytes(byte[] bytes)"
                ]
            },
            "ee017d8a8bee21ee07cceaf842b3bfa49879b3cf": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinHttpTransport.java": [
                    "private ResponseEntity<?> zipkin.server.ZipkinHttpTransport.validateAndStoreSpans(String encoding, Codec codec, byte[] body)"
                ],
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/SpansDecoder.java": [
                    "public List<Span> zipkin.kafka.SpansDecoder.fromBytes(byte[] bytes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ce7d386cc67c0700bc805c017e1462d4262082d6",
        "previous_commit": "dda05b04bb5d83fe787e6aeef5afb8159720d18e",
        "date": 1478083748,
        "releases": {
            "previous": "ce7d386cc67c0700bc805c017e1462d4262082d6",
            "next": "ce7d386cc67c0700bc805c017e1462d4262082d6"
        },
        "commit_message": "Adds tests for mixed trace ID length and fixes cassandra3 trace ID codec (#1380)\n\nThis adds tests to ensure we can retrieve mixed length trace IDs. Along\r\nthe way, I noticed the cassandra3 trace ID codec was incorrect. I fixed\r\nthis, although I hope we can change the model to not use BigInteger in\r\nthe future.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ce7d386cc67c0700bc805c017e1462d4262082d6": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "ListenableFuture<Collection<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getSpansByTraceIds(Set<BigInteger> traceIds, int limit)",
                    "public Collection<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.apply(ResultSet input)"
                ]
            },
            "dda05b04bb5d83fe787e6aeef5afb8159720d18e": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra3.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "ListenableFuture<Collection<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getSpansByTraceIds(Set<BigInteger> traceIds, int limit)",
                    "public Collection<List<Span>> zipkin.storage.cassandra3.CassandraSpanStore.apply(ResultSet input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e799c80210eb03438bd66808a530c816a74ef930",
        "previous_commit": "81a36c4d3910badb80a9b4af5a4f66ae7acfb7f5",
        "date": 1555034866,
        "releases": {
            "previous": "e799c80210eb03438bd66808a530c816a74ef930",
            "next": "e799c80210eb03438bd66808a530c816a74ef930"
        },
        "commit_message": "Writes own version of HostAndPort to avoid Guava <20 vs >=20 fight (#2493)\n\nWhen we switched our guava version to match gRPC, it implied moving to\r\na HostAndPort method that didn't exist prior. They renamed `getHostText`\r\nto `getHost`. This rewrites the guava functionality, covering more test\r\ncases than it did. Once this is merged, we can release\r\nzipkin-dependencies again, but it is currently rev-locked due to this.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e799c80210eb03438bd66808a530c816a74ef930": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java": [
                    "static List<InetSocketAddress> zipkin2.storage.cassandra.v1.Default.parseContactPoints(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "static List<InetSocketAddress> zipkin2.storage.cassandra.DefaultSessionFactory.parseContactPoints(CassandraStorage cassandra)"
                ],
                "zipkin/src/main/java/zipkin2/Endpoint.java": [
                    "boolean zipkin2.Endpoint.parseEmbeddedIPv4(byte[] ipv6)"
                ]
            },
            "81a36c4d3910badb80a9b4af5a4f66ae7acfb7f5": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java": [
                    "static List<InetSocketAddress> zipkin2.storage.cassandra.v1.Default.parseContactPoints(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "static List<InetSocketAddress> zipkin2.storage.cassandra.DefaultSessionFactory.parseContactPoints(CassandraStorage cassandra)"
                ],
                "zipkin/src/main/java/zipkin2/Endpoint.java": [
                    "boolean zipkin2.Endpoint.parseEmbeddedIPv4(byte[] ipv6)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a4d145dfcb27e763d4593f6f5cb5a6d7df83c1be",
        "previous_commit": "18672623fd49ed20d439ca0c2ecbae788401a22c",
        "date": 1557924267,
        "releases": {
            "previous": "a4d145dfcb27e763d4593f6f5cb5a6d7df83c1be",
            "next": "a4d145dfcb27e763d4593f6f5cb5a6d7df83c1be"
        },
        "commit_message": "Decode ByteBuffer directly where possible. (#2595)\n\n* Decode ByteBuffer directly where possible.\r\n\r\n* Move empty check after empty JSON massaging, and don't increment dropped messages both before returning an exception and when handling the exception.\r\n\r\n* Fix bytebuffer wrapping.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a4d145dfcb27e763d4593f6f5cb5a6d7df83c1be": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "public void zipkin2.server.internal.CompletableCallback.onSuccess(Void value)"
                ],
                "zipkin/src/main/java/zipkin2/SpanBytesDecoderDetector.java": [
                    "public static BytesDecoder<Span> zipkin2.SpanBytesDecoderDetector.decoderForListMessage(byte[] spans)",
                    "public static BytesDecoder<Span> zipkin2.SpanBytesDecoderDetector.decoderForMessage(byte[] span)"
                ]
            },
            "18672623fd49ed20d439ca0c2ecbae788401a22c": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "public void zipkin2.server.internal.CompletableCallback.onSuccess(Void value)"
                ],
                "zipkin/src/main/java/zipkin2/SpanBytesDecoderDetector.java": [
                    "public static BytesDecoder<Span> zipkin2.SpanBytesDecoderDetector.decoderForListMessage(byte[] spans)",
                    "public static BytesDecoder<Span> zipkin2.SpanBytesDecoderDetector.decoderForMessage(byte[] span)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7fcfbc42b5322fccdc395270a23bcd7b9b387a4d",
        "previous_commit": "c7b341b9b421e7a57c333a3c9ff54daec8a0501f",
        "date": 1520813397,
        "releases": {
            "previous": "7fcfbc42b5322fccdc395270a23bcd7b9b387a4d",
            "next": "7fcfbc42b5322fccdc395270a23bcd7b9b387a4d"
        },
        "commit_message": "Accomodates server spans who weren't propagated their parent (#1945)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7fcfbc42b5322fccdc395270a23bcd7b9b387a4d": {
                "zipkin2/src/main/java/zipkin2/internal/Node.java": [
                    "public Node<V> zipkin2.internal.Node<V>.build()",
                    "public boolean zipkin2.internal.Node<V>.addNode(@Nullable String parentId, String id, V value)",
                    "public V zipkin2.internal.Node<V>.value()"
                ]
            },
            "c7b341b9b421e7a57c333a3c9ff54daec8a0501f": {
                "zipkin2/src/main/java/zipkin2/internal/Node.java": [
                    "public Node<V> zipkin2.internal.Node<V>.build()",
                    "public boolean zipkin2.internal.Node<V>.addNode(@Nullable String parentId, String id, V value)",
                    "public V zipkin2.internal.Node<V>.value()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1d48abfb20d8929cb7d6190e7b78f99a6a1ab8e7",
        "previous_commit": "6145949935f4000bb50bf4b062fc922850d16555",
        "date": 1566616647,
        "releases": {
            "previous": "1d48abfb20d8929cb7d6190e7b78f99a6a1ab8e7",
            "next": "1d48abfb20d8929cb7d6190e7b78f99a6a1ab8e7"
        },
        "commit_message": "Falls back to simple name and stops prefixing rejected ES exceptions (#2777)\n\nArmeria has a number of constant throwables, which neither have a stack\r\ntrace, nor a message. This switches to use these while we figure out if\r\nthere is a better way to unveil an underlying http connection problem\r\nthe health-check sees, but a health-checked client would not.\r\n\r\nThe approach is used all over in zipkin, most notably Brave.\r\n\r\nThis also stops prefixing RejectionException messages also with the word\r\nas it is annoying to read it twice in toString.\r\n\r\nMost importantly, this unwraps RejectionException in health check as it\r\ndoesn't effectively describe the cause of the problem, rather obfuscates\r\nit.\r\n\r\nBefore:\r\n```bash\r\ncurl -s localhost:9411/health\r\n{\"status\":\"DOWN\",\"zipkin\":{\"status\":\"DOWN\",\"details\":{\"ElasticsearchStorage{initialEndpoints=https://localhost:9200, index=zipkin}\":{\"status\":\"DOWN\",\"details\":{\"error\":\"java.util.concurrent.RejectedExecutionException: Rejected execution: null\"}}}}}\r\n```\r\n\r\nNow:\r\n```bash\r\ncurl -s localhost:9411/health\r\n{\"status\":\"DOWN\",\"zipkin\":{\"status\":\"DOWN\",\"details\":{\"ElasticsearchStorage{initialEndpoints=https://localhost:9200, index=zipkin}\":{\"status\":\"DOWN\",\"details\":{\"error\":\"com.linecorp.armeria.common.ClosedSessionException\"}}}}}\r\n```",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1d48abfb20d8929cb7d6190e7b78f99a6a1ab8e7": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHealthIndicator.java": [
                    "public synchronized Health zipkin2.server.internal.ZipkinHealthIndicator.health()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "CompletableFuture<AggregatedHttpResponse> zipkin2.elasticsearch.internal.client.HttpCall<V>.sendRequest()"
                ]
            },
            "6145949935f4000bb50bf4b062fc922850d16555": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHealthIndicator.java": [
                    "public synchronized Health zipkin2.server.internal.ZipkinHealthIndicator.health()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "CompletableFuture<AggregatedHttpResponse> zipkin2.elasticsearch.internal.client.HttpCall<V>.sendRequest()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3b8d56ac1b817729517e32c7a3d311b7ceaa2fb7",
        "previous_commit": "f674d3205f60733b7d1564e4a8b3d929a8a146f6",
        "date": 1473052867,
        "releases": {
            "previous": "3b8d56ac1b817729517e32c7a3d311b7ceaa2fb7",
            "next": "3b8d56ac1b817729517e32c7a3d311b7ceaa2fb7"
        },
        "commit_message": "Fixes regression writing I64 binary annotations (#1269)\n\nBefore, we special-cased writing numbers, except we had no tests to\r\ncover I64 binary annotations. Eventhough these are niche, they should\r\nwork!",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3b8d56ac1b817729517e32c7a3d311b7ceaa2fb7": {
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "Buffer zipkin.internal.Buffer.writeAscii(long v)",
                    "static int zipkin.internal.Buffer.asciiSizeInBytes(long v)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public BinaryAnnotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ]
            },
            "f674d3205f60733b7d1564e4a8b3d929a8a146f6": {
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "Buffer zipkin.internal.Buffer.writeAscii(long v)",
                    "static int zipkin.internal.Buffer.asciiSizeInBytes(long v)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public BinaryAnnotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3de6c0470ce260be350dca6ed512fbefc4f519c7",
        "previous_commit": "39d1296e9e9ad2014c474a7483b713314ad243d6",
        "date": 1485918971,
        "releases": {
            "previous": "3de6c0470ce260be350dca6ed512fbefc4f519c7",
            "next": "3de6c0470ce260be350dca6ed512fbefc4f519c7"
        },
        "commit_message": "Adds a date separator for elasticsearch index names (#1510)\n\nFixes #1506\r\nCloses #1507",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3de6c0470ce260be350dca6ed512fbefc4f519c7": {
                "zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "ElasticsearchStorage.Builder zipkin.autoconfigure.storage.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder( @Nullable InternalElasticsearchClient.Builder clientBuilder)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/IndexNameFormatter.java": [
                    "protected SimpleDateFormat zipkin.storage.elasticsearch.IndexNameFormatter.initialValue()",
                    "Set<String> zipkin.storage.elasticsearch.IndexNameFormatter.indexNamePatternsForRange(long beginMillis, long endMillis)"
                ]
            },
            "39d1296e9e9ad2014c474a7483b713314ad243d6": {
                "zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "ElasticsearchStorage.Builder zipkin.autoconfigure.storage.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder( @Nullable InternalElasticsearchClient.Builder clientBuilder)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/IndexNameFormatter.java": [
                    "protected SimpleDateFormat zipkin.storage.elasticsearch.IndexNameFormatter.initialValue()",
                    "Set<String> zipkin.storage.elasticsearch.IndexNameFormatter.indexNamePatternsForRange(long beginMillis, long endMillis)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8892aa30842c646daa4157b25e03cd863624bc40",
        "previous_commit": "ca33e30fa3da96d8562c53ea8b5505051ee22675",
        "date": 1503453971,
        "releases": {
            "previous": "8892aa30842c646daa4157b25e03cd863624bc40",
            "next": "8892aa30842c646daa4157b25e03cd863624bc40"
        },
        "commit_message": "Removes double-conversion when collecting into Elasticsearch (#1700)\n\nBefore, when accepting span2 format, we needlessly converted data to and\r\nfrom the legacy Span format. This removes the double-conversion in favor\r\nof a version 2 native span consumer.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8892aa30842c646daa4157b25e03cd863624bc40": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.indexSpans(BulkSpanIndexer indexer, List<Span2> spans)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java": [
                    "public AsyncSpanConsumer zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.asyncSpanConsumer()"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "public void zipkin.collector.Collector.acceptSpans(byte[] serializedSpans, SpanDecoder decoder, Callback<Void> callback)"
                ]
            },
            "ca33e30fa3da96d8562c53ea8b5505051ee22675": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.indexSpans(BulkSpanIndexer indexer, List<Span> spans)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpStorage.java": [
                    "public AsyncSpanConsumer zipkin.storage.elasticsearch.http.ElasticsearchHttpStorage.asyncSpanConsumer()"
                ],
                "zipkin/src/main/java/zipkin/collector/Collector.java": [
                    "public void zipkin.collector.Collector.acceptSpans(byte[] serializedSpans, SpanDecoder decoder, Callback<Void> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f6d03fe1677c121cc961155f5844c09d7d956120",
        "previous_commit": "79681c904401c3f1e50a32080256b08c1ff8ef0e",
        "date": 1518395029,
        "releases": {
            "previous": "f6d03fe1677c121cc961155f5844c09d7d956120",
            "next": "f6d03fe1677c121cc961155f5844c09d7d956120"
        },
        "commit_message": "throws NoSuchElementException exception when no more elements. (#1915)\n\nBy contract, any implementation of the java.util.Iterator.next() method should throw a NoSuchElementException exception when the iteration has no more elements. (#1915)",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f6d03fe1677c121cc961155f5844c09d7d956120": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkV2SpanIterator.java": [
                    "public Span zipkin.storage.mysql.DependencyLinkV2SpanIterator.next()",
                    "public Iterator<Span> zipkin.storage.mysql.DependencyLinkV2SpanIterator.next()"
                ],
                "zipkin2/src/main/java/zipkin2/internal/Node.java": [
                    "public Node<V> zipkin2.internal.Node<V>.next()"
                ]
            },
            "79681c904401c3f1e50a32080256b08c1ff8ef0e": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkV2SpanIterator.java": [
                    "public Span zipkin.storage.mysql.DependencyLinkV2SpanIterator.next()",
                    "public Iterator<Span> zipkin.storage.mysql.DependencyLinkV2SpanIterator.next()"
                ],
                "zipkin2/src/main/java/zipkin2/internal/Node.java": [
                    "public Node<V> zipkin2.internal.Node<V>.next()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b40b9656551fcf28ebd9c8f13698b1757d67bcb2",
        "previous_commit": "a00fe5fb85baec16dd084112885a435eb7305a23",
        "date": 1566533052,
        "releases": {
            "previous": "b40b9656551fcf28ebd9c8f13698b1757d67bcb2",
            "next": "b40b9656551fcf28ebd9c8f13698b1757d67bcb2"
        },
        "commit_message": "Add enabled variable for collectors (#2770)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b40b9656551fcf28ebd9c8f13698b1757d67bcb2": {
                "zipkin-server/src/main/java/zipkin2/server/internal/activemq/ZipkinActiveMQCollectorConfiguration.java": [
                    "public boolean zipkin2.server.internal.activemq.ZipkinActiveMQCollectorConfiguration.matches(ConditionContext context, AnnotatedTypeMetadata a)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/kafka/ZipkinKafkaCollectorConfiguration.java": [
                    "public boolean zipkin2.server.internal.kafka.ZipkinKafkaCollectorConfiguration.matches(ConditionContext context, AnnotatedTypeMetadata a)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/rabbitmq/ZipkinRabbitMQCollectorConfiguration.java": [
                    "public boolean zipkin2.server.internal.rabbitmq.ZipkinRabbitMQCollectorConfiguration.matches(ConditionContext context, AnnotatedTypeMetadata a)"
                ]
            },
            "a00fe5fb85baec16dd084112885a435eb7305a23": {
                "zipkin-server/src/main/java/zipkin2/server/internal/activemq/ZipkinActiveMQCollectorConfiguration.java": [
                    "public boolean zipkin2.server.internal.activemq.ZipkinActiveMQCollectorConfiguration.matches(ConditionContext context, AnnotatedTypeMetadata a)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/kafka/ZipkinKafkaCollectorConfiguration.java": [
                    "public boolean zipkin2.server.internal.kafka.ZipkinKafkaCollectorConfiguration.matches(ConditionContext context, AnnotatedTypeMetadata a)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/rabbitmq/ZipkinRabbitMQCollectorConfiguration.java": [
                    "public boolean zipkin2.server.internal.rabbitmq.ZipkinRabbitMQCollectorConfiguration.matches(ConditionContext context, AnnotatedTypeMetadata a)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b0e37966d516a308203e2423b8fae1991b420594",
        "previous_commit": "e53e3c700ccfd42a972398aec88c328825085cdb",
        "date": 1528411728,
        "releases": {
            "previous": "b0e37966d516a308203e2423b8fae1991b420594",
            "next": "b0e37966d516a308203e2423b8fae1991b420594"
        },
        "commit_message": "Makes Kafka fail in healthCheck vs crash the process\n\nCrashing the process sounds good, but it doesn't allow the healthcheck\nto report the root cause. This makes the failure work like the previous\nKafka 0.8 collector.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b0e37966d516a308203e2423b8fae1991b420594": {
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollector.java": [
                    "ExecutorService zipkin2.collector.kafka.KafkaCollector.compute()",
                    "Runnable zipkin2.collector.kafka.KafkaCollector.guardFailures(final Runnable delegate)"
                ],
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollectorWorker.java": [
                    "public void zipkin2.collector.kafka.KafkaCollectorWorker.run()"
                ]
            },
            "e53e3c700ccfd42a972398aec88c328825085cdb": {
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollector.java": [
                    "ExecutorService zipkin2.collector.kafka.KafkaCollector.compute()",
                    "Runnable zipkin2.collector.kafka.KafkaCollector.guardFailures(final Runnable delegate)"
                ],
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollectorWorker.java": [
                    "public void zipkin2.collector.kafka.KafkaCollectorWorker.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3c1fe5a5b1f2a4f60cc828d6e6b9522e01f5f056",
        "previous_commit": "e2e796d82bff8d8b9a8e4b3a70d08e6ca6396ec9",
        "date": 1492150092,
        "releases": {
            "previous": "3c1fe5a5b1f2a4f60cc828d6e6b9522e01f5f056",
            "next": "3c1fe5a5b1f2a4f60cc828d6e6b9522e01f5f056"
        },
        "commit_message": "Refactors elasticsearch service and span name query to be like c* (#1560)\n\nService and span names are written to the same daily indexes as spans\r\nand dependency links as the document type \"servicespan\".\r\n\r\nThe document is a simple structure, like:\r\n```json\r\n{\r\n  \"serviceName\": \"MyServiceName\",\r\n  \"spanName\": \"MySpanName\",\r\n}\r\n```\r\n\r\nWhen the \"servicespan\" type is missing from an index, or there's no\r\nresults returned, a fallback nested query is invoked.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3c1fe5a5b1f2a4f60cc828d6e6b9522e01f5f056": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.accept(List<Span> spans, Callback<Void> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getSpanNames(String serviceName, Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getServiceNames(Callback<List<String>> callback)"
                ]
            },
            "e2e796d82bff8d8b9a8e4b3a70d08e6ca6396ec9": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.accept(List<Span> spans, Callback<Void> callback)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanStore.java": [
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getSpanNames(String serviceName, Callback<List<String>> callback)",
                    "public void zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanStore.getServiceNames(Callback<List<String>> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b077db612bc1f5ddf50dde2c75a95f803c89d9da",
        "previous_commit": "c204c5c2c400e4fc03f99c1de2fc310c45a599aa",
        "date": 1501050168,
        "releases": {
            "previous": "b077db612bc1f5ddf50dde2c75a95f803c89d9da",
            "next": "b077db612bc1f5ddf50dde2c75a95f803c89d9da"
        },
        "commit_message": "Drops invalid span data vs counting them in dependency links (#1663)\n\nPreviously, I over-fixed an NPE on dependency linking when bad data is\r\npresent. Instead of trying to fix cyclical references, this just drops\r\nthem. In doing so, the code is easier to maintain.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b077db612bc1f5ddf50dde2c75a95f803c89d9da": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "public static List<Span> zipkin.internal.CorrectForClockSkew.apply(List<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<DependencyLinkSpan> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/Node.java": [
                    "public Node<V> zipkin.internal.Node<V>.build()"
                ]
            },
            "c204c5c2c400e4fc03f99c1de2fc310c45a599aa": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "public static List<Span> zipkin.internal.CorrectForClockSkew.apply(List<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<DependencyLinkSpan> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/Node.java": [
                    "public Node<V> zipkin.internal.Node<V>.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ad8520e1e535d52d9f20a94a1086924726158a05",
        "previous_commit": "0910e35b743ded0a7c2a075b57ed1cc9bf32ae5f",
        "date": 1608860680,
        "releases": {
            "previous": "ad8520e1e535d52d9f20a94a1086924726158a05",
            "next": "ad8520e1e535d52d9f20a94a1086924726158a05"
        },
        "commit_message": "Adds support for Elasticsearch 7.10 (#3333)\n\nThis fixes a comparison bug which installed the incorrect template.\r\n\r\nWhat happened was v7.10 was mistaken for v7.1",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ad8520e1e535d52d9f20a94a1086924726158a05": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public ElasticsearchVersion zipkin2.elasticsearch.ElasticsearchStorage.version()",
                    "String zipkin2.elasticsearch.ElasticsearchStorage.buildUrl(IndexTemplates templates, String type)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchVersion.java": [
                    "ElasticsearchVersion zipkin2.elasticsearch.ElasticsearchVersion.get(HttpCall.Factory callFactory)"
                ]
            },
            "0910e35b743ded0a7c2a075b57ed1cc9bf32ae5f": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "String zipkin2.elasticsearch.ElasticsearchStorage.buildUrl(IndexTemplates templates, String type)",
                    "public float zipkin2.elasticsearch.ElasticsearchStorage.version()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchVersion.java": [
                    "float get(HttpCall.Factory callFactory)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a18f31c075e5d25cccba5d06ffc06b221bbfa0d8",
        "previous_commit": "fc879937fdc2c5be81e60d1b60efb0d604fe81e1",
        "date": 1467629077,
        "releases": {
            "previous": "a18f31c075e5d25cccba5d06ffc06b221bbfa0d8",
            "next": "a18f31c075e5d25cccba5d06ffc06b221bbfa0d8"
        },
        "commit_message": "Drops cassandra futures when caching results (#1161)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a18f31c075e5d25cccba5d06ffc06b221bbfa0d8": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/DeduplicatingExecutor.java": [
                    "public void zipkin.storage.cassandra.DeduplicatingExecutor.onFailure(Throwable t)",
                    "ListenableFuture<Void> zipkin.storage.cassandra.DeduplicatingExecutor.maybeExecuteAsync(BoundStatement statement, Object key)",
                    "public void zipkin.storage.cassandra.DeduplicatingExecutor.onSuccess(Object result)"
                ]
            },
            "fc879937fdc2c5be81e60d1b60efb0d604fe81e1": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/DeduplicatingExecutor.java": [
                    "public void zipkin.storage.cassandra.DeduplicatingExecutor.onFailure(Throwable t)",
                    "ListenableFuture<?> zipkin.storage.cassandra.DeduplicatingExecutor.maybeExecuteAsync(BoundStatement statement, Object key)",
                    "public void zipkin.storage.cassandra.DeduplicatingExecutor.onSuccess(Object result)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ce7a59349f7053093a005bb381a26e3dfe2247f3",
        "previous_commit": "1214e77c08b63529f4f3d7416d45bc09e24e3df3",
        "date": 1569211350,
        "releases": {
            "previous": "ce7a59349f7053093a005bb381a26e3dfe2247f3",
            "next": "ce7a59349f7053093a005bb381a26e3dfe2247f3"
        },
        "commit_message": "Adds `GET /api/v2/traceMany?traceIds={comma-separated-list} endpoint (#2811)\n\nThis adds the `GET /api/v2/traceMany?traceIds={comma-separated-list}\r\nendpoint defined in https://github.com/openzipkin/zipkin-api/pull/82\r\n\r\nThis also fixes some minor problems found.\r\n* Exceptions raised on GET apis were not reported back to the client\r\n  * This would make syntax errors hard to discover\r\n* `Traces.getTraces(List)` -> `Traces.getTraces(Iterable)`\r\n  * This avoids temptation to mutate the input, and allows passing a Set",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ce7a59349f7053093a005bb381a26e3dfe2247f3": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectFromTraces.java": [
                    "Call<List<List<Span>>> zipkin2.storage.cassandra.v1.SelectFromTraces.newCall(Iterable<String> traceIds)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "Call<List<List<Span>>> zipkin2.storage.cassandra.SelectFromSpan.newCall(Iterable<String> traceIds)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.elasticsearch.ElasticsearchSpanStore.getTraces(Iterable<String> traceIds)"
                ]
            },
            "1214e77c08b63529f4f3d7416d45bc09e24e3df3": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SelectFromTraces.java": [
                    "Call<List<List<Span>>> zipkin2.storage.cassandra.v1.SelectFromTraces.newCall(List<String> traceIds)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "Call<List<List<Span>>> zipkin2.storage.cassandra.SelectFromSpan.newCall(List<String> traceIds)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.elasticsearch.ElasticsearchSpanStore.getTraces(List<String> traceIds)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "13b24a87ec7952892b0441954fa8ddc9f0b958c1",
        "previous_commit": "c6eb48e8daaf35cc186c3ba38b483c2afae8740b",
        "date": 1504081668,
        "releases": {
            "previous": "13b24a87ec7952892b0441954fa8ddc9f0b958c1",
            "next": "13b24a87ec7952892b0441954fa8ddc9f0b958c1"
        },
        "commit_message": "Backfills query-related tests (#1714)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "13b24a87ec7952892b0441954fa8ddc9f0b958c1": {
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public Span zipkin.internal.DependencyLinker.merge(@Nullable Span left, @Nullable Span right)",
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/storage/QueryRequest.java": [
                    "public boolean zipkin.internal.v2.storage.QueryRequest.test(List<Span> spans)"
                ]
            },
            "c6eb48e8daaf35cc186c3ba38b483c2afae8740b": {
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public Span zipkin.internal.DependencyLinker.merge(@Nullable Span left, @Nullable Span right)",
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<Span> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/v2/storage/QueryRequest.java": [
                    "public boolean zipkin.internal.v2.storage.QueryRequest.test(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c1e019f82689017bd2a91f0c8d0789f61fb572f9",
        "previous_commit": "bd244f7a20f5613ebde3638d1539117478351592",
        "date": 1462859479,
        "releases": {
            "previous": "c1e019f82689017bd2a91f0c8d0789f61fb572f9",
            "next": "c1e019f82689017bd2a91f0c8d0789f61fb572f9"
        },
        "commit_message": "Fixes crash where there's a race between storage and query components\n\nFormerly, wiring `ZipkinQueryApiV1` would crash the app if a storage\nconnection was down. In other words, it was doing I/O in the\nconstructor. The storage component is lazy, so the way to fix this is to\ndefer access until it is needed.\n\nThis also adds a test so that it is found before docker packaging.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c1e019f82689017bd2a91f0c8d0789f61fb572f9": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java": [
                    "public List<String> zipkin.server.ZipkinQueryApiV1.getServiceNames()",
                    "public byte[] zipkin.server.ZipkinQueryApiV1.getTrace(@PathVariable String traceId, WebRequest request)"
                ]
            },
            "bd244f7a20f5613ebde3638d1539117478351592": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java": [
                    "public List<String> zipkin.server.ZipkinQueryApiV1.getServiceNames()",
                    "public byte[] zipkin.server.ZipkinQueryApiV1.getTrace(@PathVariable String traceId, WebRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0bcfc1fd3c79f773195d277f78c134066e39c926",
        "previous_commit": "71ff576eb60f58215bd9c09b6ebd903d67b4f5c5",
        "date": 1519105096,
        "releases": {
            "previous": "0bcfc1fd3c79f773195d277f78c134066e39c926",
            "next": "0bcfc1fd3c79f773195d277f78c134066e39c926"
        },
        "commit_message": "Removes separate keyspace that was only used for the installation of the UDT mappings. (#1891)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0bcfc1fd3c79f773195d277f78c134066e39c926": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "private static void zipkin2.storage.cassandra.DefaultSessionFactory.initializeUDTs(Session session)",
                    "public Session zipkin2.storage.cassandra.DefaultSessionFactory.create(CassandraStorage cassandra)"
                ]
            },
            "71ff576eb60f58215bd9c09b6ebd903d67b4f5c5": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "private static void zipkin2.storage.cassandra.DefaultSessionFactory.initializeUDTs(Session session)",
                    "public Session zipkin2.storage.cassandra.DefaultSessionFactory.create(CassandraStorage cassandra)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "55094d356fb3c93026eca50079d1b7e9d34e5987",
        "previous_commit": "9184816c8d9b3c87a647861be5153fb2c8858586",
        "date": 1528695418,
        "releases": {
            "previous": "55094d356fb3c93026eca50079d1b7e9d34e5987",
            "next": "55094d356fb3c93026eca50079d1b7e9d34e5987"
        },
        "commit_message": "Skip incomplete mysql rows instead of NPE\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "55094d356fb3c93026eca50079d1b7e9d34e5987": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/SelectSpansAndAnnotations.java": [
                    "public List<Span> zipkin2.storage.mysql.v1.SelectSpansAndAnnotations.apply(DSLContext context)",
                    "static Endpoint zipkin2.storage.mysql.v1.SelectSpansAndAnnotations.endpoint(Record a)"
                ]
            },
            "9184816c8d9b3c87a647861be5153fb2c8858586": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/SelectSpansAndAnnotations.java": [
                    "public List<Span> zipkin2.storage.mysql.v1.SelectSpansAndAnnotations.apply(DSLContext context)",
                    "static Endpoint zipkin2.storage.mysql.v1.SelectSpansAndAnnotations.endpoint(Record a)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bff0b6db1fd0a3fb309ec53e494ad0e0b6c79bd8",
        "previous_commit": "976f4d6303febb1a616e70702b2731cfd3b6491e",
        "date": 1521535141,
        "releases": {
            "previous": "bff0b6db1fd0a3fb309ec53e494ad0e0b6c79bd8",
            "next": "bff0b6db1fd0a3fb309ec53e494ad0e0b6c79bd8"
        },
        "commit_message": "Makes it possible to implement a protobuf3 span encoder\n\nWhile we haven't yet defined a proto3 format, this allows one to be\ndefined. This also allows us to refine how stackdriver (or any future\ntranslated format) works in zipkin reporter.\n\nImplementation is relatively simple: this assumes a buffer of spans is\nanalogous to a proto3 repeated field, and that the field name itself is\nordinal <=127.\n\nFixes #1942\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bff0b6db1fd0a3fb309ec53e494ad0e0b6c79bd8": {
                "zipkin2/src/main/java/zipkin2/codec/Encoding.java": [
                    "public int listSizeInBytes(int encodedSizeInBytes)",
                    "public int listSizeInBytes(List<byte[]> values)"
                ]
            },
            "976f4d6303febb1a616e70702b2731cfd3b6491e": {
                "zipkin2/src/main/java/zipkin2/codec/Encoding.java": [
                    "public int listSizeInBytes(int encodedSizeInBytes)",
                    "public int listSizeInBytes(List<byte[]> values)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ba025306985da1f253665ac053d290a0f21f841c",
        "previous_commit": "1c19d73eac0a843ba2df849277b37842dbe4b066",
        "date": 1484559378,
        "releases": {
            "previous": "ba025306985da1f253665ac053d290a0f21f841c",
            "next": "ba025306985da1f253665ac053d290a0f21f841c"
        },
        "commit_message": "Consolidates logic that deals with embedded IPv4 addresses (#1490)\n\nThis consolidates logic around mapped or embedded IPv4 addresses, as\r\npreviously logic was duplicated here and in Brave.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ba025306985da1f253665ac053d290a0f21f841c": {
                "zipkin/src/main/java/zipkin/Endpoint.java": [
                    "public Builder zipkin.Endpoint.ipv6(byte[] ipv6)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public Endpoint zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ]
            },
            "1c19d73eac0a843ba2df849277b37842dbe4b066": {
                "zipkin/src/main/java/zipkin/Endpoint.java": [
                    "public Builder zipkin.Endpoint.ipv6(byte[] ipv6)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public Endpoint zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d90dc0a9bbeea5d68ea06e99afcf74fc6d18ed8e",
        "previous_commit": "76ff8f819fcee94fde8d7060ce784d89a067dddf",
        "date": 1553216198,
        "releases": {
            "previous": "d90dc0a9bbeea5d68ea06e99afcf74fc6d18ed8e",
            "next": "d90dc0a9bbeea5d68ea06e99afcf74fc6d18ed8e"
        },
        "commit_message": "Temporarily prefers gRPC's guava (#2463)\n\nThis temporarily prefers gRPC 0.19's guava while we figure out what\r\nbetter options exist. Cassandra is recently flexible wrt guava version.\r\ngRPC, used by zipkin-gcp is the least flexible in dependencies. Likley,\r\nwe will port that project to direct use of armeria to lower the push\r\nand pull.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d90dc0a9bbeea5d68ea06e99afcf74fc6d18ed8e": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java": [
                    "static List<InetSocketAddress> zipkin2.storage.cassandra.v1.Default.parseContactPoints(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "static List<InetSocketAddress> zipkin2.storage.cassandra.DefaultSessionFactory.parseContactPoints(CassandraStorage cassandra)"
                ]
            },
            "76ff8f819fcee94fde8d7060ce784d89a067dddf": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java": [
                    "static List<InetSocketAddress> zipkin2.storage.cassandra.v1.Default.parseContactPoints(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "static List<InetSocketAddress> zipkin2.storage.cassandra.DefaultSessionFactory.parseContactPoints(CassandraStorage cassandra)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a5fafd189f532e9322d83b6634d2b13ed82f782a",
        "previous_commit": "2ae9fdb28b13ede14527461b466bf20d5a659ded",
        "date": 1516709952,
        "releases": {
            "previous": "a5fafd189f532e9322d83b6634d2b13ed82f782a",
            "next": "a5fafd189f532e9322d83b6634d2b13ed82f782a"
        },
        "commit_message": "Fixes stackoverflow bug\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a5fafd189f532e9322d83b6634d2b13ed82f782a": {
                "zipkin2/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.debug(@Nullable Boolean debug)",
                    "public Builder zipkin2.Span.shared(@Nullable Boolean shared)"
                ]
            },
            "2ae9fdb28b13ede14527461b466bf20d5a659ded": {
                "zipkin2/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.debug(@Nullable Boolean debug)",
                    "public Builder zipkin2.Span.shared(@Nullable Boolean shared)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "75bcf971edaa377bc18e0960349c670d46f79c6a",
        "previous_commit": "5963df6cc53ca546b2055168252c506189c7f6fc",
        "date": 1551931045,
        "releases": {
            "previous": "75bcf971edaa377bc18e0960349c670d46f79c6a",
            "next": "75bcf971edaa377bc18e0960349c670d46f79c6a"
        },
        "commit_message": "Adds integration test for messaging linking and fixes MySQL impl (#2431)\n\nOther storage options were document oriented, so weren't subject to\r\nfield constraints. This fixes the fields cherry-picked from MySQL,\r\nwhich are needed to link messaging spans.\r\n\r\nThis adds the missing integration test, which only ensures data is\r\nthere. The complete logic test is `DependencyLinkerTest`.\r\n\r\nThanks @mbrade for reporting",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "75bcf971edaa377bc18e0960349c670d46f79c6a": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/AggregateDependencies.java": [
                    "public List<DependencyLink> zipkin2.storage.mysql.v1.AggregateDependencies.apply(DSLContext context)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/DependencyLinkV2SpanIterator.java": [
                    "public Span zipkin2.storage.mysql.v1.DependencyLinkV2SpanIterator.next()"
                ]
            },
            "5963df6cc53ca546b2055168252c506189c7f6fc": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/AggregateDependencies.java": [
                    "public List<DependencyLink> zipkin2.storage.mysql.v1.AggregateDependencies.apply(DSLContext context)"
                ],
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/DependencyLinkV2SpanIterator.java": [
                    "public Span zipkin2.storage.mysql.v1.DependencyLinkV2SpanIterator.next()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "564e51abc85275ddaa857285769eeda82e997dd3",
        "previous_commit": "01828cc79557c1a94bda80afd2f708ad287140a6",
        "date": 1467943575,
        "releases": {
            "previous": "564e51abc85275ddaa857285769eeda82e997dd3",
            "next": "564e51abc85275ddaa857285769eeda82e997dd3"
        },
        "commit_message": "Skips Cassandra indexing of zero-duration rows (#1173)\n\n`QueryRequest.minDuration=0` doesn't make sense, it expands to traces\r\nwho have `Span.duration >= 0`. In such case, the query will be faster\r\nto remove the duration clause entirely.\r\n\r\nBy constraining this, we can eliminate some busy-work, indexing spans\r\nthat came in with a dubious duration of zero.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "564e51abc85275ddaa857285769eeda82e997dd3": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java": [
                    "void zipkin.storage.cassandra.CassandraStorage.clear()"
                ]
            },
            "01828cc79557c1a94bda80afd2f708ad287140a6": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java": [
                    "void zipkin.storage.cassandra.CassandraStorage.clear()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5637db07b3d824647760cf9751da956f1fbd7bd9",
        "previous_commit": "8cbd0328979de377bfd1237f6a8c217e994d9990",
        "date": 1564947688,
        "releases": {
            "previous": "5637db07b3d824647760cf9751da956f1fbd7bd9",
            "next": "5637db07b3d824647760cf9751da956f1fbd7bd9"
        },
        "commit_message": "Export ES health check metrics to micrometer and override span name. (#2734)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5637db07b3d824647760cf9751da956f1fbd7bd9": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "HttpHealthCheckedEndpointGroup zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.decorateHealthCheck(EndpointGroup endpointGroup)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java": [
                    "Consumer<ClientOptionsBuilder> zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.esTracing(Optional<HttpTracing> maybeHttpTracing)"
                ]
            },
            "8cbd0328979de377bfd1237f6a8c217e994d9990": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "HttpHealthCheckedEndpointGroup zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.decorateHealthCheck(EndpointGroup endpointGroup)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java": [
                    "Consumer<ClientOptionsBuilder> zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.esTracing(Optional<HttpTracing> maybeHttpTracing)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d66fe45f0d3412fa46196cb0735183deae391c26",
        "previous_commit": "c16172126f586137e7b7bb8db634d308b85c167e",
        "date": 1499149121,
        "releases": {
            "previous": "d66fe45f0d3412fa46196cb0735183deae391c26",
            "next": "d66fe45f0d3412fa46196cb0735183deae391c26"
        },
        "commit_message": "Polishing\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d66fe45f0d3412fa46196cb0735183deae391c26": {
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "Set<Pair<Long>> zipkin.storage.InMemorySpanStore.valueContainer()"
                ],
                "zipkin/src/main/java/zipkin/storage/InMemoryStorage.java": [
                    "public Builder zipkin.storage.InMemoryStorage.maxSpanCount(int maxSpanCount)"
                ]
            },
            "c16172126f586137e7b7bb8db634d308b85c167e": {
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "Set<Pair<Long>> zipkin.storage.InMemorySpanStore.valueContainer()"
                ],
                "zipkin/src/main/java/zipkin/storage/InMemoryStorage.java": [
                    "public Builder zipkin.storage.InMemoryStorage.maxSpanCount(int maxSpanCount)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1fc9a6af5d0d9442cd03fd3756f930bc26833617",
        "previous_commit": "d24a0b1b4453a13d136f38bc94bacccad1a4ce67",
        "date": 1471228348,
        "releases": {
            "previous": "1fc9a6af5d0d9442cd03fd3756f930bc26833617",
            "next": "1fc9a6af5d0d9442cd03fd3756f930bc26833617"
        },
        "commit_message": "Reduces the core jar from 272 to 188k by tuning codec and shade (#1236)\n\n* Reduces the core jar from 272 to 188k by tuning codec and shade\r\n\r\nBefore, we used more reflection than necessary in codec. This implied\r\nuse of larger and more classes than we actually need. By slightly\r\nchanging codec, and manually controlling shade, we dropped the jar size\r\nby 45%.\r\n\r\n* Rewrites flakey test to not need I/O\r\n\r\nThis reduces load on cassandra test in attempts to help with travis.\r\n\r\nSee #1237\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1fc9a6af5d0d9442cd03fd3756f930bc26833617": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public void zipkin.internal.JsonCodec.toJson(JsonWriter writer, Long value)",
                    "public Long zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ]
            },
            "d24a0b1b4453a13d136f38bc94bacccad1a4ce67": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public void zipkin.internal.JsonCodec.toJson(JsonWriter writer, Long value)",
                    "public Long zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ed594e75a7170eae5275c7d19abef924ee0154e6",
        "previous_commit": "00b13559247df32b9fe178e314db7d64f1e7680e",
        "date": 1716678656,
        "releases": {
            "previous": "ed594e75a7170eae5275c7d19abef924ee0154e6",
            "next": "ed594e75a7170eae5275c7d19abef924ee0154e6"
        },
        "commit_message": "Supports OpenSearch V2 through ES_* environment variables (#3765)\n\nThe Elasticsearch storage now supports OpenSearch as a backed as well.\r\nThe implementation relies on `distribution` property that is returned as\r\npart of Elasticsearch / OpenSearch HTTP `GET /` API. Please note that\r\nthe storage version is now abstracted as `BaseVersion` with two\r\nimplementation: `ElasticsearchVersion` and `OpensearchVersion`.\r\n\r\nAlthough OpenSearch is a fork of Elasticsearch as of 7.10.2, the\r\nprojects diverged sufficiently far from each other. Luckily, `Zipkin`\r\nrelies on the features that have not been impacted (so far) and work the\r\nsame way across both projects.\r\n\r\n---------\r\n\r\nSigned-off-by: Andriy Redko <drreta@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "ed594e75a7170eae5275c7d19abef924ee0154e6": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "char zipkin2.elasticsearch.ElasticsearchStorage.indexTypeDelimiter()",
                    "String zipkin2.elasticsearch.ElasticsearchStorage.buildUrl(IndexTemplates templates, String type)"
                ]
            },
            "00b13559247df32b9fe178e314db7d64f1e7680e": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "char zipkin2.elasticsearch.ElasticsearchStorage.indexTypeDelimiter()",
                    "String zipkin2.elasticsearch.ElasticsearchStorage.buildUrl(IndexTemplates templates, String type)"
                ]
            }
        },
        "java_version": {
            "version": "17",
            "should_update_pom": false
        }
    },
    {
        "commit": "8e14ac167035a8ed03a0afd7691c69dc67b483de",
        "previous_commit": "67e7774fddf9badc0ebbcced57f0a4de67f09a33",
        "date": 1528348350,
        "releases": {
            "previous": "8e14ac167035a8ed03a0afd7691c69dc67b483de",
            "next": "8e14ac167035a8ed03a0afd7691c69dc67b483de"
        },
        "commit_message": "Refactors project around v2 storage apis\n\nThis does the following towards unifying the storage layer:\n* Removes zipkin-guava storage adapters as they aren't used anymore\n* Removes the \"legacy read\" of our first Elasticsearch model\n* Refactors artifact and directory names wher -v1 implies legacy\n* Refactors README to discourage v1 storage components\n* Makes the server only depend on zipkin2.storage.StorageComponent\n\nFollow-up work can refactor more once a v2 collector component is\navailable.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8e14ac167035a8ed03a0afd7691c69dc67b483de": {
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/AWSSignatureVersion4.java": [
                    "Request zipkin.autoconfigure.storage.elasticsearch.aws.AWSSignatureVersion4.sign(Request input)"
                ],
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/ZipkinElasticsearchAwsStorageAutoConfiguration.java": [
                    "static String zipkin.autoconfigure.storage.elasticsearch.aws.ZipkinElasticsearchAwsStorageAutoConfiguration.regionFromAwsUrls(String hosts)"
                ]
            },
            "67e7774fddf9badc0ebbcced57f0a4de67f09a33": {
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/AWSSignatureVersion4.java": [
                    "Request zipkin.autoconfigure.storage.elasticsearch.aws.AWSSignatureVersion4.sign(Request input)"
                ],
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/ZipkinElasticsearchAwsStorageAutoConfiguration.java": [
                    "static String zipkin.autoconfigure.storage.elasticsearch.aws.ZipkinElasticsearchAwsStorageAutoConfiguration.regionFromAwsUrls(String hosts)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d3a83b8883e336b9566b73e03d9cfdceceaa4530",
        "previous_commit": "4973ea34cd0f7dc944f658e8d79bf037c1ac23e6",
        "date": 1497510433,
        "releases": {
            "previous": "d3a83b8883e336b9566b73e03d9cfdceceaa4530",
            "next": "d3a83b8883e336b9566b73e03d9cfdceceaa4530"
        },
        "commit_message": "Accepts json span names (previously broke ElasticSearch) (#1616)\n\nWhile not good practice, if we break on json span names, users can't\r\neasily troubleshoot. This works around the problem by escaping json.\r\n\r\nFixes #1613",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d3a83b8883e336b9566b73e03d9cfdceceaa4530": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java": [
                    "void zipkin.storage.elasticsearch.http.HttpBulkIndexer.writeIndexMetadata(String index, String typeName, @Nullable String id)"
                ],
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "Buffer zipkin.internal.Buffer.writeJsonEscaped(String v)"
                ]
            },
            "4973ea34cd0f7dc944f658e8d79bf037c1ac23e6": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/HttpBulkIndexer.java": [
                    "void zipkin.storage.elasticsearch.http.HttpBulkIndexer.writeIndexMetadata(String index, String typeName, @Nullable String id)"
                ],
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "Buffer zipkin.internal.Buffer.writeJsonEscaped(String v)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "09db702e666a9af65dca00f742f524fdd10f13b1",
        "previous_commit": "f4a333edd66b7d28d993bb918e7e002a44e9e738",
        "date": 1502522524,
        "releases": {
            "previous": "09db702e666a9af65dca00f742f524fdd10f13b1",
            "next": "09db702e666a9af65dca00f742f524fdd10f13b1"
        },
        "commit_message": "Allows span2 json format to omit serviceName instead of setting empty (#1686)\n\nA snag in the old model was that we needed to pass an empty string for\r\nserviceName because thrift requires the field. In span2 format, we can\r\nact more idiomatic and either leave it out or set it to null.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "09db702e666a9af65dca00f742f524fdd10f13b1": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public Endpoint zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyJsonAdapters.java": [
                    "public Span zipkin.storage.elasticsearch.http.LegacyJsonAdapters.fromJson(JsonReader reader)"
                ]
            },
            "f4a333edd66b7d28d993bb918e7e002a44e9e738": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public Endpoint zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ],
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/LegacyJsonAdapters.java": [
                    "public Span zipkin.storage.elasticsearch.http.LegacyJsonAdapters.fromJson(JsonReader reader)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ceb30976e26434d3f6d93880f0b0c27f3621a21f",
        "previous_commit": "f2ff789cc8f7f13ef1beae5e42aa0019f587fc64",
        "date": 1459140231,
        "releases": {
            "previous": "ceb30976e26434d3f6d93880f0b0c27f3621a21f",
            "next": "ceb30976e26434d3f6d93880f0b0c27f3621a21f"
        },
        "commit_message": "Fix all service names and span names not being returned because the default limit of aggregations was 10, not 0.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ceb30976e26434d3f6d93880f0b0c27f3621a21f": {
                "zipkin-spanstores/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.elasticsearch.ElasticsearchSpanStore.getServiceNames()",
                    "public ListenableFuture<List<String>> zipkin.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)"
                ]
            },
            "f2ff789cc8f7f13ef1beae5e42aa0019f587fc64": {
                "zipkin-spanstores/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.elasticsearch.ElasticsearchSpanStore.getServiceNames()",
                    "public ListenableFuture<List<String>> zipkin.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1398803035b39bdcbaa879f2b2ac6be0f0adf554",
        "previous_commit": "0bd1c9ebb58b999b2378af07ee77e5775c36a259",
        "date": 1524801189,
        "releases": {
            "previous": "1398803035b39bdcbaa879f2b2ac6be0f0adf554",
            "next": "1398803035b39bdcbaa879f2b2ac6be0f0adf554"
        },
        "commit_message": "Refactors proto3 decoder files to be more explicit\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1398803035b39bdcbaa879f2b2ac6be0f0adf554": {
                "zipkin2/src/main/java/zipkin2/internal/Proto3ZipkinFields.java": [
                    "Span zipkin2.internal.Proto3ZipkinFields.readValue(Buffer buffer, int length)",
                    "public Span zipkin2.internal.Proto3ZipkinFields.read(Buffer buffer)"
                ]
            },
            "0bd1c9ebb58b999b2378af07ee77e5775c36a259": {
                "zipkin2/src/main/java/zipkin2/internal/Proto3ZipkinFields.java": [
                    "Span zipkin2.internal.Proto3ZipkinFields.readValue(Buffer buffer)",
                    "public Span zipkin2.internal.Proto3ZipkinFields.read(Buffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cc34b20d583962441beec84a459334dbdc5a481c",
        "previous_commit": "ff29de5c7d920253d36a71f26ef83ff666e6fba2",
        "date": 1523963266,
        "releases": {
            "previous": "cc34b20d583962441beec84a459334dbdc5a481c",
            "next": "cc34b20d583962441beec84a459334dbdc5a481c"
        },
        "commit_message": "Adds Endpoint IP address bytes accessors\n\nThis adds `Endpoint.ipv4Bytes()` and `Endpoint.ipv6Bytes()` needed to\nprevent excess overhead marshaling into byte arrays. It is efficient to\ndo this once, as endpoint IPs are most often shared (local endpoint) for\nall spans. Even in the case of remote endpoint, these are often parsed\nfrom `Inet6Address` objects who already have a byte array reference.\n\nThis will be used in proto3 and possibly in a future retrofitted v1\nthrift encoder.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "cc34b20d583962441beec84a459334dbdc5a481c": {
                "zipkin2/src/main/java/zipkin2/Endpoint.java": [
                    "public final boolean zipkin2.Endpoint.parseIp(@Nullable InetAddress addr)",
                    "public final boolean zipkin2.Endpoint.parseIp(@Nullable String ipString)"
                ]
            },
            "ff29de5c7d920253d36a71f26ef83ff666e6fba2": {
                "zipkin2/src/main/java/zipkin2/Endpoint.java": [
                    "public final boolean zipkin2.Endpoint.parseIp(@Nullable InetAddress addr)",
                    "public final boolean zipkin2.Endpoint.parseIp(@Nullable String ipString)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8e794931f0dd7d142e9897dceba8752be0f5b555",
        "previous_commit": "3b9491dd1c882ae4142b31327c8b6516e6dfe413",
        "date": 1532599642,
        "releases": {
            "previous": "8e794931f0dd7d142e9897dceba8752be0f5b555",
            "next": "8e794931f0dd7d142e9897dceba8752be0f5b555"
        },
        "commit_message": "Further compresses Elasticsearch index pattern\n\nWhile terribly edge case, our tests can trip http request line size when\nlate in the month. This compresses tens of days of months to make such\nimpossible.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8e794931f0dd7d142e9897dceba8752be0f5b555": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/IndexNameFormatter.java": [
                    "public List<String> zipkin2.elasticsearch.internal.IndexNameFormatter.formatTypeAndRange(@Nullable String type, long beginMillis, long endMillis)",
                    "static GregorianCalendar zipkin2.elasticsearch.internal.IndexNameFormatter.midnightUTC(long epochMillis)"
                ]
            },
            "3b9491dd1c882ae4142b31327c8b6516e6dfe413": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/IndexNameFormatter.java": [
                    "public List<String> zipkin2.elasticsearch.internal.IndexNameFormatter.formatTypeAndRange(@Nullable String type, long beginMillis, long endMillis)",
                    "static GregorianCalendar zipkin2.elasticsearch.internal.IndexNameFormatter.midnightUTC(long epochMillis)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2787ab00c8af35d201bbca2e5c4043a1dbfbd5da",
        "previous_commit": "da7c5f829da5fd6c7a178ffee4f683522879acd6",
        "date": 1524986337,
        "releases": {
            "previous": "2787ab00c8af35d201bbca2e5c4043a1dbfbd5da",
            "next": "2787ab00c8af35d201bbca2e5c4043a1dbfbd5da"
        },
        "commit_message": "Handles templated and forwarded routes in prometheus metrics\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2787ab00c8af35d201bbca2e5c4043a1dbfbd5da": {
                "zipkin-autoconfigure/metrics-prometheus/src/main/java/zipkin/autoconfigure/prometheus/ZipkinPrometheusMetricsAutoConfiguration.java": [
                    "private Iterable<Tag> zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.getTags(HttpServerExchange exchange)",
                    "public void zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.handleRequest(HttpServerExchange exchange)"
                ]
            },
            "da7c5f829da5fd6c7a178ffee4f683522879acd6": {
                "zipkin-autoconfigure/metrics-prometheus/src/main/java/zipkin/autoconfigure/prometheus/ZipkinPrometheusMetricsAutoConfiguration.java": [
                    "private Iterable<Tag> zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.getTags(HttpServerExchange exchange)",
                    "public void zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.handleRequest(HttpServerExchange exchange)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7ff2703228ba436a7cf8d5369c5f56ebb0116726",
        "previous_commit": "76edbbf0491ced8295fa8ec1ad89fa1aaa83b618",
        "date": 1475134954,
        "releases": {
            "previous": "7ff2703228ba436a7cf8d5369c5f56ebb0116726",
            "next": "7ff2703228ba436a7cf8d5369c5f56ebb0116726"
        },
        "commit_message": "Fixes self-tracing of storage component (#1315)\n\nThere were some typos and a missing test around storage self-tracing.\r\nThis plugs the hole and tidies related things.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7ff2703228ba436a7cf8d5369c5f56ebb0116726": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "public Object zipkin.server.ZipkinServerConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/TracedStorageComponent.java": [
                    "public SpanStore zipkin.server.brave.TracedStorageComponent.spanStore()"
                ]
            },
            "76edbbf0491ced8295fa8ec1ad89fa1aaa83b618": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "public Object zipkin.server.ZipkinServerConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/TracedStorageComponent.java": [
                    "public SpanStore zipkin.server.brave.TracedStorageComponent.spanStore()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3ffb8d029afee6f3055fc55ca2635de3966cccf1",
        "previous_commit": "f6021415ecac05bb5e85c84bf10e051bffccfeb1",
        "date": 1533449176,
        "releases": {
            "previous": "3ffb8d029afee6f3055fc55ca2635de3966cccf1",
            "next": "3ffb8d029afee6f3055fc55ca2635de3966cccf1"
        },
        "commit_message": "Fixes cassandra version check and backfills tests\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3ffb8d029afee6f3055fc55ca2635de3966cccf1": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static Metadata zipkin2.storage.cassandra.Schema.readMetadata(Session session)",
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, Session session)"
                ]
            },
            "f6021415ecac05bb5e85c84bf10e051bffccfeb1": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static Metadata zipkin2.storage.cassandra.Schema.readMetadata(Session session)",
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, Session session)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cf4df43952f2b82496c2e4c730765e7b70eba22b",
        "previous_commit": "81d67fca53854bc6dca166eccc9061ae9bdfdc9a",
        "date": 1484705083,
        "releases": {
            "previous": "cf4df43952f2b82496c2e4c730765e7b70eba22b",
            "next": "cf4df43952f2b82496c2e4c730765e7b70eba22b"
        },
        "commit_message": "Consistently handles fatal errors in catch Throwable blocks (#1494)\n\nI noticed we weren't consistent when catching Throwable.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "cf4df43952f2b82496c2e4c730765e7b70eba22b": {
                "zipkin-server/src/main/java/zipkin/server/brave/BraveConfiguration.java": [
                    "public void zipkin.server.brave.BraveConfiguration.sendSpans(List<byte[]> encodedSpans, Callback callback)"
                ],
                "zipkin/src/main/java/zipkin/storage/InternalCallbackRunnable.java": [
                    "public void zipkin.storage.InternalCallbackRunnable<V>.run()"
                ]
            },
            "81d67fca53854bc6dca166eccc9061ae9bdfdc9a": {
                "zipkin-server/src/main/java/zipkin/server/brave/BraveConfiguration.java": [
                    "public void zipkin.server.brave.BraveConfiguration.sendSpans(List<byte[]> encodedSpans, Callback callback)"
                ],
                "zipkin/src/main/java/zipkin/storage/InternalCallbackRunnable.java": [
                    "public void zipkin.storage.InternalCallbackRunnable<V>.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4e078aab57a9300776936b5e32537a6c60313d0f",
        "previous_commit": "196d58ae7d12934f294fbd06feebe9774db07f3a",
        "date": 1477901610,
        "releases": {
            "previous": "4e078aab57a9300776936b5e32537a6c60313d0f",
            "next": "4e078aab57a9300776936b5e32537a6c60313d0f"
        },
        "commit_message": "Hard limits ES queries to not lookback earlier than ES support was added (#1371)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4e078aab57a9300776936b5e32537a6c60313d0f": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getDependencies(long endMillis, @Nullable Long lookback)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)"
                ]
            },
            "196d58ae7d12934f294fbd06feebe9774db07f3a": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<DependencyLink>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getDependencies(long endMillis, @Nullable Long lookback)",
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5df523ea90fe79f540d27969562e2f1aa8b0f161",
        "previous_commit": "58a44f22d564388a9c955cc1ad9f3e0f7add35fe",
        "date": 1533280119,
        "releases": {
            "previous": "5df523ea90fe79f540d27969562e2f1aa8b0f161",
            "next": "5df523ea90fe79f540d27969562e2f1aa8b0f161"
        },
        "commit_message": "Switch to use a DelimiterAnalyzer and PREFIX mode SASI for the annotations index in the Zipkin2 Cassandra storage\n\nref: https://github.com/openzipkin/zipkin/issues/1861\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5df523ea90fe79f540d27969562e2f1aa8b0f161": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, Session session)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromSpan.java": [
                    "Call<Set<Entry<String, Long>>> zipkin2.storage.cassandra.SelectTraceIdsFromSpan.newCall( @Nullable String serviceName, String annotationKey, TimestampRange timestampRange, int limit)"
                ]
            },
            "58a44f22d564388a9c955cc1ad9f3e0f7add35fe": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, Session session)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectTraceIdsFromSpan.java": [
                    "Call<Set<Entry<String, Long>>> zipkin2.storage.cassandra.SelectTraceIdsFromSpan.newCall( @Nullable String serviceName, String annotationKey, TimestampRange timestampRange, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e609498bbf3bbe7a04dfb6432e78c444e0147b05",
        "previous_commit": "947e8c217ee284e906779da3d9c75f77390a1e90",
        "date": 1556268130,
        "releases": {
            "previous": "e609498bbf3bbe7a04dfb6432e78c444e0147b05",
            "next": "e609498bbf3bbe7a04dfb6432e78c444e0147b05"
        },
        "commit_message": "Tolerates empty POST requests with debug logging (#2538)\n\nThis backfills tests to show that our normal codec library is ok with\r\nempty data. What's different, is this doesn't fail on POST when there\r\nare empty messages. Instead, if debug logging is enabled, we say which\r\nIP and user agent posted it.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e609498bbf3bbe7a04dfb6432e78c444e0147b05": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "public Object zipkin2.server.internal.UnzippingBytesRequestConverter.convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage request, Class<?> expectedResultType)",
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, byte[] serializedSpans)"
                ]
            },
            "947e8c217ee284e906779da3d9c75f77390a1e90": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "public Object zipkin2.server.internal.UnzippingBytesRequestConverter.convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage request, Class<?> expectedResultType)",
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, byte[] serializedSpans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0635ffbc848e7ed351055205f21918d7e3bcf860",
        "previous_commit": "f10f968ec4b383a795404229e64305fd6e9c5214",
        "date": 1463103856,
        "releases": {
            "previous": "0635ffbc848e7ed351055205f21918d7e3bcf860",
            "next": "0635ffbc848e7ed351055205f21918d7e3bcf860"
        },
        "commit_message": "Files storage components under zipkin.storage package\n\nThis moves storage components under the zipkin.storage package.\n\nBy doing so, we clear the main `zipkin` package for classes used by all\ncode, including instrumentation. Also, it helps with logging, as storage\nrelated operations share the same category.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0635ffbc848e7ed351055205f21918d7e3bcf860": {
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.collector.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/LocalSpanCollector.java": [
                    "protected void zipkin.server.brave.LocalSpanCollector.sendSpans(byte[] thrift)"
                ]
            },
            "f10f968ec4b383a795404229e64305fd6e9c5214": {
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.collector.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/LocalSpanCollector.java": [
                    "protected void zipkin.server.brave.LocalSpanCollector.sendSpans(byte[] thrift)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ad97f877682a993bda972ec7670dfcd7e97af789",
        "previous_commit": "092a47a5888de4253bebd4958d6102099bb1a757",
        "date": 1521596099,
        "releases": {
            "previous": "ad97f877682a993bda972ec7670dfcd7e97af789",
            "next": "ad97f877682a993bda972ec7670dfcd7e97af789"
        },
        "commit_message": "Uses constant where available\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ad97f877682a993bda972ec7670dfcd7e97af789": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/IndexNameFormatter.java": [
                    "public final IndexNameFormatter zipkin2.elasticsearch.internal.IndexNameFormatter.build()",
                    "protected SimpleDateFormat zipkin2.elasticsearch.internal.IndexNameFormatter.initialValue()"
                ]
            },
            "092a47a5888de4253bebd4958d6102099bb1a757": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/IndexNameFormatter.java": [
                    "public final IndexNameFormatter zipkin2.elasticsearch.internal.IndexNameFormatter.build()",
                    "protected SimpleDateFormat zipkin2.elasticsearch.internal.IndexNameFormatter.initialValue()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a6778ecbefaade7b271555f52847b0ee1a5a593b",
        "previous_commit": "46ea28187fd856e275f0379c7b78c2dba4fb79ac",
        "date": 1557185796,
        "releases": {
            "previous": "a6778ecbefaade7b271555f52847b0ee1a5a593b",
            "next": "a6778ecbefaade7b271555f52847b0ee1a5a593b"
        },
        "commit_message": "Verifies ES 5.x with unit tests as opposed to integration tests (#2560)\n\nOur builds currently take too long due in part to checking 3 different\r\nversions of Elasticsearch. Elastic no longer supports version 5, so our\r\nsupport of it is \"best efforts\". Accordingly, integration testing v5.x\r\nknowing we break the build on timeouts is not the best call.\r\n\r\nThis increases the unit test coverage of version specific code to 100%\r\nand removes the Elasticsearch 5.x integration tests.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a6778ecbefaade7b271555f52847b0ee1a5a593b": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "IndexTemplates zipkin2.elasticsearch.VersionSpecificTemplates.get(HttpCall.Factory callFactory)",
                    "public Float zipkin2.elasticsearch.VersionSpecificTemplates.convert(BufferedSource content)"
                ]
            },
            "46ea28187fd856e275f0379c7b78c2dba4fb79ac": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "IndexTemplates zipkin2.elasticsearch.VersionSpecificTemplates.get(HttpCall.Factory callFactory)",
                    "public Float zipkin2.elasticsearch.VersionSpecificTemplates.convert(BufferedSource content)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c8b7f6bdf324d9a39d5db0316c709f88799bc81f",
        "previous_commit": "10b855231a6736552cf1e01064fdea3afa9704bc",
        "date": 1478333414,
        "releases": {
            "previous": "c8b7f6bdf324d9a39d5db0316c709f88799bc81f",
            "next": "c8b7f6bdf324d9a39d5db0316c709f88799bc81f"
        },
        "commit_message": "Support for MySQL 5.7 with SQL_MODE=ONLY_FULL_GROUP_BY (#1390)\n\n* Include missing field in groupBy\r\n\r\nFixes #1387\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c8b7f6bdf324d9a39d5db0316c709f88799bc81f": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "private static SelectOffsetStep<Record2<Long, Long>> zipkin.storage.mysql.MySQLSpanStore.toTraceIdQuery(DSLContext context, QueryRequest request)",
                    "List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.aggregateDependencies(long endTs, @Nullable Long lookback, Connection conn)"
                ]
            },
            "10b855231a6736552cf1e01064fdea3afa9704bc": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "private static SelectOffsetStep<Record1<Long>> zipkin.storage.mysql.MySQLSpanStore.toTraceIdQuery(DSLContext context, QueryRequest request)",
                    "List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.aggregateDependencies(long endTs, @Nullable Long lookback, Connection conn)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a1ba9a92c22eb3562c5a60353063aacbafa57da7",
        "previous_commit": "6051f962d13e78f09c5a60d566b13fa5df2a651e",
        "date": 1461734903,
        "releases": {
            "previous": "a1ba9a92c22eb3562c5a60353063aacbafa57da7",
            "next": "a1ba9a92c22eb3562c5a60353063aacbafa57da7"
        },
        "commit_message": "Adds ElasticsearchSpanStore.MAX_RAW_SPANS to permit large query results\n\nThis adds `ElasticsearchSpanStore.MAX_RAW_SPANS`, which controls the maximum\nraw spans returned by any trace query, regardless of trace count.\n\nThis is similar to `CassandraStorage.maxTraceCols`, which might warrant\nrenaming.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a1ba9a92c22eb3562c5a60353063aacbafa57da7": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<Span>> zipkin.elasticsearch.ElasticsearchSpanStore.getRawTrace(long traceId)",
                    "ListenableFuture<List<List<Span>>> zipkin.elasticsearch.ElasticsearchSpanStore.getTracesByIds(Collection<Long> traceIds, String[] indices)"
                ]
            },
            "6051f962d13e78f09c5a60d566b13fa5df2a651e": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<Span>> zipkin.elasticsearch.ElasticsearchSpanStore.getRawTrace(long traceId)",
                    "ListenableFuture<List<List<Span>>> zipkin.elasticsearch.ElasticsearchSpanStore.getTracesByIds(Collection<Long> traceIds, String[] indices)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d1ff1c04f561a4d318eedbe8c43de562653f17a8",
        "previous_commit": "87f0a17c65d4e88e55f6d65c0fe2fbfe7bdd79b9",
        "date": 1504622455,
        "releases": {
            "previous": "d1ff1c04f561a4d318eedbe8c43de562653f17a8",
            "next": "d1ff1c04f561a4d318eedbe8c43de562653f17a8"
        },
        "commit_message": "Fixes bad dep\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d1ff1c04f561a4d318eedbe8c43de562653f17a8": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public Endpoint zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)",
                    "public Annotation zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ]
            },
            "87f0a17c65d4e88e55f6d65c0fe2fbfe7bdd79b9": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public Endpoint zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)",
                    "public Annotation zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0608e90248b30b4dff87884990e8e3ceb6c97510",
        "previous_commit": "f9c2e904c176de0808d0260341e3d3964cc7056f",
        "date": 1465007620,
        "releases": {
            "previous": "0608e90248b30b4dff87884990e8e3ceb6c97510",
            "next": "0608e90248b30b4dff87884990e8e3ceb6c97510"
        },
        "commit_message": "Makes CASSANDRA_ENSURE_SCHEMA work when schema is absent (#1128)\n\nOur cassandra docker image comes with the schema installed, which hid a\r\nbug where we failed to properly guard state 0 (keyspace didn't exist).\r\n\r\nThis fixes the bug and also backfills known upgrade scenarios. Tested\r\non Cassandra 2.1 and 2.2.\r\n\r\nThanks to @gena01 for reporting",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0608e90248b30b4dff87884990e8e3ceb6c97510": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin.storage.cassandra.Schema.getKeyspaceMetadata(Session session)",
                    "static void zipkin.storage.cassandra.Schema.ensureExists(String keyspace, Session session)"
                ]
            },
            "f9c2e904c176de0808d0260341e3d3964cc7056f": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin.storage.cassandra.Schema.getKeyspaceMetadata(Session session)",
                    "static void zipkin.storage.cassandra.Schema.ensureExists(String keyspace, Session session)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f9039a4e8cb48de60eb6bc3423c61bd1a9adfe89",
        "previous_commit": "a8f1c016800907aadfe9b887415df57a146ed334",
        "date": 1550635676,
        "releases": {
            "previous": "f9039a4e8cb48de60eb6bc3423c61bd1a9adfe89",
            "next": "f9039a4e8cb48de60eb6bc3423c61bd1a9adfe89"
        },
        "commit_message": "Suggests use of Zipkin Lens when running a standard server (#2404)\n\nThis adds a \"Try Lens UI\" button to the classic UI when running in the\r\nstandard build (which can server both asset trees at once). This is\r\ncontrolled by `SUGGEST_LENS` env variable set to true by default. Those\r\nsimply hosting zipkin-ui assets will not be impacted.\r\n\r\nThis works via a normal browser cookie. If someone wants to stop using\r\nlens, then close their browser and reload the page.\r\n\r\nFixes #2402",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f9039a4e8cb48de60eb6bc3423c61bd1a9adfe89": {
                "zipkin-autoconfigure/ui/src/main/java/zipkin2/autoconfigure/ui/ZipkinUiAutoConfiguration.java": [
                    "String zipkin2.autoconfigure.ui.ZipkinUiAutoConfiguration.processedIndexHtml()",
                    "public void zipkin2.autoconfigure.ui.ZipkinUiAutoConfiguration.addResourceHandlers(ResourceHandlerRegistry registry)"
                ]
            },
            "a8f1c016800907aadfe9b887415df57a146ed334": {
                "zipkin-autoconfigure/ui/src/main/java/zipkin2/autoconfigure/ui/ZipkinUiAutoConfiguration.java": [
                    "String zipkin2.autoconfigure.ui.ZipkinUiAutoConfiguration.processedIndexHtml()",
                    "public void zipkin2.autoconfigure.ui.ZipkinUiAutoConfiguration.addResourceHandlers(ResourceHandlerRegistry registry)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "634015c29ec0bc567f249878e5d45659e23bd9ae",
        "previous_commit": "9526fb565b25cba4f3539c535d15675c57913365",
        "date": 1571096246,
        "releases": {
            "previous": "634015c29ec0bc567f249878e5d45659e23bd9ae",
            "next": "634015c29ec0bc567f249878e5d45659e23bd9ae"
        },
        "commit_message": "Disables auto-configuration and switches to properties for adding modules (#2840)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "634015c29ec0bc567f249878e5d45659e23bd9ae": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServer.java": [
                    "public static void zipkin.server.ZipkinServer.main(String[] args)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "public PrometheusMeterRegistry zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.prometheusMeterRegistry()"
                ]
            },
            "9526fb565b25cba4f3539c535d15675c57913365": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServer.java": [
                    "public static void zipkin.server.ZipkinServer.main(String[] args)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "public PrometheusMeterRegistry zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.prometheusMeterRegistry()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4866e7afc05982b7ad9b9b029048dc95be1db463",
        "previous_commit": "b6da02686249ac2df81daf98315f80c572142e29",
        "date": 1467599986,
        "releases": {
            "previous": "4866e7afc05982b7ad9b9b029048dc95be1db463",
            "next": "4866e7afc05982b7ad9b9b029048dc95be1db463"
        },
        "commit_message": "Extracts DeduplicatingExecutor, preventing redundant Cassandra indexing (#1157)\n\nThe previous code had a mechanism to reduce writes to two indexes:\r\n`service_name_index` and `service_span_name_index`. This mechanism would\r\nprevent writing the same names multiple times. However, it is only\r\neffective on a per-thread basis (as names were stored in thread locals).\r\n\r\nIn practice, this code is invoked at collection, and collectors have\r\nmany request threads per transport. By changing to a shared loading\r\ncache, we can extend the deduplication to all threads. By extracting a\r\nclass to do this, we can test the edge cases and make it available for\r\nfuture work, such as the other indexes.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4866e7afc05982b7ad9b9b029048dc95be1db463": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeSpanName(String serviceName, String spanName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java": [
                    "void zipkin.storage.cassandra.CassandraStorage.clear()"
                ]
            },
            "b6da02686249ac2df81daf98315f80c572142e29": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "ListenableFuture<?> zipkin.storage.cassandra.CassandraSpanConsumer.storeSpanName(String serviceName, String spanName)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java": [
                    "void zipkin.storage.cassandra.CassandraStorage.clear()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6078622d32158abb150cdd03cf6424822e8931ff",
        "previous_commit": "525f7c316d71662d8f7be9e06f51dac1d6306606",
        "date": 1506918607,
        "releases": {
            "previous": "6078622d32158abb150cdd03cf6424822e8931ff",
            "next": "6078622d32158abb150cdd03cf6424822e8931ff"
        },
        "commit_message": "Allows MySQL to lazy set parentId (#1755)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6078622d32158abb150cdd03cf6424822e8931ff": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanConsumer.java": [
                    "public void zipkin.storage.mysql.MySQLSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin2/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.parentId(@Nullable String parentId)"
                ]
            },
            "525f7c316d71662d8f7be9e06f51dac1d6306606": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanConsumer.java": [
                    "public void zipkin.storage.mysql.MySQLSpanConsumer.accept(List<Span> spans)"
                ],
                "zipkin2/src/main/java/zipkin2/Span.java": [
                    "public Builder zipkin2.Span.parentId(@Nullable String parentId)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "17346391769d92f6ef376f493aa01b033a393b83",
        "previous_commit": "ec3b446104e81c064cd523ab23ca42db3112db90",
        "date": 1564646348,
        "releases": {
            "previous": "17346391769d92f6ef376f493aa01b033a393b83",
            "next": "17346391769d92f6ef376f493aa01b033a393b83"
        },
        "commit_message": "Add support for health-checking ES client. (#2722)\n\n* Add support for health-checking ES client.\r\n\r\n* Configure\r\n\r\n* Less flaky test?\r\n\r\n* Finish\r\n\r\n* Explicitly set duration unit.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "17346391769d92f6ef376f493aa01b033a393b83": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "HttpHealthCheckedEndpointGroup zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.decorateHealthCheck(EndpointGroup endpointGroup)",
                    "Endpoint zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.getEndpoint()"
                ]
            },
            "ec3b446104e81c064cd523ab23ca42db3112db90": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "HttpHealthCheckedEndpointGroup zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.decorateHealthCheck(EndpointGroup endpointGroup)",
                    "Endpoint zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.getEndpoint()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "712de3d26a27877536c8a35703543f0eab6b21bf",
        "previous_commit": "822c62dc8a303acf230b551f720aad50d0b63fa4",
        "date": 1571615455,
        "releases": {
            "previous": "712de3d26a27877536c8a35703543f0eab6b21bf",
            "next": "712de3d26a27877536c8a35703543f0eab6b21bf"
        },
        "commit_message": "Don't use Stream.parallel which moves tasks to another threadpool which can break tracing. (#2871)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "712de3d26a27877536c8a35703543f0eab6b21bf": {
                "zipkin-server/src/main/java/zipkin2/server/internal/health/ZipkinHealthController.java": [
                    "static HttpResponse zipkin2.server.internal.health.ZipkinHealthController.newHealthResponse(List<ComponentHealth> healths, MediaType mediaType)",
                    "CompletableFuture<HttpResponse> zipkin2.server.internal.health.ZipkinHealthController.health(ServiceRequestContext ctx, MediaType mediaType)"
                ]
            },
            "822c62dc8a303acf230b551f720aad50d0b63fa4": {
                "zipkin-server/src/main/java/zipkin2/server/internal/health/ZipkinHealthController.java": [
                    "static HttpResponse zipkin2.server.internal.health.ZipkinHealthController.newHealthResponse(List<ComponentHealth> healths, MediaType mediaType)",
                    "CompletableFuture<HttpResponse> zipkin2.server.internal.health.ZipkinHealthController.health(ServiceRequestContext ctx, MediaType mediaType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "55702c638b83996f47498af13bb9c10bfe80b28a",
        "previous_commit": "cc6912779526ffa72523bf85f68511104bc2999e",
        "date": 1563516537,
        "releases": {
            "previous": "55702c638b83996f47498af13bb9c10bfe80b28a",
            "next": "55702c638b83996f47498af13bb9c10bfe80b28a"
        },
        "commit_message": "Makes elasticsearch health check the same protocol as prod requests (#2686)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "55702c638b83996f47498af13bb9c10bfe80b28a": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)",
                    "public HttpClient zipkin2.elasticsearch.ElasticsearchStorage.httpClient()"
                ]
            },
            "cc6912779526ffa72523bf85f68511104bc2999e": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)",
                    "public HttpClient zipkin2.elasticsearch.ElasticsearchStorage.httpClient()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "10094e53bbbfdba0dd9362f1d23f632f00e88d94",
        "previous_commit": "1009002f05bf8239e5438cc14ad5490e192f25f0",
        "date": 1510466177,
        "releases": {
            "previous": "10094e53bbbfdba0dd9362f1d23f632f00e88d94",
            "next": "10094e53bbbfdba0dd9362f1d23f632f00e88d94"
        },
        "commit_message": "Store DependencyLinks in the dependency table as-is, ie each field as a separate column.\n\nAll links for each day still remain in one partition key, keeking selects simple.\nBut the data is now transparent, and just as performant and compact (due to compression).\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "10094e53bbbfdba0dd9362f1d23f632f00e88d94": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "public List<DependencyLink> zipkin.storage.cassandra3.CassandraSpanStore.apply(@Nullable ResultSet rs)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraUtil.java": [
                    "static Set<String> zipkin.storage.cassandra3.CassandraUtil.annotationKeys(Span span)"
                ]
            },
            "1009002f05bf8239e5438cc14ad5490e192f25f0": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "public List<DependencyLink> zipkin.storage.cassandra3.CassandraSpanStore.apply(@Nullable ResultSet rs)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraUtil.java": [
                    "static Set<String> zipkin.storage.cassandra3.CassandraUtil.annotationKeys(Span span)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "56e2eaeec05fe3abb71fa574739ad7b18b514fbf",
        "previous_commit": "c147c1fe01281eab6b3615be60980b4ad6044096",
        "date": 1523864952,
        "releases": {
            "previous": "56e2eaeec05fe3abb71fa574739ad7b18b514fbf",
            "next": "56e2eaeec05fe3abb71fa574739ad7b18b514fbf"
        },
        "commit_message": "Adds direct transcoding of UTF-8 strings via code most similar to Netty\n\nBefore, we kicked out to `String.getBytes(UTF_8)` when encoding found\ncharacters outside the normal ASCII range. This redundantly allocates\narrays and is generally less efficient than directly encoding.\n\nThis directly encodes UTF-8 using code most similar to Netty\n\nhttps://github.com/netty/netty/blob/4.1/buffer/src/main/java/io/netty/buffer/ByteBufUtil.java#L518\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "56e2eaeec05fe3abb71fa574739ad7b18b514fbf": {
                "zipkin2/src/main/java/zipkin2/internal/Buffer.java": [
                    "public Buffer zipkin2.internal.Buffer.writeAscii(String v)",
                    "static int zipkin2.internal.Buffer.utf8SizeInBytes(String string)"
                ]
            },
            "c147c1fe01281eab6b3615be60980b4ad6044096": {
                "zipkin2/src/main/java/zipkin2/internal/Buffer.java": [
                    "public Buffer zipkin2.internal.Buffer.writeAscii(String v)",
                    "static int zipkin2.internal.Buffer.utf8SizeInBytes(String string)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3c106d02f946c8c8e353bf1e39d6d57346954f3f",
        "previous_commit": "d218fba359e2a507fca00229d7bc1eedccba9e28",
        "date": 1513695139,
        "releases": {
            "previous": "3c106d02f946c8c8e353bf1e39d6d57346954f3f",
            "next": "3c106d02f946c8c8e353bf1e39d6d57346954f3f"
        },
        "commit_message": "Fixes conversion error on late data\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3c106d02f946c8c8e353bf1e39d6d57346954f3f": {
                "zipkin/src/main/java/zipkin/internal/V2SpanConverter.java": [
                    "void zipkin.internal.V2SpanConverter.processBinaryAnnotations(zipkin.Span source)",
                    "void zipkin.internal.V2SpanConverter.processAnnotations(zipkin.Span source)"
                ]
            },
            "d218fba359e2a507fca00229d7bc1eedccba9e28": {
                "zipkin/src/main/java/zipkin/internal/V2SpanConverter.java": [
                    "void zipkin.internal.V2SpanConverter.processBinaryAnnotations(zipkin.Span source)",
                    "void zipkin.internal.V2SpanConverter.processAnnotations(zipkin.Span source)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "71747ddb6e7f3a616ee0c608fb1adc2a94340858",
        "previous_commit": "9792fc6a2f0ac503e086dbafe02a5376d6c782a6",
        "date": 1497516841,
        "releases": {
            "previous": "71747ddb6e7f3a616ee0c608fb1adc2a94340858",
            "next": "71747ddb6e7f3a616ee0c608fb1adc2a94340858"
        },
        "commit_message": "Updates versions notably Spring Boot, MariaDB and ErrorProne (#1618)\n\nErrorProne caught a small bug in cassandra3. MariaDB bump caught a\r\nmissing dialect.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "71747ddb6e7f3a616ee0c608fb1adc2a94340858": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeSpan(Span span, TraceIdUDT traceId, Long timestamp)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DSLContexts.java": [
                    "DSLContext zipkin.storage.mysql.DSLContexts.get(Connection conn)"
                ]
            },
            "9792fc6a2f0ac503e086dbafe02a5376d6c782a6": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanConsumer.java": [
                    "ListenableFuture<?> zipkin.storage.cassandra3.CassandraSpanConsumer.storeSpan(Span span, TraceIdUDT traceId, Long timestamp)"
                ],
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DSLContexts.java": [
                    "DSLContext zipkin.storage.mysql.DSLContexts.get(Connection conn)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bf3602774d76b4bab839cfa1564448399f6f85a1",
        "previous_commit": "59f577bd573f36b28262bfff3d59ded750d2e9e0",
        "date": 1461653577,
        "releases": {
            "previous": "bf3602774d76b4bab839cfa1564448399f6f85a1",
            "next": "bf3602774d76b4bab839cfa1564448399f6f85a1"
        },
        "commit_message": "Names server side of a transport collector\n\nThis renames the server side of a transport collector.\nEx. KafkaTransport -> KafkaCollector\n\nThis maintains the name \"transport\" in artifacts, as they might include\na reporter one day, and the documentation are valid for both sides.\n\nSee https://github.com/openzipkin/openzipkin.github.io/issues/23\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bf3602774d76b4bab839cfa1564448399f6f85a1": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "KafkaCollector zipkin.server.ZipkinServerConfiguration.kafka(ZipkinKafkaProperties kafka, Sampler sampler, StorageComponent storage)",
                    "ScribeCollector zipkin.server.ZipkinServerConfiguration.scribe(ZipkinScribeProperties scribe, Sampler sampler, StorageComponent storage)"
                ]
            },
            "59f577bd573f36b28262bfff3d59ded750d2e9e0": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "KafkaTransport zipkin.server.ZipkinServerConfiguration.kafka(ZipkinKafkaProperties kafka, Sampler sampler, StorageComponent storage)",
                    "ScribeTransport zipkin.server.ZipkinServerConfiguration.scribe(ZipkinScribeProperties scribe, Sampler sampler, StorageComponent storage)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f4d4322cee77bd24d9fb45466109035072b487a8",
        "previous_commit": "8a98cad1d098f57d326faa64d89e16181ceee36e",
        "date": 1603406641,
        "releases": {
            "previous": "f4d4322cee77bd24d9fb45466109035072b487a8",
            "next": "f4d4322cee77bd24d9fb45466109035072b487a8"
        },
        "commit_message": "Hardens integration tests, fixes small bug (#3258)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f4d4322cee77bd24d9fb45466109035072b487a8": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/InsertSpan.java": [
                    "protected CompletionStage<AsyncResultSet> zipkin2.storage.cassandra.InsertSpan.newCompletionStage()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "protected BiConsumer<Row, List<Span>> zipkin2.storage.cassandra.SelectFromSpan.accumulator()"
                ]
            },
            "8a98cad1d098f57d326faa64d89e16181ceee36e": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/InsertSpan.java": [
                    "protected CompletionStage<AsyncResultSet> zipkin2.storage.cassandra.InsertSpan.newCompletionStage()"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/SelectFromSpan.java": [
                    "protected BiConsumer<Row, List<Span>> zipkin2.storage.cassandra.SelectFromSpan.accumulator()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d13f56a8745572fe650588148a7d8bbc7a12c69d",
        "previous_commit": "d8f1b9cb3346ef73933bb53806b141feb1612cf2",
        "date": 1528429795,
        "releases": {
            "previous": "d13f56a8745572fe650588148a7d8bbc7a12c69d",
            "next": "d13f56a8745572fe650588148a7d8bbc7a12c69d"
        },
        "commit_message": "Restores self-tracing for v2 stuff\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d13f56a8745572fe650588148a7d8bbc7a12c69d": {
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/TracingZipkinCassandraStorageAutoConfiguration.java": [
                    "SessionFactory zipkin.autoconfigure.storage.cassandra.TracingZipkinCassandraStorageAutoConfiguration.tracingSessionFactory()"
                ],
                "zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin/autoconfigure/storage/cassandra3/TracingZipkinCassandra3StorageAutoConfiguration.java": [
                    "SessionFactory zipkin.autoconfigure.storage.cassandra3.TracingZipkinCassandra3StorageAutoConfiguration.tracingSessionFactory()"
                ]
            },
            "d8f1b9cb3346ef73933bb53806b141feb1612cf2": {
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/TracingZipkinCassandraStorageAutoConfiguration.java": [
                    "SessionFactory zipkin.autoconfigure.storage.cassandra.TracingZipkinCassandraStorageAutoConfiguration.tracingSessionFactory()"
                ],
                "zipkin-autoconfigure/storage-cassandra3/src/main/java/zipkin/autoconfigure/storage/cassandra3/TracingZipkinCassandra3StorageAutoConfiguration.java": [
                    "SessionFactory zipkin.autoconfigure.storage.cassandra3.TracingZipkinCassandra3StorageAutoConfiguration.tracingSessionFactory()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ad550ff6ee1bb81b3f3cdbadf90573aace32044d",
        "previous_commit": "08f356bac274e9b1c738122c1cec94cfd91db010",
        "date": 1564037173,
        "releases": {
            "previous": "ad550ff6ee1bb81b3f3cdbadf90573aace32044d",
            "next": "ad550ff6ee1bb81b3f3cdbadf90573aace32044d"
        },
        "commit_message": "Move logging / tracing configuration to ES storage component so it can c\u2026 (#2706)\n\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ad550ff6ee1bb81b3f3cdbadf90573aace32044d": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public HttpClient zipkin2.elasticsearch.ElasticsearchStorage.httpClient()"
                ]
            },
            "08f356bac274e9b1c738122c1cec94cfd91db010": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public HttpClient zipkin2.elasticsearch.ElasticsearchStorage.httpClient()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "19bb7c7a20981a95fc3b56f729bdf17334ce8d89",
        "previous_commit": "b241289f0177070c3978275ab86fedb1899008d3",
        "date": 1473090573,
        "releases": {
            "previous": "19bb7c7a20981a95fc3b56f729bdf17334ce8d89",
            "next": "19bb7c7a20981a95fc3b56f729bdf17334ce8d89"
        },
        "commit_message": "Adds missing patch for #1273 (#1275)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "19bb7c7a20981a95fc3b56f729bdf17334ce8d89": {
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "static int zipkin.internal.Buffer.jsonEscapedSizeInBytes(byte[] v)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public void zipkin.internal.JsonCodec.write(BinaryAnnotation value, Buffer b)"
                ]
            },
            "b241289f0177070c3978275ab86fedb1899008d3": {
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "static int zipkin.internal.Buffer.jsonEscapedSizeInBytes(byte[] v)"
                ],
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public void zipkin.internal.JsonCodec.write(BinaryAnnotation value, Buffer b)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "115af54a382d6d5427a70007d96f8d3cf52c732d",
        "previous_commit": "9dd23918dcd11448320ee3841547c50cd720b91b",
        "date": 1570088363,
        "releases": {
            "previous": "115af54a382d6d5427a70007d96f8d3cf52c732d",
            "next": "115af54a382d6d5427a70007d96f8d3cf52c732d"
        },
        "commit_message": "Updates to latests versions, notably to Armeria 0.94 (#2832)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "115af54a382d6d5427a70007d96f8d3cf52c732d": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/ZipkinSelfTracingConfiguration.java": [
                    "HttpTracing httpTracing(Tracing tracing, Sampler sampler)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/InitialEndpointSupplier.java": [
                    "public EndpointGroup zipkin2.server.internal.elasticsearch.InitialEndpointSupplier.get()"
                ]
            },
            "9dd23918dcd11448320ee3841547c50cd720b91b": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/ZipkinSelfTracingConfiguration.java": [
                    "HttpTracing httpTracing(Tracing tracing, Sampler sampler)"
                ],
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/InitialEndpointSupplier.java": [
                    "public EndpointGroup zipkin2.server.internal.elasticsearch.InitialEndpointSupplier.get()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "707a0c527c94c21f9068ba5f294c4d1360fa7fc6",
        "previous_commit": "97626fc435e335f7e0cdb44dc7cf722165b9ad40",
        "date": 1455188078,
        "releases": {
            "previous": "707a0c527c94c21f9068ba5f294c4d1360fa7fc6",
            "next": "707a0c527c94c21f9068ba5f294c4d1360fa7fc6"
        },
        "commit_message": "Updates to zipkin-scala 1.33.0\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "707a0c527c94c21f9068ba5f294c4d1360fa7fc6": {
                "zipkin/src/main/java/zipkin/internal/ApplyTimestampAndDuration.java": [
                    "public static Span zipkin.internal.ApplyTimestampAndDuration.apply(Span s)"
                ],
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "private static Span zipkin.internal.CorrectForClockSkew.adjustTimestamps(Span span, ClockSkew clockSkew)"
                ]
            },
            "97626fc435e335f7e0cdb44dc7cf722165b9ad40": {
                "zipkin/src/main/java/zipkin/internal/ApplyTimestampAndDuration.java": [
                    "public static Span zipkin.internal.ApplyTimestampAndDuration.apply(Span s)"
                ],
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "private static Span zipkin.internal.CorrectForClockSkew.adjustTimestamps(Span span, ClockSkew clockSkew)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "343fb6013450989287e89fa13f834ae59e3249a7",
        "previous_commit": "59f577bd573f36b28262bfff3d59ded750d2e9e0",
        "date": 1461655724,
        "releases": {
            "previous": "343fb6013450989287e89fa13f834ae59e3249a7",
            "next": "343fb6013450989287e89fa13f834ae59e3249a7"
        },
        "commit_message": "Updates to Brave 3.6 and makes self-tracing optional\n\nThis updates to latest Brave, and makes it possible to configure\nself-tracing.\n\nSelf tracing exists to help troubleshoot performance of the zipkin-server.\n\nWhen Brave dependencies are in the classpath, and `zipkin.self-tracing.enabled=true`,\nZipkin will self-trace calls to the api.\n\n[yaml configuration](zipkin-server/src/main/resources/zipkin-server.yml) binds the following environment variables to spring properties:\n\nVariable | Property | Description\n--- | --- | ---\nSELF_TRACING_ENABLED | zipkin.self-tracing.enabled | Set to false to disable self-tracing. Defaults to true\nSELF_TRACING_FLUSH_INTERVAL | zipkin.self-tracing.flush-interval | Interval in seconds to flush self-tracing data to storage. Defaults to 1\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "343fb6013450989287e89fa13f834ae59e3249a7": {
                "zipkin-server/src/main/java/zipkin/server/brave/BootstrapTrace.java": [
                    "public void record(ApplicationEvent event)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/JDBCTracerConfiguration.java": [
                    "public void zipkin.server.brave.JDBCTracerConfiguration.renderEnd(ExecuteContext ctx)"
                ]
            },
            "59f577bd573f36b28262bfff3d59ded750d2e9e0": {
                "zipkin-server/src/main/java/zipkin/server/brave/BootstrapTrace.java": [
                    "public void record(ApplicationEvent event)"
                ],
                "zipkin-server/src/main/java/zipkin/server/brave/JDBCTracerConfiguration.java": [
                    "public void zipkin.server.brave.JDBCTracerConfiguration.renderEnd(ExecuteContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "526a5eeed48edf9849f5356e4044b641b9256ee0",
        "previous_commit": "ecb2b532950cc4926048fdbf04dcd4f31263de16",
        "date": 1451953909,
        "releases": {
            "previous": "526a5eeed48edf9849f5356e4044b641b9256ee0",
            "next": "526a5eeed48edf9849f5356e4044b641b9256ee0"
        },
        "commit_message": "Updates to upstream 1.29, notably unknown service name handling\n",
        "jmh_dependency": {
            "benchmark_directory": "zipkin-java-benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "526a5eeed48edf9849f5356e4044b641b9256ee0": {
                "zipkin-java-jdbc/src/main/java/io/zipkin/jdbc/JDBCSpanStore.java": [
                    "public List<String> io.zipkin.jdbc.JDBCSpanStore.getServiceNames()"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/InMemorySpanStore.java": [
                    "public synchronized void io.zipkin.server.InMemorySpanStore.accept(Iterator<Span> spans)"
                ]
            },
            "ecb2b532950cc4926048fdbf04dcd4f31263de16": {
                "zipkin-java-jdbc/src/main/java/io/zipkin/jdbc/JDBCSpanStore.java": [
                    "public List<String> io.zipkin.jdbc.JDBCSpanStore.getServiceNames()"
                ],
                "zipkin-java-server/src/main/java/io/zipkin/server/InMemorySpanStore.java": [
                    "public synchronized void io.zipkin.server.InMemorySpanStore.accept(Iterator<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "df816e6430507ef51c8f6e0a0bd61331ffc5dab6",
        "previous_commit": "b740a233ab6bf623b45dbdec891bd9c43fb9ec6e",
        "date": 1483057317,
        "releases": {
            "previous": "df816e6430507ef51c8f6e0a0bd61331ffc5dab6",
            "next": "df816e6430507ef51c8f6e0a0bd61331ffc5dab6"
        },
        "commit_message": "Annotation query can be error prone. (#1461)\n\nWith cassandra storage, results from cassandra are intersected with unfiltered traces. The result is that the number of result may vary depending on the limit but would likely to answer no result by default.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "df816e6430507ef51c8f6e0a0bd61331ffc5dab6": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getTraces(final QueryRequest request)"
                ]
            },
            "b740a233ab6bf623b45dbdec891bd9c43fb9ec6e": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)"
                ],
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra3.CassandraSpanStore.getTraces(final QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a8a678dad70d3eae09123dba940da9fbd0c5e924",
        "previous_commit": "0966f8a6c83aa0ca5348ad9421977c0760cb5935",
        "date": 1502548274,
        "releases": {
            "previous": "a8a678dad70d3eae09123dba940da9fbd0c5e924",
            "next": "a8a678dad70d3eae09123dba940da9fbd0c5e924"
        },
        "commit_message": "Adds SpanDecoder.DETECTING_DECODER (#1688)\n\nA couple things were found integrating zipkin2 json format with existing\r\ncollectors.\r\n * Only Kafka has a legacy encoding of single span per message\r\n   * We shouldn't assume this encoding is supported for others\r\n * Azure Event Hubs decodes messages decoupled from collection\r\n   * We need to move the detecting decode logic to avoid copy/pasting it",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a8a678dad70d3eae09123dba940da9fbd0c5e924": {
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.collector.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-collector/kafka10/src/main/java/zipkin/collector/kafka10/KafkaCollectorWorker.java": [
                    "public void zipkin.collector.kafka10.KafkaCollectorWorker.run()"
                ]
            },
            "0966f8a6c83aa0ca5348ad9421977c0760cb5935": {
                "zipkin-collector/kafka/src/main/java/zipkin/collector/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.collector.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-collector/kafka10/src/main/java/zipkin/collector/kafka10/KafkaCollectorWorker.java": [
                    "public void zipkin.collector.kafka10.KafkaCollectorWorker.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1997326e277e4fb39d5c7999ab9c2a500c89e55f",
        "previous_commit": "56db80658230adcdf3161c147745c2fe48a1fcaa",
        "date": 1469016126,
        "releases": {
            "previous": "1997326e277e4fb39d5c7999ab9c2a500c89e55f",
            "next": "1997326e277e4fb39d5c7999ab9c2a500c89e55f"
        },
        "commit_message": "Fixes error accepting gzipped spans\n\nThe following test case was failing due to hidden invalid header errors:\n\n```bash\n$ cat test_spans | gzip -c | curl -X POST -v --data-binary @- -H\"Content-Encoding: gzip\" -H\"Content-Type: application/json\" localhost:9411/api/v1/spans\n```\n\nFixes #1197\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1997326e277e4fb39d5c7999ab9c2a500c89e55f": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java": [
                    "DeferredResult<ResponseEntity<?>> zipkin.server.ZipkinHttpCollector.validateAndStoreSpans(String encoding, Codec codec, byte[] body)",
                    "static byte[] zipkin.server.ZipkinHttpCollector.gunzip(byte[] input)"
                ]
            },
            "56db80658230adcdf3161c147745c2fe48a1fcaa": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java": [
                    "DeferredResult<ResponseEntity<?>> zipkin.server.ZipkinHttpCollector.validateAndStoreSpans(String encoding, Codec codec, byte[] body)",
                    "static byte[] zipkin.server.ZipkinHttpCollector.gunzip(byte[] input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6cc4eb35f32a57ed1a308b4ed4af9d95b12553c7",
        "previous_commit": "42f97407d8624ab89909db6d23895e048b39996c",
        "date": 1704770153,
        "releases": {
            "previous": "6cc4eb35f32a57ed1a308b4ed4af9d95b12553c7",
            "next": "6cc4eb35f32a57ed1a308b4ed4af9d95b12553c7"
        },
        "commit_message": "Migrates self-tracing to Brave 6 (#3681)\n\nSigned-off-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6cc4eb35f32a57ed1a308b4ed4af9d95b12553c7": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/ZipkinSelfTracingConfiguration.java": [
                    "public Call<Void> zipkin2.server.internal.brave.LocalSender.sendSpans(List<byte[]> encodedSpans)",
                    "public CheckResult zipkin2.server.internal.brave.LocalSender.check()"
                ]
            },
            "42f97407d8624ab89909db6d23895e048b39996c": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/ZipkinSelfTracingConfiguration.java": [
                    "public Call<Void> zipkin2.server.internal.brave.LocalSender.sendSpans(List<byte[]> encodedSpans)",
                    "public CheckResult zipkin2.server.internal.brave.LocalSender.check()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "6b8184a073d161c0d1f119e5e9d7715c9f8ae349",
        "previous_commit": "f88ae5c8dcdc8dee3bcff5863cf3c7df9731a67b",
        "date": 1510466177,
        "releases": {
            "previous": "6b8184a073d161c0d1f119e5e9d7715c9f8ae349",
            "next": "6b8184a073d161c0d1f119e5e9d7715c9f8ae349"
        },
        "commit_message": "performance fixes:\n - DeduplicatingExecutor around writes to span_by_service,\n - 40k max queue length in cql driver,\n - durable_writes disabled (no commitlog on disk),\n - disable read repairs,\n - lower gc_grace to 3 hours (match hint window),\n - row cache span_by_service,\n - increase server-side speculative retries\u2026\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6b8184a073d161c0d1f119e5e9d7715c9f8ae349": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "void zipkin2.storage.cassandra.CassandraSpanConsumer.storeServiceSpanName(String serviceName, String spanName)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public static Builder zipkin2.storage.cassandra.CassandraStorage.newBuilder()"
                ]
            },
            "f88ae5c8dcdc8dee3bcff5863cf3c7df9731a67b": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanConsumer.java": [
                    "void zipkin2.storage.cassandra.CassandraSpanConsumer.storeServiceSpanName(String serviceName, String spanName)"
                ],
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public static Builder zipkin2.storage.cassandra.CassandraStorage.newBuilder()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9dd10cdc41c424648e93b2a1a1f849beabe4d838",
        "previous_commit": "3f299cda195af7b1685a11e262dcd6a554dec2a1",
        "date": 1522215964,
        "releases": {
            "previous": "9dd10cdc41c424648e93b2a1a1f849beabe4d838",
            "next": "9dd10cdc41c424648e93b2a1a1f849beabe4d838"
        },
        "commit_message": "Skip filtering traces from result when STRICT_TRACE_ID is set to true (#1973)\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9dd10cdc41c424648e93b2a1a1f849beabe4d838": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)",
                    "public List<List<Span>> zipkin2.elasticsearch.ElasticsearchSpanStore.convert(BufferedSource content)"
                ]
            },
            "3f299cda195af7b1685a11e262dcd6a554dec2a1": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)",
                    "public List<List<Span>> zipkin2.elasticsearch.ElasticsearchSpanStore.convert(BufferedSource content)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bbcf152c780956fdb967402ece8346b202fcbd6a",
        "previous_commit": "634015c29ec0bc567f249878e5d45659e23bd9ae",
        "date": 1571107316,
        "releases": {
            "previous": "bbcf152c780956fdb967402ece8346b202fcbd6a",
            "next": "bbcf152c780956fdb967402ece8346b202fcbd6a"
        },
        "commit_message": "moves to slf4j-api for all server-based code (#2830)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bbcf152c780956fdb967402ece8346b202fcbd6a": {
                "zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java": [
                    "void zipkin2.collector.Collector.handleError(Throwable e, Supplier<String> defaultLogMessage, Callback<Void> callback)",
                    "public static Builder zipkin2.collector.Collector.newBuilder(Class<?> loggingClass)"
                ]
            },
            "634015c29ec0bc567f249878e5d45659e23bd9ae": {
                "zipkin-collector/core/src/main/java/zipkin2/collector/Collector.java": [
                    "void zipkin2.collector.Collector.handleError(Throwable e, Supplier<String> defaultLogMessage, Callback<Void> callback)",
                    "public static Builder zipkin2.collector.Collector.newBuilder(Class<?> loggingClass)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "88f1f29d2b7126b54ea0488d627e59e5da0a8da7",
        "previous_commit": "ac0ba02e9f43bc1125c8bfad0b3de14495c709f3",
        "date": 1503883919,
        "releases": {
            "previous": "88f1f29d2b7126b54ea0488d627e59e5da0a8da7",
            "next": "88f1f29d2b7126b54ea0488d627e59e5da0a8da7"
        },
        "commit_message": "Adds call utilities commonly needed (#1708)\n\nThis adds `Call.emptyList()` needed for almost all span store operations\r\n`Call.map()` for translating objects,  and `Call.flatMap()` needed to\r\ntransform an ID list into a get by ID call.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "88f1f29d2b7126b54ea0488d627e59e5da0a8da7": {
                "zipkin/src/main/java/zipkin/internal/v2/Call.java": [
                    "public void zipkin.internal.v2.Call<V>.enqueue(Callback<V> callback)",
                    "public V zipkin.internal.v2.Call<V>.execute()"
                ]
            },
            "ac0ba02e9f43bc1125c8bfad0b3de14495c709f3": {
                "zipkin/src/main/java/zipkin/internal/v2/Call.java": [
                    "public void zipkin.internal.v2.Call<V>.enqueue(Callback<V> callback)",
                    "public V zipkin.internal.v2.Call<V>.execute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8b3e5ba40aee7a84c197f8e09c64fdf8eb6e85fe",
        "previous_commit": "276df1351d3c15db963479a190c771f1f33ca1f3",
        "date": 1461939101,
        "releases": {
            "previous": "8b3e5ba40aee7a84c197f8e09c64fdf8eb6e85fe",
            "next": "8b3e5ba40aee7a84c197f8e09c64fdf8eb6e85fe"
        },
        "commit_message": "Makes the counting sampler accurate to 100 decisions and more fair\n\nPreviously, the counting sampler biased the first trace ids. For\nexample, if you had a sample rate of 50%, 5K traces would be sampled,\nthen 5K would not be. This would result in a poor experience for low\ntraffic sites. This randomizes the decisions, so that they are more\nfair, and restores the granularity to 100 decisions.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8b3e5ba40aee7a84c197f8e09c64fdf8eb6e85fe": {
                "zipkin/src/main/java/zipkin/CountingTraceIdSampler.java": [
                    "public static TraceIdSampler zipkin.CountingTraceIdSampler.create(final float rate)",
                    "public synchronized boolean zipkin.CountingTraceIdSampler.isSampled(long traceIdIgnored)"
                ]
            },
            "276df1351d3c15db963479a190c771f1f33ca1f3": {
                "zipkin/src/main/java/zipkin/CountingTraceIdSampler.java": [
                    "public static TraceIdSampler zipkin.CountingTraceIdSampler.create(final float rate)",
                    "public synchronized boolean zipkin.CountingTraceIdSampler.isSampled(long traceIdIgnored)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "73c91494d26f0f59491d8d388adf0f3c7d051578",
        "previous_commit": "45fa8ea2f1dcbf1bbbe9a65e9e05879fe7799f73",
        "date": 1584086000,
        "releases": {
            "previous": "73c91494d26f0f59491d8d388adf0f3c7d051578",
            "next": "73c91494d26f0f59491d8d388adf0f3c7d051578"
        },
        "commit_message": "Finishes edge cases of adapting old storage components (#3024)\n\nNoticed there was another case where we could accidentally wrap an\r\nempty, so just added a bunch more assertions.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "73c91494d26f0f59491d8d388adf0f3c7d051578": {
                "zipkin/src/main/java/zipkin2/internal/TracesAdapter.java": [
                    "public Call<List<List<Span>>> zipkin2.internal.TracesAdapter.getTraces(Iterable<String> traceIds)",
                    "public List<List<Span>> zipkin2.internal.TracesAdapter.map(List<Span> input)"
                ]
            },
            "45fa8ea2f1dcbf1bbbe9a65e9e05879fe7799f73": {
                "zipkin/src/main/java/zipkin2/internal/TracesAdapter.java": [
                    "public Call<List<List<Span>>> zipkin2.internal.TracesAdapter.getTraces(Iterable<String> traceIds)",
                    "public List<List<Span>> zipkin2.internal.TracesAdapter.map(List<Span> input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "53726596685f6f1de8059e79d1927b3282cff5cb",
        "previous_commit": "ab0985377923bdeb018dd4ef3c6e5ab65728239a",
        "date": 1504054177,
        "releases": {
            "previous": "53726596685f6f1de8059e79d1927b3282cff5cb",
            "next": "53726596685f6f1de8059e79d1927b3282cff5cb"
        },
        "commit_message": "Adds v2 SpanStore and a bridging adapter to v1 (#1709)\n\nThis adds SpanStore which returns Call objects as opposed to replicating\r\nsignatures for synchronous and asynchronous invocations. Unlike before,\r\nthis does not support \"adjustments\" rather assumes they happen at a\r\nlayer above storage. This decision refines the storage query api to the\r\nfollowing:\r\n\r\n```java\r\nCall<List<List<Span>>> getTraces(QueryRequest request);\r\n\r\nCall<List<Span>> getTrace(long traceIdHigh, long traceIdLow);\r\n\r\nCall<List<String>> getServiceNames();\r\n\r\nCall<List<String>> getSpanNames(String serviceName);\r\n\r\nCall<List<DependencyLink>> getDependencies(long endTs, long lookback);\r\n```\r\n\r\nA later change might replace the getTrace call with a hex string\r\nparameter.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "53726596685f6f1de8059e79d1927b3282cff5cb": {
                "zipkin/src/main/java/zipkin/internal/V2Collector.java": [
                    "protected void zipkin.internal.V2Collector.record(List<Span> sampled, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2StorageComponent.java": [
                    "public final AsyncSpanConsumer zipkin.internal.V2StorageComponent.asyncSpanConsumer()"
                ]
            },
            "ab0985377923bdeb018dd4ef3c6e5ab65728239a": {
                "zipkin/src/main/java/zipkin/internal/V2Collector.java": [
                    "protected void zipkin.internal.V2Collector.record(List<Span> sampled, Callback<Void> callback)"
                ],
                "zipkin/src/main/java/zipkin/internal/V2StorageComponent.java": [
                    "public final AsyncSpanConsumer zipkin.internal.V2StorageComponent.asyncSpanConsumer()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "139493f04aa5ea3d06bfab93047699a4e4c97ca6",
        "previous_commit": "3f0094eea2827d69987d5dbb9de00bbfffb7df54",
        "date": 1458281257,
        "releases": {
            "previous": "139493f04aa5ea3d06bfab93047699a4e4c97ca6",
            "next": "139493f04aa5ea3d06bfab93047699a4e4c97ca6"
        },
        "commit_message": "Bumps depedency versions\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "139493f04aa5ea3d06bfab93047699a4e4c97ca6": {
                "zipkin-server/src/main/java/zipkin/server/brave/SpanStoreSpanCollector.java": [
                    "static BinaryAnnotation zipkin.server.brave.SpanStoreSpanCollector.convert(com.twitter.zipkin.gen.BinaryAnnotation annotation)",
                    "private Span zipkin.server.brave.SpanStoreSpanCollector.convert(com.twitter.zipkin.gen.Span span)"
                ]
            },
            "3f0094eea2827d69987d5dbb9de00bbfffb7df54": {
                "zipkin-server/src/main/java/zipkin/server/brave/SpanStoreSpanCollector.java": [
                    "static BinaryAnnotation zipkin.server.brave.SpanStoreSpanCollector.convert(com.twitter.zipkin.gen.BinaryAnnotation annotation)",
                    "private Span zipkin.server.brave.SpanStoreSpanCollector.convert(com.twitter.zipkin.gen.Span span)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ef893d5847d0e17636eb172f250a53f8c01e493a",
        "previous_commit": "d90dc0a9bbeea5d68ea06e99afcf74fc6d18ed8e",
        "date": 1553220450,
        "releases": {
            "previous": "ef893d5847d0e17636eb172f250a53f8c01e493a",
            "next": "ef893d5847d0e17636eb172f250a53f8c01e493a"
        },
        "commit_message": "Ensures we can read and write protos with empty tag values (#2459)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ef893d5847d0e17636eb172f250a53f8c01e493a": {
                "zipkin/src/main/java/zipkin2/internal/Proto3Fields.java": [
                    "final int zipkin2.internal.Proto3Fields.sizeInBytes(T value)",
                    "final void zipkin2.internal.Proto3Fields.write(Buffer b, T value)"
                ]
            },
            "d90dc0a9bbeea5d68ea06e99afcf74fc6d18ed8e": {
                "zipkin/src/main/java/zipkin2/internal/Proto3Fields.java": [
                    "final int zipkin2.internal.Proto3Fields.sizeInBytes(T value)",
                    "final void zipkin2.internal.Proto3Fields.write(Buffer b, T value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "035b2abcb31db42de4b09d64b042c3718e066081",
        "previous_commit": "c2d02eb262cd02d467c96d525b319e1616486a30",
        "date": 1459229571,
        "releases": {
            "previous": "035b2abcb31db42de4b09d64b042c3718e066081",
            "next": "035b2abcb31db42de4b09d64b042c3718e066081"
        },
        "commit_message": "Prevents Kafka processing from halting on storage errors\n\nWhile not documented, and possibly not intentional, `SpanStore.apply`\ncan throw. For example, we found that a span too large to store resulted\nin an exception like below, which halted all further Kafka processing.\n\n```\ncom.datastax.driver.core.exceptions.InvalidQueryException: Key length of 97122 is longer than maximum of 65535\n```\n\nThis changes logic to skip and log error on any exception. To prevent\nlogs from filling up, the error message only includes ids.\n\nThis is a copy of https://github.com/openzipkin/zipkin/pull/1070\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "035b2abcb31db42de4b09d64b042c3718e066081": {
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/SpansDecoder.java": [
                    "public List<Span> zipkin.kafka.SpansDecoder.fromBytes(byte[] bytes)"
                ]
            },
            "c2d02eb262cd02d467c96d525b319e1616486a30": {
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.kafka.KafkaStreamProcessor.run()"
                ],
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/SpansDecoder.java": [
                    "public List<Span> zipkin.kafka.SpansDecoder.fromBytes(byte[] bytes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "41ec27a8802c4df7ef74aa39b6d67ddf15111490",
        "previous_commit": "d9d5dc8832f7db9565b02ee041731ca4062f8eb7",
        "date": 1581308559,
        "releases": {
            "previous": "41ec27a8802c4df7ef74aa39b6d67ddf15111490",
            "next": "41ec27a8802c4df7ef74aa39b6d67ddf15111490"
        },
        "commit_message": "Makes Lens default, removing the dependency on the classic UI (#2971)\n\nFor well over a year, we've been working on Lens, most notably @tacigar.\r\n\r\nIn fact a year ago, we added a \"Try Lens\" button and addressed a lot of\r\nfeedback from that, again largely thanks to @tacigar.\r\n\r\nIt isn't fair to hold the project hostage until some notion of\r\nperfection happens. It is also unfair for people to pick certain issues\r\nto block on, yet not volunteer to help. It is of my opinion we stop\r\nholding ourselves hostage to a maintenance pit and remove the burden and\r\nconfusion of two UIs.\r\n\r\nThis concedes the following just won't work until someone volunteers to\r\nfix them. Waiting a year hasn't done it, so waiting more won't either.\r\n\r\n* ZIPKIN_UI_BASEPATH for reverse proxy https://github.com/openzipkin/zipkin/issues/2519\r\n* ZIPKIN_UI_LOGS_URL https://github.com/openzipkin/zipkin/issues/2491\r\n* /config.json config overrides https://github.com/openzipkin/zipkin/issues/2969\r\n* Chinese language support https://github.com/openzipkin/zipkin/issues/2970",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "41ec27a8802c4df7ef74aa39b6d67ddf15111490": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "String writeConfig(ZipkinUiProperties ui)",
                    "ArmeriaServerConfigurator zipkin2.server.internal.ui.ZipkinUiConfiguration.uiServerConfigurator( HttpService indexService, Optional<MeterRegistry> meterRegistry )"
                ]
            },
            "d9d5dc8832f7db9565b02ee041731ca4062f8eb7": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "ArmeriaServerConfigurator zipkin2.server.internal.ui.ZipkinUiConfiguration.uiServerConfigurator( HttpService indexService, Optional<MeterRegistry> meterRegistry )",
                    "static String writeConfig(ZipkinUiProperties ui)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "65a0a331c9c97f0dfb596433a5f71782430fcf4d",
        "previous_commit": "3887af68cb1d9fb50a8c29b07e64d6c4464deb81",
        "date": 1552690378,
        "releases": {
            "previous": "65a0a331c9c97f0dfb596433a5f71782430fcf4d",
            "next": "65a0a331c9c97f0dfb596433a5f71782430fcf4d"
        },
        "commit_message": "Fixes refresh related bugs (#2445)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "65a0a331c9c97f0dfb596433a5f71782430fcf4d": {
                "zipkin-autoconfigure/ui/src/main/java/zipkin2/autoconfigure/ui/ZipkinUiAutoConfiguration.java": [
                    "ArmeriaServerConfigurator zipkin2.autoconfigure.ui.ZipkinUiAutoConfiguration.uiServerConfigurator( IndexSwitchingService indexSwitchingService)",
                    "IndexSwitchingService zipkin2.autoconfigure.ui.ZipkinUiAutoConfiguration.indexSwitchingService()"
                ]
            },
            "3887af68cb1d9fb50a8c29b07e64d6c4464deb81": {
                "zipkin-autoconfigure/ui/src/main/java/zipkin2/autoconfigure/ui/ZipkinUiAutoConfiguration.java": [
                    "ArmeriaServerConfigurator zipkin2.autoconfigure.ui.ZipkinUiAutoConfiguration.uiServerConfigurator( IndexSwitchingService indexSwitchingService)",
                    "IndexSwitchingService zipkin2.autoconfigure.ui.ZipkinUiAutoConfiguration.indexSwitchingService()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "93b015d33cf0a7664a91cf093f3f9f950e1a6c6d",
        "previous_commit": "eccb7229fa65fd63cd834593b45605ff1d79a6df",
        "date": 1455088357,
        "releases": {
            "previous": "93b015d33cf0a7664a91cf093f3f9f950e1a6c6d",
            "next": "93b015d33cf0a7664a91cf093f3f9f950e1a6c6d"
        },
        "commit_message": "Updates to latest zipkin-scala and adds in-mem dependency aggregation\n\nPreviously, the in-memory provider did not support dependency\naggregation. This meant users couldn't play with zipkin unless they ran\nMySQL. This adds aggregation support through a new type:\n`DependencyLinker`.\n\nThis new type also corects the dependency graph, particularly around\nuninstrumented services or paths with local spans intermediating calls.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "93b015d33cf0a7664a91cf093f3f9f950e1a6c6d": {
                "zipkin-server/src/main/java/zipkin/server/InMemorySpanStore.java": [
                    "public List<DependencyLink> getDependencies(long endTs, @Nullable Long lookback)"
                ],
                "zipkin-spanstores/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java": [
                    "public List<DependencyLink> zipkin.jdbc.JDBCSpanStore.getDependencies(long endTs, @Nullable Long lookback)"
                ]
            },
            "eccb7229fa65fd63cd834593b45605ff1d79a6df": {
                "zipkin-server/src/main/java/zipkin/server/InMemorySpanStore.java": [
                    "public List<DependencyLink> getDependencies(long endTs, @Nullable Long lookback)"
                ],
                "zipkin-spanstores/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java": [
                    "public List<DependencyLink> zipkin.jdbc.JDBCSpanStore.getDependencies(long endTs, @Nullable Long lookback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "afd63b55d7d710ee607e99d3f393f3109e3e4a9e",
        "previous_commit": "6dde6e492219d9da8aaec082391711368cc66c79",
        "date": 1566653264,
        "releases": {
            "previous": "afd63b55d7d710ee607e99d3f393f3109e3e4a9e",
            "next": "afd63b55d7d710ee607e99d3f393f3109e3e4a9e"
        },
        "commit_message": "Fixes thread safety bug on in-memory storage regarding accept count (#2779)\n\nBefore, we were using an unsafe means to increment a counter for the\r\nin-memory storage. This contributed to a test flake. This fixes the\r\nstate bug and also tightens up the flakey test.\r\n\r\nThe flakey test still exists, so is disabled for now.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "afd63b55d7d710ee607e99d3f393f3109e3e4a9e": {
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "synchronized void zipkin2.storage.InMemoryStorage.doAccept(List<Span> spans)",
                    "public int zipkin2.storage.InMemoryStorage.acceptedSpanCount()"
                ]
            },
            "6dde6e492219d9da8aaec082391711368cc66c79": {
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "synchronized void zipkin2.storage.InMemoryStorage.doAccept(List<Span> spans)",
                    "public int zipkin2.storage.InMemoryStorage.acceptedSpanCount()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5f89df48a7b240868ca706ccfd4e845a05fa7b7a",
        "previous_commit": "d2342f183f4ad81c6800cbf4595d0d66783da858",
        "date": 1563438506,
        "releases": {
            "previous": "5f89df48a7b240868ca706ccfd4e845a05fa7b7a",
            "next": "5f89df48a7b240868ca706ccfd4e845a05fa7b7a"
        },
        "commit_message": "Apply customizations to health check too. (#2684)\n\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5f89df48a7b240868ca706ccfd4e845a05fa7b7a": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageAutoConfiguration.java": [
                    "Consumer<ClientOptionsBuilder> zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageAutoConfiguration.zipkinElasticsearchHttpLogging( ZipkinElasticsearchStorageProperties es)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public HttpClient zipkin2.elasticsearch.ElasticsearchStorage.httpClient()"
                ]
            },
            "d2342f183f4ad81c6800cbf4595d0d66783da858": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageAutoConfiguration.java": [
                    "Consumer<HttpClientBuilder> zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageAutoConfiguration.zipkinElasticsearchHttpLogging( ZipkinElasticsearchStorageProperties es)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public HttpClient zipkin2.elasticsearch.ElasticsearchStorage.httpClient()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2a55aa1c7a1d2fd82b148ed8ad166ff89e7a8b80",
        "previous_commit": "a6778ecbefaade7b271555f52847b0ee1a5a593b",
        "date": 1557198289,
        "releases": {
            "previous": "2a55aa1c7a1d2fd82b148ed8ad166ff89e7a8b80",
            "next": "2a55aa1c7a1d2fd82b148ed8ad166ff89e7a8b80"
        },
        "commit_message": "Simplifies Elasticsearch index template when strict trace ID is enabled (#2561)\n\nBy default, we use strict trace IDs. This removes the analysis section\r\nof the index template when that's the case, simplifying it.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2a55aa1c7a1d2fd82b148ed8ad166ff89e7a8b80": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/IndexTemplates.java": [],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.spanIndexTemplate()",
                    "IndexTemplates zipkin2.elasticsearch.VersionSpecificTemplates.get(HttpCall.Factory callFactory)"
                ]
            },
            "a6778ecbefaade7b271555f52847b0ee1a5a593b": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/IndexTemplates.java": [
                    "char zipkin2.elasticsearch.IndexTemplates.indexTypeDelimiter()"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.spanIndexTemplate()",
                    "IndexTemplates zipkin2.elasticsearch.VersionSpecificTemplates.get(HttpCall.Factory callFactory)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5743314e16f7b784c67c5583812883905eeadaf4",
        "previous_commit": "89a43a278debbecd8a20c5525a08e716d5499a82",
        "date": 1541226816,
        "releases": {
            "previous": "5743314e16f7b784c67c5583812883905eeadaf4",
            "next": "5743314e16f7b784c67c5583812883905eeadaf4"
        },
        "commit_message": "Removes JMX Reporting from Cassandra\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5743314e16f7b784c67c5583812883905eeadaf4": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java": [
                    "static Cluster zipkin2.storage.cassandra.v1.Default.buildCluster(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "static Cluster zipkin2.storage.cassandra.DefaultSessionFactory.buildCluster(CassandraStorage cassandra)"
                ]
            },
            "89a43a278debbecd8a20c5525a08e716d5499a82": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/SessionFactory.java": [
                    "static Cluster zipkin2.storage.cassandra.v1.Default.buildCluster(CassandraStorage cassandra)"
                ],
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/DefaultSessionFactory.java": [
                    "static Cluster zipkin2.storage.cassandra.DefaultSessionFactory.buildCluster(CassandraStorage cassandra)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "68c49499dde1f98c411aae9f4219515cc0457e38",
        "previous_commit": "e661025db02106cf976d27138710e5689835b829",
        "date": 1701822184,
        "releases": {
            "previous": "68c49499dde1f98c411aae9f4219515cc0457e38",
            "next": "68c49499dde1f98c411aae9f4219515cc0457e38"
        },
        "commit_message": "Fixes int overflow issue for large TTL values (#3367)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "68c49499dde1f98c411aae9f4219515cc0457e38": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.CassandraSpanStore.getTraces(QueryRequest request)",
                    "TimestampRange zipkin2.storage.cassandra.CassandraSpanStore.timestampRange(QueryRequest request, int indexTtl)"
                ]
            },
            "e661025db02106cf976d27138710e5689835b829": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "public Call<List<List<Span>>> zipkin2.storage.cassandra.CassandraSpanStore.getTraces(QueryRequest request)",
                    "TimestampRange zipkin2.storage.cassandra.CassandraSpanStore.timestampRange(QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "10ee801ea73a965590e890361cfef92a872b751d",
        "previous_commit": "1b9ba7381e36bfee1845e8791025a748f49eb48c",
        "date": 1504143922,
        "releases": {
            "previous": "10ee801ea73a965590e890361cfef92a872b751d",
            "next": "10ee801ea73a965590e890361cfef92a872b751d"
        },
        "commit_message": "Fixes autowire problem caught in server integration tests (#1720)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "10ee801ea73a965590e890361cfef92a872b751d": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV2.java": [
                    "public String zipkin.server.ZipkinQueryApiV2.getTrace(@PathVariable String traceIdHex, WebRequest request)",
                    "public ResponseEntity<List<String>> zipkin.server.ZipkinQueryApiV2.getServiceNames()"
                ]
            },
            "1b9ba7381e36bfee1845e8791025a748f49eb48c": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV2.java": [
                    "public String zipkin.server.ZipkinQueryApiV2.getTrace(@PathVariable String traceIdHex, WebRequest request)",
                    "public ResponseEntity<List<String>> zipkin.server.ZipkinQueryApiV2.getServiceNames()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1b9ba7381e36bfee1845e8791025a748f49eb48c",
        "previous_commit": "4bb618def9f036527a8aa78076052d9278cbddc5",
        "date": 1504109203,
        "releases": {
            "previous": "1b9ba7381e36bfee1845e8791025a748f49eb48c",
            "next": "1b9ba7381e36bfee1845e8791025a748f49eb48c"
        },
        "commit_message": "Fixes v2 query api (#1719)\n\nThe read api didn't auto-config due to a race condition with the storage\r\ncomponent. This also fixed a json bug.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1b9ba7381e36bfee1845e8791025a748f49eb48c": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV2.java": [
                    "public String zipkin.server.ZipkinQueryApiV2.getTrace(@PathVariable String traceIdHex, WebRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "public Object zipkin.server.ZipkinServerConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ]
            },
            "4bb618def9f036527a8aa78076052d9278cbddc5": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV2.java": [
                    "public String zipkin.server.ZipkinQueryApiV2.getTrace(@PathVariable String traceIdHex, WebRequest request)"
                ],
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "public Object zipkin.server.ZipkinServerConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "940408f950e0215edeae22841edd5c21f734cab2",
        "previous_commit": "c060d94db8a6626fbd837d2281301a4a77a4012e",
        "date": 1571377494,
        "releases": {
            "previous": "940408f950e0215edeae22841edd5c21f734cab2",
            "next": "940408f950e0215edeae22841edd5c21f734cab2"
        },
        "commit_message": "Makes sure Elasticsearch urls are allowed to be plain text on port 80 (#2857)\n\nAmazon provisioned ES is always on default HTTP ports. Whether advisable\r\nor not, plain text HTTP is exposed. I accidentaly implied all\r\nunspecified should default to 9200, when only plain hosts should.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "940408f950e0215edeae22841edd5c21f734cab2": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/InitialEndpointSupplier.java": [
                    "public EndpointGroup zipkin2.server.internal.elasticsearch.InitialEndpointSupplier.get()",
                    "int zipkin2.server.internal.elasticsearch.InitialEndpointSupplier.getPort(URI url)"
                ]
            },
            "c060d94db8a6626fbd837d2281301a4a77a4012e": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/InitialEndpointSupplier.java": [
                    "public EndpointGroup zipkin2.server.internal.elasticsearch.InitialEndpointSupplier.get()",
                    "int zipkin2.server.internal.elasticsearch.InitialEndpointSupplier.getPort(URI url)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b001c6481e5454c6766b5b30036ebdc8bb3789f8",
        "previous_commit": "316878c5666eefe921f280e53592d30637396a96",
        "date": 1504101676,
        "releases": {
            "previous": "b001c6481e5454c6766b5b30036ebdc8bb3789f8",
            "next": "b001c6481e5454c6766b5b30036ebdc8bb3789f8"
        },
        "commit_message": "Adds v2 native in-memory storage (#1715)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b001c6481e5454c6766b5b30036ebdc8bb3789f8": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public ZipkinRule zipkin.junit.ZipkinRule.storeSpans(List<Span> spans)",
                    "public List<List<Span>> zipkin.junit.ZipkinRule.getTraces()"
                ]
            },
            "316878c5666eefe921f280e53592d30637396a96": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public ZipkinRule zipkin.junit.ZipkinRule.storeSpans(List<Span> spans)",
                    "public List<List<Span>> zipkin.junit.ZipkinRule.getTraces()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c36d2519a31aaebd1f71c556ccb36e236b92a7f1",
        "previous_commit": "6e28fe31328840976c43d0921b6b425d35243fcd",
        "date": 1452166422,
        "releases": {
            "previous": "c36d2519a31aaebd1f71c556ccb36e236b92a7f1",
            "next": "c36d2519a31aaebd1f71c556ccb36e236b92a7f1"
        },
        "commit_message": "Removes Closeable contract from SpanStore\n\nCloseable isn't the only way to close things, and in reality we weren't\ndoing anything with it. This punts the decision on how to close\nresources to implementing types.\n\nSee https://github.com/openzipkin/zipkin/issues/584\n",
        "jmh_dependency": {
            "benchmark_directory": "zipkin-java-benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c36d2519a31aaebd1f71c556ccb36e236b92a7f1": {
                "zipkin-java-interop/src/main/java/io/zipkin/interop/ScalaDependencyStoreAdapter.java": [
                    "public void io.zipkin.interop.ScalaDependencyStoreAdapter.close()"
                ],
                "zipkin-java-interop/src/main/java/io/zipkin/interop/ScalaSpanStoreAdapter.java": [
                    "public void io.zipkin.interop.ScalaSpanStoreAdapter.close()"
                ]
            },
            "6e28fe31328840976c43d0921b6b425d35243fcd": {
                "zipkin-java-interop/src/main/java/io/zipkin/interop/ScalaDependencyStoreAdapter.java": [
                    "public void io.zipkin.interop.ScalaDependencyStoreAdapter.close()"
                ],
                "zipkin-java-interop/src/main/java/io/zipkin/interop/ScalaSpanStoreAdapter.java": [
                    "public void io.zipkin.interop.ScalaSpanStoreAdapter.close()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9eef58720fda56875b69bcd42e90e2968a95923b",
        "previous_commit": "b776ac828a294eb49a3cb3278806f294a03ad729",
        "date": 1458534878,
        "releases": {
            "previous": "9eef58720fda56875b69bcd42e90e2968a95923b",
            "next": "9eef58720fda56875b69bcd42e90e2968a95923b"
        },
        "commit_message": "Ports remaining scala SpanStoreSpec tests to SpanStoreTest\n\nThis ports remaining tests to java, and also ports code changes needed\nto make them pass.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9eef58720fda56875b69bcd42e90e2968a95923b": {
                "zipkin-spanstores/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java": [
                    "List<List<Span>> zipkin.jdbc.JDBCSpanStore.getTraces(@Nullable QueryRequest request, @Nullable Long traceId, boolean raw)",
                    "public void zipkin.jdbc.JDBCSpanStore.accept(List<Span> spans)"
                ]
            },
            "b776ac828a294eb49a3cb3278806f294a03ad729": {
                "zipkin-spanstores/jdbc/src/main/java/zipkin/jdbc/JDBCSpanStore.java": [
                    "List<List<Span>> zipkin.jdbc.JDBCSpanStore.getTraces(@Nullable QueryRequest request, @Nullable Long traceId, boolean raw)",
                    "public void zipkin.jdbc.JDBCSpanStore.accept(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bb338c8af88d13e8a971e333028b3748b83f7100",
        "previous_commit": "f47ac65bad7ea2442b47b368b166d63f527ed3ef",
        "date": 1510281843,
        "releases": {
            "previous": "bb338c8af88d13e8a971e333028b3748b83f7100",
            "next": "bb338c8af88d13e8a971e333028b3748b83f7100"
        },
        "commit_message": "Fixes encoding bug where core annotations not written in JSON_V1\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bb338c8af88d13e8a971e333028b3748b83f7100": {
                "zipkin2/src/main/java/zipkin2/internal/V1SpanWriter.java": [
                    "public void zipkin2.internal.V1SpanWriter.write(Span value, Buffer b)",
                    "public int zipkin2.internal.V1SpanWriter.sizeInBytes(Span value)"
                ]
            },
            "f47ac65bad7ea2442b47b368b166d63f527ed3ef": {
                "zipkin2/src/main/java/zipkin2/internal/V1SpanWriter.java": [
                    "public void zipkin2.internal.V1SpanWriter.write(Span value, Buffer b)",
                    "public int zipkin2.internal.V1SpanWriter.sizeInBytes(Span value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4624229c5f6023c0fb9751ac2b49fccf36b9f76a",
        "previous_commit": "82aa637fdc61d67c68a3d0289cdb752b6b9d853a",
        "date": 1487169900,
        "releases": {
            "previous": "4624229c5f6023c0fb9751ac2b49fccf36b9f76a",
            "next": "4624229c5f6023c0fb9751ac2b49fccf36b9f76a"
        },
        "commit_message": "Processing partial/broken traces (#1515)\n\nDo not add incorrect dependencies when processing partial/broken traces\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4624229c5f6023c0fb9751ac2b49fccf36b9f76a": {
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<DependencyLinkSpan> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/Node.java": [
                    "public Node<V> zipkin.internal.Node<V>.build()"
                ]
            },
            "82aa637fdc61d67c68a3d0289cdb752b6b9d853a": {
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<DependencyLinkSpan> spans)"
                ],
                "zipkin/src/main/java/zipkin/internal/Node.java": [
                    "public Node<V> zipkin.internal.Node<V>.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6bd2f9ccd0205033d86b7438bb2c779f722d3b8e",
        "previous_commit": "ad97f877682a993bda972ec7670dfcd7e97af789",
        "date": 1521860686,
        "releases": {
            "previous": "6bd2f9ccd0205033d86b7438bb2c779f722d3b8e",
            "next": "6bd2f9ccd0205033d86b7438bb2c779f722d3b8e"
        },
        "commit_message": "Updates dependency versions (#1967)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6bd2f9ccd0205033d86b7438bb2c779f722d3b8e": {
                "zipkin/src/main/java/zipkin/storage/QueryRequest.java": [
                    "public Builder zipkin.storage.QueryRequest.parseAnnotationQuery(@Nullable String annotationQuery)"
                ],
                "zipkin2/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public Builder zipkin2.storage.QueryRequest.parseAnnotationQuery(@Nullable String annotationQuery)"
                ]
            },
            "ad97f877682a993bda972ec7670dfcd7e97af789": {
                "zipkin/src/main/java/zipkin/storage/QueryRequest.java": [
                    "public Builder zipkin.storage.QueryRequest.parseAnnotationQuery(@Nullable String annotationQuery)"
                ],
                "zipkin2/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public Builder zipkin2.storage.QueryRequest.parseAnnotationQuery(@Nullable String annotationQuery)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9af0dd83349f0bd2e1b60ad366b3362e917fa31a",
        "previous_commit": "065f569ab4c6f613728e7b29fd050cebacbb39e0",
        "date": 1602662288,
        "releases": {
            "previous": "9af0dd83349f0bd2e1b60ad366b3362e917fa31a",
            "next": "9af0dd83349f0bd2e1b60ad366b3362e917fa31a"
        },
        "commit_message": "es early deprecation fail (#3171)\n\n* add global and per-method deprecation check\r\n\r\n* lowercase 'warning' as header  names in Armeria are always lowercase.\r\n\r\n* cluster warnings should not fail tests, because they rely on the configuration of our docker images which is not representative for a site instance. Nevertheless log a big WARN message so it's visible.\r\n\r\n* - more warning fixes\r\n- exclude colon warning for ES 6\r\n\r\n* factor out deprecation warnings that should be ignored\r\n\r\nCo-authored-by: Adrian Cole <adrian.f.cole@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9af0dd83349f0bd2e1b60ad366b3362e917fa31a": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "String zipkin2.elasticsearch.ElasticsearchStorage.buildUrl(IndexTemplates templates, String type)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.indexProperties(float version)"
                ]
            },
            "065f569ab4c6f613728e7b29fd050cebacbb39e0": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "String zipkin2.elasticsearch.ElasticsearchStorage.buildUrl(IndexTemplates templates, String type)"
                ],
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "String zipkin2.elasticsearch.VersionSpecificTemplates.indexProperties(float version)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "89763a1ec75e0dc5b95301004bce95b3fa4ba71f",
        "previous_commit": "08c889fd6f9a54088ab868742464ecd2df20e6f2",
        "date": 1456897806,
        "releases": {
            "previous": "89763a1ec75e0dc5b95301004bce95b3fa4ba71f",
            "next": "89763a1ec75e0dc5b95301004bce95b3fa4ba71f"
        },
        "commit_message": "Adds ZipkinRule.receivedSpanCount and ZipkinRule.receivedSpanBytes\n\nThis adds ZipkinRule.receivedSpanCount and ZipkinRule.receivedSpanBytes\nto help instrumentation projects tune the amount of data they report.\n\nUsing this, instrumentation projects can verify they are sending less\nbytes, ex via compression or less data duplication. They can also verify\nthey aren't sending more spans they expect. For example, instrumentation\ncan easily bundle the same span multiple times in the same POST request.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "89763a1ec75e0dc5b95301004bce95b3fa4ba71f": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public MockResponse zipkin.junit.ZipkinRule.dispatch(RecordedRequest request)"
                ],
                "zipkin/src/main/java/zipkin/InMemorySpanStore.java": [
                    "public synchronized void zipkin.InMemorySpanStore.accept(Iterator<Span> spans)"
                ]
            },
            "08c889fd6f9a54088ab868742464ecd2df20e6f2": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public MockResponse zipkin.junit.ZipkinRule.dispatch(RecordedRequest request)"
                ],
                "zipkin/src/main/java/zipkin/InMemorySpanStore.java": [
                    "public synchronized void zipkin.InMemorySpanStore.accept(Iterator<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "38720bcab29010e38fdb763d31d6768a43fac334",
        "previous_commit": "00bab807d36ffe01b3964ecf8271e5ef4a129de4",
        "date": 1569295412,
        "releases": {
            "previous": "38720bcab29010e38fdb763d31d6768a43fac334",
            "next": "38720bcab29010e38fdb763d31d6768a43fac334"
        },
        "commit_message": "Makes it possible to produce a slim build (#2820)\n\n* Makes it possible to exclude zipkin-classic UI\r\n* Removes the large jsoup dep\r\n* Makes it possible to exclude components with 3rd party libs\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "38720bcab29010e38fdb763d31d6768a43fac334": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "String zipkin2.server.internal.ui.ZipkinUiConfiguration.processedIndexHtml(Resource indexHtml)",
                    "ArmeriaServerConfigurator zipkin2.server.internal.ui.ZipkinUiConfiguration.uiServerConfigurator( IndexSwitchingService indexSwitchingService)"
                ]
            },
            "00bab807d36ffe01b3964ecf8271e5ef4a129de4": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "String zipkin2.server.internal.ui.ZipkinUiConfiguration.processedIndexHtml(Resource indexHtml)",
                    "ArmeriaServerConfigurator zipkin2.server.internal.ui.ZipkinUiConfiguration.uiServerConfigurator( IndexSwitchingService indexSwitchingService)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "583b3e947149fe34bb2f1bef71755e57aad24d66",
        "previous_commit": "d47e80433cdf97a78e92712f313ae607e6f61dec",
        "date": 1537188707,
        "releases": {
            "previous": "583b3e947149fe34bb2f1bef71755e57aad24d66",
            "next": "583b3e947149fe34bb2f1bef71755e57aad24d66"
        },
        "commit_message": "Add the ability to specify the complete JDBC url\n\nCloses #2190\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "583b3e947149fe34bb2f1bef71755e57aad24d66": {
                "zipkin-autoconfigure/storage-mysql/src/main/java/zipkin2/autoconfigure/storage/mysql/ZipkinMySQLStorageProperties.java": [
                    "public DataSource zipkin2.autoconfigure.storage.mysql.ZipkinMySQLStorageProperties.toDataSource()"
                ]
            },
            "d47e80433cdf97a78e92712f313ae607e6f61dec": {
                "zipkin-autoconfigure/storage-mysql/src/main/java/zipkin2/autoconfigure/storage/mysql/ZipkinMySQLStorageProperties.java": [
                    "public DataSource zipkin2.autoconfigure.storage.mysql.ZipkinMySQLStorageProperties.toDataSource()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4281b3268bbcc51b2ce87b738a4a689d0fa40fa1",
        "previous_commit": "a14f1936c4bb7db4124b25589e93a49eccdd1df0",
        "date": 1459408720,
        "releases": {
            "previous": "4281b3268bbcc51b2ce87b738a4a689d0fa40fa1",
            "next": "4281b3268bbcc51b2ce87b738a4a689d0fa40fa1"
        },
        "commit_message": "Simplifies wiring to not attempt to detect classes\n\n`@ConditionalOnClass` has been unreliable in docker, regardless of\nwhether we unpack the all-jar or not. For example, mysql currently fails\nin docker eventhough all of its classes are in the classpath, while\nCassandra works.\n\nWe already have a test to ensure optional dependencies are optional,\nand we already have a property that is only set when someone wants a\nspecific storage component (`zipkin.storage.type`). The extra class\nchecking is unnecessary complexity, so let's not do it.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4281b3268bbcc51b2ce87b738a4a689d0fa40fa1": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "InMemorySpanStore zipkin.server.ZipkinServerConfiguration.inMemorySpanStore()"
                ]
            },
            "a14f1936c4bb7db4124b25589e93a49eccdd1df0": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "InMemorySpanStore zipkin.server.ZipkinServerConfiguration.inMemorySpanStore()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0b499b89f2dfc85f7f99ab4e74db534facd22907",
        "previous_commit": "e35065e4d879ef3435d60390009dc9957a694572",
        "date": 1513243116,
        "releases": {
            "previous": "0b499b89f2dfc85f7f99ab4e74db534facd22907",
            "next": "0b499b89f2dfc85f7f99ab4e74db534facd22907"
        },
        "commit_message": "Fixes bad partitioning of data in the v1 memory store (#1843)\n\n*Note* this only affects people using the v1 in-memory component. The\r\nin-memory option of zipkin-server does not use this even if v1 format is\r\naccepted.\r\n\r\nThis fixes a partitioning messup where all spans for the same timestamp\r\nfiled under the same key.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0b499b89f2dfc85f7f99ab4e74db534facd22907": {
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "public int zipkin.storage.InMemorySpanStore.compare(Pair<Long> left, Pair<Long> right)"
                ]
            },
            "e35065e4d879ef3435d60390009dc9957a694572": {
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "public int zipkin.storage.InMemorySpanStore.compare(Pair<Long> left, Pair<Long> right)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "09ece5af2eba0da83195ef945ce7c1a199ad9406",
        "previous_commit": "3f0f09909aa26d71afb4615401ec6273b169f6dc",
        "date": 1531311768,
        "releases": {
            "previous": "09ece5af2eba0da83195ef945ce7c1a199ad9406",
            "next": "09ece5af2eba0da83195ef945ce7c1a199ad9406"
        },
        "commit_message": "Ports dependency linking tests to v2 model and corrects MySQL impl\n\nWhile porting dependency linking tests, noticed a small bug and\ncorrected the MySQL impl.\n\nSee #2047\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "09ece5af2eba0da83195ef945ce7c1a199ad9406": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/AggregateDependencies.java": [
                    "public List<DependencyLink> zipkin2.storage.mysql.v1.AggregateDependencies.apply(DSLContext context)"
                ]
            },
            "3f0f09909aa26d71afb4615401ec6273b169f6dc": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/AggregateDependencies.java": [
                    "public List<DependencyLink> zipkin2.storage.mysql.v1.AggregateDependencies.apply(DSLContext context)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e29196439253cf5d8576df5ac6b8c6f5c76cf2ab",
        "previous_commit": "a081d68a968d3587706db1bc59df5d004646f8fe",
        "date": 1523683716,
        "releases": {
            "previous": "e29196439253cf5d8576df5ac6b8c6f5c76cf2ab",
            "next": "e29196439253cf5d8576df5ac6b8c6f5c76cf2ab"
        },
        "commit_message": "Tolerates empty local and remote endpoints\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e29196439253cf5d8576df5ac6b8c6f5c76cf2ab": {
                "zipkin2/src/main/java/zipkin2/internal/V2SpanReader.java": [
                    "public Endpoint zipkin2.internal.V2SpanReader.fromJson(JsonReader reader)"
                ]
            },
            "a081d68a968d3587706db1bc59df5d004646f8fe": {
                "zipkin2/src/main/java/zipkin2/internal/V2SpanReader.java": [
                    "public Endpoint zipkin2.internal.V2SpanReader.fromJson(JsonReader reader)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b3e38a9110ab7fb1184784d7af64422e4fae55f7",
        "previous_commit": "9e31cc32618f392823855ce2250a931ae948c4eb",
        "date": 1468495457,
        "releases": {
            "previous": "b3e38a9110ab7fb1184784d7af64422e4fae55f7",
            "next": "b3e38a9110ab7fb1184784d7af64422e4fae55f7"
        },
        "commit_message": "Exposes DependencyLinkSpan.from for use in spark job\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b3e38a9110ab7fb1184784d7af64422e4fae55f7": {
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "public List<DependencyLink> zipkin.storage.InMemorySpanStore.getDependencies(long endTs, @Nullable Long lookback)"
                ]
            },
            "9e31cc32618f392823855ce2250a931ae948c4eb": {
                "zipkin/src/main/java/zipkin/storage/InMemorySpanStore.java": [
                    "public List<DependencyLink> zipkin.storage.InMemorySpanStore.getDependencies(long endTs, @Nullable Long lookback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "28d0a3af61601adec33d29fdfd5808a5ccdadcca",
        "previous_commit": "84446f9be38d273b8198b6d90f3e18c00e94cf4e",
        "date": 1468032323,
        "releases": {
            "previous": "28d0a3af61601adec33d29fdfd5808a5ccdadcca",
            "next": "28d0a3af61601adec33d29fdfd5808a5ccdadcca"
        },
        "commit_message": "Fixes thread safety bug on ES index namer and backfills tests (#1175)\n\nThe index namer was using a type that wasn't thread-safe. This could\r\ncause spans to go into the wrong daily bucket.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "28d0a3af61601adec33d29fdfd5808a5ccdadcca": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/IndexNameFormatter.java": [
                    "String zipkin.storage.elasticsearch.IndexNameFormatter.indexNameForTimestamp(long timestampMillis)"
                ]
            },
            "84446f9be38d273b8198b6d90f3e18c00e94cf4e": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/IndexNameFormatter.java": [
                    "String zipkin.storage.elasticsearch.IndexNameFormatter.indexNameForTimestamp(long timestampMillis)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a485efed550f838070b8ce6eef1230dfed9b27da",
        "previous_commit": "afb2872e53c6cdf3ce01c4a0baf06f2a30eabad1",
        "date": 1501838443,
        "releases": {
            "previous": "a485efed550f838070b8ce6eef1230dfed9b27da",
            "next": "a485efed550f838070b8ce6eef1230dfed9b27da"
        },
        "commit_message": "Infers type from core annotations (#1680)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a485efed550f838070b8ce6eef1230dfed9b27da": {
                "zipkin/src/main/java/zipkin/internal/Span2Converter.java": [
                    "public static Span zipkin.internal.Span2Converter.toSpan(Span2 in)"
                ]
            },
            "afb2872e53c6cdf3ce01c4a0baf06f2a30eabad1": {
                "zipkin/src/main/java/zipkin/internal/Span2Converter.java": [
                    "public static Span zipkin.internal.Span2Converter.toSpan(Span2 in)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1a8e40ad0ca58e083a268152f2d4ccc14e66036a",
        "previous_commit": "a66bb609b70ba3008dcb903d6d3fb0687ff9eab9",
        "date": 1584941151,
        "releases": {
            "previous": "1a8e40ad0ca58e083a268152f2d4ccc14e66036a",
            "next": "1a8e40ad0ca58e083a268152f2d4ccc14e66036a"
        },
        "commit_message": "Add Archive Trace button (#3018)\n\n* Add Archive Trace button\r\n\r\nThis button lets you easily reupload the current trace to a different\r\nserver.\r\n\r\nThe main motivation for having this is that you can have the\r\narchival server have a very long retention period and use it as very\r\nlong term storage for traces that you care about. For example when\r\nsharing a trace in a jira ticket since otherwise the link would expire\r\nafter 1 week.\r\n\r\nDesign doc explaining the reason behind this in more details and why we\r\nwent with this implementation: https://github.com/openzipkin/openzipkin.github.io/wiki/Favorite-trace\r\n\r\n* Use notistack to show alerts",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1a8e40ad0ca58e083a268152f2d4ccc14e66036a": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "String writeConfig(ZipkinUiProperties ui)"
                ]
            },
            "a66bb609b70ba3008dcb903d6d3fb0687ff9eab9": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "String writeConfig(ZipkinUiProperties ui)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "daf95a8962ac7e7a6cbcc9c073a80eade2f71ef4",
        "previous_commit": "fbdba27f8587c52e7137b7de506e7976744f6e6c",
        "date": 1557920566,
        "releases": {
            "previous": "daf95a8962ac7e7a6cbcc9c073a80eade2f71ef4",
            "next": "daf95a8962ac7e7a6cbcc9c073a80eade2f71ef4"
        },
        "commit_message": "Vendors in AbstractUnsafeUnaryGrpcService temporarily to remove dependency on armeria release. (#2593)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "daf95a8962ac7e7a6cbcc9c073a80eade2f71ef4": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinGrpcCollector.java": [
                    "public void zipkin2.server.internal.ZipkinGrpcCollector.onSuccess(Void value)"
                ]
            },
            "fbdba27f8587c52e7137b7de506e7976744f6e6c": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinGrpcCollector.java": [
                    "public void zipkin2.server.internal.ZipkinGrpcCollector.onSuccess(Void value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "74336c80c65e873ee44ee6b91c2a0f73a37fb214",
        "previous_commit": "37bd39807098640c9a23aac63fc43f1205b2908e",
        "date": 1511440892,
        "releases": {
            "previous": "74336c80c65e873ee44ee6b91c2a0f73a37fb214",
            "next": "74336c80c65e873ee44ee6b91c2a0f73a37fb214"
        },
        "commit_message": "Rewrites Prometheus filter to neither double-register or double-count\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "74336c80c65e873ee44ee6b91c2a0f73a37fb214": {
                "zipkin-autoconfigure/metrics-prometheus/src/main/java/zipkin/autoconfigure/metrics/PrometheusMetricsAutoConfiguration.java": [
                    "public Filter zipkin.autoconfigure.metrics.PrometheusMetricsAutoConfiguration.prometheusMetricsFilter()"
                ]
            },
            "37bd39807098640c9a23aac63fc43f1205b2908e": {
                "zipkin-autoconfigure/metrics-prometheus/src/main/java/zipkin/autoconfigure/metrics/PrometheusMetricsAutoConfiguration.java": [
                    "public Filter zipkin.autoconfigure.metrics.PrometheusMetricsAutoConfiguration.prometheusMetricsFilter()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "818ea2f99e9428b4bb6d41fbffee215e3634f92c",
        "previous_commit": "36a3e53e79bda5aa3a495c68e71124bb52ca2cf2",
        "date": 1458696704,
        "releases": {
            "previous": "818ea2f99e9428b4bb6d41fbffee215e3634f92c",
            "next": "818ea2f99e9428b4bb6d41fbffee215e3634f92c"
        },
        "commit_message": "Adds GuavaSpanStore which exposes span store methods as ListenableFuture\n\nGuavaSpanStore (and its blocking adapter) enables experimentation with\nasynchronous composition without adding new dependencies to existing\nspan stores.\n\nThis adapts the elasticsearch as a first step.\n\nSee #111\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "818ea2f99e9428b4bb6d41fbffee215e3634f92c": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "SpanStore zipkin.server.ZipkinServerConfiguration.elasticsearchSpanStore(ZipkinElasticsearchProperties elasticsearch)"
                ]
            },
            "36a3e53e79bda5aa3a495c68e71124bb52ca2cf2": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "SpanStore zipkin.server.ZipkinServerConfiguration.elasticsearchSpanStore(ZipkinElasticsearchProperties elasticsearch)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "554867e2becd6450a07985ab47a82613799b6d59",
        "previous_commit": "5bb25f55ce59061602c0e982dedb6cf3da1e3d87",
        "date": 1510665155,
        "releases": {
            "previous": "554867e2becd6450a07985ab47a82613799b6d59",
            "next": "554867e2becd6450a07985ab47a82613799b6d59"
        },
        "commit_message": "Fixes test glitch\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "554867e2becd6450a07985ab47a82613799b6d59": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "public Set<String> zipkin2.storage.cassandra.CassandraUtil.map(Map<String, Long> map)"
                ]
            },
            "5bb25f55ce59061602c0e982dedb6cf3da1e3d87": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "public Set<String> zipkin2.storage.cassandra.CassandraUtil.map(Map<String, Long> map)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "781314a50dcde3203c26323a09e1d68afb110b18",
        "previous_commit": "77869db165c268ccef615d920aef058baa7232a4",
        "date": 1703840366,
        "releases": {
            "previous": "781314a50dcde3203c26323a09e1d68afb110b18",
            "next": "781314a50dcde3203c26323a09e1d68afb110b18"
        },
        "commit_message": "Add support for elasticsearch 8 (#3552)\n\nSigned-off-by: Adrian Cole <adrian@tetrate.io>\r\nCo-authored-by: fazil <fazil.c@target.com>\r\nCo-authored-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "781314a50dcde3203c26323a09e1d68afb110b18": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "IndexTemplates zipkin2.elasticsearch.VersionSpecificTemplates.get(ElasticsearchVersion version)"
                ]
            },
            "77869db165c268ccef615d920aef058baa7232a4": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/VersionSpecificTemplates.java": [
                    "IndexTemplates zipkin2.elasticsearch.VersionSpecificTemplates.get(ElasticsearchVersion version)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "0a17a4e7dd9e09198ffecfe33064e2360d0463ce",
        "previous_commit": "9a7eeb027a65cd90d48dfe82ce19cfba128108b2",
        "date": 1486806573,
        "releases": {
            "previous": "0a17a4e7dd9e09198ffecfe33064e2360d0463ce",
            "next": "0a17a4e7dd9e09198ffecfe33064e2360d0463ce"
        },
        "commit_message": "Exposes property derived MySQL datasource so sparkstreaming can use it (#1521)\n\nThe only thing ZipkinMySQLStorageProperties is used for is creating a\r\ndatasource. This exposes that so that the logic doesn't have to be copy\r\npasted into zipkin-sparkstreaming.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0a17a4e7dd9e09198ffecfe33064e2360d0463ce": {
                "zipkin-autoconfigure/storage-mysql/src/main/java/zipkin/autoconfigure/storage/mysql/ZipkinMySQLStorageAutoConfiguration.java": [
                    "DataSource zipkin.autoconfigure.storage.mysql.ZipkinMySQLStorageAutoConfiguration.mysqlDataSource()"
                ]
            },
            "9a7eeb027a65cd90d48dfe82ce19cfba128108b2": {
                "zipkin-autoconfigure/storage-mysql/src/main/java/zipkin/autoconfigure/storage/mysql/ZipkinMySQLStorageAutoConfiguration.java": [
                    "DataSource zipkin.autoconfigure.storage.mysql.ZipkinMySQLStorageAutoConfiguration.mysqlDataSource()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ab2ab63028af3585d606dd7f244eec5e08aebb49",
        "previous_commit": "05025b4033c31823bfe0d1239778c41e67a64c44",
        "date": 1492055351,
        "releases": {
            "previous": "ab2ab63028af3585d606dd7f244eec5e08aebb49",
            "next": "ab2ab63028af3585d606dd7f244eec5e08aebb49"
        },
        "commit_message": "Fixes byte count when partial surrogates exist (#1561)\n\nA UTF-8 codepoint of a partial surrogate is represented by a ?. This\r\nfixes our byte counter accordingly.\r\n\r\nThanks to okio for the hint! https://github.com/square/okio/pull/297",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ab2ab63028af3585d606dd7f244eec5e08aebb49": {
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "static int zipkin.internal.Buffer.utf8SizeInBytes(String string)"
                ]
            },
            "05025b4033c31823bfe0d1239778c41e67a64c44": {
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "static int zipkin.internal.Buffer.utf8SizeInBytes(String string)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "867a90ffbfbc2bab4d6314c9d71e12c3cafce1eb",
        "previous_commit": "610b8bf796c5f91d2b73d8914a48308b2a3786a4",
        "date": 1531427122,
        "releases": {
            "previous": "867a90ffbfbc2bab4d6314c9d71e12c3cafce1eb",
            "next": "867a90ffbfbc2bab4d6314c9d71e12c3cafce1eb"
        },
        "commit_message": "Removes v1 codebase (#2131)\n\nFixes #2047\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "867a90ffbfbc2bab4d6314c9d71e12c3cafce1eb": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public CheckResult zipkin2.storage.cassandra.v1.CassandraStorage.check()"
                ]
            },
            "610b8bf796c5f91d2b73d8914a48308b2a3786a4": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraStorage.java": [
                    "public CheckResult zipkin2.storage.cassandra.v1.CassandraStorage.check()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0d9f4e54ee4af23c941d731835b4727778259f72",
        "previous_commit": "eab0c1de1fff36de9522c4fdb904fb09646a7dba",
        "date": 1558172660,
        "releases": {
            "previous": "0d9f4e54ee4af23c941d731835b4727778259f72",
            "next": "0d9f4e54ee4af23c941d731835b4727778259f72"
        },
        "commit_message": "Moves to Armeria 0.86 (#2604)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0d9f4e54ee4af23c941d731835b4727778259f72": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "static HttpData zipkin2.server.internal.UnzippingBytesRequestConverter.convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage request)"
                ]
            },
            "eab0c1de1fff36de9522c4fdb904fb09646a7dba": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "static HttpData zipkin2.server.internal.UnzippingBytesRequestConverter.convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f47e930e3277de483ea15ab50985957c82c49d8a",
        "previous_commit": "644bb0fbf84de55a834d7f4b90415924187f9a13",
        "date": 1568795502,
        "releases": {
            "previous": "f47e930e3277de483ea15ab50985957c82c49d8a",
            "next": "f47e930e3277de483ea15ab50985957c82c49d8a"
        },
        "commit_message": "Replace banner.txt with new logo (#2738)\n\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f47e930e3277de483ea15ab50985957c82c49d8a": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServer.java": [
                    "public static void zipkin.server.ZipkinServer.main(String[] args)"
                ]
            },
            "644bb0fbf84de55a834d7f4b90415924187f9a13": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServer.java": [
                    "public static void zipkin.server.ZipkinServer.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7956e4bdce2bd410adf8793556b8ce44886281f4",
        "previous_commit": "ff388aba7df84ac2a3ca1f8f4f1be446233b7b40",
        "date": 1462370920,
        "releases": {
            "previous": "7956e4bdce2bd410adf8793556b8ce44886281f4",
            "next": "7956e4bdce2bd410adf8793556b8ce44886281f4"
        },
        "commit_message": "Removes instrumentation samplers and dodges more okio files\n\nThis removes the instrumentation samplers, as they can go in\ninstrumentation projects. It also removes a gzip utility which added\nmore classes to the jar file. The result is that Zipkin's jar is back\nto a hair over 256K.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7956e4bdce2bd410adf8793556b8ce44886281f4": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ]
            },
            "ff388aba7df84ac2a3ca1f8f4f1be446233b7b40": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0615ebdb5db279b81d2e31a4ac12c180016aab35",
        "previous_commit": "ad8520e1e535d52d9f20a94a1086924726158a05",
        "date": 1608865062,
        "releases": {
            "previous": "0615ebdb5db279b81d2e31a4ac12c180016aab35",
            "next": "0615ebdb5db279b81d2e31a4ac12c180016aab35"
        },
        "commit_message": "Updates to Kafka 2.7 and fixes skipped tests (#3335)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0615ebdb5db279b81d2e31a4ac12c180016aab35": {
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollector.java": [
                    "public KafkaCollector zipkin2.collector.kafka.KafkaCollector.start()"
                ]
            },
            "ad8520e1e535d52d9f20a94a1086924726158a05": {
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollector.java": [
                    "public KafkaCollector zipkin2.collector.kafka.KafkaCollector.start()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "dde769db4bb66f33ada3becf1d58cc85419b7fa1",
        "previous_commit": "d1792430d0922e36be00431c682db918b29cceb6",
        "date": 1557470361,
        "releases": {
            "previous": "dde769db4bb66f33ada3becf1d58cc85419b7fa1",
            "next": "dde769db4bb66f33ada3becf1d58cc85419b7fa1"
        },
        "commit_message": "Small style fix. (#2578)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "dde769db4bb66f33ada3becf1d58cc85419b7fa1": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeInboundHandler.java": [
                    "void zipkin2.collector.scribe.ScribeInboundHandler.maybeReadPayload(ChannelHandlerContext ctx)"
                ]
            },
            "d1792430d0922e36be00431c682db918b29cceb6": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeInboundHandler.java": [
                    "void zipkin2.collector.scribe.ScribeInboundHandler.maybeReadPayload(ChannelHandlerContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "baf9f16127fbb3a3286052d4d017a7fdb55dd099",
        "previous_commit": "09ece5af2eba0da83195ef945ce7c1a199ad9406",
        "date": 1531311768,
        "releases": {
            "previous": "baf9f16127fbb3a3286052d4d017a7fdb55dd099",
            "next": "baf9f16127fbb3a3286052d4d017a7fdb55dd099"
        },
        "commit_message": "Fixes bug where 0.0.0.0 was decoded from thrift\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "baf9f16127fbb3a3286052d4d017a7fdb55dd099": {
                "zipkin2/src/main/java/zipkin2/internal/ThriftEndpointCodec.java": [
                    "static Endpoint zipkin2.internal.ThriftEndpointCodec.read(ByteBuffer bytes)"
                ]
            },
            "09ece5af2eba0da83195ef945ce7c1a199ad9406": {
                "zipkin2/src/main/java/zipkin2/internal/ThriftEndpointCodec.java": [
                    "static Endpoint zipkin2.internal.ThriftEndpointCodec.read(ByteBuffer bytes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "576e22542075d899cfce054f1b910e78b9d2cdb3",
        "previous_commit": "43e33dce485bfe4f0b7b7d6d7bc735665d6bd8ca",
        "date": 1465018847,
        "releases": {
            "previous": "576e22542075d899cfce054f1b910e78b9d2cdb3",
            "next": "576e22542075d899cfce054f1b910e78b9d2cdb3"
        },
        "commit_message": "Fixes incorrect log statement\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "576e22542075d899cfce054f1b910e78b9d2cdb3": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/Schema.java": [
                    "static void zipkin.storage.cassandra.Schema.ensureExists(String keyspace, Session session)"
                ]
            },
            "43e33dce485bfe4f0b7b7d6d7bc735665d6bd8ca": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/Schema.java": [
                    "static void zipkin.storage.cassandra.Schema.ensureExists(String keyspace, Session session)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8576bd57b9e2f0493185c61b1058c35ddf1c247f",
        "previous_commit": "66293b25fb86f5de8bf3f145d82ff16397f9942f",
        "date": 1527758111,
        "releases": {
            "previous": "8576bd57b9e2f0493185c61b1058c35ddf1c247f",
            "next": "8576bd57b9e2f0493185c61b1058c35ddf1c247f"
        },
        "commit_message": "Makes v2 json format detection tighter\n\nper gitter convo with @drolando and @mpetazzoni\n\nBasically this is `contains(Endpoint\"|\"tags\")`\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8576bd57b9e2f0493185c61b1058c35ddf1c247f": {
                "zipkin/src/main/java/zipkin/internal/DetectingSpanDecoder.java": [
                    "public static SpanDecoder zipkin.internal.DetectingSpanDecoder.detectFormat(byte[] bytes)"
                ]
            },
            "66293b25fb86f5de8bf3f145d82ff16397f9942f": {
                "zipkin/src/main/java/zipkin/internal/DetectingSpanDecoder.java": [
                    "public static SpanDecoder zipkin.internal.DetectingSpanDecoder.detectFormat(byte[] bytes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "69551975718c38d1885c6ad8d9bd86f8d9edbfc3",
        "previous_commit": "eb5caea69887a9efe3307bf3b7dafc1d354efd29",
        "date": 1477476408,
        "releases": {
            "previous": "69551975718c38d1885c6ad8d9bd86f8d9edbfc3",
            "next": "69551975718c38d1885c6ad8d9bd86f8d9edbfc3"
        },
        "commit_message": "Fixes bad high port read on Elasticsearch (#1358)\n\nWe had a bug fixed only in the normal json codec around high ports. This\r\nbackfills tests to make sure it doesn't arise again.\r\n\r\nThanks to @nollbit for finding this!\r\n\r\nFixes #1350",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "69551975718c38d1885c6ad8d9bd86f8d9edbfc3": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ZipkinAdapters.java": [
                    "public Endpoint zipkin.storage.elasticsearch.http.ZipkinAdapters.fromJson(JsonReader reader)"
                ]
            },
            "eb5caea69887a9efe3307bf3b7dafc1d354efd29": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ZipkinAdapters.java": [
                    "public Endpoint zipkin.storage.elasticsearch.http.ZipkinAdapters.fromJson(JsonReader reader)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d1d9095973081552c2232e32c0865294cc955efc",
        "previous_commit": "b001c6481e5454c6766b5b30036ebdc8bb3789f8",
        "date": 1504103851,
        "releases": {
            "previous": "d1d9095973081552c2232e32c0865294cc955efc",
            "next": "d1d9095973081552c2232e32c0865294cc955efc"
        },
        "commit_message": "WIP v2 http query api (#1710)\n\nAdds v2 http query api",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d1d9095973081552c2232e32c0865294cc955efc": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ]
            },
            "b001c6481e5454c6766b5b30036ebdc8bb3789f8": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0fafdf4145e97ad35d72f5b0296db85353599617",
        "previous_commit": "75bcf971edaa377bc18e0960349c670d46f79c6a",
        "date": 1551935935,
        "releases": {
            "previous": "0fafdf4145e97ad35d72f5b0296db85353599617",
            "next": "0fafdf4145e97ad35d72f5b0296db85353599617"
        },
        "commit_message": "Tolerates thrift encoding bug we made a long time ago (#2433)\n\nWhile zipkin2 reporters encode properly, the okhttp v1 reporter encodes\r\nthrift slightly wrong. This passed before as we weren't strict on the\r\nPOST endpoint. This makes detection more lenient as we know we can't\r\nviably change all tools that historically used v1 libraries and okhttp.\r\n\r\nSee openzipkin/zipkin-reporter-java#133\r\nSee bizreach/play-zipkin-tracing#42\r\n\r\nThanks @takezoe for reporting (pun intended)",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0fafdf4145e97ad35d72f5b0296db85353599617": {
                "zipkin/src/main/java/zipkin2/SpanBytesDecoderDetector.java": [
                    "public static BytesDecoder<Span> zipkin2.SpanBytesDecoderDetector.decoderForListMessage(byte[] spans)"
                ]
            },
            "75bcf971edaa377bc18e0960349c670d46f79c6a": {
                "zipkin/src/main/java/zipkin2/SpanBytesDecoderDetector.java": [
                    "public static BytesDecoder<Span> zipkin2.SpanBytesDecoderDetector.decoderForListMessage(byte[] spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "433ecf92f9f5c523e109c61e1e978a60cf593d4a",
        "previous_commit": "69551975718c38d1885c6ad8d9bd86f8d9edbfc3",
        "date": 1477479547,
        "releases": {
            "previous": "433ecf92f9f5c523e109c61e1e978a60cf593d4a",
            "next": "433ecf92f9f5c523e109c61e1e978a60cf593d4a"
        },
        "commit_message": "Writes Span.traceIdHigh last so that it is exactly the same as libthrift (#1359)\n\nConsistency on field order isn't required by thrift, but this writes the\r\nfields in ID order to make exact binary comparison pass vs libthrift.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "433ecf92f9f5c523e109c61e1e978a60cf593d4a": {
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public void zipkin.internal.ThriftCodec.write(Span value, Buffer buffer)"
                ]
            },
            "69551975718c38d1885c6ad8d9bd86f8d9edbfc3": {
                "zipkin/src/main/java/zipkin/internal/ThriftCodec.java": [
                    "public void zipkin.internal.ThriftCodec.write(Span value, Buffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0047038b4936970716645d35a558e1286db7afcd",
        "previous_commit": "76b141c8a50b8d94ca9163ed215bf92ea132eeff",
        "date": 1493350593,
        "releases": {
            "previous": "0047038b4936970716645d35a558e1286db7afcd",
            "next": "0047038b4936970716645d35a558e1286db7afcd"
        },
        "commit_message": "Fixes ES service/span indexing for mid-tier server spans (#1578)\n\nBefore, the service/span indexing skipped mid-tier server spans. This\r\ncorrects the associated logic so that the UI drop-down includes all\r\nvalid service names.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0047038b4936970716645d35a558e1286db7afcd": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "Map<String, Set<Pair<String>>> zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.indexSpans(HttpBulkIndexer indexer, List<Span> spans)"
                ]
            },
            "76b141c8a50b8d94ca9163ed215bf92ea132eeff": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/ElasticsearchHttpSpanConsumer.java": [
                    "Map<String, Set<Pair<String>>> zipkin.storage.elasticsearch.http.ElasticsearchHttpSpanConsumer.indexSpans(HttpBulkIndexer indexer, List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7a819ff31afceedc7d5e7b7e3211bb7f9e888dfe",
        "previous_commit": "0940e30727eda7dd4988ee43f860d0e08948b519",
        "date": 1557397638,
        "releases": {
            "previous": "7a819ff31afceedc7d5e7b7e3211bb7f9e888dfe",
            "next": "7a819ff31afceedc7d5e7b7e3211bb7f9e888dfe"
        },
        "commit_message": "annotation query parsing improvements (#2572)\n\ntrims annotations and properly addresses precedence",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7a819ff31afceedc7d5e7b7e3211bb7f9e888dfe": {
                "zipkin/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public Builder zipkin2.storage.QueryRequest.parseAnnotationQuery(@Nullable String annotationQuery)"
                ]
            },
            "0940e30727eda7dd4988ee43f860d0e08948b519": {
                "zipkin/src/main/java/zipkin2/storage/QueryRequest.java": [
                    "public Builder zipkin2.storage.QueryRequest.parseAnnotationQuery(@Nullable String annotationQuery)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "dd0de78d1c6f0b03c10c0013a7480dec7e41bc3a",
        "previous_commit": "428eac3fd8b583fe3ea8afef2ca2a651c853c0a5",
        "date": 1459224665,
        "releases": {
            "previous": "dd0de78d1c6f0b03c10c0013a7480dec7e41bc3a",
            "next": "dd0de78d1c6f0b03c10c0013a7480dec7e41bc3a"
        },
        "commit_message": "Updates to zipkin-ui 1.39, notably addressing cache concerns\n\nzipkin-ui includes some cache-related changes to make the experience\nmore responsive. It also introduces \"Start time\", which allows users\nto control how far back to search for traces.\n\nThis includes a hard-coded cache policy, consistent with zipkin-scala.\n\n* 1 minute for index.html\n* 10 minute for /config.json\n* 365 days for hashed resources (ex /app-e12b3bbb7e5a572f270d.min.js)\n\nSince index.html links to hashed resource names, any change to it will\norphan old resources. That's why hashed resource age can be 365 days.\n\nSee #1062\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "dd0de78d1c6f0b03c10c0013a7480dec7e41bc3a": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinUiConfiguration.java": [
                    "public void zipkin.server.ZipkinUiConfiguration.addResourceHandlers(ResourceHandlerRegistry registry)"
                ]
            },
            "428eac3fd8b583fe3ea8afef2ca2a651c853c0a5": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinUiConfiguration.java": [
                    "public void zipkin.server.ZipkinUiConfiguration.addResourceHandlers(ResourceHandlerRegistry registry)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f66fa61f3bf54e444645642af82e602a7f844156",
        "previous_commit": "4f7f361573792ba8a3d046e6df4bba3c9bbe0b40",
        "date": 1701815102,
        "releases": {
            "previous": "f66fa61f3bf54e444645642af82e602a7f844156",
            "next": "f66fa61f3bf54e444645642af82e602a7f844156"
        },
        "commit_message": "deps: updates main deps except armeria and amqp (#3615)\n\nThis updates all main dependencies except armeria (handled #3614) and\r\namqp (driver is incompatible so needs a new PR).\r\n\r\nSigned-off-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f66fa61f3bf54e444645642af82e602a7f844156": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getIndexes()"
                ]
            },
            "4f7f361573792ba8a3d046e6df4bba3c9bbe0b40": {
                "zipkin-storage/mysql-v1/src/main/java/zipkin2/storage/mysql/v1/internal/generated/tables/ZipkinAnnotations.java": [
                    "public List<Index> zipkin2.storage.mysql.v1.internal.generated.tables.ZipkinAnnotations.getIndexes()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8433609605274a55c9e562a16965a5fff2029199",
        "previous_commit": "f238246b30ffae0e52b8323e3547a0d97b9aef0c",
        "date": 1563334470,
        "releases": {
            "previous": "8433609605274a55c9e562a16965a5fff2029199",
            "next": "8433609605274a55c9e562a16965a5fff2029199"
        },
        "commit_message": "Raise default timeout for server to 11s (#2678)\n\nThis ensures the server default timeout is higher than the elasticsearch client to handle health check timeouts.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8433609605274a55c9e562a16965a5fff2029199": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinServerConfiguration.java": [
                    "ArmeriaServerConfigurator zipkin2.server.internal.ZipkinServerConfiguration.serverConfigurator(Optional<Tracing> tracing)"
                ]
            },
            "f238246b30ffae0e52b8323e3547a0d97b9aef0c": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinServerConfiguration.java": [
                    "ArmeriaServerConfigurator zipkin2.server.internal.ZipkinServerConfiguration.serverConfigurator(Optional<Tracing> tracing)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "54a792b57c32e0796d618fff6472d11a45fcf19b",
        "previous_commit": "ecb88ddb1fee58984867c65f11af154112be461b",
        "date": 1483970659,
        "releases": {
            "previous": "54a792b57c32e0796d618fff6472d11a45fcf19b",
            "next": "54a792b57c32e0796d618fff6472d11a45fcf19b"
        },
        "commit_message": "Backfills tests for async spans in the dependencies graph (#1478)\n\nThis unveiled a small bug left unnoticed.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "54a792b57c32e0796d618fff6472d11a45fcf19b": {
                "zipkin/src/main/java/zipkin/storage/QueryRequest.java": [
                    "public boolean zipkin.storage.QueryRequest.test(List<Span> spans)"
                ]
            },
            "ecb88ddb1fee58984867c65f11af154112be461b": {
                "zipkin/src/main/java/zipkin/storage/QueryRequest.java": [
                    "public boolean zipkin.storage.QueryRequest.test(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "68d3581aad1dd95654b9441ac31054b81845544e",
        "previous_commit": "1b7cc7b60e829b16b7a02671a081c43a4e0e4218",
        "date": 1572521282,
        "releases": {
            "previous": "68d3581aad1dd95654b9441ac31054b81845544e",
            "next": "68d3581aad1dd95654b9441ac31054b81845544e"
        },
        "commit_message": "add metric binders (#2902)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "68d3581aad1dd95654b9441ac31054b81845544e": {
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "public PrometheusMeterRegistry zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.prometheusMeterRegistry( PrometheusConfig config, CollectorRegistry registry, Clock clock)"
                ]
            },
            "1b7cc7b60e829b16b7a02671a081c43a4e0e4218": {
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "public PrometheusMeterRegistry zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.prometheusMeterRegistry( PrometheusConfig config, CollectorRegistry registry, Clock clock)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9a83aa6ed2f7a33c457a802f4b165a7bb14e456a",
        "previous_commit": "ba025306985da1f253665ac053d290a0f21f841c",
        "date": 1484561908,
        "releases": {
            "previous": "9a83aa6ed2f7a33c457a802f4b165a7bb14e456a",
            "next": "9a83aa6ed2f7a33c457a802f4b165a7bb14e456a"
        },
        "commit_message": "do not silently drop subsequent spans missing a parent (#1487)\n\nCurrently zipkin models traces as a tree of spans.  During the\r\nconversation from a list (or whatever the underlying storage engine\r\nuses) to a tree, spans are dropped if more than one of them is missing\r\na parentId (it is a \"root\" node).  This appears to be an unintentional\r\nregression (possibly around 9d8261a33c3adaad9aecd290744b651290c72e24),\r\nsince the comment still indicate a workaround for this problem:\r\nattribute missing parents to root.\r\n\r\nThis is still imperfect, but exposes it to the the user so they can\r\ndebug the instrumentation problem instead of silently dropping data.\r\nNote that the workaround only applies when constructing a tree\r\ninternally the actual spans returned by the API still have no\r\nparentID, and this is what is displayed in the web ui.\r\n\r\nThis problem is alluded to in #324, but the thrust of that ticket is\r\nmodeling asynchronous actions.\r\n\r\nHighlighting suspect traces is discussed in #1484 and this condition\r\nwould be a prime candidate.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9a83aa6ed2f7a33c457a802f4b165a7bb14e456a": {
                "zipkin/src/main/java/zipkin/internal/Node.java": [
                    "public void zipkin.internal.Node<V>.addNode(Long parentId, long id, @Nullable V value)"
                ]
            },
            "ba025306985da1f253665ac053d290a0f21f841c": {
                "zipkin/src/main/java/zipkin/internal/Node.java": [
                    "public void zipkin.internal.Node<V>.addNode(Long parentId, long id, @Nullable V value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "aeedd6e1ecb772676b93a7275afbfac3315b0848",
        "previous_commit": "9464815af03a771a65f435e2479d02df9a01238f",
        "date": 1559030898,
        "releases": {
            "previous": "aeedd6e1ecb772676b93a7275afbfac3315b0848",
            "next": "aeedd6e1ecb772676b93a7275afbfac3315b0848"
        },
        "commit_message": "Handle exceptions without message. (#2611)\n\n* Handle exceptions without message.\r\n\r\n* Only log on not bad request.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "aeedd6e1ecb772676b93a7275afbfac3315b0848": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "public HttpResponse zipkin2.server.internal.BodyIsExceptionMessage.handleException(RequestContext ctx, HttpRequest req, Throwable cause)"
                ]
            },
            "9464815af03a771a65f435e2479d02df9a01238f": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "public HttpResponse zipkin2.server.internal.BodyIsExceptionMessage.handleException(RequestContext ctx, HttpRequest req, Throwable cause)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f3cb368ce61943fc9c20a95f35cd1d19de8b3c38",
        "previous_commit": "e11ad6d6d61eb26fb1cbc1b0ea4b4866ea44fb77",
        "date": 1524986969,
        "releases": {
            "previous": "f3cb368ce61943fc9c20a95f35cd1d19de8b3c38",
            "next": "f3cb368ce61943fc9c20a95f35cd1d19de8b3c38"
        },
        "commit_message": "Tolerantly deserializes unknown kind values in proto3\n\nThanks @magengbin for noticing\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f3cb368ce61943fc9c20a95f35cd1d19de8b3c38": {
                "zipkin2/src/main/java/zipkin2/internal/Proto3ZipkinFields.java": [
                    "Span zipkin2.internal.Proto3ZipkinFields.readValue(Buffer buffer, int length)"
                ]
            },
            "e11ad6d6d61eb26fb1cbc1b0ea4b4866ea44fb77": {
                "zipkin2/src/main/java/zipkin2/internal/Proto3ZipkinFields.java": [
                    "Span zipkin2.internal.Proto3ZipkinFields.readValue(Buffer buffer, int length)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bb0a133315868a65584ec4d8c6d71a1a0a4ff4c2",
        "previous_commit": "4b7f03f6031732c1a6031f1acca3fa19626ba071",
        "date": 1660824272,
        "releases": {
            "previous": "bb0a133315868a65584ec4d8c6d71a1a0a4ff4c2",
            "next": "bb0a133315868a65584ec4d8c6d71a1a0a4ff4c2"
        },
        "commit_message": "Remove exception on traceIds of length 15 (#3471)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bb0a133315868a65584ec4d8c6d71a1a0a4ff4c2": {
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public static String zipkin2.Span.normalizeTraceId(String traceId)"
                ]
            },
            "4b7f03f6031732c1a6031f1acca3fa19626ba071": {
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public static String zipkin2.Span.normalizeTraceId(String traceId)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "da7482f9a14e2c26dfc0c0d907d2193568a8e76b",
        "previous_commit": "8a58c6ff452195156df295cf5be4a30eba63d2a9",
        "date": 1561283210,
        "releases": {
            "previous": "da7482f9a14e2c26dfc0c0d907d2193568a8e76b",
            "next": "da7482f9a14e2c26dfc0c0d907d2193568a8e76b"
        },
        "commit_message": "Fixes ThrottledStorageComponent not passing through health check (#2632)\n\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "da7482f9a14e2c26dfc0c0d907d2193568a8e76b": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHealthIndicator.java": [
                    "void zipkin2.server.internal.ZipkinHealthIndicator.addComponent(Component component)"
                ]
            },
            "8a58c6ff452195156df295cf5be4a30eba63d2a9": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHealthIndicator.java": [
                    "void zipkin2.server.internal.ZipkinHealthIndicator.addComponent(Component component)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4b96460402e186c4ebdcefba36cdf5d3a8d57c56",
        "previous_commit": "6ae47e19d0e782c01c292c5b662fbef14c740b90",
        "date": 1459329480,
        "releases": {
            "previous": "4b96460402e186c4ebdcefba36cdf5d3a8d57c56",
            "next": "4b96460402e186c4ebdcefba36cdf5d3a8d57c56"
        },
        "commit_message": "Attempts to de-flake Kafka transport tests\n\nKafka tests were failing on master. This does a few things to help:\n* Starts ZK+Kafka in travis as opposed to via test lifecycle\n* Don't exclude log4j: this is actually used by Kafka!\n* Configure logback\n* Don't try to use \"localhost\", which can fail. Use 127.0.0.1\n* Close more resources\n* Sets a hard timeout of 10 seconds to run all Kafka tests\n* Ignores `skipsOnConsumerException` test for now, as breaks travis\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4b96460402e186c4ebdcefba36cdf5d3a8d57c56": {
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaTransport.java": [
                    "public void zipkin.kafka.KafkaTransport.close()"
                ]
            },
            "6ae47e19d0e782c01c292c5b662fbef14c740b90": {
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaTransport.java": [
                    "public void zipkin.kafka.KafkaTransport.close()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ff0be70b4a762519827fe8a8fbabd08d754adefc",
        "previous_commit": "4f0978b8649d052136bc3f1448b9054be6256f8e",
        "date": 1557148707,
        "releases": {
            "previous": "ff0be70b4a762519827fe8a8fbabd08d754adefc",
            "next": "ff0be70b4a762519827fe8a8fbabd08d754adefc"
        },
        "commit_message": "Compresses similar integration tests to reduce overall runtime\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ff0be70b4a762519827fe8a8fbabd08d754adefc": {
                "zipkin-tests/src/main/java/zipkin2/storage/ITSpanStore.java": [
                    "public void zipkin2.storage.ITSpanStore.getTraces_spanName()"
                ]
            },
            "4f0978b8649d052136bc3f1448b9054be6256f8e": {
                "zipkin-tests/src/main/java/zipkin2/storage/ITSpanStore.java": [
                    "public void zipkin2.storage.ITSpanStore.getTraces_spanName()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "867350a2dac7751e8f46f09d17719baece850083",
        "previous_commit": "a8d98974e61b1b1b7157916298c3b4f0fa524f2f",
        "date": 1565337256,
        "releases": {
            "previous": "867350a2dac7751e8f46f09d17719baece850083",
            "next": "867350a2dac7751e8f46f09d17719baece850083"
        },
        "commit_message": "Clarifies we obviate parsing in zipkin-aws (#2745)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "867350a2dac7751e8f46f09d17719baece850083": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "<V> V zipkin2.elasticsearch.internal.client.HttpCall<V>.parseResponse(AggregatedHttpResponse response, BodyConverter<V> bodyConverter)"
                ]
            },
            "a8d98974e61b1b1b7157916298c3b4f0fa524f2f": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "<V> V zipkin2.elasticsearch.internal.client.HttpCall<V>.parseResponse(AggregatedHttpResponse response, BodyConverter<V> bodyConverter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "402f6cfcea4e38655ac7957a3e322cdb9aeaaf2a",
        "previous_commit": "39a4aa7fa3a1420be5f4e24304595bb3e8edb0d4",
        "date": 1531706358,
        "releases": {
            "previous": "402f6cfcea4e38655ac7957a3e322cdb9aeaaf2a",
            "next": "402f6cfcea4e38655ac7957a3e322cdb9aeaaf2a"
        },
        "commit_message": "Removes duplication of code in cassandra date utilities\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "402f6cfcea4e38655ac7957a3e322cdb9aeaaf2a": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "static List<LocalDate> zipkin2.storage.cassandra.CassandraUtil.getDays(long endTs, @Nullable Long lookback)"
                ]
            },
            "39a4aa7fa3a1420be5f4e24304595bb3e8edb0d4": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraUtil.java": [
                    "static List<LocalDate> zipkin2.storage.cassandra.CassandraUtil.getDays(long endTs, @Nullable Long lookback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a1670523e6daaf465c61bdc5e1ccdd34493317d4",
        "previous_commit": "5d9db102db983636b8bc0c24c54f96f6d8a340e3",
        "date": 1518096835,
        "releases": {
            "previous": "a1670523e6daaf465c61bdc5e1ccdd34493317d4",
            "next": "a1670523e6daaf465c61bdc5e1ccdd34493317d4"
        },
        "commit_message": "Fixes MySQL join condition to use correct index (#1909)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a1670523e6daaf465c61bdc5e1ccdd34493317d4": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "public List<String> zipkin.storage.mysql.MySQLSpanStore.getSpanNames(String serviceName)"
                ]
            },
            "5d9db102db983636b8bc0c24c54f96f6d8a340e3": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "public List<String> zipkin.storage.mysql.MySQLSpanStore.getSpanNames(String serviceName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8f86d59190baec78f80450c40cee7e89822eb095",
        "previous_commit": "b2787ffdafcec57feafc63fa44c2f75a8c5ffe18",
        "date": 1571218275,
        "releases": {
            "previous": "8f86d59190baec78f80450c40cee7e89822eb095",
            "next": "8f86d59190baec78f80450c40cee7e89822eb095"
        },
        "commit_message": "Default to 9200 when host but no port specified for elasticsearch. (#2847)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8f86d59190baec78f80450c40cee7e89822eb095": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/InitialEndpointSupplier.java": [
                    "int zipkin2.server.internal.elasticsearch.InitialEndpointSupplier.getPort(URI url)"
                ]
            },
            "b2787ffdafcec57feafc63fa44c2f75a8c5ffe18": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/InitialEndpointSupplier.java": [
                    "int zipkin2.server.internal.elasticsearch.InitialEndpointSupplier.getPort(URI url)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e9b55ef59436fae82b0d65ceda6e4b3bea7ace71",
        "previous_commit": "9acae647cc9e6f28b0ff8429cb1883cfe33c628c",
        "date": 1709165210,
        "releases": {
            "previous": "e9b55ef59436fae82b0d65ceda6e4b3bea7ace71",
            "next": "e9b55ef59436fae82b0d65ceda6e4b3bea7ace71"
        },
        "commit_message": "cassandra: adds log statement to help debug schema install failure (#3740)\n\nSigned-off-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e9b55ef59436fae82b0d65ceda6e4b3bea7ace71": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static Version zipkin2.storage.cassandra.Schema.ensureVersion(com.datastax.oss.driver.api.core.metadata.Metadata metadata)"
                ]
            },
            "9acae647cc9e6f28b0ff8429cb1883cfe33c628c": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static Version zipkin2.storage.cassandra.Schema.ensureVersion(com.datastax.oss.driver.api.core.metadata.Metadata metadata)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d1d796f259b07b22d79ddc205c0cd5f427a08476",
        "previous_commit": "cf151135f26f666795e921f53db7f35fd18a1881",
        "date": 1462544646,
        "releases": {
            "previous": "d1d796f259b07b22d79ddc205c0cd5f427a08476",
            "next": "d1d796f259b07b22d79ddc205c0cd5f427a08476"
        },
        "commit_message": "Adds propagation to cassandra self-tracing\n\nThis adds propagation to cassandra self-tracing. When the receiver has\nzipkin instrumentation installed, zipkin self-traces will propagate and\ninclude the underlying storage operations\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d1d796f259b07b22d79ddc205c0cd5f427a08476": {
                "zipkin-server/src/main/java/zipkin/server/brave/TracedSession.java": [
                    "public Object zipkin.server.brave.TracedSession.invoke(Object proxy, Method method, Object[] args)"
                ]
            },
            "cf151135f26f666795e921f53db7f35fd18a1881": {
                "zipkin-server/src/main/java/zipkin/server/brave/TracedSession.java": [
                    "public Object zipkin.server.brave.TracedSession.invoke(Object proxy, Method method, Object[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d0ddcbb7f15eb764db95a67234bca31456795e1b",
        "previous_commit": "94e7365695c46e731a93a2d0ff97a27e5837973f",
        "date": 1458881058,
        "releases": {
            "previous": "d0ddcbb7f15eb764db95a67234bca31456795e1b",
            "next": "d0ddcbb7f15eb764db95a67234bca31456795e1b"
        },
        "commit_message": "Fixes unsafe use of CharsetEncoder\n\nUses a thread local to avoid state conflicts.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d0ddcbb7f15eb764db95a67234bca31456795e1b": {
                "zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraUtil.java": [
                    "private static List<ByteBuffer> zipkin.cassandra.CassandraUtil.toByteBuffers(Collection<String> strings)"
                ]
            },
            "94e7365695c46e731a93a2d0ff97a27e5837973f": {
                "zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraUtil.java": [
                    "private static List<ByteBuffer> zipkin.cassandra.CassandraUtil.toByteBuffers(Collection<String> strings)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7a7449484bb7d8b544318056f1514a7023b7ffd1",
        "previous_commit": "83b6695d4322990d180117fab7112b7671ae35c9",
        "date": 1464286108,
        "releases": {
            "previous": "7a7449484bb7d8b544318056f1514a7023b7ffd1",
            "next": "7a7449484bb7d8b544318056f1514a7023b7ffd1"
        },
        "commit_message": "Teaches LazyCloseable to remember exceptions for a bit\n\nExceptions computing I/O intensive values can harm the process or the\nbackend. This teaches LazyCloseable to remember exceptions for a bit to\nreduce that damage. The value is hard-set to 1 second which allows us\nto mitigate the issue without adding a configuration burden.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7a7449484bb7d8b544318056f1514a7023b7ffd1": {
                "zipkin/src/main/java/zipkin/internal/Lazy.java": [
                    "public final T zipkin.internal.Lazy<T>.get()"
                ]
            },
            "83b6695d4322990d180117fab7112b7671ae35c9": {
                "zipkin/src/main/java/zipkin/internal/Lazy.java": [
                    "public final T zipkin.internal.Lazy<T>.get()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b40b50b696e3f3affb6d1ca9f7e2f9bbf6cf4401",
        "previous_commit": "85c485f0257735b2fe11ece52165e30f473da6a5",
        "date": 1501130216,
        "releases": {
            "previous": "b40b50b696e3f3affb6d1ca9f7e2f9bbf6cf4401",
            "next": "b40b50b696e3f3affb6d1ca9f7e2f9bbf6cf4401"
        },
        "commit_message": "Further clarifies MySQL dependency linking\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b40b50b696e3f3affb6d1ca9f7e2f9bbf6cf4401": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkSpanIterator.java": [
                    "public DependencyLinkSpan zipkin.storage.mysql.DependencyLinkSpanIterator.next()"
                ]
            },
            "85c485f0257735b2fe11ece52165e30f473da6a5": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkSpanIterator.java": [
                    "public DependencyLinkSpan zipkin.storage.mysql.DependencyLinkSpanIterator.next()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "662a7c8ea9b466553107a80faf676bf35ae83990",
        "previous_commit": "3b557eba212c0e9fa41dd7c8f31c2f6d4c69da41",
        "date": 1523088571,
        "releases": {
            "previous": "662a7c8ea9b466553107a80faf676bf35ae83990",
            "next": "662a7c8ea9b466553107a80faf676bf35ae83990"
        },
        "commit_message": "Ignores empty rabbit URI property\n\nThe default is empty and we accidentally interpreted that as a real URI.\n\nEx: `uri: ${RABBIT_URI:}`\n\nCaused:\n```\n| Caused by: java.lang.NullPointerException: null\nquery_1     |     at com.rabbitmq.client.ConnectionFactory.setUri(ConnectionFactory.java:277) ~[amqp-client-4.5.0.jar!/:4.5.0]\nquery_1     |     at zipkin.autoconfigure.collector.rabbitmq.ZipkinRabbitMQCollectorProperties.toBuilder(ZipkinRabbitMQCollectorProperties.java:132) ~[zipkin-autoconfigure-collector-rabbitmq-2.7.0.jar!/:na]\nquery_1     |     at zipkin.autoconfigure.collector.rabbitmq.ZipkinRabbitMQCollectorAutoConfiguration.rabbitMq(ZipkinRabbitMQCollectorAutoConfiguration.java:43) ~[zipkin-autoconfigure-collector-rabbitmq-2.7.0.jar!/:na]\nquery_1     |\n```\n\nThanks @marcingrzejszczak for pointing this out\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "662a7c8ea9b466553107a80faf676bf35ae83990": {
                "zipkin-autoconfigure/collector-rabbitmq/src/main/java/zipkin/autoconfigure/collector/rabbitmq/ZipkinRabbitMQCollectorProperties.java": [
                    "public void zipkin.autoconfigure.collector.rabbitmq.ZipkinRabbitMQCollectorProperties.setUri(URI uri)"
                ]
            },
            "3b557eba212c0e9fa41dd7c8f31c2f6d4c69da41": {
                "zipkin-autoconfigure/collector-rabbitmq/src/main/java/zipkin/autoconfigure/collector/rabbitmq/ZipkinRabbitMQCollectorProperties.java": [
                    "public void zipkin.autoconfigure.collector.rabbitmq.ZipkinRabbitMQCollectorProperties.setUri(URI uri)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9ca6cfb610afa33fd1e73088fd38880ba73826ea",
        "previous_commit": "82936f5d853011f4364a0de5dcbd8ffc3178a9c3",
        "date": 1476348157,
        "releases": {
            "previous": "9ca6cfb610afa33fd1e73088fd38880ba73826ea",
            "next": "9ca6cfb610afa33fd1e73088fd38880ba73826ea"
        },
        "commit_message": "Unwinds elasticsearch-http configuration by using List<Interceptor> (#1341)\n\nBefore, we had to pass around more state in order to set OkHttp\r\ninterceptors used in elasticsearch (ex AWS authentication). This\r\ninjects `List<Interceptor>` so that the process is a bit easier.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9ca6cfb610afa33fd1e73088fd38880ba73826ea": {
                "zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchHttpStorageAutoConfiguration.java": [
                    "OkHttpClient zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageAutoConfiguration.elasticsearchOkHttpClient()"
                ]
            },
            "82936f5d853011f4364a0de5dcbd8ffc3178a9c3": {
                "zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchHttpStorageAutoConfiguration.java": [
                    "OkHttpClient zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageAutoConfiguration.elasticsearchOkHttpClient()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5037e4fc6c2a3b06128e70bdde56ec6e8409c4fb",
        "previous_commit": "5a9998de114f14ba20dd3dece34b302724fc10dc",
        "date": 1510795747,
        "releases": {
            "previous": "5037e4fc6c2a3b06128e70bdde56ec6e8409c4fb",
            "next": "5037e4fc6c2a3b06128e70bdde56ec6e8409c4fb"
        },
        "commit_message": "Makes AWS Elasticsearch errors a bit more descriptive\n\nSee https://github.com/openzipkin/docker-zipkin/issues/161\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5037e4fc6c2a3b06128e70bdde56ec6e8409c4fb": {
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/ElasticsearchDomainEndpoint.java": [
                    "public List<String> zipkin.autoconfigure.storage.elasticsearch.aws.ElasticsearchDomainEndpoint.get()"
                ]
            },
            "5a9998de114f14ba20dd3dece34b302724fc10dc": {
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/ElasticsearchDomainEndpoint.java": [
                    "public List<String> zipkin.autoconfigure.storage.elasticsearch.aws.ElasticsearchDomainEndpoint.get()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4ddc4b5fa336e204284638a0d357fb6b20a07f34",
        "previous_commit": "a2efd793deccd6457dc6b6cfec18e6b3f4a0c077",
        "date": 1482220138,
        "releases": {
            "previous": "4ddc4b5fa336e204284638a0d357fb6b20a07f34",
            "next": "4ddc4b5fa336e204284638a0d357fb6b20a07f34"
        },
        "commit_message": "Removes bootstrap trace as it increases coupling more than its value (#1445)\n\nThe BootstrapTrace feature is a part of self-tracing that relies on a\r\nspecific brave class. This is partially responsible for people having\r\nto create their own main classes. Removing this undoes the coupling with\r\nlittle loss in value (bootstrap trace wasn't that interesting anyway).",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4ddc4b5fa336e204284638a0d357fb6b20a07f34": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServer.java": [
                    "public static void zipkin.server.ZipkinServer.main(String[] args)"
                ]
            },
            "a2efd793deccd6457dc6b6cfec18e6b3f4a0c077": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServer.java": [
                    "public static void zipkin.server.ZipkinServer.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "68a16abe6dc6be78051657f0ecd6b8ad54a5fd90",
        "previous_commit": "f77668a2baa8c3aa23610421dc697158dfb4c111",
        "date": 1531706358,
        "releases": {
            "previous": "68a16abe6dc6be78051657f0ecd6b8ad54a5fd90",
            "next": "68a16abe6dc6be78051657f0ecd6b8ad54a5fd90"
        },
        "commit_message": "Fixes bug in thrift codec reading high ports\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "68a16abe6dc6be78051657f0ecd6b8ad54a5fd90": {
                "zipkin/src/main/java/zipkin2/internal/ThriftEndpointCodec.java": [
                    "static Endpoint zipkin2.internal.ThriftEndpointCodec.read(ByteBuffer bytes)"
                ]
            },
            "f77668a2baa8c3aa23610421dc697158dfb4c111": {
                "zipkin/src/main/java/zipkin2/internal/ThriftEndpointCodec.java": [
                    "static Endpoint zipkin2.internal.ThriftEndpointCodec.read(ByteBuffer bytes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1b2dbdcc50d35dd6f8a5b740a12983ec12d41606",
        "previous_commit": "39c5444fafca78435ae4defe63230bbe6af76599",
        "date": 1549098061,
        "releases": {
            "previous": "1b2dbdcc50d35dd6f8a5b740a12983ec12d41606",
            "next": "1b2dbdcc50d35dd6f8a5b740a12983ec12d41606"
        },
        "commit_message": "Do not try to create RabbitMQ queue if one already exists (#2379)\n\nRabbitMQ may be managed by a team that will create queues with additional configuration beyond the default values the RabbitMQCollector would use. Before the collector would fail to start because it unconditionally tried declaring a queue but one with the same name and different configuration already existed.\r\n\r\nThis also cleans up the channel used to check and maybe create the queue, which used to stick around even though it would never be used again.\r\n\r\nFixes #2068",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1b2dbdcc50d35dd6f8a5b740a12983ec12d41606": {
                "zipkin-collector/rabbitmq/src/main/java/zipkin2/collector/rabbitmq/RabbitMQCollector.java": [
                    "Connection zipkin2.collector.rabbitmq.RabbitMQCollector.compute()"
                ]
            },
            "39c5444fafca78435ae4defe63230bbe6af76599": {
                "zipkin-collector/rabbitmq/src/main/java/zipkin2/collector/rabbitmq/RabbitMQCollector.java": [
                    "Connection zipkin2.collector.rabbitmq.RabbitMQCollector.compute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "26368aed3d89bf25d6d5cc4b8a0b13c71c154482",
        "previous_commit": "401ed0292e6465f2ecb2c635eb9238eff93e4bd1",
        "date": 1467077353,
        "releases": {
            "previous": "26368aed3d89bf25d6d5cc4b8a0b13c71c154482",
            "next": "26368aed3d89bf25d6d5cc4b8a0b13c71c154482"
        },
        "commit_message": "Adds properties that affect Elasticsearch index scalability (#1150)\n\nThis adds the following properties, which help control the scalability\r\nof Zipkin's index in Elasticsearch.\r\n\r\n    * `ES_INDEX_SHARDS`: The number of shards to split the index into. Each shard and its replicas\r\n                         are assigned to a machine in the cluster. Increasing the number of shards\r\n                         and machines in the cluster will improve read and write performance. Number\r\n                         of shards cannot be changed for existing indices, but new daily indices\r\n                         will pick up changes to the setting. Defaults to 5.\r\n    * `ES_INDEX_REPLICAS`: The number of replica copies of each shard in the index. Each shard and\r\n                           its replicas are assigned to a machine in the cluster. Increasing the\r\n                           number of replicas and machines in the cluster will improve read\r\n                           performance, but not write performance. Number of replicas can be changed\r\n                           for existing indices. Defaults to 1. It is highly discouraged to set this\r\n                           to 0 as it would mean a machine failure results in data loss.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "26368aed3d89bf25d6d5cc4b8a0b13c71c154482": {
                "zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin.autoconfigure.storage.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder()"
                ]
            },
            "401ed0292e6465f2ecb2c635eb9238eff93e4bd1": {
                "zipkin-autoconfigure/storage-elasticsearch/src/main/java/zipkin/autoconfigure/storage/elasticsearch/ZipkinElasticsearchStorageProperties.java": [
                    "public ElasticsearchStorage.Builder zipkin.autoconfigure.storage.elasticsearch.ZipkinElasticsearchStorageProperties.toBuilder()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4a8481cd2df8fd4cfc571a8c3d8d715fe09e8616",
        "previous_commit": "4aea5f7335343970091c5b57481e19186ca4727a",
        "date": 1543895488,
        "releases": {
            "previous": "4a8481cd2df8fd4cfc571a8c3d8d715fe09e8616",
            "next": "4a8481cd2df8fd4cfc571a8c3d8d715fe09e8616"
        },
        "commit_message": "Coerces accidental shared flag to null when on a client span (#2311)\n\nThe shared flag is probably something we'll get rid of eventually. It is\r\nonly for the server, but it could be passed accidentally on the client\r\nside. This change cleans it when that's the case so that other logic is\r\nnot burdened by this condition.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4a8481cd2df8fd4cfc571a8c3d8d715fe09e8616": {
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Span zipkin2.Span.build()"
                ]
            },
            "4aea5f7335343970091c5b57481e19186ca4727a": {
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "public Span zipkin2.Span.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d90799fcb3dec0f74623a602770a6e2f54adfdf8",
        "previous_commit": "3e9e876d65bd0b98a105976b3e5087b65cf597ec",
        "date": 1562044209,
        "releases": {
            "previous": "d90799fcb3dec0f74623a602770a6e2f54adfdf8",
            "next": "d90799fcb3dec0f74623a602770a6e2f54adfdf8"
        },
        "commit_message": "Avoids special characters in the RabbitMQ consumer tag (#2641)\n\nI cannot find any definition of consumer tag naming constraints.\r\nHowever, it appears that the `$` is a problem.\r\n\r\nSee https://www.rabbitmq.com/amqp-0-9-1-reference.html#domain.consumer-tag\r\n\r\nFixes #2590",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d90799fcb3dec0f74623a602770a6e2f54adfdf8": {
                "zipkin-collector/rabbitmq/src/main/java/zipkin2/collector/rabbitmq/RabbitMQCollector.java": [
                    "Connection zipkin2.collector.rabbitmq.RabbitMQCollector.compute()"
                ]
            },
            "3e9e876d65bd0b98a105976b3e5087b65cf597ec": {
                "zipkin-collector/rabbitmq/src/main/java/zipkin2/collector/rabbitmq/RabbitMQCollector.java": [
                    "Connection zipkin2.collector.rabbitmq.RabbitMQCollector.compute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "696f8a443374db1684ae665457f497ee74087cbf",
        "previous_commit": "8f7a9cc6bec501472d73924c055879b1096fa24e",
        "date": 1548945538,
        "releases": {
            "previous": "696f8a443374db1684ae665457f497ee74087cbf",
            "next": "696f8a443374db1684ae665457f497ee74087cbf"
        },
        "commit_message": "Fix autocompleteTags feature for Elasticsearch (#2372)\n\nIf the type of tagValue is text, it will be splitted with some characters (hyphen, space, etc...) when aggregating.\r\nSo use keyword type for tagValue.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "696f8a443374db1684ae665457f497ee74087cbf": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchAutocompleteTags.java": [
                    "public Call<List<String>> zipkin2.elasticsearch.ElasticsearchAutocompleteTags.getValues(String key)"
                ]
            },
            "8f7a9cc6bec501472d73924c055879b1096fa24e": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchAutocompleteTags.java": [
                    "public Call<List<String>> zipkin2.elasticsearch.ElasticsearchAutocompleteTags.getValues(String key)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f0f956f6ee443bdc90cf659c9aa30c541ca077a0",
        "previous_commit": "aa3e348070bf9db6ed886e4b8a1a4e6fff475358",
        "date": 1479449878,
        "releases": {
            "previous": "f0f956f6ee443bdc90cf659c9aa30c541ca077a0",
            "next": "f0f956f6ee443bdc90cf659c9aa30c541ca077a0"
        },
        "commit_message": "Fixes regression in ZipkinRule when returning all traces (#1409)\n\nWhen we switched to 128-bit trace ids, we accidentally broke our junit\r\nrule. Basically, we were only returning traces who reported timestamps.\r\nThis fixes the problem (noticed in Brave).",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f0f956f6ee443bdc90cf659c9aa30c541ca077a0": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public List<List<Span>> zipkin.junit.ZipkinRule.getTraces()"
                ]
            },
            "aa3e348070bf9db6ed886e4b8a1a4e6fff475358": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public List<List<Span>> zipkin.junit.ZipkinRule.getTraces()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "dca03a5a5b8a36a12e08d7464b1069cbdd3c58ba",
        "previous_commit": "76970051ea8f56ba7cf835bfe448f0d57907e560",
        "date": 1456893693,
        "releases": {
            "previous": "dca03a5a5b8a36a12e08d7464b1069cbdd3c58ba",
            "next": "dca03a5a5b8a36a12e08d7464b1069cbdd3c58ba"
        },
        "commit_message": "Compresses GET responses\n\nWe were missing a parameter that controls GET compression. With this\nchange, json responses will be compressed.\n\nNote: In spring-boot, only responses over a threshold are gzipped:\n`server.compression.min-response-size` defaults to 2KiB.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "dca03a5a5b8a36a12e08d7464b1069cbdd3c58ba": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public MockResponse zipkin.junit.ZipkinRule.dispatch(RecordedRequest request)"
                ]
            },
            "76970051ea8f56ba7cf835bfe448f0d57907e560": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinRule.java": [
                    "public MockResponse zipkin.junit.ZipkinRule.dispatch(RecordedRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9a8e7d568bfa953791f411cf6fc023e0197e7c94",
        "previous_commit": "69fba38f8afccc4b2d8487e15917af1aa6efc4a7",
        "date": 1502617528,
        "releases": {
            "previous": "9a8e7d568bfa953791f411cf6fc023e0197e7c94",
            "next": "9a8e7d568bfa953791f411cf6fc023e0197e7c94"
        },
        "commit_message": "Lack of timestamp in server-only spans implies shared (#1690)\n\nWhen \"sr\" is present without a timestamp, we assume this is a shared\r\nspan. Moving this signal to the converter allows stackdriver-zipkin to\r\nreuse this when converting to their single-host types.\r\n\r\nSee https://github.com/openzipkin/openzipkin.github.io/issues/49",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9a8e7d568bfa953791f411cf6fc023e0197e7c94": {
                "zipkin/src/main/java/zipkin/internal/Span2Converter.java": [
                    "void zipkin.internal.Span2Converter.processAnnotations(Span source)"
                ]
            },
            "69fba38f8afccc4b2d8487e15917af1aa6efc4a7": {
                "zipkin/src/main/java/zipkin/internal/Span2Converter.java": [
                    "void zipkin.internal.Span2Converter.processAnnotations(Span source)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6d855a56811bcef576188dd96c44f2e6b8e055e9",
        "previous_commit": "854fe8c689eef3071c14fa4e6b33943fbab5cd8a",
        "date": 1593854506,
        "releases": {
            "previous": "6d855a56811bcef576188dd96c44f2e6b8e055e9",
            "next": "6d855a56811bcef576188dd96c44f2e6b8e055e9"
        },
        "commit_message": "Removes guava Table dep from cassandra-v1 (#3135)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6d855a56811bcef576188dd96c44f2e6b8e055e9": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Indexer.java": [
                    "void zipkin2.storage.cassandra.v1.Indexer.index(Span span, List<Call<Void>> calls)"
                ]
            },
            "854fe8c689eef3071c14fa4e6b33943fbab5cd8a": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/Indexer.java": [
                    "void zipkin2.storage.cassandra.v1.Indexer.index(Span span, List<Call<Void>> calls)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2bbc4bb42e50be75cd95f6156b7224bc5d423bae",
        "previous_commit": "e16d38e21172419e5f6c2e01aea6510de07478dd",
        "date": 1709735116,
        "releases": {
            "previous": "2bbc4bb42e50be75cd95f6156b7224bc5d423bae",
            "next": "2bbc4bb42e50be75cd95f6156b7224bc5d423bae"
        },
        "commit_message": "lens: adds zipkin-uiproxy image and fixes ZIPKIN_UI_BASEPATH (#3751)\n\nSigned-off-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2bbc4bb42e50be75cd95f6156b7224bc5d423bae": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "static String maybeResource(String basePath, Resource resource)"
                ]
            },
            "e16d38e21172419e5f6c2e01aea6510de07478dd": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "static String maybeResource(String basePath, Resource resource)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "ec6a9aacd0ef1e38179bbaef248608fa8f8bbb94",
        "previous_commit": "f9039a4e8cb48de60eb6bc3423c61bd1a9adfe89",
        "date": 1550653539,
        "releases": {
            "previous": "ec6a9aacd0ef1e38179bbaef248608fa8f8bbb94",
            "next": "ec6a9aacd0ef1e38179bbaef248608fa8f8bbb94"
        },
        "commit_message": "Updates to maven wrapper that fixes its license header (#2406)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ec6a9aacd0ef1e38179bbaef248608fa8f8bbb94": {
                ".mvn/wrapper/MavenWrapperDownloader.java": [
                    "private static void MavenWrapperDownloader.downloadFileFromURL(String urlString, File destination)"
                ]
            },
            "f9039a4e8cb48de60eb6bc3423c61bd1a9adfe89": {
                ".mvn/wrapper/MavenWrapperDownloader.java": [
                    "private static void MavenWrapperDownloader.downloadFileFromURL(String urlString, File destination)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4420e3ba864e113a8edc66a402bc32a77db63d62",
        "previous_commit": "2e7bc7f8e13d39353430ac18aa841fc29989a780",
        "date": 1506935355,
        "releases": {
            "previous": "4420e3ba864e113a8edc66a402bc32a77db63d62",
            "next": "4420e3ba864e113a8edc66a402bc32a77db63d62"
        },
        "commit_message": "In Cassandra3 storage, only use consistency level LOCAL_ONE if a local_dc has been defined, otherwise use ONE (#1753)\n\nMark all writes as idempotent.\r\nUpdate the retry policy, honouring idempotence, consistency level, and applying appropriate back-pressure.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4420e3ba864e113a8edc66a402bc32a77db63d62": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/DefaultSessionFactory.java": [
                    "static Cluster zipkin.storage.cassandra3.DefaultSessionFactory.buildCluster(Cassandra3Storage cassandra)"
                ]
            },
            "2e7bc7f8e13d39353430ac18aa841fc29989a780": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/DefaultSessionFactory.java": [
                    "static Cluster zipkin.storage.cassandra3.DefaultSessionFactory.buildCluster(Cassandra3Storage cassandra)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2eac1bafc170b13eb4c8cdf1c761f605cc3235e0",
        "previous_commit": "65bd223b2ef2259448b89fb833e06eae548a046e",
        "date": 1542274960,
        "releases": {
            "previous": "2eac1bafc170b13eb4c8cdf1c761f605cc3235e0",
            "next": "2eac1bafc170b13eb4c8cdf1c761f605cc3235e0"
        },
        "commit_message": "Dedupes annotations as duplicate annotations can mess up conversions (#2249)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2eac1bafc170b13eb4c8cdf1c761f605cc3235e0": {
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "static <T extends Comparable<? super T>> List<T> zipkin2.Span.sortedList(@Nullable List<T> in)"
                ]
            },
            "65bd223b2ef2259448b89fb833e06eae548a046e": {
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "static <T extends Comparable<? super T>> List<T> zipkin2.Span.sortedList(@Nullable List<T> in)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b84bb3261d8402507a2d54f3b55e017484c50a85",
        "previous_commit": "86c4ac8739c459159f8c4835e21ecd9455e46841",
        "date": 1566183334,
        "releases": {
            "previous": "b84bb3261d8402507a2d54f3b55e017484c50a85",
            "next": "b84bb3261d8402507a2d54f3b55e017484c50a85"
        },
        "commit_message": "Aggregate on context aware event loop instead of delaying it with handleAsync (#2760)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b84bb3261d8402507a2d54f3b55e017484c50a85": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)"
                ]
            },
            "86c4ac8739c459159f8c4835e21ecd9455e46841": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "77462efa80e49d041dba4f45db065efa17ac6c16",
        "previous_commit": "0fafdf4145e97ad35d72f5b0296db85353599617",
        "date": 1551966761,
        "releases": {
            "previous": "77462efa80e49d041dba4f45db065efa17ac6c16",
            "next": "77462efa80e49d041dba4f45db065efa17ac6c16"
        },
        "commit_message": "Configure CorsService without catch-all path mapping (#2432)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "77462efa80e49d041dba4f45db065efa17ac6c16": {
                "zipkin-autoconfigure/metrics-prometheus/src/main/java/zipkin2/autoconfigure/prometheus/ZipkinPrometheusMetricsAutoConfiguration.java": [
                    "ArmeriaServerConfigurator zipkin2.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.notFoundMetricCollector()"
                ]
            },
            "0fafdf4145e97ad35d72f5b0296db85353599617": {
                "zipkin-autoconfigure/metrics-prometheus/src/main/java/zipkin2/autoconfigure/prometheus/ZipkinPrometheusMetricsAutoConfiguration.java": [
                    "ArmeriaServerConfigurator zipkin2.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.notFoundMetricCollector()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c3a2924069f86b384d1bb7b370a4a8fb9effd8ae",
        "previous_commit": "acb7f3ba23a77091f85058d269ce9caa99713b37",
        "date": 1564626785,
        "releases": {
            "previous": "c3a2924069f86b384d1bb7b370a4a8fb9effd8ae",
            "next": "c3a2924069f86b384d1bb7b370a4a8fb9effd8ae"
        },
        "commit_message": "Enlists load related errors from cassandra in storage throttling (#2718)\n\nThis classifies the following exception trees as possibly recoverable.\r\nThe storage throttling feature should back off when encountered.\r\n\r\n* BusyPoolException\r\n* BusyConnectionException\r\n* QueryConsistencyException",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c3a2924069f86b384d1bb7b370a4a8fb9effd8ae": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/ResultSetFutureCall.java": [
                    "static ResultSet zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.getUninterruptibly(ListenableFuture<ResultSet> future)"
                ]
            },
            "acb7f3ba23a77091f85058d269ce9caa99713b37": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/internal/call/ResultSetFutureCall.java": [
                    "static ResultSet zipkin2.storage.cassandra.internal.call.ResultSetFutureCall<V>.getUninterruptibly(ListenableFuture<ResultSet> future)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3b76e7310b214b47a0991fa33daa47e70b45805b",
        "previous_commit": "b19e9e89f23ab84eac1fe07e98ccc81cb5f3a351",
        "date": 1590752199,
        "releases": {
            "previous": "3b76e7310b214b47a0991fa33daa47e70b45805b",
            "next": "3b76e7310b214b47a0991fa33daa47e70b45805b"
        },
        "commit_message": "Adds ES_SSL_NO_VERIFY for test environments (#3100)\n\nThis allows a user to set `ES_SSL_NO_VERIFY=false` to trust anything.\r\nThis is named SSL_NO_VERIFY not TLS_NO_VERIFY (after the Armeria\r\nsetting) because \"ssl\" is already a sub-configuration of Elasticsearch.\r\n\r\nFixes #3079",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3b76e7310b214b47a0991fa33daa47e70b45805b": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java": [
                    "ClientFactory zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.esClientFactory( ZipkinElasticsearchStorageProperties es, MeterRegistry meterRegistry)"
                ]
            },
            "b19e9e89f23ab84eac1fe07e98ccc81cb5f3a351": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/ZipkinElasticsearchStorageConfiguration.java": [
                    "ClientFactory zipkin2.server.internal.elasticsearch.ZipkinElasticsearchStorageConfiguration.esClientFactory( ZipkinElasticsearchStorageProperties es, MeterRegistry meterRegistry)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7fc09dd27736b10e2caa62cc8ceece620b48e19b",
        "previous_commit": "89f2c62616c80bf76b95c1ae492b736bb8f2992e",
        "date": 1461671797,
        "releases": {
            "previous": "7fc09dd27736b10e2caa62cc8ceece620b48e19b",
            "next": "7fc09dd27736b10e2caa62cc8ceece620b48e19b"
        },
        "commit_message": "Rewrites ZooKeeperSampler to eliminate Scala dependency\n\nThis implements the adaptive sampler in Java using Apache Curator. The\nexpected result is the same functionality with fewer build and runtime\ndependencies.\n\nExample:\n\n```java\n// The ZooKeeperSampler requires you to supply your own Curator.\nclient = CuratorFrameworkFactory.builder()\n    .connectString(zookeeperConnect)\n    .retryPolicy(new RetryOneTime(1))\n    .build();\nclient.start();\nclient.blockUntilConnected(3, TimeUnit.SECONDS);\n\n// This will sample spans based on the capacity of the storage layer.\n// Capacity is spans/minute and set by an admin.\nsampler = new ZooKeeperSampler.Builder().build(client);\n\n// Initialize a collector that will sample incoming spans based on\n// a coordinated rate.\ncollector = new KafkaCollector.Builder()\n    .zookeeper(zookeeperConnect)\n    .writeTo(storage, sampler);\n```\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7fc09dd27736b10e2caa62cc8ceece620b48e19b": {
                "zipkin-samplers/zookeeper/src/main/java/zipkin/sampler/zookeeper/ZooKeeperSampler.java": [
                    "public void zipkin.sampler.zookeeper.ZooKeeperSampler.close()"
                ]
            },
            "89f2c62616c80bf76b95c1ae492b736bb8f2992e": {
                "zipkin-samplers/zookeeper/src/main/java/zipkin/sampler/zookeeper/ZooKeeperSampler.java": [
                    "public void zipkin.sampler.zookeeper.ZooKeeperSampler.close()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4b02c59a1df3d26edb8fcac5ea7c57fc54802012",
        "previous_commit": "77462efa80e49d041dba4f45db065efa17ac6c16",
        "date": 1551966839,
        "releases": {
            "previous": "4b02c59a1df3d26edb8fcac5ea7c57fc54802012",
            "next": "4b02c59a1df3d26edb8fcac5ea7c57fc54802012"
        },
        "commit_message": "Fixes some lens UI bugs (#2434)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4b02c59a1df3d26edb8fcac5ea7c57fc54802012": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "AggregatedHttpMessage zipkin2.server.internal.ZipkinQueryApiV2.maybeCacheNames(boolean shouldCacheControl, List<String> values)"
                ]
            },
            "77462efa80e49d041dba4f45db065efa17ac6c16": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "AggregatedHttpMessage zipkin2.server.internal.ZipkinQueryApiV2.maybeCacheNames(boolean shouldCacheControl, List<String> values)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "580902daa45e2e2830022e18ef07b18d49382fd3",
        "previous_commit": "2d2846c818f78c1db4bb6cd97231ebb6a8c67d58",
        "date": 1459389447,
        "releases": {
            "previous": "580902daa45e2e2830022e18ef07b18d49382fd3",
            "next": "580902daa45e2e2830022e18ef07b18d49382fd3"
        },
        "commit_message": "Adds debug logging for DependencyLinker\n\nIt can be vexing to troubleshoot why the dependency graph isn't working\nout as expected. This adds log messages describing which spans were\ninvolved in which links.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "580902daa45e2e2830022e18ef07b18d49382fd3": {
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<DependencyLinkSpan> spans)"
                ]
            },
            "2d2846c818f78c1db4bb6cd97231ebb6a8c67d58": {
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<DependencyLinkSpan> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1f152a418178ef4da75b0f99cbef5674d18114ae",
        "previous_commit": "e4eb56792c2efb402a6764c5b80a19eff27268e0",
        "date": 1557819769,
        "releases": {
            "previous": "1f152a418178ef4da75b0f99cbef5674d18114ae",
            "next": "1f152a418178ef4da75b0f99cbef5674d18114ae"
        },
        "commit_message": "Let Java copy arrays which it can sometimes do faster than manual loops. (#2591)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1f152a418178ef4da75b0f99cbef5674d18114ae": {
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "static String zipkin2.Span.padLeft(String id, int desiredLength)"
                ]
            },
            "e4eb56792c2efb402a6764c5b80a19eff27268e0": {
                "zipkin/src/main/java/zipkin2/Span.java": [
                    "static String zipkin2.Span.padLeft(String id, int desiredLength)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4bb618def9f036527a8aa78076052d9278cbddc5",
        "previous_commit": "d1d9095973081552c2232e32c0865294cc955efc",
        "date": 1504105296,
        "releases": {
            "previous": "4bb618def9f036527a8aa78076052d9278cbddc5",
            "next": "4bb618def9f036527a8aa78076052d9278cbddc5"
        },
        "commit_message": "Fixes AWS signature which missed colon encoding (#1718)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4bb618def9f036527a8aa78076052d9278cbddc5": {
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/AWSSignatureVersion4.java": [
                    "static Buffer zipkin.autoconfigure.storage.elasticsearch.aws.AWSSignatureVersion4.canonicalString(Request input)"
                ]
            },
            "d1d9095973081552c2232e32c0865294cc955efc": {
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/AWSSignatureVersion4.java": [
                    "static Buffer zipkin.autoconfigure.storage.elasticsearch.aws.AWSSignatureVersion4.canonicalString(Request input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "352146ce59e850b3d9bdbab67d31812db8215bde",
        "previous_commit": "e7e76219360d17dd4b311aac899c2aabebb07d93",
        "date": 1468844680,
        "releases": {
            "previous": "352146ce59e850b3d9bdbab67d31812db8215bde",
            "next": "352146ce59e850b3d9bdbab67d31812db8215bde"
        },
        "commit_message": "Skips indexing of binary annotations longer than 256 characters\n\nIt is unlikely that someone has a valid use case to paste a key/value\nmatch of a value longer than 256 characters. By limiting the length of\nbinary annotations indexed, we can reduce the size of indexes without\nlimiting users from storing larger values, like query data.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "352146ce59e850b3d9bdbab67d31812db8215bde": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java": [
                    "static Set<String> zipkin.storage.cassandra.CassandraUtil.annotationKeys(Span span)"
                ]
            },
            "e7e76219360d17dd4b311aac899c2aabebb07d93": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java": [
                    "static Set<String> zipkin.storage.cassandra.CassandraUtil.annotationKeys(Span span)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "83b1aa99dd01352d48811d8fa4dd4ec7afacc108",
        "previous_commit": "7a50d163ff30c95b180f4c903a231bc5ae831dd4",
        "date": 1525167165,
        "releases": {
            "previous": "83b1aa99dd01352d48811d8fa4dd4ec7afacc108",
            "next": "83b1aa99dd01352d48811d8fa4dd4ec7afacc108"
        },
        "commit_message": "Fixes Kafka by using log4j2 instead of slf4j\n\nlog4j has a means to support log4j 1.2, which is used by our Kafka 0.8\ncomponent.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "83b1aa99dd01352d48811d8fa4dd4ec7afacc108": {
                "zipkin-server/src/main/java/zipkin/server/internal/brave/TracingConfiguration.java": [
                    "CurrentTraceContext zipkin.server.internal.brave.TracingConfiguration.currentTraceContext()"
                ]
            },
            "7a50d163ff30c95b180f4c903a231bc5ae831dd4": {
                "zipkin-server/src/main/java/zipkin/server/internal/brave/TracingConfiguration.java": [
                    "CurrentTraceContext zipkin.server.internal.brave.TracingConfiguration.currentTraceContext()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6b0b41f6f4670c1608d30fb5d80d98b83ddda842",
        "previous_commit": "395f631c8da0e40c3bdb0e63e25da11e6a6e7670",
        "date": 1513830279,
        "releases": {
            "previous": "6b0b41f6f4670c1608d30fb5d80d98b83ddda842",
            "next": "6b0b41f6f4670c1608d30fb5d80d98b83ddda842"
        },
        "commit_message": "Corrects v1 spans missing a start annotation\n\nThis can happen when a span is started with a span model and stopped\nwith an event model.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6b0b41f6f4670c1608d30fb5d80d98b83ddda842": {
                "zipkin/src/main/java/zipkin/internal/V2SpanConverter.java": [
                    "void zipkin.internal.V2SpanConverter.processAnnotations(zipkin.Span source)"
                ]
            },
            "395f631c8da0e40c3bdb0e63e25da11e6a6e7670": {
                "zipkin/src/main/java/zipkin/internal/V2SpanConverter.java": [
                    "void zipkin.internal.V2SpanConverter.processAnnotations(zipkin.Span source)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8f7a9cc6bec501472d73924c055879b1096fa24e",
        "previous_commit": "7f31d25e9224222306deb6cb324f08ce8c984933",
        "date": 1548899614,
        "releases": {
            "previous": "8f7a9cc6bec501472d73924c055879b1096fa24e",
            "next": "8f7a9cc6bec501472d73924c055879b1096fa24e"
        },
        "commit_message": "Improves error message when a Cassandra node is not running 3.11.3+ (#2371)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8f7a9cc6bec501472d73924c055879b1096fa24e": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.getKeyspaceMetadata(Session session, String keyspace)"
                ]
            },
            "7f31d25e9224222306deb6cb324f08ce8c984933": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.getKeyspaceMetadata(Session session, String keyspace)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7776c0ab06016c9718ff8d9a5e52210c63441020",
        "previous_commit": "a702780f3a2ae0aa54b1395136073447da551086",
        "date": 1463604868,
        "releases": {
            "previous": "7776c0ab06016c9718ff8d9a5e52210c63441020",
            "next": "7776c0ab06016c9718ff8d9a5e52210c63441020"
        },
        "commit_message": "Fixes bug where mysql username/password weren't propagating\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7776c0ab06016c9718ff8d9a5e52210c63441020": {
                "zipkin-autoconfigure/storage-mysql/src/main/java/zipkin/autoconfigure/storage/mysql/ZipkinMySQLStorageAutoConfiguration.java": [
                    "DataSource zipkin.autoconfigure.storage.mysql.ZipkinMySQLStorageAutoConfiguration.mysqlDataSource()"
                ]
            },
            "a702780f3a2ae0aa54b1395136073447da551086": {
                "zipkin-autoconfigure/storage-mysql/src/main/java/zipkin/autoconfigure/storage/mysql/ZipkinMySQLStorageAutoConfiguration.java": [
                    "DataSource zipkin.autoconfigure.storage.mysql.ZipkinMySQLStorageAutoConfiguration.mysqlDataSource()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2eb6e09f1dcfc21f005f2c80deae70808a033ac9",
        "previous_commit": "e88dc669a5ac0d3b5d7ff10500cab5b593d526ab",
        "date": 1457329013,
        "releases": {
            "previous": "2eb6e09f1dcfc21f005f2c80deae70808a033ac9",
            "next": "2eb6e09f1dcfc21f005f2c80deae70808a033ac9"
        },
        "commit_message": "Extracts utils and backfills tests\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2eb6e09f1dcfc21f005f2c80deae70808a033ac9": {
                "zipkin/src/main/java/zipkin/InMemorySpanStore.java": [
                    "public synchronized void zipkin.InMemorySpanStore.accept(Iterator<Span> spans)"
                ]
            },
            "e88dc669a5ac0d3b5d7ff10500cab5b593d526ab": {
                "zipkin/src/main/java/zipkin/InMemorySpanStore.java": [
                    "public synchronized void zipkin.InMemorySpanStore.accept(Iterator<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "69fba38f8afccc4b2d8487e15917af1aa6efc4a7",
        "previous_commit": "66ab03a71c3b76ed21447a09c6c118c566643eef",
        "date": 1502613139,
        "releases": {
            "previous": "69fba38f8afccc4b2d8487e15917af1aa6efc4a7",
            "next": "69fba38f8afccc4b2d8487e15917af1aa6efc4a7"
        },
        "commit_message": "Coerces non-string binary annotations to Span 2 tags (#1689)\n\nThis completes one-way conversion by reusing the same approach as exists\r\nin stackdriver-zipkin.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "69fba38f8afccc4b2d8487e15917af1aa6efc4a7": {
                "zipkin/src/main/java/zipkin/internal/Span2Converter.java": [
                    "void zipkin.internal.Span2Converter.processBinaryAnnotations(Span source)"
                ]
            },
            "66ab03a71c3b76ed21447a09c6c118c566643eef": {
                "zipkin/src/main/java/zipkin/internal/Span2Converter.java": [
                    "void zipkin.internal.Span2Converter.processBinaryAnnotations(Span source)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5f0acbdf9f407469de17c5af2f901685724e686a",
        "previous_commit": "487235d41b014b885bb77533b8886eda81316079",
        "date": 1606104855,
        "releases": {
            "previous": "5f0acbdf9f407469de17c5af2f901685724e686a",
            "next": "5f0acbdf9f407469de17c5af2f901685724e686a"
        },
        "commit_message": "Adds ScribeCollector.port() (#3314)\n\nthis makes it easier to test without port collissions.\r\n\r\nFixes #3282",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5f0acbdf9f407469de17c5af2f901685724e686a": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeCollector.java": [
                    "public final String zipkin2.collector.scribe.ScribeCollector.toString()"
                ]
            },
            "487235d41b014b885bb77533b8886eda81316079": {
                "zipkin-collector/scribe/src/main/java/zipkin2/collector/scribe/ScribeCollector.java": [
                    "public final String zipkin2.collector.scribe.ScribeCollector.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "276bbce3b4c4a0823f54957437ea4b223f5b1107",
        "previous_commit": "fe3a3c4319a8ef9347d48564bd92c8175926b553",
        "date": 1456310892,
        "releases": {
            "previous": "276bbce3b4c4a0823f54957437ea4b223f5b1107",
            "next": "276bbce3b4c4a0823f54957437ea4b223f5b1107"
        },
        "commit_message": "Adds a /health endpoint that returns actuator data\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "276bbce3b4c4a0823f54957437ea4b223f5b1107": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ]
            },
            "fe3a3c4319a8ef9347d48564bd92c8175926b553": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a46a91fa6cd5ad11f99b5d120d19a2279a76a107",
        "previous_commit": "a2f49c6685ea31e8ac5d08b99e21b76272659c43",
        "date": 1568861814,
        "releases": {
            "previous": "a46a91fa6cd5ad11f99b5d120d19a2279a76a107",
            "next": "a46a91fa6cd5ad11f99b5d120d19a2279a76a107"
        },
        "commit_message": "Adds getByTraceIds to cassandra\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a46a91fa6cd5ad11f99b5d120d19a2279a76a107": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public ServiceAndSpanNames zipkin2.storage.cassandra.CassandraStorage.serviceAndSpanNames()"
                ]
            },
            "a2f49c6685ea31e8ac5d08b99e21b76272659c43": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/CassandraStorage.java": [
                    "public ServiceAndSpanNames zipkin2.storage.cassandra.CassandraStorage.serviceAndSpanNames()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b295c3ab18eb2538f9144321d272601fe7d3dfba",
        "previous_commit": "9d1aae6c560228ee3b9b63fcf9d7ee19f69a1f4a",
        "date": 1467265955,
        "releases": {
            "previous": "b295c3ab18eb2538f9144321d272601fe7d3dfba",
            "next": "b295c3ab18eb2538f9144321d272601fe7d3dfba"
        },
        "commit_message": "Coerces Span.timestamp to null when zero (#1155)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b295c3ab18eb2538f9144321d272601fe7d3dfba": {
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.timestamp(@Nullable Long timestamp)"
                ]
            },
            "9d1aae6c560228ee3b9b63fcf9d7ee19f69a1f4a": {
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.timestamp(@Nullable Long timestamp)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1696c5587bb8596b897effc611a276dd2a209538",
        "previous_commit": "90e218cb69636bcf3a8b56decbd408ff1767c964",
        "date": 1456386375,
        "releases": {
            "previous": "1696c5587bb8596b897effc611a276dd2a209538",
            "next": "1696c5587bb8596b897effc611a276dd2a209538"
        },
        "commit_message": "Accepts gzip-encoded spans in zipkin-server and ZipkinRule\n\nThis supports spans posted with \"Content-Encoding: gzip\".\n\nSome of this code can be removed when Spring Boot supports request\ndecompression. Currently, compression is limited to responses only.\n\nFixes #69\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1696c5587bb8596b897effc611a276dd2a209538": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ]
            },
            "90e218cb69636bcf3a8b56decbd408ff1767c964": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3dc5c01226aad6a4dca0350ac586a11b3ce3ff29",
        "previous_commit": "ea2667b3bad3596917543d75fab28d474c69f6a0",
        "date": 1483536094,
        "releases": {
            "previous": "3dc5c01226aad6a4dca0350ac586a11b3ce3ff29",
            "next": "3dc5c01226aad6a4dca0350ac586a11b3ce3ff29"
        },
        "commit_message": "Span timestamp is not correctly correct in case of clock skew. (#1468)\n\nIn case of clock skew, the timestamp of the span is not modified correctly. Its value is set to the value of the first annotation which can be wrong.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3dc5c01226aad6a4dca0350ac586a11b3ce3ff29": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static Span zipkin.internal.CorrectForClockSkew.adjustTimestamps(Span span, ClockSkew skew)"
                ]
            },
            "ea2667b3bad3596917543d75fab28d474c69f6a0": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static Span zipkin.internal.CorrectForClockSkew.adjustTimestamps(Span span, ClockSkew skew)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c6eb48e8daaf35cc186c3ba38b483c2afae8740b",
        "previous_commit": "53726596685f6f1de8059e79d1927b3282cff5cb",
        "date": 1504057018,
        "releases": {
            "previous": "c6eb48e8daaf35cc186c3ba38b483c2afae8740b",
            "next": "c6eb48e8daaf35cc186c3ba38b483c2afae8740b"
        },
        "commit_message": "Elasticsearch integration of v2 SpanStore Api (#1711)\n\nThis makes Elasticsearch use the v2 format natively for reads.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c6eb48e8daaf35cc186c3ba38b483c2afae8740b": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public Span zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ]
            },
            "53726596685f6f1de8059e79d1927b3282cff5cb": {
                "zipkin-storage/elasticsearch-http/src/main/java/zipkin/storage/elasticsearch/http/JsonAdapters.java": [
                    "public zipkin.Span zipkin.storage.elasticsearch.http.JsonAdapters.fromJson(JsonReader reader)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ea2667b3bad3596917543d75fab28d474c69f6a0",
        "previous_commit": "80f5c7ac038d7e2fdcfe701b64aef257a40009ec",
        "date": 1483536018,
        "releases": {
            "previous": "ea2667b3bad3596917543d75fab28d474c69f6a0",
            "next": "ea2667b3bad3596917543d75fab28d474c69f6a0"
        },
        "commit_message": "Fixes NPE when Span.Builder merge other span w/o initializing traceIdHigh (#1469)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ea2667b3bad3596917543d75fab28d474c69f6a0": {
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.merge(Span that)"
                ]
            },
            "80f5c7ac038d7e2fdcfe701b64aef257a40009ec": {
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.merge(Span that)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f3ef3f4a2555ea8e35f4d9579f7144f707fa0d07",
        "previous_commit": "63f59c6c975aa5437ef24da443600f9ff0079be8",
        "date": 1557308049,
        "releases": {
            "previous": "f3ef3f4a2555ea8e35f4d9579f7144f707fa0d07",
            "next": "f3ef3f4a2555ea8e35f4d9579f7144f707fa0d07"
        },
        "commit_message": "Ports all zipkin-server tests to Kotlin (#2570)\n\nThis reduces the amount of code to maintain and helps us learn Kotlin.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f3ef3f4a2555ea8e35f4d9579f7144f707fa0d07": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "public Object zipkin2.server.internal.UnzippingBytesRequestConverter.convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage request, Class<?> expectedResultType)"
                ]
            },
            "63f59c6c975aa5437ef24da443600f9ff0079be8": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "public Object zipkin2.server.internal.UnzippingBytesRequestConverter.convertRequest(ServiceRequestContext ctx, AggregatedHttpMessage request, Class<?> expectedResultType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ac3fe210bfe6c65f834519a54b5c6c75b039f8c6",
        "previous_commit": "eb39ddb13f8fc328b571e56c51b46e27d2e20a8f",
        "date": 1564728286,
        "releases": {
            "previous": "ac3fe210bfe6c65f834519a54b5c6c75b039f8c6",
            "next": "ac3fe210bfe6c65f834519a54b5c6c75b039f8c6"
        },
        "commit_message": "Changes elasticsearch parsing to only lazy allocate strings (#2728)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ac3fe210bfe6c65f834519a54b5c6c75b039f8c6": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "<V> V zipkin2.elasticsearch.internal.client.HttpCall<V>.parseResponse(AggregatedHttpResponse response, BodyConverter<V> bodyConverter)"
                ]
            },
            "eb39ddb13f8fc328b571e56c51b46e27d2e20a8f": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "<V> V zipkin2.elasticsearch.internal.client.HttpCall<V>.parseResponse(AggregatedHttpResponse response, BodyConverter<V> bodyConverter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "98c190442d4eca4edc61f1cf3717495fe380b88c",
        "previous_commit": "822cd4b2f1360f6eba10c24c14cdaca9bdf914ba",
        "date": 1457449495,
        "releases": {
            "previous": "98c190442d4eca4edc61f1cf3717495fe380b88c",
            "next": "98c190442d4eca4edc61f1cf3717495fe380b88c"
        },
        "commit_message": "Adds CassandraSpanStore including zipkin-server support\n\nThis is a port of `CassandraSpanStore` from zipkin-scala, except notably\nnot including the \"slice query\" infrastructure.\n\nNote: While `CassandraSpanStore.accept` doesn't return a `Future`, it is\nstill asynchronous inside.\n\n`zipkin-server` has been extended to optionally support Cassandra using\nthe same environment variables as zipkin-scala. For example, you can\nstart a process using cassandra as simply as setting the `STORAGE_TYPE`:\n\n```bash\nSTORAGE_TYPE=cassandra ./mvnw -pl zipkin-server spring-boot:run\n```\n\nThis uses the `Repository` class from `zipkin-cassandra-core`, which\ninternally uses DataStax Java Driver 2.1. It is likely that we'll\nrefactor out this dependency, for a couple reasons. One is that DataStax\nJava Driver 3 is current. Another is that `Repository` was designed for\n\"slice query\" infrastructure that doesn't exist in this project: there\nare places where logic would be simpler to address in raw CQL.\n\nThis was tested using zipkin-scala's integration tests, local integration\ntests, running the server with spring boot, and processing data with\n`zipkin-dependencies-spark`.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "98c190442d4eca4edc61f1cf3717495fe380b88c": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "SpanStore zipkin.server.ZipkinServerConfiguration.spanStore()"
                ]
            },
            "822cd4b2f1360f6eba10c24c14cdaca9bdf914ba": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "SpanStore zipkin.server.ZipkinServerConfiguration.spanStore()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "55a0ba1c7f2bd8dfb2d982d3143fde0f6d29de09",
        "previous_commit": "d43631e09f79d22a3a399fb3a576d974629f5392",
        "date": 1562224965,
        "releases": {
            "previous": "55a0ba1c7f2bd8dfb2d982d3143fde0f6d29de09",
            "next": "55a0ba1c7f2bd8dfb2d982d3143fde0f6d29de09"
        },
        "commit_message": "Takes care to not load any types that refer to new ones (#2649)\n\nAn odd thing happened while testing JRE 7, which I suspect had to do\r\nwith the Jre8 variant using a new type in its bytecode. This changes\r\nto not access a type that compiles with new classes until the guard\r\npasses.\r\n\r\nExample exception:\r\n```\r\njava.lang.NoClassDefFoundError: java/io/UncheckedIOException\r\n    at zipkin2.internal.Platform.findPlatform (Platform.java:64)\r\n    at zipkin2.internal.Platform.<clinit> (Platform.java:25)\r\n    at zipkin2.Endpoint.writeIpV6 (Endpoint.java:371)\r\n    at zipkin2.Endpoint$Builder.parseIp (Endpoint.java:256)\r\n    at zipkin2.Endpoint$Builder.ip (Endpoint.java:227)\r\n    at brave.internal.handler.MutableSpanConverter.convert (MutableSpanConverter.java:63)\r\n    at brave.internal.handler.ZipkinFinishedSpanHandler.handle (ZipkinFinishedSpanHandler.java:43)\r\n    at brave.internal.handler.FinishedSpanHandlers$NoopAwareFinishedSpan.handle (FinishedSpanHandlers.java:65)\r\n    at brave.RealSpan.finish (RealSpan.java:151)\r\n    at brave.RealSpan.finish (RealSpan.java:143)\r\n    at brave.http.HttpHandler.finishInNullScope (HttpHandler.java:67)\r\n    at brave.http.HttpHandler.handleFinish (HttpHandler.java:59)\r\n    at brave.http.HttpServerHandler.handleSend (HttpServerHandler.java:116)\r\n    at brave.servlet.TracingFilter.doFilter (TracingFilter.java:108)\r\n    at brave.spring.webmvc.DelegatingTracingFilter.doFilter (DelegatingTracingFilter.java:47)\r\n    at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter (ServletHandler.java:1288)\r\n    at org.eclipse.jetty.servlet.ServletHandler.doHandle (ServletHandler.java:443)\r\n    at org.eclipse.jetty.server.handler.ScopedHandler.handle (ScopedHandler.java:137)\r\n    at org.eclipse.jetty.security.SecurityHandler.handle (SecurityHandler.java:556)\r\n    at org.eclipse.jetty.server.session.SessionHandler.doHandle (SessionHandler.java:227)\r\n    at org.eclipse.jetty.server.handler.ContextHandler.doHandle (ContextHandler.java:1044)\r\n    at org.eclipse.jetty.servlet.ServletHandler.doScope (ServletHandler.java:372)\r\n    at org.eclipse.jetty.server.session.SessionHandler.doScope (SessionHandler.java:189)\r\n    at org.eclipse.jetty.server.handler.ContextHandler.doScope (ContextHandler.java:978)\r\n    at org.eclipse.jetty.server.handler.ScopedHandler.handle (ScopedHandler.java:135)\r\n    at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle (ContextHandlerCollection.java:255)\r\n    at org.eclipse.jetty.server.handler.HandlerCollection.handle (HandlerCollection.java:154)\r\n    at org.eclipse.jetty.server.handler.HandlerWrapper.handle (HandlerWrapper.java:116)\r\n    at org.eclipse.jetty.server.Server.handle (Server.java:369)\r\n    at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest (AbstractHttpConnection.java:486)\r\n    at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete (AbstractHttpConnection.java:933)\r\n    at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete (AbstractHttpConnection.java:995)\r\n    at org.eclipse.jetty.http.HttpParser.parseNext (HttpParser.java:644)\r\n    at org.eclipse.jetty.http.HttpParser.parseAvailable (HttpParser.java:235)\r\n    at org.eclipse.jetty.server.AsyncHttpConnection.handle (AsyncHttpConnection.java:82)\r\n    at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle (SelectChannelEndPoint.java:667)\r\n    at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run (SelectChannelEndPoint.java:52)\r\n    at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob (QueuedThreadPool.java:608)\r\n    at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run (QueuedThreadPool.java:543)\r\n    at java.lang.Thread.run (Thread.java:745)\r\nCaused by: java.lang.ClassNotFoundException: java.io.UncheckedIOException\r\n    at java.net.URLClassLoader$1.run (URLClassLoader.java:366)\r\n    at java.net.URLClassLoader$1.run (URLClassLoader.java:355)\r\n    at java.security.AccessController.doPrivileged (Native Method)\r\n    at java.net.URLClassLoader.findClass (URLClassLoader.java:354)\r\n```",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "55a0ba1c7f2bd8dfb2d982d3143fde0f6d29de09": {
                "zipkin/src/main/java/zipkin2/internal/Platform.java": [
                    "static Platform zipkin2.internal.Platform.findPlatform()"
                ]
            },
            "d43631e09f79d22a3a399fb3a576d974629f5392": {
                "zipkin/src/main/java/zipkin2/internal/Platform.java": [
                    "static Platform zipkin2.internal.Platform.findPlatform()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fd9054c0a283203ef0d0108aaf0693ca35bee025",
        "previous_commit": "84ef01f2af9f4b07d72d02e9d8899343a05d742a",
        "date": 1564145997,
        "releases": {
            "previous": "fd9054c0a283203ef0d0108aaf0693ca35bee025",
            "next": "fd9054c0a283203ef0d0108aaf0693ca35bee025"
        },
        "commit_message": "Fallback to static endpoints instead of possibly DNS-resolved ones since DNS may still take some time to resolve on first request. (#2708)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fd9054c0a283203ef0d0108aaf0693ca35bee025": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public HttpClient zipkin2.elasticsearch.ElasticsearchStorage.httpClient()"
                ]
            },
            "84ef01f2af9f4b07d72d02e9d8899343a05d742a": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public HttpClient zipkin2.elasticsearch.ElasticsearchStorage.httpClient()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "01828cc79557c1a94bda80afd2f708ad287140a6",
        "previous_commit": "93f55493628b9088998f0edb6da2d848f214466d",
        "date": 1467812773,
        "releases": {
            "previous": "01828cc79557c1a94bda80afd2f708ad287140a6",
            "next": "01828cc79557c1a94bda80afd2f708ad287140a6"
        },
        "commit_message": "Re-adds tests for query precision (#1169)\n\nThis adds everything for 0d51d90a8859450f704e13faea3dee320e4bb080\r\nexcept the actual schema change. The latter will be re-introduced in\r\na short while.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "01828cc79557c1a94bda80afd2f708ad287140a6": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java": [
                    "static List<String> zipkin.storage.cassandra.CassandraUtil.annotationKeys(QueryRequest request)"
                ]
            },
            "93f55493628b9088998f0edb6da2d848f214466d": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java": [
                    "static List<String> zipkin.storage.cassandra.CassandraUtil.annotationKeys(QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "85145c21457e36346576453bd1aaab4807ca8f77",
        "previous_commit": "7515eafa92e14731419096f4e4f0f4251bf54fc0",
        "date": 1709594971,
        "releases": {
            "previous": "85145c21457e36346576453bd1aaab4807ca8f77",
            "next": "85145c21457e36346576453bd1aaab4807ca8f77"
        },
        "commit_message": "Fixed base path variable (#3745)\n\nSigned-off-by: Adrian Cole <adrian@tetrate.io>\r\nCo-authored-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "85145c21457e36346576453bd1aaab4807ca8f77": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "static String maybeResource(String basePath, Resource resource)"
                ]
            },
            "7515eafa92e14731419096f4e4f0f4251bf54fc0": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "static String maybeResource(String basePath, Resource resource)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "dda05b04bb5d83fe787e6aeef5afb8159720d18e",
        "previous_commit": "3e2365a3b330f4add2741801d07d5139fb52eff6",
        "date": 1478081422,
        "releases": {
            "previous": "dda05b04bb5d83fe787e6aeef5afb8159720d18e",
            "next": "dda05b04bb5d83fe787e6aeef5afb8159720d18e"
        },
        "commit_message": "Makes charset explicit in MySQL tables (#1381)\n\nTravis just started failing due to unicode characters not returning.\r\nThis makes character set explicit in our defaults in case others have\r\nthe same problem.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "dda05b04bb5d83fe787e6aeef5afb8159720d18e": {
                "zipkin-autoconfigure/storage-mysql/src/main/java/zipkin/autoconfigure/storage/mysql/ZipkinMySQLStorageAutoConfiguration.java": [
                    "DataSource zipkin.autoconfigure.storage.mysql.ZipkinMySQLStorageAutoConfiguration.mysqlDataSource()"
                ]
            },
            "3e2365a3b330f4add2741801d07d5139fb52eff6": {
                "zipkin-autoconfigure/storage-mysql/src/main/java/zipkin/autoconfigure/storage/mysql/ZipkinMySQLStorageAutoConfiguration.java": [
                    "DataSource zipkin.autoconfigure.storage.mysql.ZipkinMySQLStorageAutoConfiguration.mysqlDataSource()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d41eb50ca664c9e373eb2e312c5e5ec0d0a17dcf",
        "previous_commit": "c6f81cf353f5888dce515c717468681e5c490944",
        "date": 1518704390,
        "releases": {
            "previous": "d41eb50ca664c9e373eb2e312c5e5ec0d0a17dcf",
            "next": "d41eb50ca664c9e373eb2e312c5e5ec0d0a17dcf"
        },
        "commit_message": "Updates zipkin self-tracing to Brave 4 (#1589)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d41eb50ca664c9e373eb2e312c5e5ec0d0a17dcf": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "public Object zipkin.server.ZipkinServerConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ]
            },
            "c6f81cf353f5888dce515c717468681e5c490944": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "public Object zipkin.server.ZipkinServerConfiguration.postProcessAfterInitialization(Object bean, String beanName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e1ef2b6bdfc0c95e40ced0022a1755bb7ab7eddf",
        "previous_commit": "fe143c4fe06c13f4db8db2592f64f76a7d519dfe",
        "date": 1534646256,
        "releases": {
            "previous": "e1ef2b6bdfc0c95e40ced0022a1755bb7ab7eddf",
            "next": "e1ef2b6bdfc0c95e40ced0022a1755bb7ab7eddf"
        },
        "commit_message": "Check-health for Kafka Collector (#2168)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e1ef2b6bdfc0c95e40ced0022a1755bb7ab7eddf": {
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollector.java": [
                    "public CheckResult zipkin2.collector.kafka.KafkaCollector.check()"
                ]
            },
            "fe143c4fe06c13f4db8db2592f64f76a7d519dfe": {
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollector.java": [
                    "public CheckResult zipkin2.collector.kafka.KafkaCollector.check()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "452aa8d9cc008e0a1cc68377aff102d6a1264dfa",
        "previous_commit": "c653f04162c0156cd0b4855a1d5f5d63aa8f68f7",
        "date": 1466507491,
        "releases": {
            "previous": "452aa8d9cc008e0a1cc68377aff102d6a1264dfa",
            "next": "452aa8d9cc008e0a1cc68377aff102d6a1264dfa"
        },
        "commit_message": "Permits json null token on nullable fields (#1136)\n\nWhile conventionally, we omit fields rather than passing them as null,\r\nnull is valid json and was emitted by at least one tracer. This changes\r\nthe parser to ignore fields declared like `\"parentId\": null`\r\n\r\nFixes #1130",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "452aa8d9cc008e0a1cc68377aff102d6a1264dfa": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public Span zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ]
            },
            "c653f04162c0156cd0b4855a1d5f5d63aa8f68f7": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public Span zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "806db7bbbac08f7fa9e63ebcf7bf02f08f805c0d",
        "previous_commit": "80e99c482e06da7fa0fdc8cbf1055d07bb690853",
        "date": 1482369290,
        "releases": {
            "previous": "806db7bbbac08f7fa9e63ebcf7bf02f08f805c0d",
            "next": "806db7bbbac08f7fa9e63ebcf7bf02f08f805c0d"
        },
        "commit_message": "Small fix for ArrayIndexOutOfBoundsException in Buffer class (#1451)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "806db7bbbac08f7fa9e63ebcf7bf02f08f805c0d": {
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "Buffer zipkin.internal.Buffer.writeAscii(String v)"
                ]
            },
            "80e99c482e06da7fa0fdc8cbf1055d07bb690853": {
                "zipkin/src/main/java/zipkin/internal/Buffer.java": [
                    "Buffer zipkin.internal.Buffer.writeAscii(String v)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b1f86953bdccc87d73d5bb22e3efe07812eac642",
        "previous_commit": "524f115a609b49c034e6d6fa52b6f001c041c9df",
        "date": 1458033673,
        "releases": {
            "previous": "b1f86953bdccc87d73d5bb22e3efe07812eac642",
            "next": "b1f86953bdccc87d73d5bb22e3efe07812eac642"
        },
        "commit_message": "Reverts default Cassandra host policy to RoundRobin\n\nWhen changing loadbalancer policy, we didn't consider a scenario brought\nup by @michaelsembwever:\n\nDCAwareRoundRobinPolicy will by default prefer the first contact node's\ndatacenter. If that node happens to be in a remote datacenter, latency\nwill be high, and the `LatencyAwarePolicy` cannot correct it (since\nlocal nodes will be filtered out.\n\nThe previous logic is better because eventhough `RoundRobinPolicy` can\nselect a remote datacenter, it also selects local ones: the\n`LatencyAwarePolicy` will eventually correct to choose only the local\nones.\n\nSee https://github.com/openzipkin/zipkin-java/pull/92/files#r55933918\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b1f86953bdccc87d73d5bb22e3efe07812eac642": {
                "zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraConfig.java": [
                    "Cluster zipkin.cassandra.CassandraConfig.toCluster()"
                ]
            },
            "524f115a609b49c034e6d6fa52b6f001c041c9df": {
                "zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraConfig.java": [
                    "Cluster zipkin.cassandra.CassandraConfig.toCluster()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "816882c522163a190a850d40b0275c8b8a83d7bb",
        "previous_commit": "120d1a73f2abfb62fd9a41a72cf30ee7e3a5b388",
        "date": 1553226632,
        "releases": {
            "previous": "816882c522163a190a850d40b0275c8b8a83d7bb",
            "next": "816882c522163a190a850d40b0275c8b8a83d7bb"
        },
        "commit_message": "Saves some allocations when escaping json\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "816882c522163a190a850d40b0275c8b8a83d7bb": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/HttpBulkIndexer.java": [
                    "void zipkin2.elasticsearch.internal.HttpBulkIndexer.writeIndexMetadata(String index, String typeName, @Nullable String id)"
                ]
            },
            "120d1a73f2abfb62fd9a41a72cf30ee7e3a5b388": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/HttpBulkIndexer.java": [
                    "void zipkin2.elasticsearch.internal.HttpBulkIndexer.writeIndexMetadata(String index, String typeName, @Nullable String id)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ba9876da3799b8b08110414edb6f193ba08c28c0",
        "previous_commit": "90e717890f9ab4054da4843b2b7bc40daccaa70e",
        "date": 1598142154,
        "releases": {
            "previous": "ba9876da3799b8b08110414edb6f193ba08c28c0",
            "next": "ba9876da3799b8b08110414edb6f193ba08c28c0"
        },
        "commit_message": "Update Armeria to 1.0.0 (#3183)\n\nArmeria 1.0.0 is released. :smile:",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ba9876da3799b8b08110414edb6f193ba08c28c0": {
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "public static void zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.setup(RequestContext ctx, MeterRegistry registry, String metricName)"
                ]
            },
            "90e717890f9ab4054da4843b2b7bc40daccaa70e": {
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "public static void zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.setup(RequestContext ctx, MeterRegistry registry, String metricName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8a58c6ff452195156df295cf5be4a30eba63d2a9",
        "previous_commit": "a147213e8523f92348ccb374bcd85c24f92f16e5",
        "date": 1561119101,
        "releases": {
            "previous": "8a58c6ff452195156df295cf5be4a30eba63d2a9",
            "next": "8a58c6ff452195156df295cf5be4a30eba63d2a9"
        },
        "commit_message": "Makes RabbitMQ connect exceptions visible (#2637)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8a58c6ff452195156df295cf5be4a30eba63d2a9": {
                "zipkin-collector/rabbitmq/src/main/java/zipkin2/collector/rabbitmq/RabbitMQCollector.java": [
                    "Connection zipkin2.collector.rabbitmq.RabbitMQCollector.compute()"
                ]
            },
            "a147213e8523f92348ccb374bcd85c24f92f16e5": {
                "zipkin-collector/rabbitmq/src/main/java/zipkin2/collector/rabbitmq/RabbitMQCollector.java": [
                    "Connection zipkin2.collector.rabbitmq.RabbitMQCollector.compute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e70671b5f968da48f07d647489c9fcbaf6381dc2",
        "previous_commit": "ae70b6b25a280aa35c5893158f07ebb3a5cf3023",
        "date": 1512625526,
        "releases": {
            "previous": "e70671b5f968da48f07d647489c9fcbaf6381dc2",
            "next": "e70671b5f968da48f07d647489c9fcbaf6381dc2"
        },
        "commit_message": "Option to use SSL with RabbitMQ (#1837)\n\nAllows users to set a flag to use SSL when connecting to the RabbitMQ server via AMQPS.\r\n\r\nSee gh-1827",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e70671b5f968da48f07d647489c9fcbaf6381dc2": {
                "zipkin-autoconfigure/collector-rabbitmq/src/main/java/zipkin/autoconfigure/collector/rabbitmq/ZipkinRabbitMQCollectorProperties.java": [
                    "public RabbitMQCollector.Builder zipkin.autoconfigure.collector.rabbitmq.ZipkinRabbitMQCollectorProperties.toBuilder()"
                ]
            },
            "ae70b6b25a280aa35c5893158f07ebb3a5cf3023": {
                "zipkin-autoconfigure/collector-rabbitmq/src/main/java/zipkin/autoconfigure/collector/rabbitmq/ZipkinRabbitMQCollectorProperties.java": [
                    "public RabbitMQCollector.Builder zipkin.autoconfigure.collector.rabbitmq.ZipkinRabbitMQCollectorProperties.toBuilder()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "23beae1ae71d4b4d12397645aadb129984357511",
        "previous_commit": "2883b01f469e47972d4df6af2e56448b5fcff40f",
        "date": 1524268478,
        "releases": {
            "previous": "23beae1ae71d4b4d12397645aadb129984357511",
            "next": "23beae1ae71d4b4d12397645aadb129984357511"
        },
        "commit_message": "Don't crash when local span is missing a timestamp\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "23beae1ae71d4b4d12397645aadb129984357511": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static Span zipkin.internal.CorrectForClockSkew.adjustTimestamps(Span span, ClockSkew skew)"
                ]
            },
            "2883b01f469e47972d4df6af2e56448b5fcff40f": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static Span zipkin.internal.CorrectForClockSkew.adjustTimestamps(Span span, ClockSkew skew)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9a659b63dbc02f3ab07e0e4d31f1332f492fa072",
        "previous_commit": "e7e3cdb0971a7c50ff42602d7bb00ae3d5a42ee1",
        "date": 1544175231,
        "releases": {
            "previous": "9a659b63dbc02f3ab07e0e4d31f1332f492fa072",
            "next": "9a659b63dbc02f3ab07e0e4d31f1332f492fa072"
        },
        "commit_message": "Adds quick integration for lens in the default server build (#2317)\n\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9a659b63dbc02f3ab07e0e4d31f1332f492fa072": {
                "zipkin-autoconfigure/ui/src/main/java/zipkin2/autoconfigure/ui/ZipkinUiAutoConfiguration.java": [
                    "public void zipkin2.autoconfigure.ui.ZipkinUiAutoConfiguration.addResourceHandlers(ResourceHandlerRegistry registry)"
                ]
            },
            "e7e3cdb0971a7c50ff42602d7bb00ae3d5a42ee1": {
                "zipkin-autoconfigure/ui/src/main/java/zipkin2/autoconfigure/ui/ZipkinUiAutoConfiguration.java": [
                    "public void zipkin2.autoconfigure.ui.ZipkinUiAutoConfiguration.addResourceHandlers(ResourceHandlerRegistry registry)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "82071498eb33c13339d772b46243d9f90d8b74d9",
        "previous_commit": "39e9f84afc4dca966fbd52403a10eb2fd762ae9f",
        "date": 1707867828,
        "releases": {
            "previous": "82071498eb33c13339d772b46243d9f90d8b74d9",
            "next": "82071498eb33c13339d772b46243d9f90d8b74d9"
        },
        "commit_message": "proto: removes IP size logic that results in a fixed result (#3726)\n\nSigned-off-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "82071498eb33c13339d772b46243d9f90d8b74d9": {
                "zipkin/src/main/java/zipkin2/internal/Proto3ZipkinFields.java": [
                    "int zipkin2.internal.Proto3ZipkinFields.sizeOfValue(Endpoint value)"
                ]
            },
            "39e9f84afc4dca966fbd52403a10eb2fd762ae9f": {
                "zipkin/src/main/java/zipkin2/internal/Proto3ZipkinFields.java": [
                    "int zipkin2.internal.Proto3ZipkinFields.sizeOfValue(Endpoint value)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "05bfa8f33cfe50ac5a8ba899636c77b07e47f044",
        "previous_commit": "02a28eb8a72f7d52e0c033c53408067a54e5159a",
        "date": 1575795085,
        "releases": {
            "previous": "05bfa8f33cfe50ac5a8ba899636c77b07e47f044",
            "next": "05bfa8f33cfe50ac5a8ba899636c77b07e47f044"
        },
        "commit_message": "Update to Armeria 0.97.0 (#2943)\n\n* Update to Armeria 0.97.0\r\n\r\n* Update benchmark too\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "05bfa8f33cfe50ac5a8ba899636c77b07e47f044": {
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "ArmeriaServerConfigurator zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.httpRequestDurationConfigurator(MeterRegistry registry)"
                ]
            },
            "02a28eb8a72f7d52e0c033c53408067a54e5159a": {
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "ArmeriaServerConfigurator zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.httpRequestDurationConfigurator(MeterRegistry registry)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0d6e7970c6b9856f2e63bc25d17a5071d13da555",
        "previous_commit": "52d9cb7610bdaa2484fe30a5c4ca80d4b4817bde",
        "date": 1458277101,
        "releases": {
            "previous": "0d6e7970c6b9856f2e63bc25d17a5071d13da555",
            "next": "0d6e7970c6b9856f2e63bc25d17a5071d13da555"
        },
        "commit_message": "Exposes CASSANDRA_SPAN_TTL and CASSANDRA_INDEX_TTL variables\n\nSpan and Index Time-to-lives were already configurable, but not via properties. This fixes that.\n\n   * `CASSANDRA_SPAN_TTL`: Time-to-live in seconds for span data. Defaults to 604800 (7 days)\n   * `CASSANDRA_INDEX_TTL`: Time-to-live in seconds for index data. Defaults to 259200 (3 days)\n\nBy adding the above, we remain compatible with the scala query and collector services.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0d6e7970c6b9856f2e63bc25d17a5071d13da555": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "SpanStore zipkin.server.ZipkinServerConfiguration.spanStore()"
                ]
            },
            "52d9cb7610bdaa2484fe30a5c4ca80d4b4817bde": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "SpanStore zipkin.server.ZipkinServerConfiguration.spanStore()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "caef2a0182e6d086c0420384905406d5b4d9a8c2",
        "previous_commit": "4d589954d591e1d3d5a3abb4bb41ed1505e27920",
        "date": 1478338032,
        "releases": {
            "previous": "caef2a0182e6d086c0420384905406d5b4d9a8c2",
            "next": "caef2a0182e6d086c0420384905406d5b4d9a8c2"
        },
        "commit_message": "Adds other fields missing on groupBy\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "caef2a0182e6d086c0420384905406d5b4d9a8c2": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.aggregateDependencies(long endTs, @Nullable Long lookback, Connection conn)"
                ]
            },
            "4d589954d591e1d3d5a3abb4bb41ed1505e27920": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanStore.java": [
                    "List<DependencyLink> zipkin.storage.mysql.MySQLSpanStore.aggregateDependencies(long endTs, @Nullable Long lookback, Connection conn)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e4eff177bca6ad918c181e1a6f5e2c07e0a0595b",
        "previous_commit": "2a1dc0444f2c93635867f46964f6c53b315a235e",
        "date": 1563613634,
        "releases": {
            "previous": "e4eff177bca6ad918c181e1a6f5e2c07e0a0595b",
            "next": "e4eff177bca6ad918c181e1a6f5e2c07e0a0595b"
        },
        "commit_message": "Always make requests even if health check is all down and catch all e\u2026 (#2694)\n\n* Always make requests even if health check is all down and catch all exceptions, not just IOException\r\n\r\n* Wait for initial endpoints.\r\n\r\n* propagateIfFatal\r\n\r\n* Found unused import\r\n\r\n* Revert line\r\n\r\n* Revert file completely\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e4eff177bca6ad918c181e1a6f5e2c07e0a0595b": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public HttpClient zipkin2.elasticsearch.ElasticsearchStorage.httpClient()"
                ]
            },
            "2a1dc0444f2c93635867f46964f6c53b315a235e": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "public HttpClient zipkin2.elasticsearch.ElasticsearchStorage.httpClient()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "96354d34d05f68d823b5e5e9e8326b35f2743fec",
        "previous_commit": "eb29be932c86b26f7ae6f0ec8e58f1a409b562b4",
        "date": 1569245460,
        "releases": {
            "previous": "96354d34d05f68d823b5e5e9e8326b35f2743fec",
            "next": "96354d34d05f68d823b5e5e9e8326b35f2743fec"
        },
        "commit_message": "Removes spring-web dependency (#2816)\n\nWe don't use any Spring infrastructure for serving requests or making\r\nthem: Everything is Armeria. This removes a couple megs of dependencies\r\nwe don't use.\r\n\r\n```before\r\ndu -k ./zipkin-server/target/zipkin-server-*exec.jar\r\n57372\t./zipkin-server/target/zipkin-server-2.16.3-SNAPSHOT-exec.jar\r\n```\r\n\r\n```after\r\ndu -k ./zipkin-server/target/zipkin-server-*exec.jar\r\n55100\t./zipkin-server/target/zipkin-server-2.16.3-SNAPSHOT-exec.jar\r\n```",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "96354d34d05f68d823b5e5e9e8326b35f2743fec": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "AggregatedHttpResponse zipkin2.server.internal.ZipkinQueryApiV2.maybeCacheNames(boolean shouldCacheControl, List<String> values)"
                ]
            },
            "eb29be932c86b26f7ae6f0ec8e58f1a409b562b4": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "AggregatedHttpResponse zipkin2.server.internal.ZipkinQueryApiV2.maybeCacheNames(boolean shouldCacheControl, List<String> values)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6348ee97a026c6f34849b583f3fd88661b766054",
        "previous_commit": "bc53a4401dab84e3f0fa7dd782b19b32939e1706",
        "date": 1468828112,
        "releases": {
            "previous": "6348ee97a026c6f34849b583f3fd88661b766054",
            "next": "6348ee97a026c6f34849b583f3fd88661b766054"
        },
        "commit_message": "Uses default Elasticsearch port of 9300 instead of throwing exception\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6348ee97a026c6f34849b583f3fd88661b766054": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/LazyClient.java": [
                    "protected Client zipkin.storage.elasticsearch.LazyClient.compute()"
                ]
            },
            "bc53a4401dab84e3f0fa7dd782b19b32939e1706": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/LazyClient.java": [
                    "protected Client zipkin.storage.elasticsearch.LazyClient.compute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bc17082781504ed4910d52f44c80b2d22727b4f6",
        "previous_commit": "a5fa00af7d3ae6709f2607fc20953285b8c1ad49",
        "date": 1593576636,
        "releases": {
            "previous": "bc17082781504ed4910d52f44c80b2d22727b4f6",
            "next": "bc17082781504ed4910d52f44c80b2d22727b4f6"
        },
        "commit_message": "Adds undocumented property to log Elasticsearch health check requests (#3131)\n\nThis adds the below property, but doesn't assign an ENV variable as it\r\nis mostly useful for our own tests:\r\n\r\n```\r\nzipkin.storage.elasticsearch.health-check.http-logging=headers\r\n```\r\n\r\nThis also comments out in tests how to enable it temporarily. Ex to\r\ntroubleshoot #3130",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bc17082781504ed4910d52f44c80b2d22727b4f6": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "HealthCheckedEndpointGroup zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.decorateHealthCheck(EndpointGroup endpointGroup)"
                ]
            },
            "a5fa00af7d3ae6709f2607fc20953285b8c1ad49": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "HealthCheckedEndpointGroup zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.decorateHealthCheck(EndpointGroup endpointGroup)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4bcae2a6b5b0daf77bfbec6f98a36c515a2ed5ba",
        "previous_commit": "0a17a4e7dd9e09198ffecfe33064e2360d0463ce",
        "date": 1486806586,
        "releases": {
            "previous": "4bcae2a6b5b0daf77bfbec6f98a36c515a2ed5ba",
            "next": "4bcae2a6b5b0daf77bfbec6f98a36c515a2ed5ba"
        },
        "commit_message": "Lets MergeById.apply accept an Iterable (#1519)\n\nSpark jobs result in iterables. This change allows MergeById to be more\r\nconveniently reused.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4bcae2a6b5b0daf77bfbec6f98a36c515a2ed5ba": {
                "zipkin/src/main/java/zipkin/internal/MergeById.java": [
                    "public static List<Span> zipkin.internal.MergeById.apply(Iterable<Span> spans)"
                ]
            },
            "0a17a4e7dd9e09198ffecfe33064e2360d0463ce": {
                "zipkin/src/main/java/zipkin/internal/MergeById.java": [
                    "public static List<Span> zipkin.internal.MergeById.apply(Collection<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "525f7c316d71662d8f7be9e06f51dac1d6306606",
        "previous_commit": "e240b0b4bd856d446e52b60372f210a69130c232",
        "date": 1506915790,
        "releases": {
            "previous": "525f7c316d71662d8f7be9e06f51dac1d6306606",
            "next": "525f7c316d71662d8f7be9e06f51dac1d6306606"
        },
        "commit_message": "Skips null span name on v2 in-memory spanstore (#1749)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "525f7c316d71662d8f7be9e06f51dac1d6306606": {
                "zipkin2/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "synchronized public Call<Void> zipkin2.storage.InMemoryStorage.accept(List<Span> spans)"
                ]
            },
            "e240b0b4bd856d446e52b60372f210a69130c232": {
                "zipkin2/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "synchronized public Call<Void> zipkin2.storage.InMemoryStorage.accept(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "692d585456d9b6e464992fbb656a4575890c2ad2",
        "previous_commit": "50c748ca4645ab05e0ba3469197b2a9559d407e5",
        "date": 1596417714,
        "releases": {
            "previous": "692d585456d9b6e464992fbb656a4575890c2ad2",
            "next": "692d585456d9b6e464992fbb656a4575890c2ad2"
        },
        "commit_message": "Reduces clutter in Zipkin startup logging (#3157)\n\nThis reduces redundant or inactionable messages from startup. It also\r\nremoves Spring's default which caused a 5s delay for me at startup due\r\nto name lookups.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "692d585456d9b6e464992fbb656a4575890c2ad2": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServer.java": [
                    "public static void zipkin.server.ZipkinServer.main(String[] args)"
                ]
            },
            "50c748ca4645ab05e0ba3469197b2a9559d407e5": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServer.java": [
                    "public static void zipkin.server.ZipkinServer.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "41053eab9481c9cf6742c0ae886fc80aff641329",
        "previous_commit": "0f2be904447aa15c2abbff7f0565025b48f378f4",
        "date": 1505318510,
        "releases": {
            "previous": "41053eab9481c9cf6742c0ae886fc80aff641329",
            "next": "41053eab9481c9cf6742c0ae886fc80aff641329"
        },
        "commit_message": "Leniently coerses Endpoint.Builder.port(-1) to null\n\nMany getPort operations return -1 by default. Leniently coerse to null.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "41053eab9481c9cf6742c0ae886fc80aff641329": {
                "zipkin2/src/main/java/zipkin2/Endpoint.java": [
                    "public final Endpoint zipkin2.Endpoint.build()"
                ]
            },
            "0f2be904447aa15c2abbff7f0565025b48f378f4": {
                "zipkin2/src/main/java/zipkin2/Endpoint.java": [
                    "public final Endpoint zipkin2.Endpoint.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "42cf9c867ac457a3173421692ca74939dc42ef13",
        "previous_commit": "5d9f0e96be8dbe5f3bb7aaf2ff74e895026224a4",
        "date": 1596015179,
        "releases": {
            "previous": "42cf9c867ac457a3173421692ca74939dc42ef13",
            "next": "42cf9c867ac457a3173421692ca74939dc42ef13"
        },
        "commit_message": "add notes about the Kafka topic configuration for this collector. Also fix minor type syntax in KafkaCollectorWorker (#3152)\n\n* add notes about the Kafka topic configuration for this collector. Also fix minor type syntax in KafkaCollectorWorker\r\n\r\n* rework based on feedback by @jeqo\r\n\r\n* Update zipkin-collector/kafka/README.md\r\n\r\nCo-authored-by: Jorge Esteban Quilcate Otoya <quilcate.jorge@gmail.com>\r\n\r\n* Update zipkin-collector/kafka/README.md\r\n\r\nCo-authored-by: Jorge Esteban Quilcate Otoya <quilcate.jorge@gmail.com>\r\n\r\nCo-authored-by: Jorge Esteban Quilcate Otoya <quilcate.jorge@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "42cf9c867ac457a3173421692ca74939dc42ef13": {
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollectorWorker.java": [
                    "public void zipkin2.collector.kafka.KafkaCollectorWorker.run()"
                ]
            },
            "5d9f0e96be8dbe5f3bb7aaf2ff74e895026224a4": {
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollectorWorker.java": [
                    "public void zipkin2.collector.kafka.KafkaCollectorWorker.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8199ad29f6d9108b7586bd90e9d9cea8077f474c",
        "previous_commit": "88aaf4ef585d433a83b229a67d940d4feb758914",
        "date": 1550017456,
        "releases": {
            "previous": "8199ad29f6d9108b7586bd90e9d9cea8077f474c",
            "next": "8199ad29f6d9108b7586bd90e9d9cea8077f474c"
        },
        "commit_message": "Sorts children by timestamp order (Java) (#2389)\n\nThis is a port of #2385 for consistency",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8199ad29f6d9108b7586bd90e9d9cea8077f474c": {
                "zipkin/src/main/java/zipkin2/internal/SpanNode.java": [
                    "public SpanNode zipkin2.internal.SpanNode.build(List<Span> spans)"
                ]
            },
            "88aaf4ef585d433a83b229a67d940d4feb758914": {
                "zipkin/src/main/java/zipkin2/internal/SpanNode.java": [
                    "public SpanNode zipkin2.internal.SpanNode.build(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "53eed2409c562d5d467d2c20362bbcf95d3aaa29",
        "previous_commit": "a27ca07236810de3fc5c057530f932bebb5b4f43",
        "date": 1524094194,
        "releases": {
            "previous": "53eed2409c562d5d467d2c20362bbcf95d3aaa29",
            "next": "53eed2409c562d5d467d2c20362bbcf95d3aaa29"
        },
        "commit_message": "Refactors decoder test from encoder test\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "53eed2409c562d5d467d2c20362bbcf95d3aaa29": {
                "zipkin2/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> int zipkin2.internal.JsonCodec.writeList(Buffer.Writer<T> writer, List<T> value, byte[] out, int pos)"
                ]
            },
            "a27ca07236810de3fc5c057530f932bebb5b4f43": {
                "zipkin2/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> int zipkin2.internal.JsonCodec.writeList(Buffer.Writer<T> writer, List<T> value, byte[] out, int pos)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d423b25062c81c1fcb8499cbe48c3ef026d9cb9f",
        "previous_commit": "ff174772f4e25afdd22a8ccf92b346197bf88c91",
        "date": 1462021298,
        "releases": {
            "previous": "d423b25062c81c1fcb8499cbe48c3ef026d9cb9f",
            "next": "d423b25062c81c1fcb8499cbe48c3ef026d9cb9f"
        },
        "commit_message": "Makes max message size configurable in Kafka\n\nKafka requires global coordination of `message.max.bytes`. This impacts\ncollectors even if zipkin spans don't approach this amount. To configure\nthis, we add `KafkaCollector.Builder.maxMessageSize` and the environment\nvariable `KAFKA_MAX_MESSAGE_SIZE`.\n\nSame as https://github.com/openzipkin/zipkin/pull/1109\nSee #184\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d423b25062c81c1fcb8499cbe48c3ef026d9cb9f": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "KafkaCollector zipkin.server.ZipkinServerConfiguration.kafka(ZipkinKafkaProperties kafka, CollectorSampler sampler, StorageComponent storage)"
                ]
            },
            "ff174772f4e25afdd22a8ccf92b346197bf88c91": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "KafkaCollector zipkin.server.ZipkinServerConfiguration.kafka(ZipkinKafkaProperties kafka, CollectorSampler sampler, StorageComponent storage)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a953203e6ff38c59c84b2c2969c7ded479242cb1",
        "previous_commit": "6b387eae166330dab610340515e6ebbcdf91138b",
        "date": 1452321304,
        "releases": {
            "previous": "a953203e6ff38c59c84b2c2969c7ded479242cb1",
            "next": "a953203e6ff38c59c84b2c2969c7ded479242cb1"
        },
        "commit_message": "Renames TraceIdSampler to be similar to opentracing/api-python\n\nThe OpenTracing python api has a zipkin implementation with an almost\nidentical sampler as `TraceIdSampler`. This renames things so that it\nisn't artificially different.\n\nSee https://github.com/opentracing/api-python/blob/master/example/zipkin_like/sampler.py\n",
        "jmh_dependency": {
            "benchmark_directory": "zipkin-java-benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a953203e6ff38c59c84b2c2969c7ded479242cb1": {
                "zipkin-java-server/src/main/java/io/zipkin/server/ZipkinSpanWriter.java": [
                    "public void io.zipkin.server.ZipkinSpanWriter.write(SpanStore spanStore, List<Span> spans)"
                ]
            },
            "6b387eae166330dab610340515e6ebbcdf91138b": {
                "zipkin-java-server/src/main/java/io/zipkin/server/ZipkinSpanWriter.java": [
                    "public void io.zipkin.server.ZipkinSpanWriter.write(SpanStore spanStore, List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6f6e5fbab6a62410f04d2bb2b2efbbcce416a2f3",
        "previous_commit": "80de2d86003d240e2d6a2628e0aeead4efe44e6d",
        "date": 1467690723,
        "releases": {
            "previous": "6f6e5fbab6a62410f04d2bb2b2efbbcce416a2f3",
            "next": "6f6e5fbab6a62410f04d2bb2b2efbbcce416a2f3"
        },
        "commit_message": "Resurrects index skipping on core annotations in Cassandra (#1163)\n\nIn the old scala implementation, we used to skip \"core annotations\" when\r\nperforming api queries, and we skipped them on custom indexes like Redis\r\nor Cassandra. Skipping very common annotations like \"cs\" results in a\r\nlot less storage operations, without affecting meaningful user queries.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6f6e5fbab6a62410f04d2bb2b2efbbcce416a2f3": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java": [
                    "static List<String> zipkin.storage.cassandra.CassandraUtil.annotationKeys(Span span)"
                ]
            },
            "80de2d86003d240e2d6a2628e0aeead4efe44e6d": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java": [
                    "static List<String> zipkin.storage.cassandra.CassandraUtil.annotationKeys(Span span)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "73efa0578f527cbad120b10d3d8f59c111e7721c",
        "previous_commit": "f56b7c9af6dfdb465af93c0de69df272874ce3b7",
        "date": 1458279025,
        "releases": {
            "previous": "73efa0578f527cbad120b10d3d8f59c111e7721c",
            "next": "73efa0578f527cbad120b10d3d8f59c111e7721c"
        },
        "commit_message": "Prunes compile dependencies of zipkin-server to zipkin-core and spring\n\nBefore, zipkin-server accidentally had a hard dependency on JDBC and\nCassandra. This defers loading these classes until we know they are\nthere and the feature is enabled.\n\nFixes #102\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "73efa0578f527cbad120b10d3d8f59c111e7721c": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "SpanStore zipkin.server.ZipkinServerConfiguration.spanStore()"
                ]
            },
            "f56b7c9af6dfdb465af93c0de69df272874ce3b7": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "SpanStore zipkin.server.ZipkinServerConfiguration.spanStore()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f41c27043d78a609fa88135525caa5564ed2b163",
        "previous_commit": "8df8fc223799515c0e20ce1d18165abed70c8851",
        "date": 1458357719,
        "releases": {
            "previous": "f41c27043d78a609fa88135525caa5564ed2b163",
            "next": "f41c27043d78a609fa88135525caa5564ed2b163"
        },
        "commit_message": "Backfills missing unit tests for dependency linker\n\nProblems around dependencies come in two major forms.\n* The storage layer, which build DependencyLinkSpans\n* The DependencyLinker, which processes DependencyLinkSpans\n\nBefore, there wasn't an easy way to separate these problems:\nDependenciesTest existed, but was invoked from the storage layer.\n\nBy backfilling DependencyLinker tests, problems related to dependency\nlinks can be resolved closer to the code responsible for them.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f41c27043d78a609fa88135525caa5564ed2b163": {
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin.internal.DependencyLinker.putTrace(Iterator<DependencyLinkSpan> spans)"
                ]
            },
            "8df8fc223799515c0e20ce1d18165abed70c8851": {
                "zipkin/src/main/java/zipkin/internal/DependencyLinker.java": [
                    "public void zipkin.internal.DependencyLinker.putTrace(Iterator<DependencyLinkSpan> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "618f0763ce0dcf4a6800bd97b8e1b339b75078b2",
        "previous_commit": "dc2e407c2b68b801e32f8269e5c9ba9d37eaf6be",
        "date": 1459669256,
        "releases": {
            "previous": "618f0763ce0dcf4a6800bd97b8e1b339b75078b2",
            "next": "618f0763ce0dcf4a6800bd97b8e1b339b75078b2"
        },
        "commit_message": "Re-adds Scribe transport\n\nThis re-adds the Scribe transport, formerly removed in #30. Scribe is\nenabled by default in the exec jar (used in docker).\n\nCustom builds can enable Scribe by including the `transport-scribe`\ndependency. Further options may become available dependeding on the\noutcome of our modularity discussion (#108).\n\nThis component honors the only relevant environment variable from\nzipkin-scala: `ZIPKIN_COLLECTOR_PORT`. This sets the scribe listen port,\ndefaulting to port 9410.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "618f0763ce0dcf4a6800bd97b8e1b339b75078b2": {
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.kafka.KafkaStreamProcessor.run()"
                ]
            },
            "dc2e407c2b68b801e32f8269e5c9ba9d37eaf6be": {
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/KafkaStreamProcessor.java": [
                    "public void zipkin.kafka.KafkaStreamProcessor.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "93f55493628b9088998f0edb6da2d848f214466d",
        "previous_commit": "d0cc512b2614527f0592f2a560bda8d273eb66ac",
        "date": 1467795629,
        "releases": {
            "previous": "93f55493628b9088998f0edb6da2d848f214466d",
            "next": "93f55493628b9088998f0edb6da2d848f214466d"
        },
        "commit_message": "Documents key indexes, affected by recent code and changes in-flight (#1167)\n\nThis documents certain index tables used in Cassandra, particularly\r\nthose implicated in the more common queries.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "93f55493628b9088998f0edb6da2d848f214466d": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java": [
                    "void zipkin.storage.cassandra.CassandraStorage.clear()"
                ]
            },
            "d0cc512b2614527f0592f2a560bda8d273eb66ac": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraStorage.java": [
                    "void zipkin.storage.cassandra.CassandraStorage.clear()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4d589954d591e1d3d5a3abb4bb41ed1505e27920",
        "previous_commit": "c8b7f6bdf324d9a39d5db0316c709f88799bc81f",
        "date": 1478336545,
        "releases": {
            "previous": "4d589954d591e1d3d5a3abb4bb41ed1505e27920",
            "next": "4d589954d591e1d3d5a3abb4bb41ed1505e27920"
        },
        "commit_message": "Adds missing column: zipkin_annotations.trace_id_high\n\nThe previous schema change left out `zipkin_annotations.trace_id_high`\nwhich is needed for future work. This adds it and defaults to 0.\n\n```mysql\nmysql> alter table zipkin_annotations add `trace_id_high` BIGINT NOT NULL DEFAULT 0 COMMENT 'If non zero, this means the trace uses 128 bit traceIds instead of 64 bit';\n```\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4d589954d591e1d3d5a3abb4bb41ed1505e27920": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanConsumer.java": [
                    "public void zipkin.storage.mysql.MySQLSpanConsumer.accept(List<Span> spans)"
                ]
            },
            "c8b7f6bdf324d9a39d5db0316c709f88799bc81f": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLSpanConsumer.java": [
                    "public void zipkin.storage.mysql.MySQLSpanConsumer.accept(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3f299cda195af7b1685a11e262dcd6a554dec2a1",
        "previous_commit": "38e87f6317d97937802d3da93f8ce72d57290f6f",
        "date": 1522211828,
        "releases": {
            "previous": "3f299cda195af7b1685a11e262dcd6a554dec2a1",
            "next": "3f299cda195af7b1685a11e262dcd6a554dec2a1"
        },
        "commit_message": "Deprecates EnableZipkinServer to explain custom servers are unsupported (#1968)\n\nEspecially lately, we have had a large number of people having problems\r\nwith unnecessarily custom servers. Some are due to not knowing Sleuth's\r\nstream server is obviated by our rabbit support. Some are due to blogs\r\nwhich unfortunately recommend starting Zipkin in the IDE via a custom\r\nserver.\r\n\r\nThrough discussion, we decided the easiest way to let users know custom\r\nservers are unsupported is by deprecation. Deprecation shows up in the\r\nIDE and will alert those doing blogs or otherwise that they are\r\nsuggesting discouraged practice. It also sends a clear signal to those\r\nwho need to make custom servers that while doing so is possible, it is\r\nsomething the customizer needs to accept support reponsibility of.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3f299cda195af7b1685a11e262dcd6a554dec2a1": {
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/ZipkinElasticsearchAwsStorageAutoConfiguration.java": [
                    "public boolean zipkin.autoconfigure.storage.elasticsearch.aws.ZipkinElasticsearchAwsStorageAutoConfiguration.matches(ConditionContext condition, AnnotatedTypeMetadata md)"
                ]
            },
            "38e87f6317d97937802d3da93f8ce72d57290f6f": {
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/ZipkinElasticsearchAwsStorageAutoConfiguration.java": [
                    "public boolean zipkin.autoconfigure.storage.elasticsearch.aws.ZipkinElasticsearchAwsStorageAutoConfiguration.matches(ConditionContext condition, AnnotatedTypeMetadata md)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7985337d95bde6d3061e4b17a9b5fab798ee3053",
        "previous_commit": "56e2eaeec05fe3abb71fa574739ad7b18b514fbf",
        "date": 1523923012,
        "releases": {
            "previous": "7985337d95bde6d3061e4b17a9b5fab798ee3053",
            "next": "7985337d95bde6d3061e4b17a9b5fab798ee3053"
        },
        "commit_message": "Adds numeric encodings needed by proto3\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7985337d95bde6d3061e4b17a9b5fab798ee3053": {
                "zipkin2/src/main/java/zipkin2/codec/Encoding.java": [
                    "public int listSizeInBytes(int encodedSizeInBytes)"
                ]
            },
            "56e2eaeec05fe3abb71fa574739ad7b18b514fbf": {
                "zipkin2/src/main/java/zipkin2/codec/Encoding.java": [
                    "public int listSizeInBytes(int encodedSizeInBytes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "39972495b009b0a3c7c84a3a93efc79eb1b82033",
        "previous_commit": "8a6ae58ff09c7b227b8cdf403b0950e5b137edf2",
        "date": 1528270127,
        "releases": {
            "previous": "39972495b009b0a3c7c84a3a93efc79eb1b82033",
            "next": "39972495b009b0a3c7c84a3a93efc79eb1b82033"
        },
        "commit_message": "Migrates legacy cassandra code to v2 apis\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "39972495b009b0a3c7c84a3a93efc79eb1b82033": {
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/ZipkinCassandraStorageProperties.java": [
                    "public CassandraStorage.Builder zipkin.autoconfigure.storage.cassandra.ZipkinCassandraStorageProperties.toBuilder()"
                ]
            },
            "8a6ae58ff09c7b227b8cdf403b0950e5b137edf2": {
                "zipkin-autoconfigure/storage-cassandra/src/main/java/zipkin/autoconfigure/storage/cassandra/ZipkinCassandraStorageProperties.java": [
                    "public CassandraStorage.Builder zipkin.autoconfigure.storage.cassandra.ZipkinCassandraStorageProperties.toBuilder()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ffe98d8e6d41342aeb3e3be03599f95a17b661b7",
        "previous_commit": "725804e86e6d31b3ce005066fc612d5a62c68bbf",
        "date": 1469429020,
        "releases": {
            "previous": "ffe98d8e6d41342aeb3e3be03599f95a17b661b7",
            "next": "ffe98d8e6d41342aeb3e3be03599f95a17b661b7"
        },
        "commit_message": "Disables self-tracing by default (#1201)\n\n* Switches self-tracing to use sql query constant\r\n\r\n* Disables self-tracing by default\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ffe98d8e6d41342aeb3e3be03599f95a17b661b7": {
                "zipkin-autoconfigure/storage-mysql/src/main/java/zipkin/autoconfigure/storage/mysql/brave/TraceZipkinMySQLStorageAutoConfiguration.java": [
                    "public void zipkin.autoconfigure.storage.mysql.brave.TraceZipkinMySQLStorageAutoConfiguration.renderEnd(ExecuteContext ctx)"
                ]
            },
            "725804e86e6d31b3ce005066fc612d5a62c68bbf": {
                "zipkin-autoconfigure/storage-mysql/src/main/java/zipkin/autoconfigure/storage/mysql/brave/TraceZipkinMySQLStorageAutoConfiguration.java": [
                    "public void zipkin.autoconfigure.storage.mysql.brave.TraceZipkinMySQLStorageAutoConfiguration.renderEnd(ExecuteContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9d99e5adab46578f48e01abe3a2ed97ce2785717",
        "previous_commit": "8c351d0344a89e8583e8583536e9a8434291202c",
        "date": 1459751526,
        "releases": {
            "previous": "9d99e5adab46578f48e01abe3a2ed97ce2785717",
            "next": "9d99e5adab46578f48e01abe3a2ed97ce2785717"
        },
        "commit_message": "Makes DependencyLinkSpan.toString() valid json\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9d99e5adab46578f48e01abe3a2ed97ce2785717": {
                "zipkin/src/main/java/zipkin/internal/DependencyLinkSpan.java": [
                    "public String zipkin.internal.DependencyLinkSpan.toString()"
                ]
            },
            "8c351d0344a89e8583e8583536e9a8434291202c": {
                "zipkin/src/main/java/zipkin/internal/DependencyLinkSpan.java": [
                    "public String zipkin.internal.DependencyLinkSpan.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4f36b2e4a73734a60184473811b8ec2c08a2529f",
        "previous_commit": "8c8572f0a512ea00c1da2e7ca975fb9e811fc040",
        "date": 1551422502,
        "releases": {
            "previous": "4f36b2e4a73734a60184473811b8ec2c08a2529f",
            "next": "4f36b2e4a73734a60184473811b8ec2c08a2529f"
        },
        "commit_message": "Fails on incorrect format sent to http endpoints (#2421)\n\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4f36b2e4a73734a60184473811b8ec2c08a2529f": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "public void zipkin2.server.internal.ZipkinHttpCollector.handle(HttpServerExchange exchange, byte[] body)"
                ]
            },
            "8c8572f0a512ea00c1da2e7ca975fb9e811fc040": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "public void zipkin2.server.internal.ZipkinHttpCollector.handle(HttpServerExchange exchange, byte[] body)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d2ebec72639b685ae2a35c296c4872cb5328a88f",
        "previous_commit": "f324376225e16d470a6d8d9e096bde00bd45d70c",
        "date": 1569229899,
        "releases": {
            "previous": "d2ebec72639b685ae2a35c296c4872cb5328a88f",
            "next": "d2ebec72639b685ae2a35c296c4872cb5328a88f"
        },
        "commit_message": "Directly implements the /info endpoint and cleans up prometheus config (#2814)\n\nBefore, we directly implemented prometheus, but still left actuator on.\r\nThis prevents redundant booting of that.\r\n\r\nThis also directly implements the /info and /actuator/info endpoints\r\nwith tests to show the content is correct.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d2ebec72639b685ae2a35c296c4872cb5328a88f": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinServerConfiguration.java": [
                    "CollectorMetrics metrics(MeterRegistry registry)"
                ]
            },
            "f324376225e16d470a6d8d9e096bde00bd45d70c": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinServerConfiguration.java": [
                    "ArmeriaServerConfigurator zipkin2.server.internal.ZipkinServerConfiguration.serverConfigurator( Optional<CollectorRegistry> prometheusRegistry)",
                    "CollectorMetrics zipkin2.server.internal.ZipkinServerConfiguration.metrics(MeterRegistry registry)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "611e92a83d60017ce365ac66070e8847970b5136",
        "previous_commit": "dbf38bacd0a7e80d547072201f973a80bad299f4",
        "date": 1545030960,
        "releases": {
            "previous": "611e92a83d60017ce365ac66070e8847970b5136",
            "next": "611e92a83d60017ce365ac66070e8847970b5136"
        },
        "commit_message": "Adds AutocompleteTags and corresponding REST api (#2332)\n\n* Adds AutocompleteTags and corresponding REST api\r\n\r\nThis adds an optional storage interface `AutocompleteTags` to the\r\n`StorageComponent` and corresponding endpoints to support the UI.\r\n\r\n/api/v2/autocompleteKeys and /api/v2/autocompleteKeys?key=http.host\r\n\r\nThe server accepts a parameter `zipkin.storage.autocompleteKeys`\r\nwhich acts as a whitelist as storing values for every tag would be\r\nexpensive.\r\n\r\n* Info when not implemented and backfill tests\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "611e92a83d60017ce365ac66070e8847970b5136": {
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "public synchronized Call<Void> zipkin2.storage.InMemoryStorage.accept(List<Span> spans)"
                ]
            },
            "dbf38bacd0a7e80d547072201f973a80bad299f4": {
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "public synchronized Call<Void> zipkin2.storage.InMemoryStorage.accept(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "77778c5dd3fd734526f22ef5476307c103f54b0c",
        "previous_commit": "b543f09a89284a193a030469e854bd0e828c2df0",
        "date": 1484741145,
        "releases": {
            "previous": "77778c5dd3fd734526f22ef5476307c103f54b0c",
            "next": "77778c5dd3fd734526f22ef5476307c103f54b0c"
        },
        "commit_message": "Supports backfilling timestamp for one-way spans (#1497)\n\nBefore, we only supported backfilling timestamp and duration for spans\r\nthat have at least two annotations. This special cases an incomplete\r\none-way span (ex only cs), by adding its timestamp. This prevents the\r\nUI from crashing.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "77778c5dd3fd734526f22ef5476307c103f54b0c": {
                "zipkin/src/main/java/zipkin/internal/ApplyTimestampAndDuration.java": [
                    "public static Span zipkin.internal.ApplyTimestampAndDuration.apply(Span span)"
                ]
            },
            "b543f09a89284a193a030469e854bd0e828c2df0": {
                "zipkin/src/main/java/zipkin/internal/ApplyTimestampAndDuration.java": [
                    "public static Span zipkin.internal.ApplyTimestampAndDuration.apply(Span span)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "69d74a4ddd2ac52512237a13ae5082d3d2c54809",
        "previous_commit": "c2fd706cf35995040c68a4972fd32b1bea0377d6",
        "date": 1586922284,
        "releases": {
            "previous": "69d74a4ddd2ac52512237a13ae5082d3d2c54809",
            "next": "69d74a4ddd2ac52512237a13ae5082d3d2c54809"
        },
        "commit_message": "Adds parameter to disable the dependencies screen (#3065)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "69d74a4ddd2ac52512237a13ae5082d3d2c54809": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "String writeConfig(ZipkinUiProperties ui)"
                ]
            },
            "c2fd706cf35995040c68a4972fd32b1bea0377d6": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "String writeConfig(ZipkinUiProperties ui)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ec23bad275ec0c40634d1d90b0217c00c6895d23",
        "previous_commit": "fe8a2f161bec84bd4fa49251148ad419e25528e2",
        "date": 1459406439,
        "releases": {
            "previous": "ec23bad275ec0c40634d1d90b0217c00c6895d23",
            "next": "ec23bad275ec0c40634d1d90b0217c00c6895d23"
        },
        "commit_message": "Merges spans before linking dependencies in InMemorySpanStore\n\nAlso backfills test to ensure everything else works\n\nProblem and fix by @marcingrzejszczak\n\nFixes #144\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ec23bad275ec0c40634d1d90b0217c00c6895d23": {
                "zipkin/src/main/java/zipkin/InMemorySpanStore.java": [
                    "public List<DependencyLink> zipkin.InMemorySpanStore.getDependencies(long endTs, @Nullable Long lookback)"
                ]
            },
            "fe8a2f161bec84bd4fa49251148ad419e25528e2": {
                "zipkin/src/main/java/zipkin/InMemorySpanStore.java": [
                    "public List<DependencyLink> zipkin.InMemorySpanStore.getDependencies(long endTs, @Nullable Long lookback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "56fbfab9514a799360f5142e5b0aa7ccf1a34ec9",
        "previous_commit": "95d17b0768f1b6c67d7f81d296f3c0db0041dbfd",
        "date": 1483358194,
        "releases": {
            "previous": "56fbfab9514a799360f5142e5b0aa7ccf1a34ec9",
            "next": "56fbfab9514a799360f5142e5b0aa7ccf1a34ec9"
        },
        "commit_message": "Don't sort span names in elasticsearch (#1463)\n\nWhile probably not a big contributor to performance, we don't need to\r\nsort span names in elasticsearch as we already copy out into a sorted\r\nlist.\r\n\r\nSee #1462",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "56fbfab9514a799360f5142e5b0aa7ccf1a34ec9": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)"
                ]
            },
            "95d17b0768f1b6c67d7f81d296f3c0db0041dbfd": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<String>> zipkin.storage.elasticsearch.ElasticsearchSpanStore.getSpanNames(String serviceName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "34b2bc9500a13338eb99678a3ce26ed112be0c67",
        "previous_commit": "26368aed3d89bf25d6d5cc4b8a0b13c71c154482",
        "date": 1467107368,
        "releases": {
            "previous": "34b2bc9500a13338eb99678a3ce26ed112be0c67",
            "next": "34b2bc9500a13338eb99678a3ce26ed112be0c67"
        },
        "commit_message": "Fixes NPE when ES aggregations don't exist yet (#1152)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "34b2bc9500a13338eb99678a3ce26ed112be0c67": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public List<String> zipkin.storage.elasticsearch.ElasticsearchSpanStore.apply(SearchResponse response)"
                ]
            },
            "26368aed3d89bf25d6d5cc4b8a0b13c71c154482": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanStore.java": [
                    "public List<String> zipkin.storage.elasticsearch.ElasticsearchSpanStore.apply(SearchResponse response)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f039cf3e75f77a114392fe7f88f1208d9c1b4ff6",
        "previous_commit": "fb0bb39b0267264fc1056e63a44086a7afa4e2d2",
        "date": 1463045770,
        "releases": {
            "previous": "f039cf3e75f77a114392fe7f88f1208d9c1b4ff6",
            "next": "f039cf3e75f77a114392fe7f88f1208d9c1b4ff6"
        },
        "commit_message": "Fixes sync plugin, which missed sonatype credentials\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f039cf3e75f77a114392fe7f88f1208d9c1b4ff6": {
                "centralsync-maven-plugin/src/main/java/zipkin/maven/CentralSyncMojo.java": [
                    "public void zipkin.maven.CentralSyncMojo.execute()"
                ]
            },
            "fb0bb39b0267264fc1056e63a44086a7afa4e2d2": {
                "centralsync-maven-plugin/src/main/java/zipkin/maven/CentralSyncMojo.java": [
                    "public void zipkin.maven.CentralSyncMojo.execute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "85c485f0257735b2fe11ece52165e30f473da6a5",
        "previous_commit": "61dccc89104525c968ddeb0e178a4a9a70a90756",
        "date": 1501129267,
        "releases": {
            "previous": "85c485f0257735b2fe11ece52165e30f473da6a5",
            "next": "85c485f0257735b2fe11ece52165e30f473da6a5"
        },
        "commit_message": "Simplifies loop on MySQL dependency linking (#1667)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "85c485f0257735b2fe11ece52165e30f473da6a5": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkSpanIterator.java": [
                    "public DependencyLinkSpan zipkin.storage.mysql.DependencyLinkSpanIterator.next()"
                ]
            },
            "61dccc89104525c968ddeb0e178a4a9a70a90756": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/DependencyLinkSpanIterator.java": [
                    "public DependencyLinkSpan zipkin.storage.mysql.DependencyLinkSpanIterator.next()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "874351a56d87b518faa683744e1c5dc895124ad7",
        "previous_commit": "1bfd6487fa1a4d3384759c23a2346c220661e339",
        "date": 1550311171,
        "releases": {
            "previous": "874351a56d87b518faa683744e1c5dc895124ad7",
            "next": "874351a56d87b518faa683744e1c5dc895124ad7"
        },
        "commit_message": "Fixes sort order in java impl of SpanNode (#2391)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "874351a56d87b518faa683744e1c5dc895124ad7": {
                "zipkin/src/main/java/zipkin2/internal/SpanNode.java": [
                    "void zipkin2.internal.SpanNode.sortTreeByTimestamp(SpanNode root)"
                ]
            },
            "1bfd6487fa1a4d3384759c23a2346c220661e339": {
                "zipkin/src/main/java/zipkin2/internal/SpanNode.java": [
                    "void zipkin2.internal.SpanNode.sortTreeByTimestamp(SpanNode root)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0487c3191c1b56f9aad42541c6537d7fa09f62ff",
        "previous_commit": "0d077cad8c8bcbdfe7e94e26951704404b96870a",
        "date": 1565251353,
        "releases": {
            "previous": "0487c3191c1b56f9aad42541c6537d7fa09f62ff",
            "next": "0487c3191c1b56f9aad42541c6537d7fa09f62ff"
        },
        "commit_message": "Makes throttling parameters obvious by controlling exceptions (#2742)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0487c3191c1b56f9aad42541c6537d7fa09f62ff": {
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledCall.java": [
                    "protected void zipkin2.server.internal.throttle.ThrottledCall.doEnqueue(Callback<Void> callback)"
                ]
            },
            "0d077cad8c8bcbdfe7e94e26951704404b96870a": {
                "zipkin-server/src/main/java/zipkin2/server/internal/throttle/ThrottledCall.java": [
                    "protected void zipkin2.server.internal.throttle.ThrottledCall.doEnqueue(Callback<Void> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fd002be8a9527ba5a36fa1e7c53bb749c381a061",
        "previous_commit": "6e54d49f4f2726863fb66ff016ae8da713bdf707",
        "date": 1603334181,
        "releases": {
            "previous": "fd002be8a9527ba5a36fa1e7c53bb749c381a061",
            "next": "fd002be8a9527ba5a36fa1e7c53bb749c381a061"
        },
        "commit_message": "Quiets startup logging (#3253)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fd002be8a9527ba5a36fa1e7c53bb749c381a061": {
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollectorWorker.java": [
                    "public void zipkin2.collector.kafka.KafkaCollectorWorker.run()"
                ]
            },
            "6e54d49f4f2726863fb66ff016ae8da713bdf707": {
                "zipkin-collector/kafka/src/main/java/zipkin2/collector/kafka/KafkaCollectorWorker.java": [
                    "public void zipkin2.collector.kafka.KafkaCollectorWorker.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "196d58ae7d12934f294fbd06feebe9774db07f3a",
        "previous_commit": "1bc38e4e2201d9233805dbea168375602f5d29ee",
        "date": 1477644612,
        "releases": {
            "previous": "196d58ae7d12934f294fbd06feebe9774db07f3a",
            "next": "196d58ae7d12934f294fbd06feebe9774db07f3a"
        },
        "commit_message": "Fix annotation query parsing (#1367)\n\nThe current annotation query parser only returns value if a value contains an '=' sign. Fixed the parser to return the complete value even if they are '=' sign in the value.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "196d58ae7d12934f294fbd06feebe9774db07f3a": {
                "zipkin/src/main/java/zipkin/storage/QueryRequest.java": [
                    "public Builder zipkin.storage.QueryRequest.parseAnnotationQuery(String annotationQuery)"
                ]
            },
            "1bc38e4e2201d9233805dbea168375602f5d29ee": {
                "zipkin/src/main/java/zipkin/storage/QueryRequest.java": [
                    "public Builder zipkin.storage.QueryRequest.parseAnnotationQuery(String annotationQuery)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "90342b4b5fa36ec844de4dd68ebe6ab74c5e142d",
        "previous_commit": "f223b87c1989c4fd2121c3d9894deeb91258da37",
        "date": 1473926380,
        "releases": {
            "previous": "90342b4b5fa36ec844de4dd68ebe6ab74c5e142d",
            "next": "90342b4b5fa36ec844de4dd68ebe6ab74c5e142d"
        },
        "commit_message": "Tolerate 128bit ids in json and http api by throwing out high bits (#1296)\n\nThis bridges support for 128bit trace ids by not failing on their\r\nreceipt. Basically, this throws out any hex characters to the left\r\nof the 16 needed for the 64bit trace id.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "90342b4b5fa36ec844de4dd68ebe6ab74c5e142d": {
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static long zipkin.internal.Util.lowerHexToUnsignedLong(String lowerHex)"
                ]
            },
            "f223b87c1989c4fd2121c3d9894deeb91258da37": {
                "zipkin/src/main/java/zipkin/internal/Util.java": [
                    "public static long zipkin.internal.Util.lowerHexToUnsignedLong(String lowerHex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9f8efa9aae8fa9f429608a3752744c5498d730f7",
        "previous_commit": "479c277eed1a8c96d7a34da43f0746d1213fe9dc",
        "date": 1479438745,
        "releases": {
            "previous": "9f8efa9aae8fa9f429608a3752744c5498d730f7",
            "next": "9f8efa9aae8fa9f429608a3752744c5498d730f7"
        },
        "commit_message": "Cautiously writes error when bug found encoding json (#1407)\n\nThis adds a more careful message to avoid stack overflowing.\r\n\r\nfixes #1406",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9f8efa9aae8fa9f429608a3752744c5498d730f7": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "static <T> byte[] zipkin.internal.JsonCodec.write(Buffer.Writer<T> writer, T value)"
                ]
            },
            "479c277eed1a8c96d7a34da43f0746d1213fe9dc": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "static <T> byte[] zipkin.internal.JsonCodec.write(Buffer.Writer<T> writer, T value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ef0b0a5e0540b12a744d05279bd1591adff02838",
        "previous_commit": "bad871fcd405a1de9a4434a671c458a5c23870e9",
        "date": 1533525484,
        "releases": {
            "previous": "ef0b0a5e0540b12a744d05279bd1591adff02838",
            "next": "ef0b0a5e0540b12a744d05279bd1591adff02838"
        },
        "commit_message": "Makes lastColonIndex more intuitive\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ef0b0a5e0540b12a744d05279bd1591adff02838": {
                "zipkin/src/main/java/zipkin2/Endpoint.java": [
                    "static IpFamily zipkin2.Endpoint.detectFamily(String ipString)"
                ]
            },
            "bad871fcd405a1de9a4434a671c458a5c23870e9": {
                "zipkin/src/main/java/zipkin2/Endpoint.java": [
                    "static IpFamily zipkin2.Endpoint.detectFamily(String ipString)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "94eb9302128ee69a5be468864cba31cd44fd8d45",
        "previous_commit": "de0a5f759aed25e3051537b2f222d5cdee6355fa",
        "date": 1500598836,
        "releases": {
            "previous": "94eb9302128ee69a5be468864cba31cd44fd8d45",
            "next": "94eb9302128ee69a5be468864cba31cd44fd8d45"
        },
        "commit_message": "Supports dependency linking on single-host RPC spans (#1656)\n\nBefore, if a client span was a parent of a server span, linking wouldn't\r\nwork.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "94eb9302128ee69a5be468864cba31cd44fd8d45": {
                "zipkin/src/main/java/zipkin/internal/DependencyLinkSpan.java": [
                    "public DependencyLinkSpan zipkin.internal.DependencyLinkSpan.build()"
                ]
            },
            "de0a5f759aed25e3051537b2f222d5cdee6355fa": {
                "zipkin/src/main/java/zipkin/internal/DependencyLinkSpan.java": [
                    "public DependencyLinkSpan zipkin.internal.DependencyLinkSpan.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7352fb1f8bf2e6bb9892c7a4c2820aff0244b87a",
        "previous_commit": "85145c21457e36346576453bd1aaab4807ca8f77",
        "date": 1709626185,
        "releases": {
            "previous": "7352fb1f8bf2e6bb9892c7a4c2820aff0244b87a",
            "next": "7352fb1f8bf2e6bb9892c7a4c2820aff0244b87a"
        },
        "commit_message": "ui: ensures resources loaded by relative URL when baseUrl property set (#3746)\n\nSigned-off-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7352fb1f8bf2e6bb9892c7a4c2820aff0244b87a": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "static String maybeResource(String basePath, Resource resource)"
                ]
            },
            "85145c21457e36346576453bd1aaab4807ca8f77": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "static String maybeResource(String basePath, Resource resource)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "41b4a37ee948b521b69a242a79eadd9ed7c6da64",
        "previous_commit": "10e0458dab733301702a808f1cfbae7e80195e6f",
        "date": 1705985626,
        "releases": {
            "previous": "41b4a37ee948b521b69a242a79eadd9ed7c6da64",
            "next": "41b4a37ee948b521b69a242a79eadd9ed7c6da64"
        },
        "commit_message": "eureka: supports credentials in EUREKA_SERVICE_URL (#3700)\n\nThis adds support for credentials embedded in `EUREKA_SERVICE_URL` user\r\ninfo, as is typically done in spring cloud.\r\n\r\nFixes #3697\r\n\r\nSigned-off-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "41b4a37ee948b521b69a242a79eadd9ed7c6da64": {
                "zipkin-server/src/main/java/zipkin2/server/internal/eureka/ZipkinEurekaDiscoveryProperties.java": [
                    "EurekaUpdatingListenerBuilder zipkin2.server.internal.eureka.ZipkinEurekaDiscoveryProperties.toBuilder()"
                ]
            },
            "10e0458dab733301702a808f1cfbae7e80195e6f": {
                "zipkin-server/src/main/java/zipkin2/server/internal/eureka/ZipkinEurekaDiscoveryProperties.java": [
                    "EurekaUpdatingListenerBuilder zipkin2.server.internal.eureka.ZipkinEurekaDiscoveryProperties.toBuilder()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c4da4fa8b35429a02a747e55440cf2c198af4fe2",
        "previous_commit": "2a6ef008b5a434f63bd67aa1f0b83f178e1dfb35",
        "date": 1452302893,
        "releases": {
            "previous": "c4da4fa8b35429a02a747e55440cf2c198af4fe2",
            "next": "c4da4fa8b35429a02a747e55440cf2c198af4fe2"
        },
        "commit_message": "Fixes bug where endTs defaulted to the wrong timeunit\n",
        "jmh_dependency": {
            "benchmark_directory": "zipkin-java-benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c4da4fa8b35429a02a747e55440cf2c198af4fe2": {
                "zipkin-java-core/src/main/java/io/zipkin/QueryRequest.java": [
                    "public QueryRequest io.zipkin.QueryRequest.build()"
                ]
            },
            "2a6ef008b5a434f63bd67aa1f0b83f178e1dfb35": {
                "zipkin-java-core/src/main/java/io/zipkin/QueryRequest.java": [
                    "public QueryRequest io.zipkin.QueryRequest.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5d6177ae8641472a4bb51bfa1b3bd7e3741b4828",
        "previous_commit": "38d2148b914329c7ad0bbe45457e1969c6383797",
        "date": 1553326349,
        "releases": {
            "previous": "5d6177ae8641472a4bb51bfa1b3bd7e3741b4828",
            "next": "5d6177ae8641472a4bb51bfa1b3bd7e3741b4828"
        },
        "commit_message": "Adds test to ensure traces are grouped together (#2380)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5d6177ae8641472a4bb51bfa1b3bd7e3741b4828": {
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "Collection<Span> zipkin2.storage.InMemoryStorage.valueContainer()"
                ]
            },
            "38d2148b914329c7ad0bbe45457e1969c6383797": {
                "zipkin/src/main/java/zipkin2/storage/InMemoryStorage.java": [
                    "Collection<Span> zipkin2.storage.InMemoryStorage.valueContainer()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "93da4e11212ea888167f614cfba31d405284135f",
        "previous_commit": "41af487bf4a3f43c944bd789d38f114707e0077b",
        "date": 1478388533,
        "releases": {
            "previous": "93da4e11212ea888167f614cfba31d405284135f",
            "next": "93da4e11212ea888167f614cfba31d405284135f"
        },
        "commit_message": "adds more complete instructions for missing trace_id_high\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "93da4e11212ea888167f614cfba31d405284135f": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/HasTraceIdHigh.java": [
                    "protected Boolean zipkin.storage.mysql.HasTraceIdHigh.compute()"
                ]
            },
            "41af487bf4a3f43c944bd789d38f114707e0077b": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/HasTraceIdHigh.java": [
                    "protected Boolean zipkin.storage.mysql.HasTraceIdHigh.compute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7fe4f00ebedf34890e41155570c1eb241939f5e6",
        "previous_commit": "fdd5c4b6344012554756daafd3841c896d1a1ec7",
        "date": 1522401023,
        "releases": {
            "previous": "7fe4f00ebedf34890e41155570c1eb241939f5e6",
            "next": "7fe4f00ebedf34890e41155570c1eb241939f5e6"
        },
        "commit_message": "Index chars limit used in ES SpanConsumer is inconsistent in docs and code (#1979)\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7fe4f00ebedf34890e41155570c1eb241939f5e6": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "static byte[] zipkin2.elasticsearch.ElasticsearchSpanConsumer.prefixWithTimestampMillisAndQuery(Span span, long timestampMillis)"
                ]
            },
            "fdd5c4b6344012554756daafd3841c896d1a1ec7": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "static byte[] zipkin2.elasticsearch.ElasticsearchSpanConsumer.prefixWithTimestampMillisAndQuery(Span span, long timestampMillis)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9d8261a33c3adaad9aecd290744b651290c72e24",
        "previous_commit": "a30b4957e8673c12712f2d892220b9d2c005ecbb",
        "date": 1454611663,
        "releases": {
            "previous": "9d8261a33c3adaad9aecd290744b651290c72e24",
            "next": "9d8261a33c3adaad9aecd290744b651290c72e24"
        },
        "commit_message": "Re-organizes Node so that it can be used on objects besides Span\n\nWe need to create the trace tree in dependency store code. Particularly,\nwe don't want to retrieve the entire span just to count calls. This\nrefactors the Node object so that it can be used when all span details\naren't present.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9d8261a33c3adaad9aecd290744b651290c72e24": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "public static List<Span> zipkin.internal.CorrectForClockSkew.apply(List<Span> spans)"
                ]
            },
            "a30b4957e8673c12712f2d892220b9d2c005ecbb": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "public static List<Span> zipkin.internal.CorrectForClockSkew.apply(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fa81cf753d67a98e6e9038908fc3990b9eaef500",
        "previous_commit": "81c7cfc0baddb5db8bd121a5bf4379544db8c0aa",
        "date": 1468740598,
        "releases": {
            "previous": "fa81cf753d67a98e6e9038908fc3990b9eaef500",
            "next": "fa81cf753d67a98e6e9038908fc3990b9eaef500"
        },
        "commit_message": "Makes elasticsearch index buckets based on UTC time\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fa81cf753d67a98e6e9038908fc3990b9eaef500": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/IndexNameFormatter.java": [
                    "protected SimpleDateFormat zipkin.storage.elasticsearch.IndexNameFormatter.initialValue()"
                ]
            },
            "81c7cfc0baddb5db8bd121a5bf4379544db8c0aa": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/IndexNameFormatter.java": [
                    "protected SimpleDateFormat zipkin.storage.elasticsearch.IndexNameFormatter.initialValue()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cac1ace2c6e1d4e998a290bb6ae7a07da7025063",
        "previous_commit": "3c4a92a45412c6c650bc11d473fccf4abd158c90",
        "date": 1510041576,
        "releases": {
            "previous": "cac1ace2c6e1d4e998a290bb6ae7a07da7025063",
            "next": "cac1ace2c6e1d4e998a290bb6ae7a07da7025063"
        },
        "commit_message": "Backfills missing tests where duration query applies to annotationQuery\n\nBefore, we couldn't tell that some backends didn't support this.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "cac1ace2c6e1d4e998a290bb6ae7a07da7025063": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)"
                ]
            },
            "3c4a92a45412c6c650bc11d473fccf4abd158c90": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.storage.cassandra.CassandraSpanStore.getTraces(final QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ab8c920b6fffe2e29bc525738b1a86f829e9b414",
        "previous_commit": "8400c5c3ca2428e5dba6ca3d5648d15459b7e911",
        "date": 1530625842,
        "releases": {
            "previous": "ab8c920b6fffe2e29bc525738b1a86f829e9b414",
            "next": "ab8c920b6fffe2e29bc525738b1a86f829e9b414"
        },
        "commit_message": "Removes v1 endpoint and library dependency from Zipkin server\n\nSee #2047\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ab8c920b6fffe2e29bc525738b1a86f829e9b414": {
                "zipkin-autoconfigure/metrics-prometheus/src/main/java/zipkin/autoconfigure/prometheus/ZipkinPrometheusMetricsAutoConfiguration.java": [
                    "private static Tag zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.uri(HttpServerExchange exchange)"
                ]
            },
            "8400c5c3ca2428e5dba6ca3d5648d15459b7e911": {
                "zipkin-autoconfigure/metrics-prometheus/src/main/java/zipkin/autoconfigure/prometheus/ZipkinPrometheusMetricsAutoConfiguration.java": [
                    "private static Tag zipkin.autoconfigure.prometheus.ZipkinPrometheusMetricsAutoConfiguration.uri(HttpServerExchange exchange)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "74afc316587aef9cb318296654340fb3461b1391",
        "previous_commit": "73c2a84561bbe246e5d9e3306395f2d33331faf3",
        "date": 1563235511,
        "releases": {
            "previous": "74afc316587aef9cb318296654340fb3461b1391",
            "next": "74afc316587aef9cb318296654340fb3461b1391"
        },
        "commit_message": "Fix ReadBuffer when wrapping an array at an offset. (#2671)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "74afc316587aef9cb318296654340fb3461b1391": {
                "zipkin/src/main/java/zipkin2/internal/ReadBuffer.java": [
                    "public static ReadBuffer zipkin2.internal.ReadBuffer.wrapUnsafe(ByteBuffer buffer)"
                ]
            },
            "73c2a84561bbe246e5d9e3306395f2d33331faf3": {
                "zipkin/src/main/java/zipkin2/internal/ReadBuffer.java": [
                    "public static ReadBuffer zipkin2.internal.ReadBuffer.wrapUnsafe(ByteBuffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7caed1c428798f55a0d99310d203e879d822ab3c",
        "previous_commit": "2ae2dcccb3759c7cf62474d37bab9dde979ebaa8",
        "date": 1524882930,
        "releases": {
            "previous": "7caed1c428798f55a0d99310d203e879d822ab3c",
            "next": "7caed1c428798f55a0d99310d203e879d822ab3c"
        },
        "commit_message": "Changes prometheus metrics to use tags instead of name encoding\n\nBefore, prometheus metrics needed parsing to determine the transport.\nThis leaves \"/metrics\" alone, but maps the collector metrics to look\nnormal, using tags instead.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7caed1c428798f55a0d99310d203e879d822ab3c": {
                "zipkin-server/src/main/java/zipkin/server/internal/MetricsHealthController.java": [
                    "public ObjectNode zipkin.server.internal.MetricsHealthController.fetchMetricsFromMicrometer()"
                ]
            },
            "2ae2dcccb3759c7cf62474d37bab9dde979ebaa8": {
                "zipkin-server/src/main/java/zipkin/server/internal/MetricsHealthController.java": [
                    "public ObjectNode zipkin.server.internal.MetricsHealthController.fetchMetricsFromMicrometer()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "df72a4a27824e2006730dfd4d135a854960b4f00",
        "previous_commit": "9b5b2819045cab99d261e86228cdaea55323429b",
        "date": 1631223678,
        "releases": {
            "previous": "df72a4a27824e2006730dfd4d135a854960b4f00",
            "next": "df72a4a27824e2006730dfd4d135a854960b4f00"
        },
        "commit_message": "Limit usage of ES template parameter \"include_type_name\". (#3377)\n\n* Limit usage of ES template parameter \"include_type_name\".\r\n\r\nUsing parameter \"include_type_name\" with versions of ES that didn't yet support the parameter fails with `unrecognized parameter: [include_type_name]`\r\n\r\nThis change addresses that by limiting the usage to ES >= 6.7 < 7.0",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "df72a4a27824e2006730dfd4d135a854960b4f00": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "String zipkin2.elasticsearch.ElasticsearchStorage.buildUrl(IndexTemplates templates, String type)"
                ]
            },
            "9b5b2819045cab99d261e86228cdaea55323429b": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "String zipkin2.elasticsearch.ElasticsearchStorage.buildUrl(IndexTemplates templates, String type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "80de2d86003d240e2d6a2628e0aeead4efe44e6d",
        "previous_commit": "a18f31c075e5d25cccba5d06ffc06b221bbfa0d8",
        "date": 1467633100,
        "releases": {
            "previous": "80de2d86003d240e2d6a2628e0aeead4efe44e6d",
            "next": "80de2d86003d240e2d6a2628e0aeead4efe44e6d"
        },
        "commit_message": "Stores raw spans into Cassandra without any modifications (#1162)\n\nCassandra's design has an advantage whereas indexing is done separately\r\nfrom span storage. Due to this, we can more accurately record the raw\r\nspan.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "80de2d86003d240e2d6a2628e0aeead4efe44e6d": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> rawSpans)"
                ]
            },
            "a18f31c075e5d25cccba5d06ffc06b221bbfa0d8": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraSpanConsumer.java": [
                    "public ListenableFuture<Void> zipkin.storage.cassandra.CassandraSpanConsumer.accept(List<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d49785cc54817cd09862d1617d60b451103d632d",
        "previous_commit": "0c4a8c2cbb23a1585ec4be8184497d1b10d238a9",
        "date": 1517607535,
        "releases": {
            "previous": "d49785cc54817cd09862d1617d60b451103d632d",
            "next": "d49785cc54817cd09862d1617d60b451103d632d"
        },
        "commit_message": "Keep Cassandra storage working even if the annotations query is dropped. (#1902)\n\nref: https://github.com/openzipkin/zipkin/pull/1902",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d49785cc54817cd09862d1617d60b451103d632d": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "Call<List<List<Span>>> zipkin2.storage.cassandra.CassandraSpanStore.doGetTraces(QueryRequest request)"
                ]
            },
            "0c4a8c2cbb23a1585ec4be8184497d1b10d238a9": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/CassandraSpanStore.java": [
                    "Call<List<List<Span>>> zipkin2.storage.cassandra.CassandraSpanStore.doGetTraces(QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e389f6adf53abf61fa3fd2a68816ac7d22586efa",
        "previous_commit": "ea65cc3824e325e60607ca87e5124af2502ac6f8",
        "date": 1463580024,
        "releases": {
            "previous": "e389f6adf53abf61fa3fd2a68816ac7d22586efa",
            "next": "e389f6adf53abf61fa3fd2a68816ac7d22586efa"
        },
        "commit_message": "Extracts auto-configuration modules from zipkin-server\n\nThis decouples zipkin-server from ui, storage and collector modules.\nWhile there remains an optional dependency, this is only a mechanism to\ninclude these modules in the fat jar.\n\nTo do this, it uses the AutoConfigure technique from Spring Boot,\nnotably registering a manifest for each component to export.\n\nTo completely decouple, some work was needed. Particularly health check\nregistration needed to become more generic, and occur at the very end of\nthe application bootstrap so as to not interfere with initialization.\n\nFinally, this clears up a long-standing confusion where we named a\nstorage component jdbc, eventhough we only test it with mysql and all\nthe flags are named mysql. This settles on mysql as for example\nPostgreSQL would likely need different syntax.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e389f6adf53abf61fa3fd2a68816ac7d22586efa": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServer.java": [
                    "public static void zipkin.server.ZipkinServer.main(String[] args)"
                ]
            },
            "ea65cc3824e325e60607ca87e5124af2502ac6f8": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServer.java": [
                    "public static void zipkin.server.ZipkinServer.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "eb29be932c86b26f7ae6f0ec8e58f1a409b562b4",
        "previous_commit": "d2ebec72639b685ae2a35c296c4872cb5328a88f",
        "date": 1569239062,
        "releases": {
            "previous": "eb29be932c86b26f7ae6f0ec8e58f1a409b562b4",
            "next": "eb29be932c86b26f7ae6f0ec8e58f1a409b562b4"
        },
        "commit_message": "Directly implements /health endpoint, making actuator optional (#2815)\n\nFixes #2788",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "eb29be932c86b26f7ae6f0ec8e58f1a409b562b4": {
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "public PrometheusMeterRegistry zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.prometheusMeterRegistry()"
                ]
            },
            "d2ebec72639b685ae2a35c296c4872cb5328a88f": {
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "public PrometheusMeterRegistry zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.prometheusMeterRegistry(Clock clock)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1b96cb763763eecc1949d0c66e51fd444aebc1f9",
        "previous_commit": "0efe65a8685c01d2b09da20c94667fb2c07d21c4",
        "date": 1546235888,
        "releases": {
            "previous": "1b96cb763763eecc1949d0c66e51fd444aebc1f9",
            "next": "1b96cb763763eecc1949d0c66e51fd444aebc1f9"
        },
        "commit_message": "Fixes transitive ordering bug in dependency graph (#2338)\n\nFixes https://github.com/openzipkin/zipkin-dependencies/issues/125",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1b96cb763763eecc1949d0c66e51fd444aebc1f9": {
                "zipkin/src/main/java/zipkin2/internal/Trace.java": [
                    "static int zipkin2.internal.Trace.compareShared(Span left, Span right)"
                ]
            },
            "0efe65a8685c01d2b09da20c94667fb2c07d21c4": {
                "zipkin/src/main/java/zipkin2/internal/Trace.java": [
                    "static int zipkin2.internal.Trace.compareShared(Span left, Span right)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3368db158b39afff2c13e47110acf01ac87f08f2",
        "previous_commit": "c1436918a98473876a49b987057bc908e74f8898",
        "date": 1461926272,
        "releases": {
            "previous": "3368db158b39afff2c13e47110acf01ac87f08f2",
            "next": "3368db158b39afff2c13e47110acf01ac87f08f2"
        },
        "commit_message": "Splits instrumentation sampling from collector sampling\n\nInstrumentation samplers are before-the-fact. When a trace id is\nprovisioned, a sampler is applied to it to see if tracing should take\nplace or not. The decision is made once and propagated downstream.\n\nCollector samplers are after-the-fact. When parts of a trace are\nreceived from multiple reporters, they all need to be retained or\ndropped consistently.\n\nBefore, we were using the same sampler for both sides. This is a\nproblem in two ways, but mostly for low-traffic sites.\n\n* Low-traffic entry-points will see an unstable sample rate, at worst\ndropping all traces. For example, the default RNG in java applied to\nthe boundary sampler would only get within 4% of the target rate after\n100k decisions. Exact precision could be prefered, especially since the\noverhead is still less than a microsecond/decision.\n\n* High-traffic entry-points had low-sampling overhead, but they had a\nchance of sampling exactly the same trace ids. This would cause two\nunrelated requests to show up in the same trace.\n\nThis corrects the situation by not sharing a sampling algorithm between\nthe collectors and the instrumentation. It introduces a counting sampler\nwhich has 100% precision in groups of 100, and a boundary sampler, which\nis an order of magnitude faster, but probablistic with a measured 4%\nerror rate after 100K samples.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3368db158b39afff2c13e47110acf01ac87f08f2": {
                "zipkin-server/src/main/java/zipkin/server/brave/SpanStoreSpanCollector.java": [
                    "protected void zipkin.server.brave.SpanStoreSpanCollector.sendSpans(byte[] json)"
                ]
            },
            "c1436918a98473876a49b987057bc908e74f8898": {
                "zipkin-server/src/main/java/zipkin/server/brave/SpanStoreSpanCollector.java": [
                    "protected void zipkin.server.brave.SpanStoreSpanCollector.sendSpans(byte[] json)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bc70ec21b9e4ef33e0bd379db1bcbbedb7d64325",
        "previous_commit": "96a634e8546dd6302019b512967780dd9cafd255",
        "date": 1551238776,
        "releases": {
            "previous": "bc70ec21b9e4ef33e0bd379db1bcbbedb7d64325",
            "next": "bc70ec21b9e4ef33e0bd379db1bcbbedb7d64325"
        },
        "commit_message": "Works around encoding bug in zipkin-ruby by leniently parsing (#2415)\n\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bc70ec21b9e4ef33e0bd379db1bcbbedb7d64325": {
                "zipkin/src/main/java/zipkin2/v1/V1SpanConverter.java": [
                    "void zipkin2.v1.V1SpanConverter.processBinaryAnnotations(V1Span source)"
                ]
            },
            "96a634e8546dd6302019b512967780dd9cafd255": {
                "zipkin/src/main/java/zipkin2/v1/V1SpanConverter.java": [
                    "void zipkin2.v1.V1SpanConverter.processBinaryAnnotations(V1Span source)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6c7ebc31570c09a6cef5b51b8cc61f9b0fbe2faf",
        "previous_commit": "bdd49dad234fb3137f5d69879e33aaa7496472d6",
        "date": 1456204560,
        "releases": {
            "previous": "6c7ebc31570c09a6cef5b51b8cc61f9b0fbe2faf",
            "next": "6c7ebc31570c09a6cef5b51b8cc61f9b0fbe2faf"
        },
        "commit_message": "Adds ZipkinRule, a JUnit rule to spin-up a Zipkin server during tests\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6c7ebc31570c09a6cef5b51b8cc61f9b0fbe2faf": {
                "zipkin/src/main/java/zipkin/QueryRequest.java": [
                    "public Builder zipkin.QueryRequest.spanName(@Nullable String spanName)"
                ]
            },
            "bdd49dad234fb3137f5d69879e33aaa7496472d6": {
                "zipkin/src/main/java/zipkin/QueryRequest.java": [
                    "public Builder zipkin.QueryRequest.spanName(@Nullable String spanName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7681822dffba1e34e73d2cfbed73b0b1ab87036c",
        "previous_commit": "94eb9302128ee69a5be468864cba31cd44fd8d45",
        "date": 1500614069,
        "releases": {
            "previous": "7681822dffba1e34e73d2cfbed73b0b1ab87036c",
            "next": "7681822dffba1e34e73d2cfbed73b0b1ab87036c"
        },
        "commit_message": "Fixes bug where Span.Builder.duration wasn't cleared (#1659)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7681822dffba1e34e73d2cfbed73b0b1ab87036c": {
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.clear()"
                ]
            },
            "94eb9302128ee69a5be468864cba31cd44fd8d45": {
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.clear()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "eeea5b51a190284764402ca6b3e76e89ff7fb666",
        "previous_commit": "e072a9cbbb38aa25059797b1559be375822505c9",
        "date": 1459302984,
        "releases": {
            "previous": "eeea5b51a190284764402ca6b3e76e89ff7fb666",
            "next": "eeea5b51a190284764402ca6b3e76e89ff7fb666"
        },
        "commit_message": "Fixes guava version at 18 so as to avoid method not found errors\n\nThis sets a floor version of guava 18, which is bound by elasticsearch.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "eeea5b51a190284764402ca6b3e76e89ff7fb666": {
                "zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.cassandra.CassandraSpanStore.getTraces(QueryRequest request)"
                ]
            },
            "e072a9cbbb38aa25059797b1559be375822505c9": {
                "zipkin-spanstores/cassandra/src/main/java/zipkin/cassandra/CassandraSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.cassandra.CassandraSpanStore.getTraces(QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "387fae7a06d65c0f27f88ceda7d877423f24cdc5",
        "previous_commit": "f4f7c171fe3218d39ca5841ce0cf6a34495e3759",
        "date": 1490923283,
        "releases": {
            "previous": "387fae7a06d65c0f27f88ceda7d877423f24cdc5",
            "next": "387fae7a06d65c0f27f88ceda7d877423f24cdc5"
        },
        "commit_message": "Drops Elasticsearch Native transport (#1547)\n\nThis drops the Elasticsearch Native transport, which allows us to focus\r\nefforts on the http variant. It also stops us from interfering with\r\nSpring Boot autoconfiguration of Elasticsearch. Finally, it speeds up\r\nthe build as related docker tests are no longer needed.\r\n\r\nTo help in transition, this implicitly converts server configuration\r\npointing to the native port 9300 towards the http port 9200 after\r\nlogging a warning. This is an attempt to not break existing users.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "387fae7a06d65c0f27f88ceda7d877423f24cdc5": {
                "zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchHttpStorageProperties.java": [
                    "public void zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageProperties.setHosts(List<String> hosts)"
                ]
            },
            "f4f7c171fe3218d39ca5841ce0cf6a34495e3759": {
                "zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchHttpStorageProperties.java": [
                    "public void zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageProperties.setHosts(List<String> hosts)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "65db25d671f5e7002110cd794cf719b7de86ba33",
        "previous_commit": "8bfab5af77e39b00b9fc946133ee648080706a48",
        "date": 1518570021,
        "releases": {
            "previous": "65db25d671f5e7002110cd794cf719b7de86ba33",
            "next": "65db25d671f5e7002110cd794cf719b7de86ba33"
        },
        "commit_message": "Polish: lambdas should be replaced with method references (#1917)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "65db25d671f5e7002110cd794cf719b7de86ba33": {
                "zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchHttpStorageAutoConfiguration.java": [
                    "Interceptor zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageAutoConfiguration.loggingInterceptor(ZipkinElasticsearchHttpStorageProperties es)"
                ]
            },
            "8bfab5af77e39b00b9fc946133ee648080706a48": {
                "zipkin-autoconfigure/storage-elasticsearch-http/src/main/java/zipkin/autoconfigure/storage/elasticsearch/http/ZipkinElasticsearchHttpStorageAutoConfiguration.java": [
                    "Interceptor zipkin.autoconfigure.storage.elasticsearch.http.ZipkinElasticsearchHttpStorageAutoConfiguration.loggingInterceptor(ZipkinElasticsearchHttpStorageProperties es)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "822cd4b2f1360f6eba10c24c14cdaca9bdf914ba",
        "previous_commit": "2eb6e09f1dcfc21f005f2c80deae70808a033ac9",
        "date": 1457337905,
        "releases": {
            "previous": "822cd4b2f1360f6eba10c24c14cdaca9bdf914ba",
            "next": "822cd4b2f1360f6eba10c24c14cdaca9bdf914ba"
        },
        "commit_message": "Removes okio dependency from zipkin-server\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "822cd4b2f1360f6eba10c24c14cdaca9bdf914ba": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java": [
                    "public byte[] zipkin.server.ZipkinQueryApiV1.getTrace(@PathVariable String traceId)"
                ]
            },
            "2eb6e09f1dcfc21f005f2c80deae70808a033ac9": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinQueryApiV1.java": [
                    "public byte[] zipkin.server.ZipkinQueryApiV1.getTrace(@PathVariable String traceId)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a27ca07236810de3fc5c057530f932bebb5b4f43",
        "previous_commit": "3373bcd2934342755790770b674b41b286675558",
        "date": 1523972082,
        "releases": {
            "previous": "a27ca07236810de3fc5c057530f932bebb5b4f43",
            "next": "a27ca07236810de3fc5c057530f932bebb5b4f43"
        },
        "commit_message": "Removes out-of-date auto-value reference",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a27ca07236810de3fc5c057530f932bebb5b4f43": {
                "zipkin2/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> byte[] zipkin2.internal.JsonCodec.write(Buffer.Writer<T> writer, T value)"
                ]
            },
            "3373bcd2934342755790770b674b41b286675558": {
                "zipkin2/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "public static <T> byte[] zipkin2.internal.JsonCodec.write(Buffer.Writer<T> writer, T value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0d51d90a8859450f704e13faea3dee320e4bb080",
        "previous_commit": "34b2bc9500a13338eb99678a3ce26ed112be0c67",
        "date": 1467164911,
        "releases": {
            "previous": "0d51d90a8859450f704e13faea3dee320e4bb080",
            "next": "0d51d90a8859450f704e13faea3dee320e4bb080"
        },
        "commit_message": "Fixes Cassandra indexes that lost traces in the same millisecond (#1153)\n\nA schema bug resulted in Cassandra not indexing more than bucket count\r\n(10) trace ids per millisecond+search input. This manifested as less\r\ntraces retrieved by UI search or Api query than expected. For example,\r\nif you had 1000 traces that happened on the same service in the same\r\nmillisecond, only 10 would return.\r\n\r\nThe indexes affected are `service_span_name_index`, `service_name_index`\r\nand `annotations_index` and this was a schema-only change. Those with\r\nexisting zipkin installations should recreate these indexes to solve the\r\nproblem.\r\n\r\nFixes #1142",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0d51d90a8859450f704e13faea3dee320e4bb080": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java": [
                    "static List<String> zipkin.storage.cassandra.CassandraUtil.annotationKeys(QueryRequest request)"
                ]
            },
            "34b2bc9500a13338eb99678a3ce26ed112be0c67": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java": [
                    "static List<String> zipkin.storage.cassandra.CassandraUtil.annotationKeys(QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5dd84d2576e312a570e7f9c13168702facb6df6b",
        "previous_commit": "3fde7adf63daa316d1c748e30db3b32dc6ab71e0",
        "date": 1471318221,
        "releases": {
            "previous": "5dd84d2576e312a570e7f9c13168702facb6df6b",
            "next": "5dd84d2576e312a570e7f9c13168702facb6df6b"
        },
        "commit_message": "Adds span.timestamp_millis when storing in Elasticsearch\n\nIn order to allow systems like Kibana to search by timestamp, we add a\nfield \"timestamp_millis\" when storing. The cheapest way to do this\nwithout changing the codec is prefixing it to the json.\n\nFor example:\n`{\"traceId\":\"...` becomes `{\"timestamp_millis\":12345,\"traceId\":\"...`\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5dd84d2576e312a570e7f9c13168702facb6df6b": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "private IndexRequestBuilder zipkin.storage.elasticsearch.ElasticsearchSpanConsumer.createSpanIndexRequest(Span input)"
                ]
            },
            "3fde7adf63daa316d1c748e30db3b32dc6ab71e0": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin/storage/elasticsearch/ElasticsearchSpanConsumer.java": [
                    "private IndexRequestBuilder zipkin.storage.elasticsearch.ElasticsearchSpanConsumer.createSpanIndexRequest(Span input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "95d17b0768f1b6c67d7f81d296f3c0db0041dbfd",
        "previous_commit": "df816e6430507ef51c8f6e0a0bd61331ffc5dab6",
        "date": 1483358180,
        "releases": {
            "previous": "95d17b0768f1b6c67d7f81d296f3c0db0041dbfd",
            "next": "95d17b0768f1b6c67d7f81d296f3c0db0041dbfd"
        },
        "commit_message": "Clock skew correction is now applied. (#1465)\n\nWhen traces begin by SR-SS, clock skew correction wasn't applied.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "95d17b0768f1b6c67d7f81d296f3c0db0041dbfd": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static void zipkin.internal.CorrectForClockSkew.adjust(Node<Span> node, @Nullable ClockSkew skewFromParent)"
                ]
            },
            "df816e6430507ef51c8f6e0a0bd61331ffc5dab6": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static void zipkin.internal.CorrectForClockSkew.adjust(Node<Span> node, @Nullable ClockSkew skewFromParent)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7e80e71bf682f74d900f866bc9ab1608ac01f6c8",
        "previous_commit": "25a1b8e59dab21d544597c8a23155ba8c550cd31",
        "date": 1575012380,
        "releases": {
            "previous": "7e80e71bf682f74d900f866bc9ab1608ac01f6c8",
            "next": "7e80e71bf682f74d900f866bc9ab1608ac01f6c8"
        },
        "commit_message": "Only collect metrics for API endpoints. (#2929)\n\n* Only collect metrics for API endpoints.\r\n\r\n* Remove tests for not-found and redirect\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7e80e71bf682f74d900f866bc9ab1608ac01f6c8": {
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "ArmeriaServerConfigurator zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.httpRequestDurationConfigurator(MeterRegistry registry)"
                ]
            },
            "25a1b8e59dab21d544597c8a23155ba8c550cd31": {
                "zipkin-server/src/main/java/zipkin2/server/internal/prometheus/ZipkinPrometheusMetricsConfiguration.java": [
                    "ArmeriaServerConfigurator zipkin2.server.internal.prometheus.ZipkinPrometheusMetricsConfiguration.httpRequestDurationConfigurator(MeterRegistry registry)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "30683307a6b63b3b247dc51279129253c7b93179",
        "previous_commit": "9767fc8a1d2d2661c9e592fc0c8e1d3bd5b05638",
        "date": 1480403365,
        "releases": {
            "previous": "30683307a6b63b3b247dc51279129253c7b93179",
            "next": "30683307a6b63b3b247dc51279129253c7b93179"
        },
        "commit_message": "Adds better error message when a binary annotation key or value is unset (#1421)\n\nWhen people are making instrumentation, they could accidentally leave\r\ndata missing. This gives a contextual error message of which binary\r\nannotation was malformed.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "30683307a6b63b3b247dc51279129253c7b93179": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public BinaryAnnotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ]
            },
            "9767fc8a1d2d2661c9e592fc0c8e1d3bd5b05638": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public BinaryAnnotation zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "38e87f6317d97937802d3da93f8ce72d57290f6f",
        "previous_commit": "c0fe48634637a6f5554108bc87964d47b4a89702",
        "date": 1522210651,
        "releases": {
            "previous": "38e87f6317d97937802d3da93f8ce72d57290f6f",
            "next": "38e87f6317d97937802d3da93f8ce72d57290f6f"
        },
        "commit_message": "Corrects clock-skew in one-way RPC spans (#1969)\n\nIn one-way RPC, we now correct obvious skew: when the server receives a\r\nmessage before it was sent.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "38e87f6317d97937802d3da93f8ce72d57290f6f": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static ClockSkew zipkin.internal.CorrectForClockSkew.getClockSkew(Span span)"
                ]
            },
            "c0fe48634637a6f5554108bc87964d47b4a89702": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static ClockSkew zipkin.internal.CorrectForClockSkew.getClockSkew(Span span)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9af07125161a7e0529c2b682b933aef46edda590",
        "previous_commit": "616268660208c0ef00a95d416c5e5099c11bb883",
        "date": 1458639106,
        "releases": {
            "previous": "9af07125161a7e0529c2b682b933aef46edda590",
            "next": "9af07125161a7e0529c2b682b933aef46edda590"
        },
        "commit_message": "Add an elasticsearch span store.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9af07125161a7e0529c2b682b933aef46edda590": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "SpanStore zipkin.server.ZipkinServerConfiguration.spanStore()"
                ]
            },
            "616268660208c0ef00a95d416c5e5099c11bb883": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "SpanStore zipkin.server.ZipkinServerConfiguration.spanStore()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5fe709c234b5783588a52b4adfb87ad378889191",
        "previous_commit": "b3a21f35eb9fae0882831566b6ff026e2cd4ea27",
        "date": 1519299772,
        "releases": {
            "previous": "5fe709c234b5783588a52b4adfb87ad378889191",
            "next": "5fe709c234b5783588a52b4adfb87ad378889191"
        },
        "commit_message": "Defined http.route key and ensures server span name is preferred (#1924)\n\nEspecially when using http route based span names, we have to be careful\r\nto not pick a bad name. In shared spans, for example, the UI prefers\r\nserver-side's name of the service. However, we have no name priority\r\nlogic, so it is arbitrary. This ensures the server's span name wins in a\r\nrace.\r\n\r\nSee https://github.com/openzipkin/zipkin/issues/1874",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5fe709c234b5783588a52b4adfb87ad378889191": {
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.merge(Span that)"
                ]
            },
            "b3a21f35eb9fae0882831566b6ff026e2cd4ea27": {
                "zipkin/src/main/java/zipkin/Span.java": [
                    "public Builder zipkin.Span.merge(Span that)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c061db38e5ddd29c05817c8cb5d696c24ba69344",
        "previous_commit": "f2ff789cc8f7f13ef1beae5e42aa0019f587fc64",
        "date": 1458918147,
        "releases": {
            "previous": "c061db38e5ddd29c05817c8cb5d696c24ba69344",
            "next": "c061db38e5ddd29c05817c8cb5d696c24ba69344"
        },
        "commit_message": "Fix handling of request.limit, which was being applied pre-filtering instead of post-filtering resulting in empty trace result sets. Now, we break from Zipkin API's guarantees of returning traces ordered by first span by ordering by first filtered span. In real-world usage, this should not cause any problems and makes sure the query is fast (query filters are better optimized than aggregation filters).\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c061db38e5ddd29c05817c8cb5d696c24ba69344": {
                "zipkin-spanstores/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)"
                ]
            },
            "f2ff789cc8f7f13ef1beae5e42aa0019f587fc64": {
                "zipkin-spanstores/elasticsearch/src/main/java/zipkin/elasticsearch/ElasticsearchSpanStore.java": [
                    "public ListenableFuture<List<List<Span>>> zipkin.elasticsearch.ElasticsearchSpanStore.getTraces(QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "de9c70434b1281e03fb8c4ff3a96a24d0ac70775",
        "previous_commit": "16b4adcbe44c92f760ab4d66303eea321ec95dd1",
        "date": 1582694864,
        "releases": {
            "previous": "de9c70434b1281e03fb8c4ff3a96a24d0ac70775",
            "next": "de9c70434b1281e03fb8c4ff3a96a24d0ac70775"
        },
        "commit_message": "Add View Logs link to lens. (#2985)\n\n* Add View Logs link to lens.\r\n\r\n* Don't restore our global mock unnecessarily\r\n\r\n* Found more tests\r\n\r\n* Wrong branch :(\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "de9c70434b1281e03fb8c4ff3a96a24d0ac70775": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "String writeConfig(ZipkinUiProperties ui)"
                ]
            },
            "16b4adcbe44c92f760ab4d66303eea321ec95dd1": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "String writeConfig(ZipkinUiProperties ui)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6dde6e492219d9da8aaec082391711368cc66c79",
        "previous_commit": "106a21ed6bafb0c35af401a2180344e111871db1",
        "date": 1566646723,
        "releases": {
            "previous": "6dde6e492219d9da8aaec082391711368cc66c79",
            "next": "6dde6e492219d9da8aaec082391711368cc66c79"
        },
        "commit_message": "Catch and return all possible errors in collector. (#2782)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6dde6e492219d9da8aaec082391711368cc66c79": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)"
                ]
            },
            "106a21ed6bafb0c35af401a2180344e111871db1": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinHttpCollector.java": [
                    "HttpResponse zipkin2.server.internal.ZipkinHttpCollector.validateAndStoreSpans(SpanBytesDecoder decoder, ServiceRequestContext ctx, HttpRequest req)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "de80609598db48e96460573672280e89237562d5",
        "previous_commit": "eed3c5b00f58543034a116d7072dc62f4c19319b",
        "date": 1510466177,
        "releases": {
            "previous": "de80609598db48e96460573672280e89237562d5",
            "next": "de80609598db48e96460573672280e89237562d5"
        },
        "commit_message": "Adds bracing with \u2591 to ensure no accidental substring match\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "de80609598db48e96460573672280e89237562d5": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/InsertSpan.java": [
                    "Input zipkin2.storage.cassandra.InsertSpan.newInput(zipkin2.Span span, UUID ts_uuid)"
                ]
            },
            "eed3c5b00f58543034a116d7072dc62f4c19319b": {
                "zipkin-storage/zipkin2_cassandra/src/main/java/zipkin2/storage/cassandra/InsertSpan.java": [
                    "Input zipkin2.storage.cassandra.InsertSpan.newInput(zipkin2.Span span, UUID ts_uuid)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "aedded56faeae9c5bc92bad6cb4bc6e6a2704071",
        "previous_commit": "963d014c664ff4efdac64123399c9f6e37f3c64e",
        "date": 1590472667,
        "releases": {
            "previous": "aedded56faeae9c5bc92bad6cb4bc6e6a2704071",
            "next": "aedded56faeae9c5bc92bad6cb4bc6e6a2704071"
        },
        "commit_message": "Stops looking for local RabbitMQ connection (#3093)\n\nThis improves the Docker based RabbitMQ tests in the same manner as\r\nhttps://github.com/openzipkin/zipkin-reporter-java/pull/176\r\n\r\nThis notably stops looking for a local RabbitMQ install. It also reduces\r\nflakes by using the CLI and not sharing static collector resources in\r\ninstance-level tests.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "aedded56faeae9c5bc92bad6cb4bc6e6a2704071": {
                "zipkin-collector/rabbitmq/src/main/java/zipkin2/collector/rabbitmq/RabbitMQCollector.java": [
                    "public CheckResult zipkin2.collector.rabbitmq.RabbitMQCollector.check()"
                ]
            },
            "963d014c664ff4efdac64123399c9f6e37f3c64e": {
                "zipkin-collector/rabbitmq/src/main/java/zipkin2/collector/rabbitmq/RabbitMQCollector.java": [
                    "public CheckResult zipkin2.collector.rabbitmq.RabbitMQCollector.check()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "10530dcf89232af31ccad3ac51f5b527b4d36bf1",
        "previous_commit": "3c6ceefa2cc3837f8743c27c012a30cf60e55705",
        "date": 1464769817,
        "releases": {
            "previous": "10530dcf89232af31ccad3ac51f5b527b4d36bf1",
            "next": "10530dcf89232af31ccad3ac51f5b527b4d36bf1"
        },
        "commit_message": "Fixes error handling for absent annotation value\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "10530dcf89232af31ccad3ac51f5b527b4d36bf1": {
                "zipkin/src/main/java/zipkin/storage/QueryRequest.java": [
                    "public Builder zipkin.storage.QueryRequest.parseAnnotationQuery(String annotationQuery)"
                ]
            },
            "3c6ceefa2cc3837f8743c27c012a30cf60e55705": {
                "zipkin/src/main/java/zipkin/storage/QueryRequest.java": [
                    "public Builder zipkin.storage.QueryRequest.parseAnnotationQuery(String annotationQuery)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "689a27c13a2b8b48f8782b354406595fb77982de",
        "previous_commit": "50a65e2b3229efd0868d0f94120284576de54f9d",
        "date": 1556080422,
        "releases": {
            "previous": "689a27c13a2b8b48f8782b354406595fb77982de",
            "next": "689a27c13a2b8b48f8782b354406595fb77982de"
        },
        "commit_message": "Conventionally use RejectedExecutionException for load issues (#2511)\n\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "689a27c13a2b8b48f8782b354406595fb77982de": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/HttpBulkIndexer.java": [
                    "public Void zipkin2.elasticsearch.internal.HttpBulkIndexer.convert(BufferedSource b)"
                ]
            },
            "50a65e2b3229efd0868d0f94120284576de54f9d": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/HttpBulkIndexer.java": [
                    "public Void zipkin2.elasticsearch.internal.HttpBulkIndexer.convert(BufferedSource b)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "43a039611fedbb3ee780f257a276512da62590c7",
        "previous_commit": "5905ba58013c493d750a46ef27167f682bd3f3ad",
        "date": 1479252913,
        "releases": {
            "previous": "43a039611fedbb3ee780f257a276512da62590c7",
            "next": "43a039611fedbb3ee780f257a276512da62590c7"
        },
        "commit_message": "be more forgiving of IPv4-mapped addresses in json (#1404)\n\nCurrently Zipkin checks that all IPv6 addresses are 16 bytes long.\r\nHowever, if an IPv4-mapped addresses such as `::ffff:192.168.1.128` is\r\ngiven then InetAddress.getByName will return an Inet4Address and the\r\nassertion will fail.\r\n\r\nInstead accept the address, but store it as ipv4 to maintain all\r\nexisting assertions.  This absolves clients of reconciling the nuances\r\nof IPv4-mapped addresses in their environments (for example, in node\r\n`net.isIPv6('::ffff:192.168.1.128')` is true) with Java's.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "43a039611fedbb3ee780f257a276512da62590c7": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public Endpoint zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ]
            },
            "5905ba58013c493d750a46ef27167f682bd3f3ad": {
                "zipkin/src/main/java/zipkin/internal/JsonCodec.java": [
                    "public Endpoint zipkin.internal.JsonCodec.fromJson(JsonReader reader)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "66b152ca1141f2854f608fc97e6c18ce88c22a4c",
        "previous_commit": "38fd611371ed933fa9605154a54682f4f0dde0f7",
        "date": 1707360942,
        "releases": {
            "previous": "66b152ca1141f2854f608fc97e6c18ce88c22a4c",
            "next": "66b152ca1141f2854f608fc97e6c18ce88c22a4c"
        },
        "commit_message": "WIP: backfill tests for behaviour on malformed due to non-string tags (#3695)\n\nSigned-off-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "66b152ca1141f2854f608fc97e6c18ce88c22a4c": {
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "static IllegalArgumentException zipkin2.internal.JsonCodec.exceptionReading(String type, Exception e)"
                ]
            },
            "38fd611371ed933fa9605154a54682f4f0dde0f7": {
                "zipkin/src/main/java/zipkin2/internal/JsonCodec.java": [
                    "static IllegalArgumentException zipkin2.internal.JsonCodec.exceptionReading(String type, Exception e)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "0910e35b743ded0a7c2a075b57ed1cc9bf32ae5f",
        "previous_commit": "c1e4867e6757d9c2a46166241bf1235fb8eb5693",
        "date": 1608859153,
        "releases": {
            "previous": "0910e35b743ded0a7c2a075b57ed1cc9bf32ae5f",
            "next": "0910e35b743ded0a7c2a075b57ed1cc9bf32ae5f"
        },
        "commit_message": "Makes error message better when invalid ES hosts exist (#3332)\n\nFixes #3331",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0910e35b743ded0a7c2a075b57ed1cc9bf32ae5f": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/InitialEndpointSupplier.java": [
                    "public EndpointGroup zipkin2.server.internal.elasticsearch.InitialEndpointSupplier.get()"
                ]
            },
            "c1e4867e6757d9c2a46166241bf1235fb8eb5693": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/InitialEndpointSupplier.java": [
                    "public EndpointGroup zipkin2.server.internal.elasticsearch.InitialEndpointSupplier.get()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "90600c00d70a18b73f5e9f992f947bc177e1e9a7",
        "previous_commit": "0f572a0df0c6b3ae8d105329be727e7c7aa00cf5",
        "date": 1459347569,
        "releases": {
            "previous": "90600c00d70a18b73f5e9f992f947bc177e1e9a7",
            "next": "90600c00d70a18b73f5e9f992f947bc177e1e9a7"
        },
        "commit_message": "Fixes small configuration glitches\n\nFixes self-tracing, removes the storage type registry, and replaces\n\"zipkin.store.type\" with \"zipkin.storage.type\" which closer relates to\nthe env variable \"STORAGE_TYPE\"\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "90600c00d70a18b73f5e9f992f947bc177e1e9a7": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "InMemorySpanStore zipkin.server.ZipkinServerConfiguration.inMemorySpanStore()"
                ]
            },
            "0f572a0df0c6b3ae8d105329be727e7c7aa00cf5": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "InMemorySpanStore zipkin.server.ZipkinServerConfiguration.inMemorySpanStore()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bf4daeb27850dd3e54cae0791fb8b5b5834a85ce",
        "previous_commit": "ec5619207e6caed9630a281630d2eb913ee2db2c",
        "date": 1476323464,
        "releases": {
            "previous": "bf4daeb27850dd3e54cae0791fb8b5b5834a85ce",
            "next": "bf4daeb27850dd3e54cae0791fb8b5b5834a85ce"
        },
        "commit_message": "Simplifies AWSSignatureVersion4 by using Okio 1.11\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bf4daeb27850dd3e54cae0791fb8b5b5834a85ce": {
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/AWSSignatureVersion4.java": [
                    "Request zipkin.autoconfigure.storage.elasticsearch.aws.AWSSignatureVersion4.sign(Request input)"
                ]
            },
            "ec5619207e6caed9630a281630d2eb913ee2db2c": {
                "zipkin-autoconfigure/storage-elasticsearch-aws/src/main/java/zipkin/autoconfigure/storage/elasticsearch/aws/AWSSignatureVersion4.java": [
                    "Request zipkin.autoconfigure.storage.elasticsearch.aws.AWSSignatureVersion4.sign(Request input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7e813147af3554622b0be585e11df5cff44777a8",
        "previous_commit": "96d254606ba19fed15f74739f74891bd564bbeb8",
        "date": 1494858199,
        "releases": {
            "previous": "7e813147af3554622b0be585e11df5cff44777a8",
            "next": "7e813147af3554622b0be585e11df5cff44777a8"
        },
        "commit_message": "Considers the translated table name in MySQL health checks (#1595)\n\nBefore, we didn't look for non-default schema. Now we do.\r\n\r\nFixes #1592",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7e813147af3554622b0be585e11df5cff44777a8": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLStorage.java": [
                    "public CheckResult zipkin.storage.mysql.MySQLStorage.check()"
                ]
            },
            "96d254606ba19fed15f74739f74891bd564bbeb8": {
                "zipkin-storage/mysql/src/main/java/zipkin/storage/mysql/MySQLStorage.java": [
                    "public CheckResult zipkin.storage.mysql.MySQLStorage.check()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2047930ef93f14ed8f38816b5af8d7cb49ee5ff3",
        "previous_commit": "0e59facca81e2a63023b49a8f1dfcd5b5f1accac",
        "date": 1531323387,
        "releases": {
            "previous": "2047930ef93f14ed8f38816b5af8d7cb49ee5ff3",
            "next": "2047930ef93f14ed8f38816b5af8d7cb49ee5ff3"
        },
        "commit_message": "handles mysql conversion glitch on shared spans\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2047930ef93f14ed8f38816b5af8d7cb49ee5ff3": {
                "zipkin2/src/main/java/zipkin2/v1/V1SpanConverter.java": [
                    "void zipkin2.v1.V1SpanConverter.processAnnotations(V1Span source)"
                ]
            },
            "0e59facca81e2a63023b49a8f1dfcd5b5f1accac": {
                "zipkin2/src/main/java/zipkin2/v1/V1SpanConverter.java": [
                    "void zipkin2.v1.V1SpanConverter.processAnnotations(V1Span source)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e4744a7cd7e1541cc926708a04d5944dfa61f079",
        "previous_commit": "d7cdf7d6d0041a45ed13c3cce0dd9bcce37968ae",
        "date": 1498764194,
        "releases": {
            "previous": "e4744a7cd7e1541cc926708a04d5944dfa61f079",
            "next": "e4744a7cd7e1541cc926708a04d5944dfa61f079"
        },
        "commit_message": "Uses docker for C* tests (#1573)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e4744a7cd7e1541cc926708a04d5944dfa61f079": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Cassandra3Storage.java": [
                    "void zipkin.storage.cassandra3.Cassandra3Storage.clear()"
                ]
            },
            "d7cdf7d6d0041a45ed13c3cce0dd9bcce37968ae": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Cassandra3Storage.java": [
                    "void zipkin.storage.cassandra3.Cassandra3Storage.clear()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2d62ed2dd6098f54a5d0ffd65a8e73b1d46b5c55",
        "previous_commit": "0a4a789d3c3868cbb5a2981024781e6a74089c55",
        "date": 1467700525,
        "releases": {
            "previous": "2d62ed2dd6098f54a5d0ffd65a8e73b1d46b5c55",
            "next": "2d62ed2dd6098f54a5d0ffd65a8e73b1d46b5c55"
        },
        "commit_message": "Adds error message when Endpoint.ipv4 isn't supplied (#1164)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2d62ed2dd6098f54a5d0ffd65a8e73b1d46b5c55": {
                "zipkin/src/main/java/zipkin/Endpoint.java": [
                    "public Endpoint zipkin.Endpoint.build()"
                ]
            },
            "0a4a789d3c3868cbb5a2981024781e6a74089c55": {
                "zipkin/src/main/java/zipkin/Endpoint.java": [
                    "public Endpoint zipkin.Endpoint.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e661025db02106cf976d27138710e5689835b829",
        "previous_commit": "f66fa61f3bf54e444645642af82e602a7f844156",
        "date": 1701822069,
        "releases": {
            "previous": "e661025db02106cf976d27138710e5689835b829",
            "next": "e661025db02106cf976d27138710e5689835b829"
        },
        "commit_message": "deps: updates to armeria 1.26.3 and netty 4.1.100.Final (#3614)\n\nupdates armeria and netty to latest and adds missing timeout\r\n\r\nSigned-off-by: Adrian Cole <adrian@tetrate.io>\r\nCo-authored-by: Hansel Wei <hello@hanselwei.dev>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e661025db02106cf976d27138710e5689835b829": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "HealthCheckedEndpointGroup zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.decorateHealthCheck(EndpointGroup endpointGroup)"
                ]
            },
            "f66fa61f3bf54e444645642af82e602a7f844156": {
                "zipkin-server/src/main/java/zipkin2/server/internal/elasticsearch/LazyHttpClientImpl.java": [
                    "HealthCheckedEndpointGroup zipkin2.server.internal.elasticsearch.LazyHttpClientImpl.decorateHealthCheck(EndpointGroup endpointGroup)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "81b8f16c6a36225b55358a79f5131223a5209db0",
        "previous_commit": "c639b61e6fda8bef2f070166e590f233c7ebaf3e",
        "date": 1701660748,
        "releases": {
            "previous": "81b8f16c6a36225b55358a79f5131223a5209db0",
            "next": "81b8f16c6a36225b55358a79f5131223a5209db0"
        },
        "commit_message": "elasticsearch: use backpressure to resolve streaming request flakes (#3236)\n\nThe `HttpResponse` was sent before the request are fully sent.\r\nSo the request was aborted after getting the response.\r\n\r\nWe should change to send the response after the request is fully received.\r\n- close #3197\r\n\r\nSigned-off-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "81b8f16c6a36225b55358a79f5131223a5209db0": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "CompletableFuture<AggregatedHttpResponse> zipkin2.elasticsearch.internal.client.HttpCall<V>.sendRequest()"
                ]
            },
            "c639b61e6fda8bef2f070166e590f233c7ebaf3e": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/internal/client/HttpCall.java": [
                    "CompletableFuture<AggregatedHttpResponse> zipkin2.elasticsearch.internal.client.HttpCall<V>.sendRequest()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "813bb7e74b2207a31a0d7559e5b96b4360694e2d",
        "previous_commit": "20bd83942d9418d75cbe9e08ca1e56ef24939d45",
        "date": 1573793079,
        "releases": {
            "previous": "813bb7e74b2207a31a0d7559e5b96b4360694e2d",
            "next": "813bb7e74b2207a31a0d7559e5b96b4360694e2d"
        },
        "commit_message": "Use Jackson to write names and write to pooled buffer to reduce garbage. (#2919)\n\n* Use Jackson to write names and write to pooled buffer to reduce garbage.\r\n\r\n* Revert debugging changes\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "813bb7e74b2207a31a0d7559e5b96b4360694e2d": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "public AggregatedHttpResponse zipkin2.server.internal.ZipkinQueryApiV2.getServiceNames(ServiceRequestContext ctx)"
                ]
            },
            "20bd83942d9418d75cbe9e08ca1e56ef24939d45": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ZipkinQueryApiV2.java": [
                    "public AggregatedHttpResponse zipkin2.server.internal.ZipkinQueryApiV2.getServiceNames()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1ec1e1be6385f8400e220d2c4b0b9bd010799fdd",
        "previous_commit": "788513553e3e1d66d1188d11dd351f11b3245a68",
        "date": 1505063593,
        "releases": {
            "previous": "1ec1e1be6385f8400e220d2c4b0b9bd010799fdd",
            "next": "1ec1e1be6385f8400e220d2c4b0b9bd010799fdd"
        },
        "commit_message": "Remove internal dep in LazyCloseable\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1ec1e1be6385f8400e220d2c4b0b9bd010799fdd": {
                "zipkin/src/main/java/zipkin/internal/LazyCloseable.java": [
                    "public void zipkin.internal.LazyCloseable<T>.close()"
                ]
            },
            "788513553e3e1d66d1188d11dd351f11b3245a68": {
                "zipkin/src/main/java/zipkin/internal/LazyCloseable.java": [
                    "public void zipkin.internal.LazyCloseable<T>.close()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c65ce5c4573b516da5b9e5d7d6206d3c26d7a6a5",
        "previous_commit": "a16330351ad3cd6d01c63406ea03b58e51d188ce",
        "date": 1708934486,
        "releases": {
            "previous": "c65ce5c4573b516da5b9e5d7d6206d3c26d7a6a5",
            "next": "c65ce5c4573b516da5b9e5d7d6206d3c26d7a6a5"
        },
        "commit_message": "updates depedencies to latest versions, notably fixing Eureka (#3737)\n\nThis fixes Eureka status page registration while updating all\r\ndepedencies to the latest versions. The most needed update was to\r\narmeria 1.27.2.\r\n\r\nSigned-off-by: Adrian Cole <adrian@tetrate.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c65ce5c4573b516da5b9e5d7d6206d3c26d7a6a5": {
                "zipkin-server/src/main/java/zipkin2/server/internal/eureka/ZipkinEurekaDiscoveryProperties.java": [
                    "EurekaUpdatingListenerBuilder zipkin2.server.internal.eureka.ZipkinEurekaDiscoveryProperties.toBuilder()"
                ]
            },
            "a16330351ad3cd6d01c63406ea03b58e51d188ce": {
                "zipkin-server/src/main/java/zipkin2/server/internal/eureka/ZipkinEurekaDiscoveryProperties.java": [
                    "EurekaUpdatingListenerBuilder zipkin2.server.internal.eureka.ZipkinEurekaDiscoveryProperties.toBuilder()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "fefb55e512db58d37abc79ee38d1d97f30a8185c",
        "previous_commit": "615d611ab0720e1ce336fdd7df1d425a48cc753d",
        "date": 1583978004,
        "releases": {
            "previous": "fefb55e512db58d37abc79ee38d1d97f30a8185c",
            "next": "fefb55e512db58d37abc79ee38d1d97f30a8185c"
        },
        "commit_message": "Reduce openzipkin links to just home page and allow a user-configurab\u2026 (#3014)\n\nCo-authored-by: Tommy Ludwig <8924140+shakuzen@users.noreply.github.com>\r\nCo-authored-by: Jorge Quilcate Otoya <quilcate.jorge@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fefb55e512db58d37abc79ee38d1d97f30a8185c": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "String writeConfig(ZipkinUiProperties ui)"
                ]
            },
            "615d611ab0720e1ce336fdd7df1d425a48cc753d": {
                "zipkin-server/src/main/java/zipkin2/server/internal/ui/ZipkinUiConfiguration.java": [
                    "String writeConfig(ZipkinUiProperties ui)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "08f356bac274e9b1c738122c1cec94cfd91db010",
        "previous_commit": "b2b86267d0cfe7d37bcf89ae7e66118fae76836f",
        "date": 1563970623,
        "releases": {
            "previous": "08f356bac274e9b1c738122c1cec94cfd91db010",
            "next": "08f356bac274e9b1c738122c1cec94cfd91db010"
        },
        "commit_message": "Leak less stuff into Elasticsearch requests with b3 single (#2707)\n\nCurrently, when self-tracing is enabled, all requests, traced or not,\r\nend up with B3 headers. This reduces the load on Elasticsearch by using\r\nb3 single, which is also less cluttered when viewing api requests.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "08f356bac274e9b1c738122c1cec94cfd91db010": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingConfiguration.java": [
                    "Tracing zipkin2.server.internal.brave.TracingConfiguration.tracing(Reporter<Span> reporter, SelfTracingProperties config)"
                ]
            },
            "b2b86267d0cfe7d37bcf89ae7e66118fae76836f": {
                "zipkin-server/src/main/java/zipkin2/server/internal/brave/TracingConfiguration.java": [
                    "Tracing zipkin2.server.internal.brave.TracingConfiguration.tracing(Reporter<Span> reporter, SelfTracingProperties config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6d06d8df768e37eeccea4ee13ee7781415a260b8",
        "previous_commit": "d823ed05eef9c7c95d00a6c658f29719d1805342",
        "date": 1467175112,
        "releases": {
            "previous": "6d06d8df768e37eeccea4ee13ee7781415a260b8",
            "next": "6d06d8df768e37eeccea4ee13ee7781415a260b8"
        },
        "commit_message": "Revert \"Fixes Cassandra indexes that lost traces in the same millisecond (#1153)\"\n\nThis reverts commit 0d51d90a8859450f704e13faea3dee320e4bb080.\n\nThe change needs to be re-addressed as trace ids repeat in the indexes now. This\nmakes the limit problem worse.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6d06d8df768e37eeccea4ee13ee7781415a260b8": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java": [
                    "static List<String> zipkin.storage.cassandra.CassandraUtil.annotationKeys(QueryRequest request)"
                ]
            },
            "d823ed05eef9c7c95d00a6c658f29719d1805342": {
                "zipkin-storage/cassandra/src/main/java/zipkin/storage/cassandra/CassandraUtil.java": [
                    "static List<String> zipkin.storage.cassandra.CassandraUtil.annotationKeys(QueryRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ee79a768f0cad845c13a3b25a4a0b0a1726ab5b1",
        "previous_commit": "2c4a7071bfbdb294b38cd0a6fe6bc760bf4662b0",
        "date": 1458289155,
        "releases": {
            "previous": "ee79a768f0cad845c13a3b25a4a0b0a1726ab5b1",
            "next": "ee79a768f0cad845c13a3b25a4a0b0a1726ab5b1"
        },
        "commit_message": "Fixes NPE and makes Brave really optional\n\nBrave configuration needed to be looked up by name, not type.\n\nFixes #68\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ee79a768f0cad845c13a3b25a4a0b0a1726ab5b1": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "public ConditionOutcome zipkin.server.ZipkinServerConfiguration.getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata a)"
                ]
            },
            "2c4a7071bfbdb294b38cd0a6fe6bc760bf4662b0": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinServerConfiguration.java": [
                    "public ConditionOutcome zipkin.server.ZipkinServerConfiguration.getMatchOutcome(ConditionContext context, AnnotatedTypeMetadata a)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b2e3425c02b49c36532d08a953f32aff2a2fe6ac",
        "previous_commit": "4ff5af27f676ed46d5a8d556238491a9c15204d2",
        "date": 1478317371,
        "releases": {
            "previous": "b2e3425c02b49c36532d08a953f32aff2a2fe6ac",
            "next": "b2e3425c02b49c36532d08a953f32aff2a2fe6ac"
        },
        "commit_message": "Adds missing cleanup",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b2e3425c02b49c36532d08a953f32aff2a2fe6ac": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Cassandra3Storage.java": [
                    "void zipkin.storage.cassandra3.Cassandra3Storage.clear()"
                ]
            },
            "4ff5af27f676ed46d5a8d556238491a9c15204d2": {
                "zipkin-storage/cassandra3/src/main/java/zipkin/storage/cassandra3/Cassandra3Storage.java": [
                    "void zipkin.storage.cassandra3.Cassandra3Storage.clear()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6e6a080bea86e5eb6d632f4fed64c4a175e3145a",
        "previous_commit": "3bd67433a9294036c31bd22bf3a33060af501134",
        "date": 1502690654,
        "releases": {
            "previous": "6e6a080bea86e5eb6d632f4fed64c4a175e3145a",
            "next": "6e6a080bea86e5eb6d632f4fed64c4a175e3145a"
        },
        "commit_message": "Hardens json parser (#1691)\n\n[go-swagger](https://github.com/go-swagger/go-swagger) initializes some\r\nfields to null. This ensures null fields don't break parsing.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6e6a080bea86e5eb6d632f4fed64c4a175e3145a": {
                "zipkin/src/main/java/zipkin/internal/Span2JsonCodec.java": [
                    "public Span2 zipkin.internal.Span2JsonCodec.fromJson(JsonReader reader)"
                ]
            },
            "3bd67433a9294036c31bd22bf3a33060af501134": {
                "zipkin/src/main/java/zipkin/internal/Span2JsonCodec.java": [
                    "public Span2 zipkin.internal.Span2JsonCodec.fromJson(JsonReader reader)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ca0fc405b789434867b7382dcc3d0b6796b4382e",
        "previous_commit": "b7402d44ebd73232265b5daef05eff584f45f44e",
        "date": 1555906655,
        "releases": {
            "previous": "ca0fc405b789434867b7382dcc3d0b6796b4382e",
            "next": "ca0fc405b789434867b7382dcc3d0b6796b4382e"
        },
        "commit_message": "Inlines Elasticsearch autoconfiguration\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ca0fc405b789434867b7382dcc3d0b6796b4382e": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)"
                ]
            },
            "b7402d44ebd73232265b5daef05eff584f45f44e": {
                "zipkin-storage/elasticsearch/src/main/java/zipkin2/elasticsearch/ElasticsearchStorage.java": [
                    "CheckResult zipkin2.elasticsearch.ElasticsearchStorage.ensureClusterReady(String index)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1f349a9ab095c02ac45f2e3a51ef440930db1cc3",
        "previous_commit": "f43f1905d0d0fc057ba1da0631a6be9fab4d0e2d",
        "date": 1563098032,
        "releases": {
            "previous": "1f349a9ab095c02ac45f2e3a51ef440930db1cc3",
            "next": "1f349a9ab095c02ac45f2e3a51ef440930db1cc3"
        },
        "commit_message": "Close Cassandra storage during integration tests. (#2666)\n\n* Close Cassandra storage during integration tests.\r\n\r\n* Check null before cleaning nullable fields.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1f349a9ab095c02ac45f2e3a51ef440930db1cc3": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "void zipkin2.storage.cassandra.v1.CassandraSpanConsumer.clear()"
                ]
            },
            "f43f1905d0d0fc057ba1da0631a6be9fab4d0e2d": {
                "zipkin-storage/cassandra-v1/src/main/java/zipkin2/storage/cassandra/v1/CassandraSpanConsumer.java": [
                    "void zipkin2.storage.cassandra.v1.CassandraSpanConsumer.clear()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "70dc0218d43cdae244ffe19abb37b1ced8e99488",
        "previous_commit": "55094d356fb3c93026eca50079d1b7e9d34e5987",
        "date": 1528697010,
        "releases": {
            "previous": "70dc0218d43cdae244ffe19abb37b1ced8e99488",
            "next": "70dc0218d43cdae244ffe19abb37b1ced8e99488"
        },
        "commit_message": "zipkin-junit polish\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "70dc0218d43cdae244ffe19abb37b1ced8e99488": {
                "zipkin-junit/src/main/java/zipkin2/junit/ZipkinRule.java": [
                    "public MockResponse zipkin2.junit.ZipkinRule.peek()"
                ]
            },
            "55094d356fb3c93026eca50079d1b7e9d34e5987": {
                "zipkin-junit/src/main/java/zipkin2/junit/ZipkinRule.java": [
                    "public MockResponse zipkin2.junit.ZipkinRule.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "28bba9d6017b2ae2dee7a0c22cfc08338f0a38d2",
        "previous_commit": "a0e36c169dedd3451a757da18c9c492d965d984d",
        "date": 1458269669,
        "releases": {
            "previous": "28bba9d6017b2ae2dee7a0c22cfc08338f0a38d2",
            "next": "28bba9d6017b2ae2dee7a0c22cfc08338f0a38d2"
        },
        "commit_message": "Allows transport-kafka to consume JSON encoded spans\n\nBy allowing JSON encoded span lists as Kafka message values, we enable\nusers to send the same payload as they can over the http transport. It\nalso allows a very easy debug story, such as sending test spans via CLI.\n\nThis implementation peeks at the first byte in the Kafka message, and\nattempts to decode json, if it is a '[', or decimal 91. When using\nTBinaryProtocol (thrift) encoding, we know that the first byte will be\nthe Type, which is decimal <=16, so there's no risk of clash.\n\nSee https://github.com/openzipkin/zipkin/pull/1052\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "28bba9d6017b2ae2dee7a0c22cfc08338f0a38d2": {
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/SpansDecoder.java": [
                    "public List<Span> zipkin.kafka.SpansDecoder.fromBytes(byte[] bytes)"
                ]
            },
            "a0e36c169dedd3451a757da18c9c492d965d984d": {
                "zipkin-transports/kafka/src/main/java/zipkin/kafka/SpansDecoder.java": [
                    "public List<Span> zipkin.kafka.SpansDecoder.fromBytes(byte[] bytes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2b17d95f36d85deb137f70c19d63a9e3b71686ad",
        "previous_commit": "90342b4b5fa36ec844de4dd68ebe6ab74c5e142d",
        "date": 1473928737,
        "releases": {
            "previous": "2b17d95f36d85deb137f70c19d63a9e3b71686ad",
            "next": "2b17d95f36d85deb137f70c19d63a9e3b71686ad"
        },
        "commit_message": "Tolerates 128bit trace ids in ZipkinRule (#1299)\n\nSee #1298",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2b17d95f36d85deb137f70c19d63a9e3b71686ad": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ]
            },
            "90342b4b5fa36ec844de4dd68ebe6ab74c5e142d": {
                "zipkin-junit/src/main/java/zipkin/junit/ZipkinDispatcher.java": [
                    "public MockResponse zipkin.junit.ZipkinDispatcher.dispatch(RecordedRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "67bfda0d7cfc2a3fd7eee3223f47ab6685853552",
        "previous_commit": "91fb891ea26727aaedfb34b89cd550a4e5c624ed",
        "date": 1498292004,
        "releases": {
            "previous": "67bfda0d7cfc2a3fd7eee3223f47ab6685853552",
            "next": "67bfda0d7cfc2a3fd7eee3223f47ab6685853552"
        },
        "commit_message": "Moves the zipkin UI under the path /zipkin (#1627)\n\nThis moves the zipkin UI under the path /zipkin, adding a redirect for\r\n/ as well. As UI assets look for the api to be relative to it, requests\r\nto /zipkin/api are forwarded to /api, too.\r\n\r\nFixes #1229 #1452",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "67bfda0d7cfc2a3fd7eee3223f47ab6685853552": {
                "zipkin-autoconfigure/ui/src/main/java/zipkin/autoconfigure/ui/ZipkinUiAutoConfiguration.java": [
                    "public ResponseEntity<ZipkinUiProperties> zipkin.autoconfigure.ui.ZipkinUiAutoConfiguration.serveUiConfig()"
                ]
            },
            "91fb891ea26727aaedfb34b89cd550a4e5c624ed": {
                "zipkin-autoconfigure/ui/src/main/java/zipkin/autoconfigure/ui/ZipkinUiAutoConfiguration.java": [
                    "public ResponseEntity<ZipkinUiProperties> zipkin.autoconfigure.ui.ZipkinUiAutoConfiguration.serveUiConfig()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1d0b8b75327428f742ad46515a7eaa5e3c003e43",
        "previous_commit": "a129e3b1bc651b6e7b6beac64c4d72dcc9d9a18b",
        "date": 1483578729,
        "releases": {
            "previous": "1d0b8b75327428f742ad46515a7eaa5e3c003e43",
            "next": "1d0b8b75327428f742ad46515a7eaa5e3c003e43"
        },
        "commit_message": "Clock skew correction is not propagated to more than one level of local span. (#1470)\n\nSince local spans share the same clock skew as the server they are running on, we need to propagate to children.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1d0b8b75327428f742ad46515a7eaa5e3c003e43": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static void zipkin.internal.CorrectForClockSkew.adjust(Node<Span> node, @Nullable ClockSkew skewFromParent)"
                ]
            },
            "a129e3b1bc651b6e7b6beac64c4d72dcc9d9a18b": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static void zipkin.internal.CorrectForClockSkew.adjust(Node<Span> node, @Nullable ClockSkew skewFromParent)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bdac34217878224d84203e9d030539c218337618",
        "previous_commit": "9bf49aa7f77ea3eea894626439a38465786e9d90",
        "date": 1505834112,
        "releases": {
            "previous": "bdac34217878224d84203e9d030539c218337618",
            "next": "bdac34217878224d84203e9d030539c218337618"
        },
        "commit_message": "Logs and skips null trace data when linking\n\nThis is better than crashing, and can help us understand what\ndata problems might exist.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bdac34217878224d84203e9d030539c218337618": {
                "zipkin2/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin2.internal.DependencyLinker.putTrace(Iterator<Span> spans)"
                ]
            },
            "9bf49aa7f77ea3eea894626439a38465786e9d90": {
                "zipkin2/src/main/java/zipkin2/internal/DependencyLinker.java": [
                    "public DependencyLinker zipkin2.internal.DependencyLinker.putTrace(Iterator<Span> spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "af6f97d73bf0fed3e1dae8f53c6f489ab233de1a",
        "previous_commit": "39d76851eaa1018ac20a9ee8c60ff5f99d71cf38",
        "date": 1533431453,
        "releases": {
            "previous": "af6f97d73bf0fed3e1dae8f53c6f489ab233de1a",
            "next": "af6f97d73bf0fed3e1dae8f53c6f489ab233de1a"
        },
        "commit_message": "Accept a Cassandra running 3.11.3 as well as later\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "af6f97d73bf0fed3e1dae8f53c6f489ab233de1a": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, Session session)"
                ]
            },
            "39d76851eaa1018ac20a9ee8c60ff5f99d71cf38": {
                "zipkin-storage/cassandra/src/main/java/zipkin2/storage/cassandra/Schema.java": [
                    "static KeyspaceMetadata zipkin2.storage.cassandra.Schema.ensureExists(String keyspace, boolean searchEnabled, Session session)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "483f78ed3546b3d28e2555c50381eebf67bbf82d",
        "previous_commit": "ad90718c12847c7f639aae9be26f2816dfa5718b",
        "date": 1484129303,
        "releases": {
            "previous": "483f78ed3546b3d28e2555c50381eebf67bbf82d",
            "next": "483f78ed3546b3d28e2555c50381eebf67bbf82d"
        },
        "commit_message": "Kicks out instead of correcting skew on single-host spans (#1483)\n\nAn instrumentation glitch can look like clock skew. This kicks out when\r\nRPC annotations all belong to the same host.\r\n\r\nThis also backfills tests.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "483f78ed3546b3d28e2555c50381eebf67bbf82d": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static ClockSkew zipkin.internal.CorrectForClockSkew.getClockSkew(Span span)"
                ]
            },
            "ad90718c12847c7f639aae9be26f2816dfa5718b": {
                "zipkin/src/main/java/zipkin/internal/CorrectForClockSkew.java": [
                    "static ClockSkew zipkin.internal.CorrectForClockSkew.getClockSkew(Span span)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9d1c94b9ded7a316140d694866eda25ec98bee97",
        "previous_commit": "f21f6cce5fd1eb74e60419571ee65fdbe2b4ff66",
        "date": 1524754817,
        "releases": {
            "previous": "9d1c94b9ded7a316140d694866eda25ec98bee97",
            "next": "9d1c94b9ded7a316140d694866eda25ec98bee97"
        },
        "commit_message": "Fixes metrics tests\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9d1c94b9ded7a316140d694866eda25ec98bee97": {
                "zipkin-server/src/main/java/zipkin/server/internal/MetricsHealthController.java": [
                    "public Map zipkin.server.internal.MetricsHealthController.getHealth()"
                ]
            },
            "f21f6cce5fd1eb74e60419571ee65fdbe2b4ff66": {
                "zipkin-server/src/main/java/zipkin/server/internal/MetricsHealthController.java": [
                    "public Map zipkin.server.internal.MetricsHealthController.getHealth()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9b88d127029382eaaca836bc325428722fbf0c24",
        "previous_commit": "d49bb9d15479c032df19fb706562abf56dceeab3",
        "date": 1511449575,
        "releases": {
            "previous": "9b88d127029382eaaca836bc325428722fbf0c24",
            "next": "9b88d127029382eaaca836bc325428722fbf0c24"
        },
        "commit_message": "Rewrites http collector to undertow\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9b88d127029382eaaca836bc325428722fbf0c24": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java": [
                    "public void zipkin.server.ZipkinHttpCollector.onError(Throwable t)"
                ]
            },
            "d49bb9d15479c032df19fb706562abf56dceeab3": {
                "zipkin-server/src/main/java/zipkin/server/ZipkinHttpCollector.java": [
                    "public void zipkin.server.ZipkinHttpCollector.onError(Throwable t)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8d97ad6eacdcd9d718c7325a4beaee48c54b3111",
        "previous_commit": "d9e81a8d27e9a8d2489d30416bcb964c3ad53edf",
        "date": 1553213330,
        "releases": {
            "previous": "8d97ad6eacdcd9d718c7325a4beaee48c54b3111",
            "next": "8d97ad6eacdcd9d718c7325a4beaee48c54b3111"
        },
        "commit_message": "Fix /metrics reporting wrong values (#2462)\n\nMultiple metrics can have the same name with different tag values, so looking up the metric by name was giving the wrong value sometimes before.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8d97ad6eacdcd9d718c7325a4beaee48c54b3111": {
                "zipkin-server/src/main/java/zipkin2/server/internal/MetricsHealthController.java": [
                    "public ObjectNode zipkin2.server.internal.MetricsHealthController.fetchMetricsFromMicrometer()"
                ]
            },
            "d9e81a8d27e9a8d2489d30416bcb964c3ad53edf": {
                "zipkin-server/src/main/java/zipkin2/server/internal/MetricsHealthController.java": [
                    "public ObjectNode zipkin2.server.internal.MetricsHealthController.fetchMetricsFromMicrometer()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b2b86267d0cfe7d37bcf89ae7e66118fae76836f",
        "previous_commit": "65f8cfbf957e1f1ca10aad621ceabefd34e5a891",
        "date": 1563960425,
        "releases": {
            "previous": "b2b86267d0cfe7d37bcf89ae7e66118fae76836f",
            "next": "b2b86267d0cfe7d37bcf89ae7e66118fae76836f"
        },
        "commit_message": "Migrate storage IT to JUnit5 (#2705)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b2b86267d0cfe7d37bcf89ae7e66118fae76836f": {
                "zipkin-tests/src/main/java/zipkin2/storage/ITDependencies.java": [],
                "zipkin-tests/src/main/java/zipkin2/storage/ITSearchEnabledFalse.java": [],
                "zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java": [],
                "zipkin-tests/src/main/java/zipkin2/storage/ITSpanStore.java": [],
                "zipkin-tests/src/main/java/zipkin2/storage/ITStrictTraceIdFalse.java": []
            },
            "65f8cfbf957e1f1ca10aad621ceabefd34e5a891": {
                "zipkin-tests/src/main/java/zipkin2/storage/ITDependencies.java": [
                    "protected void zipkin2.storage.ITDependencies.processDependencies(List<Span> spans)"
                ],
                "zipkin-tests/src/main/java/zipkin2/storage/ITSearchEnabledFalse.java": [
                    "protected void zipkin2.storage.ITSearchEnabledFalse.accept(Span... spans)"
                ],
                "zipkin-tests/src/main/java/zipkin2/storage/ITServiceAndSpanNames.java": [
                    "public void zipkin2.storage.ITServiceAndSpanNames.getSpanNames_serviceNameGoesLowercase()",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getLocalServiceNames_noServiceName()",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getSpanNames_allReturned()",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getRemoteServiceNames_serviceNameGoesLowercase()",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getSpanNames()",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getLocalServiceNames_includesLocalServiceName()",
                    "protected void zipkin2.storage.ITServiceAndSpanNames.accept(List<Span> spans)",
                    "protected void zipkin2.storage.ITServiceAndSpanNames.accept(Span... spans)",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getRemoteServiceNames_allReturned()",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getRemoteServiceNames()",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getRemoteServiceNames_dedupes()",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getSpanNames_doesNotMapNameToRemoteServiceName()",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getSpanNames_dedupes()",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getSpanNames_noSpanName()",
                    "public void zipkin2.storage.ITServiceAndSpanNames.getRemoteServiceNames_noRemoteServiceName()"
                ],
                "zipkin-tests/src/main/java/zipkin2/storage/ITSpanStore.java": [
                    "protected void zipkin2.storage.ITSpanStore.accept(Span... spans)",
                    "public void zipkin2.storage.ITSpanStore.consumer_properlyImplementsCallContract_submit()",
                    "public void zipkin2.storage.ITSpanStore.consumer_properlyImplementsCallContract_execute()",
                    "protected void zipkin2.storage.ITSpanStore.accept(List<Span> spans)"
                ],
                "zipkin-tests/src/main/java/zipkin2/storage/ITStrictTraceIdFalse.java": [
                    "public void zipkin2.storage.ITStrictTraceIdFalse.getTraces_128BitTraceId()",
                    "public void zipkin2.storage.ITStrictTraceIdFalse.getTrace_retrievesBy64Or128BitTraceId()",
                    "void zipkin2.storage.ITStrictTraceIdFalse.accept(Span... spans)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    }
]