[
    {
        "commit": "0b925639003723e24f25cf7eddb8d1ce846e434a",
        "previous_commit": "a127a1167969741fa71b6438851113ae9f6eddb9",
        "date": 1619564006,
        "releases": {
            "previous": "0b925639003723e24f25cf7eddb8d1ce846e434a",
            "next": "0b925639003723e24f25cf7eddb8d1ce846e434a"
        },
        "commit_message": "Add zero cost assertions to UnsafeMemory\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0b925639003723e24f25cf7eddb8d1ce846e434a": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public short net.openhft.chronicle.core.UnsafeMemory.readVolatileShort(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(long address, int i32)",
                    "public static <T> T net.openhft.chronicle.core.UnsafeMemory.unsafeGetObject(@NotNull Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutFloat(@NotNull Object obj, long offset, float value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(@NotNull Object obj, long offset, long value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(long address, long value)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readVolatileFloat(@NotNull Object object, long offset)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readVolatileDouble(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileFloat(@NotNull Object object, long offset, float f)",
                    "void net.openhft.chronicle.core.UnsafeMemory.copyMemory0(Object from, long fromOffset, Object to, long toOffset, long length)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(@NotNull Object object, long offset)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readInt(long address)",
                    "public static boolean net.openhft.chronicle.core.UnsafeMemory.unsafeGetBoolean(@NotNull Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(long address, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(@NotNull Object object, long offset, long i)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(long address)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeShort(long address, short i16)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutShort(@NotNull Object obj, long offset, short value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, Object obj2, long offset2, int length)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readShort(long address)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.copyMemoryLoop(Object o, long offset, Object o2, long offset2, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeLong(long address, long i64)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long fromAddress, Object obj2, long offset2, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(long address, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeInt(@NotNull Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(long addr, long value, int length)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeShort(@NotNull Object object, long offset, short i16)",
                    "public static long net.openhft.chronicle.core.UnsafeMemory.unsafeObjectFieldOffset(Field field)",
                    "public <T> T net.openhft.chronicle.core.UnsafeMemory.getObject(@NotNull Object object, long offset)",
                    "private static long net.openhft.chronicle.core.UnsafeMemory.retryReadVolatileLong(long address, long value)",
                    "public static double net.openhft.chronicle.core.UnsafeMemory.unsafeGetDouble(@NotNull Object obj, long offset)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(long address, long expected, long value)",
                    "private static int net.openhft.chronicle.core.UnsafeMemory.retryReadVolatileInt(long address, int value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutChar(@NotNull Object obj, long offset, char value)",
                    "public static int net.openhft.chronicle.core.UnsafeMemory.unsafeGetInt(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(@NotNull Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileByte(@NotNull Object object, long offset, byte b)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(byte[] bytes, int offset, long value, int length)",
                    "public static char net.openhft.chronicle.core.UnsafeMemory.unsafeGetChar(@NotNull Object obj, long offset)",
                    "public static long net.openhft.chronicle.core.UnsafeMemory.unsafeGetLong(@NotNull Object obj, long offset)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readVolatileByte(@NotNull Object object, long offset)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readVolatileFloat(long address)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.getFieldOffset(Field field)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(byte[] bytes, int offset, int value)",
                    "public static byte net.openhft.chronicle.core.UnsafeMemory.unsafeGetByte(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(long address, double d)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(long address)",
                    "public static byte net.openhft.chronicle.core.UnsafeMemory.unsafeGetByte(@NotNull Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(byte[] bytes, int offset, long value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileShort(long address, short i16)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeFloat(@NotNull Object object, long offset, float f)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(@NotNull Object object, long offset, int increment)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.setMemory(long address, long size, byte b)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(Object o, long offset, Object o2, long offset2, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(long address, byte value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileByte(long address, byte b)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long from, long to, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(char[] chars, int offset, int length)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.partialRead(long addr, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeBytes(long address, byte[] b, int offset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeByte(long address, byte b)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readVolatileDouble(long address)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(long address, int expected, int value)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(@NotNull Object object, long offset, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, long address, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeByte(@NotNull Object object, long offset, byte b)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeFloat(long address, float f)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileFloat(long address, float f)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeLong(@NotNull Object object, long offset, long i64)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(long address, int increment)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copy8bit(String s, int start, int length, long addr)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileShort(@NotNull Object object, long offset, short i16)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.addLong(@NotNull Object object, long offset, long increment)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.addLong(long address, long increment)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(@NotNull Object object, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(@NotNull Object object, long offset, int expected, int value)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(@NotNull Object object, long offset, long expected, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(long address, long i64)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.putInt(byte[] bytes, int offset, int value)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.backwardCopyMemoryLoop(Object o, long offset, Object o2, long offset2, int length)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(long address)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readVolatileShort(long address)",
                    "public static float net.openhft.chronicle.core.UnsafeMemory.unsafeGetFloat(@NotNull Object obj, long offset)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(@NotNull Object object, long offset)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(@NotNull Object object, long offset)",
                    "public static long net.openhft.chronicle.core.UnsafeMemory.unsafeGetLong(long address)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(byte[] bytes, int offset, byte value)",
                    "public <E> E net.openhft.chronicle.core.UnsafeMemory.allocateInstance(Class<? extends E> clazz)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long fromAddress, long address, long length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(long address, int i32)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readInt(@NotNull Object object, long offset)",
                    "public static short net.openhft.chronicle.core.UnsafeMemory.unsafeGetShort(@NotNull Object obj, long offset)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.partialRead(byte[] bytes, int offset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(@NotNull Object obj, long offset, byte value)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(byte[] bytes, int offset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutDouble(@NotNull Object obj, long offset, double value)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(@NotNull Object object, long offset)",
                    "public static int net.openhft.chronicle.core.UnsafeMemory.unsafeGetInt(@NotNull Object obj, long offset)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readShort(@NotNull Object object, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutBoolean(@NotNull Object obj, long offset, boolean value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.readBytes(long address, byte[] b, long offset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, byte[] obj2, int offset2, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileDouble(long address, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileDouble(@NotNull Object object, long offset, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(long address, long i)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(@NotNull Object object, long offset, long i64)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(long address, long offset, int expected, int value)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readVolatileByte(long address)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutObject(@NotNull Object obj, long offset, Object value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.setInt(@NotNull Object object, long offset, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(@NotNull Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.freeMemory(long address, long size)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(@NotNull Object obj, long offset, int value)"
                ]
            },
            "a127a1167969741fa71b6438851113ae9f6eddb9": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public short net.openhft.chronicle.core.UnsafeMemory.readVolatileShort(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(long address, int i32)",
                    "public static <T> T net.openhft.chronicle.core.UnsafeMemory.unsafeGetObject(@NotNull Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutFloat(@NotNull Object obj, long offset, float value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(@NotNull Object obj, long offset, long value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(long address, long value)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readVolatileFloat(@NotNull Object object, long offset)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readVolatileDouble(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileFloat(@NotNull Object object, long offset, float f)",
                    "void net.openhft.chronicle.core.UnsafeMemory.copyMemory0(Object from, long fromOffset, Object to, long toOffset, long length)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(@NotNull Object object, long offset)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readInt(long address)",
                    "public static boolean net.openhft.chronicle.core.UnsafeMemory.unsafeGetBoolean(@NotNull Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(long address, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(@NotNull Object object, long offset, long i)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(long address)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeShort(long address, short i16)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutShort(@NotNull Object obj, long offset, short value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, Object obj2, long offset2, int length)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readShort(long address)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.copyMemoryLoop(Object o, long offset, Object o2, long offset2, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeLong(long address, long i64)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long fromAddress, Object obj2, long offset2, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(long address, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeInt(@NotNull Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(long addr, long value, int length)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeShort(@NotNull Object object, long offset, short i16)",
                    "public static long net.openhft.chronicle.core.UnsafeMemory.unsafeObjectFieldOffset(Field field)",
                    "public <T> T net.openhft.chronicle.core.UnsafeMemory.getObject(@NotNull Object object, long offset)",
                    "private static long net.openhft.chronicle.core.UnsafeMemory.retryReadVolatileLong(long address, long value)",
                    "public static double net.openhft.chronicle.core.UnsafeMemory.unsafeGetDouble(@NotNull Object obj, long offset)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(long address, long expected, long value)",
                    "private static int net.openhft.chronicle.core.UnsafeMemory.retryReadVolatileInt(long address, int value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutChar(@NotNull Object obj, long offset, char value)",
                    "public static int net.openhft.chronicle.core.UnsafeMemory.unsafeGetInt(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(@NotNull Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileByte(@NotNull Object object, long offset, byte b)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(byte[] bytes, int offset, long value, int length)",
                    "public static char net.openhft.chronicle.core.UnsafeMemory.unsafeGetChar(@NotNull Object obj, long offset)",
                    "public static long net.openhft.chronicle.core.UnsafeMemory.unsafeGetLong(@NotNull Object obj, long offset)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readVolatileByte(@NotNull Object object, long offset)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readVolatileFloat(long address)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.getFieldOffset(Field field)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(byte[] bytes, int offset, int value)",
                    "public static byte net.openhft.chronicle.core.UnsafeMemory.unsafeGetByte(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(long address, double d)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(long address)",
                    "public static byte net.openhft.chronicle.core.UnsafeMemory.unsafeGetByte(@NotNull Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(byte[] bytes, int offset, long value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileShort(long address, short i16)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeFloat(@NotNull Object object, long offset, float f)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(@NotNull Object object, long offset, int increment)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.setMemory(long address, long size, byte b)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(Object o, long offset, Object o2, long offset2, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(long address, byte value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileByte(long address, byte b)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long from, long to, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(char[] chars, int offset, int length)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.partialRead(long addr, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeBytes(long address, byte[] b, int offset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeByte(long address, byte b)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readVolatileDouble(long address)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(long address, int expected, int value)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(@NotNull Object object, long offset, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, long address, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeByte(@NotNull Object object, long offset, byte b)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeFloat(long address, float f)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileFloat(long address, float f)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeLong(@NotNull Object object, long offset, long i64)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(long address, int increment)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copy8bit(String s, int start, int length, long addr)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileShort(@NotNull Object object, long offset, short i16)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.addLong(@NotNull Object object, long offset, long increment)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.addLong(long address, long increment)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(@NotNull Object object, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(@NotNull Object object, long offset, int expected, int value)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(@NotNull Object object, long offset, long expected, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(long address, long i64)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.putInt(byte[] bytes, int offset, int value)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.backwardCopyMemoryLoop(Object o, long offset, Object o2, long offset2, int length)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(long address)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readVolatileShort(long address)",
                    "public static float net.openhft.chronicle.core.UnsafeMemory.unsafeGetFloat(@NotNull Object obj, long offset)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(@NotNull Object object, long offset)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(@NotNull Object object, long offset)",
                    "public static long net.openhft.chronicle.core.UnsafeMemory.unsafeGetLong(long address)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(byte[] bytes, int offset, byte value)",
                    "public <E> E net.openhft.chronicle.core.UnsafeMemory.allocateInstance(Class<? extends E> clazz)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long fromAddress, long address, long length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(long address, int i32)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readInt(@NotNull Object object, long offset)",
                    "public static short net.openhft.chronicle.core.UnsafeMemory.unsafeGetShort(@NotNull Object obj, long offset)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.partialRead(byte[] bytes, int offset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(@NotNull Object obj, long offset, byte value)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(byte[] bytes, int offset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutDouble(@NotNull Object obj, long offset, double value)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(@NotNull Object object, long offset)",
                    "public static int net.openhft.chronicle.core.UnsafeMemory.unsafeGetInt(@NotNull Object obj, long offset)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readShort(@NotNull Object object, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutBoolean(@NotNull Object obj, long offset, boolean value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.readBytes(long address, byte[] b, long offset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, byte[] obj2, int offset2, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileDouble(long address, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileDouble(@NotNull Object object, long offset, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(long address, long i)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(@NotNull Object object, long offset, long i64)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(long address, long offset, int expected, int value)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readVolatileByte(long address)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutObject(@NotNull Object obj, long offset, Object value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.setInt(@NotNull Object object, long offset, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(@NotNull Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.freeMemory(long address, long size)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(@NotNull Object obj, long offset, int value)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c88fd196f6ab93d8f051dd557edd58ef53bc1b1b",
        "previous_commit": "ca326a5fb204d510e26ea60ea412238d28eefe7f",
        "date": 1716914555,
        "releases": {
            "previous": "c88fd196f6ab93d8f051dd557edd58ef53bc1b1b",
            "next": "c88fd196f6ab93d8f051dd557edd58ef53bc1b1b"
        },
        "commit_message": "X.26 (#638)\n\n* Initial branch of x.26\r\n\r\n* Error on deprecated cleanup (#637)\r\n\r\n* Review deprecated methods, change build to error on deprecation\r\n\r\n* Fix compilation on Java 21\r\n\r\n* revert\r\n\r\n* Move ByteBuffers to bytes.internal\r\n\r\n* Deprecate due x.26\r\n\r\n* restore UnsafeMemory.copyMemory\r\n\r\n* Remove se.eris.notnull.instrument\r\n\r\n* Use a common configuration for the compiler-plugin where deprecation \u2026 (#639)\r\n\r\n* Use a common configuration for the compiler-plugin where deprecation warnings cause the build to fail\r\n\r\n* Remove annotation processor that is more confusing than useful (and often turned off)\r\n\r\n* sun.misc.Unsafe usage produces a warning\r\n\r\n* review with lint:all (#641)\r\n\r\n* Tidy up compiler setting and some warnings\r\n\r\n* Revert changes to Jvm.parseSize\r\n\r\n* Consolidate references to Thread.currentThread.getId()\r\n\r\n* Add uncheckedCast to Jvm\r\n\r\n* Add uncheckedCast to Jvm\r\n\r\n* Fix deprecated methods/classes in Core (#642)\r\n\r\n* Fix deprecated methods/classes in Core\r\n\r\n* Add -Xlint:all,-options as default compiler\r\n\r\n* Tidy up code base\r\n\r\n* resolve Javadoc issues\r\n\r\n* Added fail on warning lint for Javadoc, and rawtypes fixes for Bytes (#648)\r\n\r\n* review with lint:all (#641)\r\n\r\n* Fix javadoc issues\r\n\r\n* Fix a rounding error\r\n\r\n* Javadoc fixes from x.26 (#650)\r\n\r\n* Deprecate due x.26\r\n\r\n* Remove se.eris.notnull.instrument\r\n\r\n* resolve Javadoc issues\r\n\r\n* Fix Javadoc formatting\r\n\r\n* Fix test after merge\r\n\r\n* Fix warnings following rebase with develop\r\n\r\n* Fix warnings following rebase with develop\r\n\r\n* Fix newlines\r\n\r\n* </p> tag in javadoc not allowed\r\n\r\n* Flaky test (#653)\r\n\r\n* Give more time for bg thread in flaky test\r\n\r\n* Give more time for bg thread in flaky test\r\n\r\n* Core/issues/656 (#657)\r\n\r\n* don't use reflection and recursion in IOTools.unmonitor\r\n\r\n* Using reflection to unmonitor a reference results in errors in Java 17 Fixes #656\r\n\r\n* Using reflection to unmonitor a reference results in errors in Java 17 Fixes https://github.com/OpenHFT/Chronicle-Core/issues/656\r\n\r\n* Using reflection to unmonitor a reference results in errors in Java 17 Fixes https://github.com/OpenHFT/Chronicle-Core/issues/656\r\n\r\n---------\r\n\r\nCo-authored-by: Jerry Shea <jerry.shea@chronicle.software>\r\n\r\n* Recover from java21 failure (#658)\r\n\r\n* Recover from failure on Java21 as mockito isn't supported.\r\n\r\n* Recover from failure on Java21 as mockito isn't supported.\r\n\r\n* review with lint:all (#641)\r\n\r\n* Tidy up compiler setting and some warnings\r\n\r\n* Merge with develop\r\n\r\n* Merge with develop\r\n\r\n* Tidy up compiler setting and some warnings\r\n\r\n* remove duplicate\r\n\r\n* parent poms -> x.26.0\r\n\r\n* Where marked for removal, also mark for deprecation\r\n\r\n* Allow for aarch64 CPUs\r\n\r\n* This class was left here for backward compatibility.\r\n\r\n---------\r\n\r\nCo-authored-by: Peter Lawrey <peter.lawrey@chronicle.software>\r\nCo-authored-by: Jerry Shea <jerry.shea@chronicle.software>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c88fd196f6ab93d8f051dd557edd58ef53bc1b1b": {
                "src/main/java/net/openhft/chronicle/core/ChronicleInit.java": [
                    "static void net.openhft.chronicle.core.ChronicleInit.postInit()"
                ],
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void net.openhft.chronicle.core.Jvm.doNotCloseOnInterrupt9(final Class<?> clazz, final FileChannel fc)",
                    "public static <V> V net.openhft.chronicle.core.Jvm.getValue(@NotNull Object target, @NotNull final String fieldName)",
                    "public static long net.openhft.chronicle.core.Jvm.parseSize(@NotNull String value)"
                ],
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long net.openhft.chronicle.core.OS.mapAlign(long offset, int pageAlignment)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(Object object, long offset)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.getAndSetInt(Object object, long offset, int value)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(Object object, long offset)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readShort(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] src, int srcOffset, byte[] dest, int destOffset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutFloat(Object obj, long offset, float value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutShort(Object obj, long offset, short value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileFloat(Object object, long offset, float f)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeInt(Object object, long offset, int i32)",
                    "public static double net.openhft.chronicle.core.UnsafeMemory.unsafeGetDouble(Object obj, long offset)",
                    "public static <T> T net.openhft.chronicle.core.UnsafeMemory.unsafeGetObject(Object obj, long offset)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(Object object, long offset, int expected, int value)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.backwardCopyMemoryLoop(Object src, long srcOffset, Object dest, long destOffset, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(long address, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(Object obj, long offset, byte value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(long addr, long value, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileByte(Object object, long offset, byte b)",
                    "public static long net.openhft.chronicle.core.UnsafeMemory.unsafeObjectFieldOffset(Field field)",
                    "public <T> T net.openhft.chronicle.core.UnsafeMemory.getObject(@NotNull Object object, long offset)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readVolatileDouble(Object object, long offset)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readVolatileShort(Object object, long offset)",
                    "public static long net.openhft.chronicle.core.UnsafeMemory.unsafeGetLong(Object obj, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(Object object, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long srcAddress, @Nullable Object dest, long destOffset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(byte[] bytes, int offset, long value, int length)",
                    "public static short net.openhft.chronicle.core.UnsafeMemory.unsafeGetShort(Object obj, long offset)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readVolatileFloat(Object object, long offset)",
                    "void net.openhft.chronicle.core.UnsafeMemory.copyMemory0(@Nullable Object src, long srcOffset, @Nullable Object dest, long destOffset, long length)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.getFieldOffset(Field field)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(Object object, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(byte[] bytes, int offset, int value)",
                    "public static byte net.openhft.chronicle.core.UnsafeMemory.unsafeGetByte(Object obj, long offset)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(Object object, long offset, int increment)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.putObject(@NotNull Object object, long offset, Object value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutDouble(Object obj, long offset, double value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeFloat(Object object, long offset, float f)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(Object object, long offset, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeShort(Object object, long offset, short i16)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(byte[] bytes, int offset, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long srcAddress, long destAddress, long length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutObject(Object obj, long offset, Object value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.setMemory(long address, long size, byte b)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(Object obj, long offset, int value)",
                    "public static int net.openhft.chronicle.core.UnsafeMemory.unsafeGetInt(Object obj, long offset)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(char[] chars, int offset, int length)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.partialRead(long addr, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeBytes(long address, byte[] b, int offset, int length)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(Object object, long offset)",
                    "public static char net.openhft.chronicle.core.UnsafeMemory.unsafeGetChar(Object obj, long offset)",
                    "public static float net.openhft.chronicle.core.UnsafeMemory.unsafeGetFloat(Object obj, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeByte(Object object, long offset, byte b)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copy8bit(String s, int start, int length, long addr)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeLong(Object object, long offset, long i64)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(@Nullable Object src, long srcOffset, @Nullable Object dest, long destOffset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutBoolean(Object obj, long offset, boolean value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.putInt(byte[] bytes, int offset, int value)",
                    "public static boolean net.openhft.chronicle.core.UnsafeMemory.unsafeGetBoolean(Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(byte[] bytes, int offset, byte value)",
                    "public <E> E net.openhft.chronicle.core.UnsafeMemory.allocateInstance(Class<? extends E> clazz)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.partialRead(byte[] bytes, int offset, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(byte[] bytes, int offset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutChar(Object obj, long offset, char value)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(Object object, long offset, long i)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readInt(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileDouble(Object object, long offset, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.readBytes(long address, byte[] b, long offset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(Object object, long offset, long i64)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(Object obj, long offset, long value)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(Object object, long offset, long expected, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(long address, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileShort(Object object, long offset, short i16)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.setMemory(Object o, long offset, long size, byte b)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readVolatileByte(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.freeMemory(long address, long size)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/CloseableUtils.java": [
                    "public static void net.openhft.chronicle.core.internal.CloseableUtils.gcAndWaitForCloseablesToClose()",
                    "static void net.openhft.chronicle.core.internal.CloseableUtils.closeQuietly(@Nullable Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/ReflectionUtil.java": [
                    "public static <T> T net.openhft.chronicle.core.internal.analytics.ReflectionUtil.reflectiveProxy(@NotNull final Class<T> interf, @NotNull final Object delegate)",
                    "public static <T> T net.openhft.chronicle.core.internal.analytics.ReflectionUtil.reflectiveProxy(@NotNull final Class<T> interf, @NotNull final Object delegate, final boolean returnProxy)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/pom/InternalPomProperties.java": [
                    "public static Properties net.openhft.chronicle.core.internal.pom.InternalPomProperties.create(final String groupId, final String artifactId)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private ClassAliasPool net.openhft.chronicle.core.pool.ClassAliasPool.defaultAliases()"
                ],
                "src/main/java/net/openhft/chronicle/core/shutdown/PriorityHook.java": [
                    "public static synchronized <H extends Hooklet> H net.openhft.chronicle.core.shutdown.PriorityHook.addAndGet(H hooklet)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "private static void net.openhft.chronicle.core.threads.CleaningThread.scanReferences(CleaningThreadLocal<?> ctl, WeakReference<?>[] table, Object o, Method remove)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.set(T value)",
                    "public static void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanupNonCleaningThreads()",
                    "public void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.remove()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/AbstractInvocationHandler.java": [
                    "private static MethodHandles.Lookup net.openhft.chronicle.core.util.AbstractInvocationHandler.acquireLookup(Class<?> c)",
                    "public final Object net.openhft.chronicle.core.util.AbstractInvocationHandler.invoke(Object proxy, Method method, Object[] args)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/GenericReflection.java": [
                    "static Type getGenericSuperclass(Type forClass)",
                    "public static Class<?> erase(Type type)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Ints.java": [
                    "public static int net.openhft.chronicle.core.util.Ints.requireNonNegative(final int value)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Longs.java": [
                    "public static long net.openhft.chronicle.core.util.Longs.requireNonNegative(final long value)",
                    "public static long net.openhft.chronicle.core.util.Longs.requirePositive(final long value)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.util.Mocker.intercepting(@NotNull Class<T> interfaceType, @NotNull BiConsumer<String, Object[]> consumer, T t)",
                    "public static <T> T net.openhft.chronicle.core.util.Mocker.ignored(@NotNull Class<T> interfaceType, Class<?>... additional)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "static <E> E net.openhft.chronicle.core.util.ObjectUtils.convertTo0(Class<E> eClass, @Nullable Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ReadResolvable.java": [
                    "static <T> T readResolve(Object o)"
                ]
            },
            "ca326a5fb204d510e26ea60ea412238d28eefe7f": {
                "src/main/java/net/openhft/chronicle/core/ChronicleInit.java": [
                    "static void net.openhft.chronicle.core.ChronicleInit.postInit()"
                ],
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void net.openhft.chronicle.core.Jvm.doNotCloseOnInterrupt9(final Class<?> clazz, final FileChannel fc)",
                    "public static <V> V net.openhft.chronicle.core.Jvm.getValue(@NotNull Object target, @NotNull final String fieldName)",
                    "public static long net.openhft.chronicle.core.Jvm.parseSize(@NotNull String value)"
                ],
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long net.openhft.chronicle.core.OS.mapAlign(long offset, int pageAlignment)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(Object object, long offset)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.getAndSetInt(Object object, long offset, int value)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(Object object, long offset)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readShort(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] src, int srcOffset, byte[] dest, int destOffset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutFloat(Object obj, long offset, float value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutShort(Object obj, long offset, short value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileFloat(Object object, long offset, float f)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeInt(Object object, long offset, int i32)",
                    "public static double net.openhft.chronicle.core.UnsafeMemory.unsafeGetDouble(Object obj, long offset)",
                    "public static <T> T net.openhft.chronicle.core.UnsafeMemory.unsafeGetObject(Object obj, long offset)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(Object object, long offset, int expected, int value)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.backwardCopyMemoryLoop(Object src, long srcOffset, Object dest, long destOffset, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(long address, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(Object obj, long offset, byte value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(long addr, long value, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileByte(Object object, long offset, byte b)",
                    "public static long net.openhft.chronicle.core.UnsafeMemory.unsafeObjectFieldOffset(Field field)",
                    "public <T> T net.openhft.chronicle.core.UnsafeMemory.getObject(@NotNull Object object, long offset)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readVolatileDouble(Object object, long offset)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readVolatileShort(Object object, long offset)",
                    "public static long net.openhft.chronicle.core.UnsafeMemory.unsafeGetLong(Object obj, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(Object object, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long srcAddress, @Nullable Object dest, long destOffset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(byte[] bytes, int offset, long value, int length)",
                    "public static short net.openhft.chronicle.core.UnsafeMemory.unsafeGetShort(Object obj, long offset)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readVolatileFloat(Object object, long offset)",
                    "void net.openhft.chronicle.core.UnsafeMemory.copyMemory0(@Nullable Object src, long srcOffset, @Nullable Object dest, long destOffset, long length)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.getFieldOffset(Field field)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(Object object, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(byte[] bytes, int offset, int value)",
                    "public static byte net.openhft.chronicle.core.UnsafeMemory.unsafeGetByte(Object obj, long offset)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(Object object, long offset, int increment)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.putObject(@NotNull Object object, long offset, Object value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutDouble(Object obj, long offset, double value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeFloat(Object object, long offset, float f)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(Object object, long offset, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeShort(Object object, long offset, short i16)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(byte[] bytes, int offset, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long srcAddress, long destAddress, long length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutObject(Object obj, long offset, Object value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.setMemory(long address, long size, byte b)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(Object obj, long offset, int value)",
                    "public static int net.openhft.chronicle.core.UnsafeMemory.unsafeGetInt(Object obj, long offset)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(char[] chars, int offset, int length)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.partialRead(long addr, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeBytes(long address, byte[] b, int offset, int length)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(Object object, long offset)",
                    "public static char net.openhft.chronicle.core.UnsafeMemory.unsafeGetChar(Object obj, long offset)",
                    "public static float net.openhft.chronicle.core.UnsafeMemory.unsafeGetFloat(Object obj, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeByte(Object object, long offset, byte b)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copy8bit(String s, int start, int length, long addr)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeLong(Object object, long offset, long i64)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(@Nullable Object src, long srcOffset, @Nullable Object dest, long destOffset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutBoolean(Object obj, long offset, boolean value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.putInt(byte[] bytes, int offset, int value)",
                    "public static boolean net.openhft.chronicle.core.UnsafeMemory.unsafeGetBoolean(Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(byte[] bytes, int offset, byte value)",
                    "public <E> E net.openhft.chronicle.core.UnsafeMemory.allocateInstance(Class<? extends E> clazz)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.partialRead(byte[] bytes, int offset, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(byte[] bytes, int offset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutChar(Object obj, long offset, char value)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(Object object, long offset, long i)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readInt(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileDouble(Object object, long offset, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.readBytes(long address, byte[] b, long offset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(Object object, long offset, long i64)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(Object obj, long offset, long value)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(Object object, long offset, long expected, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(long address, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileShort(Object object, long offset, short i16)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.setMemory(Object o, long offset, long size, byte b)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readVolatileByte(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.freeMemory(long address, long size)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/CloseableUtils.java": [
                    "public static void net.openhft.chronicle.core.internal.CloseableUtils.gcAndWaitForCloseablesToClose()",
                    "static void net.openhft.chronicle.core.internal.CloseableUtils.closeQuietly(@Nullable Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/ReflectionUtil.java": [
                    "public static <T> T net.openhft.chronicle.core.internal.analytics.ReflectionUtil.reflectiveProxy(@NotNull final Class<T> interf, @NotNull final Object delegate)",
                    "public static <T> T net.openhft.chronicle.core.internal.analytics.ReflectionUtil.reflectiveProxy(@NotNull final Class<T> interf, @NotNull final Object delegate, final boolean returnProxy)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/pom/InternalPomProperties.java": [
                    "public static Properties net.openhft.chronicle.core.internal.pom.InternalPomProperties.create(@NotNull final String groupId, @NotNull final String artifactId)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private ClassAliasPool net.openhft.chronicle.core.pool.ClassAliasPool.defaultAliases()"
                ],
                "src/main/java/net/openhft/chronicle/core/shutdown/PriorityHook.java": [
                    "public static synchronized <H extends Hooklet> H net.openhft.chronicle.core.shutdown.PriorityHook.addAndGet(H hooklet)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "private static void net.openhft.chronicle.core.threads.CleaningThread.scanReferences(CleaningThreadLocal<?> ctl, WeakReference<?>[] table, Object o, Method remove)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.set(T value)",
                    "public static void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanupNonCleaningThreads()",
                    "public void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.remove()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/AbstractInvocationHandler.java": [
                    "private static MethodHandles.Lookup net.openhft.chronicle.core.util.AbstractInvocationHandler.acquireLookup(Class<?> c)",
                    "public final Object net.openhft.chronicle.core.util.AbstractInvocationHandler.invoke(Object proxy, Method method, Object[] args)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/GenericReflection.java": [
                    "static Type getGenericSuperclass(Type forClass)",
                    "public static Class<?> erase(Type type)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Ints.java": [
                    "public static int net.openhft.chronicle.core.util.Ints.requireNonNegative(final int value)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Longs.java": [
                    "public static long net.openhft.chronicle.core.util.Longs.requireNonNegative(final long value)",
                    "public static long net.openhft.chronicle.core.util.Longs.requirePositive(final long value)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.util.Mocker.intercepting(@NotNull Class<T> interfaceType, @NotNull BiConsumer<String, Object[]> consumer, T t)",
                    "public static <T> T net.openhft.chronicle.core.util.Mocker.ignored(@NotNull Class<T> interfaceType, Class<?>... additional)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "static <E> E net.openhft.chronicle.core.util.ObjectUtils.convertTo0(Class<E> eClass, @Nullable Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ReadResolvable.java": [
                    "static <T> T readResolve(Object o)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d8b9bc39824fb11b3821bff5e9ee6dee5934161e",
        "previous_commit": "f2e84734e6e72c677f43bffe54c9fcd3a3bdf9cd",
        "date": 1704903856,
        "releases": {
            "previous": "d8b9bc39824fb11b3821bff5e9ee6dee5934161e",
            "next": "d8b9bc39824fb11b3821bff5e9ee6dee5934161e"
        },
        "commit_message": "Prepare copyMemory for removal in x.26 (#615)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d8b9bc39824fb11b3821bff5e9ee6dee5934161e": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutDouble(Object obj, long offset, double value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileByte(Object object, long offset, byte b)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeFloat(Object object, long offset, float f)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(Object object, long offset, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeShort(Object object, long offset, short i16)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long srcAddress, long destAddress, long length)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.getAndSetInt(Object object, long offset, int value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutObject(Object obj, long offset, Object value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutBoolean(Object obj, long offset, boolean value)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(Object object, long offset)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readShort(Object object, long offset)",
                    "public <T> T net.openhft.chronicle.core.UnsafeMemory.getObject(@NotNull Object object, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(Object obj, long offset, int value)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readVolatileDouble(Object object, long offset)",
                    "public static boolean net.openhft.chronicle.core.UnsafeMemory.unsafeGetBoolean(Object obj, long offset)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readVolatileShort(Object object, long offset)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.copyMemoryLoop(Object src, long srcOffset, Object dest, long destOffset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long from, long to, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutFloat(Object obj, long offset, float value)",
                    "public static long net.openhft.chronicle.core.UnsafeMemory.unsafeGetLong(Object obj, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(Object object, long offset, int expected, int value)",
                    "public static int net.openhft.chronicle.core.UnsafeMemory.unsafeGetInt(Object obj, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long srcAddress, @Nullable Object dest, long destOffset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutShort(Object obj, long offset, short value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(Object object, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutChar(Object obj, long offset, char value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.partialRead(long addr, int length)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(byte[] bytes, int offset, long value, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(Object object, long offset, long i)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeBytes(long address, byte[] b, int offset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileFloat(Object object, long offset, float f)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeInt(Object object, long offset, int i32)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(Object object, long offset)",
                    "public static short net.openhft.chronicle.core.UnsafeMemory.unsafeGetShort(Object obj, long offset)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readVolatileFloat(Object object, long offset)",
                    "public static double net.openhft.chronicle.core.UnsafeMemory.unsafeGetDouble(Object obj, long offset)",
                    "public static <T> T net.openhft.chronicle.core.UnsafeMemory.unsafeGetObject(Object obj, long offset)",
                    "public static char net.openhft.chronicle.core.UnsafeMemory.unsafeGetChar(Object obj, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.readBytes(long address, byte[] b, long offset, int length)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readInt(Object object, long offset)",
                    "void net.openhft.chronicle.core.UnsafeMemory.copyMemory0(@Nullable Object src, long srcOffset, @Nullable Object dest, long destOffset, long length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(Object object, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileDouble(Object object, long offset, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(Object object, long offset, long i64)",
                    "public static float net.openhft.chronicle.core.UnsafeMemory.unsafeGetFloat(Object obj, long offset)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(Object object, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(Object obj, long offset, long value)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.backwardCopyMemoryLoop(Object src, long srcOffset, Object dest, long destOffset, int length)",
                    "public static byte net.openhft.chronicle.core.UnsafeMemory.unsafeGetByte(Object obj, long offset)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readVolatileByte(Object object, long offset)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(Object object, long offset, long expected, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(long address, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeByte(Object object, long offset, byte b)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copy8bit(String s, int start, int length, long addr)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeLong(Object object, long offset, long i64)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileShort(Object object, long offset, short i16)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(Object object, long offset, int increment)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.putObject(@NotNull Object object, long offset, Object value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(Object obj, long offset, byte value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(@Nullable Object src, long srcOffset, @Nullable Object dest, long destOffset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(long addr, long value, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.freeMemory(long address, long size)"
                ]
            },
            "f2e84734e6e72c677f43bffe54c9fcd3a3bdf9cd": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutDouble(Object obj, long offset, double value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileByte(Object object, long offset, byte b)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeFloat(Object object, long offset, float f)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(Object object, long offset, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeShort(Object object, long offset, short i16)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long srcAddress, long destAddress, long length)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.getAndSetInt(Object object, long offset, int value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutObject(Object obj, long offset, Object value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutBoolean(Object obj, long offset, boolean value)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(Object object, long offset)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readShort(Object object, long offset)",
                    "public <T> T net.openhft.chronicle.core.UnsafeMemory.getObject(@NotNull Object object, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(Object obj, long offset, int value)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readVolatileDouble(Object object, long offset)",
                    "public static boolean net.openhft.chronicle.core.UnsafeMemory.unsafeGetBoolean(Object obj, long offset)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readVolatileShort(Object object, long offset)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.copyMemoryLoop(Object src, long srcOffset, Object dest, long destOffset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long from, long to, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutFloat(Object obj, long offset, float value)",
                    "public static long net.openhft.chronicle.core.UnsafeMemory.unsafeGetLong(Object obj, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(Object object, long offset, int expected, int value)",
                    "public static int net.openhft.chronicle.core.UnsafeMemory.unsafeGetInt(Object obj, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long srcAddress, @Nullable Object dest, long destOffset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutShort(Object obj, long offset, short value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(Object object, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutChar(Object obj, long offset, char value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.partialRead(long addr, int length)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(byte[] bytes, int offset, long value, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(Object object, long offset, long i)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeBytes(long address, byte[] b, int offset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileFloat(Object object, long offset, float f)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeInt(Object object, long offset, int i32)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(Object object, long offset)",
                    "public static short net.openhft.chronicle.core.UnsafeMemory.unsafeGetShort(Object obj, long offset)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readVolatileFloat(Object object, long offset)",
                    "public static double net.openhft.chronicle.core.UnsafeMemory.unsafeGetDouble(Object obj, long offset)",
                    "public static <T> T net.openhft.chronicle.core.UnsafeMemory.unsafeGetObject(Object obj, long offset)",
                    "public static char net.openhft.chronicle.core.UnsafeMemory.unsafeGetChar(Object obj, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.readBytes(long address, byte[] b, long offset, int length)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readInt(Object object, long offset)",
                    "void net.openhft.chronicle.core.UnsafeMemory.copyMemory0(@Nullable Object src, long srcOffset, @Nullable Object dest, long destOffset, long length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(Object object, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileDouble(Object object, long offset, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(Object object, long offset, long i64)",
                    "public static float net.openhft.chronicle.core.UnsafeMemory.unsafeGetFloat(Object obj, long offset)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(Object object, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(Object obj, long offset, long value)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.backwardCopyMemoryLoop(Object src, long srcOffset, Object dest, long destOffset, int length)",
                    "public static byte net.openhft.chronicle.core.UnsafeMemory.unsafeGetByte(Object obj, long offset)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readVolatileByte(Object object, long offset)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(Object object, long offset, long expected, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(long address, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeByte(Object object, long offset, byte b)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copy8bit(String s, int start, int length, long addr)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeLong(Object object, long offset, long i64)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileShort(Object object, long offset, short i16)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(Object object, long offset, int increment)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.putObject(@NotNull Object object, long offset, Object value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(Object obj, long offset, byte value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(@Nullable Object src, long srcOffset, @Nullable Object dest, long destOffset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(long addr, long value, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.freeMemory(long address, long size)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d562eb307d8c95b8cfe3c2dc3ee81827582ab5b7",
        "previous_commit": "030e8157ff7ba3b2dbb8c95999dd1c94b7c7f5d5",
        "date": 1687246993,
        "releases": {
            "previous": "d562eb307d8c95b8cfe3c2dc3ee81827582ab5b7",
            "next": "d562eb307d8c95b8cfe3c2dc3ee81827582ab5b7"
        },
        "commit_message": "Restructure jvm add javadoc (#531)\n\n* Improve checking of tests\r\n\r\n* Restructure JVM and added javadoc\r\n\r\n* Restructure JVM and added javadoc\r\n\r\n* Remove printStackTrace() that's not needed\r\n\r\n* Address issues picked up by sonar",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d562eb307d8c95b8cfe3c2dc3ee81827582ab5b7": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean net.openhft.chronicle.core.Jvm.isJava15Plus()",
                    "public static int net.openhft.chronicle.core.Jvm.majorVersion()",
                    "public static void net.openhft.chronicle.core.Jvm.nanoPause()",
                    "public static boolean net.openhft.chronicle.core.Jvm.isJava12Plus()",
                    "public static int net.openhft.chronicle.core.Jvm.objectHeaderSize()",
                    "private static void net.openhft.chronicle.core.Jvm.doNotCloseOnInterrupt8(final Class<?> clazz, final FileChannel fc)",
                    "public static Field net.openhft.chronicle.core.Jvm.getField(@NotNull final Class<?> clazz, @NotNull final String fieldName)",
                    "public static Method net.openhft.chronicle.core.Jvm.getMethod(@NotNull final Class<?> clazz, @NotNull final String methodName, final Class... argTypes)",
                    "public static void net.openhft.chronicle.core.Jvm.safepoint()",
                    "public static boolean net.openhft.chronicle.core.Jvm.isJava14Plus()",
                    "public static Field net.openhft.chronicle.core.Jvm.getFieldOrNull(@NotNull final Class<?> clazz, @NotNull final String fieldName)",
                    "private static long net.openhft.chronicle.core.Jvm.maxDirectMemory0()",
                    "private static void net.openhft.chronicle.core.Jvm.doNotCloseOnInterrupt9(final Class<?> clazz, final FileChannel fc)",
                    "public static boolean net.openhft.chronicle.core.Jvm.isJava19Plus()",
                    "public static boolean net.openhft.chronicle.core.Jvm.isJava20Plus()",
                    "public static boolean net.openhft.chronicle.core.Jvm.isJava9Plus()",
                    "public static String net.openhft.chronicle.core.Jvm.getCpuClass()"
                ],
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static long net.openhft.chronicle.core.Maths.roundingFactor(int digits)",
                    "public static long net.openhft.chronicle.core.Maths.tens(int decimalPlaces)",
                    "public static long net.openhft.chronicle.core.Maths.hash64(@NotNull String s)",
                    "public static long net.openhft.chronicle.core.Maths.roundingFactor(double digits)"
                ],
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.intercepting(@NotNull Class<T> interfaceType, @NotNull final String description, @NotNull Consumer<String> consumer, T t)"
                ],
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static String net.openhft.chronicle.core.OS.findDir(@NotNull String suffix)",
                    "public static boolean net.openhft.chronicle.core.OS.isMacOSX()",
                    "public static long net.openhft.chronicle.core.OS.getPidMax()",
                    "public static boolean net.openhft.chronicle.core.OS.isWindows()",
                    "public static boolean net.openhft.chronicle.core.OS.isLinux()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.unmonitor(Closeable closeable)",
                    "public static boolean net.openhft.chronicle.core.io.AbstractCloseable.waitForCloseablesToClose(long millis)",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.gcAndWaitForCloseablesToClose()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.enableCloseableTracing()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.disableCloseableTracing()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.unmonitor(ReferenceCounted counted)",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.assertReferencesReleased()",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.enableReferenceTracing()",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.disableReferenceTracing()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)",
                    "static void closeQuietly(@Nullable Object... closeables)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public List<String> net.openhft.chronicle.core.io.TracingReferenceCounted.referencesAsString()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public boolean net.openhft.chronicle.core.io.VanillaReferenceCounted.reservedBy(ReferenceOwner owner)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/AbstractInvocationHandler.java": [
                    "private static MethodHandles.Lookup net.openhft.chronicle.core.util.AbstractInvocationHandler.acquireLookup(Class<?> c)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static Boolean net.openhft.chronicle.core.util.ObjectUtils.toBoolean(@Nullable String s)",
                    "public static Object net.openhft.chronicle.core.util.ObjectUtils.readResolve(@NotNull Object o)",
                    "private static Supplier<?> net.openhft.chronicle.core.util.ObjectUtils.supplierForClass(Class<?> c)",
                    "public ThrowingFunction<String, Object, Exception> net.openhft.chronicle.core.util.ObjectUtils.apply(@NotNull Class<?> c)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static void net.openhft.chronicle.core.util.StringUtils.setCount(@NotNull StringBuilder sb, int count)",
                    "public static char[] net.openhft.chronicle.core.util.StringUtils.extractChars(@NotNull String s)",
                    "private static byte net.openhft.chronicle.core.util.StringUtils.getStringCoderForStringOrStringBuilder(@NotNull CharSequence charSequence)",
                    "public static byte[] net.openhft.chronicle.core.util.StringUtils.extractBytes(@NotNull String s)",
                    "public static char[] net.openhft.chronicle.core.util.StringUtils.extractChars(StringBuilder sb)",
                    "public static byte[] net.openhft.chronicle.core.util.StringUtils.extractBytes(@NotNull StringBuilder sb)",
                    "public static String net.openhft.chronicle.core.util.StringUtils.newString(@NotNull char[] chars)",
                    "public static boolean net.openhft.chronicle.core.util.StringUtils.isEqual(@Nullable StringBuilder s, @Nullable CharSequence cs)",
                    "private static void net.openhft.chronicle.core.util.StringUtils.ensureJava9Plus()"
                ]
            },
            "030e8157ff7ba3b2dbb8c95999dd1c94b7c7f5d5": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean net.openhft.chronicle.core.Jvm.isJava15Plus()",
                    "public static int net.openhft.chronicle.core.Jvm.majorVersion()",
                    "public static void net.openhft.chronicle.core.Jvm.nanoPause()",
                    "public static boolean net.openhft.chronicle.core.Jvm.isJava12Plus()",
                    "public static int net.openhft.chronicle.core.Jvm.objectHeaderSize()",
                    "private static void net.openhft.chronicle.core.Jvm.doNotCloseOnInterrupt8(final Class<?> clazz, final FileChannel fc)",
                    "public static Field net.openhft.chronicle.core.Jvm.getField(@NotNull final Class<?> clazz, @NotNull final String fieldName)",
                    "public static Method net.openhft.chronicle.core.Jvm.getMethod(@NotNull final Class<?> clazz, @NotNull final String methodName, final Class... argTypes)",
                    "public static void net.openhft.chronicle.core.Jvm.safepoint()",
                    "public static boolean net.openhft.chronicle.core.Jvm.isJava14Plus()",
                    "public static Field net.openhft.chronicle.core.Jvm.getFieldOrNull(@NotNull final Class<?> clazz, @NotNull final String fieldName)",
                    "private static long net.openhft.chronicle.core.Jvm.maxDirectMemory0()",
                    "private static void net.openhft.chronicle.core.Jvm.doNotCloseOnInterrupt9(final Class<?> clazz, final FileChannel fc)",
                    "public static boolean net.openhft.chronicle.core.Jvm.isJava19Plus()",
                    "public static boolean net.openhft.chronicle.core.Jvm.isJava20Plus()",
                    "public static boolean net.openhft.chronicle.core.Jvm.isJava9Plus()",
                    "public static String net.openhft.chronicle.core.Jvm.getCpuClass()"
                ],
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static long net.openhft.chronicle.core.Maths.roundingFactor(int digits)",
                    "public static long net.openhft.chronicle.core.Maths.tens(int decimalPlaces)",
                    "public static long net.openhft.chronicle.core.Maths.hash64(@NotNull String s)",
                    "public static long net.openhft.chronicle.core.Maths.roundingFactor(double digits)"
                ],
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.intercepting(@NotNull Class<T> tClass, @NotNull final String description, @NotNull Consumer<String> consumer, T t)"
                ],
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static String net.openhft.chronicle.core.OS.findDir(@NotNull String suffix)",
                    "public static boolean net.openhft.chronicle.core.OS.isMacOSX()",
                    "public static long net.openhft.chronicle.core.OS.getPidMax()",
                    "public static boolean net.openhft.chronicle.core.OS.isWindows()",
                    "public static boolean net.openhft.chronicle.core.OS.isLinux()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.unmonitor(Closeable closeable)",
                    "public static boolean net.openhft.chronicle.core.io.AbstractCloseable.waitForCloseablesToClose(long millis)",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.gcAndWaitForCloseablesToClose()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.enableCloseableTracing()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.disableCloseableTracing()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.unmonitor(ReferenceCounted counted)",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.assertReferencesReleased()",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.enableReferenceTracing()",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.disableReferenceTracing()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)",
                    "static void closeQuietly(@Nullable Object... closeables)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public List<String> net.openhft.chronicle.core.io.TracingReferenceCounted.referencesAsString()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public boolean net.openhft.chronicle.core.io.VanillaReferenceCounted.reservedBy(ReferenceOwner owner)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/AbstractInvocationHandler.java": [
                    "private static MethodHandles.Lookup net.openhft.chronicle.core.util.AbstractInvocationHandler.acquireLookup(Class<?> c)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static Boolean net.openhft.chronicle.core.util.ObjectUtils.toBoolean(@Nullable String s)",
                    "public static Object net.openhft.chronicle.core.util.ObjectUtils.readResolve(@NotNull Object o)",
                    "private static Supplier<?> net.openhft.chronicle.core.util.ObjectUtils.supplierForClass(Class<?> c)",
                    "public ThrowingFunction<String, Object, Exception> net.openhft.chronicle.core.util.ObjectUtils.apply(@NotNull Class<?> c)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static void net.openhft.chronicle.core.util.StringUtils.setCount(@NotNull StringBuilder sb, int count)",
                    "public static char[] net.openhft.chronicle.core.util.StringUtils.extractChars(@NotNull String s)",
                    "private static byte net.openhft.chronicle.core.util.StringUtils.getStringCoderForStringOrStringBuilder(@NotNull CharSequence charSequence)",
                    "public static byte[] net.openhft.chronicle.core.util.StringUtils.extractBytes(@NotNull String s)",
                    "public static char[] net.openhft.chronicle.core.util.StringUtils.extractChars(StringBuilder sb)",
                    "public static byte[] net.openhft.chronicle.core.util.StringUtils.extractBytes(@NotNull StringBuilder sb)",
                    "public static String net.openhft.chronicle.core.util.StringUtils.newString(@NotNull char[] chars)",
                    "public static boolean net.openhft.chronicle.core.util.StringUtils.isEqual(@Nullable StringBuilder s, @Nullable CharSequence cs)",
                    "private static void net.openhft.chronicle.core.util.StringUtils.ensureJava9Plus()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "df5aaa41aef734c0f88b1f6aa56618c660f55808",
        "previous_commit": "78ec01522350e5a2cc7317e54b64b54ef01d658f",
        "date": 1612454241,
        "releases": {
            "previous": "df5aaa41aef734c0f88b1f6aa56618c660f55808",
            "next": "df5aaa41aef734c0f88b1f6aa56618c660f55808"
        },
        "commit_message": "Add selected unchecked exceptions to the throws clause #198\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "df5aaa41aef734c0f88b1f6aa56618c660f55808": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void net.openhft.chronicle.core.Jvm.validateClassMetrics(final Class<?> c, final int start, final int end)",
                    "private static int net.openhft.chronicle.core.Jvm.getMajorVersion0()",
                    "private static int net.openhft.chronicle.core.Jvm.getCompileThreshold0()",
                    "private static MethodHandle net.openhft.chronicle.core.Jvm.get_setAccessible0_Method()",
                    "public static <V> V net.openhft.chronicle.core.Jvm.getValue(@NotNull Object target, @NotNull final String fieldName)",
                    "private static int net.openhft.chronicle.core.Jvm.getProcessId0()"
                ],
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static long net.openhft.chronicle.core.Maths.toUInt32(long value)",
                    "public static int net.openhft.chronicle.core.Maths.toUInt16(long value)",
                    "public static int net.openhft.chronicle.core.Maths.toInt32(long value)",
                    "public static byte net.openhft.chronicle.core.Maths.toInt8(long value)",
                    "public static short net.openhft.chronicle.core.Maths.toUInt8(long value)",
                    "public static int net.openhft.chronicle.core.Maths.toUInt31(long value)",
                    "public static short net.openhft.chronicle.core.Maths.toInt16(long value)",
                    "public static int net.openhft.chronicle.core.Maths.toInt32(long value, @NotNull String msg)",
                    "public static long net.openhft.chronicle.core.Maths.hash64(@NotNull CharSequence cs)"
                ],
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T intercepting(@NotNull Class<T> tClass, @NotNull BiConsumer<String, Object[]> consumer, T t)",
                    "public static <T> T ignored(@NotNull Class<T> tClass, Class... additional)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(long address, long expected, long value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.allocate(long capacity)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(@NotNull Object object, long offset, int expected, int value)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(long address, int increment)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(@NotNull Object object, long offset, long expected, long value)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(long address, int expected, int value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.addLong(long address, long increment)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/ReflectionUtil.java": [
                    "public static Object net.openhft.chronicle.core.internal.analytics.ReflectionUtil.analyticsBuilder(@NotNull final String measurementId, @NotNull final String apiSecret)",
                    "public static Object net.openhft.chronicle.core.internal.analytics.ReflectionUtil.invokeOrThrow(@NotNull final Method method, @NotNull final Object target, Object... params)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.close()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "private static <T> void net.openhft.chronicle.core.io.IOTools.unmonitor(Class aClass, Object t, int depth)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/AbstractInvocationHandler.java": [
                    "private static MethodHandles.Lookup net.openhft.chronicle.core.util.AbstractInvocationHandler.acquireLookup(Class<?> c)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ByteBuffers.java": [
                    "public static void net.openhft.chronicle.core.util.ByteBuffers.setAddressCapacity(ByteBuffer buffer, long address, long capacity)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "private static <E> E convertToArray(@NotNull Class<E> eClass, Object o)",
                    "private static int sizeOf(Object o)",
                    "public static boolean isTrue(CharSequence s)",
                    "static <E> E convertTo0(Class<E> eClass, @Nullable Object o)",
                    "public static Object readResolve(@NotNull Object o)",
                    "public static boolean isFalse(CharSequence s)",
                    "private static Supplier supplierForClass(Class<?> c)",
                    "public static Class<?>[] getAllInterfaces(Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static long net.openhft.chronicle.core.util.StringUtils.parseLong(CharSequence s, int radix)",
                    "private static boolean net.openhft.chronicle.core.util.StringUtils.compareRest(@NotNull CharSequence in, int pos, @NotNull String s)",
                    "public static boolean net.openhft.chronicle.core.util.StringUtils.equalsCaseIgnore(@Nullable CharSequence s, @NotNull CharSequence cs)",
                    "public static boolean net.openhft.chronicle.core.util.StringUtils.endsWith(@NotNull final CharSequence source, @NotNull final String endsWith)",
                    "public static int net.openhft.chronicle.core.util.StringUtils.parseInt(CharSequence s, int radix)",
                    "public static double net.openhft.chronicle.core.util.StringUtils.parseDouble(@NotNull CharSequence in)",
                    "public static void net.openhft.chronicle.core.util.StringUtils.setLength(@NotNull StringBuilder sb, int length)",
                    "public static boolean net.openhft.chronicle.core.util.StringUtils.isEqual(@Nullable CharSequence s, @Nullable CharSequence cs)",
                    "public static boolean net.openhft.chronicle.core.util.StringUtils.isEqual(@Nullable StringBuilder s, @Nullable CharSequence cs)"
                ]
            },
            "78ec01522350e5a2cc7317e54b64b54ef01d658f": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void net.openhft.chronicle.core.Jvm.validateClassMetrics(final Class<?> c, final int start, final int end)",
                    "private static int net.openhft.chronicle.core.Jvm.getMajorVersion0()",
                    "private static int net.openhft.chronicle.core.Jvm.getCompileThreshold0()",
                    "private static MethodHandle net.openhft.chronicle.core.Jvm.get_setAccessible0_Method()",
                    "public static <V> V net.openhft.chronicle.core.Jvm.getValue(@NotNull Object target, @NotNull final String fieldName)",
                    "private static int net.openhft.chronicle.core.Jvm.getProcessId0()"
                ],
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static long net.openhft.chronicle.core.Maths.toUInt32(long value)",
                    "public static int net.openhft.chronicle.core.Maths.toUInt16(long value)",
                    "public static int net.openhft.chronicle.core.Maths.toInt32(long value)",
                    "public static byte net.openhft.chronicle.core.Maths.toInt8(long value)",
                    "public static short net.openhft.chronicle.core.Maths.toUInt8(long value)",
                    "public static int net.openhft.chronicle.core.Maths.toUInt31(long value)",
                    "public static short net.openhft.chronicle.core.Maths.toInt16(long value)",
                    "public static int net.openhft.chronicle.core.Maths.toInt32(long value, @NotNull String msg)",
                    "public static long net.openhft.chronicle.core.Maths.hash64(@NotNull CharSequence cs)"
                ],
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T intercepting(@NotNull Class<T> tClass, @NotNull BiConsumer<String, Object[]> consumer, T t)",
                    "public static <T> T ignored(@NotNull Class<T> tClass, Class... additional)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(long address, long expected, long value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.allocate(long capacity)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(@NotNull Object object, long offset, int expected, int value)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(long address, int increment)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(@NotNull Object object, long offset, long expected, long value)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(long address, int expected, int value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.addLong(long address, long increment)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/ReflectionUtil.java": [
                    "public static Object net.openhft.chronicle.core.internal.analytics.ReflectionUtil.analyticsBuilder(@NotNull final String measurementId, @NotNull final String apiSecret)",
                    "public static Object net.openhft.chronicle.core.internal.analytics.ReflectionUtil.invokeOrThrow(@NotNull final Method method, @NotNull final Object target, Object... params)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.close()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "private static <T> void net.openhft.chronicle.core.io.IOTools.unmonitor(Class aClass, Object t, int depth)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/AbstractInvocationHandler.java": [
                    "private static MethodHandles.Lookup net.openhft.chronicle.core.util.AbstractInvocationHandler.acquireLookup(Class<?> c)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ByteBuffers.java": [
                    "public static void net.openhft.chronicle.core.util.ByteBuffers.setAddressCapacity(ByteBuffer buffer, long address, long capacity)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "private static <E> E convertToArray(@NotNull Class<E> eClass, Object o)",
                    "private static int sizeOf(Object o)",
                    "public static boolean isTrue(CharSequence s)",
                    "static <E> E convertTo0(Class<E> eClass, @Nullable Object o)",
                    "public static Object readResolve(@NotNull Object o)",
                    "public static boolean isFalse(CharSequence s)",
                    "private static Supplier supplierForClass(Class<?> c)",
                    "public static Class<?>[] getAllInterfaces(Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static long net.openhft.chronicle.core.util.StringUtils.parseLong(CharSequence s, int radix)",
                    "private static boolean net.openhft.chronicle.core.util.StringUtils.compareRest(@NotNull CharSequence in, int pos, @NotNull String s)",
                    "public static boolean net.openhft.chronicle.core.util.StringUtils.equalsCaseIgnore(@Nullable CharSequence s, @NotNull CharSequence cs)",
                    "public static boolean net.openhft.chronicle.core.util.StringUtils.endsWith(@NotNull final CharSequence source, @NotNull final String endsWith)",
                    "public static int net.openhft.chronicle.core.util.StringUtils.parseInt(CharSequence s, int radix)",
                    "public static double net.openhft.chronicle.core.util.StringUtils.parseDouble(@NotNull CharSequence in)",
                    "public static void net.openhft.chronicle.core.util.StringUtils.setLength(@NotNull StringBuilder sb, int length)",
                    "public static boolean net.openhft.chronicle.core.util.StringUtils.isEqual(@Nullable CharSequence s, @Nullable CharSequence cs)",
                    "public static boolean net.openhft.chronicle.core.util.StringUtils.isEqual(@Nullable StringBuilder s, @Nullable CharSequence cs)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "757bcabb2d8034ee793aa9e8b68e54998ad7e277",
        "previous_commit": "9008b1015c1df96d00646e09873fd4b9ad2227ce",
        "date": 1621441667,
        "releases": {
            "previous": "757bcabb2d8034ee793aa9e8b68e54998ad7e277",
            "next": "757bcabb2d8034ee793aa9e8b68e54998ad7e277"
        },
        "commit_message": "We can only assume the address shouldn't be zero, it could be negative.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "757bcabb2d8034ee793aa9e8b68e54998ad7e277": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileShort(long address, short i16)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.setMemory(long address, long size, byte b)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(long address, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(long address, long i64)",
                    "private static long net.openhft.chronicle.core.UnsafeMemory.retryReadVolatileLong(long address, long value)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(long address)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readVolatileShort(long address)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(long address, byte value)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(long address, long expected, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileByte(long address, byte b)",
                    "private static int net.openhft.chronicle.core.UnsafeMemory.retryReadVolatileInt(long address, int value)",
                    "public static long net.openhft.chronicle.core.UnsafeMemory.unsafeGetLong(long address)",
                    "public static int net.openhft.chronicle.core.UnsafeMemory.unsafeGetInt(long address)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readInt(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long fromAddress, long address, long length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(long address, int i32)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(long address, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeBytes(long address, byte[] b, int offset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeByte(long address, byte b)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readVolatileDouble(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.readBytes(long address, byte[] b, long offset, int length)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(long address)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(long address, int expected, int value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(long address)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, long address, int length)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readVolatileFloat(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileDouble(long address, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeShort(long address, short i16)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(long address, long i)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeFloat(long address, float f)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readShort(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeLong(long address, long i64)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(long address, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileFloat(long address, float f)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(long address, int increment)",
                    "public static byte net.openhft.chronicle.core.UnsafeMemory.unsafeGetByte(long address)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(long address, int length)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readVolatileByte(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.freeMemory(long address, long size)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(long address)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.addLong(long address, long increment)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(long address, double d)"
                ]
            },
            "9008b1015c1df96d00646e09873fd4b9ad2227ce": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileShort(long address, short i16)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.setMemory(long address, long size, byte b)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(long address, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(long address, long i64)",
                    "private static long net.openhft.chronicle.core.UnsafeMemory.retryReadVolatileLong(long address, long value)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(long address)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readVolatileShort(long address)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(long address, byte value)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(long address, long expected, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileByte(long address, byte b)",
                    "private static int net.openhft.chronicle.core.UnsafeMemory.retryReadVolatileInt(long address, int value)",
                    "public static long net.openhft.chronicle.core.UnsafeMemory.unsafeGetLong(long address)",
                    "public static int net.openhft.chronicle.core.UnsafeMemory.unsafeGetInt(long address)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readInt(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long fromAddress, long address, long length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(long address, int i32)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(long address, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeBytes(long address, byte[] b, int offset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeByte(long address, byte b)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readVolatileDouble(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.readBytes(long address, byte[] b, long offset, int length)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(long address)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(long address, int expected, int value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(long address)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, long address, int length)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readVolatileFloat(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileDouble(long address, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeShort(long address, short i16)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(long address, long i)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeFloat(long address, float f)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readShort(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeLong(long address, long i64)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(long address, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileFloat(long address, float f)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(long address, int increment)",
                    "public static byte net.openhft.chronicle.core.UnsafeMemory.unsafeGetByte(long address)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(long address, int length)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readVolatileByte(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.freeMemory(long address, long size)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(long address)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.addLong(long address, long increment)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(long address, double d)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e97faa61454322e5c945f75489682ee9d7239347",
        "previous_commit": "8843d8e5c4ee8aab92ef29c54a715ec00d1d419e",
        "date": 1642005814,
        "releases": {
            "previous": "e97faa61454322e5c945f75489682ee9d7239347",
            "next": "e97faa61454322e5c945f75489682ee9d7239347"
        },
        "commit_message": "Remove static code analys warnings, Fix #335 (#337)\n\n* Remove static code analys warnings, Fix #335\r\n\r\n* Fix additional warnings",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e97faa61454322e5c945f75489682ee9d7239347": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void net.openhft.chronicle.core.Jvm.safepoint()"
                ],
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.intercepting(@NotNull Class<T> tClass, @NotNull BiConsumer<String, Object[]> consumer, T t)",
                    "public static <T> T net.openhft.chronicle.core.Mocker.ignored(@NotNull Class<T> tClass, Class<?>... additional)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(@Nullable Object src, long srcOffset, @Nullable Object dest, long destOffset, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.unmonitor(Closeable closeable)",
                    "public static boolean net.openhft.chronicle.core.io.AbstractCloseable.waitForCloseablesToClose(long millis)",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.enableCloseableTracing()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.disableCloseableTracing()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.unmonitor(ReferenceCounted counted)",
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.reserve(ReferenceOwner id)",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.assertReferencesReleased()",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.enableReferenceTracing()",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.disableReferenceTracing()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "private static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.offerPoisonPill(boolean warn)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static void net.openhft.chronicle.core.io.IOTools.deleteDirWithFilesOrThrow(@NotNull File... dirs)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long net.openhft.chronicle.core.io.UnsafeText.append8bit(long address, byte[] bytes)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private void net.openhft.chronicle.core.pool.ClassAliasPool.clean(@NotNull Iterable<Class<?>> coll)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/EnumCache.java": [
                    "public static <E> EnumCache<E> net.openhft.chronicle.core.pool.EnumCache<E>.of(Class<E> eClass)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ParsingCache.java": [
                    "protected boolean net.openhft.chronicle.core.pool.ParsingCache<E>.toggle()"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)",
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread, CleaningThreadLocal<?> ctl)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanupNonCleaningThreads()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static void net.openhft.chronicle.core.util.ObjectUtils.getAllInterfaces(Object o, Function<Class<?>, Boolean> accumulator)",
                    "static <E> E net.openhft.chronicle.core.util.ObjectUtils.convertTo0(Class<E> eClass, @Nullable Object o)",
                    "public static <T> T net.openhft.chronicle.core.util.ObjectUtils.newInstance(@NotNull String className)",
                    "public ThrowingFunction<String, Object, Exception> net.openhft.chronicle.core.util.ObjectUtils.apply(@NotNull Class<?> c)",
                    "private static <E> E net.openhft.chronicle.core.util.ObjectUtils.convertToArray(@NotNull Class<E> eClass, Object o)",
                    "public static <T> Class<T> net.openhft.chronicle.core.util.ObjectUtils.implementationToUse(Class<T> tClass)",
                    "public static Class net.openhft.chronicle.core.util.ObjectUtils.getTypeFor(@NotNull Class<?> clazz, @NotNull Class<?> interfaceClass, int index)",
                    "public static <T> T net.openhft.chronicle.core.util.ObjectUtils.onMethodCall(@NotNull final BiFunction<Method, Object[], Object> biFunction, @NotNull final Class<T> tClass, final Class<?>... additional)",
                    "public static synchronized void net.openhft.chronicle.core.util.ObjectUtils.defaultObjectForInterface(ThrowingFunction<Class<?>, Class<?>, ClassNotFoundException> defaultObjectForInterface)",
                    "private static int net.openhft.chronicle.core.util.ObjectUtils.sizeOf(Object o)",
                    "public static <T> T net.openhft.chronicle.core.util.ObjectUtils.newInstance(@NotNull Class<T> clazz)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ReadResolvable.java": [
                    "static <T> T readResolve(Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "private static byte net.openhft.chronicle.core.util.StringUtils.getStringCoderForStringOrStringBuilder(@NotNull CharSequence charSequence)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ThreadIndexAssigner.java": [
                    "public int net.openhft.chronicle.core.util.ThreadIndexAssigner.getId()"
                ],
                "src/main/java/net/openhft/chronicle/core/watcher/FileSystemWatcher.java": [
                    "private void net.openhft.chronicle.core.watcher.FileSystemWatcher.removePath(String filename)"
                ]
            },
            "8843d8e5c4ee8aab92ef29c54a715ec00d1d419e": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void net.openhft.chronicle.core.Jvm.safepoint()"
                ],
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.intercepting(@NotNull Class<T> tClass, @NotNull BiConsumer<String, Object[]> consumer, T t)",
                    "public static <T> T net.openhft.chronicle.core.Mocker.ignored(@NotNull Class<T> tClass, Class... additional)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(@Nullable Object src, long srcOffset, @Nullable Object dest, long destOffset, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.unmonitor(Closeable closeable)",
                    "public static boolean net.openhft.chronicle.core.io.AbstractCloseable.waitForCloseablesToClose(long millis)",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.enableCloseableTracing()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.disableCloseableTracing()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.unmonitor(ReferenceCounted counted)",
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.reserve(ReferenceOwner id)",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.assertReferencesReleased()",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.enableReferenceTracing()",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.disableReferenceTracing()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "private static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.offerPoisonPill(boolean warn)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static void net.openhft.chronicle.core.io.IOTools.deleteDirWithFilesOrThrow(@NotNull File... dirs)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long net.openhft.chronicle.core.io.UnsafeText.append8bit(long address, byte[] bytes)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private void net.openhft.chronicle.core.pool.ClassAliasPool.clean(@NotNull Iterable<Class<?>> coll)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/EnumCache.java": [
                    "public static <E> EnumCache<E> net.openhft.chronicle.core.pool.EnumCache<E>.of(Class<E> eClass)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ParsingCache.java": [
                    "protected boolean net.openhft.chronicle.core.pool.ParsingCache<E>.toggle()"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)",
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread, CleaningThreadLocal ctl)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanupNonCleaningThreads()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static void net.openhft.chronicle.core.util.ObjectUtils.getAllInterfaces(Object o, Function<Class<?>, Boolean> accumulator)",
                    "public static <T> T net.openhft.chronicle.core.util.ObjectUtils.onMethodCall(@NotNull BiFunction<Method, Object[], Object> biFunction, @NotNull Class<T> tClass, Class... additional)",
                    "static <E> E net.openhft.chronicle.core.util.ObjectUtils.convertTo0(Class<E> eClass, @Nullable Object o)",
                    "public static <T> T net.openhft.chronicle.core.util.ObjectUtils.newInstance(@NotNull String className)",
                    "public ThrowingFunction<String, Object, Exception> net.openhft.chronicle.core.util.ObjectUtils.apply(@NotNull Class<?> c)",
                    "public static synchronized void net.openhft.chronicle.core.util.ObjectUtils.defaultObjectForInterface(ThrowingFunction<Class, Class, ClassNotFoundException> defaultObjectForInterface)",
                    "private static <E> E net.openhft.chronicle.core.util.ObjectUtils.convertToArray(@NotNull Class<E> eClass, Object o)",
                    "public static <T> Class<T> net.openhft.chronicle.core.util.ObjectUtils.implementationToUse(Class<T> tClass)",
                    "public static Class net.openhft.chronicle.core.util.ObjectUtils.getTypeFor(@NotNull Class clazz, @NotNull Class interfaceClass, int index)",
                    "private static int net.openhft.chronicle.core.util.ObjectUtils.sizeOf(Object o)",
                    "public static <T> T net.openhft.chronicle.core.util.ObjectUtils.newInstance(@NotNull Class<T> clazz)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ReadResolvable.java": [
                    "static <T> T readResolve(Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "private static byte net.openhft.chronicle.core.util.StringUtils.getStringCoderForStringOrStringBuilder(@NotNull CharSequence charSequence)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ThreadIndexAssigner.java": [
                    "public int net.openhft.chronicle.core.util.ThreadIndexAssigner.getId()"
                ],
                "src/main/java/net/openhft/chronicle/core/watcher/FileSystemWatcher.java": [
                    "private void net.openhft.chronicle.core.watcher.FileSystemWatcher.removePath(String filename)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "4e93a700b980ae984ae031edcc45664f6540b0fb",
        "previous_commit": "d700edd26aef4e7b49b8a1d47240d37dc31225bf",
        "date": 1516720603,
        "releases": {
            "previous": "4e93a700b980ae984ae031edcc45664f6540b0fb",
            "next": "4e93a700b980ae984ae031edcc45664f6540b0fb"
        },
        "commit_message": "fixes #19 change System.out to Jvm.warn(); also change null check to be more readable (and a bit faster)\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "4e93a700b980ae984ae031edcc45664f6540b0fb": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void writeVolatileByte(Object object, long offset, byte b)",
                    "public void writeVolatileInt(Object object, long offset, int i32)",
                    "public void writeDouble(Object object, long offset, double d)",
                    "public int addInt(Object object, long offset, int increment)",
                    "public void writeVolatileFloat(Object object, long offset, float f)",
                    "public void writeOrderedInt(Object object, long offset, int i32)",
                    "public short readVolatileShort(Object object, long offset)",
                    "public boolean compareAndSwapInt(Object object, long offset, int expected, int value)",
                    "public <E> E allocateInstance(Class<? extends E> clazz)",
                    "public long readLong(Object object, long offset)",
                    "private static int retryReadVolatileInt(long address, int value)",
                    "public void writeShort(Object object, long offset, short i16)",
                    "public void writeFloat(Object object, long offset, float f)",
                    "public long readVolatileLong(Object object, long offset)",
                    "public int readInt(Object object, long offset)",
                    "public void writeVolatileShort(Object object, long offset, short i16)",
                    "public boolean compareAndSwapLong(Object object, long offset, long expected, long value)",
                    "public short readShort(Object object, long offset)",
                    "public byte readByte(Object object, long offset)",
                    "public void writeByte(Object object, long offset, byte b)",
                    "public void writeVolatileLong(Object object, long offset, long i64)",
                    "public long addLong(Object object, long offset, long increment)",
                    "private static long retryReadVolatileLong(long address, long value)",
                    "public double readVolatileDouble(Object object, long offset)",
                    "public byte readVolatileByte(Object object, long offset)",
                    "public void writeVolatileDouble(Object object, long offset, double d)",
                    "public int readVolatileInt(Object object, long offset)",
                    "public void writeLong(Object object, long offset, long i64)",
                    "public double readDouble(Object object, long offset)",
                    "public float readVolatileFloat(Object object, long offset)",
                    "public float readFloat(Object object, long offset)",
                    "public void writeInt(Object object, long offset, int i32)",
                    "public void writeOrderedLong(Object object, long offset, long i)"
                ]
            },
            "d700edd26aef4e7b49b8a1d47240d37dc31225bf": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void writeVolatileByte(Object object, long offset, byte b)",
                    "public void writeVolatileInt(Object object, long offset, int i32)",
                    "public void writeDouble(Object object, long offset, double d)",
                    "public int addInt(Object object, long offset, int increment)",
                    "public void writeVolatileFloat(Object object, long offset, float f)",
                    "public void writeOrderedInt(Object object, long offset, int i32)",
                    "public short readVolatileShort(Object object, long offset)",
                    "public boolean compareAndSwapInt(Object object, long offset, int expected, int value)",
                    "public <E> E allocateInstance(Class<? extends E> clazz)",
                    "public long readLong(Object object, long offset)",
                    "private static int retryReadVolatileInt(long address, int value)",
                    "public void writeShort(Object object, long offset, short i16)",
                    "public void writeFloat(Object object, long offset, float f)",
                    "public long readVolatileLong(Object object, long offset)",
                    "public int readInt(Object object, long offset)",
                    "public void writeVolatileShort(Object object, long offset, short i16)",
                    "public boolean compareAndSwapLong(Object object, long offset, long expected, long value)",
                    "public short readShort(Object object, long offset)",
                    "public byte readByte(Object object, long offset)",
                    "public void writeByte(Object object, long offset, byte b)",
                    "public void writeVolatileLong(Object object, long offset, long i64)",
                    "public long addLong(Object object, long offset, long increment)",
                    "private static long retryReadVolatileLong(long address, long value)",
                    "public double readVolatileDouble(Object object, long offset)",
                    "public byte readVolatileByte(Object object, long offset)",
                    "public void writeVolatileDouble(Object object, long offset, double d)",
                    "public int readVolatileInt(Object object, long offset)",
                    "public void writeLong(Object object, long offset, long i64)",
                    "public double readDouble(Object object, long offset)",
                    "public float readVolatileFloat(Object object, long offset)",
                    "public float readFloat(Object object, long offset)",
                    "public void writeInt(Object object, long offset, int i32)",
                    "public void writeOrderedLong(Object object, long offset, long i)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "78ecb53fa6f913acdddda56cd157349ec8708f14",
        "previous_commit": "b6aaf2f75b2036d0aaecd264cff1ce667dfe6410",
        "date": 1509733881,
        "releases": {
            "previous": "78ecb53fa6f913acdddda56cd157349ec8708f14",
            "next": "78ecb53fa6f913acdddda56cd157349ec8708f14"
        },
        "commit_message": "Add fast null checks for Unsafe calls.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "78ecb53fa6f913acdddda56cd157349ec8708f14": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void writeVolatileByte(Object object, long offset, byte b)",
                    "public void writeVolatileInt(Object object, long offset, int i32)",
                    "public void writeDouble(Object object, long offset, double d)",
                    "public int addInt(Object object, long offset, int increment)",
                    "public void setInt(Object o, long offset, int value)",
                    "public void writeOrderedInt(Object object, long offset, int i32)",
                    "public void writeVolatileFloat(Object object, long offset, float f)",
                    "public short readVolatileShort(Object object, long offset)",
                    "public boolean compareAndSwapInt(Object object, long offset, int expected, int value)",
                    "public long readLong(Object object, long offset)",
                    "public void writeShort(Object object, long offset, short i16)",
                    "public void writeFloat(Object object, long offset, float f)",
                    "public long readVolatileLong(Object object, long offset)",
                    "public int readInt(Object object, long offset)",
                    "public void writeVolatileShort(Object object, long offset, short i16)",
                    "public boolean compareAndSwapLong(Object object, long offset, long expected, long value)",
                    "public short readShort(Object object, long offset)",
                    "public byte readByte(Object object, long offset)",
                    "public void writeByte(Object object, long offset, byte b)",
                    "public void writeVolatileLong(Object object, long offset, long i64)",
                    "public long addLong(Object object, long offset, long increment)",
                    "public <T> T getObject(Object o, long offset)",
                    "public double readVolatileDouble(Object object, long offset)",
                    "public byte readVolatileByte(Object object, long offset)",
                    "public void writeVolatileDouble(Object object, long offset, double d)",
                    "public int readVolatileInt(Object object, long offset)",
                    "public void writeLong(Object object, long offset, long i64)",
                    "public double readDouble(Object object, long offset)",
                    "public float readVolatileFloat(Object object, long offset)",
                    "public float readFloat(Object object, long offset)",
                    "public void writeInt(Object object, long offset, int i32)",
                    "public void writeOrderedLong(Object object, long offset, long i)"
                ]
            },
            "b6aaf2f75b2036d0aaecd264cff1ce667dfe6410": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void writeVolatileByte(Object object, long offset, byte b)",
                    "public void writeVolatileInt(Object object, long offset, int i32)",
                    "public void writeDouble(Object object, long offset, double d)",
                    "public int addInt(Object object, long offset, int increment)",
                    "public void setInt(Object o, long offset, int value)",
                    "public void writeOrderedInt(Object object, long offset, int i32)",
                    "public void writeVolatileFloat(Object object, long offset, float f)",
                    "public short readVolatileShort(Object object, long offset)",
                    "public boolean compareAndSwapInt(Object object, long offset, int expected, int value)",
                    "public long readLong(Object object, long offset)",
                    "public void writeShort(Object object, long offset, short i16)",
                    "public void writeFloat(Object object, long offset, float f)",
                    "public long readVolatileLong(Object object, long offset)",
                    "public int readInt(Object object, long offset)",
                    "public void writeVolatileShort(Object object, long offset, short i16)",
                    "public boolean compareAndSwapLong(Object object, long offset, long expected, long value)",
                    "public short readShort(Object object, long offset)",
                    "public byte readByte(Object object, long offset)",
                    "public void writeByte(Object object, long offset, byte b)",
                    "public void writeVolatileLong(Object object, long offset, long i64)",
                    "public long addLong(Object object, long offset, long increment)",
                    "public <T> T getObject(Object o, long offset)",
                    "public double readVolatileDouble(Object object, long offset)",
                    "public byte readVolatileByte(Object object, long offset)",
                    "public void writeVolatileDouble(Object object, long offset, double d)",
                    "public int readVolatileInt(Object object, long offset)",
                    "public void writeLong(Object object, long offset, long i64)",
                    "public double readDouble(Object object, long offset)",
                    "public float readVolatileFloat(Object object, long offset)",
                    "public float readFloat(Object object, long offset)",
                    "public void writeInt(Object object, long offset, int i32)",
                    "public void writeOrderedLong(Object object, long offset, long i)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "b485b123a844ceb3f5f79d39b12ee36231b0aec2",
        "previous_commit": "96a13458332e2c1b494ed9e221b4ddcf63dcbd30",
        "date": 1625496931,
        "releases": {
            "previous": "b485b123a844ceb3f5f79d39b12ee36231b0aec2",
            "next": "b485b123a844ceb3f5f79d39b12ee36231b0aec2"
        },
        "commit_message": "Add support for null objects to access native memory required by Chronicle-Algorithms. #234\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b485b123a844ceb3f5f79d39b12ee36231b0aec2": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(long address)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(Object object, long offset, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(long address, long i64)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(long address)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(long address, long expected, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(Object object, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(long address, int i32)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(Object object, long offset)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.addLong(Object object, long offset, long increment)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(Object object, long offset, long i)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(Object object, long offset, int expected, int value)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readVolatileDouble(long address)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(long address, int expected, int value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(long address)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readVolatileFloat(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(Object object, long offset, long i64)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileDouble(long address, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(long address, long i)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeFloat(long address, float f)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(Object object, long offset, long expected, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(long address, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileFloat(long address, float f)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(long address, int increment)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(Object object, long offset, int i32)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(long address)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.addLong(long address, long increment)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(long address, double d)"
                ]
            },
            "96a13458332e2c1b494ed9e221b4ddcf63dcbd30": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(long address)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(Object object, long offset, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(long address, long i64)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(long address)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(long address, long expected, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(Object object, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(long address, int i32)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(Object object, long offset)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.addLong(Object object, long offset, long increment)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(Object object, long offset, long i)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(Object object, long offset, int expected, int value)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readVolatileDouble(long address)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(long address, int expected, int value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(long address)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readVolatileFloat(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(Object object, long offset, long i64)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileDouble(long address, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(long address, long i)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeFloat(long address, float f)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(Object object, long offset, long expected, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(long address, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileFloat(long address, float f)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(long address, int increment)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(Object object, long offset, int i32)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(long address)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.addLong(long address, long increment)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(long address, double d)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "bae5b403ab3b76893d3db55909ebb560481405e3",
        "previous_commit": "34c0f5fb3a6b914dfb203f4a5bc5d124378e2e10",
        "date": 1639664607,
        "releases": {
            "previous": "bae5b403ab3b76893d3db55909ebb560481405e3",
            "next": "bae5b403ab3b76893d3db55909ebb560481405e3"
        },
        "commit_message": "Issue/296 (#300)\n\n* Tollerate flakyness\r\n\r\n* Reduce the number of issues marked as Major, Fix #296\r\n\r\n* Add comment",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "bae5b403ab3b76893d3db55909ebb560481405e3": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void net.openhft.chronicle.core.Jvm.safepoint()"
                ],
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static long net.openhft.chronicle.core.OS.invokeFileChannelMap0(@NotNull MethodHandle map0, @NotNull FileChannel fileChannel, int imode, long start, long size, @NotNull ThrowingFunction<OutOfMemoryError, Long, IOException> errorHandler)",
                    "public static int net.openhft.chronicle.core.OS.getProcessId()"
                ],
                "src/main/java/net/openhft/chronicle/core/StackTrace.java": [
                    "public static StackTrace net.openhft.chronicle.core.StackTrace.forThread(Thread t)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "private static void net.openhft.chronicle.core.io.AbstractCloseable.addNested(Set<Closeable> nested, Closeable key, int depth)",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.gcAndWaitForCloseablesToClose()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.release(ReferenceOwner id)",
                    "private void net.openhft.chronicle.core.io.DualReferenceCounted.checkError()",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserve(ReferenceOwner id)",
                    "public synchronized boolean net.openhft.chronicle.core.io.DualReferenceCounted.tryReserve(ReferenceOwner id)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserveTransfer(ReferenceOwner from, ReferenceOwner to)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.releaseLast(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.addAlias(@NotNull Class... classes)",
                    "private String net.openhft.chronicle.core.pool.ClassAliasPool.nameFor0(Class<?> clazz)",
                    "private void net.openhft.chronicle.core.pool.ClassAliasPool.clean(@NotNull Iterable<Class<?>> coll)",
                    "private synchronized Class<?> net.openhft.chronicle.core.pool.ClassAliasPool.forName0(@NotNull CAPKey key)",
                    "public Class net.openhft.chronicle.core.pool.ClassAliasPool.forName(@NotNull CharSequence name)",
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.addAlias(Class clazz, @NotNull String names)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/StringInterner.java": [
                    "protected boolean net.openhft.chronicle.core.pool.StringInterner.toggle()"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)",
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread, CleaningThreadLocal ctl)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanupNonCleaningThreads()",
                    "public synchronized void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanup(T value)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/MonitorProfileAnalyserMain.java": [
                    "public static void net.openhft.chronicle.core.threads.MonitorProfileAnalyserMain.main0(List<String> ignoreSubStrings, String[] args)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/StackSampler.java": [
                    "public StackTraceElement[] net.openhft.chronicle.core.threads.StackSampler.getAndReset()"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            },
            "34c0f5fb3a6b914dfb203f4a5bc5d124378e2e10": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void safepoint()"
                ],
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static long net.openhft.chronicle.core.OS.invokeFileChannelMap0(@NotNull MethodHandle map0, @NotNull FileChannel fileChannel, int imode, long start, long size, @NotNull ThrowingFunction<OutOfMemoryError, Long, IOException> errorHandler)",
                    "public static int net.openhft.chronicle.core.OS.getProcessId()"
                ],
                "src/main/java/net/openhft/chronicle/core/StackTrace.java": [
                    "public static StackTrace net.openhft.chronicle.core.StackTrace.forThread(Thread t)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "private static void net.openhft.chronicle.core.io.AbstractCloseable.addNested(Set<Closeable> nested, Closeable key, int depth)",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.gcAndWaitForCloseablesToClose()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.release(ReferenceOwner id)",
                    "private void net.openhft.chronicle.core.io.DualReferenceCounted.checkError()",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserve(ReferenceOwner id)",
                    "public synchronized boolean net.openhft.chronicle.core.io.DualReferenceCounted.tryReserve(ReferenceOwner id)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserveTransfer(ReferenceOwner from, ReferenceOwner to)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.releaseLast(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private void net.openhft.chronicle.core.pool.ClassAliasPool.clean(@NotNull Iterable<Class> coll)",
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.addAlias(@NotNull Class... classes)",
                    "private String net.openhft.chronicle.core.pool.ClassAliasPool.nameFor0(Class clazz)",
                    "public Class net.openhft.chronicle.core.pool.ClassAliasPool.forName(@NotNull CharSequence name)",
                    "private synchronized Class net.openhft.chronicle.core.pool.ClassAliasPool.forName0(@NotNull CAPKey key)",
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.addAlias(Class clazz, @NotNull String names)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/StringInterner.java": [
                    "protected boolean net.openhft.chronicle.core.pool.StringInterner.toggle()"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)",
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread, CleaningThreadLocal ctl)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanupNonCleaningThreads()",
                    "public synchronized void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanup(T value)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/MonitorProfileAnalyserMain.java": [
                    "public static void net.openhft.chronicle.core.threads.MonitorProfileAnalyserMain.main0(List<String> ignoreSubStrings, String[] args)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/StackSampler.java": [
                    "public StackTraceElement[] net.openhft.chronicle.core.threads.StackSampler.getAndReset()"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "1bc683bb9de42a8e0abbb22f63b3119e74643f30",
        "previous_commit": "e689e8cc10fb1c10646093a74e752d8dbd8b385b",
        "date": 1608114600,
        "releases": {
            "previous": "1bc683bb9de42a8e0abbb22f63b3119e74643f30",
            "next": "1bc683bb9de42a8e0abbb22f63b3119e74643f30"
        },
        "commit_message": "Added the referring class in a consistent manner to all resource management exceptions and messages, closes #173\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "1bc683bb9de42a8e0abbb22f63b3119e74643f30": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosedInSetter()",
                    "protected boolean net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck(boolean isUsed)",
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.resetUsedByThread()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosedInSetter()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosed()",
                    "protected void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.setClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "protected boolean net.openhft.chronicle.core.io.AbstractReferenceCounted.threadSafetyCheck(boolean isUsed)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/ReferenceCountedTracer.java": [
                    "static ReferenceCountedTracer onReleased(final Runnable onRelease, String uniqueId)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.releaseLast(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfNotReleased()",
                    "private boolean net.openhft.chronicle.core.io.TracingReferenceCounted.tryReserve(ReferenceOwner id, boolean must)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.warnAndReleaseIfNotReleased()",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "public boolean net.openhft.chronicle.core.io.TracingReferenceCounted.reservedBy(ReferenceOwner owner)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.reserve(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.release(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.warnAndReleaseIfNotReleased()",
                    "public boolean net.openhft.chronicle.core.io.VanillaReferenceCounted.reservedBy(ReferenceOwner owner)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.callOnRelease()",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.releaseLast(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.throwExceptionIfNotReleased()"
                ]
            },
            "e689e8cc10fb1c10646093a74e752d8dbd8b385b": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosedInSetter()",
                    "protected boolean net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck(boolean isUsed)",
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.resetUsedByThread()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosedInSetter()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosed()",
                    "protected void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.setClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "protected boolean net.openhft.chronicle.core.io.AbstractReferenceCounted.threadSafetyCheck(boolean isUsed)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/ReferenceCountedTracer.java": [
                    "static ReferenceCountedTracer onReleased(final Runnable onRelease, String uniqueId)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.releaseLast(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfNotReleased()",
                    "private boolean net.openhft.chronicle.core.io.TracingReferenceCounted.tryReserve(ReferenceOwner id, boolean must)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.warnAndReleaseIfNotReleased()",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "public boolean net.openhft.chronicle.core.io.TracingReferenceCounted.reservedBy(ReferenceOwner owner)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.reserve(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.release(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.warnAndReleaseIfNotReleased()",
                    "public boolean net.openhft.chronicle.core.io.VanillaReferenceCounted.reservedBy(ReferenceOwner owner)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.callOnRelease()",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.releaseLast(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.throwExceptionIfNotReleased()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8175ff51b212c85300748a8459114f241b84404b",
        "previous_commit": "90a1c0bd596d04b3bdd9e8f97ca0eb63ab212832",
        "date": 1639570837,
        "releases": {
            "previous": "8175ff51b212c85300748a8459114f241b84404b",
            "next": "8175ff51b212c85300748a8459114f241b84404b"
        },
        "commit_message": "Remove most minor warnings, Fix #289 (#290)\n\n* Remove most minor warnings, Fix #289\r\n\r\n* Fix NaN issue and add tests for NaN rounding",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8175ff51b212c85300748a8459114f241b84404b": {
                "src/main/java/net/openhft/chronicle/core/FlakyTestRunner.java": [
                    "public static <T extends Throwable> void run(boolean flakyOnThisArch, RunnableThrows<T> rt)"
                ],
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void validateClassMetrics(final Class<?> c, final int start, final int end)",
                    "private static int getProcessId0()",
                    "private static ClassMetrics getClassMetrics(final Class<?> c)"
                ],
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double net.openhft.chronicle.core.Maths.round4up(double d)",
                    "public static double net.openhft.chronicle.core.Maths.roundNup(double d, int digits)",
                    "public static double net.openhft.chronicle.core.Maths.round7up(double d)",
                    "public static double net.openhft.chronicle.core.Maths.round2up(double d)",
                    "public static double net.openhft.chronicle.core.Maths.round6up(double d)",
                    "public static double net.openhft.chronicle.core.Maths.round8up(double d)",
                    "public static double net.openhft.chronicle.core.Maths.round3up(double d)",
                    "public static double net.openhft.chronicle.core.Maths.round5up(double d)"
                ],
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static long net.openhft.chronicle.core.OS.spaceUsed(@NotNull File file)",
                    "private static int net.openhft.chronicle.core.OS.getProcessId0()",
                    "public static long net.openhft.chronicle.core.OS.mapAlignment()",
                    "public static int net.openhft.chronicle.core.OS.pageSize()",
                    "public static long net.openhft.chronicle.core.OS.getPidMax()",
                    "public static void net.openhft.chronicle.core.OS.unmap(long address, long size)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] src, int srcOffset, long dest, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/announcer/InternalAnnouncer.java": [
                    "private static void announceArtifact(@NotNull final String groupId, @NotNull final String artifactId, @NotNull final Map<String, String> properties)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long net.openhft.chronicle.core.io.UnsafeText.append8bit(long address, byte[] bytes)",
                    "public static long net.openhft.chronicle.core.io.UnsafeText.append8bit(long address, char[] chars)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public static <T> CleaningThreadLocal<T> net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.withCleanup(Supplier<T> supplier, ThrowingConsumer<T, Exception> cleanup, Function<T, T> getWrapper)"
                ]
            },
            "90a1c0bd596d04b3bdd9e8f97ca0eb63ab212832": {
                "src/main/java/net/openhft/chronicle/core/FlakyTestRunner.java": [
                    "public static <T extends Throwable> void run(boolean flakyOnThisArch, RunnableThrows<T> rt)"
                ],
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void validateClassMetrics(final Class<?> c, final int start, final int end)",
                    "private static int getProcessId0()",
                    "private static ClassMetrics getClassMetrics(final Class<?> c)"
                ],
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double net.openhft.chronicle.core.Maths.round4up(double d)",
                    "public static double net.openhft.chronicle.core.Maths.roundNup(double d, int digits)",
                    "public static double net.openhft.chronicle.core.Maths.round7up(double d)",
                    "public static double net.openhft.chronicle.core.Maths.round2up(double d)",
                    "public static double net.openhft.chronicle.core.Maths.round6up(double d)",
                    "public static double net.openhft.chronicle.core.Maths.round8up(double d)",
                    "public static double net.openhft.chronicle.core.Maths.round3up(double d)",
                    "public static double net.openhft.chronicle.core.Maths.round5up(double d)"
                ],
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static long net.openhft.chronicle.core.OS.spaceUsed(@NotNull File file)",
                    "private static int net.openhft.chronicle.core.OS.getProcessId0()",
                    "public static long net.openhft.chronicle.core.OS.mapAlignment()",
                    "public static int net.openhft.chronicle.core.OS.pageSize()",
                    "public static long net.openhft.chronicle.core.OS.getPidMax()",
                    "public static void net.openhft.chronicle.core.OS.unmap(long address, long size)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] src, int srcOffset, long dest, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/announcer/InternalAnnouncer.java": [
                    "private static void announceArtifact(@NotNull final String groupId, @NotNull final String artifactId, @NotNull final Map<String, String> properties)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long net.openhft.chronicle.core.io.UnsafeText.append8bit(long address, byte[] bytes)",
                    "public static long net.openhft.chronicle.core.io.UnsafeText.append8bit(long address, char[] chars)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public static <T> CleaningThreadLocal<T> net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.withCleanup(Supplier<T> supplier, ThrowingConsumer<T, Exception> cleanup, Function<T, T> getWrapper)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "89948de718b6f51fc2ec110340cdb05cbf5ad55c",
        "previous_commit": "8175ff51b212c85300748a8459114f241b84404b",
        "date": 1639642336,
        "releases": {
            "previous": "89948de718b6f51fc2ec110340cdb05cbf5ad55c",
            "next": "89948de718b6f51fc2ec110340cdb05cbf5ad55c"
        },
        "commit_message": "Reduce the number of issues marked as Critical, Fix #293 (#295)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "89948de718b6f51fc2ec110340cdb05cbf5ad55c": {
                "src/main/java/net/openhft/chronicle/core/Memory.java": [
                    "static int sizeOf(Class<?> type)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public long net.openhft.chronicle.core.UnsafeMemory.partialRead(long addr, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(long address, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(Object object, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copy8bit(String s, int start, int length, long addr)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.isEqual(long addr, String s, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.write8bit(String s, int start, Object object, long offset, int length)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.partialRead(byte[] bytes, int offset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(long addr, long value, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(byte[] bytes, int offset, long value, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/cooler/CoolerTester.java": [
                    "public void net.openhft.chronicle.core.cooler.CoolerTester.run()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized boolean net.openhft.chronicle.core.io.DualReferenceCounted.tryReserve(ReferenceOwner id)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.release(ReferenceOwner id)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserve(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static byte[] net.openhft.chronicle.core.io.IOTools.readAsBytes(InputStream is)",
                    "private static <T> void net.openhft.chronicle.core.io.IOTools.unmonitor(Class<?> aClass, Object t, int depth)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.releaseLast(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.reserve(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.release(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread, CleaningThreadLocal ctl)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static long net.openhft.chronicle.core.util.StringUtils.parseLong(CharSequence s, int radix)",
                    "public static int net.openhft.chronicle.core.util.StringUtils.parseInt(CharSequence s, int radix)",
                    "public static double net.openhft.chronicle.core.util.StringUtils.parseDouble(@NotNull CharSequence in)"
                ]
            },
            "8175ff51b212c85300748a8459114f241b84404b": {
                "src/main/java/net/openhft/chronicle/core/Memory.java": [
                    "static int sizeOf(Class<?> type)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public long net.openhft.chronicle.core.UnsafeMemory.partialRead(long addr, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(long address, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(Object object, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copy8bit(String s, int start, int length, long addr)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.isEqual(long addr, String s, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.write8bit(String s, int start, Object object, long offset, int length)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.partialRead(byte[] bytes, int offset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(long addr, long value, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(byte[] bytes, int offset, long value, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/cooler/CoolerTester.java": [
                    "public void net.openhft.chronicle.core.cooler.CoolerTester.run()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized boolean net.openhft.chronicle.core.io.DualReferenceCounted.tryReserve(ReferenceOwner id)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.release(ReferenceOwner id)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserve(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static byte[] net.openhft.chronicle.core.io.IOTools.readAsBytes(InputStream is)",
                    "private static <T> void net.openhft.chronicle.core.io.IOTools.unmonitor(Class<?> aClass, Object t, int depth)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.releaseLast(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.reserve(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.release(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread, CleaningThreadLocal ctl)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static long net.openhft.chronicle.core.util.StringUtils.parseLong(CharSequence s, int radix)",
                    "public static int net.openhft.chronicle.core.util.StringUtils.parseInt(CharSequence s, int radix)",
                    "public static double net.openhft.chronicle.core.util.StringUtils.parseDouble(@NotNull CharSequence in)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d3d73e7dc297feed5210d249f4ab8e29c44957c8",
        "previous_commit": "df952436759350b3c5a754a238a0de26215352c7",
        "date": 1625232668,
        "releases": {
            "previous": "d3d73e7dc297feed5210d249f4ab8e29c44957c8",
            "next": "d3d73e7dc297feed5210d249f4ab8e29c44957c8"
        },
        "commit_message": "Add support for null objects to access native memory required by Chronicle-Algorythms. #234\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d3d73e7dc297feed5210d249f4ab8e29c44957c8": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileByte(Object object, long offset, byte b)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeShort(Object object, long offset, short i16)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(Object object, long offset)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readShort(Object object, long offset)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readVolatileDouble(Object object, long offset)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readVolatileShort(Object object, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long from, long to, int length)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.addLong(Object object, long offset, long increment)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.setInt(Object object, long offset, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeInt(Object object, long offset, int i32)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileFloat(Object object, long offset, float f)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readVolatileFloat(Object object, long offset)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readInt(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileDouble(Object object, long offset, double d)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeByte(Object object, long offset, byte b)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeLong(Object object, long offset, long i64)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileShort(Object object, long offset, short i16)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(Object object, long offset, int increment)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readVolatileByte(Object object, long offset)"
                ]
            },
            "df952436759350b3c5a754a238a0de26215352c7": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public short net.openhft.chronicle.core.UnsafeMemory.readVolatileShort(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeShort(@NotNull Object object, long offset, short i16)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(@NotNull Object object, long offset, int increment)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readVolatileFloat(@NotNull Object object, long offset)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readVolatileDouble(@NotNull Object object, long offset)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(@NotNull Object object, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long from, long to, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileFloat(@NotNull Object object, long offset, float f)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileByte(@NotNull Object object, long offset, byte b)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readInt(@NotNull Object object, long offset)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(@NotNull Object object, long offset)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readShort(@NotNull Object object, long offset)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readVolatileByte(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeByte(@NotNull Object object, long offset, byte b)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileDouble(@NotNull Object object, long offset, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeLong(@NotNull Object object, long offset, long i64)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileShort(@NotNull Object object, long offset, short i16)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.addLong(@NotNull Object object, long offset, long increment)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.setInt(@NotNull Object object, long offset, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeInt(@NotNull Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(@NotNull Object object, long offset, int i32)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c19ea98a84a0e0bd9153fbbec331f6cdcf3a1c91",
        "previous_commit": "b8c609669f91c23b9cae71e401132fa2b8827532",
        "date": 1536823622,
        "releases": {
            "previous": "c19ea98a84a0e0bd9153fbbec331f6cdcf3a1c91",
            "next": "c19ea98a84a0e0bd9153fbbec331f6cdcf3a1c91"
        },
        "commit_message": "Added ARM support for UnsafeMemory, https://github.com/OpenHFT/OpenHFT/issues/23\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c19ea98a84a0e0bd9153fbbec331f6cdcf3a1c91": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(long address)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(@NotNull Object object, long offset, int expected, int value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(@NotNull Object object, long offset)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(@NotNull Object object, long offset, long expected, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileShort(long address, short i16)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeFloat(@NotNull Object object, long offset, float f)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(long address, long i64)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readVolatileShort(long address)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(@NotNull Object object, long offset, long i)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readVolatileDouble(long address)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(long address, int expected, int value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(@NotNull Object object, long offset, double d)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readVolatileFloat(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileDouble(long address, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(long address, long i)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(@NotNull Object object, long offset, long i64)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileFloat(long address, float f)"
                ]
            },
            "b8c609669f91c23b9cae71e401132fa2b8827532": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(long address)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(@NotNull Object object, long offset, int expected, int value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(@NotNull Object object, long offset)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(@NotNull Object object, long offset, long expected, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileShort(long address, short i16)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeFloat(@NotNull Object object, long offset, float f)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(long address, long i64)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readVolatileShort(long address)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(@NotNull Object object, long offset, long i)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readVolatileDouble(long address)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(long address, int expected, int value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(@NotNull Object object, long offset, double d)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readVolatileFloat(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileDouble(long address, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(long address, long i)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(@NotNull Object object, long offset, long i64)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileFloat(long address, float f)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "90a1c0bd596d04b3bdd9e8f97ca0eb63ab212832",
        "previous_commit": "69c68dc7bc4b68a11783e449bc5da27d3adb29bd",
        "date": 1639560107,
        "releases": {
            "previous": "90a1c0bd596d04b3bdd9e8f97ca0eb63ab212832",
            "next": "90a1c0bd596d04b3bdd9e8f97ca0eb63ab212832"
        },
        "commit_message": "Issue/287 (#288)\n\n* Remove bugs in Jvm\r\n\r\n* Fix warning\r\n\r\n* Fix static constructor method\r\n\r\n* Fix issues in AbstractCloseable\r\n\r\n* Fix issues in AbstractReferenceCounted\r\n\r\n* Fix issues in BackgroundResourceReleaser\r\n\r\n* Fix issues in IOTools\r\n\r\n* Document method\r\n\r\n* Remove issues\r\n\r\n* Fix Hooklet and TL problem\r\n\r\n* Cleanup\r\n\r\n* Fix issues in StackSampler\r\n\r\n* Fix issues in ThreadDump\r\n\r\n* Fix issues marked as bugs and more\r\n\r\n* Fix remaining issues, Fix #287\r\n\r\n* Remove redundant throw\r\n\r\n* Add option for warning",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "90a1c0bd596d04b3bdd9e8f97ca0eb63ab212832": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void addToClassPath(@NotNull final Class<?> clazz)",
                    "public static void dumpException(@NotNull final Map<ExceptionKey, Integer> exceptions)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/ReflectionUtil.java": [
                    "public static Method net.openhft.chronicle.core.internal.analytics.ReflectionUtil.methodOrThrow(@NotNull final String className, @NotNull final String methodName, final Class<?>... parameterTypes)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.gcAndWaitForCloseablesToClose()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.unmonitor(ReferenceCounted counted)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "private static void runReleaseResources()",
                    "public static void stop()",
                    "public static void releasePendingResources()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static boolean net.openhft.chronicle.core.io.IOTools.deleteDirWithFiles(@NotNull File dir, int maxDepth)",
                    "public static InputStream net.openhft.chronicle.core.io.IOTools.open(URL url)"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/PrintExceptionHandler.java": [
                    "public void on(@NotNull Class clazz, String message, Throwable thrown)"
                ],
                "src/main/java/net/openhft/chronicle/core/shutdown/Hooklet.java": [
                    "public boolean net.openhft.chronicle.core.shutdown.Hooklet.equals(Object obj)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/OnDemandEventLoop.java": [
                    "EventLoop net.openhft.chronicle.core.threads.OnDemandEventLoop.eventLoop()"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/StackSampler.java": [
                    "public StackTraceElement[] net.openhft.chronicle.core.threads.StackSampler.getAndReset()"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "private static Map<String, Enum<?>> caseIgnoreLookup(@NotNull Class<?> c)",
                    "public static <E extends Enum<E>> E valueOfIgnoreCase(@NotNull Class<E> eClass, @NotNull String name)",
                    "public static Class primToWrapper(Class eClass)",
                    "private static Supplier<?> supplierForClass(Class<?> c)"
                ],
                "src/main/java/net/openhft/chronicle/core/watcher/FileSystemWatcher.java": [
                    "void net.openhft.chronicle.core.watcher.FileSystemWatcher.run()"
                ]
            },
            "69c68dc7bc4b68a11783e449bc5da27d3adb29bd": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void addToClassPath(@NotNull final Class<?> clazz)",
                    "public static void dumpException(@NotNull final Map<ExceptionKey, Integer> exceptions)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/ReflectionUtil.java": [
                    "public static Method net.openhft.chronicle.core.internal.analytics.ReflectionUtil.methodOrThrow(@NotNull final String className, @NotNull final String methodName, final Class<?>... parameterTypes)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.gcAndWaitForCloseablesToClose()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.unmonitor(ReferenceCounted counted)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "private static void runReleaseResources()",
                    "public static void stop()",
                    "public static void releasePendingResources()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static boolean net.openhft.chronicle.core.io.IOTools.deleteDirWithFiles(@NotNull File dir, int maxDepth)",
                    "public static InputStream net.openhft.chronicle.core.io.IOTools.open(URL url)"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/PrintExceptionHandler.java": [
                    "public void on(@NotNull Class clazz, String message, Throwable thrown)"
                ],
                "src/main/java/net/openhft/chronicle/core/shutdown/Hooklet.java": [
                    "public boolean net.openhft.chronicle.core.shutdown.Hooklet.equals(Object obj)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/OnDemandEventLoop.java": [
                    "EventLoop net.openhft.chronicle.core.threads.OnDemandEventLoop.eventLoop()"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/StackSampler.java": [
                    "public StackTraceElement[] net.openhft.chronicle.core.threads.StackSampler.getAndReset()"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static <E extends Enum<E>> E valueOfIgnoreCase(@NotNull Class<E> eClass, @NotNull String name)",
                    "public static Class primToWrapper(Class eClass)",
                    "private static Map<String, Enum> caseIgnoreLookup(@NotNull Class c)",
                    "private static Supplier supplierForClass(Class<?> c)"
                ],
                "src/main/java/net/openhft/chronicle/core/watcher/FileSystemWatcher.java": [
                    "void net.openhft.chronicle.core.watcher.FileSystemWatcher.run()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f498c847bc5eb06453636cd5ee15f3f342574aea",
        "previous_commit": "dc510340dde8f040c51a4e96b3795ef0fcd70885",
        "date": 1612365253,
        "releases": {
            "previous": "f498c847bc5eb06453636cd5ee15f3f342574aea",
            "next": "f498c847bc5eb06453636cd5ee15f3f342574aea"
        },
        "commit_message": "Cleanup the JVM class and make it a non-instantiable class\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f498c847bc5eb06453636cd5ee15f3f342574aea": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void net.openhft.chronicle.core.Jvm.validateClassMetrics(final Class<?> c, final int start, final int end)",
                    "private static void net.openhft.chronicle.core.Jvm.loadSystemProperties(final String name, final boolean wasSet)",
                    "public static boolean net.openhft.chronicle.core.Jvm.getBoolean(final String systemPropertyKey, final boolean defaultValue)",
                    "private static ClassMetrics net.openhft.chronicle.core.Jvm.getClassMetrics(final Class<?> c)",
                    "public static Map<ExceptionKey, Integer> net.openhft.chronicle.core.Jvm.recordExceptions(final boolean debug, final boolean exceptionsOnly, final boolean logToSlf4j)",
                    "private static void net.openhft.chronicle.core.Jvm.doNotCloseOnInterrupt9(final Class<?> clazz, final FileChannel fc)",
                    "private static int net.openhft.chronicle.core.Jvm.getCompileThreshold0()",
                    "public void net.openhft.chronicle.core.Jvm.interrupt()",
                    "private static void net.openhft.chronicle.core.Jvm.doNotCloseOnInterrupt8(final Class<?> clazz, final FileChannel fc)",
                    "public static long net.openhft.chronicle.core.Jvm.getSize(final String property, final long defaultValue)",
                    "private static boolean net.openhft.chronicle.core.Jvm.isAzulZing0()",
                    "private static MethodHandle net.openhft.chronicle.core.Jvm.get_setAccessible0_Method()",
                    "public static boolean net.openhft.chronicle.core.Jvm.isProcessAlive(long pid)",
                    "public static void net.openhft.chronicle.core.Jvm.dumpException(@NotNull final Map<ExceptionKey, Integer> exceptions)",
                    "public static void net.openhft.chronicle.core.Jvm.signalHandler(final SignalHandler signalHandler)",
                    "private static boolean net.openhft.chronicle.core.Jvm.isProcessAlive0(final long pid, final String command)",
                    "private static long net.openhft.chronicle.core.Jvm.maxDirectMemory0()",
                    "public static boolean net.openhft.chronicle.core.Jvm.hasException(@NotNull final Map<ExceptionKey, Integer> exceptions)",
                    "public static String net.openhft.chronicle.core.Jvm.lockWithStack(@NotNull final ReentrantLock lock)"
                ]
            },
            "dc510340dde8f040c51a4e96b3795ef0fcd70885": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void loadSystemProperties(String name, boolean wasSet)",
                    "private static void doNotCloseOnInterrupt8(Class clazz, FileChannel fc)",
                    "public static boolean isProcessAlive(long pid)",
                    "private static boolean isAzulZing0()",
                    "public static String lockWithStack(@NotNull ReentrantLock lock)",
                    "public static void signalHandler(SignalHandler signalHandler)",
                    "private static void doNotCloseOnInterrupt9(Class clazz, final FileChannel fc)",
                    "private static int getCompileThreshold0()",
                    "private static ClassMetrics getClassMetrics(Class<?> c)",
                    "public void net.openhft.chronicle.core.CommonInterruptible.interrupt()",
                    "public static long getSize(String property, long defaultValue)",
                    "public static boolean getBoolean(String systemPropertyKey, boolean defaultValue)",
                    "public static boolean hasException(@NotNull Map<ExceptionKey, Integer> exceptions)",
                    "public static Map<ExceptionKey, Integer> recordExceptions(boolean debug, boolean exceptionsOnly, boolean logToSlf4j)",
                    "private static void validateClassMetrics(Class c, int start, int end)",
                    "private static long maxDirectMemory0()",
                    "private static MethodHandle get_setAccessible0_Method()",
                    "public static void dumpException(@NotNull Map<ExceptionKey, Integer> exceptions)",
                    "private static boolean isProcessAlive0(long pid, String command)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b8c609669f91c23b9cae71e401132fa2b8827532",
        "previous_commit": "e98de07c8d4c449ba7eeb5876deceac69f8ee0c0",
        "date": 1536820481,
        "releases": {
            "previous": "b8c609669f91c23b9cae71e401132fa2b8827532",
            "next": "b8c609669f91c23b9cae71e401132fa2b8827532"
        },
        "commit_message": "Added ARM support for UnsafeMemory, https://github.com/OpenHFT/OpenHFT/issues/23\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b8c609669f91c23b9cae71e401132fa2b8827532": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileShort(long address, short i16)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(long address, long i64)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(long address)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readVolatileShort(long address)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(long address, long expected, long value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(long address, int i32)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readVolatileDouble(long address)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(long address, int expected, int value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(long address)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readVolatileFloat(long address)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileDouble(long address, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(long address, long i)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeFloat(long address, float f)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileFloat(long address, float f)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(long address, int increment)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(long address)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.addLong(long address, long increment)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(long address, double d)"
                ]
            },
            "e98de07c8d4c449ba7eeb5876deceac69f8ee0c0": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void writeOrderedLong(long address, long i)",
                    "public long readVolatileLong(long address)",
                    "public boolean compareAndSwapLong(long address, long expected, long value)",
                    "public double readVolatileDouble(long address)",
                    "public boolean compareAndSwapInt(long address, int expected, int value)",
                    "public double readDouble(long address)",
                    "public int readVolatileInt(long address)",
                    "public float readVolatileFloat(long address)",
                    "public short readVolatileShort(long address)",
                    "public void writeVolatileShort(long address, short i16)",
                    "public void writeFloat(long address, float f)",
                    "public int addInt(long address, int increment)",
                    "public float readFloat(long address)",
                    "public void writeVolatileFloat(long address, float f)",
                    "public void writeVolatileDouble(long address, double d)",
                    "public long addLong(long address, long increment)",
                    "public void writeVolatileLong(long address, long i64)",
                    "public void writeDouble(long address, double d)",
                    "public void writeVolatileInt(long address, int i32)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "3d54750213f018a941c91f1acc86676b6203dd81",
        "previous_commit": "11631f10f084d9d959bed9c0765dd6b62ad0209a",
        "date": 1654604035,
        "releases": {
            "previous": "3d54750213f018a941c91f1acc86676b6203dd81",
            "next": "3d54750213f018a941c91f1acc86676b6203dd81"
        },
        "commit_message": "Correct assertions, Fix #407 (#408)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3d54750213f018a941c91f1acc86676b6203dd81": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public static boolean net.openhft.chronicle.core.UnsafeMemory.unsafeGetBoolean(Object obj, long offset)",
                    "public static byte net.openhft.chronicle.core.UnsafeMemory.unsafeGetByte(Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutDouble(Object obj, long offset, double value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutFloat(Object obj, long offset, float value)",
                    "public static long net.openhft.chronicle.core.UnsafeMemory.unsafeGetLong(Object obj, long offset)",
                    "public static short net.openhft.chronicle.core.UnsafeMemory.unsafeGetShort(Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutObject(Object obj, long offset, Object value)",
                    "public static int net.openhft.chronicle.core.UnsafeMemory.unsafeGetInt(Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutBoolean(Object obj, long offset, boolean value)",
                    "public static char net.openhft.chronicle.core.UnsafeMemory.unsafeGetChar(Object obj, long offset)",
                    "public static double net.openhft.chronicle.core.UnsafeMemory.unsafeGetDouble(Object obj, long offset)",
                    "public static <T> T net.openhft.chronicle.core.UnsafeMemory.unsafeGetObject(Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(Object obj, long offset, byte value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutShort(Object obj, long offset, short value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(Object obj, long offset, int value)",
                    "public static float net.openhft.chronicle.core.UnsafeMemory.unsafeGetFloat(Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutChar(Object obj, long offset, char value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(Object obj, long offset, long value)"
                ]
            },
            "11631f10f084d9d959bed9c0765dd6b62ad0209a": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public static boolean net.openhft.chronicle.core.UnsafeMemory.unsafeGetBoolean(Object obj, long offset)",
                    "public static byte net.openhft.chronicle.core.UnsafeMemory.unsafeGetByte(Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutDouble(Object obj, long offset, double value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutFloat(Object obj, long offset, float value)",
                    "public static long net.openhft.chronicle.core.UnsafeMemory.unsafeGetLong(Object obj, long offset)",
                    "public static short net.openhft.chronicle.core.UnsafeMemory.unsafeGetShort(Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutObject(Object obj, long offset, Object value)",
                    "public static int net.openhft.chronicle.core.UnsafeMemory.unsafeGetInt(Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutBoolean(Object obj, long offset, boolean value)",
                    "public static char net.openhft.chronicle.core.UnsafeMemory.unsafeGetChar(Object obj, long offset)",
                    "public static double net.openhft.chronicle.core.UnsafeMemory.unsafeGetDouble(Object obj, long offset)",
                    "public static <T> T net.openhft.chronicle.core.UnsafeMemory.unsafeGetObject(Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(Object obj, long offset, byte value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutShort(Object obj, long offset, short value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(Object obj, long offset, int value)",
                    "public static float net.openhft.chronicle.core.UnsafeMemory.unsafeGetFloat(Object obj, long offset)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutChar(Object obj, long offset, char value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(Object obj, long offset, long value)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f982b6173d2847e0f57d4edaa78546ce096727d4",
        "previous_commit": "92cfb475c605778bd6c24ccbcf9d22e274d3bed4",
        "date": 1592234227,
        "releases": {
            "previous": "f982b6173d2847e0f57d4edaa78546ce096727d4",
            "next": "f982b6173d2847e0f57d4edaa78546ce096727d4"
        },
        "commit_message": "Add `throwExceptionIfClosed();` to most public methods for classes implementing Closeable, https://github.com/OpenHFT/Chronicle-Core/issues/116\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f982b6173d2847e0f57d4edaa78546ce096727d4": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.reserveTransfer(ReferenceOwner from, ReferenceOwner to)"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/FastJ8SocketChannel.java": [
                    "public void net.openhft.chronicle.core.tcp.FastJ8SocketChannel.configureBlocking(boolean blocking)",
                    "public int net.openhft.chronicle.core.tcp.FastJ8SocketChannel.write(ByteBuffer byteBuffer)",
                    "public int net.openhft.chronicle.core.tcp.FastJ8SocketChannel.read(ByteBuffer buf)"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/UnsafeFastJ8SocketChannel.java": [
                    "public int net.openhft.chronicle.core.tcp.UnsafeFastJ8SocketChannel.write(ByteBuffer buf)"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/VanillaSocketChannel.java": [
                    "public long net.openhft.chronicle.core.tcp.VanillaSocketChannel.write(ByteBuffer[] byteBuffer)",
                    "public int net.openhft.chronicle.core.tcp.VanillaSocketChannel.write(ByteBuffer byteBuffer)",
                    "public InetSocketAddress net.openhft.chronicle.core.tcp.VanillaSocketChannel.getLocalAddress()",
                    "public void net.openhft.chronicle.core.tcp.VanillaSocketChannel.configureBlocking(boolean blocking)",
                    "public SocketChannel net.openhft.chronicle.core.tcp.VanillaSocketChannel.socketChannel()",
                    "public int net.openhft.chronicle.core.tcp.VanillaSocketChannel.read(ByteBuffer byteBuffer)",
                    "public InetSocketAddress net.openhft.chronicle.core.tcp.VanillaSocketChannel.getRemoteAddress()"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/OnDemandEventLoop.java": [
                    "public void net.openhft.chronicle.core.threads.OnDemandEventLoop.stop()",
                    "public void net.openhft.chronicle.core.threads.OnDemandEventLoop.addHandler(EventHandler handler)",
                    "public void net.openhft.chronicle.core.threads.OnDemandEventLoop.start()",
                    "public void net.openhft.chronicle.core.threads.OnDemandEventLoop.unpause()"
                ]
            },
            "92cfb475c605778bd6c24ccbcf9d22e274d3bed4": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.reserveTransfer(ReferenceOwner from, ReferenceOwner to)"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/FastJ8SocketChannel.java": [
                    "public void net.openhft.chronicle.core.tcp.FastJ8SocketChannel.configureBlocking(boolean blocking)",
                    "public int net.openhft.chronicle.core.tcp.FastJ8SocketChannel.write(ByteBuffer byteBuffer)",
                    "public int net.openhft.chronicle.core.tcp.FastJ8SocketChannel.read(ByteBuffer buf)"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/UnsafeFastJ8SocketChannel.java": [
                    "public int net.openhft.chronicle.core.tcp.UnsafeFastJ8SocketChannel.write(ByteBuffer buf)"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/VanillaSocketChannel.java": [
                    "public long net.openhft.chronicle.core.tcp.VanillaSocketChannel.write(ByteBuffer[] byteBuffer)",
                    "public int net.openhft.chronicle.core.tcp.VanillaSocketChannel.write(ByteBuffer byteBuffer)",
                    "public InetSocketAddress net.openhft.chronicle.core.tcp.VanillaSocketChannel.getLocalAddress()",
                    "public void net.openhft.chronicle.core.tcp.VanillaSocketChannel.configureBlocking(boolean blocking)",
                    "public SocketChannel net.openhft.chronicle.core.tcp.VanillaSocketChannel.socketChannel()",
                    "public int net.openhft.chronicle.core.tcp.VanillaSocketChannel.read(ByteBuffer byteBuffer)",
                    "public InetSocketAddress net.openhft.chronicle.core.tcp.VanillaSocketChannel.getRemoteAddress()"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/OnDemandEventLoop.java": [
                    "public void net.openhft.chronicle.core.threads.OnDemandEventLoop.stop()",
                    "public void net.openhft.chronicle.core.threads.OnDemandEventLoop.addHandler(EventHandler handler)",
                    "public void net.openhft.chronicle.core.threads.OnDemandEventLoop.start()",
                    "public void net.openhft.chronicle.core.threads.OnDemandEventLoop.unpause()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f548dc0b1a273b636842e3e757892da2eb434e68",
        "previous_commit": "9fe5e24185d9c0a1730282a6c318b29f02b2ce48",
        "date": 1592482678,
        "releases": {
            "previous": "f548dc0b1a273b636842e3e757892da2eb434e68",
            "next": "f548dc0b1a273b636842e3e757892da2eb434e68"
        },
        "commit_message": "Cody tidy and optimise the tracing code.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f548dc0b1a273b636842e3e757892da2eb434e68": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()",
                    "protected boolean net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.release(ReferenceOwner id)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserve(ReferenceOwner id)",
                    "public synchronized boolean net.openhft.chronicle.core.io.DualReferenceCounted.tryReserve(ReferenceOwner id)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserveTransfer(ReferenceOwner from, ReferenceOwner to)",
                    "public int net.openhft.chronicle.core.io.DualReferenceCounted.refCount()",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.releaseLast(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static byte[] readAsBytes(InputStream is)"
                ],
                "src/main/java/net/openhft/chronicle/core/time/SetTimeProvider.java": [
                    "public SetTimeProvider net.openhft.chronicle.core.time.SetTimeProvider.advanceNanos(long nanos)",
                    "public String net.openhft.chronicle.core.time.SetTimeProvider.toString()",
                    "public long net.openhft.chronicle.core.time.SetTimeProvider.currentTimeMillis()",
                    "public long net.openhft.chronicle.core.time.SetTimeProvider.currentTimeNanos()",
                    "public void net.openhft.chronicle.core.time.SetTimeProvider.currentTimeNanos(long nanos)",
                    "public long net.openhft.chronicle.core.time.SetTimeProvider.currentTimeMicros()"
                ]
            },
            "9fe5e24185d9c0a1730282a6c318b29f02b2ce48": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()",
                    "protected boolean net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.release(ReferenceOwner id)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserve(ReferenceOwner id)",
                    "public synchronized boolean net.openhft.chronicle.core.io.DualReferenceCounted.tryReserve(ReferenceOwner id)",
                    "public synchronized int net.openhft.chronicle.core.io.DualReferenceCounted.refCount()",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserveTransfer(ReferenceOwner from, ReferenceOwner to)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.releaseLast(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static byte[] readAsBytes(InputStream is)"
                ],
                "src/main/java/net/openhft/chronicle/core/time/SetTimeProvider.java": [
                    "public SetTimeProvider net.openhft.chronicle.core.time.SetTimeProvider.advanceNanos(long nanos)",
                    "public String net.openhft.chronicle.core.time.SetTimeProvider.toString()",
                    "public long net.openhft.chronicle.core.time.SetTimeProvider.currentTimeMillis()",
                    "public long net.openhft.chronicle.core.time.SetTimeProvider.currentTimeNanos()",
                    "public void net.openhft.chronicle.core.time.SetTimeProvider.currentTimeNanos(long nanos)",
                    "public long net.openhft.chronicle.core.time.SetTimeProvider.currentTimeMicros()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "3360628a3a969f9bbf7352269f956700f945ff31",
        "previous_commit": "b4dd88b22311bf934912928c3f40ddb63bec9aa7",
        "date": 1647003307,
        "releases": {
            "previous": "3360628a3a969f9bbf7352269f956700f945ff31",
            "next": "3360628a3a969f9bbf7352269f956700f945ff31"
        },
        "commit_message": "ChronicleInit, migrate most system property access to Jvm methods\n\ncloses #354\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3360628a3a969f9bbf7352269f956700f945ff31": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void net.openhft.chronicle.core.Jvm.addToClassPath(@NotNull final Class<?> clazz)",
                    "public static double net.openhft.chronicle.core.Jvm.getDouble(final String systemPropertyKey, final double defaultValue)",
                    "public static boolean net.openhft.chronicle.core.Jvm.getBoolean(final String systemPropertyKey, final boolean defaultValue)",
                    "public static long net.openhft.chronicle.core.Jvm.getSize(final String property, final long defaultValue)",
                    "private static boolean net.openhft.chronicle.core.Jvm.is64bit0()",
                    "private static void net.openhft.chronicle.core.Jvm.findAndLoadSystemProperties()"
                ],
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class<?> caller)"
                ],
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static String net.openhft.chronicle.core.OS.findDir(@NotNull String suffix)",
                    "private static String net.openhft.chronicle.core.OS.findTarget()",
                    "private static String net.openhft.chronicle.core.OS.findTmp()",
                    "private static boolean net.openhft.chronicle.core.OS.is64Bit0()"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/StandardMaps.java": [
                    "private static Map.Entry<String, String> net.openhft.chronicle.core.internal.analytics.StandardMaps.entryFor(@NotNull final String systemProperty)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/announcer/InternalAnnouncer.java": [
                    "private static void net.openhft.chronicle.core.internal.announcer.InternalAnnouncer.announceJvm()"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/WebExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.WebExceptionHandler.on(@NotNull Class<?> clazz, @Nullable String message, @Nullable Throwable t)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/MonitorProfileAnalyserMain.java": [
                    "public static void net.openhft.chronicle.core.threads.MonitorProfileAnalyserMain.main(String[] args)"
                ]
            },
            "b4dd88b22311bf934912928c3f40ddb63bec9aa7": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void net.openhft.chronicle.core.Jvm.addToClassPath(@NotNull final Class<?> clazz)",
                    "public static double net.openhft.chronicle.core.Jvm.getDouble(final String systemPropertyKey, final double defaultValue)",
                    "public static boolean net.openhft.chronicle.core.Jvm.getBoolean(final String systemPropertyKey, final boolean defaultValue)",
                    "public static long net.openhft.chronicle.core.Jvm.getSize(final String property, final long defaultValue)",
                    "private static boolean net.openhft.chronicle.core.Jvm.is64bit0()",
                    "private static void net.openhft.chronicle.core.Jvm.findAndLoadSystemProperties()"
                ],
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class<?> caller)"
                ],
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static String net.openhft.chronicle.core.OS.findDir(@NotNull String suffix)",
                    "private static String net.openhft.chronicle.core.OS.findTarget()",
                    "private static String net.openhft.chronicle.core.OS.findTmp()",
                    "private static boolean net.openhft.chronicle.core.OS.is64Bit0()"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/StandardMaps.java": [
                    "private static Map.Entry<String, String> net.openhft.chronicle.core.internal.analytics.StandardMaps.entryFor(@NotNull final String systemProperty)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/announcer/InternalAnnouncer.java": [
                    "private static void net.openhft.chronicle.core.internal.announcer.InternalAnnouncer.announceJvm()"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/WebExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.WebExceptionHandler.on(@NotNull Class<?> clazz, @Nullable String message, @Nullable Throwable t)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/MonitorProfileAnalyserMain.java": [
                    "public static void net.openhft.chronicle.core.threads.MonitorProfileAnalyserMain.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "514e182378c4118bba609469314a27c104eecb34",
        "previous_commit": "4f7b5c1679a633d13a87a7c8aa27e94cacec7d06",
        "date": 1605271039,
        "releases": {
            "previous": "514e182378c4118bba609469314a27c104eecb34",
            "next": "514e182378c4118bba609469314a27c104eecb34"
        },
        "commit_message": "Introduce constants\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "514e182378c4118bba609469314a27c104eecb34": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void findAndLoadSystemProperties()"
                ],
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static short toInt16(long x)",
                    "public static byte toInt8(long x)",
                    "public static int toUInt16(long x)",
                    "public static short toUInt8(long x)",
                    "public static long toUInt32(long x)",
                    "public static int toUInt31(long x)",
                    "public static int toInt32(long x)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(long address, long expected, long value)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(@NotNull Object object, long offset, int expected, int value)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(long address, int increment)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(@NotNull Object object, long offset, long expected, long value)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(long address, int expected, int value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.addLong(long address, long increment)"
                ]
            },
            "4f7b5c1679a633d13a87a7c8aa27e94cacec7d06": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void findAndLoadSystemProperties()"
                ],
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static short toInt16(long x)",
                    "public static byte toInt8(long x)",
                    "public static int toUInt16(long x)",
                    "public static short toUInt8(long x)",
                    "public static long toUInt32(long x)",
                    "public static int toUInt31(long x)",
                    "public static int toInt32(long x)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(long address, long expected, long value)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(@NotNull Object object, long offset, int expected, int value)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.addInt(long address, int increment)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(@NotNull Object object, long offset, long expected, long value)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(long address, int expected, int value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.addLong(long address, long increment)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "126c5da84ad4eb0c36e02e50656bd3ce7a7a45b6",
        "previous_commit": "019375c37a4fe0edc52412560762abe64ecd483e",
        "date": 1608045615,
        "releases": {
            "previous": "126c5da84ad4eb0c36e02e50656bd3ce7a7a45b6",
            "next": "126c5da84ad4eb0c36e02e50656bd3ce7a7a45b6"
        },
        "commit_message": "Add Null checking where applicable, work on #151\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "126c5da84ad4eb0c36e02e50656bd3ce7a7a45b6": {
                "src/main/java/net/openhft/chronicle/core/analytics/AnalyticsFacade.java": [
                    "static Map<String, String> standardEventParameters(@NotNull final String appVersion)",
                    "static Builder standardBuilder(@NotNull final String measurementId, @NotNull final String apiSecret, @NotNull final String appVersion)",
                    "static Builder builder(@NotNull final String measurementId, @NotNull final String apiSecret)"
                ],
                "src/main/java/net/openhft/chronicle/core/announcer/Announcer.java": [
                    "public static void net.openhft.chronicle.core.announcer.Announcer.announce(@NotNull final String groupId, @NotNull final String artifactId, @NotNull final Map<String, String> properties)",
                    "public static void net.openhft.chronicle.core.announcer.Announcer.announce(@NotNull final String groupId, @NotNull final String artifactId)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/MuteAnalytics.java": [
                    "public void sendEvent(@NotNull String name, @NotNull Map<String, String> additionalEventParameters)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/ReflectionUtil.java": [
                    "public static Object net.openhft.chronicle.core.internal.analytics.ReflectionUtil.analyticsBuilder(@NotNull final String measurementId, @NotNull final String apiSecret)",
                    "public static <T> T net.openhft.chronicle.core.internal.analytics.ReflectionUtil.reflectiveProxy(@NotNull final Class<T> interf, @NotNull final Object delegate)",
                    "public static Method net.openhft.chronicle.core.internal.analytics.ReflectionUtil.methodOrThrow(@NotNull final String className, @NotNull final String methodName, final Class<?>... parameterTypes)",
                    "public static <T> T net.openhft.chronicle.core.internal.analytics.ReflectionUtil.reflectiveProxy(@NotNull final Class<T> interf, @NotNull final Object delegate, final boolean returnProxy)",
                    "public Object net.openhft.chronicle.core.internal.analytics.ReflectionUtil.invoke(final Object proxy, final Method method, final Object[] args)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/ReflectiveAnalytics.java": [
                    "public void net.openhft.chronicle.core.internal.analytics.ReflectiveAnalytics.sendEvent(@NotNull final String name, @NotNull final Map<String, String> additionalEventParameters)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/StandardMaps.java": [
                    "static Map<String, String> standardAdditionalEventParameters(@NotNull final StackTraceElement[] stackTraceElements)",
                    "public static Map<String, String> standardEventParameters(@NotNull final String appVersion)"
                ]
            },
            "019375c37a4fe0edc52412560762abe64ecd483e": {
                "src/main/java/net/openhft/chronicle/core/analytics/AnalyticsFacade.java": [
                    "static Map<String, String> standardEventParameters(@NotNull final String appVersion)",
                    "static Builder standardBuilder(@NotNull final String measurementId, @NotNull final String apiSecret, @NotNull final String appVersion)",
                    "static Builder builder(@NotNull final String measurementId, @NotNull final String apiSecret)"
                ],
                "src/main/java/net/openhft/chronicle/core/announcer/Announcer.java": [
                    "public static void net.openhft.chronicle.core.announcer.Announcer.announce(@NotNull final String groupId, @NotNull final String artifactId, @NotNull final Map<String, String> properties)",
                    "public static void net.openhft.chronicle.core.announcer.Announcer.announce(@NotNull final String groupId, @NotNull final String artifactId)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/MuteAnalytics.java": [
                    "public void sendEvent(@NotNull String name, @NotNull Map<String, String> additionalEventParameters)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/ReflectionUtil.java": [
                    "public static Object net.openhft.chronicle.core.internal.analytics.ReflectionUtil.analyticsBuilder(@NotNull final String measurementId, @NotNull final String apiSecret)",
                    "public static <T> T net.openhft.chronicle.core.internal.analytics.ReflectionUtil.reflectiveProxy(@NotNull final Class<T> interf, @NotNull final Object delegate)",
                    "public static Method net.openhft.chronicle.core.internal.analytics.ReflectionUtil.methodOrThrow(@NotNull final String className, @NotNull final String methodName, final Class<?>... parameterTypes)",
                    "public static <T> T net.openhft.chronicle.core.internal.analytics.ReflectionUtil.reflectiveProxy(@NotNull final Class<T> interf, @NotNull final Object delegate, final boolean returnProxy)",
                    "public Object net.openhft.chronicle.core.internal.analytics.ReflectionUtil.invoke(final Object proxy, final Method method, final Object[] args)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/ReflectiveAnalytics.java": [
                    "public void net.openhft.chronicle.core.internal.analytics.ReflectiveAnalytics.sendEvent(@NotNull final String name, @NotNull final Map<String, String> additionalEventParameters)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/StandardMaps.java": [
                    "static Map<String, String> standardAdditionalEventParameters(final StackTraceElement[] stackTraceElements)",
                    "public static Map<String, String> standardEventParameters(@NotNull final String appVersion)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c2cc7e9e1303abb48096acdb77385dfa55f7df86",
        "previous_commit": "24fabd5c0cd2595c3425b6d55611e7279187bdd5",
        "date": 1531983698,
        "releases": {
            "previous": "c2cc7e9e1303abb48096acdb77385dfa55f7df86",
            "next": "c2cc7e9e1303abb48096acdb77385dfa55f7df86"
        },
        "commit_message": "Simplify the upper bounds check for rounding.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c2cc7e9e1303abb48096acdb77385dfa55f7df86": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double round5(double d)",
                    "public static double roundN(double d, double digits)",
                    "public static double ceilN(double d, int digits)",
                    "public static double round6(double d)",
                    "public static double round7(double d)",
                    "public static double roundN(double d, int digits)",
                    "public static double floorN(double d, int digits)",
                    "public static double floorN(double d, double digits)",
                    "public static double round1(double d)",
                    "public static double round2(double d)",
                    "public static double round8(double d)",
                    "public static double ceilN(double d, double digits)",
                    "public static double round3(double d)",
                    "public static double round4(double d)"
                ]
            },
            "24fabd5c0cd2595c3425b6d55611e7279187bdd5": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double round5(double d)",
                    "public static double roundN(double d, double digits)",
                    "public static double ceilN(double d, int digits)",
                    "public static double round6(double d)",
                    "public static double round7(double d)",
                    "public static double roundN(double d, int digits)",
                    "public static double floorN(double d, int digits)",
                    "public static double floorN(double d, double digits)",
                    "public static double round1(double d)",
                    "public static double round2(double d)",
                    "public static double round8(double d)",
                    "public static double ceilN(double d, double digits)",
                    "public static double round3(double d)",
                    "public static double round4(double d)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "70285ed6aef7447081874dd14159b1bbd15b079a",
        "previous_commit": "21deb351345ab4bee8cbf7d08ba90fca91aa2a26",
        "date": 1623934116,
        "releases": {
            "previous": "70285ed6aef7447081874dd14159b1bbd15b079a",
            "next": "70285ed6aef7447081874dd14159b1bbd15b079a"
        },
        "commit_message": "drop @ForceInline\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "70285ed6aef7447081874dd14159b1bbd15b079a": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(Object o, long offset, Object o2, long offset2, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long fromAddress, Object obj2, long offset2, int length)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.backwardCopyMemoryLoop(Object o, long offset, Object o2, long offset2, int length)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.copyMemoryLoop(Object o, long offset, Object o2, long offset2, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long net.openhft.chronicle.core.io.UnsafeText.append8bit(long address, byte[] bytes)",
                    "protected static void net.openhft.chronicle.core.io.UnsafeText.reverseTheOrder(long address, long start)",
                    "protected static long net.openhft.chronicle.core.io.UnsafeText.appendIntegerAndFraction(long address, double d, int sign, long mantissa, int shift)",
                    "public static long net.openhft.chronicle.core.io.UnsafeText.append8bit(long address, char[] chars)",
                    "protected static long net.openhft.chronicle.core.io.UnsafeText.appendFraction(long address, double d, int sign, long mantissa, int shift)",
                    "public static long net.openhft.chronicle.core.io.UnsafeText.appendBase10d(long address, long num, int decimal)",
                    "public static long net.openhft.chronicle.core.io.UnsafeText.appendFixed(long address, long num)",
                    "protected static long net.openhft.chronicle.core.io.UnsafeText.appendLargeNumber(long address, long mantissa, int shift)",
                    "private static long net.openhft.chronicle.core.io.UnsafeText.appendText(long address, String s)",
                    "public static long net.openhft.chronicle.core.io.UnsafeText.appendDouble(long address, double d)"
                ]
            },
            "21deb351345ab4bee8cbf7d08ba90fca91aa2a26": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(Object o, long offset, Object o2, long offset2, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long fromAddress, Object obj2, long offset2, int length)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.backwardCopyMemoryLoop(Object o, long offset, Object o2, long offset2, int length)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.copyMemoryLoop(Object o, long offset, Object o2, long offset2, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long net.openhft.chronicle.core.io.UnsafeText.append8bit(long address, byte[] bytes)",
                    "protected static void net.openhft.chronicle.core.io.UnsafeText.reverseTheOrder(long address, long start)",
                    "protected static long net.openhft.chronicle.core.io.UnsafeText.appendIntegerAndFraction(long address, double d, int sign, long mantissa, int shift)",
                    "public static long net.openhft.chronicle.core.io.UnsafeText.append8bit(long address, char[] chars)",
                    "protected static long net.openhft.chronicle.core.io.UnsafeText.appendFraction(long address, double d, int sign, long mantissa, int shift)",
                    "public static long net.openhft.chronicle.core.io.UnsafeText.appendBase10d(long address, long num, int decimal)",
                    "public static long net.openhft.chronicle.core.io.UnsafeText.appendFixed(long address, long num)",
                    "protected static long net.openhft.chronicle.core.io.UnsafeText.appendLargeNumber(long address, long mantissa, int shift)",
                    "private static long net.openhft.chronicle.core.io.UnsafeText.appendText(long address, String s)",
                    "public static long net.openhft.chronicle.core.io.UnsafeText.appendDouble(long address, double d)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "448c0e482271eab3c03c7ee1d74ab45886249be7",
        "previous_commit": "c4ab73a8468d7da56a499cb68cf4a775988e6a8e",
        "date": 1591901508,
        "releases": {
            "previous": "448c0e482271eab3c03c7ee1d74ab45886249be7",
            "next": "448c0e482271eab3c03c7ee1d74ab45886249be7"
        },
        "commit_message": "Standardize how ReferenceCounted resources are managed and traced, https://github.com/OpenHFT/Chronicle-Core/issues/121\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "448c0e482271eab3c03c7ee1d74ab45886249be7": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.enableCloseableTracing()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.disableCloseableTracing()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public boolean net.openhft.chronicle.core.io.AbstractReferenceCounted.tryReserve(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.reserve(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.releaseLast(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "public String net.openhft.chronicle.core.io.TracingReferenceCounted.toString()",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.reserve(ReferenceOwner id)",
                    "public List<String> net.openhft.chronicle.core.io.TracingReferenceCounted.referencesAsString()",
                    "public boolean net.openhft.chronicle.core.io.TracingReferenceCounted.tryReserve(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.release(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            },
            "c4ab73a8468d7da56a499cb68cf4a775988e6a8e": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.enableCloseableTracing()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.disableCloseableTracing()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public boolean net.openhft.chronicle.core.io.AbstractReferenceCounted.tryReserve(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.reserve(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.releaseLast(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "public String net.openhft.chronicle.core.io.TracingReferenceCounted.toString()",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.reserve(ReferenceOwner id)",
                    "public List<String> net.openhft.chronicle.core.io.TracingReferenceCounted.referencesAsString()",
                    "public boolean net.openhft.chronicle.core.io.TracingReferenceCounted.tryReserve(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.release(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8843d8e5c4ee8aab92ef29c54a715ec00d1d419e",
        "previous_commit": "dc7ce41b6e349908d586484da3e41ebfd33bb833",
        "date": 1641941288,
        "releases": {
            "previous": "8843d8e5c4ee8aab92ef29c54a715ec00d1d419e",
            "next": "8843d8e5c4ee8aab92ef29c54a715ec00d1d419e"
        },
        "commit_message": "Introduce micro-optimization, Fix #336 (#338)\n\n* Introduce micro-optimization, Fix #336\r\n\r\n* Remove redundant cast",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8843d8e5c4ee8aab92ef29c54a715ec00d1d419e": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeBytes(long address, byte[] b, int offset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(byte[] bytes, int offset, long value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(byte[] bytes, int offset, byte value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] src, int srcOffset, byte[] dest, int destOffset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.readBytes(long address, byte[] b, long offset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] src, int srcOffset, long dest, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(char[] chars, int offset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.putInt(byte[] bytes, int offset, int value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.partialRead(byte[] bytes, int offset, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(byte[] bytes, int offset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] src, int srcOffset, @Nullable Object dest, long destOffset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(byte[] bytes, int offset, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(byte[] bytes, int offset, long value, int length)"
                ]
            },
            "dc7ce41b6e349908d586484da3e41ebfd33bb833": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeBytes(long address, byte[] b, int offset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutLong(byte[] bytes, int offset, long value)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutByte(byte[] bytes, int offset, byte value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] src, int srcOffset, byte[] dest, int destOffset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.readBytes(long address, byte[] b, long offset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] src, int srcOffset, long dest, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(char[] chars, int offset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.putInt(byte[] bytes, int offset, int value)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.partialRead(byte[] bytes, int offset, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(byte[] bytes, int offset, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] src, int srcOffset, @Nullable Object dest, long destOffset, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.unsafePutInt(byte[] bytes, int offset, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.partialWrite(byte[] bytes, int offset, long value, int length)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "6e3739d6242bb1aab7e5072be045ea4fe597316e",
        "previous_commit": "2f1e18c455a4fbde8a19acc70b597c46e1c70bf0",
        "date": 1689090941,
        "releases": {
            "previous": "6e3739d6242bb1aab7e5072be045ea4fe597316e",
            "next": "6e3739d6242bb1aab7e5072be045ea4fe597316e"
        },
        "commit_message": "Remove AssertionError that should never happen to improve code coverage, and simplify code (#544)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "6e3739d6242bb1aab7e5072be045ea4fe597316e": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static long net.openhft.chronicle.core.Maths.hash64(@Nullable CharSequence cs)"
                ],
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "private static Object net.openhft.chronicle.core.Mocker.newProxyInstance(ClassLoader classLoader, Class<?>[] classes, AbstractInvocationHandler handler)",
                    "public static <T> T net.openhft.chronicle.core.Mocker.intercepting(@NotNull Class<T> interfaceType, @NotNull BiConsumer<String, Object[]> consumer, T t)"
                ],
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long net.openhft.chronicle.core.OS.getPidMax()"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public boolean net.openhft.chronicle.core.pool.ClassAliasPool.equals(Object obj)",
                    "public int net.openhft.chronicle.core.pool.ClassAliasPool.hashCode()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/CharSequenceComparator.java": [
                    "public int compare(@NotNull CharSequence o1, @NotNull CharSequence o2)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "static int net.openhft.chronicle.core.util.ObjectUtils.sizeOf(Object o)",
                    "static <E> E net.openhft.chronicle.core.util.ObjectUtils.convertTo0(Class<E> eClass, @Nullable Object o)",
                    "private static <E> E net.openhft.chronicle.core.util.ObjectUtils.convertToArray(@NotNull Class<E> eClass, Object o)",
                    "public static boolean net.openhft.chronicle.core.util.ObjectUtils.isTrue(CharSequence s)",
                    "public static Class<?>[] net.openhft.chronicle.core.util.ObjectUtils.getAllInterfaces(Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "private static char net.openhft.chronicle.core.util.StringUtils.charAt(@NotNull CharSequence s, int i)"
                ]
            },
            "2f1e18c455a4fbde8a19acc70b597c46e1c70bf0": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static long net.openhft.chronicle.core.Maths.hash64(@Nullable CharSequence cs)"
                ],
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "private static Object net.openhft.chronicle.core.Mocker.newProxyInstance(ClassLoader classLoader, Class<?>[] classes, AbstractInvocationHandler handler)",
                    "public static <T> T net.openhft.chronicle.core.Mocker.intercepting(@NotNull Class<T> interfaceType, @NotNull BiConsumer<String, Object[]> consumer, T t)"
                ],
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long net.openhft.chronicle.core.OS.getPidMax()"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public boolean net.openhft.chronicle.core.pool.ClassAliasPool.equals(Object obj)",
                    "public int net.openhft.chronicle.core.pool.ClassAliasPool.hashCode()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/CharSequenceComparator.java": [
                    "public int compare(@NotNull CharSequence o1, @NotNull CharSequence o2)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "static int net.openhft.chronicle.core.util.ObjectUtils.sizeOf(Object o)",
                    "static <E> E net.openhft.chronicle.core.util.ObjectUtils.convertTo0(Class<E> eClass, @Nullable Object o)",
                    "private static <E> E net.openhft.chronicle.core.util.ObjectUtils.convertToArray(@NotNull Class<E> eClass, Object o)",
                    "public static boolean net.openhft.chronicle.core.util.ObjectUtils.isTrue(CharSequence s)",
                    "public static Class<?>[] net.openhft.chronicle.core.util.ObjectUtils.getAllInterfaces(Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "private static char net.openhft.chronicle.core.util.StringUtils.charAt(@NotNull CharSequence s, int i)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "5b1f19fefadc6fff352f7eccee3f7d4666424e24",
        "previous_commit": "d51a187fc5991be0be04725f61258e2adac3f870",
        "date": 1598175957,
        "releases": {
            "previous": "5b1f19fefadc6fff352f7eccee3f7d4666424e24",
            "next": "5b1f19fefadc6fff352f7eccee3f7d4666424e24"
        },
        "commit_message": "Added a sub exception ClosedIllegalStateException to identify when a closed/released resource was used. Closes https://github.com/OpenHFT/Chronicle-Core/issues/134\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5b1f19fefadc6fff352f7eccee3f7d4666424e24": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosedInSetter()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosedInSetter()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "private boolean net.openhft.chronicle.core.io.TracingReferenceCounted.tryReserve(ReferenceOwner id, boolean must)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfNotReleased()",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.releaseLast(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.reserve(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.release(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.callOnRelease()"
                ]
            },
            "d51a187fc5991be0be04725f61258e2adac3f870": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosedInSetter()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosedInSetter()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "private boolean net.openhft.chronicle.core.io.TracingReferenceCounted.tryReserve(ReferenceOwner id, boolean must)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfNotReleased()",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.releaseLast(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.reserve(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.release(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.callOnRelease()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8721628a51bb76a4a9438dd913b502c5e97c1da1",
        "previous_commit": "2016c5c068488ccbeffdbe7512a1767ae003c993",
        "date": 1686242452,
        "releases": {
            "previous": "8721628a51bb76a4a9438dd913b502c5e97c1da1",
            "next": "8721628a51bb76a4a9438dd913b502c5e97c1da1"
        },
        "commit_message": "Sonar (#527)\n\n* Improve checking of tests\r\n\r\n* Sonar quality checks",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8721628a51bb76a4a9438dd913b502c5e97c1da1": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static <A extends Annotation> A net.openhft.chronicle.core.Jvm.findAnnotation(AnnotatedElement ae, Class<A> annotationType, Set<Annotation> visited)"
                ],
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double net.openhft.chronicle.core.Maths.asDouble(@NonNegative long value, int exponent, boolean negative, int decimalPlaces)"
                ],
                "src/main/java/net/openhft/chronicle/core/cooler/CoolerTester.java": [
                    "public void net.openhft.chronicle.core.cooler.CoolerTester.run()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfNotReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/shutdown/PriorityHook.java": [
                    "public static synchronized void net.openhft.chronicle.core.shutdown.PriorityHook.clear()"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)",
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread, CleaningThreadLocal<?> ctl)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static void net.openhft.chronicle.core.util.ObjectUtils.getAllInterfaces(Object o, Function<Class<?>, Boolean> accumulator)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static boolean net.openhft.chronicle.core.util.StringUtils.isEqual(@Nullable StringBuilder s, @Nullable CharSequence cs)"
                ]
            },
            "2016c5c068488ccbeffdbe7512a1767ae003c993": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static <A extends Annotation> A net.openhft.chronicle.core.Jvm.findAnnotation(AnnotatedElement ae, Class<A> annotationType, Set<Annotation> visited)"
                ],
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double net.openhft.chronicle.core.Maths.asDouble(@NonNegative long value, int exponent, boolean negative, int decimalPlaces)"
                ],
                "src/main/java/net/openhft/chronicle/core/cooler/CoolerTester.java": [
                    "public void net.openhft.chronicle.core.cooler.CoolerTester.run()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfNotReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/shutdown/PriorityHook.java": [
                    "public static synchronized void net.openhft.chronicle.core.shutdown.PriorityHook.clear()"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)",
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread, CleaningThreadLocal<?> ctl)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static void net.openhft.chronicle.core.util.ObjectUtils.getAllInterfaces(Object o, Function<Class<?>, Boolean> accumulator)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static boolean net.openhft.chronicle.core.util.StringUtils.isEqual(@Nullable StringBuilder s, @Nullable CharSequence cs)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d5e62024e24fc556c2e02007f040405546167293",
        "previous_commit": "ba48deb0c75288a57169716bdd8b6a57d27e3955",
        "date": 1655306141,
        "releases": {
            "previous": "d5e62024e24fc556c2e02007f040405546167293",
            "next": "d5e62024e24fc556c2e02007f040405546167293"
        },
        "commit_message": "Added SingleThreadedChecked to make resetting and disabling this chec\u2026 (#410)\n\n* Added SingleThreadedChecked to make resetting and disabling this check more consistent #409\r\n\r\n* Added SingleThreadedChecked to make resetting and disabling this check more consistent #409\r\n\r\n* Added SingleThreadedChecked to make resetting and disabling this check more consistent #409\r\n\r\nCo-authored-by: Peter Lawrey <peter.lawrey@chronicle.software>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d5e62024e24fc556c2e02007f040405546167293": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck(boolean isUsed)",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.clearUsedByThread()",
                    "public AbstractCloseable net.openhft.chronicle.core.io.AbstractCloseable.disableThreadSafetyCheck(boolean disableThreadSafetyCheck)",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosedInSetter()",
                    "public static boolean net.openhft.chronicle.core.io.AbstractCloseable.waitForCloseablesToClose(long millis)",
                    "public boolean net.openhft.chronicle.core.io.AbstractCloseable.disableThreadSafetyCheck()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.resetUsedByThread()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosedInSetter()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "protected boolean net.openhft.chronicle.core.io.AbstractReferenceCounted.threadSafetyCheck(boolean isUsed)"
                ]
            },
            "ba48deb0c75288a57169716bdd8b6a57d27e3955": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck(boolean isUsed)",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.clearUsedByThread()",
                    "public AbstractCloseable net.openhft.chronicle.core.io.AbstractCloseable.disableThreadSafetyCheck(boolean disableThreadSafetyCheck)",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosedInSetter()",
                    "public static boolean net.openhft.chronicle.core.io.AbstractCloseable.waitForCloseablesToClose(long millis)",
                    "public boolean net.openhft.chronicle.core.io.AbstractCloseable.disableThreadSafetyCheck()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.resetUsedByThread()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosedInSetter()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "protected boolean net.openhft.chronicle.core.io.AbstractReferenceCounted.threadSafetyCheck(boolean isUsed)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d5e119306a075189f06ccfd879a49727b6cc0943",
        "previous_commit": "e65231eb0ae194ee6244c4d01eb6342b51db0c6b",
        "date": 1625234218,
        "releases": {
            "previous": "d5e119306a075189f06ccfd879a49727b6cc0943",
            "next": "d5e119306a075189f06ccfd879a49727b6cc0943"
        },
        "commit_message": "Add support for null objects to access native memory required by Chronicle-Algorythms. #234\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d5e119306a075189f06ccfd879a49727b6cc0943": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(Object object, long offset, long i)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(Object object, long offset, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeFloat(Object object, long offset, float f)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(Object object, long offset, long expected, long value)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(Object object, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(Object object, long offset, int i32)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(Object object, long offset, long i64)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(Object object, long offset)"
                ]
            },
            "e65231eb0ae194ee6244c4d01eb6342b51db0c6b": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(Object object, long offset, long i)",
                    "public double net.openhft.chronicle.core.UnsafeMemory.readDouble(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeDouble(Object object, long offset, double d)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeFloat(Object object, long offset, float f)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapLong(Object object, long offset, long expected, long value)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(Object object, long offset, int expected, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(Object object, long offset, int i32)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readVolatileLong(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileLong(Object object, long offset, long i64)",
                    "public float net.openhft.chronicle.core.UnsafeMemory.readFloat(Object object, long offset)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "79bee82df5f5b8a8296d34ec56b88c2bb947e128",
        "previous_commit": "9a1af0c7f00b216c6eac80b019d40860390b6125",
        "date": 1697552311,
        "releases": {
            "previous": "79bee82df5f5b8a8296d34ec56b88c2bb947e128",
            "next": "79bee82df5f5b8a8296d34ec56b88c2bb947e128"
        },
        "commit_message": "Add support for hugetlbfs (custom pageSize).\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "79bee82df5f5b8a8296d34ec56b88c2bb947e128": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long net.openhft.chronicle.core.OS.mapAlign(long offset)",
                    "public static long net.openhft.chronicle.core.OS.mapAlign(long offset, int pageAlignment)",
                    "public static long net.openhft.chronicle.core.OS.pageAlign(long size, int pageSize)",
                    "public static long net.openhft.chronicle.core.OS.mapAlignment()",
                    "public static long net.openhft.chronicle.core.OS.pageAlign(long size)",
                    "public static long net.openhft.chronicle.core.OS.map(@NotNull FileChannel fileChannel, FileChannel.MapMode mode, long start, long size)",
                    "public void net.openhft.chronicle.core.OS.run()",
                    "public static void net.openhft.chronicle.core.OS.unmap(long address, long size, int pageSize)",
                    "public static long net.openhft.chronicle.core.OS.map(@NotNull FileChannel fileChannel, FileChannel.MapMode mode, long start, long size, int pageSize)",
                    "public static void net.openhft.chronicle.core.OS.unmap(long address, long size)"
                ]
            },
            "9a1af0c7f00b216c6eac80b019d40860390b6125": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long net.openhft.chronicle.core.OS.mapAlign(long offset)",
                    "public static long net.openhft.chronicle.core.OS.mapAlign(long offset, int pageAlignment)",
                    "public static long net.openhft.chronicle.core.OS.mapAlignment()",
                    "public static long net.openhft.chronicle.core.OS.pageAlign(long size)",
                    "public static long net.openhft.chronicle.core.OS.map(@NotNull FileChannel fileChannel, FileChannel.MapMode mode, long start, long size)",
                    "public void net.openhft.chronicle.core.OS.run()",
                    "public static void net.openhft.chronicle.core.OS.unmap(long address, long size)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "469a7075758d4cd101c5ee2e698d0cd1651b40d3",
        "previous_commit": "1ff5d214f6495e93c423e9fd8bcba67f51c8fa08",
        "date": 1663067788,
        "releases": {
            "previous": "469a7075758d4cd101c5ee2e698d0cd1651b40d3",
            "next": "469a7075758d4cd101c5ee2e698d0cd1651b40d3"
        },
        "commit_message": "Add ReferenceChangeListener, Fixes #444\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "469a7075758d4cd101c5ee2e698d0cd1651b40d3": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "private boolean net.openhft.chronicle.core.io.TracingReferenceCounted.tryReserve(ReferenceOwner id, boolean must)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.releaseLast(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.reserve(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.release(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.reserveTransfer(ReferenceOwner from, ReferenceOwner to)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.callOnRelease()",
                    "public boolean net.openhft.chronicle.core.io.VanillaReferenceCounted.tryReserve(ReferenceOwner id)"
                ]
            },
            "1ff5d214f6495e93c423e9fd8bcba67f51c8fa08": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "private boolean net.openhft.chronicle.core.io.TracingReferenceCounted.tryReserve(ReferenceOwner id, boolean must)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.releaseLast(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.reserve(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.release(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.reserveTransfer(ReferenceOwner from, ReferenceOwner to)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.callOnRelease()",
                    "public boolean net.openhft.chronicle.core.io.VanillaReferenceCounted.tryReserve(ReferenceOwner id)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "55af3d320c25cad11fd13511740821d50667adfc",
        "previous_commit": "92f8affeb8e8d1f83daa4746b71ea439da7245b4",
        "date": 1593602707,
        "releases": {
            "previous": "55af3d320c25cad11fd13511740821d50667adfc",
            "next": "55af3d320c25cad11fd13511740821d50667adfc"
        },
        "commit_message": "Added support for setting a closable in one thread and using in another, https://github.com/OpenHFT/Chronicle-Core/issues/123\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "55af3d320c25cad11fd13511740821d50667adfc": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void optionalSafepoint()",
                    "public static void safepoint()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "protected boolean net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck(boolean isUsed)",
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.throwExceptionIfReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public String net.openhft.chronicle.core.pool.ClassAliasPool.nameFor(Class clazz)"
                ]
            },
            "92f8affeb8e8d1f83daa4746b71ea439da7245b4": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void optionalSafepoint()",
                    "public static void safepoint()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()",
                    "protected boolean net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.throwExceptionIfReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public String net.openhft.chronicle.core.pool.ClassAliasPool.nameFor(Class clazz)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "939610d8345ea0dc6a667fa27e356f87344225c2",
        "previous_commit": "6ffeb6cecb98258e934cc851dd8fe49f9a008300",
        "date": 1594030364,
        "releases": {
            "previous": "939610d8345ea0dc6a667fa27e356f87344225c2",
            "next": "939610d8345ea0dc6a667fa27e356f87344225c2"
        },
        "commit_message": "Possible race condition in the detection of closed resources. https://github.com/OpenHFT/Chronicle-Queue/issues/688\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "939610d8345ea0dc6a667fa27e356f87344225c2": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.setClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "private static void performRelease(Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "static String net.openhft.chronicle.core.io.TracingReferenceCounted.asString(Object id)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfNotReleased()"
                ]
            },
            "6ffeb6cecb98258e934cc851dd8fe49f9a008300": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.setClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "private static void performRelease(Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "static String net.openhft.chronicle.core.io.TracingReferenceCounted.asString(Object id)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfNotReleased()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "94375307d0bb38a442aabb527815a81cde5e2c6c",
        "previous_commit": "22e1b567e740a9b7230f019e813f1c9f05aa4a3a",
        "date": 1651056054,
        "releases": {
            "previous": "94375307d0bb38a442aabb527815a81cde5e2c6c",
            "next": "94375307d0bb38a442aabb527815a81cde5e2c6c"
        },
        "commit_message": "Do not count down from zero when synchronoulsy clearing resources of stopped instance\n\nfixes #386\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "94375307d0bb38a442aabb527815a81cde5e2c6c": {
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "private static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.release0(Object o)",
                    "public static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.release(AbstractCloseable closeable)",
                    "public static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.release(AbstractReferenceCounted referenceCounted)",
                    "private static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.performRelease(Object o, boolean counted)",
                    "private static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.runReleaseResources()",
                    "public static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.run(Runnable runnable)",
                    "public static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.releasePendingResources()"
                ]
            },
            "22e1b567e740a9b7230f019e813f1c9f05aa4a3a": {
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "private static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.release0(Object o)",
                    "public static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.release(AbstractCloseable closeable)",
                    "public static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.release(AbstractReferenceCounted referenceCounted)",
                    "private static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.performRelease(Object o)",
                    "private static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.runReleaseResources()",
                    "public static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.run(Runnable runnable)",
                    "public static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.releasePendingResources()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "492dcc3103969f4b42828fbc9ddea716e9da639e",
        "previous_commit": "a93b2a38cf6b4f85a7d6a135cbd490b8b8bb30e1",
        "date": 1611068504,
        "releases": {
            "previous": "492dcc3103969f4b42828fbc9ddea716e9da639e",
            "next": "492dcc3103969f4b42828fbc9ddea716e9da639e"
        },
        "commit_message": "Inverted evaluation for thread safety check property, closes https://github.com/OpenHFT/Chronicle-Queue/issues/768\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "492dcc3103969f4b42828fbc9ddea716e9da639e": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosedInSetter()",
                    "protected boolean net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck(boolean isUsed)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "protected boolean net.openhft.chronicle.core.io.AbstractReferenceCounted.threadSafetyCheck(boolean isUsed)",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.assertReferencesReleased()",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.enableReferenceTracing()",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.disableReferenceTracing()"
                ]
            },
            "a93b2a38cf6b4f85a7d6a135cbd490b8b8bb30e1": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosedInSetter()",
                    "protected boolean net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck(boolean isUsed)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "protected boolean net.openhft.chronicle.core.io.AbstractReferenceCounted.threadSafetyCheck(boolean isUsed)",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.assertReferencesReleased()",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.enableReferenceTracing()",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.disableReferenceTracing()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "abfb9de432353af887880b0ffe4c1c8415ccdf5d",
        "previous_commit": "6d84b572c6af50520f4585a3e77ca3057119bc10",
        "date": 1712786409,
        "releases": {
            "previous": "abfb9de432353af887880b0ffe4c1c8415ccdf5d",
            "next": "abfb9de432353af887880b0ffe4c1c8415ccdf5d"
        },
        "commit_message": "Cache resolution failures to avoid repeated attempts (#645)\n\ncloses #644",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "abfb9de432353af887880b0ffe4c1c8415ccdf5d": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public Class<?> net.openhft.chronicle.core.pool.ClassAliasPool.forName(@NotNull CharSequence name)",
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.addAlias(@NotNull Class<?>... classes)",
                    "private synchronized Class<?> net.openhft.chronicle.core.pool.ClassAliasPool.forName0(@NotNull CAPKey key)",
                    "public CharSequence net.openhft.chronicle.core.pool.ClassAliasPool.applyAlias(CharSequence name)",
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.clean()",
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.removePackage(String pkgName)",
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.addAlias(Class<?> clazz, @NotNull String names)"
                ]
            },
            "6d84b572c6af50520f4585a3e77ca3057119bc10": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public Class<?> net.openhft.chronicle.core.pool.ClassAliasPool.forName(@NotNull CharSequence name)",
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.addAlias(@NotNull Class<?>... classes)",
                    "private synchronized Class<?> net.openhft.chronicle.core.pool.ClassAliasPool.forName0(@NotNull CAPKey key)",
                    "public CharSequence net.openhft.chronicle.core.pool.ClassAliasPool.applyAlias(CharSequence name)",
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.clean()",
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.removePackage(String pkgName)",
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.addAlias(Class<?> clazz, @NotNull String names)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "6649ebfdf04ce0c350f480d9d536f67ee7b29dd7",
        "previous_commit": "d0ca3dfd7f66e26c63fc562642545bae31dd88eb",
        "date": 1592243996,
        "releases": {
            "previous": "6649ebfdf04ce0c350f480d9d536f67ee7b29dd7",
            "next": "6649ebfdf04ce0c350f480d9d536f67ee7b29dd7"
        },
        "commit_message": "Add `throwExceptionIfClosed();` to most public methods for classes implementing Closeable, https://github.com/OpenHFT/Chronicle-Core/issues/116\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "6649ebfdf04ce0c350f480d9d536f67ee7b29dd7": {
                "src/main/java/net/openhft/chronicle/core/tcp/VanillaSocketChannel.java": [
                    "public long net.openhft.chronicle.core.tcp.VanillaSocketChannel.write(ByteBuffer[] byteBuffer)",
                    "public int net.openhft.chronicle.core.tcp.VanillaSocketChannel.write(ByteBuffer byteBuffer)",
                    "public InetSocketAddress net.openhft.chronicle.core.tcp.VanillaSocketChannel.getLocalAddress()",
                    "public void net.openhft.chronicle.core.tcp.VanillaSocketChannel.configureBlocking(boolean blocking)",
                    "public SocketChannel net.openhft.chronicle.core.tcp.VanillaSocketChannel.socketChannel()",
                    "public int net.openhft.chronicle.core.tcp.VanillaSocketChannel.read(ByteBuffer byteBuffer)",
                    "public InetSocketAddress net.openhft.chronicle.core.tcp.VanillaSocketChannel.getRemoteAddress()"
                ]
            },
            "d0ca3dfd7f66e26c63fc562642545bae31dd88eb": {
                "src/main/java/net/openhft/chronicle/core/tcp/VanillaSocketChannel.java": [
                    "public long net.openhft.chronicle.core.tcp.VanillaSocketChannel.write(ByteBuffer[] byteBuffer)",
                    "public int net.openhft.chronicle.core.tcp.VanillaSocketChannel.write(ByteBuffer byteBuffer)",
                    "public InetSocketAddress net.openhft.chronicle.core.tcp.VanillaSocketChannel.getLocalAddress()",
                    "public void net.openhft.chronicle.core.tcp.VanillaSocketChannel.configureBlocking(boolean blocking)",
                    "public SocketChannel net.openhft.chronicle.core.tcp.VanillaSocketChannel.socketChannel()",
                    "public int net.openhft.chronicle.core.tcp.VanillaSocketChannel.read(ByteBuffer byteBuffer)",
                    "public InetSocketAddress net.openhft.chronicle.core.tcp.VanillaSocketChannel.getRemoteAddress()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "61326d2d4809984d45eb552941c52c5d9e541324",
        "previous_commit": "e790ab1860a2bbddc8f81f1ce7e6f7fdc07383a4",
        "date": 1516677371,
        "releases": {
            "previous": "61326d2d4809984d45eb552941c52c5d9e541324",
            "next": "61326d2d4809984d45eb552941c52c5d9e541324"
        },
        "commit_message": "minor code tidy - test release job\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "61326d2d4809984d45eb552941c52c5d9e541324": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@NotNull Object... closables)",
                    "static void closeQuietly(@Nullable Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/time/SetTimeProvider.java": [
                    "public long net.openhft.chronicle.core.time.SetTimeProvider.currentTimeMicros()",
                    "public long net.openhft.chronicle.core.time.SetTimeProvider.currentTime(TimeUnit unit)",
                    "public long net.openhft.chronicle.core.time.SetTimeProvider.currentTimeMillis()",
                    "public SetTimeProvider net.openhft.chronicle.core.time.SetTimeProvider.advanceMicros(long micros)",
                    "public SetTimeProvider net.openhft.chronicle.core.time.SetTimeProvider.advanceMillis(long millis)"
                ]
            },
            "e790ab1860a2bbddc8f81f1ce7e6f7fdc07383a4": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@NotNull Object... closables)",
                    "static void closeQuietly(@Nullable Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/time/SetTimeProvider.java": [
                    "public long net.openhft.chronicle.core.time.SetTimeProvider.currentTimeMicros()",
                    "public long net.openhft.chronicle.core.time.SetTimeProvider.currentTime(TimeUnit unit)",
                    "public long net.openhft.chronicle.core.time.SetTimeProvider.currentTimeMillis()",
                    "public SetTimeProvider net.openhft.chronicle.core.time.SetTimeProvider.advanceMicros(long micros)",
                    "public SetTimeProvider net.openhft.chronicle.core.time.SetTimeProvider.advanceMillis(long millis)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "0201d14a77da50fb76baf23af41f92926087bfa0",
        "previous_commit": "fe63ffee4cc07ee75fa80d5792e3d480d475606d",
        "date": 1605922334,
        "releases": {
            "previous": "0201d14a77da50fb76baf23af41f92926087bfa0",
            "next": "0201d14a77da50fb76baf23af41f92926087bfa0"
        },
        "commit_message": "Add net.openhft.chronicle.core.util.ObjectUtils.requireNonNull method, add @NotNull to some method contracts and tidy up null checking in UnsafeMemory\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0201d14a77da50fb76baf23af41f92926087bfa0": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeInt(@NotNull Object object, long offset, int i32)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readShort(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeShort(@NotNull Object object, long offset, short i16)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(@NotNull Object object, long offset)",
                    "public <T> T net.openhft.chronicle.core.UnsafeMemory.getObject(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.setInt(@NotNull Object object, long offset, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeByte(@NotNull Object object, long offset, byte b)"
                ]
            },
            "fe63ffee4cc07ee75fa80d5792e3d480d475606d": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeInt(@NotNull Object object, long offset, int i32)",
                    "public short net.openhft.chronicle.core.UnsafeMemory.readShort(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeShort(@NotNull Object object, long offset, short i16)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(@NotNull Object object, long offset)",
                    "public <T> T net.openhft.chronicle.core.UnsafeMemory.getObject(@NotNull Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.setInt(@NotNull Object object, long offset, int value)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeByte(@NotNull Object object, long offset, byte b)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "75c3808b73e435e6ec5369d1fd592ebcf9a5291c",
        "previous_commit": "4a06dacbba4973e90c9ad94fab9c4b99f56d6a93",
        "date": 1615286627,
        "releases": {
            "previous": "75c3808b73e435e6ec5369d1fd592ebcf9a5291c",
            "next": "75c3808b73e435e6ec5369d1fd592ebcf9a5291c"
        },
        "commit_message": "Added performant memory access operations to use in Bytes, https://github.com/OpenHFT/Chronicle-Core/issues/209\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "75c3808b73e435e6ec5369d1fd592ebcf9a5291c": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public static void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long from, long to, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(char[] chars, int offset, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(long address, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, long address, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(byte[] bytes, int offset, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/StringInterner.java": [
                    "public String net.openhft.chronicle.core.pool.StringInterner.intern(@Nullable CharSequence cs)"
                ]
            },
            "4a06dacbba4973e90c9ad94fab9c4b99f56d6a93": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public static void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long from, long to, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(char[] chars, int offset, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(long address, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, long address, int length)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.is7Bit(byte[] bytes, int offset, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/StringInterner.java": [
                    "public String net.openhft.chronicle.core.pool.StringInterner.intern(@Nullable CharSequence cs)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "cb89dcc0c1ec2415355cfb63117584ff7ea6eaf0",
        "previous_commit": "fa54a8252da5e8bd4191e6fbfbfe39cc6b8f6a20",
        "date": 1692723646,
        "releases": {
            "previous": "cb89dcc0c1ec2415355cfb63117584ff7ea6eaf0",
            "next": "cb89dcc0c1ec2415355cfb63117584ff7ea6eaf0"
        },
        "commit_message": "Improve consistency of (Closed|Threading)IllegalStateException (#567)\n\n* Improve consistency of (Closed|Threading)IllegalStateException\r\n\r\n* Improve consistency of (Closed|Threading)IllegalStateException\r\n\r\n* Improve consistency of (Closed|Threading)IllegalStateException",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "cb89dcc0c1ec2415355cfb63117584ff7ea6eaf0": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "private void net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck0(boolean isUsed)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "private boolean net.openhft.chronicle.core.io.AbstractReferenceCounted.threadSafetyCheck2(Thread currentThread)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserve(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfNotReleased()",
                    "private IllegalStateException net.openhft.chronicle.core.io.TracingReferenceCounted.generateIllegalStateException(ReferenceOwner referenceOwner, StackTrace reservedHere)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.warnAndReleaseIfNotReleased()"
                ]
            },
            "fa54a8252da5e8bd4191e6fbfbfe39cc6b8f6a20": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "private void net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck0(boolean isUsed)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "private boolean net.openhft.chronicle.core.io.AbstractReferenceCounted.threadSafetyCheck2(Thread currentThread)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserve(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfNotReleased()",
                    "private IllegalStateException net.openhft.chronicle.core.io.TracingReferenceCounted.generateIllegalStateException(ReferenceOwner referenceOwner, StackTrace reservedHere)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.warnAndReleaseIfNotReleased()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "53132c27d95239e7ec389c6a9dfab8a7bec0f0ea",
        "previous_commit": "b40ddff2d4e67378ee0a3f0a04fa1331a7dfe118",
        "date": 1607446975,
        "releases": {
            "previous": "53132c27d95239e7ec389c6a9dfab8a7bec0f0ea",
            "next": "53132c27d95239e7ec389c6a9dfab8a7bec0f0ea"
        },
        "commit_message": "Detect and record the first occurrence of a resource being used incorrectly. closes https://github.com/OpenHFT/Chronicle-Core/issues/162\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "53132c27d95239e7ec389c6a9dfab8a7bec0f0ea": {
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.release(ReferenceOwner id)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserve(ReferenceOwner id)",
                    "public synchronized boolean net.openhft.chronicle.core.io.DualReferenceCounted.tryReserve(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.DualReferenceCounted.throwExceptionIfReleased()",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserveTransfer(ReferenceOwner from, ReferenceOwner to)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.releaseLast(ReferenceOwner id)"
                ]
            },
            "b40ddff2d4e67378ee0a3f0a04fa1331a7dfe118": {
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.release(ReferenceOwner id)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserve(ReferenceOwner id)",
                    "public synchronized boolean net.openhft.chronicle.core.io.DualReferenceCounted.tryReserve(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.DualReferenceCounted.throwExceptionIfReleased()",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserveTransfer(ReferenceOwner from, ReferenceOwner to)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.releaseLast(ReferenceOwner id)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "ed5ccd226bb9b30f1afeb557fd640e04631b3400",
        "previous_commit": "44e537f4de040e5e7e22ec8953cbd77c75717bb8",
        "date": 1510412198,
        "releases": {
            "previous": "ed5ccd226bb9b30f1afeb557fd640e04631b3400",
            "next": "ed5ccd226bb9b30f1afeb557fd640e04631b3400"
        },
        "commit_message": "Review of unchecked exceptions\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "ed5ccd226bb9b30f1afeb557fd640e04631b3400": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long getPidMax()",
                    "private static int getProcessId0()",
                    "public void net.openhft.chronicle.core.Unmapper.run()"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public boolean net.openhft.chronicle.core.pool.ClassAliasPool.equals(Object obj)",
                    "public int net.openhft.chronicle.core.pool.ClassAliasPool.hashCode()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/CharSequenceComparator.java": [
                    "public int compare(@NotNull CharSequence o1, @NotNull CharSequence o2)"
                ]
            },
            "44e537f4de040e5e7e22ec8953cbd77c75717bb8": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long getPidMax()",
                    "private static int getProcessId0()",
                    "public void net.openhft.chronicle.core.Unmapper.run()"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public boolean net.openhft.chronicle.core.pool.ClassAliasPool.equals(Object obj)",
                    "public int net.openhft.chronicle.core.pool.ClassAliasPool.hashCode()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/CharSequenceComparator.java": [
                    "public int compare(@NotNull CharSequence o1, @NotNull CharSequence o2)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "213650f052273b8095dda386f0df452bfdceebdb",
        "previous_commit": "20c3faf35dea5ae5b051038ddf3f5c9699972b10",
        "date": 1613575358,
        "releases": {
            "previous": "213650f052273b8095dda386f0df452bfdceebdb",
            "next": "213650f052273b8095dda386f0df452bfdceebdb"
        },
        "commit_message": "Make ChronicleQueue more tolerant of resources being closed in any order. closes https://github.com/OpenHFT/Chronicle-Queue/issues/808\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "213650f052273b8095dda386f0df452bfdceebdb": {
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.release(ReferenceOwner id)",
                    "private void net.openhft.chronicle.core.io.DualReferenceCounted.checkError()",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserve(ReferenceOwner id)",
                    "public synchronized boolean net.openhft.chronicle.core.io.DualReferenceCounted.tryReserve(ReferenceOwner id)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserveTransfer(ReferenceOwner from, ReferenceOwner to)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.releaseLast(ReferenceOwner id)"
                ]
            },
            "20c3faf35dea5ae5b051038ddf3f5c9699972b10": {
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.release(ReferenceOwner id)",
                    "private void net.openhft.chronicle.core.io.DualReferenceCounted.checkError()",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserve(ReferenceOwner id)",
                    "public synchronized boolean net.openhft.chronicle.core.io.DualReferenceCounted.tryReserve(ReferenceOwner id)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserveTransfer(ReferenceOwner from, ReferenceOwner to)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.releaseLast(ReferenceOwner id)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "eccbc381acd7d33eccbdebdd4ec82b9bce5f7878",
        "previous_commit": "3e4cac80e6d7befe2aa10f88cf24bf60cf1d4d9a",
        "date": 1607600279,
        "releases": {
            "previous": "eccbc381acd7d33eccbdebdd4ec82b9bce5f7878",
            "next": "eccbc381acd7d33eccbdebdd4ec82b9bce5f7878"
        },
        "commit_message": "Reduce System.out in tests and in general, https://github.com/OpenHFT/OpenHFT/issues/42\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "eccbc381acd7d33eccbdebdd4ec82b9bce5f7878": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public int net.openhft.chronicle.core.UnsafeMemory.readInt(long address)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(long address)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(long address)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/AllocationMeasure.java": [
                    "public static void net.openhft.chronicle.core.util.AllocationMeasure.main(String[] args)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ThreadIndexAssigner.java": [
                    "public int net.openhft.chronicle.core.util.ThreadIndexAssigner.getId()"
                ]
            },
            "3e4cac80e6d7befe2aa10f88cf24bf60cf1d4d9a": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public int net.openhft.chronicle.core.UnsafeMemory.readInt(long address)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(long address)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(long address)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/AllocationMeasure.java": [
                    "public static void net.openhft.chronicle.core.util.AllocationMeasure.main(String[] args)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ThreadIndexAssigner.java": [
                    "public int net.openhft.chronicle.core.util.ThreadIndexAssigner.getId()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c36c44a47e2675e702e34a6e49582b2fe6858c1e",
        "previous_commit": "a676bc3b2c39571c8c4bfdc9afc9d793edbfa186",
        "date": 1659091737,
        "releases": {
            "previous": "c36c44a47e2675e702e34a6e49582b2fe6858c1e",
            "next": "c36c44a47e2675e702e34a6e49582b2fe6858c1e"
        },
        "commit_message": "Alignment issues for 64-bit thread safe operations on ARMv7\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c36c44a47e2675e702e34a6e49582b2fe6858c1e": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(Object object, long offset, long i)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(long address, long i)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(Object object, long offset, int i32)"
                ]
            },
            "a676bc3b2c39571c8c4bfdc9afc9d793edbfa186": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(Object object, long offset, long i)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedLong(long address, long i)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(Object object, long offset, int i32)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "cd77ff29817d3e0fd49326a469a3498bbdd378ba",
        "previous_commit": "b855496e47474223f91e3263f7557c2077533e0c",
        "date": 1605919789,
        "releases": {
            "previous": "cd77ff29817d3e0fd49326a469a3498bbdd378ba",
            "next": "cd77ff29817d3e0fd49326a469a3498bbdd378ba"
        },
        "commit_message": "use UnsafeMemory abstraction class instead of Unsafe directly\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "cd77ff29817d3e0fd49326a469a3498bbdd378ba": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static ClassMetrics getClassMetrics(Class c)",
                    "private static void validateClassMetrics(Class c, int start, int end)",
                    "private static long maxDirectMemory0()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "private boolean net.openhft.chronicle.core.io.VanillaReferenceCounted.valueCompareAndSet(int from, int to)"
                ],
                "src/main/java/net/openhft/chronicle/core/time/SystemTimeProvider.java": [
                    "public long currentTimeNanos()"
                ]
            },
            "b855496e47474223f91e3263f7557c2077533e0c": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static ClassMetrics getClassMetrics(Class c)",
                    "private static void validateClassMetrics(Class c, int start, int end)",
                    "private static long maxDirectMemory0()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "private boolean net.openhft.chronicle.core.io.VanillaReferenceCounted.valueCompareAndSet(int from, int to)"
                ],
                "src/main/java/net/openhft/chronicle/core/time/SystemTimeProvider.java": [
                    "public long currentTimeNanos()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "fc473020909028072d0431e6a4343decc6068222",
        "previous_commit": "b546716e3ef70139567886a3d6873c3167d7edff",
        "date": 1662519365,
        "releases": {
            "previous": "fc473020909028072d0431e6a4343decc6068222",
            "next": "fc473020909028072d0431e6a4343decc6068222"
        },
        "commit_message": "Deprecate DualReferenceCounted, Fixes #445, Deprecate ReferenceCounted#reservedBy\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "fc473020909028072d0431e6a4343decc6068222": {
                "src/main/java/net/openhft/chronicle/core/io/ReferenceCountedTracer.java": [
                    "static ReferenceCountedTracer onReleased(final Runnable onRelease, Supplier<String> uniqueId, Class<?> type)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.releaseLast(ReferenceOwner id)",
                    "static String net.openhft.chronicle.core.io.TracingReferenceCounted.asString(Object id)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.warnAndReleaseIfNotReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.releaseLast(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.warnAndReleaseIfNotReleased()"
                ]
            },
            "b546716e3ef70139567886a3d6873c3167d7edff": {
                "src/main/java/net/openhft/chronicle/core/io/ReferenceCountedTracer.java": [
                    "static ReferenceCountedTracer onReleased(final Runnable onRelease, Supplier<String> uniqueId, Class<?> type)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.releaseLast(ReferenceOwner id)",
                    "static String net.openhft.chronicle.core.io.TracingReferenceCounted.asString(Object id)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.warnAndReleaseIfNotReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.releaseLast(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.warnAndReleaseIfNotReleased()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "7dde253fc18c2a57b2c66d3736815d32ea0acc63",
        "previous_commit": "0fec692619be66766214f65c0824dc895338ed41",
        "date": 1646388397,
        "releases": {
            "previous": "7dde253fc18c2a57b2c66d3736815d32ea0acc63",
            "next": "7dde253fc18c2a57b2c66d3736815d32ea0acc63"
        },
        "commit_message": "Remove deprecated methods and classes in 2.23\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7dde253fc18c2a57b2c66d3736815d32ea0acc63": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void net.openhft.chronicle.core.Jvm.resetExceptionHandlers()",
                    "public static Map<ExceptionKey, Integer> net.openhft.chronicle.core.Jvm.recordExceptions(final boolean debug, final boolean exceptionsOnly, final boolean logToSlf4j)",
                    "public static void net.openhft.chronicle.core.Jvm.setThreadLocalExceptionHandlers(@Nullable final ExceptionHandler error, @Nullable final ExceptionHandler warn, @Nullable final ExceptionHandler debug, @Nullable final ExceptionHandler perf)",
                    "public static void net.openhft.chronicle.core.Jvm.setExceptionHandlers(@Nullable final ExceptionHandler error, @Nullable final ExceptionHandler warn, @Nullable final ExceptionHandler debug, @Nullable final ExceptionHandler perf)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(@Nullable Object src, long srcOffset, @Nullable Object dest, long destOffset, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/Slf4jExceptionHandler.java": [
                    "public static Slf4jExceptionHandler valueOf(LogLevel logLevel)"
                ]
            },
            "0fec692619be66766214f65c0824dc895338ed41": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void net.openhft.chronicle.core.Jvm.setThreadLocalExceptionHandlers(@Nullable final ExceptionHandler fatal, @Nullable final ExceptionHandler warn, @Nullable final ExceptionHandler debug, @Nullable final ExceptionHandler perf)",
                    "public static void net.openhft.chronicle.core.Jvm.resetExceptionHandlers()",
                    "public static Map<ExceptionKey, Integer> net.openhft.chronicle.core.Jvm.recordExceptions(final boolean debug, final boolean exceptionsOnly, final boolean logToSlf4j)",
                    "public static void net.openhft.chronicle.core.Jvm.setExceptionHandlers(@Nullable final ExceptionHandler fatal, @Nullable final ExceptionHandler warn, @Nullable final ExceptionHandler debug, @Nullable final ExceptionHandler perf)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(@Nullable Object src, long srcOffset, @Nullable Object dest, long destOffset, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/Slf4jExceptionHandler.java": [
                    "public static Slf4jExceptionHandler valueOf(LogLevel logLevel)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f3b73fc890fbe7ba54c4b9a438864173b2db1f1e",
        "previous_commit": "3dff286dc2d1276710816b32f7e688e3bc7daf1c",
        "date": 1637335191,
        "releases": {
            "previous": "f3b73fc890fbe7ba54c4b9a438864173b2db1f1e",
            "next": "f3b73fc890fbe7ba54c4b9a438864173b2db1f1e"
        },
        "commit_message": "Added support for running the background releaser in you own thread and manual shutdown of the releaser thread\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f3b73fc890fbe7ba54c4b9a438864173b2db1f1e": {
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "public static void run(Runnable runnable)",
                    "private static void runReleaseResources()",
                    "public static void releasePendingResources()",
                    "public static void release(AbstractCloseable closeable)",
                    "public static void release(AbstractReferenceCounted referenceCounted)"
                ]
            },
            "3dff286dc2d1276710816b32f7e688e3bc7daf1c": {
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "public static void run(Runnable runnable)",
                    "private static void runReleaseResources()",
                    "public static void releasePendingResources()",
                    "public static void release(AbstractCloseable closeable)",
                    "public static void release(AbstractReferenceCounted referenceCounted)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "bf2a72d95a4c772a1a368c6339aea2b9307ec8b4",
        "previous_commit": "7a9b4a5c70750ab2c0a96472cb71bc6c649c55ed",
        "date": 1603791401,
        "releases": {
            "previous": "bf2a72d95a4c772a1a368c6339aea2b9307ec8b4",
            "next": "bf2a72d95a4c772a1a368c6339aea2b9307ec8b4"
        },
        "commit_message": "Always throw a rethrow so the compile can detect unreachable code\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "bf2a72d95a4c772a1a368c6339aea2b9307ec8b4": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void setAccessible(AccessibleObject h)"
                ],
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class caller)"
                ],
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/jdk9/Jdk9ByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.jdk9.Jdk9ByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ],
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public static void net.openhft.chronicle.core.pool.ClassAliasPool.a(Class clazz)"
                ]
            },
            "7a9b4a5c70750ab2c0a96472cb71bc6c649c55ed": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void setAccessible(AccessibleObject h)"
                ],
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class caller)"
                ],
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/jdk9/Jdk9ByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.jdk9.Jdk9ByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ],
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public static void net.openhft.chronicle.core.pool.ClassAliasPool.a(Class clazz)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2487cedbb16343a7fe70d3f450c4917e58b55801",
        "previous_commit": "77dfaab4b46d291dec162a5109df5c1c841b5a33",
        "date": 1716195106,
        "releases": {
            "previous": "2487cedbb16343a7fe70d3f450c4917e58b55801",
            "next": "2487cedbb16343a7fe70d3f450c4917e58b55801"
        },
        "commit_message": "Core/issues/656 (#657)\n\n* don't use reflection and recursion in IOTools.unmonitor\r\n\r\n* Using reflection to unmonitor a reference results in errors in Java 17 Fixes #656\r\n\r\n* Using reflection to unmonitor a reference results in errors in Java 17 Fixes https://github.com/OpenHFT/Chronicle-Core/issues/656\r\n\r\n* Using reflection to unmonitor a reference results in errors in Java 17 Fixes https://github.com/OpenHFT/Chronicle-Core/issues/656\r\n\r\n---------\r\n\r\nCo-authored-by: Jerry Shea <jerry.shea@chronicle.software>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2487cedbb16343a7fe70d3f450c4917e58b55801": {
                "src/main/java/net/openhft/chronicle/core/internal/CloseableUtils.java": [
                    "public static void net.openhft.chronicle.core.internal.CloseableUtils.add(ManagedCloseable closeable)",
                    "public static void net.openhft.chronicle.core.internal.CloseableUtils.assertCloseablesClosed()",
                    "public static boolean net.openhft.chronicle.core.internal.CloseableUtils.waitForCloseablesToClose(long millis)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.unmonitor(Closeable closeable)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static void unmonitor(final Object t)"
                ]
            },
            "77dfaab4b46d291dec162a5109df5c1c841b5a33": {
                "src/main/java/net/openhft/chronicle/core/internal/CloseableUtils.java": [
                    "public static void net.openhft.chronicle.core.internal.CloseableUtils.assertCloseablesClosed()",
                    "public static void net.openhft.chronicle.core.internal.CloseableUtils.add(Closeable closeable)",
                    "public static boolean net.openhft.chronicle.core.internal.CloseableUtils.waitForCloseablesToClose(long millis)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.unmonitor(Closeable closeable)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static void unmonitor(final Object t)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "87019b4dbe3a6c32574948bc8b6a8f9509f9b644",
        "previous_commit": "4eec270f65111f6dce1bb0dbe81d7cfafa4e1194",
        "date": 1605003801,
        "releases": {
            "previous": "87019b4dbe3a6c32574948bc8b6a8f9509f9b644",
            "next": "87019b4dbe3a6c32574948bc8b6a8f9509f9b644"
        },
        "commit_message": "Fix errors and don't send SNAPSHOT versions\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "87019b4dbe3a6c32574948bc8b6a8f9509f9b644": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/AnalyticsUtil.java": [
                    "public static Analytics acquire(@NotNull final String libraryName, @NotNull final String libraryVersion)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/VanillaAnalytics.java": [
                    "public void net.openhft.chronicle.core.internal.analytics.VanillaAnalytics.onFeature(@NotNull final String id, @NotNull final Map<String, String> eventParameters)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/google/GoogleAnalytics.java": [
                    "private Account net.openhft.chronicle.core.internal.analytics.google.GoogleAnalytics.account(final String libraryName)",
                    "private String net.openhft.chronicle.core.internal.analytics.google.GoogleAnalytics.jsonFor(@NotNull final String eventName, @NotNull final Map<String, String> eventParameters, @NotNull final Map<String, Object> userProperties)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/http/HttpUtil.java": [
                    "public void net.openhft.chronicle.core.internal.analytics.http.Sender.run()"
                ]
            },
            "4eec270f65111f6dce1bb0dbe81d7cfafa4e1194": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/AnalyticsUtil.java": [
                    "public static Analytics acquire(@NotNull final String libraryName, @NotNull final String libraryVersion)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/VanillaAnalytics.java": [
                    "public void net.openhft.chronicle.core.internal.analytics.VanillaAnalytics.onFeature(@NotNull final String id, @NotNull final Map<String, String> eventParameters)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/google/GoogleAnalytics.java": [
                    "private Account net.openhft.chronicle.core.internal.analytics.google.GoogleAnalytics.account(final String libraryName)",
                    "private String net.openhft.chronicle.core.internal.analytics.google.GoogleAnalytics.jsonFor(@NotNull final String eventName, @NotNull final Map<String, String> eventParameters, @NotNull final Map<String, Object> userProperties)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/http/HttpUtil.java": [
                    "public void net.openhft.chronicle.core.internal.analytics.http.Sender.run()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "755ff466b040f13be532cdd4404f1d513c7b935d",
        "previous_commit": "267a0007ebb632ed493b5273ca16e94960a9a22d",
        "date": 1658310615,
        "releases": {
            "previous": "755ff466b040f13be532cdd4404f1d513c7b935d",
            "next": "755ff466b040f13be532cdd4404f1d513c7b935d"
        },
        "commit_message": "Optimise thread safety check code #427 (#432)\n\nCo-authored-by: Peter Lawrey <peter.lawrey@chronicle.software>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "755ff466b040f13be532cdd4404f1d513c7b935d": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosedInSetter()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "private void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosed0()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.throwExceptionIfReleased()",
                    "protected boolean net.openhft.chronicle.core.io.AbstractReferenceCounted.threadSafetyCheck(boolean isUsed)"
                ]
            },
            "267a0007ebb632ed493b5273ca16e94960a9a22d": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosedInSetter()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "private void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosed0()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.throwExceptionIfReleased()",
                    "protected boolean net.openhft.chronicle.core.io.AbstractReferenceCounted.threadSafetyCheck(boolean isUsed)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "76d069952f9b61453dc320137fd5cc97a6001550",
        "previous_commit": "292f38ca854cabb5603aeb55653acf7b2d1c535f",
        "date": 1603124443,
        "releases": {
            "previous": "76d069952f9b61453dc320137fd5cc97a6001550",
            "next": "76d069952f9b61453dc320137fd5cc97a6001550"
        },
        "commit_message": "Changed AbstractCloseable to only be isClosed()=true after performClose() has been performed #145\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "76d069952f9b61453dc320137fd5cc97a6001550": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.warnAndCloseIfNotClosed()",
                    "public boolean net.openhft.chronicle.core.io.AbstractCloseable.isClosed()",
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "private static void performRelease(Object o)"
                ]
            },
            "292f38ca854cabb5603aeb55653acf7b2d1c535f": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.warnAndCloseIfNotClosed()",
                    "public boolean net.openhft.chronicle.core.io.AbstractCloseable.isClosed()",
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "private static void performRelease(Object o)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2485b1c152b877b3cd7270044938bae6a6eb04d5",
        "previous_commit": "213650f052273b8095dda386f0df452bfdceebdb",
        "date": 1613575664,
        "releases": {
            "previous": "2485b1c152b877b3cd7270044938bae6a6eb04d5",
            "next": "2485b1c152b877b3cd7270044938bae6a6eb04d5"
        },
        "commit_message": "Make ChronicleQueue more tolerant of resources being closed in any order. closes https://github.com/OpenHFT/Chronicle-Queue/issues/808\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2485b1c152b877b3cd7270044938bae6a6eb04d5": {
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.release(ReferenceOwner id)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserve(ReferenceOwner id)",
                    "public synchronized boolean net.openhft.chronicle.core.io.DualReferenceCounted.tryReserve(ReferenceOwner id)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserveTransfer(ReferenceOwner from, ReferenceOwner to)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.releaseLast(ReferenceOwner id)"
                ]
            },
            "213650f052273b8095dda386f0df452bfdceebdb": {
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.release(ReferenceOwner id)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserve(ReferenceOwner id)",
                    "public synchronized boolean net.openhft.chronicle.core.io.DualReferenceCounted.tryReserve(ReferenceOwner id)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserveTransfer(ReferenceOwner from, ReferenceOwner to)",
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.releaseLast(ReferenceOwner id)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "3242a96e2a4e6f54a045583274d49a47bf692e12",
        "previous_commit": "b44f41b2a5620cec4d4a0fade455767ce17b31cb",
        "date": 1660880544,
        "releases": {
            "previous": "3242a96e2a4e6f54a045583274d49a47bf692e12",
            "next": "3242a96e2a4e6f54a045583274d49a47bf692e12"
        },
        "commit_message": "Don't check the current thread isAlive() (#439)\n\n* Don't check if the current thread is alive #438\r\n\r\n* Don't check if the current thread is alive #438\r\n\r\n* Don't check if the current thread is alive #438\r\n\r\n* Improve handling of close() when interrupted\r\n\r\nCo-authored-by: Peter Lawrey <peter.lawrey@chronicle.software>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3242a96e2a4e6f54a045583274d49a47bf692e12": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.waitForClosed()",
                    "public static boolean net.openhft.chronicle.core.io.AbstractCloseable.waitForCloseablesToClose(long millis)",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "protected boolean net.openhft.chronicle.core.io.AbstractReferenceCounted.threadSafetyCheck(boolean isUsed)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "public static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.releasePendingResources()"
                ]
            },
            "b44f41b2a5620cec4d4a0fade455767ce17b31cb": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.waitForClosed()",
                    "public static boolean net.openhft.chronicle.core.io.AbstractCloseable.waitForCloseablesToClose(long millis)",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "protected boolean net.openhft.chronicle.core.io.AbstractReferenceCounted.threadSafetyCheck(boolean isUsed)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "public static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.releasePendingResources()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8224916584022039afa4f9c6d28a3e540eccea97",
        "previous_commit": "b583c280acd75f8338375890dd15cf0807321e64",
        "date": 1645788188,
        "releases": {
            "previous": "8224916584022039afa4f9c6d28a3e540eccea97",
            "next": "8224916584022039afa4f9c6d28a3e540eccea97"
        },
        "commit_message": "Support generic return types for chained Mocker(s) for intercepting, logging and ignoring\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8224916584022039afa4f9c6d28a3e540eccea97": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.intercepting(@NotNull Class<T> tClass, @NotNull BiConsumer<String, Object[]> consumer, T t)",
                    "protected Object net.openhft.chronicle.core.Mocker.doInvoke(Object proxy, Method method, Object[] args)",
                    "private static <T> void net.openhft.chronicle.core.Mocker.addInterface(Set<Class<?>> classes, Class<T> tClass)",
                    "public static <T> T net.openhft.chronicle.core.Mocker.ignored(@NotNull Class<T> tClass, Class<?>... additional)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/AbstractInvocationHandler.java": [
                    "public final Object net.openhft.chronicle.core.util.AbstractInvocationHandler.invoke(Object proxy, Method method, Object[] args)"
                ]
            },
            "b583c280acd75f8338375890dd15cf0807321e64": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.intercepting(@NotNull Class<T> tClass, @NotNull BiConsumer<String, Object[]> consumer, T t)",
                    "protected Object net.openhft.chronicle.core.Mocker.doInvoke(Object proxy, Method method, Object[] args)",
                    "private static <T> void net.openhft.chronicle.core.Mocker.addInterface(Set<Class<?>> classes, Class<T> tClass)",
                    "public static <T> T net.openhft.chronicle.core.Mocker.ignored(@NotNull Class<T> tClass, Class<?>... additional)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/AbstractInvocationHandler.java": [
                    "public final Object net.openhft.chronicle.core.util.AbstractInvocationHandler.invoke(Object proxy, Method method, Object[] args)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "27c703b6ec2a476dbbf3a82170ed092d5c8fb21a",
        "previous_commit": "e9bc0cbbd54166b65449d5616994b31e77a6b84a",
        "date": 1591259858,
        "releases": {
            "previous": "27c703b6ec2a476dbbf3a82170ed092d5c8fb21a",
            "next": "27c703b6ec2a476dbbf3a82170ed092d5c8fb21a"
        },
        "commit_message": "Added support for closeable/reference-counted resources to be cleaned in the background, https://github.com/OpenHFT/Chronicle-Core/issues/119\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "27c703b6ec2a476dbbf3a82170ed092d5c8fb21a": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.warnIfNotClosed()",
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "private static void runReleaseResources()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/SimpleCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.SimpleCloseable.close()"
                ]
            },
            "e9bc0cbbd54166b65449d5616994b31e77a6b84a": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.warnIfNotClosed()",
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "private static void runReleaseResources()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/SimpleCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.SimpleCloseable.close()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "a5202f05232c2bee14399763e80c5ce6cc365718",
        "previous_commit": "5d7be149d0e436f5aa003877396783fce5e71caa",
        "date": 1629810688,
        "releases": {
            "previous": "a5202f05232c2bee14399763e80c5ce6cc365718",
            "next": "a5202f05232c2bee14399763e80c5ce6cc365718"
        },
        "commit_message": "Use a utility class to access deprecated sun.nio.ch.DirectBuffer\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a5202f05232c2bee14399763e80c5ce6cc365718": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static long address(@NotNull final ByteBuffer byteBuffer)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public long net.openhft.chronicle.core.UnsafeMemory.address(ByteBuffer bb)"
                ],
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/jdk8/Jdk8ByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.jdk8.Jdk8ByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ],
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static boolean net.openhft.chronicle.core.io.IOTools.isDirectBuffer(ByteBuffer byteBuffer)"
                ]
            },
            "5d7be149d0e436f5aa003877396783fce5e71caa": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static long address(@NotNull final ByteBuffer byteBuffer)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public long net.openhft.chronicle.core.UnsafeMemory.address(ByteBuffer bb)"
                ],
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/jdk8/Jdk8ByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.jdk8.Jdk8ByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ],
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static boolean net.openhft.chronicle.core.io.IOTools.isDirectBuffer(ByteBuffer byteBuffer)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "4582ae4dfb109348074921b55606d4ae4e58ebe2",
        "previous_commit": "f271ff8994920b661ad8be2a6379c14d50f77acd",
        "date": 1613933722,
        "releases": {
            "previous": "4582ae4dfb109348074921b55606d4ae4e58ebe2",
            "next": "4582ae4dfb109348074921b55606d4ae4e58ebe2"
        },
        "commit_message": "Improved handling and checking of discarded resource, closes https://github.com/OpenHFT/Chronicle-Core/issues/202\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "4582ae4dfb109348074921b55606d4ae4e58ebe2": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean hasException(@NotNull final Map<ExceptionKey, Integer> exceptions)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "public static void releasePendingResources()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.warnAndReleaseIfNotReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/RecordingExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.RecordingExceptionHandler.on(Class clazz, String message, Throwable thrown)"
                ]
            },
            "f271ff8994920b661ad8be2a6379c14d50f77acd": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean hasException(@NotNull final Map<ExceptionKey, Integer> exceptions)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "public static void releasePendingResources()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.warnAndReleaseIfNotReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/RecordingExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.RecordingExceptionHandler.on(Class clazz, String message, Throwable thrown)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "328720b4a4e9a29a55e632fbb4e564c4086a1f37",
        "previous_commit": "b485b123a844ceb3f5f79d39b12ee36231b0aec2",
        "date": 1625580863,
        "releases": {
            "previous": "328720b4a4e9a29a55e632fbb4e564c4086a1f37",
            "next": "328720b4a4e9a29a55e632fbb4e564c4086a1f37"
        },
        "commit_message": "Add the option to override individual ExceptionHandlers #236\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "328720b4a4e9a29a55e632fbb4e564c4086a1f37": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void disableDebugHandler()",
                    "public static void disablePerfHandler()",
                    "public static void disableWarnHandler()",
                    "public static Map<ExceptionKey, Integer> recordExceptions(final boolean debug, final boolean exceptionsOnly, final boolean logToSlf4j)",
                    "public static void resetExceptionHandlers()"
                ]
            },
            "b485b123a844ceb3f5f79d39b12ee36231b0aec2": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void disableDebugHandler()",
                    "public static void disablePerfHandler()",
                    "public static void disableWarnHandler()",
                    "public static Map<ExceptionKey, Integer> recordExceptions(final boolean debug, final boolean exceptionsOnly, final boolean logToSlf4j)",
                    "public static void resetExceptionHandlers()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "1a60764dc8fad010d1aebbea7d10884d4f57280b",
        "previous_commit": "664fb18c85e9cb2f0bb1ae1788700ec309d0bd0f",
        "date": 1609795835,
        "releases": {
            "previous": "1a60764dc8fad010d1aebbea7d10884d4f57280b",
            "next": "1a60764dc8fad010d1aebbea7d10884d4f57280b"
        },
        "commit_message": "Jvm.fatal() -> Jvm.error(). Remove fatal in x.23 #180\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "1a60764dc8fad010d1aebbea7d10884d4f57280b": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Map<ExceptionKey, Integer> recordExceptions(boolean debug, boolean exceptionsOnly, boolean logToSlf4j)",
                    "public static void setThreadLocalExceptionHandlers(@Nullable ExceptionHandler fatal, @Nullable ExceptionHandler warn, @Nullable ExceptionHandler debug, @Nullable ExceptionHandler perf)",
                    "public static void resetExceptionHandlers()"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/Slf4jExceptionHandler.java": [
                    "private static boolean isJUnitTest()",
                    "public static Slf4jExceptionHandler valueOf(LogLevel logLevel)"
                ]
            },
            "664fb18c85e9cb2f0bb1ae1788700ec309d0bd0f": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Map<ExceptionKey, Integer> recordExceptions(boolean debug, boolean exceptionsOnly, boolean logToSlf4j)",
                    "public static void setThreadLocalExceptionHandlers(@Nullable ExceptionHandler fatal, @Nullable ExceptionHandler warn, @Nullable ExceptionHandler debug, @Nullable ExceptionHandler perf)",
                    "public static void resetExceptionHandlers()"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/Slf4jExceptionHandler.java": [
                    "private static boolean isJUnitTest()",
                    "public static Slf4jExceptionHandler valueOf(LogLevel logLevel)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8ff843f54d6b7dc3ee3ebb1d7383234f7e49fda8",
        "previous_commit": "c4e29053a7d2b887550e66829b359550bc1b23a5",
        "date": 1593179889,
        "releases": {
            "previous": "8ff843f54d6b7dc3ee3ebb1d7383234f7e49fda8",
            "next": "8ff843f54d6b7dc3ee3ebb1d7383234f7e49fda8"
        },
        "commit_message": "Use a counter to ensure the releasePendingResources() doesn't return while the background thread is busy.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8ff843f54d6b7dc3ee3ebb1d7383234f7e49fda8": {
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "private static void runReleaseResources()",
                    "private static void release0(Object o)",
                    "private static void performRelease(Object o)",
                    "public static void releasePendingResources()"
                ]
            },
            "c4e29053a7d2b887550e66829b359550bc1b23a5": {
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "private static void runReleaseResources()",
                    "private static void release0(Object o)",
                    "private static void performRelease(Object o)",
                    "public static void releasePendingResources()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "ea5a5fa734babd016a3dd8cda4ef590074c2aef2",
        "previous_commit": "1a77d04c09e19ac05139c82494c449686f66d220",
        "date": 1532365072,
        "releases": {
            "previous": "ea5a5fa734babd016a3dd8cda4ef590074c2aef2",
            "next": "ea5a5fa734babd016a3dd8cda4ef590074c2aef2"
        },
        "commit_message": "More reflective magic for Java 11\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "ea5a5fa734babd016a3dd8cda4ef590074c2aef2": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Field getField(@NotNull Class clazz, @NotNull String name)",
                    "private static long maxDirectMemory0()"
                ],
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public ThrowingFunction<String, Object, Exception> net.openhft.chronicle.core.util.ConversionFunction.apply(@NotNull Class<?> c)"
                ]
            },
            "1a77d04c09e19ac05139c82494c449686f66d220": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Field getField(@NotNull Class clazz, @NotNull String name)",
                    "private static long maxDirectMemory0()"
                ],
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public ThrowingFunction<String, Object, Exception> net.openhft.chronicle.core.util.ConversionFunction.apply(@NotNull Class<?> c)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "87fc79398a376535af3636c4c43aa01e5cd59c9c",
        "previous_commit": "96f09ceb443e1401f44b045fd6577539d819a37f",
        "date": 1619521392,
        "releases": {
            "previous": "87fc79398a376535af3636c4c43aa01e5cd59c9c",
            "next": "87fc79398a376535af3636c4c43aa01e5cd59c9c"
        },
        "commit_message": "Migrate to new require method\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "87fc79398a376535af3636c4c43aa01e5cd59c9c": {
                "src/main/java/net/openhft/chronicle/core/util/Ints.java": [
                    "public static int net.openhft.chronicle.core.util.Ints.require(final IntPredicate requirement, final int value)",
                    "public static int net.openhft.chronicle.core.util.Ints.require(final IntTriPredicate requirement, final int value, final int otherFirstValue, final int otherSecondValue)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Longs.java": [
                    "public static long net.openhft.chronicle.core.util.Longs.require(final LongTriPredicate requirement, final long value, final long otherFirstValue, final long otherSecondValue)",
                    "public static long net.openhft.chronicle.core.util.Longs.require(final LongPredicate requirement, final long value)"
                ]
            },
            "96f09ceb443e1401f44b045fd6577539d819a37f": {
                "src/main/java/net/openhft/chronicle/core/util/Ints.java": [
                    "public static int net.openhft.chronicle.core.util.Ints.require(final IntPredicate requirement, final int value)",
                    "public static int net.openhft.chronicle.core.util.Ints.require(final IntTriPredicate requirement, final int value, final int otherFirstValue, final int otherSecondValue)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Longs.java": [
                    "public static long net.openhft.chronicle.core.util.Longs.require(final LongTriPredicate requirement, final long value, final long otherFirstValue, final long otherSecondValue)",
                    "public static long net.openhft.chronicle.core.util.Longs.require(final LongPredicate requirement, final long value)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "1b9ca2923f665ff58d10c7b5b621dac09857452a",
        "previous_commit": "0fec99d0211f34069c95ee5ddbc6fe8d2b095f15",
        "date": 1530199028,
        "releases": {
            "previous": "1b9ca2923f665ff58d10c7b5b621dac09857452a",
            "next": "1b9ca2923f665ff58d10c7b5b621dac09857452a"
        },
        "commit_message": "bug fix for ChronicleEnterprise/Chronicle-FIX#237\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "1b9ca2923f665ff58d10c7b5b621dac09857452a": {
                "src/main/java/net/openhft/chronicle/core/tcp/FastJ8SocketChannel.java": [
                    "int net.openhft.chronicle.core.tcp.FastJ8SocketChannel.readInternal(ByteBuffer buf)"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/UnsafeFastJ8SocketChannel.java": [
                    "int net.openhft.chronicle.core.tcp.UnsafeFastJ8SocketChannel.read0(ByteBuffer buf)",
                    "public int net.openhft.chronicle.core.tcp.UnsafeFastJ8SocketChannel.write(ByteBuffer buf)",
                    "private int net.openhft.chronicle.core.tcp.UnsafeFastJ8SocketChannel.writeInternal(ByteBuffer buf)"
                ]
            },
            "0fec99d0211f34069c95ee5ddbc6fe8d2b095f15": {
                "src/main/java/net/openhft/chronicle/core/tcp/FastJ8SocketChannel.java": [
                    "int net.openhft.chronicle.core.tcp.FastJ8SocketChannel.readInternal(ByteBuffer buf)"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/UnsafeFastJ8SocketChannel.java": [
                    "int net.openhft.chronicle.core.tcp.UnsafeFastJ8SocketChannel.read0(ByteBuffer buf)",
                    "public int net.openhft.chronicle.core.tcp.UnsafeFastJ8SocketChannel.write(ByteBuffer buf)",
                    "private int net.openhft.chronicle.core.tcp.UnsafeFastJ8SocketChannel.writeInternal(ByteBuffer buf)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "cce14ed9aefa5906162e50ec5ebe3ff1a0bafeee",
        "previous_commit": "fb2b4bf99cb8652782301ed98d980c53d9ba48ee",
        "date": 1567009731,
        "releases": {
            "previous": "cce14ed9aefa5906162e50ec5ebe3ff1a0bafeee",
            "next": "cce14ed9aefa5906162e50ec5ebe3ff1a0bafeee"
        },
        "commit_message": "Added support for dynamic discovery of files, https://github.com/OpenHFT/Chronicle-Core/issues/88\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "cce14ed9aefa5906162e50ec5ebe3ff1a0bafeee": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long mapAlignment()",
                    "public static long mapAlign(long offset)",
                    "public static Memory memory()",
                    "public static int pageSize()"
                ]
            },
            "fb2b4bf99cb8652782301ed98d980c53d9ba48ee": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long mapAlignment()",
                    "public static long mapAlign(long offset)",
                    "public static Memory memory()",
                    "public static int pageSize()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "7ccead74cdb0863d2fc2407019b04ed56611ec22",
        "previous_commit": "ba4aef0b9ae0aff6d0b1886b5bf41cb5405d6d75",
        "date": 1563374876,
        "releases": {
            "previous": "7ccead74cdb0863d2fc2407019b04ed56611ec22",
            "next": "7ccead74cdb0863d2fc2407019b04ed56611ec22"
        },
        "commit_message": "Fix reference map not being cleaned up properly\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7ccead74cdb0863d2fc2407019b04ed56611ec22": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "public static void net.openhft.chronicle.core.util.WeakReferenceCleaner.startReferenceProcessor(final Supplier<Executor> executorSupplier)",
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.scheduleForClean()",
                    "public static WeakReferenceCleaner net.openhft.chronicle.core.util.WeakReferenceCleaner.newCleaner(final Object referent, final Runnable thunk)",
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.run()"
                ]
            },
            "ba4aef0b9ae0aff6d0b1886b5bf41cb5405d6d75": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "public static void net.openhft.chronicle.core.util.WeakReferenceCleaner.startReferenceProcessor(final Supplier<Executor> executorSupplier)",
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.scheduleForClean()",
                    "public static WeakReferenceCleaner net.openhft.chronicle.core.util.WeakReferenceCleaner.newCleaner(final Object referent, final Runnable thunk)",
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.run()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b9601a4baa1c0ed6562cd7daaaae133a046fb86b",
        "previous_commit": "130d8b774445dbc4cd48920d597a466d82c62728",
        "date": 1604313037,
        "releases": {
            "previous": "b9601a4baa1c0ed6562cd7daaaae133a046fb86b",
            "next": "b9601a4baa1c0ed6562cd7daaaae133a046fb86b"
        },
        "commit_message": "Tidy code\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b9601a4baa1c0ed6562cd7daaaae133a046fb86b": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static int nextPower2(int n, int min)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, Object obj2, long offset2, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/Slf4jExceptionHandler.java": [
                    "private static boolean isJUnitTest()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Annotations.java": [
                    "public static <A extends Annotation> A getAnnotation(Method method, Class<A> annotationClass)"
                ]
            },
            "130d8b774445dbc4cd48920d597a466d82c62728": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static int nextPower2(int n, int min)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, Object obj2, long offset2, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/Slf4jExceptionHandler.java": [
                    "private static boolean isJUnitTest()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Annotations.java": [
                    "public static <A extends Annotation> A getAnnotation(Method method, Class<A> annotationClass)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "98003cf9301033a28099f7b2358174d53ec732ff",
        "previous_commit": "4442a2c169f60d16e483168dc8d4f384fb9c87bc",
        "date": 1712910122,
        "releases": {
            "previous": "98003cf9301033a28099f7b2358174d53ec732ff",
            "next": "98003cf9301033a28099f7b2358174d53ec732ff"
        },
        "commit_message": "Fixed currentTimeMillis() where timestamps come out in micros when uniqueness is enforced. #646 (#647)\n\n* Bug in currentTimeMillis() where timestamps come out in micros when uniqueness is enforced. #646\r\n\r\n* Check more timestamps and they are increasing #646\r\n\r\n* Check more timestamps and they are increasing #646\r\n\r\n* Added concurrency tests for millis/nanos #646",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "98003cf9301033a28099f7b2358174d53ec732ff": {
                "src/main/java/net/openhft/chronicle/core/time/UniqueMicroTimeProvider.java": [
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeNanos()",
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeMicros()",
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeMillis()",
                    "public UniqueMicroTimeProvider net.openhft.chronicle.core.time.UniqueMicroTimeProvider.provider(TimeProvider provider)"
                ]
            },
            "4442a2c169f60d16e483168dc8d4f384fb9c87bc": {
                "src/main/java/net/openhft/chronicle/core/time/UniqueMicroTimeProvider.java": [
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeNanos()",
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeMicros()",
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeMillis()",
                    "public UniqueMicroTimeProvider net.openhft.chronicle.core.time.UniqueMicroTimeProvider.provider(TimeProvider provider)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "bad322888898767c29610fa88511ba3b5fca7acd",
        "previous_commit": "2cd6ea5273284ac96d0e15e12fb93bd223cf0fba",
        "date": 1592317343,
        "releases": {
            "previous": "bad322888898767c29610fa88511ba3b5fca7acd",
            "next": "bad322888898767c29610fa88511ba3b5fca7acd"
        },
        "commit_message": "Add `throwExceptionIfClosed();` to most public methods for classes implementing Closeable, https://github.com/OpenHFT/Chronicle-Core/issues/116\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "bad322888898767c29610fa88511ba3b5fca7acd": {
                "src/main/java/net/openhft/chronicle/core/threads/OnDemandEventLoop.java": [
                    "public void net.openhft.chronicle.core.threads.OnDemandEventLoop.stop()",
                    "public void net.openhft.chronicle.core.threads.OnDemandEventLoop.addHandler(EventHandler handler)",
                    "public void net.openhft.chronicle.core.threads.OnDemandEventLoop.start()",
                    "public void net.openhft.chronicle.core.threads.OnDemandEventLoop.unpause()"
                ]
            },
            "2cd6ea5273284ac96d0e15e12fb93bd223cf0fba": {
                "src/main/java/net/openhft/chronicle/core/threads/OnDemandEventLoop.java": [
                    "public void net.openhft.chronicle.core.threads.OnDemandEventLoop.stop()",
                    "public void net.openhft.chronicle.core.threads.OnDemandEventLoop.addHandler(EventHandler handler)",
                    "public void net.openhft.chronicle.core.threads.OnDemandEventLoop.start()",
                    "public void net.openhft.chronicle.core.threads.OnDemandEventLoop.unpause()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e69aa1ac8d587770659fe7f29a516ec1dca8a0e2",
        "previous_commit": "8d4f82fca33af4e5d7e7335cae80b24aa25caeb7",
        "date": 1629473526,
        "releases": {
            "previous": "e69aa1ac8d587770659fe7f29a516ec1dca8a0e2",
            "next": "e69aa1ac8d587770659fe7f29a516ec1dca8a0e2"
        },
        "commit_message": "Remove members marked for deprecation in x.22, https://github.com/OpenHFT/Chronicle-Core/issues/243\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e69aa1ac8d587770659fe7f29a516ec1dca8a0e2": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class caller)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck(boolean isUsed)",
                    "protected boolean net.openhft.chronicle.core.io.AbstractCloseable.shouldPerformCloseInBackground()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static byte[] net.openhft.chronicle.core.io.IOTools.readFile(Class clazz, @NotNull String name)"
                ]
            },
            "8d4f82fca33af4e5d7e7335cae80b24aa25caeb7": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class caller)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected boolean net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck(boolean isUsed)",
                    "protected boolean net.openhft.chronicle.core.io.AbstractCloseable.shouldPerformCloseInBackground()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static byte[] net.openhft.chronicle.core.io.IOTools.readFile(Class clazz, @NotNull String name)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2f1e18c455a4fbde8a19acc70b597c46e1c70bf0",
        "previous_commit": "d400a3266fbf14932295e637e2e37910cfeb2f48",
        "date": 1689090829,
        "releases": {
            "previous": "2f1e18c455a4fbde8a19acc70b597c46e1c70bf0",
            "next": "2f1e18c455a4fbde8a19acc70b597c46e1c70bf0"
        },
        "commit_message": "Added javadoc 202307 (#545)\n\n* Add javadoc (and comments)\r\n\r\n* Add javadoc (and comments)\r\n\r\n* Add only Javadoc\r\n\r\n* Revert Rearrange\r\n\r\n* Tidy formatting\r\n\r\n* Tidy formatting\r\n\r\n* Tidy formatting",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2f1e18c455a4fbde8a19acc70b597c46e1c70bf0": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static String net.openhft.chronicle.core.OS.run(String... cmds)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long srcAddress, @Nullable Object dest, long destOffset, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/OnDemandEventLoop.java": [
                    "public boolean net.openhft.chronicle.core.threads.OnDemandEventLoop.isClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static void net.openhft.chronicle.core.util.ObjectUtils.immutabile(final Class<?> clazz, final boolean isImmutable)"
                ]
            },
            "d400a3266fbf14932295e637e2e37910cfeb2f48": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static String net.openhft.chronicle.core.OS.run(String... cmds)"
                ],
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long src, @Nullable Object dest, long destOffset, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/OnDemandEventLoop.java": [
                    "public boolean net.openhft.chronicle.core.threads.OnDemandEventLoop.isClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static void net.openhft.chronicle.core.util.ObjectUtils.immutabile(final Class<?> clazz, final boolean isImmutable)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c87d79bb22dbae2fa49e55f41241758559a9684c",
        "previous_commit": "aa80c37e846bc156ea4898bc70f3c051e383cd67",
        "date": 1592840660,
        "releases": {
            "previous": "c87d79bb22dbae2fa49e55f41241758559a9684c",
            "next": "c87d79bb22dbae2fa49e55f41241758559a9684c"
        },
        "commit_message": "Tuning CQE\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c87d79bb22dbae2fa49e55f41241758559a9684c": {
                "src/main/java/net/openhft/chronicle/core/util/Time.java": [
                    "public static void sleep(long time, TimeUnit timeUnit)",
                    "public static long currentTimeMillis()",
                    "public static void parkNanos(long nanos)",
                    "public static long tickTime()"
                ]
            },
            "aa80c37e846bc156ea4898bc70f3c051e383cd67": {
                "src/main/java/net/openhft/chronicle/core/util/Time.java": [
                    "public static void sleep(long time, TimeUnit timeUnit)",
                    "public static long currentTimeMillis()",
                    "public static void parkNanos(long nanos)",
                    "public static long tickTime()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f5123ae1a89f1ee2e69bf0efaf62b5a55b256a59",
        "previous_commit": "0e995701b39fd4004e7478da2d49ff0a65524418",
        "date": 1632413165,
        "releases": {
            "previous": "f5123ae1a89f1ee2e69bf0efaf62b5a55b256a59",
            "next": "f5123ae1a89f1ee2e69bf0efaf62b5a55b256a59"
        },
        "commit_message": "Add gcAndWaitForCloseablesToClose #250\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f5123ae1a89f1ee2e69bf0efaf62b5a55b256a59": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static boolean net.openhft.chronicle.core.io.AbstractCloseable.waitForCloseablesToClose(long millis)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "protected T net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.initialValue()",
                    "public synchronized void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanup(T value)"
                ]
            },
            "0e995701b39fd4004e7478da2d49ff0a65524418": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static boolean net.openhft.chronicle.core.io.AbstractCloseable.waitForCloseablesToClose(long millis)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "protected T net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.initialValue()",
                    "public synchronized void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanup(T value)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "01748bcbbd0f7f646edd28ffc024dcf0c44e8102",
        "previous_commit": "448c0e482271eab3c03c7ee1d74ab45886249be7",
        "date": 1591959126,
        "releases": {
            "previous": "01748bcbbd0f7f646edd28ffc024dcf0c44e8102",
            "next": "01748bcbbd0f7f646edd28ffc024dcf0c44e8102"
        },
        "commit_message": "Standardize how ReferenceCounted resources are managed and traced, https://github.com/OpenHFT/Chronicle-Core/issues/121\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "01748bcbbd0f7f646edd28ffc024dcf0c44e8102": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.releaseLast(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.release(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.warnAndReleaseIfNotReleased()"
                ]
            },
            "448c0e482271eab3c03c7ee1d74ab45886249be7": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.releaseLast(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.release(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.warnAndReleaseIfNotReleased()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "5135144c45538f548abccb1051317147754ca705",
        "previous_commit": "563633295fbaeb2974507a198e09405fd9d9a2c0",
        "date": 1592484751,
        "releases": {
            "previous": "5135144c45538f548abccb1051317147754ca705",
            "next": "5135144c45538f548abccb1051317147754ca705"
        },
        "commit_message": "As ISocketChannel can be closed in the background isClosed() can be true as close() has been called, but isOpen() is also true as it hasn't actually been closed yet. closes https://github.com/OpenHFT/Chronicle-Network/issues/75\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5135144c45538f548abccb1051317147754ca705": {
                "src/main/java/net/openhft/chronicle/core/tcp/FastJ8SocketChannel.java": [
                    "public int net.openhft.chronicle.core.tcp.FastJ8SocketChannel.read(ByteBuffer buf)",
                    "protected void net.openhft.chronicle.core.tcp.FastJ8SocketChannel.performClose()"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/UnsafeFastJ8SocketChannel.java": [
                    "public int net.openhft.chronicle.core.tcp.UnsafeFastJ8SocketChannel.write(ByteBuffer buf)"
                ]
            },
            "563633295fbaeb2974507a198e09405fd9d9a2c0": {
                "src/main/java/net/openhft/chronicle/core/tcp/FastJ8SocketChannel.java": [
                    "public int net.openhft.chronicle.core.tcp.FastJ8SocketChannel.read(ByteBuffer buf)",
                    "protected void net.openhft.chronicle.core.tcp.FastJ8SocketChannel.performClose()"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/UnsafeFastJ8SocketChannel.java": [
                    "public int net.openhft.chronicle.core.tcp.UnsafeFastJ8SocketChannel.write(ByteBuffer buf)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "33969c234b0f8f9614d70e01b6d5a1046f72b859",
        "previous_commit": "2ec899f0664eae5dfa3532cee077b7e2d561d2a3",
        "date": 1704903913,
        "releases": {
            "previous": "33969c234b0f8f9614d70e01b6d5a1046f72b859",
            "next": "33969c234b0f8f9614d70e01b6d5a1046f72b859"
        },
        "commit_message": "Make milli-second calls unique and improve Javadoc (#614)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "33969c234b0f8f9614d70e01b6d5a1046f72b859": {
                "src/main/java/net/openhft/chronicle/core/time/UniqueMicroTimeProvider.java": [
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeNanos()",
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeMicros()",
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeMillis()"
                ]
            },
            "2ec899f0664eae5dfa3532cee077b7e2d561d2a3": {
                "src/main/java/net/openhft/chronicle/core/time/UniqueMicroTimeProvider.java": [
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeNanos()",
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeMicros()",
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeMillis()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "9dc5847bf85be78080cba3d53fb393ea43f9a282",
        "previous_commit": "2f6b2e04e76c5a03b50983a7fcb20c85a9167103",
        "date": 1588764351,
        "releases": {
            "previous": "9dc5847bf85be78080cba3d53fb393ea43f9a282",
            "next": "9dc5847bf85be78080cba3d53fb393ea43f9a282"
        },
        "commit_message": "Improve reference count history output in ReferenceCounter, Fix #107\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9dc5847bf85be78080cba3d53fb393ea43f9a282": {
                "src/main/java/net/openhft/chronicle/core/ReferenceCounter.java": [
                    "public boolean net.openhft.chronicle.core.ReferenceCounter.tryReserve()",
                    "private boolean net.openhft.chronicle.core.ReferenceCounter.logReferenceCountHistory()",
                    "public void net.openhft.chronicle.core.ReferenceCounter.reserve()"
                ]
            },
            "2f6b2e04e76c5a03b50983a7fcb20c85a9167103": {
                "src/main/java/net/openhft/chronicle/core/ReferenceCounter.java": [
                    "public boolean net.openhft.chronicle.core.ReferenceCounter.tryReserve()",
                    "private boolean net.openhft.chronicle.core.ReferenceCounter.logReferenceCountHistory()",
                    "public void net.openhft.chronicle.core.ReferenceCounter.reserve()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "609cfd7f3f83e78a1ab2de1d4306fb5994486ae5",
        "previous_commit": "bb585b223467c2a6da1b612a79559854c7a64e45",
        "date": 1534760030,
        "releases": {
            "previous": "609cfd7f3f83e78a1ab2de1d4306fb5994486ae5",
            "next": "609cfd7f3f83e78a1ab2de1d4306fb5994486ae5"
        },
        "commit_message": "Added StackTrace purely for tracing purposes, not an Error or Exception https://github.com/OpenHFT/Chronicle-Core/issues/75\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "609cfd7f3f83e78a1ab2de1d4306fb5994486ae5": {
                "src/main/java/net/openhft/chronicle/core/ReferenceCounter.java": [
                    "private boolean net.openhft.chronicle.core.ReferenceCounter.newRefCountHistory()",
                    "private boolean net.openhft.chronicle.core.ReferenceCounter.recordResevation(long v)",
                    "private boolean net.openhft.chronicle.core.ReferenceCounter.recordRelease(long v)"
                ]
            },
            "bb585b223467c2a6da1b612a79559854c7a64e45": {
                "src/main/java/net/openhft/chronicle/core/ReferenceCounter.java": [
                    "private boolean net.openhft.chronicle.core.ReferenceCounter.newRefCountHistory()",
                    "private boolean net.openhft.chronicle.core.ReferenceCounter.recordResevation(long v)",
                    "private boolean net.openhft.chronicle.core.ReferenceCounter.recordRelease(long v)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "d8e74b2ed54c68842490b1b08f26f00a9a194e46",
        "previous_commit": "cf56c257bf419443dd4e922a75c9baf975f13c15",
        "date": 1679043300,
        "releases": {
            "previous": "d8e74b2ed54c68842490b1b08f26f00a9a194e46",
            "next": "d8e74b2ed54c68842490b1b08f26f00a9a194e46"
        },
        "commit_message": "Fix error is asDouble and parseDouble on the edge of precision. https://github.com/OpenHFT/Chronicle-Core/issues/484 (#490)\n\nCo-authored-by: Peter Lawrey <peter.lawrey@chronicle.software>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d8e74b2ed54c68842490b1b08f26f00a9a194e46": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double net.openhft.chronicle.core.Maths.asDouble(@NonNegative long value, int exponent, boolean negative, int decimalPlaces)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long net.openhft.chronicle.core.io.UnsafeText.appendDouble(long address, double d)",
                    "private static long net.openhft.chronicle.core.io.UnsafeText.appendFraction(long address, double d, int sign, long mantissa, int shift)"
                ]
            },
            "cf56c257bf419443dd4e922a75c9baf975f13c15": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double net.openhft.chronicle.core.Maths.asDouble(@NonNegative long value, int exponent, boolean negative, int decimalPlaces)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long net.openhft.chronicle.core.io.UnsafeText.appendDouble(long address, double d)",
                    "private static long net.openhft.chronicle.core.io.UnsafeText.appendFraction(long address, double d, int sign, long mantissa, int shift)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "df760d1ba2c5941f857f7368ed5958bb0ec6ee36",
        "previous_commit": "af53a3bec57e3e3aa6cc31c9478efa11f0ad6df2",
        "date": 1552669080,
        "releases": {
            "previous": "df760d1ba2c5941f857f7368ed5958bb0ec6ee36",
            "next": "df760d1ba2c5941f857f7368ed5958bb0ec6ee36"
        },
        "commit_message": "Added support for testing cool CPUs, https://github.com/OpenHFT/Chronicle-Core/issues/83\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "df760d1ba2c5941f857f7368ed5958bb0ec6ee36": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long appendFixed(long address, long num)",
                    "public static long appendBase10d(long address, long num, int decimal)",
                    "protected static void reverseTheOrder(long address, long start)"
                ]
            },
            "af53a3bec57e3e3aa6cc31c9478efa11f0ad6df2": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long appendFixed(long address, long num)",
                    "protected static long reverseTheOrder(long address, long start)",
                    "public static long appendBase10d(long address, long num, int decimal)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "ba64929114d109854196c29927271b60dbf0cdaa",
        "previous_commit": "27140afd8eb1930a2933aac25bfe8e4a7ec0fdbc",
        "date": 1596721582,
        "releases": {
            "previous": "ba64929114d109854196c29927271b60dbf0cdaa",
            "next": "ba64929114d109854196c29927271b60dbf0cdaa"
        },
        "commit_message": "The EnumCache to resize based on the size of the enum and conflicts, closes https://github.com/OpenHFT/Chronicle-Core/issues/131\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "ba64929114d109854196c29927271b60dbf0cdaa": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static long hash64(@NotNull CharSequence cs)",
                    "public static long hash64(@NotNull String s)",
                    "public static long hash64(@NotNull StringBuilder s)"
                ]
            },
            "27140afd8eb1930a2933aac25bfe8e4a7ec0fdbc": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static long hash64(@NotNull CharSequence cs)",
                    "public static long hash64(@NotNull String s)",
                    "public static long hash64(@NotNull StringBuilder s)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e92d5562723a321452105096bb0a4432d5792b9c",
        "previous_commit": "641dfb7cfc9a8da8483ad25abf62a82fa701ccc7",
        "date": 1616686329,
        "releases": {
            "previous": "e92d5562723a321452105096bb0a4432d5792b9c",
            "next": "e92d5562723a321452105096bb0a4432d5792b9c"
        },
        "commit_message": "Add REPLICATION_TIMER handler priority, to couple replication-based timer events with REPLICATION handlers\n(eg to keep heartbeats on the same thread as the main TcpEventHandler for replication)\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e92d5562723a321452105096bb0a4432d5792b9c": {
                "src/main/java/net/openhft/chronicle/core/threads/Timer.java": [
                    "public void net.openhft.chronicle.core.threads.Timer.scheduleAtFixedRate(@NotNull VanillaEventHandler eventHandler, long initialDelayMs, long periodMs, HandlerPriority priority )",
                    "public void net.openhft.chronicle.core.threads.Timer.scheduleAtFixedRate(@NotNull VanillaEventHandler eventHandler, long initialDelayMs, long periodMs)",
                    "public HandlerPriority net.openhft.chronicle.core.threads.Timer.priority()"
                ]
            },
            "641dfb7cfc9a8da8483ad25abf62a82fa701ccc7": {
                "src/main/java/net/openhft/chronicle/core/threads/Timer.java": [
                    "public HandlerPriority net.openhft.chronicle.core.threads.Timer.priority()",
                    "public void net.openhft.chronicle.core.threads.Timer.scheduleAtFixedRate(@NotNull VanillaEventHandler eventHandler, long initialDelayMs, long periodMs)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c1e8cb7fa7b20c56bcee90bc4b12d73a77749556",
        "previous_commit": "90c7804a813308975ef56060e7a06d7bf255a9ac",
        "date": 1607947490,
        "releases": {
            "previous": "c1e8cb7fa7b20c56bcee90bc4b12d73a77749556",
            "next": "c1e8cb7fa7b20c56bcee90bc4b12d73a77749556"
        },
        "commit_message": "Added tests to show readFile doesn't leak file handles, closes #165\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c1e8cb7fa7b20c56bcee90bc4b12d73a77749556": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static URL urlFor(ClassLoader classLoader, String name)",
                    "public static byte[] readFile(@NotNull String name)",
                    "public static byte[] readFile(Class clazz, @NotNull String name)"
                ]
            },
            "90c7804a813308975ef56060e7a06d7bf255a9ac": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static URL urlFor(ClassLoader classLoader, String name)",
                    "public static byte[] readFile(@NotNull String name)",
                    "public static byte[] readFile(Class clazz, @NotNull String name)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "cdadf08e0997f35128eef20847839b96543e95e8",
        "previous_commit": "81b09adb85343ea3e3d1f5d9bb947ecfe349065d",
        "date": 1692116235,
        "releases": {
            "previous": "cdadf08e0997f35128eef20847839b96543e95e8",
            "next": "cdadf08e0997f35128eef20847839b96543e95e8"
        },
        "commit_message": "Inline deprecated Maths.hash32 method (#561)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "cdadf08e0997f35128eef20847839b96543e95e8": {
                "src/main/java/net/openhft/chronicle/core/pool/ParsingCache.java": [
                    "public E net.openhft.chronicle.core.pool.ParsingCache<E>.intern(@Nullable CharSequence cs)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/StringInterner.java": [
                    "public String net.openhft.chronicle.core.pool.StringInterner.intern(@Nullable CharSequence cs)",
                    "public int net.openhft.chronicle.core.pool.StringInterner.index(@Nullable CharSequence cs, @Nullable Changed onChanged)"
                ]
            },
            "81b09adb85343ea3e3d1f5d9bb947ecfe349065d": {
                "src/main/java/net/openhft/chronicle/core/pool/ParsingCache.java": [
                    "public E net.openhft.chronicle.core.pool.ParsingCache<E>.intern(@Nullable CharSequence cs)"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/StringInterner.java": [
                    "public String net.openhft.chronicle.core.pool.StringInterner.intern(@Nullable CharSequence cs)",
                    "public int net.openhft.chronicle.core.pool.StringInterner.index(@Nullable CharSequence cs, @Nullable Changed onChanged)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "49457dece386973e9b441ce81e4c28d5ec38a5a7",
        "previous_commit": "b6a03e9838d383caef8cd8400d9f70b535e9f72f",
        "date": 1683294663,
        "releases": {
            "previous": "49457dece386973e9b441ce81e4c28d5ec38a5a7",
            "next": "49457dece386973e9b441ce81e4c28d5ec38a5a7"
        },
        "commit_message": "Support scanning for expected methods and ignoring the rest (#505)\n\nCo-authored-by: Peter Lawrey <peter.lawrey@chronicle.software>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "49457dece386973e9b441ce81e4c28d5ec38a5a7": {
                "src/main/java/net/openhft/chronicle/core/onoes/ChainedExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.ChainedExceptionHandler.on(@NotNull Class<?> clazz, @Nullable String message, @Nullable Throwable thrown)",
                    "public void net.openhft.chronicle.core.onoes.ChainedExceptionHandler.on(@NotNull Logger logger, @Nullable String message, Throwable thrown)"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/ThreadLocalisedExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.ThreadLocalisedExceptionHandler.on(@NotNull Logger logger, @Nullable String message, Throwable thrown)"
                ]
            },
            "b6a03e9838d383caef8cd8400d9f70b535e9f72f": {
                "src/main/java/net/openhft/chronicle/core/onoes/ChainedExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.ChainedExceptionHandler.on(@NotNull Class<?> clazz, @Nullable String message, @Nullable Throwable thrown)",
                    "public void net.openhft.chronicle.core.onoes.ChainedExceptionHandler.on(@NotNull Logger logger, @Nullable String message, Throwable thrown)"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/ThreadLocalisedExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.ThreadLocalisedExceptionHandler.on(@NotNull Logger logger, @Nullable String message, Throwable thrown)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e9a148b13567d22e3473c7271eec6993f955a281",
        "previous_commit": "a5b2a88696adfffd7c0b05f9c5610519ea3d2cc1",
        "date": 1588861157,
        "releases": {
            "previous": "e9a148b13567d22e3473c7271eec6993f955a281",
            "next": "e9a148b13567d22e3473c7271eec6993f955a281"
        },
        "commit_message": "Fix lingering thread in WeakReferenceCleaner thread, Fix #109\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e9a148b13567d22e3473c7271eec6993f955a281": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "public static WeakReferenceCleaner net.openhft.chronicle.core.util.WeakReferenceCleaner.newCleaner(final Object referent, final Runnable thunk)",
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.clean()",
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.run()"
                ]
            },
            "a5b2a88696adfffd7c0b05f9c5610519ea3d2cc1": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "public static WeakReferenceCleaner net.openhft.chronicle.core.util.WeakReferenceCleaner.newCleaner(final Object referent, final Runnable thunk)",
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.clean()",
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.run()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "76ec1b9627cc67a360b5c5ee7f692d4a57096e63",
        "previous_commit": "a1a25cae584982751f612c09f60d996c9295fd69",
        "date": 1504093820,
        "releases": {
            "previous": "76ec1b9627cc67a360b5c5ee7f692d4a57096e63",
            "next": "76ec1b9627cc67a360b5c5ee7f692d4a57096e63"
        },
        "commit_message": "make StringUtils.newString() java9 compliant\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "76ec1b9627cc67a360b5c5ee7f692d4a57096e63": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static char[] extractChars(String s)",
                    "public static String newString(char[] chars)",
                    "public static char[] extractChars(StringBuilder sb)"
                ]
            },
            "a1a25cae584982751f612c09f60d996c9295fd69": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static char[] extractChars(String s)",
                    "public static String newString(char[] chars)",
                    "public static char[] extractChars(StringBuilder sb)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9a2d852c92d4b7b69eba3455d8bd7a579dc8707e",
        "previous_commit": "7676651a17882dd70cd4dc9344b5d5b9631d1e24",
        "date": 1655904052,
        "releases": {
            "previous": "9a2d852c92d4b7b69eba3455d8bd7a579dc8707e",
            "next": "9a2d852c92d4b7b69eba3455d8bd7a579dc8707e"
        },
        "commit_message": "Add custom implementations for readVolatileShort(Object, offset), writeVolatileShort(Object, offset) and readVolatileInt(Object, offset) for ARMMemory. Fix #416\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9a2d852c92d4b7b69eba3455d8bd7a579dc8707e": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public short net.openhft.chronicle.core.UnsafeMemory.readVolatileShort(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileShort(Object object, long offset, short i16)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(Object object, long offset)"
                ]
            },
            "7676651a17882dd70cd4dc9344b5d5b9631d1e24": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public short net.openhft.chronicle.core.UnsafeMemory.readVolatileShort(Object object, long offset)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileShort(Object object, long offset, short i16)",
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(Object object, long offset)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "67400736c16edaaa1f773a4c2b4d08bea85c46d6",
        "previous_commit": "73ac4cf0aab049ea443fc67b6021474ad9b88e4b",
        "date": 1524328891,
        "releases": {
            "previous": "67400736c16edaaa1f773a4c2b4d08bea85c46d6",
            "next": "67400736c16edaaa1f773a4c2b4d08bea85c46d6"
        },
        "commit_message": "Code tidy after code inspections\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "67400736c16edaaa1f773a4c2b4d08bea85c46d6": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "private void net.openhft.chronicle.core.jlbh.JLBH.endOfRun(int run, long runStart)",
                    "private void net.openhft.chronicle.core.jlbh.JLBH.endOfAllRuns()"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/FastJ8SocketChannel.java": [
                    "private int net.openhft.chronicle.core.tcp.FastJ8SocketChannel.read0(ByteBuffer buf)"
                ]
            },
            "73ac4cf0aab049ea443fc67b6021474ad9b88e4b": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "private void net.openhft.chronicle.core.jlbh.JLBH.endOfRun(int run, long runStart)",
                    "private void net.openhft.chronicle.core.jlbh.JLBH.endOfAllRuns()"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/FastJ8SocketChannel.java": [
                    "private int net.openhft.chronicle.core.tcp.FastJ8SocketChannel.read0(ByteBuffer buf)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "5d2b12a4f6dd09e579d5cc15ee977fc84f0095f3",
        "previous_commit": "e98de07c8d4c449ba7eeb5876deceac69f8ee0c0",
        "date": 1536853745,
        "releases": {
            "previous": "5d2b12a4f6dd09e579d5cc15ee977fc84f0095f3",
            "next": "5d2b12a4f6dd09e579d5cc15ee977fc84f0095f3"
        },
        "commit_message": "Ability to abort tests.\nFix bug in noResultReturned.\nAdd in ability to timeout test.\nFix bug where issue with output prevents JLBHTask.complete to be called.\nChronicleEnterprise/RootPom#67\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5d2b12a4f6dd09e579d5cc15ee977fc84f0095f3": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "private void net.openhft.chronicle.core.jlbh.JLBH.endOfRun(int run, long runStart)",
                    "public void net.openhft.chronicle.core.jlbh.JLBH.start()",
                    "public void net.openhft.chronicle.core.jlbh.JLBH.printPercentilesSummary(String label, @NotNull List<double[]> percentileRuns, Appendable appendable)"
                ]
            },
            "e98de07c8d4c449ba7eeb5876deceac69f8ee0c0": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "private void net.openhft.chronicle.core.jlbh.JLBH.endOfRun(int run, long runStart)",
                    "public void net.openhft.chronicle.core.jlbh.JLBH.start()",
                    "public void net.openhft.chronicle.core.jlbh.JLBH.printPercentilesSummary(String label, @NotNull List<double[]> percentileRuns, Appendable appendable)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "c5799519a05deb84f36af68ea9e0a23ed4329f32",
        "previous_commit": "d349cbd3322ddb43794306d3ba28856ee3c7bd5e",
        "date": 1604914393,
        "releases": {
            "previous": "c5799519a05deb84f36af68ea9e0a23ed4329f32",
            "next": "c5799519a05deb84f36af68ea9e0a23ed4329f32"
        },
        "commit_message": "Improve json and parameters\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c5799519a05deb84f36af68ea9e0a23ed4329f32": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/ga/GoogleAnalytics.java": [
                    "private void net.openhft.chronicle.core.internal.analytics.ga.GoogleAnalytics.httpSend(@NotNull String eventName)",
                    "private Map<String, Object> net.openhft.chronicle.core.internal.analytics.ga.GoogleAnalytics.userProperties()",
                    "private String net.openhft.chronicle.core.internal.analytics.ga.GoogleAnalytics.jsonFor(@NotNull final String eventName, @NotNull final Map<String, Object> additionalProperties)"
                ]
            },
            "d349cbd3322ddb43794306d3ba28856ee3c7bd5e": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/ga/GoogleAnalytics.java": [
                    "private void net.openhft.chronicle.core.internal.analytics.ga.GoogleAnalytics.httpSend(@NotNull String eventName)",
                    "private Map<String, Object> net.openhft.chronicle.core.internal.analytics.ga.GoogleAnalytics.userProperties()",
                    "private String net.openhft.chronicle.core.internal.analytics.ga.GoogleAnalytics.jsonFor(@NotNull final String eventName, @NotNull final Map<String, Object> additionalProperties)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "bc6d344f832035a3215054e7cc8e34df415b8cac",
        "previous_commit": "3ccb53b6d0891a3609f9b77e684b37fbce225fa6",
        "date": 1698640179,
        "releases": {
            "previous": "bc6d344f832035a3215054e7cc8e34df415b8cac",
            "next": "bc6d344f832035a3215054e7cc8e34df415b8cac"
        },
        "commit_message": "Remove deprecated code.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "bc6d344f832035a3215054e7cc8e34df415b8cac": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static long net.openhft.chronicle.core.Maths.hash64(long l0)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/Bootstrap.java": [
                    "public static boolean net.openhft.chronicle.core.internal.Bootstrap.isMacArm0()",
                    "private static int net.openhft.chronicle.core.internal.Bootstrap.getMajorVersion0()"
                ]
            },
            "3ccb53b6d0891a3609f9b77e684b37fbce225fa6": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static long net.openhft.chronicle.core.Maths.hash64(long l0)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/Bootstrap.java": [
                    "private static int net.openhft.chronicle.core.Bootstrap.getMajorVersion0()",
                    "static boolean net.openhft.chronicle.core.Bootstrap.isMacArm0()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "4fc0a5aa9c014db494e66c819745a069ba720e31",
        "previous_commit": "052e64ede532eee523684334378d030a33f22d95",
        "date": 1554216585,
        "releases": {
            "previous": "4fc0a5aa9c014db494e66c819745a069ba720e31",
            "next": "4fc0a5aa9c014db494e66c819745a069ba720e31"
        },
        "commit_message": "Added support for a spin wait call for Java 8/9+\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "4fc0a5aa9c014db494e66c819745a069ba720e31": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void safepoint()",
                    "public static void busyWaitUntil(long waitUntil)"
                ],
                "src/main/java/net/openhft/chronicle/core/cooler/CpuCoolers.java": [
                    "public static void busyWait(double nanos)"
                ]
            },
            "052e64ede532eee523684334378d030a33f22d95": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void safepoint()",
                    "public static void busyWaitUntil(long waitUntil)"
                ],
                "src/main/java/net/openhft/chronicle/core/cooler/CpuCoolers.java": [
                    "public static void busyWait(double nanos)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "95961dd751939482b3b1db4e178a96ed50716054",
        "previous_commit": "b0d817301276b2410e05dc87fa3b4b3424864959",
        "date": 1606401275,
        "releases": {
            "previous": "95961dd751939482b3b1db4e178a96ed50716054",
            "next": "95961dd751939482b3b1db4e178a96ed50716054"
        },
        "commit_message": "Make the debug for interrupting a mapped file non reentrant. closes #158\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "95961dd751939482b3b1db4e178a96ed50716054": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Map<ExceptionKey, Integer> recordExceptions(boolean debug, boolean exceptionsOnly, boolean logToSlf4j)",
                    "private static void doNotCloseOnInterrupt8(Class clazz, FileChannel fc)",
                    "private static void doNotCloseOnInterrupt9(Class clazz, final FileChannel fc)"
                ]
            },
            "b0d817301276b2410e05dc87fa3b4b3424864959": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Map<ExceptionKey, Integer> recordExceptions(boolean debug, boolean exceptionsOnly, boolean logToSlf4j)",
                    "private static void doNotCloseOnInterrupt8(Class clazz, FileChannel fc)",
                    "private static void doNotCloseOnInterrupt9(Class clazz, final FileChannel fc)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2533054555effea43d89d8099c21c5bfb9343d14",
        "previous_commit": "cac87de09859daa561610ed00a27be382c7edf9e",
        "date": 1614938726,
        "releases": {
            "previous": "2533054555effea43d89d8099c21c5bfb9343d14",
            "next": "2533054555effea43d89d8099c21c5bfb9343d14"
        },
        "commit_message": "Fixed performance regression in BytesMarshalling text, https://github.com/OpenHFT/Chronicle-Wire/issues/265\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2533054555effea43d89d8099c21c5bfb9343d14": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.unmonitor(ReferenceCounted counted)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.warnAndReleaseIfNotReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.warnAndReleaseIfNotReleased()"
                ]
            },
            "cac87de09859daa561610ed00a27be382c7edf9e": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.unmonitor(ReferenceCounted counted)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.warnAndReleaseIfNotReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.warnAndReleaseIfNotReleased()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "5653ef3dfffc49cc365f26da93b2436caccd1e54",
        "previous_commit": "564c858de6dbcc76cf887b7eb6281e341267d54a",
        "date": 1600441549,
        "releases": {
            "previous": "5653ef3dfffc49cc365f26da93b2436caccd1e54",
            "next": "5653ef3dfffc49cc365f26da93b2436caccd1e54"
        },
        "commit_message": "Fix a bug which is meant to prevent overflows but instead prevent some rounding beyond 7 digits of precision. closes https://github.com/OpenHFT/Chronicle-Core/issues/80\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5653ef3dfffc49cc365f26da93b2436caccd1e54": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double ceilN(double d, int digits)",
                    "public static double roundN(double d, double digits)",
                    "public static double floorN(double d, int digits)"
                ]
            },
            "564c858de6dbcc76cf887b7eb6281e341267d54a": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double ceilN(double d, int digits)",
                    "public static double roundN(double d, double digits)",
                    "public static double floorN(double d, int digits)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "0a3a4c5f49009491be12a424184d074400b37a98",
        "previous_commit": "7f465d511ccebd6dbe2aafa9ede97e16858972e5",
        "date": 1612790360,
        "releases": {
            "previous": "0a3a4c5f49009491be12a424184d074400b37a98",
            "next": "0a3a4c5f49009491be12a424184d074400b37a98"
        },
        "commit_message": "Add selected unchecked exceptions to the throws clause #198\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0a3a4c5f49009491be12a424184d074400b37a98": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "void net.openhft.chronicle.core.io.AbstractReferenceCounted.inThreadPerformRelease()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "private boolean net.openhft.chronicle.core.io.TracingReferenceCounted.tryReserve(ReferenceOwner id, boolean must)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Time.java": [
                    "public static String net.openhft.chronicle.core.util.Time.uniqueId()"
                ]
            },
            "7f465d511ccebd6dbe2aafa9ede97e16858972e5": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "void net.openhft.chronicle.core.io.AbstractReferenceCounted.inThreadPerformRelease()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "private boolean net.openhft.chronicle.core.io.TracingReferenceCounted.tryReserve(ReferenceOwner id, boolean must)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Time.java": [
                    "public static String net.openhft.chronicle.core.util.Time.uniqueId()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "9c17bf4af5ba175391e555689551be3dbacf084f",
        "previous_commit": "49b0a30b42990e5b61f9ad67943bffa705ce9c27",
        "date": 1624880979,
        "releases": {
            "previous": "9c17bf4af5ba175391e555689551be3dbacf084f",
            "next": "9c17bf4af5ba175391e555689551be3dbacf084f"
        },
        "commit_message": "Use Jvm.{level}() handlers instead of calling loggers directly, and unit tests cleanup esp use of @After, https://github.com/OpenHFT/Chronicle-Core/issues/233\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9c17bf4af5ba175391e555689551be3dbacf084f": {
                "src/main/java/net/openhft/chronicle/core/cleaner/CleanerServiceLocator.java": [
                    "public static synchronized ByteBufferCleanerService net.openhft.chronicle.core.cleaner.CleanerServiceLocator.cleanerService()"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/JitterSampler.java": [
                    "public static void net.openhft.chronicle.core.threads.JitterSampler.finished()",
                    "public static void net.openhft.chronicle.core.threads.JitterSampler.atStage(String desc)"
                ]
            },
            "49b0a30b42990e5b61f9ad67943bffa705ce9c27": {
                "src/main/java/net/openhft/chronicle/core/cleaner/CleanerServiceLocator.java": [
                    "public static synchronized ByteBufferCleanerService net.openhft.chronicle.core.cleaner.CleanerServiceLocator.cleanerService()"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/JitterSampler.java": [
                    "public static void net.openhft.chronicle.core.threads.JitterSampler.finished()",
                    "public static void net.openhft.chronicle.core.threads.JitterSampler.atStage(String desc)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "7d9bee6ede9a4786b0740357819032eb3762d634",
        "previous_commit": "26b7894f39e6fefa277a142b00654af3d38e8c9e",
        "date": 1613565726,
        "releases": {
            "previous": "7d9bee6ede9a4786b0740357819032eb3762d634",
            "next": "7d9bee6ede9a4786b0740357819032eb3762d634"
        },
        "commit_message": "Support disable.discard.warning for when developing these components\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7d9bee6ede9a4786b0740357819032eb3762d634": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.warnAndCloseIfNotClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.warnAndReleaseIfNotReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.warnAndReleaseIfNotReleased()"
                ]
            },
            "26b7894f39e6fefa277a142b00654af3d38e8c9e": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.warnAndCloseIfNotClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.warnAndReleaseIfNotReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.warnAndReleaseIfNotReleased()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "18e3d743da8247d6b22e234eec85607dcbe784be",
        "previous_commit": "4426b37a2c7a242357a10832ce11754f5636175d",
        "date": 1504175120,
        "releases": {
            "previous": "18e3d743da8247d6b22e234eec85607dcbe784be",
            "next": "18e3d743da8247d6b22e234eec85607dcbe784be"
        },
        "commit_message": "Patch for JDK-9\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "18e3d743da8247d6b22e234eec85607dcbe784be": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static long hash64(@NotNull StringBuilder s)",
                    "public static long hash64(@NotNull String s)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static boolean isEqual(@Nullable StringBuilder s, @Nullable CharSequence cs)"
                ]
            },
            "4426b37a2c7a242357a10832ce11754f5636175d": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static long hash64(@NotNull StringBuilder s)",
                    "public static long hash64(@NotNull String s)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static boolean isEqual(@Nullable StringBuilder s, @Nullable CharSequence cs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4a10a202ab4bb384afe5dec82640ceed08e53a07",
        "previous_commit": "6a22dda3a3e80b6dd7bd75b1b4ad7e06063edc39",
        "date": 1590592671,
        "releases": {
            "previous": "4a10a202ab4bb384afe5dec82640ceed08e53a07",
            "next": "4a10a202ab4bb384afe5dec82640ceed08e53a07"
        },
        "commit_message": "Add enhanced reference tracing, https://github.com/OpenHFT/Chronicle-Core/issues/118\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "4a10a202ab4bb384afe5dec82640ceed08e53a07": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.warnIfNotClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public boolean net.openhft.chronicle.core.io.AbstractReferenceCounted.tryReserve(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.reserve(ReferenceOwner id)"
                ]
            },
            "6a22dda3a3e80b6dd7bd75b1b4ad7e06063edc39": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.warnIfNotClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public boolean net.openhft.chronicle.core.io.AbstractReferenceCounted.tryReserve(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.reserve(ReferenceOwner id)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "7178784951f9becbd4e1a1fd6139d8935c3be7a3",
        "previous_commit": "07f5536df112821fee5ca54fdccda9a8d7b49273",
        "date": 1514510962,
        "releases": {
            "previous": "7178784951f9becbd4e1a1fd6139d8935c3be7a3",
            "next": "7178784951f9becbd4e1a1fd6139d8935c3be7a3"
        },
        "commit_message": "Jvm.recordExceptions parameterise to record *only* exceptions\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7178784951f9becbd4e1a1fd6139d8935c3be7a3": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Map<ExceptionKey, Integer> recordExceptions(boolean debug)",
                    "public static Map<ExceptionKey, Integer> recordExceptions(boolean debug, boolean exceptionsOnly)"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/RecordingExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.RecordingExceptionHandler.on(Class clazz, String message, Throwable thrown)"
                ]
            },
            "07f5536df112821fee5ca54fdccda9a8d7b49273": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Map<ExceptionKey, Integer> recordExceptions(boolean debug)"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/RecordingExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.RecordingExceptionHandler.on(Class clazz, String message, Throwable thrown)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "e3a0888127b68c96e5840437629cac6011192788",
        "previous_commit": "45d96bb99bb7fbf38c5c0418b4f1965528a20441",
        "date": 1633699338,
        "releases": {
            "previous": "e3a0888127b68c96e5840437629cac6011192788",
            "next": "e3a0888127b68c96e5840437629cac6011192788"
        },
        "commit_message": "Fix more typos\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e3a0888127b68c96e5840437629cac6011192788": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "private void net.openhft.chronicle.core.UnsafeMemory.backwardCopyMemoryLoop(Object o, long offset, Object o2, long offset2, int length)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.copyMemoryLoop(Object o, long offset, long toAddr, int length)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.copyMemoryLoop(Object o, long offset, Object o2, long offset2, int length)"
                ]
            },
            "45d96bb99bb7fbf38c5c0418b4f1965528a20441": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "private void net.openhft.chronicle.core.UnsafeMemory.backwardCopyMemoryLoop(Object o, long offset, Object o2, long offset2, int length)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.copyMemoryLoop(Object o, long offset, long toAddr, int length)",
                    "private void net.openhft.chronicle.core.UnsafeMemory.copyMemoryLoop(Object o, long offset, Object o2, long offset2, int length)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d2f9a29f8e25c7d690f2953fe1c8fd1df78715a8",
        "previous_commit": "f9d26d4b6b3ccf82e5fed62d56af5c5831bd6e76",
        "date": 1512939248,
        "releases": {
            "previous": "d2f9a29f8e25c7d690f2953fe1c8fd1df78715a8",
            "next": "d2f9a29f8e25c7d690f2953fe1c8fd1df78715a8"
        },
        "commit_message": "[Issue #45] Allow passing non standard print stream to test the output.\n\nSystem.out as a default option is a sane choice for JLBH as the most\nfrequent (only?) use case is displaying the JLBH result on the screen.\nHowever, hardcoded System.out reference as the only print stream output in JLBH\nmay be inconvenient when the output can be ignored or parsed further.\n\nBy keeping the existing contructor and adding additional one that allows\na client to pass a custom implementation of PrintStream we add this flexibility\nwithout affecting existing clients as behavior stays exactly the same.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d2f9a29f8e25c7d690f2953fe1c8fd1df78715a8": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.run()",
                    "public void net.openhft.chronicle.core.jlbh.JLBH.start()",
                    "private void net.openhft.chronicle.core.jlbh.JLBH.printPercentilesSummary(String label, @NotNull List<double[]> percentileRuns)"
                ]
            },
            "f9d26d4b6b3ccf82e5fed62d56af5c5831bd6e76": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.run()",
                    "public void net.openhft.chronicle.core.jlbh.JLBH.start()",
                    "private void net.openhft.chronicle.core.jlbh.JLBH.printPercentilesSummary(String label, @NotNull List<double[]> percentileRuns)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "a5ab94eaeac6f8da8e967910c223efcaacd0f4d1",
        "previous_commit": "fdcac4a5084e9961d3a43e82f1d572ec7f0f17b4",
        "date": 1629926130,
        "releases": {
            "previous": "a5ab94eaeac6f8da8e967910c223efcaacd0f4d1",
            "next": "a5ab94eaeac6f8da8e967910c223efcaacd0f4d1"
        },
        "commit_message": "ClassAliasPool warn if try to replace one class with another\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a5ab94eaeac6f8da8e967910c223efcaacd0f4d1": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.addAlias(@NotNull Class... classes)",
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.addAlias(Class clazz, @NotNull String names)",
                    "private ClassAliasPool net.openhft.chronicle.core.pool.ClassAliasPool.defaultAliases()"
                ]
            },
            "fdcac4a5084e9961d3a43e82f1d572ec7f0f17b4": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.addAlias(@NotNull Class... classes)",
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.addAlias(Class clazz, @NotNull String names)",
                    "private ClassAliasPool net.openhft.chronicle.core.pool.ClassAliasPool.defaultAliases()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "11139d60b72d887aa74b5cabed5cf56700ef9aea",
        "previous_commit": "dd0d4047393d736b1307168851ad3b168e527886",
        "date": 1532074329,
        "releases": {
            "previous": "11139d60b72d887aa74b5cabed5cf56700ef9aea",
            "next": "11139d60b72d887aa74b5cabed5cf56700ef9aea"
        },
        "commit_message": "Eliminate extra check\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "11139d60b72d887aa74b5cabed5cf56700ef9aea": {
                "src/main/java/net/openhft/chronicle/core/tcp/FastJ8SocketChannel.java": [
                    "int net.openhft.chronicle.core.tcp.FastJ8SocketChannel.read0(ByteBuffer buf)"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/UnsafeFastJ8SocketChannel.java": [
                    "int net.openhft.chronicle.core.tcp.UnsafeFastJ8SocketChannel.read0(ByteBuffer buf)",
                    "public int net.openhft.chronicle.core.tcp.UnsafeFastJ8SocketChannel.write(ByteBuffer buf)"
                ]
            },
            "dd0d4047393d736b1307168851ad3b168e527886": {
                "src/main/java/net/openhft/chronicle/core/tcp/FastJ8SocketChannel.java": [
                    "int net.openhft.chronicle.core.tcp.FastJ8SocketChannel.read0(ByteBuffer buf)"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/UnsafeFastJ8SocketChannel.java": [
                    "int net.openhft.chronicle.core.tcp.UnsafeFastJ8SocketChannel.read0(ByteBuffer buf)",
                    "public int net.openhft.chronicle.core.tcp.UnsafeFastJ8SocketChannel.write(ByteBuffer buf)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "5caf1e20cc22f4ea51bdf550caa9242b5149c27b",
        "previous_commit": "469a7075758d4cd101c5ee2e698d0cd1651b40d3",
        "date": 1663067788,
        "releases": {
            "previous": "5caf1e20cc22f4ea51bdf550caa9242b5149c27b",
            "next": "5caf1e20cc22f4ea51bdf550caa9242b5149c27b"
        },
        "commit_message": "Fire ReferenceChangeListener when warnAndReleaseIfNotReleased results in references being released\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5caf1e20cc22f4ea51bdf550caa9242b5149c27b": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.warnAndReleaseIfNotReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.warnAndReleaseIfNotReleased()"
                ]
            },
            "469a7075758d4cd101c5ee2e698d0cd1651b40d3": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.warnAndReleaseIfNotReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.warnAndReleaseIfNotReleased()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8f1ec6f0dab43784f76caaec7d9ed46267dfa522",
        "previous_commit": "1995a3d38c5e63478f5ccbb827f7cf4c1722780e",
        "date": 1593676154,
        "releases": {
            "previous": "8f1ec6f0dab43784f76caaec7d9ed46267dfa522",
            "next": "8f1ec6f0dab43784f76caaec7d9ed46267dfa522"
        },
        "commit_message": "Standardize the top of pom.xml files.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8f1ec6f0dab43784f76caaec7d9ed46267dfa522": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.clearUsedByThread()",
                    "protected boolean net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck(boolean isUsed)",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.resetUsedByThread()"
                ]
            },
            "1995a3d38c5e63478f5ccbb827f7cf4c1722780e": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.clearUsedByThread()",
                    "protected boolean net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck(boolean isUsed)",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.resetUsedByThread()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "5d02d13a222825bd3cfda0113575a03ab2c3daca",
        "previous_commit": "65459b7d9be0eb8402a6cc133f58d9bb47cfa381",
        "date": 1629813549,
        "releases": {
            "previous": "5d02d13a222825bd3cfda0113575a03ab2c3daca",
            "next": "5d02d13a222825bd3cfda0113575a03ab2c3daca"
        },
        "commit_message": "Remove members marked for deprecation in x.22, https://github.com/OpenHFT/Chronicle-Core/issues/243\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5d02d13a222825bd3cfda0113575a03ab2c3daca": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "private static void net.openhft.chronicle.core.io.AbstractCloseable.getCloseableFields(Class keyClass, Set<Field> fields)",
                    "public static boolean net.openhft.chronicle.core.io.AbstractCloseable.waitForCloseablesToClose(long millis)",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ]
            },
            "65459b7d9be0eb8402a6cc133f58d9bb47cfa381": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "private static void net.openhft.chronicle.core.io.AbstractCloseable.getCloseableFields(Class keyClass, Set<Field> fields)",
                    "public static boolean net.openhft.chronicle.core.io.AbstractCloseable.waitForCloseablesToClose(long millis)",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "5b603a648bd797e2315c21e2522321ff4a8e56a6",
        "previous_commit": "43ba32e22dc6e51ad31f9665ed828b30d336623d",
        "date": 1681313305,
        "releases": {
            "previous": "5b603a648bd797e2315c21e2522321ff4a8e56a6",
            "next": "5b603a648bd797e2315c21e2522321ff4a8e56a6"
        },
        "commit_message": "Explicitly disable debug info to reduce the overhead in benchmarks (#503)\n\n* Explicitly disable debug info to reduce the overhead in benchmarks\r\n\r\n* Ensure Maths.hash64 produces the same result in Java 8/11/17\r\n\r\n---------\r\n\r\nCo-authored-by: Peter Lawrey <peter.lawrey@chronicle.software>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5b603a648bd797e2315c21e2522321ff4a8e56a6": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void net.openhft.chronicle.core.Jvm.setDebugExceptionHandler(ExceptionHandler exceptionHandler)",
                    "public static void net.openhft.chronicle.core.Jvm.setExceptionHandlers(@Nullable final ExceptionHandler error, @Nullable final ExceptionHandler warn, @Nullable final ExceptionHandler debug)",
                    "public static void net.openhft.chronicle.core.Jvm.setThreadLocalExceptionHandlers(@Nullable final ExceptionHandler error, @Nullable final ExceptionHandler warn, @Nullable final ExceptionHandler debug)"
                ]
            },
            "43ba32e22dc6e51ad31f9665ed828b30d336623d": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void net.openhft.chronicle.core.Jvm.setDebugExceptionHandler(ExceptionHandler exceptionHandler)",
                    "public static void net.openhft.chronicle.core.Jvm.setExceptionHandlers(@Nullable final ExceptionHandler error, @Nullable final ExceptionHandler warn, @Nullable final ExceptionHandler debug)",
                    "public static void net.openhft.chronicle.core.Jvm.setThreadLocalExceptionHandlers(@Nullable final ExceptionHandler error, @Nullable final ExceptionHandler warn, @Nullable final ExceptionHandler debug)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "96aca57d95a10c3b6331155e479b0ab8c4b4c305",
        "previous_commit": "5caf1e20cc22f4ea51bdf550caa9242b5149c27b",
        "date": 1663067788,
        "releases": {
            "previous": "96aca57d95a10c3b6331155e479b0ab8c4b4c305",
            "next": "96aca57d95a10c3b6331155e479b0ab8c4b4c305"
        },
        "commit_message": "Don't fire event handlers when warnAndReleaseIfNotReleased is called\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "96aca57d95a10c3b6331155e479b0ab8c4b4c305": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.warnAndReleaseIfNotReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.warnAndReleaseIfNotReleased()"
                ]
            },
            "5caf1e20cc22f4ea51bdf550caa9242b5149c27b": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.warnAndReleaseIfNotReleased()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.warnAndReleaseIfNotReleased()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "cf56c257bf419443dd4e922a75c9baf975f13c15",
        "previous_commit": "d81e4983adf17ebbfcd20c89244116d41511920f",
        "date": 1678982611,
        "releases": {
            "previous": "cf56c257bf419443dd4e922a75c9baf975f13c15",
            "next": "cf56c257bf419443dd4e922a75c9baf975f13c15"
        },
        "commit_message": "Added a fix for out of order ReadMarshallable\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "cf56c257bf419443dd4e922a75c9baf975f13c15": {
                "src/main/java/net/openhft/chronicle/core/onoes/ThreadLocalisedExceptionHandler.java": [
                    "public ThreadLocalisedExceptionHandler net.openhft.chronicle.core.onoes.ThreadLocalisedExceptionHandler.defaultHandler(ExceptionHandler defaultHandler)",
                    "public ExceptionHandler net.openhft.chronicle.core.onoes.ThreadLocalisedExceptionHandler.defaultHandler()",
                    "private ExceptionHandler net.openhft.chronicle.core.onoes.ThreadLocalisedExceptionHandler.exceptionHandler()"
                ]
            },
            "d81e4983adf17ebbfcd20c89244116d41511920f": {
                "src/main/java/net/openhft/chronicle/core/onoes/ThreadLocalisedExceptionHandler.java": [
                    "public ThreadLocalisedExceptionHandler net.openhft.chronicle.core.onoes.ThreadLocalisedExceptionHandler.defaultHandler(ExceptionHandler defaultHandler)",
                    "public ExceptionHandler net.openhft.chronicle.core.onoes.ThreadLocalisedExceptionHandler.defaultHandler()",
                    "private ExceptionHandler net.openhft.chronicle.core.onoes.ThreadLocalisedExceptionHandler.exceptionHandler()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "5598e821a1b60ee21d9875cbc74b9e693b18d896",
        "previous_commit": "276ae5d8b13700187de383f4fa34df15d26f3780",
        "date": 1527321952,
        "releases": {
            "previous": "5598e821a1b60ee21d9875cbc74b9e693b18d896",
            "next": "5598e821a1b60ee21d9875cbc74b9e693b18d896"
        },
        "commit_message": "Improve logging of safepoints #61\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5598e821a1b60ee21d9875cbc74b9e693b18d896": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void optionalSafepoint()",
                    "public static void safepoint()",
                    "static int trimFirst(@NotNull StackTraceElement[] stes)"
                ]
            },
            "276ae5d8b13700187de383f4fa34df15d26f3780": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void optionalSafepoint()",
                    "public static void safepoint()",
                    "static int trimFirst(@NotNull StackTraceElement[] stes)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "41030ebf205e7da2830462e6756ee40683c17928",
        "previous_commit": "5edec550e48baf5780ad8539acb7387cd5907106",
        "date": 1632126680,
        "releases": {
            "previous": "41030ebf205e7da2830462e6756ee40683c17928",
            "next": "41030ebf205e7da2830462e6756ee40683c17928"
        },
        "commit_message": "Improve behaviour for a resource closing the in background, https://github.com/OpenHFT/Chronicle-Core/issues/249\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "41030ebf205e7da2830462e6756ee40683c17928": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosedInSetter()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosed()",
                    "protected void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.setClosed()"
                ]
            },
            "5edec550e48baf5780ad8539acb7387cd5907106": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosedInSetter()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosed()",
                    "protected void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.setClosed()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "af53a3bec57e3e3aa6cc31c9478efa11f0ad6df2",
        "previous_commit": "bc800c76a97be65707987591d3ace2f58ccfc569",
        "date": 1552666614,
        "releases": {
            "previous": "af53a3bec57e3e3aa6cc31c9478efa11f0ad6df2",
            "next": "af53a3bec57e3e3aa6cc31c9478efa11f0ad6df2"
        },
        "commit_message": "Added support for testing cool CPUs, https://github.com/OpenHFT/Chronicle-Core/issues/83\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "af53a3bec57e3e3aa6cc31c9478efa11f0ad6df2": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "protected static long appendIntegerAndFraction(long address, double d, int sign, long mantissa, int shift)",
                    "public static long appendBase10d(long address, long num, int decimal)",
                    "protected static long appendLargeNumber(long address, long mantissa, int shift)"
                ]
            },
            "bc800c76a97be65707987591d3ace2f58ccfc569": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "protected static long appendIntegerAndFraction(long address, double d, int sign, long mantissa, int shift)",
                    "public static long appendBase10d(long address, long num, int decimal)",
                    "protected static long appendLargeNumber(long address, long mantissa, int shift)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "dc510340dde8f040c51a4e96b3795ef0fcd70885",
        "previous_commit": "05f18a605a449eede107940e296987735ef19fab",
        "date": 1612363998,
        "releases": {
            "previous": "dc510340dde8f040c51a4e96b3795ef0fcd70885",
            "next": "dc510340dde8f040c51a4e96b3795ef0fcd70885"
        },
        "commit_message": "Improve JavaDoc in the Jvm class, Fix #195\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "dc510340dde8f040c51a4e96b3795ef0fcd70885": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean stackTraceEndsWith(String endsWith, int maxDepth)",
                    "public static boolean getBoolean(String systemPropertyKey, boolean defaultValue)",
                    "public static void setAccessible(AccessibleObject accessibleObject)"
                ]
            },
            "05f18a605a449eede107940e296987735ef19fab": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean stackTraceEndsWith(String endsWith, int n)",
                    "public static boolean getBoolean(String property, boolean defaultValue)",
                    "public static void setAccessible(AccessibleObject h)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f66e8db0ade8d24c9705eb4559cf7165e3320f15",
        "previous_commit": "d0b4899e0508f3fa6064684cea1b094dd167a59e",
        "date": 1556787700,
        "releases": {
            "previous": "f66e8db0ade8d24c9705eb4559cf7165e3320f15",
            "next": "f66e8db0ade8d24c9705eb4559cf7165e3320f15"
        },
        "commit_message": "Add tracing temporarily\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f66e8db0ade8d24c9705eb4559cf7165e3320f15": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public int net.openhft.chronicle.core.UnsafeMemory.readInt(long address)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(long address)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(long address)"
                ]
            },
            "d0b4899e0508f3fa6064684cea1b094dd167a59e": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public int net.openhft.chronicle.core.UnsafeMemory.readInt(long address)",
                    "public byte net.openhft.chronicle.core.UnsafeMemory.readByte(long address)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(long address)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "740f02f776a73d516fe70fc24934fcf4e9452c32",
        "previous_commit": "d819a00ff2595306d6f141dd8a53771184fe7081",
        "date": 1677107642,
        "releases": {
            "previous": "740f02f776a73d516fe70fc24934fcf4e9452c32",
            "next": "740f02f776a73d516fe70fc24934fcf4e9452c32"
        },
        "commit_message": "De-duplicate asDouble method, expose it publicly in Maths.asDouble(...). Fixes #479\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "740f02f776a73d516fe70fc24934fcf4e9452c32": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "private static long net.openhft.chronicle.core.io.UnsafeText.appendIntegerAndFraction(long address, double d, int sign, long mantissa, int shift)",
                    "private static long net.openhft.chronicle.core.io.UnsafeText.appendFraction(long address, double d, int sign, long mantissa, int shift)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static double net.openhft.chronicle.core.util.StringUtils.parseDouble(@NotNull CharSequence in)"
                ]
            },
            "d819a00ff2595306d6f141dd8a53771184fe7081": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "private static long net.openhft.chronicle.core.io.UnsafeText.appendIntegerAndFraction(long address, double d, int sign, long mantissa, int shift)",
                    "private static long net.openhft.chronicle.core.io.UnsafeText.appendFraction(long address, double d, int sign, long mantissa, int shift)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static double net.openhft.chronicle.core.util.StringUtils.parseDouble(@NotNull CharSequence in)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "0a0e86a23bec6c1cb0ff46e85dc94ee7abef226b",
        "previous_commit": "aa3d2b0121b381f90802f76f0244843f5bf994df",
        "date": 1605273059,
        "releases": {
            "previous": "0a0e86a23bec6c1cb0ff46e85dc94ee7abef226b",
            "next": "0a0e86a23bec6c1cb0ff46e85dc94ee7abef226b"
        },
        "commit_message": "Fix potentially nasty error in unsafe operations, Fix #152\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0a0e86a23bec6c1cb0ff46e85dc94ee7abef226b": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, Object obj2, long offset2, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeBytes(long address, byte[] b, int offset, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            },
            "aa3d2b0121b381f90802f76f0244843f5bf994df": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, Object obj2, long offset2, int length)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeBytes(long address, byte[] b, int offset, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d0ca3dfd7f66e26c63fc562642545bae31dd88eb",
        "previous_commit": "f982b6173d2847e0f57d4edaa78546ce096727d4",
        "date": 1592240610,
        "releases": {
            "previous": "d0ca3dfd7f66e26c63fc562642545bae31dd88eb",
            "next": "d0ca3dfd7f66e26c63fc562642545bae31dd88eb"
        },
        "commit_message": "Added detection for multi-threaded access to Closeable resources which are not thread safe, https://github.com/OpenHFT/Chronicle-Core/issues/123\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d0ca3dfd7f66e26c63fc562642545bae31dd88eb": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.throwExceptionIfReleased()"
                ]
            },
            "f982b6173d2847e0f57d4edaa78546ce096727d4": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.throwExceptionIfClosed()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.throwExceptionIfReleased()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "9e9157c1618401392dc58105abefd1364e4f8968",
        "previous_commit": "99ca78bf7facc3f8bcac6f32d479bc6f646be60b",
        "date": 1600502266,
        "releases": {
            "previous": "9e9157c1618401392dc58105abefd1364e4f8968",
            "next": "9e9157c1618401392dc58105abefd1364e4f8968"
        },
        "commit_message": "Make the warning level for performClose ad performRelease tunable.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9e9157c1618401392dc58105abefd1364e4f8968": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "void net.openhft.chronicle.core.io.AbstractReferenceCounted.inThreadPerformRelease()"
                ]
            },
            "99ca78bf7facc3f8bcac6f32d479bc6f646be60b": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "void net.openhft.chronicle.core.io.AbstractReferenceCounted.inThreadPerformRelease()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d33e315acd4131ce0eedebee12eee4411b22d4b2",
        "previous_commit": "b485b123a844ceb3f5f79d39b12ee36231b0aec2",
        "date": 1625560107,
        "releases": {
            "previous": "d33e315acd4131ce0eedebee12eee4411b22d4b2",
            "next": "d33e315acd4131ce0eedebee12eee4411b22d4b2"
        },
        "commit_message": "#235 corrected -> writeVolatileInt on arm and m1mac\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d33e315acd4131ce0eedebee12eee4411b22d4b2": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(Object object, long offset, int i32)"
                ]
            },
            "b485b123a844ceb3f5f79d39b12ee36231b0aec2": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(Object object, long offset, int i32)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "9bcc28c7e51843d1fdaa0f9686592137da012dff",
        "previous_commit": "5c1f8620a94e9add89c89fd5fdde17e1d3f73a2f",
        "date": 1552650112,
        "releases": {
            "previous": "9bcc28c7e51843d1fdaa0f9686592137da012dff",
            "next": "9bcc28c7e51843d1fdaa0f9686592137da012dff"
        },
        "commit_message": "Added support for testing cool CPUs, https://github.com/OpenHFT/Chronicle-Core/issues/83\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9bcc28c7e51843d1fdaa0f9686592137da012dff": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long appendDouble(long address, double d)",
                    "public static long appendBase10(long address, long num)"
                ]
            },
            "5c1f8620a94e9add89c89fd5fdde17e1d3f73a2f": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long appendDouble(long address, double d)",
                    "public static long appendBase10(long address, long num)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "ed581fe2c8adff6577943c58118ee85a1d2f27ce",
        "previous_commit": "8bf4eaa7544ce639c30ad5f912fc4629bcd0015b",
        "date": 1658939392,
        "releases": {
            "previous": "ed581fe2c8adff6577943c58118ee85a1d2f27ce",
            "next": "ed581fe2c8adff6577943c58118ee85a1d2f27ce"
        },
        "commit_message": "Add debug message for Apple M1\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "ed581fe2c8adff6577943c58118ee85a1d2f27ce": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "static boolean net.openhft.chronicle.core.Bootstrap.isArm0()",
                    "static boolean net.openhft.chronicle.core.Bootstrap.isMacArm0()"
                ]
            },
            "8bf4eaa7544ce639c30ad5f912fc4629bcd0015b": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "static boolean net.openhft.chronicle.core.Bootstrap.isArm0()",
                    "static boolean net.openhft.chronicle.core.Bootstrap.isMacArm0()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "4d77af3ef14e25b4f94bae07046ac233a63138e2",
        "previous_commit": "da6776fba1af4db60ae9f01c8d544f3b5cb48281",
        "date": 1593176383,
        "releases": {
            "previous": "4d77af3ef14e25b4f94bae07046ac233a63138e2",
            "next": "4d77af3ef14e25b4f94bae07046ac233a63138e2"
        },
        "commit_message": "Improve trailing zeros in decimals, https://github.com/OpenHFT/Chronicle-Bytes/issues/128\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "4d77af3ef14e25b4f94bae07046ac233a63138e2": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "protected static long appendFraction(long address, double d, int sign, long mantissa, int shift)",
                    "private static double asDouble(long value, int exp, boolean negative, int deci)"
                ]
            },
            "da6776fba1af4db60ae9f01c8d544f3b5cb48281": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "protected static long appendFraction(long address, double d, int sign, long mantissa, int shift)",
                    "private static double asDouble(long value, int exp, boolean negative, int deci)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2ac37d29c26d75271cf7de0c26bb1f1d5762ac21",
        "previous_commit": "f5123ae1a89f1ee2e69bf0efaf62b5a55b256a59",
        "date": 1632413703,
        "releases": {
            "previous": "2ac37d29c26d75271cf7de0c26bb1f1d5762ac21",
            "next": "2ac37d29c26d75271cf7de0c26bb1f1d5762ac21"
        },
        "commit_message": "Add gcAndWaitForCloseablesToClose #250\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2ac37d29c26d75271cf7de0c26bb1f1d5762ac21": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)",
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread, CleaningThreadLocal ctl)"
                ]
            },
            "f5123ae1a89f1ee2e69bf0efaf62b5a55b256a59": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)",
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread, CleaningThreadLocal ctl)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c92a772b7e898b2722a738409c747432c867a10e",
        "previous_commit": "70ec888be172d22fd2ca26d7de8e272c92891ee4",
        "date": 1536583039,
        "releases": {
            "previous": "c92a772b7e898b2722a738409c747432c867a10e",
            "next": "c92a772b7e898b2722a738409c747432c867a10e"
        },
        "commit_message": "SAVEPOINT -> SAFEPOINT\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c92a772b7e898b2722a738409c747432c867a10e": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void optionalSafepoint()",
                    "public static boolean areOptionalSafepointsEnabled()"
                ]
            },
            "70ec888be172d22fd2ca26d7de8e272c92891ee4": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void optionalSafepoint()",
                    "public static boolean areOptionalSafepointsEnabled()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "12aef9a4f0372d2e2e4aebf1c493412f53e49523",
        "previous_commit": "833ae67193c08547a0792be3c385855826799609",
        "date": 1594799720,
        "releases": {
            "previous": "12aef9a4f0372d2e2e4aebf1c493412f53e49523",
            "next": "12aef9a4f0372d2e2e4aebf1c493412f53e49523"
        },
        "commit_message": "treat null and neither true nor false\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "12aef9a4f0372d2e2e4aebf1c493412f53e49523": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static boolean isFalse(CharSequence s)",
                    "public static boolean isTrue(CharSequence s)"
                ]
            },
            "833ae67193c08547a0792be3c385855826799609": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static boolean isFalse(CharSequence s)",
                    "public static boolean isTrue(CharSequence s)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "7c12735d6ab9e986af0a945b223ca219ccf25117",
        "previous_commit": "29947dc40c65814c023f694c63cb0a8b41599601",
        "date": 1601047353,
        "releases": {
            "previous": "7c12735d6ab9e986af0a945b223ca219ccf25117",
            "next": "7c12735d6ab9e986af0a945b223ca219ccf25117"
        },
        "commit_message": "Use OS.getTarget() instead of TARGET, make private once all libraries have been released.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7c12735d6ab9e986af0a945b223ca219ccf25117": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static String getTarget()",
                    "private static String findTarget()"
                ]
            },
            "29947dc40c65814c023f694c63cb0a8b41599601": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static String getTarget()",
                    "private static String findTarget()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "69c68dc7bc4b68a11783e449bc5da27d3adb29bd",
        "previous_commit": "913a4bc57b504cd56b71e6298be3579a08cb06ed",
        "date": 1639558290,
        "releases": {
            "previous": "69c68dc7bc4b68a11783e449bc5da27d3adb29bd",
            "next": "69c68dc7bc4b68a11783e449bc5da27d3adb29bd"
        },
        "commit_message": "Remove security hotspots, Fix #285 (#286)\n\n* Remove security hotspots, Fix #285\r\n\r\n* Remove unused imports\r\n\r\n* Add test",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "69c68dc7bc4b68a11783e449bc5da27d3adb29bd": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static int net.openhft.chronicle.core.OS.getProcessId0()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ThreadIndexAssigner.java": [
                    "protected int net.openhft.chronicle.core.util.ThreadIndexAssigner.nextIndex(int size)"
                ]
            },
            "913a4bc57b504cd56b71e6298be3579a08cb06ed": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static int net.openhft.chronicle.core.OS.getProcessId0()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ThreadIndexAssigner.java": [
                    "protected int net.openhft.chronicle.core.util.ThreadIndexAssigner.nextIndex(int size)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "dca53347202831b8dec9cf4c4539407fff9fe8ac",
        "previous_commit": "06fb4a64b8ec2221fdcbc30be4757844289e8e59",
        "date": 1528106270,
        "releases": {
            "previous": "dca53347202831b8dec9cf4c4539407fff9fe8ac",
            "next": "dca53347202831b8dec9cf4c4539407fff9fe8ac"
        },
        "commit_message": "Use a synchronized cache to reduce outliers, closes #65\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "dca53347202831b8dec9cf4c4539407fff9fe8ac": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "public static WeakReferenceCleaner net.openhft.chronicle.core.util.WeakReferenceCleaner.newCleaner(final Object referent, final Runnable thunk)",
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.run()"
                ]
            },
            "06fb4a64b8ec2221fdcbc30be4757844289e8e59": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "public static WeakReferenceCleaner net.openhft.chronicle.core.util.WeakReferenceCleaner.newCleaner(final Object referent, final Runnable thunk)",
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "19d5209b59ccbd531925b2a85893f3315127718e",
        "previous_commit": "b86aebb9c66a65eeed132f9b45d103eacf5d8b76",
        "date": 1592303899,
        "releases": {
            "previous": "19d5209b59ccbd531925b2a85893f3315127718e",
            "next": "19d5209b59ccbd531925b2a85893f3315127718e"
        },
        "commit_message": "Add `throwExceptionIfClosed();` to most public methods for classes implementing Closeable, https://github.com/OpenHFT/Chronicle-Core/issues/116\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "19d5209b59ccbd531925b2a85893f3315127718e": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Map<ExceptionKey, Integer> recordExceptions(boolean debug, boolean exceptionsOnly)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.warnAndCloseIfNotClosed()"
                ]
            },
            "b86aebb9c66a65eeed132f9b45d103eacf5d8b76": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Map<ExceptionKey, Integer> recordExceptions(boolean debug, boolean exceptionsOnly)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.warnAndCloseIfNotClosed()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "49fc8f569c402599dc01e2688e0ca905456c1b07",
        "previous_commit": "4582ae4dfb109348074921b55606d4ae4e58ebe2",
        "date": 1613989383,
        "releases": {
            "previous": "49fc8f569c402599dc01e2688e0ca905456c1b07",
            "next": "49fc8f569c402599dc01e2688e0ca905456c1b07"
        },
        "commit_message": "CacheLocal the Logger #203\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "49fc8f569c402599dc01e2688e0ca905456c1b07": {
                "src/main/java/net/openhft/chronicle/core/onoes/Slf4jExceptionHandler.java": [
                    "public void on(@NotNull Class clazz, String message, Throwable thrown)",
                    "public boolean isEnabled(Class clazz)"
                ]
            },
            "4582ae4dfb109348074921b55606d4ae4e58ebe2": {
                "src/main/java/net/openhft/chronicle/core/onoes/Slf4jExceptionHandler.java": [
                    "public void on(@NotNull Class clazz, String message, Throwable thrown)",
                    "public boolean isEnabled(Class clazz)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "96e7f8f307041a8c3a57172d253f2550b79ab6d3",
        "previous_commit": "80c67263c6bc43c87e33d5e6bd7e5a0c78a06d85",
        "date": 1616059108,
        "releases": {
            "previous": "96e7f8f307041a8c3a57172d253f2550b79ab6d3",
            "next": "96e7f8f307041a8c3a57172d253f2550b79ab6d3"
        },
        "commit_message": "Added a rounding method with a more defined behaviour for half up. #212\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "96e7f8f307041a8c3a57172d253f2550b79ab6d3": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double net.openhft.chronicle.core.Maths.roundN(double d, int digits)",
                    "public static double net.openhft.chronicle.core.Maths.round1(double d)"
                ]
            },
            "80c67263c6bc43c87e33d5e6bd7e5a0c78a06d85": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double net.openhft.chronicle.core.Maths.roundN(double d, int digits)",
                    "public static double net.openhft.chronicle.core.Maths.round1(double d)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c841d51cedf2c29d2f31d9c463a1bfca8c96f406",
        "previous_commit": "450cb28a8223de7f5cdd5242a48a4c5b49fb9abe",
        "date": 1640001970,
        "releases": {
            "previous": "c841d51cedf2c29d2f31d9c463a1bfca8c96f406",
            "next": "c841d51cedf2c29d2f31d9c463a1bfca8c96f406"
        },
        "commit_message": "Issue/303 (#304)\n\n* Move cleaners to an internal package\r\n\r\n* Declare methods private in final class\r\n\r\n* Convert enum util classes to non-inst. classes\r\n\r\n* Remove the use of raw classes\r\n\r\n* Remove the use of raw classes\r\n\r\n* Mark security issue solved",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c841d51cedf2c29d2f31d9c463a1bfca8c96f406": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "static Function<String, String> net.openhft.chronicle.core.Jvm.removingTag()"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.addAlias(@NotNull Class<?>... classes)"
                ]
            },
            "450cb28a8223de7f5cdd5242a48a4c5b49fb9abe": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "static Function<String, String> net.openhft.chronicle.core.Jvm.removingTag()"
                ],
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.addAlias(@NotNull Class... classes)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c64c4e8beb4745d785d8b0c80493e63b0d318422",
        "previous_commit": "d81f7113c8b388f48ac79350679cd5158da2992a",
        "date": 1592387938,
        "releases": {
            "previous": "c64c4e8beb4745d785d8b0c80493e63b0d318422",
            "next": "c64c4e8beb4745d785d8b0c80493e63b0d318422"
        },
        "commit_message": "Use Jvm.getBoolean for more consistent parsing of system property flags.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c64c4e8beb4745d785d8b0c80493e63b0d318422": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static boolean isFalse(CharSequence s)",
                    "public static boolean isTrue(CharSequence s)"
                ]
            },
            "d81f7113c8b388f48ac79350679cd5158da2992a": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static boolean isFalse(CharSequence s)",
                    "public static boolean isTrue(CharSequence s)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "11bfa1c2047677658c325c018a9e03c342ccfb0d",
        "previous_commit": "706d32bd122b9765f6286a48b91a9090616423bc",
        "date": 1599826830,
        "releases": {
            "previous": "11bfa1c2047677658c325c018a9e03c342ccfb0d",
            "next": "11bfa1c2047677658c325c018a9e03c342ccfb0d"
        },
        "commit_message": "Added support for mapping interfaces to a default implementation, https://github.com/OpenHFT/Chronicle-Wire/issues/200\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "11bfa1c2047677658c325c018a9e03c342ccfb0d": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static <T> T newInstance(@NotNull Class<T> clazz)",
                    "public static boolean matchingClass(@NotNull Class base, @NotNull Class toMatch)"
                ]
            },
            "706d32bd122b9765f6286a48b91a9090616423bc": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static <T> T newInstance(@NotNull Class<T> clazz)",
                    "public static boolean matchingClass(@NotNull Class base, @NotNull Class toMatch)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "62e2bc77cc4370aaf5f787427524672fc79c6afa",
        "previous_commit": "cb39f913147deead31f670d0b50aacd840188551",
        "date": 1566978649,
        "releases": {
            "previous": "62e2bc77cc4370aaf5f787427524672fc79c6afa",
            "next": "62e2bc77cc4370aaf5f787427524672fc79c6afa"
        },
        "commit_message": "Normalise windows paths.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "62e2bc77cc4370aaf5f787427524672fc79c6afa": {
                "src/main/java/net/openhft/chronicle/core/watcher/FileSystemWatcher.java": [
                    "private void net.openhft.chronicle.core.watcher.FileSystemWatcher.bootstrapPath(List<WatcherListener> list, String base, String relative)",
                    "void net.openhft.chronicle.core.watcher.FileSystemWatcher.run()"
                ]
            },
            "cb39f913147deead31f670d0b50aacd840188551": {
                "src/main/java/net/openhft/chronicle/core/watcher/FileSystemWatcher.java": [
                    "private void net.openhft.chronicle.core.watcher.FileSystemWatcher.bootstrapPath(List<WatcherListener> list, String base, String relative)",
                    "void net.openhft.chronicle.core.watcher.FileSystemWatcher.run()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "6ab52d724b364c84a3a5750fbb68f15ab2cd8d36",
        "previous_commit": "923d2ec1b20e39b08a231f58507de6ff55da5edd",
        "date": 1645550050,
        "releases": {
            "previous": "6ab52d724b364c84a3a5750fbb68f15ab2cd8d36",
            "next": "6ab52d724b364c84a3a5750fbb68f15ab2cd8d36"
        },
        "commit_message": "Added marker interface so the library knows an implementation will ignore everything #347 (#348)\n\n* Added marker interface so the library knows an implementation will ignore everything #347\r\n\r\n* Added marker interface so the library knows an implementation will ignore everything #347\r\n\r\nCo-authored-by: Peter Lawrey <peter.lawrey@chronicle.software>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "6ab52d724b364c84a3a5750fbb68f15ab2cd8d36": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.ignored(@NotNull Class<T> tClass, Class<?>... additional)",
                    "protected Object net.openhft.chronicle.core.Mocker.doInvoke(Object proxy, Method method, Object[] args)"
                ]
            },
            "923d2ec1b20e39b08a231f58507de6ff55da5edd": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.ignored(@NotNull Class<T> tClass, Class<?>... additional)",
                    "protected Object net.openhft.chronicle.core.Mocker.doInvoke(Object proxy, Method method, Object[] args)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "3d5d4072bf4516cc9a575ce66e8e161ffa19ba9e",
        "previous_commit": "118c363a22ea3e12b919fa773a857bb4a454aa52",
        "date": 1633942579,
        "releases": {
            "previous": "3d5d4072bf4516cc9a575ce66e8e161ffa19ba9e",
            "next": "3d5d4072bf4516cc9a575ce66e8e161ffa19ba9e"
        },
        "commit_message": "Added a ChronicleBitSet with a packed array of 64-bit words to be more efficient, and more tests, https://github.com/OpenHFT/Chronicle-Wire/issues/321\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3d5d4072bf4516cc9a575ce66e8e161ffa19ba9e": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck(boolean isUsed)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            },
            "118c363a22ea3e12b919fa773a857bb4a454aa52": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck(boolean isUsed)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f7a6b78c3743cf444b3af28c2f10e5a45dbf9ada",
        "previous_commit": "88a41e73e6018bfc00ed695d5176dc55cb9d6496",
        "date": 1681306845,
        "releases": {
            "previous": "f7a6b78c3743cf444b3af28c2f10e5a45dbf9ada",
            "next": "f7a6b78c3743cf444b3af28c2f10e5a45dbf9ada"
        },
        "commit_message": "Fix tests on Java9+ that uses 2 byte coder\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f7a6b78c3743cf444b3af28c2f10e5a45dbf9ada": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static long net.openhft.chronicle.core.Maths.hash64(@NotNull StringBuilder s)",
                    "public static long net.openhft.chronicle.core.Maths.hash64(@NotNull String s)"
                ]
            },
            "88a41e73e6018bfc00ed695d5176dc55cb9d6496": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static long net.openhft.chronicle.core.Maths.hash64(@NotNull StringBuilder s)",
                    "public static long net.openhft.chronicle.core.Maths.hash64(@NotNull String s)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "fd61ced85a993b9495779a7026be3f2152e98ecc",
        "previous_commit": "62958d58810a2eea518f054202fe93e4ef9f3b25",
        "date": 1649756825,
        "releases": {
            "previous": "fd61ced85a993b9495779a7026be3f2152e98ecc",
            "next": "fd61ced85a993b9495779a7026be3f2152e98ecc"
        },
        "commit_message": "Make exception assertion logic reusable, Fixes #374\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "fd61ced85a993b9495779a7026be3f2152e98ecc": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean net.openhft.chronicle.core.Jvm.hasException(@NotNull final Map<ExceptionKey, Integer> exceptions)",
                    "public static void net.openhft.chronicle.core.Jvm.dumpException(@NotNull final Map<ExceptionKey, Integer> exceptions)"
                ]
            },
            "62958d58810a2eea518f054202fe93e4ef9f3b25": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean net.openhft.chronicle.core.Jvm.hasException(@NotNull final Map<ExceptionKey, Integer> exceptions)",
                    "public static void net.openhft.chronicle.core.Jvm.dumpException(@NotNull final Map<ExceptionKey, Integer> exceptions)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "717fc47bc21b811633b98174560f39b462517b54",
        "previous_commit": "d4b25fa9b8aaa235203daa932f3de26111f5cbed",
        "date": 1605605431,
        "releases": {
            "previous": "717fc47bc21b811633b98174560f39b462517b54",
            "next": "717fc47bc21b811633b98174560f39b462517b54"
        },
        "commit_message": "Complete implementation and add tests\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "717fc47bc21b811633b98174560f39b462517b54": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/MuteAnalytics.java": [
                    "public void sendEvent(@NotNull String name, @NotNull Map<String, String> additionalEventParameters)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/ReflectiveBuilder.java": [
                    "public @NotNull AnalyticsFacade net.openhft.chronicle.core.internal.analytics.ReflectiveBuilder.build()"
                ]
            },
            "d4b25fa9b8aaa235203daa932f3de26111f5cbed": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/MuteAnalytics.java": [
                    "public void sendEvent(@NotNull String name, @NotNull Map<String, String> additionalEventParameters)"
                ],
                "src/main/java/net/openhft/chronicle/core/internal/analytics/ReflectiveBuilder.java": [
                    "public @NotNull AnalyticsFacade net.openhft.chronicle.core.internal.analytics.ReflectiveBuilder.build()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d0789113837598c9c1ac78b0eb4709c44f3475b6",
        "previous_commit": "d9ae05b276a575da191532caaf0d7abd3f5d28b0",
        "date": 1624523234,
        "releases": {
            "previous": "d0789113837598c9c1ac78b0eb4709c44f3475b6",
            "next": "d0789113837598c9c1ac78b0eb4709c44f3475b6"
        },
        "commit_message": "Don't complain if a support thread tries to cleanup redundantly.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d0789113837598c9c1ac78b0eb4709c44f3475b6": {
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.releaseLast(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.callOnRelease()"
                ]
            },
            "d9ae05b276a575da191532caaf0d7abd3f5d28b0": {
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.releaseLast(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.callOnRelease()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "9ad6eea5b4ee9673b8b294a21de2d0a3086b08a6",
        "previous_commit": "555852888374bd8faee1d99e41406eaa4ebea858",
        "date": 1593185858,
        "releases": {
            "previous": "9ad6eea5b4ee9673b8b294a21de2d0a3086b08a6",
            "next": "9ad6eea5b4ee9673b8b294a21de2d0a3086b08a6"
        },
        "commit_message": "Fix trailing zeros in decimals, closes https://github.com/OpenHFT/Chronicle-Bytes/issues/128\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9ad6eea5b4ee9673b8b294a21de2d0a3086b08a6": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "protected static long appendFraction(long address, double d, int sign, long mantissa, int shift)",
                    "private static double asDouble(long value, int exp, boolean negative, int deci)"
                ]
            },
            "555852888374bd8faee1d99e41406eaa4ebea858": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "protected static long appendFraction(long address, double d, int sign, long mantissa, int shift)",
                    "private static double asDouble(long value, int exp, boolean negative, int deci)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "544a37852a9fe5005cb337bee3264d4930add635",
        "previous_commit": "b7d609ea80ace25a7bfe5e49e6db42c0e09bb837",
        "date": 1591265534,
        "releases": {
            "previous": "544a37852a9fe5005cb337bee3264d4930add635",
            "next": "544a37852a9fe5005cb337bee3264d4930add635"
        },
        "commit_message": "Added a FlakyTestRunner, https://github.com/OpenHFT/Chronicle-Core/issues/120\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "544a37852a9fe5005cb337bee3264d4930add635": {
                "src/main/java/net/openhft/chronicle/core/FlakyTestRunner.java": [
                    "public static <T extends Throwable> void run(RunnableThrows<T> rt)",
                    "public static <T extends Throwable> void run(boolean flakyOnThisArch, RunnableThrows<T> rt)"
                ]
            },
            "b7d609ea80ace25a7bfe5e49e6db42c0e09bb837": {
                "src/main/java/net/openhft/chronicle/core/FlakyTestRunner.java": [
                    "public static <T extends Throwable> void run(RunnableThrows<T> rt)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "5d7be149d0e436f5aa003877396783fce5e71caa",
        "previous_commit": "afc468e4373fc4a93d33f40a32421bc5d7fe666c",
        "date": 1629803719,
        "releases": {
            "previous": "5d7be149d0e436f5aa003877396783fce5e71caa",
            "next": "5d7be149d0e436f5aa003877396783fce5e71caa"
        },
        "commit_message": "Fix clean up.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5d7be149d0e436f5aa003877396783fce5e71caa": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static boolean net.openhft.chronicle.core.io.AbstractCloseable.waitForCloseablesToClose(long millis)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.callOnRelease()"
                ]
            },
            "afc468e4373fc4a93d33f40a32421bc5d7fe666c": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static boolean net.openhft.chronicle.core.io.AbstractCloseable.waitForCloseablesToClose(long millis)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/VanillaReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.VanillaReferenceCounted.callOnRelease()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "0fec692619be66766214f65c0824dc895338ed41",
        "previous_commit": "f4ca80b30cf16ae3fdfa51ea65461e3120f39d3a",
        "date": 1646311207,
        "releases": {
            "previous": "0fec692619be66766214f65c0824dc895338ed41",
            "next": "0fec692619be66766214f65c0824dc895338ed41"
        },
        "commit_message": "Mocker to try tClass.getClassLoader() and ClassLoader.getSystemClassLoader() #352\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0fec692619be66766214f65c0824dc895338ed41": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.intercepting(@NotNull Class<T> tClass, @NotNull BiConsumer<String, Object[]> consumer, T t)",
                    "public static <T> T net.openhft.chronicle.core.Mocker.ignored(@NotNull Class<T> tClass, Class<?>... additional)"
                ]
            },
            "f4ca80b30cf16ae3fdfa51ea65461e3120f39d3a": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.intercepting(@NotNull Class<T> tClass, @NotNull BiConsumer<String, Object[]> consumer, T t)",
                    "public static <T> T net.openhft.chronicle.core.Mocker.ignored(@NotNull Class<T> tClass, Class<?>... additional)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "49bdb6a7853526be98f2aea31bb86e40082ba4c1",
        "previous_commit": "35f171d6d59ba956204b32811a78f42a6ea0d248",
        "date": 1611285296,
        "releases": {
            "previous": "49bdb6a7853526be98f2aea31bb86e40082ba4c1",
            "next": "49bdb6a7853526be98f2aea31bb86e40082ba4c1"
        },
        "commit_message": "Assert to warn user not to call UniqueMicroTimeProvider too frequently #190\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "49bdb6a7853526be98f2aea31bb86e40082ba4c1": {
                "src/main/java/net/openhft/chronicle/core/time/UniqueMicroTimeProvider.java": [
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeNanos()",
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeMicros()"
                ]
            },
            "35f171d6d59ba956204b32811a78f42a6ea0d248": {
                "src/main/java/net/openhft/chronicle/core/time/UniqueMicroTimeProvider.java": [
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeNanos()",
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeMicros()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2960f172b6fd3b95f10deb3b74888a6307345d4c",
        "previous_commit": "fe314c1404da034944181b4b48302ccd2c564b72",
        "date": 1579491406,
        "releases": {
            "previous": "2960f172b6fd3b95f10deb3b74888a6307345d4c",
            "next": "2960f172b6fd3b95f10deb3b74888a6307345d4c"
        },
        "commit_message": "allow some stack traces to be ignored in MonitorProfileAnalyserMain\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2960f172b6fd3b95f10deb3b74888a6307345d4c": {
                "src/main/java/net/openhft/chronicle/core/threads/MonitorProfileAnalyserMain.java": [
                    "public static void net.openhft.chronicle.core.threads.MonitorProfileAnalyserMain.main0(List<String> ignoreSubStrings, String[] args)",
                    "public static void net.openhft.chronicle.core.threads.MonitorProfileAnalyserMain.main(String[] args)"
                ]
            },
            "fe314c1404da034944181b4b48302ccd2c564b72": {
                "src/main/java/net/openhft/chronicle/core/threads/MonitorProfileAnalyserMain.java": [
                    "public static void net.openhft.chronicle.core.threads.MonitorProfileAnalyserMain.main0(String[] args)",
                    "public static void net.openhft.chronicle.core.threads.MonitorProfileAnalyserMain.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "0eeab8bb5824b942ca03210dbf2d380aadcfef12",
        "previous_commit": "e57376824b027e4b5733fe2e430a3e91e392c429",
        "date": 1590831624,
        "releases": {
            "previous": "0eeab8bb5824b942ca03210dbf2d380aadcfef12",
            "next": "0eeab8bb5824b942ca03210dbf2d380aadcfef12"
        },
        "commit_message": "A Bytes throws IllegalStateException if used after releasing, closed https://github.com/OpenHFT/Chronicle-Bytes/issues/123\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0eeab8bb5824b942ca03210dbf2d380aadcfef12": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static <E extends Enum<E>> E getSingletonForEnum(Class<E> eClass)"
                ]
            },
            "e57376824b027e4b5733fe2e430a3e91e392c429": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static <E extends Enum<E>> E getSingletonForEnum(Class<E> eClass)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8f56771b5821f697b6919d69c4872ebb8744ae7d",
        "previous_commit": "8d1a02b6fc6a30fa18053911898ff568f328853b",
        "date": 1615815510,
        "releases": {
            "previous": "8f56771b5821f697b6919d69c4872ebb8744ae7d",
            "next": "8f56771b5821f697b6919d69c4872ebb8744ae7d"
        },
        "commit_message": "Some tests fail on Apple M1\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8f56771b5821f697b6919d69c4872ebb8744ae7d": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "static boolean isAzulZulu0()",
                    "static boolean isAzulZing0()"
                ]
            },
            "8d1a02b6fc6a30fa18053911898ff568f328853b": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "static boolean isAzulZulu0()",
                    "static boolean isAzulZing0()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "9bc3af21405063e67b19eea0e92f2cf43603540d",
        "previous_commit": "7e0eac7f5ed5909e2e229783f2f7eb2a5e817730",
        "date": 1538991453,
        "releases": {
            "previous": "9bc3af21405063e67b19eea0e92f2cf43603540d",
            "next": "9bc3af21405063e67b19eea0e92f2cf43603540d"
        },
        "commit_message": "Fixes for ARM OpenHFT/OpenHFT#23\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9bc3af21405063e67b19eea0e92f2cf43603540d": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(@NotNull Object object, long offset, int i32)"
                ]
            },
            "7e0eac7f5ed5909e2e229783f2f7eb2a5e817730": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(long address, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(@NotNull Object object, long offset, int i32)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "feca40f37cd282075f0ff8244a556da57f9d39a0",
        "previous_commit": "ab59c8d8192833a4dd30ee98726fd6427fd258cc",
        "date": 1593762072,
        "releases": {
            "previous": "feca40f37cd282075f0ff8244a556da57f9d39a0",
            "next": "feca40f37cd282075f0ff8244a556da57f9d39a0"
        },
        "commit_message": "Prepare release of core libraries.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "feca40f37cd282075f0ff8244a556da57f9d39a0": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "private boolean net.openhft.chronicle.core.io.TracingReferenceCounted.tryReserve(ReferenceOwner id, boolean must)"
                ]
            },
            "ab59c8d8192833a4dd30ee98726fd6427fd258cc": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "private boolean net.openhft.chronicle.core.io.TracingReferenceCounted.tryReserve(ReferenceOwner id, boolean must)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "0926f1bbe958b78a92ada5cc20e31b0338233e46",
        "previous_commit": "0effd46c5c64f4e9e09cc10fc1f8ecc0eef11f9d",
        "date": 1647684925,
        "releases": {
            "previous": "0926f1bbe958b78a92ada5cc20e31b0338233e46",
            "next": "0926f1bbe958b78a92ada5cc20e31b0338233e46"
        },
        "commit_message": "Make OS.getHostname() and OS.getIPAddress() more portable #362\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0926f1bbe958b78a92ada5cc20e31b0338233e46": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static String net.openhft.chronicle.core.OS.getHostName0()",
                    "public static String net.openhft.chronicle.core.OS.getHostName()"
                ]
            },
            "0effd46c5c64f4e9e09cc10fc1f8ecc0eef11f9d": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static String net.openhft.chronicle.core.OS.getHostName0()",
                    "public static String net.openhft.chronicle.core.OS.getHostName()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "86850e2c057563c6eab266f0c5fe496691651f8d",
        "previous_commit": "2f6b2e04e76c5a03b50983a7fcb20c85a9167103",
        "date": 1588764273,
        "releases": {
            "previous": "86850e2c057563c6eab266f0c5fe496691651f8d",
            "next": "86850e2c057563c6eab266f0c5fe496691651f8d"
        },
        "commit_message": "Fix Java 11\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "86850e2c057563c6eab266f0c5fe496691651f8d": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void nanoPause()",
                    "public static void setAccessible(AccessibleObject h)"
                ]
            },
            "2f6b2e04e76c5a03b50983a7fcb20c85a9167103": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void nanoPause()",
                    "public static void setAccessible(AccessibleObject h)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "683c73f2798000e2524152f105dbb30cb71ef94c",
        "previous_commit": "1773d7f23143d91ec559fdb395ecfb0598ef0c5a",
        "date": 1504530693,
        "releases": {
            "previous": "683c73f2798000e2524152f105dbb30cb71ef94c",
            "next": "683c73f2798000e2524152f105dbb30cb71ef94c"
        },
        "commit_message": "remove log lines\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "683c73f2798000e2524152f105dbb30cb71ef94c": {
                "src/main/java/net/openhft/chronicle/core/cleaner/CleanerServiceLocator.java": [
                    "public static synchronized ByteBufferCleanerService net.openhft.chronicle.core.cleaner.CleanerServiceLocator.cleanerService()",
                    "private static boolean net.openhft.chronicle.core.cleaner.CleanerServiceLocator.isAllowedInThisMajorVersion(final ByteBufferCleanerService svc)"
                ]
            },
            "1773d7f23143d91ec559fdb395ecfb0598ef0c5a": {
                "src/main/java/net/openhft/chronicle/core/cleaner/CleanerServiceLocator.java": [
                    "public static synchronized ByteBufferCleanerService net.openhft.chronicle.core.cleaner.CleanerServiceLocator.cleanerService()",
                    "private static boolean net.openhft.chronicle.core.cleaner.CleanerServiceLocator.isAllowedInThisMajorVersion(final ByteBufferCleanerService svc)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d819a00ff2595306d6f141dd8a53771184fe7081",
        "previous_commit": "d269bd5301ad4eaf5f081afae661209f68b3ecf6",
        "date": 1676951438,
        "releases": {
            "previous": "d819a00ff2595306d6f141dd8a53771184fe7081",
            "next": "d819a00ff2595306d6f141dd8a53771184fe7081"
        },
        "commit_message": "Revert \"Make tracked exceptions tolerate being concurrently added to and iterated over\"\n\nThis reverts commit 1b709f8c8e645aee43b0acb15058cafb870e394e.\n\n# Conflicts:\n#\tsrc/main/java/net/openhft/chronicle/core/onoes/ExceptionKey.java\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d819a00ff2595306d6f141dd8a53771184fe7081": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Map<ExceptionKey, Integer> net.openhft.chronicle.core.Jvm.recordExceptions(final boolean debug, final boolean exceptionsOnly, final boolean logToSlf4j)"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/ExceptionKey.java": [
                    "public String net.openhft.chronicle.core.onoes.ExceptionKey.toString()"
                ]
            },
            "d269bd5301ad4eaf5f081afae661209f68b3ecf6": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Map<ExceptionKey, Integer> net.openhft.chronicle.core.Jvm.recordExceptions(final boolean debug, final boolean exceptionsOnly, final boolean logToSlf4j)"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/ExceptionKey.java": [
                    "public String net.openhft.chronicle.core.onoes.ExceptionKey.toString()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "3a7668e26ff52d59b21ae5cca08dc59be3dbed9d",
        "previous_commit": "a0914f8c8fa8f0574940493945a088003b4d84af",
        "date": 1601657056,
        "releases": {
            "previous": "3a7668e26ff52d59b21ae5cca08dc59be3dbed9d",
            "next": "3a7668e26ff52d59b21ae5cca08dc59be3dbed9d"
        },
        "commit_message": "Resolve a deadlock issue between DualReferenceCounted and TracingReferenceCounted\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3a7668e26ff52d59b21ae5cca08dc59be3dbed9d": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.releaseLast(ReferenceOwner id)"
                ]
            },
            "a0914f8c8fa8f0574940493945a088003b4d84af": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.releaseLast(ReferenceOwner id)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "88a41e73e6018bfc00ed695d5176dc55cb9d6496",
        "previous_commit": "5b414613d4fba2e64a2c80cea9f1d9ab5e35d95d",
        "date": 1681269577,
        "releases": {
            "previous": "88a41e73e6018bfc00ed695d5176dc55cb9d6496",
            "next": "88a41e73e6018bfc00ed695d5176dc55cb9d6496"
        },
        "commit_message": "Fix flaky JitterSamplerTest#takeSnapshot, deprecate JitterSampler#sleepSilently\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "88a41e73e6018bfc00ed695d5176dc55cb9d6496": {
                "src/main/java/net/openhft/chronicle/core/threads/JitterSampler.java": [
                    "public static void net.openhft.chronicle.core.threads.JitterSampler.sleepSilently(int millis)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/MonitorProfileAnalyserMain.java": [
                    "public static void net.openhft.chronicle.core.threads.MonitorProfileAnalyserMain.main(String[] args)"
                ]
            },
            "5b414613d4fba2e64a2c80cea9f1d9ab5e35d95d": {
                "src/main/java/net/openhft/chronicle/core/threads/JitterSampler.java": [
                    "public static void net.openhft.chronicle.core.threads.JitterSampler.sleepSilently(int millis)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/MonitorProfileAnalyserMain.java": [
                    "public static void net.openhft.chronicle.core.threads.MonitorProfileAnalyserMain.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "06fb4a64b8ec2221fdcbc30be4757844289e8e59",
        "previous_commit": "bc5c72e4d205bb6f49f649e19ea5a2fe6dbc66dd",
        "date": 1528103701,
        "releases": {
            "previous": "06fb4a64b8ec2221fdcbc30be4757844289e8e59",
            "next": "06fb4a64b8ec2221fdcbc30be4757844289e8e59"
        },
        "commit_message": "Drop the use of a map to cache weak references to maps, closes #65\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "06fb4a64b8ec2221fdcbc30be4757844289e8e59": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "public static WeakReferenceCleaner net.openhft.chronicle.core.util.WeakReferenceCleaner.newCleaner(final Object referent, final Runnable thunk)",
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.run()"
                ]
            },
            "bc5c72e4d205bb6f49f649e19ea5a2fe6dbc66dd": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "public static WeakReferenceCleaner net.openhft.chronicle.core.util.WeakReferenceCleaner.newCleaner(final Object referent, final Runnable thunk)",
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "ce9319a124a4f21ab37aa968ffacd53240f5d536",
        "previous_commit": "356db6d2b85c65e2f8e3aff6b599bf0824a16650",
        "date": 1528489371,
        "releases": {
            "previous": "ce9319a124a4f21ab37aa968ffacd53240f5d536",
            "next": "ce9319a124a4f21ab37aa968ffacd53240f5d536"
        },
        "commit_message": "Add a shutdown hook to shutdown referenceCleanerExecutor\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "ce9319a124a4f21ab37aa968ffacd53240f5d536": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "static Executor net.openhft.chronicle.core.util.WeakReferenceCleaner.referenceCleanerExecutor()",
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.run()"
                ]
            },
            "356db6d2b85c65e2f8e3aff6b599bf0824a16650": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "static Executor net.openhft.chronicle.core.util.WeakReferenceCleaner.referenceCleanerExecutor()",
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "2119922debabb3b2240c75b4bad7facf1e1fc550",
        "previous_commit": "27b712df06649e4ddca050bf3b9efa6f56a2c89f",
        "date": 1602153765,
        "releases": {
            "previous": "2119922debabb3b2240c75b4bad7facf1e1fc550",
            "next": "2119922debabb3b2240c75b4bad7facf1e1fc550"
        },
        "commit_message": "Only use ThreadLocalProperties is enabled for multi-threadeds services tests.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2119922debabb3b2240c75b4bad7facf1e1fc550": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void addToClassPath(Class clazz)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/ThreadLocalProperties.java": [
                    "public static void net.openhft.chronicle.core.threads.ThreadLocalProperties.forSystemProperties()"
                ]
            },
            "27b712df06649e4ddca050bf3b9efa6f56a2c89f": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void addToClassPath(Class clazz)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/ThreadLocalProperties.java": [
                    "public static void net.openhft.chronicle.core.threads.ThreadLocalProperties.forSystemProperties()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "ad72fce9394d5eeb243a2348ec3c0c11ed565492",
        "previous_commit": "9e4887c3f9e84ebf2c2f91c4f9b79fe42b56644a",
        "date": 1593175900,
        "releases": {
            "previous": "ad72fce9394d5eeb243a2348ec3c0c11ed565492",
            "next": "ad72fce9394d5eeb243a2348ec3c0c11ed565492"
        },
        "commit_message": "Improve trailing zeros in decimals, https://github.com/OpenHFT/Chronicle-Bytes/issues/128\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "ad72fce9394d5eeb243a2348ec3c0c11ed565492": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "protected static long appendFraction(long address, double d, int sign, long mantissa, int shift)",
                    "private static double asDouble(long value, int exp, boolean negative, int deci)"
                ]
            },
            "9e4887c3f9e84ebf2c2f91c4f9b79fe42b56644a": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "protected static long appendFraction(long address, double d, int sign, long mantissa, int shift)",
                    "private static double asDouble(long value, int exp, boolean negative, int deci)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "daaf01e41c08dca12b7b6be80ec35b13254c33a9",
        "previous_commit": "725bfd3907788f524ab60560065586e48f5ca9df",
        "date": 1504954439,
        "releases": {
            "previous": "daaf01e41c08dca12b7b6be80ec35b13254c33a9",
            "next": "daaf01e41c08dca12b7b6be80ec35b13254c33a9"
        },
        "commit_message": "Create a socket channel with lower overhead to try to reduce jitter.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "daaf01e41c08dca12b7b6be80ec35b13254c33a9": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.run()"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/ISocketChannel.java": [
                    "static ISocketChannel wrap(SocketChannel sc)"
                ]
            },
            "725bfd3907788f524ab60560065586e48f5ca9df": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.run()"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/ISocketChannel.java": [
                    "static ISocketChannel wrap(SocketChannel sc)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "92f8affeb8e8d1f83daa4746b71ea439da7245b4",
        "previous_commit": "c56814ef204dd5b3d1a55d1cd5f507c4566d0fc9",
        "date": 1593588919,
        "releases": {
            "previous": "92f8affeb8e8d1f83daa4746b71ea439da7245b4",
            "next": "92f8affeb8e8d1f83daa4746b71ea439da7245b4"
        },
        "commit_message": "Make checking thread safety an option which off by default\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "92f8affeb8e8d1f83daa4746b71ea439da7245b4": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "protected boolean net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck()"
                ]
            },
            "c56814ef204dd5b3d1a55d1cd5f507c4566d0fc9": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "protected boolean net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "a511f1162a90181699c6b69101a48a58b44e9c6a",
        "previous_commit": "96aca57d95a10c3b6331155e479b0ab8c4b4c305",
        "date": 1663067788,
        "releases": {
            "previous": "a511f1162a90181699c6b69101a48a58b44e9c6a",
            "next": "a511f1162a90181699c6b69101a48a58b44e9c6a"
        },
        "commit_message": "Add specific listener tests for reserve/release/releaseTransfer\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a511f1162a90181699c6b69101a48a58b44e9c6a": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "private boolean net.openhft.chronicle.core.io.TracingReferenceCounted.tryReserve(ReferenceOwner id, boolean must)"
                ]
            },
            "96aca57d95a10c3b6331155e479b0ab8c4b4c305": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)",
                    "private boolean net.openhft.chronicle.core.io.TracingReferenceCounted.tryReserve(ReferenceOwner id, boolean must)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "099b404fd82f5f586300c44ab99ec20475a8199e",
        "previous_commit": "d5e119306a075189f06ccfd879a49727b6cc0943",
        "date": 1625494289,
        "releases": {
            "previous": "099b404fd82f5f586300c44ab99ec20475a8199e",
            "next": "099b404fd82f5f586300c44ab99ec20475a8199e"
        },
        "commit_message": "fixed #235 - Fixed on heap memory alignment issue for M1 mac ( and ARM )\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "099b404fd82f5f586300c44ab99ec20475a8199e": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(Object object, long offset, int i32)"
                ]
            },
            "d5e119306a075189f06ccfd879a49727b6cc0943": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeOrderedInt(Object object, long offset, int i32)",
                    "public void net.openhft.chronicle.core.UnsafeMemory.writeVolatileInt(Object object, long offset, int i32)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c4e29053a7d2b887550e66829b359550bc1b23a5",
        "previous_commit": "4d77af3ef14e25b4f94bae07046ac233a63138e2",
        "date": 1593179484,
        "releases": {
            "previous": "c4e29053a7d2b887550e66829b359550bc1b23a5",
            "next": "c4e29053a7d2b887550e66829b359550bc1b23a5"
        },
        "commit_message": "Use a lock to ensure the releasePendingResources() doesn't return while the background thread is busy.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c4e29053a7d2b887550e66829b359550bc1b23a5": {
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "private static void runReleaseResources()",
                    "public static void releasePendingResources()"
                ]
            },
            "4d77af3ef14e25b4f94bae07046ac233a63138e2": {
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "private static void runReleaseResources()",
                    "public static void releasePendingResources()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "71a25256886ea848c71ea5e65835b73264cd1531",
        "previous_commit": "cef5b3845a122e0b1ee1876e7e4c6e100ec7074b",
        "date": 1532353868,
        "releases": {
            "previous": "71a25256886ea848c71ea5e65835b73264cd1531",
            "next": "71a25256886ea848c71ea5e65835b73264cd1531"
        },
        "commit_message": "Fixes #62\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "71a25256886ea848c71ea5e65835b73264cd1531": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static long usedDirectMemory()",
                    "private static long maxDirectMemory0()"
                ]
            },
            "cef5b3845a122e0b1ee1876e7e4c6e100ec7074b": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static long usedDirectMemory()",
                    "public long usedDirectMemory()",
                    "private static long maxDirectMemory0()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "e9bc0cbbd54166b65449d5616994b31e77a6b84a",
        "previous_commit": "98c65d682fc207c1e0eb055c870dfe9b20568384",
        "date": 1591194307,
        "releases": {
            "previous": "e9bc0cbbd54166b65449d5616994b31e77a6b84a",
            "next": "e9bc0cbbd54166b65449d5616994b31e77a6b84a"
        },
        "commit_message": "Added support for closeable/reference-counted resources to be cleaned in the background, https://github.com/OpenHFT/Chronicle-Core/issues/119\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e9bc0cbbd54166b65449d5616994b31e77a6b84a": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ]
            },
            "98c65d682fc207c1e0eb055c870dfe9b20568384": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()",
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "9d6afbfed093b7b25d0d8ed4a8865d4b5fa02730",
        "previous_commit": "281a24668fedd620635f5f065fc66ba56553dce3",
        "date": 1659001585,
        "releases": {
            "previous": "9d6afbfed093b7b25d0d8ed4a8865d4b5fa02730",
            "next": "9d6afbfed093b7b25d0d8ed4a8865d4b5fa02730"
        },
        "commit_message": "Added ClosedIORuntimeException #436\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9d6afbfed093b7b25d0d8ed4a8865d4b5fa02730": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static boolean net.openhft.chronicle.core.io.IOTools.isClosedException(Exception e)",
                    "static void net.openhft.chronicle.core.io.IOTools.addRegionalMessages()"
                ]
            },
            "281a24668fedd620635f5f065fc66ba56553dce3": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static boolean net.openhft.chronicle.core.io.IOTools.isClosedException(Exception e)",
                    "static void net.openhft.chronicle.core.io.IOTools.addRegionalMessages()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b598ec3a50d40ae04af55ef9dc98c98611707d55",
        "previous_commit": "590a58e430a21613da86052300404b796dbbbc56",
        "date": 1619527272,
        "releases": {
            "previous": "b598ec3a50d40ae04af55ef9dc98c98611707d55",
            "next": "b598ec3a50d40ae04af55ef9dc98c98611707d55"
        },
        "commit_message": "Fix bug\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b598ec3a50d40ae04af55ef9dc98c98611707d55": {
                "src/main/java/net/openhft/chronicle/core/util/Ints.java": [
                    "public static int net.openhft.chronicle.core.util.Ints.requireNonNegative(final int value)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Longs.java": [
                    "public static long net.openhft.chronicle.core.util.Longs.requireNonNegative(final long value)"
                ]
            },
            "590a58e430a21613da86052300404b796dbbbc56": {
                "src/main/java/net/openhft/chronicle/core/util/Ints.java": [
                    "public static int net.openhft.chronicle.core.util.Ints.requireNonNegative(final int value)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Longs.java": [
                    "public static long net.openhft.chronicle.core.util.Longs.requireNonNegative(final long value)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "fce015520fa6f2eb8170cc2577a9894240383f96",
        "previous_commit": "31776b4481786f519588420cbfca829e54ed36a8",
        "date": 1610114731,
        "releases": {
            "previous": "fce015520fa6f2eb8170cc2577a9894240383f96",
            "next": "fce015520fa6f2eb8170cc2577a9894240383f96"
        },
        "commit_message": "Simplify the Announcer message\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "fce015520fa6f2eb8170cc2577a9894240383f96": {
                "src/main/java/net/openhft/chronicle/core/internal/announcer/InternalAnnouncer.java": [
                    "private static void announceArtifact(@NotNull final String groupId, @NotNull final String artifactId, @NotNull final Map<String, String> properties)",
                    "private static void announceJvm()"
                ]
            },
            "31776b4481786f519588420cbfca829e54ed36a8": {
                "src/main/java/net/openhft/chronicle/core/internal/announcer/InternalAnnouncer.java": [
                    "private static void announceArtifact(@NotNull final String groupId, @NotNull final String artifactId, @NotNull final Map<String, String> properties)",
                    "private static void announceJvm()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d19b9d3b9533cef1b3018c762b45b9d59693626b",
        "previous_commit": "96e7f8f307041a8c3a57172d253f2550b79ab6d3",
        "date": 1616063039,
        "releases": {
            "previous": "d19b9d3b9533cef1b3018c762b45b9d59693626b",
            "next": "d19b9d3b9533cef1b3018c762b45b9d59693626b"
        },
        "commit_message": "Added a rounding method with a more defined behaviour for half up. #212\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d19b9d3b9533cef1b3018c762b45b9d59693626b": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double net.openhft.chronicle.core.Maths.roundN(double d, int digits)",
                    "public static double net.openhft.chronicle.core.Maths.roundNup(double d, int digits)"
                ]
            },
            "96e7f8f307041a8c3a57172d253f2550b79ab6d3": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double net.openhft.chronicle.core.Maths.roundN(double d, int digits)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "637f00401c6331b2212982b76759c45f2a5c5fc5",
        "previous_commit": "8a2b54468df8cbaac999c45d0ed11abb1e7d6f50",
        "date": 1536839636,
        "releases": {
            "previous": "637f00401c6331b2212982b76759c45f2a5c5fc5",
            "next": "637f00401c6331b2212982b76759c45f2a5c5fc5"
        },
        "commit_message": "Added ARM support for UnsafeMemory, https://github.com/OpenHFT/OpenHFT/issues/23\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "637f00401c6331b2212982b76759c45f2a5c5fc5": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Method getMethod(@NotNull Class clazz, @NotNull String name, Class... args)"
                ],
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static int write0(FileDescriptor fd, long address, int len)"
                ]
            },
            "8a2b54468df8cbaac999c45d0ed11abb1e7d6f50": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Method getMethod(@NotNull Class clazz, @NotNull String name, Class... args)"
                ],
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static int write0(FileDescriptor fd, long address, int len)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "0780b4da78c83ac48c22c62177007a38279108d7",
        "previous_commit": "79bee82df5f5b8a8296d34ec56b88c2bb947e128",
        "date": 1697632661,
        "releases": {
            "previous": "0780b4da78c83ac48c22c62177007a38279108d7",
            "next": "0780b4da78c83ac48c22c62177007a38279108d7"
        },
        "commit_message": "Change Jvm.nanoPause() to compile on Java 21 (#584)\n\n* Add support for windows when resolve map0 handle. Remove pre-java 9 compatability that is no longer valid with java 21 (#582)\r\n\r\n* Change Jvm.nanoPause() to compile in Java 21\r\n\r\n* Add javadoc note that Jvm.safepoint() does nothing on Java 8\r\n\r\n---------\r\n\r\nCo-authored-by: GylesBates <gylesbates@hotmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0780b4da78c83ac48c22c62177007a38279108d7": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void net.openhft.chronicle.core.Jvm.safepoint()",
                    "public static void net.openhft.chronicle.core.Jvm.nanoPause()"
                ]
            },
            "79bee82df5f5b8a8296d34ec56b88c2bb947e128": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void net.openhft.chronicle.core.Jvm.safepoint()",
                    "public static void net.openhft.chronicle.core.Jvm.nanoPause()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "64f7a83ad1ec4a7487ab76a85a065e3d3fbf3d6a",
        "previous_commit": "76d069952f9b61453dc320137fd5cc97a6001550",
        "date": 1603128709,
        "releases": {
            "previous": "64f7a83ad1ec4a7487ab76a85a065e3d3fbf3d6a",
            "next": "64f7a83ad1ec4a7487ab76a85a065e3d3fbf3d6a"
        },
        "commit_message": "Changed AbstractCloseable to only be isClosed()=true after performClose() has been performed #145\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "64f7a83ad1ec4a7487ab76a85a065e3d3fbf3d6a": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosedInSetter()"
                ]
            },
            "76d069952f9b61453dc320137fd5cc97a6001550": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosedInSetter()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2d037b03120d8b2c8bd5f6ee53b2497bbfec7afd",
        "previous_commit": "dca53347202831b8dec9cf4c4539407fff9fe8ac",
        "date": 1528163118,
        "releases": {
            "previous": "2d037b03120d8b2c8bd5f6ee53b2497bbfec7afd",
            "next": "2d037b03120d8b2c8bd5f6ee53b2497bbfec7afd"
        },
        "commit_message": "Make JLBH more tolerant if we sample additional probes at a lower rate than JLBH. Closes #66\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2d037b03120d8b2c8bd5f6ee53b2497bbfec7afd": {
                "src/main/java/net/openhft/chronicle/core/jlbh/ImmutableRunResult.java": [
                    "private static Map<Percentile, Duration> net.openhft.chronicle.core.jlbh.ImmutableRunResult.asMap(double[] percentiles)"
                ],
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "private void net.openhft.chronicle.core.jlbh.JLBH.printPercentilesSummary(String label, @NotNull List<double[]> percentileRuns)"
                ]
            },
            "dca53347202831b8dec9cf4c4539407fff9fe8ac": {
                "src/main/java/net/openhft/chronicle/core/jlbh/ImmutableRunResult.java": [
                    "private static Map<Percentile, Duration> net.openhft.chronicle.core.jlbh.ImmutableRunResult.asMap(double[] percentiles)"
                ],
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "private void net.openhft.chronicle.core.jlbh.JLBH.printPercentilesSummary(String label, @NotNull List<double[]> percentileRuns)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "48a62b623b73c6c6819c38f095c5dafb2c5067c0",
        "previous_commit": "98003cf9301033a28099f7b2358174d53ec732ff",
        "date": 1713186571,
        "releases": {
            "previous": "48a62b623b73c6c6819c38f095c5dafb2c5067c0",
            "next": "48a62b623b73c6c6819c38f095c5dafb2c5067c0"
        },
        "commit_message": "If a thread stalls for a second under load it can throw an AssertionError. (#649)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "48a62b623b73c6c6819c38f095c5dafb2c5067c0": {
                "src/main/java/net/openhft/chronicle/core/time/UniqueMicroTimeProvider.java": [
                    "private void net.openhft.chronicle.core.time.UniqueMicroTimeProvider.validateMillisecondTimestamp(long realTimeMS, long lastTimeMS)",
                    "private void net.openhft.chronicle.core.time.UniqueMicroTimeProvider.validateMicrosecondTimestamp(long realTimeUS, long lastTimeUS)"
                ]
            },
            "98003cf9301033a28099f7b2358174d53ec732ff": {
                "src/main/java/net/openhft/chronicle/core/time/UniqueMicroTimeProvider.java": [
                    "private void net.openhft.chronicle.core.time.UniqueMicroTimeProvider.validateMillisecondTimestamp(long realTimeMS, long lastTimeMS)",
                    "private void net.openhft.chronicle.core.time.UniqueMicroTimeProvider.validateMicrosecondTimestamp(long realTimeUS, long lastTimeUS)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "dc7ce41b6e349908d586484da3e41ebfd33bb833",
        "previous_commit": "d31cdf43324bc093228231af0991dcdfc862f592",
        "date": 1641912878,
        "releases": {
            "previous": "dc7ce41b6e349908d586484da3e41ebfd33bb833",
            "next": "dc7ce41b6e349908d586484da3e41ebfd33bb833"
        },
        "commit_message": "Remove unused Maps and the Supplier for them\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "dc7ce41b6e349908d586484da3e41ebfd33bb833": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.intercepting(@NotNull Class<T> tClass, @NotNull BiConsumer<String, Object[]> consumer, T t)",
                    "public static <T> T net.openhft.chronicle.core.Mocker.ignored(@NotNull Class<T> tClass, Class... additional)"
                ]
            },
            "d31cdf43324bc093228231af0991dcdfc862f592": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.intercepting(@NotNull Class<T> tClass, @NotNull BiConsumer<String, Object[]> consumer, T t)",
                    "public static <T> T net.openhft.chronicle.core.Mocker.ignored(@NotNull Class<T> tClass, Class... additional)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b23ac5911e2cc86c860e50843c3c96e36f1acb12",
        "previous_commit": "e4b93066220f82a3ccd83bdcd109bd9906594dc4",
        "date": 1700233734,
        "releases": {
            "previous": "b23ac5911e2cc86c860e50843c3c96e36f1acb12",
            "next": "b23ac5911e2cc86c860e50843c3c96e36f1acb12"
        },
        "commit_message": "Support giving the first byte of an object or an array (#599)\n\n* Support giving the first byte of an object or an array\r\n\r\n* Adding safepoints not supported on Zing\r\n\r\n* Adding safepoints not supported on Zing\r\n\r\n* Adding safepoints not supported on Zing\r\n\r\n* Adding safepoints not supported on Zing\r\n\r\n* Adding safepoints supported on Zing\r\n\r\n* Adding safepoints supported on Zing\r\n\r\n* Adding safepoints supported on Zing\r\n\r\n* Adding safepoints supported on Zing\r\n\r\n* Array header size might be different for element alignment",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b23ac5911e2cc86c860e50843c3c96e36f1acb12": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void net.openhft.chronicle.core.Jvm.safepoint()",
                    "private static ClassMetrics net.openhft.chronicle.core.Jvm.getClassMetrics(final Class<?> c)"
                ]
            },
            "e4b93066220f82a3ccd83bdcd109bd9906594dc4": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void net.openhft.chronicle.core.Jvm.safepoint()",
                    "private static ClassMetrics net.openhft.chronicle.core.Jvm.getClassMetrics(final Class<?> c)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e3c6cc7ce5290b99c513a46a379c7f76ceafcb83",
        "previous_commit": "eb5ceab609948da2d245c7453bdfcb4f1c345184",
        "date": 1637837611,
        "releases": {
            "previous": "e3c6cc7ce5290b99c513a46a379c7f76ceafcb83",
            "next": "e3c6cc7ce5290b99c513a46a379c7f76ceafcb83"
        },
        "commit_message": "Allow unregistring of shutdown hook on clear()\n\nfixes #278\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e3c6cc7ce5290b99c513a46a379c7f76ceafcb83": {
                "src/main/java/net/openhft/chronicle/core/shutdown/PriorityHook.java": [
                    "public static synchronized <H extends Hooklet> H net.openhft.chronicle.core.shutdown.PriorityHook.addAndGet(H hooklet)",
                    "public static synchronized void net.openhft.chronicle.core.shutdown.PriorityHook.clear()"
                ]
            },
            "eb5ceab609948da2d245c7453bdfcb4f1c345184": {
                "src/main/java/net/openhft/chronicle/core/shutdown/PriorityHook.java": [
                    "public static synchronized <H extends Hooklet> H net.openhft.chronicle.core.shutdown.PriorityHook.addAndGet(H hooklet)",
                    "public static synchronized void net.openhft.chronicle.core.shutdown.PriorityHook.clear()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "5dabf9016e033da9715dbfcd74c6e9801bdf0ae6",
        "previous_commit": "5f931338e26e5c53443611e4780d5c29b47b7af4",
        "date": 1612431360,
        "releases": {
            "previous": "5dabf9016e033da9715dbfcd74c6e9801bdf0ae6",
            "next": "5dabf9016e033da9715dbfcd74c6e9801bdf0ae6"
        },
        "commit_message": "Allow demo repos to be tracked\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5dabf9016e033da9715dbfcd74c6e9801bdf0ae6": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/StandardMaps.java": [
                    "static Map<String, String> standardAdditionalEventParameters(@NotNull final StackTraceElement[] stackTraceElements)",
                    "static String packageNameUpToMaxLevel3(final String className)"
                ]
            },
            "5f931338e26e5c53443611e4780d5c29b47b7af4": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/StandardMaps.java": [
                    "static Map<String, String> standardAdditionalEventParameters(@NotNull final StackTraceElement[] stackTraceElements)",
                    "static String packageNameUpToMaxLevel3(final String className)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "52587ea37c4d17ad689c9532f6b59e2e70ebe3a7",
        "previous_commit": "72ed2a14ad663dacd04698eb63fa7634fff6870f",
        "date": 1588022491,
        "releases": {
            "previous": "52587ea37c4d17ad689c9532f6b59e2e70ebe3a7",
            "next": "52587ea37c4d17ad689c9532f6b59e2e70ebe3a7"
        },
        "commit_message": "Reimplement ReflectionBasedByteBufferCleanerService using method handles\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "52587ea37c4d17ad689c9532f6b59e2e70ebe3a7": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/jdk9/Jdk9ByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.jdk9.Jdk9ByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ],
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ]
            },
            "72ed2a14ad663dacd04698eb63fa7634fff6870f": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/jdk9/Jdk9ByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.jdk9.Jdk9ByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ],
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "cc458e5c9d8fd7b9601221085d19e4f2d7348977",
        "previous_commit": "514e182378c4118bba609469314a27c104eecb34",
        "date": 1605271245,
        "releases": {
            "previous": "cc458e5c9d8fd7b9601221085d19e4f2d7348977",
            "next": "cc458e5c9d8fd7b9601221085d19e4f2d7348977"
        },
        "commit_message": "Fix bugs in OS\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "cc458e5c9d8fd7b9601221085d19e4f2d7348977": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long getPidMax()",
                    "public static long pageAlign(long size)"
                ]
            },
            "514e182378c4118bba609469314a27c104eecb34": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long getPidMax()",
                    "public static long pageAlign(long size)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8e9c5712653014bfc39140573fc3e50224fe6362",
        "previous_commit": "95961dd751939482b3b1db4e178a96ed50716054",
        "date": 1606401410,
        "releases": {
            "previous": "8e9c5712653014bfc39140573fc3e50224fe6362",
            "next": "8e9c5712653014bfc39140573fc3e50224fe6362"
        },
        "commit_message": "Use `Jvm.perf()` as an info level message for performance messages, closes https://github.com/OpenHFT/Chronicle-Core/issues/157\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8e9c5712653014bfc39140573fc3e50224fe6362": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long fromAddress, Object obj2, long offset2, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ]
            },
            "95961dd751939482b3b1db4e178a96ed50716054": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long fromAddress, Object obj2, long offset2, int length)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "5cc9ce45bb942df7c51898b28c69ac0de4c7f9e4",
        "previous_commit": "8d609871108b5afcf69aea4a443bbc8e4287d696",
        "date": 1688040604,
        "releases": {
            "previous": "5cc9ce45bb942df7c51898b28c69ac0de4c7f9e4",
            "next": "5cc9ce45bb942df7c51898b28c69ac0de4c7f9e4"
        },
        "commit_message": "Flag an AbstractCloseableReferenceCounted as closing as it starts to \u2026 (#541)\n\n* Flag an AbstractCloseableReferenceCounted as closing as it starts to close\r\n\r\n* Flag an AbstractCloseableReferenceCounted as closing as it starts to close",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5cc9ce45bb942df7c51898b28c69ac0de4c7f9e4": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.close()",
                    "private void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.setClosedHere(String s)"
                ]
            },
            "8d609871108b5afcf69aea4a443bbc8e4287d696": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseableReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.close()",
                    "private void net.openhft.chronicle.core.io.AbstractCloseableReferenceCounted.setClosedHere(String s)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "1cb9f5e61da3dd4064ae6c479f3f418e8d3f6ba0",
        "previous_commit": "a76bd29f8f4b38f07e8986169e1064cb6378a420",
        "date": 1553256048,
        "releases": {
            "previous": "1cb9f5e61da3dd4064ae6c479f3f418e8d3f6ba0",
            "next": "1cb9f5e61da3dd4064ae6c479f3f418e8d3f6ba0"
        },
        "commit_message": "Added support for testing cool CPUs, https://github.com/OpenHFT/Chronicle-Core/issues/83\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "1cb9f5e61da3dd4064ae6c479f3f418e8d3f6ba0": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(Object object, long offset)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(long address)"
                ]
            },
            "a76bd29f8f4b38f07e8986169e1064cb6378a420": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public int net.openhft.chronicle.core.UnsafeMemory.readVolatileInt(@NotNull Object object, long offset)",
                    "public long net.openhft.chronicle.core.UnsafeMemory.readLong(long address)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "bc5c72e4d205bb6f49f649e19ea5a2fe6dbc66dd",
        "previous_commit": "7e8f7d356859a3bb2acb8e87e61b76f714f050e0",
        "date": 1528103586,
        "releases": {
            "previous": "bc5c72e4d205bb6f49f649e19ea5a2fe6dbc66dd",
            "next": "bc5c72e4d205bb6f49f649e19ea5a2fe6dbc66dd"
        },
        "commit_message": "Use a cache for reflective lookup of map0, closes #64\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "bc5c72e4d205bb6f49f649e19ea5a2fe6dbc66dd": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "static long map0(@NotNull FileChannel fileChannel, int imode, long start, long size)",
                    "public static int pageSize()"
                ]
            },
            "7e8f7d356859a3bb2acb8e87e61b76f714f050e0": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "static long map0(@NotNull FileChannel fileChannel, int imode, long start, long size)",
                    "public static int pageSize()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "648d9754e58c6f46ead1dc3a3c20acc411721be9",
        "previous_commit": "8f56771b5821f697b6919d69c4872ebb8744ae7d",
        "date": 1615815991,
        "releases": {
            "previous": "648d9754e58c6f46ead1dc3a3c20acc411721be9",
            "next": "648d9754e58c6f46ead1dc3a3c20acc411721be9"
        },
        "commit_message": "Some tests fail on Apple M1\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "648d9754e58c6f46ead1dc3a3c20acc411721be9": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "static boolean isAzulZulu0()",
                    "static boolean isAzulZing0()"
                ]
            },
            "8f56771b5821f697b6919d69c4872ebb8744ae7d": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "static boolean isAzulZulu0()",
                    "static boolean isAzulZing0()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b21c0f81b1514c1a639acdb98cc000b61881c255",
        "previous_commit": "e5ad08be55a76e5fa90476711c599ed2b7dbcbf0",
        "date": 1656518387,
        "releases": {
            "previous": "b21c0f81b1514c1a639acdb98cc000b61881c255",
            "next": "b21c0f81b1514c1a639acdb98cc000b61881c255"
        },
        "commit_message": "Add RecordingHistogram that includes the top outliers #423 (#425)\n\n* Add RecordingHistogram that includes the top outliers #423\r\n\r\n* Updating to bom version 2.23ea75\r\n\r\n* [maven-release-plugin] prepare release chronicle-core-2.23ea21\r\n\r\n* [maven-release-plugin] prepare for next development iteration\r\n\r\n* Reverting back to bom version 2.23ea-SNAPSHOT\r\n\r\n* Fix #402 (#420)\r\n\r\n* Fix #402\r\n\r\nedit documentation of systemProperties\r\n\r\n* Fix #402\r\n\r\nadd link to systemProperties.adoc\r\n\r\n* Fix #402\r\n\r\nupdate Jvm description\r\n\r\n* consistent thread safety property names\r\n\r\n* Added GenericReflection.getParameterTypes() #428\r\n\r\n* Fix Method Reader Writers for genetic parameter types #531\r\n\r\n* Added Javadoc #423\r\n\r\n* Only assumeTrue(OS.isLinux()) for the tests that need them\r\n\r\n* Handle erase(TypeVariable)\r\n\r\n* Only assumeTrue(OS.isLinux()) for the tests that need them\r\n\r\n* Add RecordingHistogram that includes the top outliers #423\r\n\r\n* Added Javadoc #423\r\n\r\n* Skip timing test on ARM\r\n\r\nCo-authored-by: Peter Lawrey <peter.lawrey@chronicle.software>\r\nCo-authored-by: hft-team-city <teamcity@chronicle.software>\r\nCo-authored-by: Jasmine Taylor <83115753+j4sm1ne96@users.noreply.github.com>\r\nCo-authored-by: Jerry Shea <jerry.shea@chronicle.software>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b21c0f81b1514c1a639acdb98cc000b61881c255": {
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public String net.openhft.chronicle.core.util.Histogram.toMicrosFormat(@NotNull DoubleFunction<Double> toMicros)",
                    "public String net.openhft.chronicle.core.util.Histogram.toLongMicrosFormat(@NotNull DoubleFunction<Double> toMicros)"
                ]
            },
            "e5ad08be55a76e5fa90476711c599ed2b7dbcbf0": {
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public String net.openhft.chronicle.core.util.Histogram.toMicrosFormat(@NotNull DoubleFunction<Double> toMicros)",
                    "public String net.openhft.chronicle.core.util.Histogram.toLongMicrosFormat(@NotNull DoubleFunction<Double> toMicros)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "63735cac430a9e6b4e3780a14d7460d56e67725b",
        "previous_commit": "44fc987366ba7a647b3404c85215850cdf8f472b",
        "date": 1690180634,
        "releases": {
            "previous": "63735cac430a9e6b4e3780a14d7460d56e67725b",
            "next": "63735cac430a9e6b4e3780a14d7460d56e67725b"
        },
        "commit_message": "StringUtils bounds checking fixes #551 (#552)\n\n- Increase test coverage for StringUtils class\r\n- endsWith and startsWith exhibit bug where if search string is longer than search string an exception is thrown. Fix by returning false if source string is shorter than the search string",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "63735cac430a9e6b4e3780a14d7460d56e67725b": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static boolean net.openhft.chronicle.core.util.StringUtils.startsWith(@NotNull final CharSequence source, @NotNull final String startsWith)",
                    "public static boolean net.openhft.chronicle.core.util.StringUtils.endsWith(@NotNull final CharSequence source, @NotNull final String endsWith)"
                ]
            },
            "44fc987366ba7a647b3404c85215850cdf8f472b": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static boolean net.openhft.chronicle.core.util.StringUtils.startsWith(@NotNull final CharSequence source, @NotNull final String startsWith)",
                    "public static boolean net.openhft.chronicle.core.util.StringUtils.endsWith(@NotNull final CharSequence source, @NotNull final String endsWith)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "20b9f69dcfc846f80b55b4b4fa97060d247aabf0",
        "previous_commit": "aeb68e36061328e05381419a81daf8aee22bd6fe",
        "date": 1599123777,
        "releases": {
            "previous": "20b9f69dcfc846f80b55b4b4fa97060d247aabf0",
            "next": "20b9f69dcfc846f80b55b4b4fa97060d247aabf0"
        },
        "commit_message": "Make MethodWriters thread safe, closes https://github.com/OpenHFT/Chronicle-Queue/issues/708\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "20b9f69dcfc846f80b55b4b4fa97060d247aabf0": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosedInSetter()"
                ]
            },
            "aeb68e36061328e05381419a81daf8aee22bd6fe": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosedInSetter()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "08d2132dda6224ba68a927ef061670b7909fe627",
        "previous_commit": "20a749d116c5c51c6f7706f25255b7220f7c1d12",
        "date": 1680131914,
        "releases": {
            "previous": "08d2132dda6224ba68a927ef061670b7909fe627",
            "next": "08d2132dda6224ba68a927ef061670b7909fe627"
        },
        "commit_message": "Don't swallow exceptions in close() methods. Fixes #499\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "08d2132dda6224ba68a927ef061670b7909fe627": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "void net.openhft.chronicle.core.io.AbstractCloseable.callPerformClose()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            },
            "20a749d116c5c51c6f7706f25255b7220f7c1d12": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "void net.openhft.chronicle.core.io.AbstractCloseable.callPerformClose()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f46fc30a702063217f529762e5d35c26651038ea",
        "previous_commit": "e1065225948cd8eeab1e6057d5092955d3c6f9ac",
        "date": 1640123334,
        "releases": {
            "previous": "f46fc30a702063217f529762e5d35c26651038ea",
            "next": "f46fc30a702063217f529762e5d35c26651038ea"
        },
        "commit_message": "Use Files.walkFileTree to deal with exceptions such as FileNotFound\n\nfixes #305\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f46fc30a702063217f529762e5d35c26651038ea": {
                "src/main/java/net/openhft/chronicle/core/watcher/FileSystemWatcher.java": [
                    "private void net.openhft.chronicle.core.watcher.FileSystemWatcher.bootstrapPath(List<WatcherListener> list, String base, String relative)",
                    "public void net.openhft.chronicle.core.watcher.FileSystemWatcher.addPath(String base, String relative)"
                ]
            },
            "e1065225948cd8eeab1e6057d5092955d3c6f9ac": {
                "src/main/java/net/openhft/chronicle/core/watcher/FileSystemWatcher.java": [
                    "private void net.openhft.chronicle.core.watcher.FileSystemWatcher.bootstrapPath(List<WatcherListener> list, String base, String relative)",
                    "public void net.openhft.chronicle.core.watcher.FileSystemWatcher.addPath(String base, String relative)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "1b709f8c8e645aee43b0acb15058cafb870e394e",
        "previous_commit": "ae9b965bee0cb8b024b91fdf9efe2c1703a187a8",
        "date": 1675293307,
        "releases": {
            "previous": "1b709f8c8e645aee43b0acb15058cafb870e394e",
            "next": "1b709f8c8e645aee43b0acb15058cafb870e394e"
        },
        "commit_message": "Make tracked exceptions tolerate being concurrently added to and iterated over\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "1b709f8c8e645aee43b0acb15058cafb870e394e": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Map<ExceptionKey, Integer> net.openhft.chronicle.core.Jvm.recordExceptions(final boolean debug, final boolean exceptionsOnly, final boolean logToSlf4j)"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/ExceptionKey.java": [
                    "public String net.openhft.chronicle.core.onoes.ExceptionKey.toString()"
                ]
            },
            "ae9b965bee0cb8b024b91fdf9efe2c1703a187a8": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Map<ExceptionKey, Integer> net.openhft.chronicle.core.Jvm.recordExceptions(final boolean debug, final boolean exceptionsOnly, final boolean logToSlf4j)"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/ExceptionKey.java": [
                    "public String net.openhft.chronicle.core.onoes.ExceptionKey.toString()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "82f90f57852216f5dbc6c68734c0730500b1a639",
        "previous_commit": "4af33f0f83806405dc8d801af25e2aaa1c1b3e90",
        "date": 1528192294,
        "releases": {
            "previous": "82f90f57852216f5dbc6c68734c0730500b1a639",
            "next": "82f90f57852216f5dbc6c68734c0730500b1a639"
        },
        "commit_message": "Improve cleanup of the reference map in the WRC\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "82f90f57852216f5dbc6c68734c0730500b1a639": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.scheduleForClean()",
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.run()"
                ]
            },
            "4af33f0f83806405dc8d801af25e2aaa1c1b3e90": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.scheduleForClean()",
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "b072fbdf42977c21161c2f6d3e4483b54d07be1b",
        "previous_commit": "1f260f347a10838870905dfd3d16f20f292911c0",
        "date": 1609258321,
        "releases": {
            "previous": "b072fbdf42977c21161c2f6d3e4483b54d07be1b",
            "next": "b072fbdf42977c21161c2f6d3e4483b54d07be1b"
        },
        "commit_message": "Fix a test for ARM.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b072fbdf42977c21161c2f6d3e4483b54d07be1b": {
                "src/main/java/net/openhft/chronicle/core/threads/JitterSampler.java": [
                    "public static void finished()",
                    "public static void atStage(String desc)"
                ]
            },
            "1f260f347a10838870905dfd3d16f20f292911c0": {
                "src/main/java/net/openhft/chronicle/core/threads/JitterSampler.java": [
                    "public static void finished()",
                    "public static void atStage(String desc)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "0ac177e6289cee72f0da785182362f2e14d89c06",
        "previous_commit": "dcf11cf7dc2f44311357b5fc6f608420c9812862",
        "date": 1602504536,
        "releases": {
            "previous": "0ac177e6289cee72f0da785182362f2e14d89c06",
            "next": "0ac177e6289cee72f0da785182362f2e14d89c06"
        },
        "commit_message": "Honours the maximum capacity set for Bytes, closes https://github.com/OpenHFT/Chronicle-Bytes/issues/141\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0ac177e6289cee72f0da785182362f2e14d89c06": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.reserve(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.release(ReferenceOwner id)"
                ]
            },
            "dcf11cf7dc2f44311357b5fc6f608420c9812862": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.reserve(ReferenceOwner id)"
                ],
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.release(ReferenceOwner id)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "06041cfcdabca7adcfa7648a2ecce28178412bf8",
        "previous_commit": "420acbc02d1ea9da869b91d4a43ec7858473b965",
        "date": 1636366012,
        "releases": {
            "previous": "06041cfcdabca7adcfa7648a2ecce28178412bf8",
            "next": "06041cfcdabca7adcfa7648a2ecce28178412bf8"
        },
        "commit_message": "Added percentiles for larger sample sizes #271\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "06041cfcdabca7adcfa7648a2ecce28178412bf8": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void nanoPause()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public static double[] net.openhft.chronicle.core.util.Histogram.percentilesFor(long count)"
                ]
            },
            "420acbc02d1ea9da869b91d4a43ec7858473b965": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void nanoPause()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public static double[] net.openhft.chronicle.core.util.Histogram.percentilesFor(long count)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "913e8dfc7ada599f6585ff14ec42230f1d839e4e",
        "previous_commit": "68e0483f59693766b098b71d148d0738396aa770",
        "date": 1553185214,
        "releases": {
            "previous": "913e8dfc7ada599f6585ff14ec42230f1d839e4e",
            "next": "913e8dfc7ada599f6585ff14ec42230f1d839e4e"
        },
        "commit_message": "Added support for Java 12, https://github.com/OpenHFT/OpenHFT/issues/31\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "913e8dfc7ada599f6585ff14ec42230f1d839e4e": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static Method getMethod0(@NotNull Class clazz, @NotNull String name, Class[] args, boolean first)",
                    "public static void setAccessible(AccessibleObject h)"
                ]
            },
            "68e0483f59693766b098b71d148d0738396aa770": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static Method getMethod0(@NotNull Class clazz, @NotNull String name, Class[] args, boolean first)",
                    "public static void setAccessible(AccessibleObject h)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c23dca029405cc19baa18a8c255cf350f046fafd",
        "previous_commit": "38a8995970a66a668ffd07b2f8554e065c6478f5",
        "date": 1689148875,
        "releases": {
            "previous": "c23dca029405cc19baa18a8c255cf350f046fafd",
            "next": "c23dca029405cc19baa18a8c255cf350f046fafd"
        },
        "commit_message": "Reduce Cognitive Complexity (#546)\n\n* Reduce Cognitive Complexity\r\n\r\n* Use method references\r\n\r\n* remove duplicate??",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c23dca029405cc19baa18a8c255cf350f046fafd": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "static Number net.openhft.chronicle.core.util.ObjectUtils.convertToNumber(Class<?> eClass, Object o)",
                    "static <E> E net.openhft.chronicle.core.util.ObjectUtils.convertTo0(Class<E> eClass, @Nullable Object o)"
                ]
            },
            "38a8995970a66a668ffd07b2f8554e065c6478f5": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "static Number net.openhft.chronicle.core.util.ObjectUtils.convertToNumber(Class<?> eClass, Object o)",
                    "static <E> E net.openhft.chronicle.core.util.ObjectUtils.convertTo0(Class<E> eClass, @Nullable Object o)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f16980bfaac497ffbc2ecdc4099ec68ce6114d89",
        "previous_commit": "e3c6cc7ce5290b99c513a46a379c7f76ceafcb83",
        "date": 1637909817,
        "releases": {
            "previous": "f16980bfaac497ffbc2ecdc4099ec68ce6114d89",
            "next": "f16980bfaac497ffbc2ecdc4099ec68ce6114d89"
        },
        "commit_message": "Ensure correct order of iteration of hooklets\n\nfixes #282\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f16980bfaac497ffbc2ecdc4099ec68ce6114d89": {
                "src/main/java/net/openhft/chronicle/core/shutdown/PriorityHook.java": [
                    "public static synchronized <H extends Hooklet> H net.openhft.chronicle.core.shutdown.PriorityHook.addAndGet(H hooklet)",
                    "public void net.openhft.chronicle.core.shutdown.PriorityHook.onShutdown()"
                ]
            },
            "e3c6cc7ce5290b99c513a46a379c7f76ceafcb83": {
                "src/main/java/net/openhft/chronicle/core/shutdown/PriorityHook.java": [
                    "public static synchronized <H extends Hooklet> H net.openhft.chronicle.core.shutdown.PriorityHook.addAndGet(H hooklet)",
                    "public void net.openhft.chronicle.core.shutdown.PriorityHook.onShutdown()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "391183ebd51622fe05e634569e155f7ec967c700",
        "previous_commit": "3e5695e5cedb394924915866b58029a87948a155",
        "date": 1504702898,
        "releases": {
            "previous": "391183ebd51622fe05e634569e155f7ec967c700",
            "next": "391183ebd51622fe05e634569e155f7ec967c700"
        },
        "commit_message": "revert change to correctly extract char[] from stringbuilder\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "391183ebd51622fe05e634569e155f7ec967c700": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static byte[] extractBytes(StringBuilder sb)",
                    "public static char[] extractChars(StringBuilder sb)"
                ]
            },
            "3e5695e5cedb394924915866b58029a87948a155": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static byte[] extractBytes(StringBuilder sb)",
                    "public static char[] extractChars(StringBuilder sb)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "f17fc90cf24a46177e9c6975aad2a01cf37d11bf",
        "previous_commit": "250455fa41b9e6822015b3ab581e541bfc3f80cc",
        "date": 1613138573,
        "releases": {
            "previous": "f17fc90cf24a46177e9c6975aad2a01cf37d11bf",
            "next": "f17fc90cf24a46177e9c6975aad2a01cf37d11bf"
        },
        "commit_message": "Add Histogram support for dumping the percentage for a value.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f17fc90cf24a46177e9c6975aad2a01cf37d11bf": {
                "src/main/java/net/openhft/chronicle/core/cooler/CoolerTester.java": [
                    "public void net.openhft.chronicle.core.cooler.CoolerTester.run()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public double net.openhft.chronicle.core.util.Histogram.percentageLessThan(double time)"
                ]
            },
            "250455fa41b9e6822015b3ab581e541bfc3f80cc": {
                "src/main/java/net/openhft/chronicle/core/cooler/CoolerTester.java": [
                    "public void net.openhft.chronicle.core.cooler.CoolerTester.run()"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public double net.openhft.chronicle.core.util.Histogram.percentageLessThan(double time)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b96fc46c7168d4c586521cf8b6bc0d7791df440c",
        "previous_commit": "a41d4aca4ea49f3d077b41325987b34bcbc0c337",
        "date": 1641894725,
        "releases": {
            "previous": "b96fc46c7168d4c586521cf8b6bc0d7791df440c",
            "next": "b96fc46c7168d4c586521cf8b6bc0d7791df440c"
        },
        "commit_message": "Guard set with synchronization, Fix #327 (#328)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b96fc46c7168d4c586521cf8b6bc0d7791df440c": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.unmonitor(ReferenceCounted counted)",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.assertReferencesReleased()"
                ]
            },
            "a41d4aca4ea49f3d077b41325987b34bcbc0c337": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.unmonitor(ReferenceCounted counted)",
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.assertReferencesReleased()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "9cf5fe3356c4570a8222408db49fa5a513bbc142",
        "previous_commit": "c81d708b59a15537e426ff3cfa547f0a16999829",
        "date": 1616436997,
        "releases": {
            "previous": "9cf5fe3356c4570a8222408db49fa5a513bbc142",
            "next": "9cf5fe3356c4570a8222408db49fa5a513bbc142"
        },
        "commit_message": "https://github.com/OpenHFT/Chronicle-Core/issues/215\nFix for UnsafeMemory.copyMemory\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9cf5fe3356c4570a8222408db49fa5a513bbc142": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, long address, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long from, long to, int length)"
                ]
            },
            "c81d708b59a15537e426ff3cfa547f0a16999829": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, long address, int length)",
                    "public static void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long from, long to, int length)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e1e1102c48369a8f1c0e4da7a3a684c091e1e2b4",
        "previous_commit": "fbe3d22a225554866c452ef32806dc07d7b84539",
        "date": 1687538468,
        "releases": {
            "previous": "e1e1102c48369a8f1c0e4da7a3a684c091e1e2b4",
            "next": "e1e1102c48369a8f1c0e4da7a3a684c091e1e2b4"
        },
        "commit_message": "Add javadoc to clarify that mapAlign tries to round up the page alignment. (#539)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e1e1102c48369a8f1c0e4da7a3a684c091e1e2b4": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long net.openhft.chronicle.core.OS.mapAlign(long offset, int pageAlignment)",
                    "public static long net.openhft.chronicle.core.OS.mapAlign(long offset)"
                ]
            },
            "fbe3d22a225554866c452ef32806dc07d7b84539": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long net.openhft.chronicle.core.OS.mapAlign(long offset, int pageAlignment)",
                    "public static long net.openhft.chronicle.core.OS.mapAlign(long offset)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "3fcb72cd45b5e19a0ba260599c62eee497373a7f",
        "previous_commit": "af845f6dd53f472eedefa3cb6053bc385813f3b0",
        "date": 1530182931,
        "releases": {
            "previous": "3fcb72cd45b5e19a0ba260599c62eee497373a7f",
            "next": "3fcb72cd45b5e19a0ba260599c62eee497373a7f"
        },
        "commit_message": "Fixes ChronicleEnterprise/Chronicle-FIX#237\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3fcb72cd45b5e19a0ba260599c62eee497373a7f": {
                "src/main/java/net/openhft/chronicle/core/tcp/FastJ8SocketChannel.java": [
                    "int net.openhft.chronicle.core.tcp.FastJ8SocketChannel.read0(ByteBuffer buf)",
                    "public int net.openhft.chronicle.core.tcp.FastJ8SocketChannel.read(ByteBuffer buf)"
                ]
            },
            "af845f6dd53f472eedefa3cb6053bc385813f3b0": {
                "src/main/java/net/openhft/chronicle/core/tcp/FastJ8SocketChannel.java": [
                    "public int net.openhft.chronicle.core.tcp.FastJ8SocketChannel.read(ByteBuffer buf)",
                    "private int net.openhft.chronicle.core.tcp.FastJ8SocketChannel.read0(ByteBuffer buf)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "d4e2a0d824a5ae076e5cb2798dc0dd19a97ce3c8",
        "previous_commit": "5aa0ba4357b4b7fa22bbef251cb998d25e653636",
        "date": 1615983141,
        "releases": {
            "previous": "d4e2a0d824a5ae076e5cb2798dc0dd19a97ce3c8",
            "next": "d4e2a0d824a5ae076e5cb2798dc0dd19a97ce3c8"
        },
        "commit_message": "Added EmbeddedBytes for Trivially Copyable data transfer objects, https://github.com/OpenHFT/Chronicle-Bytes/issues/173\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d4e2a0d824a5ae076e5cb2798dc0dd19a97ce3c8": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)",
                    "static void closeQuietly(@Nullable Object... closeables)"
                ]
            },
            "5aa0ba4357b4b7fa22bbef251cb998d25e653636": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)",
                    "static void closeQuietly(@Nullable Object... closeables)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "a6c8e026512cdf238be0a4118fb59d085ef1ad6b",
        "previous_commit": "115fec755997773e0c2f08fa64b863c2073a729f",
        "date": 1516979922,
        "releases": {
            "previous": "a6c8e026512cdf238be0a4118fb59d085ef1ad6b",
            "next": "a6c8e026512cdf238be0a4118fb59d085ef1ad6b"
        },
        "commit_message": "Performance enhancement for string parsing.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a6c8e026512cdf238be0a4118fb59d085ef1ad6b": {
                "src/main/java/net/openhft/chronicle/core/pool/StringInterner.java": [
                    "public String net.openhft.chronicle.core.pool.StringInterner.intern(@Nullable CharSequence cs)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static boolean isEqual(@Nullable CharSequence s, @Nullable CharSequence cs)"
                ]
            },
            "115fec755997773e0c2f08fa64b863c2073a729f": {
                "src/main/java/net/openhft/chronicle/core/pool/StringInterner.java": [
                    "public String net.openhft.chronicle.core.pool.StringInterner.intern(@Nullable CharSequence cs)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static boolean isEqual(@Nullable CharSequence s, @Nullable CharSequence cs)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "f1e82deea91cf4e5e7164dc47c2625fd244eb8b0",
        "previous_commit": "f8e911fd247d9d6ab948a1d8e479acfdac678109",
        "date": 1645098562,
        "releases": {
            "previous": "f1e82deea91cf4e5e7164dc47c2625fd244eb8b0",
            "next": "f1e82deea91cf4e5e7164dc47c2625fd244eb8b0"
        },
        "commit_message": "Fix merge issues and windows compatibility. Added support for compact BinaryLengthLength.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f1e82deea91cf4e5e7164dc47c2625fd244eb8b0": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "static Class<?> net.openhft.chronicle.core.util.ObjectUtils.lookForImplEnum(Class<?> c2)",
                    "public static <T> T net.openhft.chronicle.core.util.ObjectUtils.newInstance(@NotNull String className)"
                ]
            },
            "f8e911fd247d9d6ab948a1d8e479acfdac678109": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "static Class<?> net.openhft.chronicle.core.util.ObjectUtils.lookForImplEnum(Class<?> c2)",
                    "public static <T> T net.openhft.chronicle.core.util.ObjectUtils.newInstance(@NotNull String className)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e5e176c4fca08d4c723acdb083159d45e5a54133",
        "previous_commit": "9d950da07dd56566091600df29fa013b655c75f3",
        "date": 1592559026,
        "releases": {
            "previous": "e5e176c4fca08d4c723acdb083159d45e5a54133",
            "next": "e5e176c4fca08d4c723acdb083159d45e5a54133"
        },
        "commit_message": "Add Jvm.nanoPause to tight loops\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e5e176c4fca08d4c723acdb083159d45e5a54133": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "static long map0(@NotNull FileChannel fileChannel, int imode, long start, long size)"
                ],
                "src/main/java/net/openhft/chronicle/core/time/UniqueMicroTimeProvider.java": [
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeMicros()"
                ]
            },
            "9d950da07dd56566091600df29fa013b655c75f3": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "static long map0(@NotNull FileChannel fileChannel, int imode, long start, long size)"
                ],
                "src/main/java/net/openhft/chronicle/core/time/UniqueMicroTimeProvider.java": [
                    "public long net.openhft.chronicle.core.time.UniqueMicroTimeProvider.currentTimeMicros()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "564c858de6dbcc76cf887b7eb6281e341267d54a",
        "previous_commit": "995dbc133141add75f3d90d80db44922cc2cd655",
        "date": 1600440767,
        "releases": {
            "previous": "564c858de6dbcc76cf887b7eb6281e341267d54a",
            "next": "564c858de6dbcc76cf887b7eb6281e341267d54a"
        },
        "commit_message": "Fix a bug which is meant to prevent overflows but instead prevent some rounding beyond 7 digits of precision. closes https://github.com/OpenHFT/Chronicle-Core/issues/80\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "564c858de6dbcc76cf887b7eb6281e341267d54a": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double ceilN(double d, int digits)",
                    "public static double floorN(double d, int digits)"
                ]
            },
            "995dbc133141add75f3d90d80db44922cc2cd655": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double ceilN(double d, int digits)",
                    "public static double floorN(double d, int digits)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "a66b13ddad7c64a2d2d5077eff74aad53ee9f27e",
        "previous_commit": "b650abc31101179cf17f79660c2bc823e72003ae",
        "date": 1603457261,
        "releases": {
            "previous": "a66b13ddad7c64a2d2d5077eff74aad53ee9f27e",
            "next": "a66b13ddad7c64a2d2d5077eff74aad53ee9f27e"
        },
        "commit_message": "Ensure only components which expect to waitForClose do so, https://github.com/OpenHFT/Chronicle-Core/issues/146\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a66b13ddad7c64a2d2d5077eff74aad53ee9f27e": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()",
                    "protected boolean net.openhft.chronicle.core.io.AbstractCloseable.shouldWaitForClosed()"
                ]
            },
            "b650abc31101179cf17f79660c2bc823e72003ae": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()",
                    "protected boolean net.openhft.chronicle.core.io.AbstractCloseable.shouldWaitForClosed()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "dcaeb90809300f847cfbad31ca1e519151a96439",
        "previous_commit": "356db6d2b85c65e2f8e3aff6b599bf0824a16650",
        "date": 1528719509,
        "releases": {
            "previous": "dcaeb90809300f847cfbad31ca1e519151a96439",
            "next": "dcaeb90809300f847cfbad31ca1e519151a96439"
        },
        "commit_message": "fixes around reference counting - https://github.com/OpenHFT/Chronicle-Core/issues/70\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "dcaeb90809300f847cfbad31ca1e519151a96439": {
                "src/main/java/net/openhft/chronicle/core/ReferenceCounter.java": [
                    "public void net.openhft.chronicle.core.ReferenceCounter.release()",
                    "public void net.openhft.chronicle.core.ReferenceCounter.reserve()"
                ]
            },
            "356db6d2b85c65e2f8e3aff6b599bf0824a16650": {
                "src/main/java/net/openhft/chronicle/core/ReferenceCounter.java": [
                    "public void net.openhft.chronicle.core.ReferenceCounter.release()",
                    "public void net.openhft.chronicle.core.ReferenceCounter.reserve()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "8a766d0c582585176efc8a782a6ad38641eb4188",
        "previous_commit": "76890cf1204f6b55f0deddc7936363cad968bd12",
        "date": 1601036493,
        "releases": {
            "previous": "8a766d0c582585176efc8a782a6ad38641eb4188",
            "next": "8a766d0c582585176efc8a782a6ad38641eb4188"
        },
        "commit_message": "OS.TARGET is now private and lazily initialized to avoid unnecessary file system access from the static initializer - fixes OpenHFT/Chronicle-Map#231\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8a766d0c582585176efc8a782a6ad38641eb4188": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static String getTarget()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static Path createTempDirectory(String s)"
                ]
            },
            "76890cf1204f6b55f0deddc7936363cad968bd12": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static String getTarget()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static Path createTempDirectory(String s)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "0efe3750fc01d52b383a2d376a16114cc115673c",
        "previous_commit": "3927a37cbd88592f64e0824b2f94be072e1bcf93",
        "date": 1525418129,
        "releases": {
            "previous": "0efe3750fc01d52b383a2d376a16114cc115673c",
            "next": "0efe3750fc01d52b383a2d376a16114cc115673c"
        },
        "commit_message": "#57 Add 99.7% and 99.97% to the histograms to add detail to the distribution.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0efe3750fc01d52b383a2d376a16114cc115673c": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "private void net.openhft.chronicle.core.jlbh.JLBH.printPercentilesSummary(String label, @NotNull List<double[]> percentileRuns)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public double[] net.openhft.chronicle.core.util.Histogram.getPercentiles()"
                ]
            },
            "3927a37cbd88592f64e0824b2f94be072e1bcf93": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "private void net.openhft.chronicle.core.jlbh.JLBH.printPercentilesSummary(String label, @NotNull List<double[]> percentileRuns)"
                ],
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public double[] net.openhft.chronicle.core.util.Histogram.getPercentiles()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "1e289383521e39c37c22bb6d264612dad2bc1ab1",
        "previous_commit": "455aa9f746c23e4f0facc80e6e589a23f1b9a5d5",
        "date": 1592986021,
        "releases": {
            "previous": "1e289383521e39c37c22bb6d264612dad2bc1ab1",
            "next": "1e289383521e39c37c22bb6d264612dad2bc1ab1"
        },
        "commit_message": "Improve efficiency of unit tests for DataGrid\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "1e289383521e39c37c22bb6d264612dad2bc1ab1": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public int net.openhft.chronicle.core.io.AbstractCloseable.referenceId()"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/ExceptionKey.java": [
                    "public int net.openhft.chronicle.core.onoes.ExceptionKey.hashCode()"
                ]
            },
            "455aa9f746c23e4f0facc80e6e589a23f1b9a5d5": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public int net.openhft.chronicle.core.io.AbstractCloseable.referenceId()"
                ],
                "src/main/java/net/openhft/chronicle/core/onoes/ExceptionKey.java": [
                    "public int net.openhft.chronicle.core.onoes.ExceptionKey.hashCode()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8c6948ee037166da5eb102d546fa268475eaf779",
        "previous_commit": "f497bcb6c897db679e3bcafb47bf75a1f9e881e0",
        "date": 1605711567,
        "releases": {
            "previous": "8c6948ee037166da5eb102d546fa268475eaf779",
            "next": "8c6948ee037166da5eb102d546fa268475eaf779"
        },
        "commit_message": "Rename internal class and make it an enum\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8c6948ee037166da5eb102d546fa268475eaf779": {
                "src/main/java/net/openhft/chronicle/core/pom/PomProperties.java": [
                    "public static Properties net.openhft.chronicle.core.pom.PomProperties.create(@NotNull final String groupId, @NotNull final String artifactId)",
                    "public static String net.openhft.chronicle.core.pom.PomProperties.version(@NotNull final String groupId, @NotNull final String artifactId)"
                ]
            },
            "f497bcb6c897db679e3bcafb47bf75a1f9e881e0": {
                "src/main/java/net/openhft/chronicle/core/pom/PomProperties.java": [
                    "public static Properties net.openhft.chronicle.core.pom.PomProperties.create(@NotNull final String groupId, @NotNull final String artifactId)",
                    "public static String net.openhft.chronicle.core.pom.PomProperties.version(@NotNull final String groupId, @NotNull final String artifactId)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "4fb2e513c015d4081d635f99732d52892c3de171",
        "previous_commit": "98e937e7b21163675e977882d531759b45bd12c8",
        "date": 1603383948,
        "releases": {
            "previous": "4fb2e513c015d4081d635f99732d52892c3de171",
            "next": "4fb2e513c015d4081d635f99732d52892c3de171"
        },
        "commit_message": "Changed AbstractCloseable to only be isClosed()=true after performClose() has been performed, https://github.com/OpenHFT/Chronicle-Core/issues/145\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "4fb2e513c015d4081d635f99732d52892c3de171": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.waitForClosed()",
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ]
            },
            "98e937e7b21163675e977882d531759b45bd12c8": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.waitForClosed()",
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b583c280acd75f8338375890dd15cf0807321e64",
        "previous_commit": "aba43ff73af272f2d1d00f0cd4a1d8c7ff4a320f",
        "date": 1645703553,
        "releases": {
            "previous": "b583c280acd75f8338375890dd15cf0807321e64",
            "next": "b583c280acd75f8338375890dd15cf0807321e64"
        },
        "commit_message": "Added marker interface so the library knows an implementation will ignore everything #347\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b583c280acd75f8338375890dd15cf0807321e64": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.ignored(@NotNull Class<T> tClass, Class<?>... additional)",
                    "protected Object net.openhft.chronicle.core.Mocker.doInvoke(Object proxy, Method method, Object[] args)"
                ]
            },
            "aba43ff73af272f2d1d00f0cd4a1d8c7ff4a320f": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.ignored(@NotNull Class<T> tClass, Class<?>... additional)",
                    "protected Object net.openhft.chronicle.core.Mocker.doInvoke(Object proxy, Method method, Object[] args)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "cd7a7709ae63c1c48e80a87fe9b901c3e4736b06",
        "previous_commit": "529e2f2ff0087aee2cf485bcd00672603002cc33",
        "date": 1631869468,
        "releases": {
            "previous": "cd7a7709ae63c1c48e80a87fe9b901c3e4736b06",
            "next": "cd7a7709ae63c1c48e80a87fe9b901c3e4736b06"
        },
        "commit_message": "Add diagnostics which thread detected a closed resource\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "cd7a7709ae63c1c48e80a87fe9b901c3e4736b06": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosedInSetter()"
                ]
            },
            "529e2f2ff0087aee2cf485bcd00672603002cc33": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosed()",
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.throwExceptionIfClosedInSetter()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "6544a4976537692de6de950fd282a2942edc0c41",
        "previous_commit": "7e65776eb7b89447cf4f0d75d980c8f8e7069ef4",
        "date": 1606739023,
        "releases": {
            "previous": "6544a4976537692de6de950fd282a2942edc0c41",
            "next": "6544a4976537692de6de950fd282a2942edc0c41"
        },
        "commit_message": "Add package name properties and support for that\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "6544a4976537692de6de950fd282a2942edc0c41": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/StandardMaps.java": [
                    "public static Map<String, String> standardEventParameters(@NotNull final String appVersion)",
                    "public static Map<String, String> standardUserProperties()"
                ]
            },
            "7e65776eb7b89447cf4f0d75d980c8f8e7069ef4": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/StandardMaps.java": [
                    "public static Map<String, String> standardEventParameters(@NotNull final String appVersion)",
                    "public static Map<String, String> standardUserProperties()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "9a58f3e3fbe81e491b49fcca913598679ee53684",
        "previous_commit": "8f0a18a053800bbdc0b6be9b84b2e06dc64c3437",
        "date": 1535987544,
        "releases": {
            "previous": "9a58f3e3fbe81e491b49fcca913598679ee53684",
            "next": "9a58f3e3fbe81e491b49fcca913598679ee53684"
        },
        "commit_message": "Fix autoIncrement support (add a test)\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9a58f3e3fbe81e491b49fcca913598679ee53684": {
                "src/main/java/net/openhft/chronicle/core/time/SetTimeProvider.java": [
                    "public long net.openhft.chronicle.core.time.SetTimeProvider.currentTimeNanos()",
                    "public void net.openhft.chronicle.core.time.SetTimeProvider.currentTimeNanos(long nanos)"
                ]
            },
            "8f0a18a053800bbdc0b6be9b84b2e06dc64c3437": {
                "src/main/java/net/openhft/chronicle/core/time/SetTimeProvider.java": [
                    "public long net.openhft.chronicle.core.time.SetTimeProvider.currentTimeNanos()",
                    "public void net.openhft.chronicle.core.time.SetTimeProvider.currentTimeNanos(long nanos)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "3f2ff76b0d45d528426aa162b61d6535de3b531c",
        "previous_commit": "b295e1555a9d37f39fe3febe08b311022b646e4f",
        "date": 1657705163,
        "releases": {
            "previous": "3f2ff76b0d45d528426aa162b61d6535de3b531c",
            "next": "3f2ff76b0d45d528426aa162b61d6535de3b531c"
        },
        "commit_message": "Use a relative path for tmp and target if appropriate. #430\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3f2ff76b0d45d528426aa162b61d6535de3b531c": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static String net.openhft.chronicle.core.OS.findTarget()",
                    "private static String net.openhft.chronicle.core.OS.findTmp()"
                ]
            },
            "b295e1555a9d37f39fe3febe08b311022b646e4f": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static String net.openhft.chronicle.core.OS.findTarget()",
                    "private static String net.openhft.chronicle.core.OS.findTmp()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "5c5e667352681877629e0f88bf197f06b7cbc09b",
        "previous_commit": "f35cfeafcd399671365a75540f30078adb58dcdc",
        "date": 1593087516,
        "releases": {
            "previous": "5c5e667352681877629e0f88bf197f06b7cbc09b",
            "next": "5c5e667352681877629e0f88bf197f06b7cbc09b"
        },
        "commit_message": "Improve safepoint addition for Java 9+\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5c5e667352681877629e0f88bf197f06b7cbc09b": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void optionalSafepoint()",
                    "public static void safepoint()"
                ]
            },
            "f35cfeafcd399671365a75540f30078adb58dcdc": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void optionalSafepoint()",
                    "public static void safepoint()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "47a90fec6628222f9e4246817a8ae5370cc7cba9",
        "previous_commit": "16e5b6228f34604756a79522a4db83df20b67c89",
        "date": 1504098812,
        "releases": {
            "previous": "47a90fec6628222f9e4246817a8ae5370cc7cba9",
            "next": "47a90fec6628222f9e4246817a8ae5370cc7cba9"
        },
        "commit_message": "use library methods\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "47a90fec6628222f9e4246817a8ae5370cc7cba9": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static char[] extractChars(String s)",
                    "public static char[] extractChars(StringBuilder sb)"
                ]
            },
            "16e5b6228f34604756a79522a4db83df20b67c89": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static char[] extractChars(String s)",
                    "public static char[] extractChars(StringBuilder sb)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bfc7184a85be9ad5207e8ead3b85866366e51ad6",
        "previous_commit": "90e620ef0f586a1610421af73cd31533f89c17c7",
        "date": 1519269806,
        "releases": {
            "previous": "bfc7184a85be9ad5207e8ead3b85866366e51ad6",
            "next": "bfc7184a85be9ad5207e8ead3b85866366e51ad6"
        },
        "commit_message": "jlbh event loop $49\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "bfc7184a85be9ad5207e8ead3b85866366e51ad6": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "private void net.openhft.chronicle.core.jlbh.JLBH.resetTime()",
                    "public boolean net.openhft.chronicle.core.jlbh.JLBH.action()"
                ]
            },
            "90e620ef0f586a1610421af73cd31533f89c17c7": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "private void net.openhft.chronicle.core.jlbh.JLBH.resetTime()",
                    "public boolean net.openhft.chronicle.core.jlbh.JLBH.action()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "2a1e6b4b03d56fe1f6a96b5ee5529811938e94dd",
        "previous_commit": "b228f76296482cd789cc02e1ca9dbaa8c8bcdaea",
        "date": 1576495187,
        "releases": {
            "previous": "2a1e6b4b03d56fe1f6a96b5ee5529811938e94dd",
            "next": "2a1e6b4b03d56fe1f6a96b5ee5529811938e94dd"
        },
        "commit_message": "Added support for chained method reader/writers, https://github.com/OpenHFT/Chronicle-Wire/issues/152\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2a1e6b4b03d56fe1f6a96b5ee5529811938e94dd": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T intercepting(@NotNull Class<T> tClass, @NotNull BiConsumer<String, Object[]> consumer, T t)",
                    "public static <T> T ignored(@NotNull Class<T> tClass)"
                ]
            },
            "b228f76296482cd789cc02e1ca9dbaa8c8bcdaea": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T intercepting(@NotNull Class<T> tClass, @NotNull BiConsumer<String, Object[]> consumer, T t)",
                    "public static <T> T ignored(@NotNull Class<T> tClass)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "53e9c86cfef42cfac75dd058d7e9ba36f5d2110d",
        "previous_commit": "e49696566b811c3f92705e03f69238b1e084e34a",
        "date": 1623928370,
        "releases": {
            "previous": "53e9c86cfef42cfac75dd058d7e9ba36f5d2110d",
            "next": "53e9c86cfef42cfac75dd058d7e9ba36f5d2110d"
        },
        "commit_message": "Move SignalHandler code to core, https://github.com/OpenHFT/Chronicle-Core/issues/230\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "53e9c86cfef42cfac75dd058d7e9ba36f5d2110d": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public void net.openhft.chronicle.core.ChainedSignalHandler.handle(final Signal signal)",
                    "public static void signalHandler(final SignalHandler signalHandler)"
                ]
            },
            "e49696566b811c3f92705e03f69238b1e084e34a": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public void net.openhft.chronicle.core.ChainedSignalHandler.handle(final Signal signal)",
                    "public static void signalHandler(final SignalHandler signalHandler)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d2881e0f4e6eb10489edf13ac0adafb96ca91510",
        "previous_commit": "2e13733cdb0889533c6d738216b45f08b4264102",
        "date": 1604994784,
        "releases": {
            "previous": "d2881e0f4e6eb10489edf13ac0adafb96ca91510",
            "next": "d2881e0f4e6eb10489edf13ac0adafb96ca91510"
        },
        "commit_message": "Cleanup\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d2881e0f4e6eb10489edf13ac0adafb96ca91510": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/google/GoogleAnalytics.java": [
                    "private static Map.Entry<String, String> net.openhft.chronicle.core.internal.analytics.google.GoogleAnalytics.entryFor(@NotNull final String systemProperty)",
                    "private Map<String, Object> net.openhft.chronicle.core.internal.analytics.google.GoogleAnalytics.userProperties()"
                ]
            },
            "2e13733cdb0889533c6d738216b45f08b4264102": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/google/GoogleAnalytics.java": [
                    "private static Map.Entry<String, String> net.openhft.chronicle.core.internal.analytics.google.GoogleAnalytics.entryFor(@NotNull final String systemProperty)",
                    "private Map<String, Object> net.openhft.chronicle.core.internal.analytics.google.GoogleAnalytics.userProperties()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "9d950da07dd56566091600df29fa013b655c75f3",
        "previous_commit": "5b17d24956a71699dc065b4c47c8bbdfcd7e3e91",
        "date": 1592558981,
        "releases": {
            "previous": "9d950da07dd56566091600df29fa013b655c75f3",
            "next": "9d950da07dd56566091600df29fa013b655c75f3"
        },
        "commit_message": "VanillaSocketChannel is thread safe but UnsafeFastJ8SocketChannel isn't.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9d950da07dd56566091600df29fa013b655c75f3": {
                "src/main/java/net/openhft/chronicle/core/tcp/FastJ8SocketChannel.java": [
                    "public void net.openhft.chronicle.core.tcp.FastJ8SocketChannel.configureBlocking(boolean blocking)"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/UnsafeFastJ8SocketChannel.java": [
                    "public int net.openhft.chronicle.core.tcp.UnsafeFastJ8SocketChannel.write(ByteBuffer buf)"
                ]
            },
            "5b17d24956a71699dc065b4c47c8bbdfcd7e3e91": {
                "src/main/java/net/openhft/chronicle/core/tcp/FastJ8SocketChannel.java": [
                    "public void net.openhft.chronicle.core.tcp.FastJ8SocketChannel.configureBlocking(boolean blocking)"
                ],
                "src/main/java/net/openhft/chronicle/core/tcp/UnsafeFastJ8SocketChannel.java": [
                    "public int net.openhft.chronicle.core.tcp.UnsafeFastJ8SocketChannel.write(ByteBuffer buf)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "9d91af9ea17a84403859f9dde18c8bb2f68b3f00",
        "previous_commit": "bb09c0ce2a7a4e63e039284f933c35a2dee225d4",
        "date": 1592483480,
        "releases": {
            "previous": "9d91af9ea17a84403859f9dde18c8bb2f68b3f00",
            "next": "9d91af9ea17a84403859f9dde18c8bb2f68b3f00"
        },
        "commit_message": "WeakIdentityHashMap is now thread safe.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9d91af9ea17a84403859f9dde18c8bb2f68b3f00": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.enableCloseableTracing()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.enableReferenceTracing()"
                ]
            },
            "bb09c0ce2a7a4e63e039284f933c35a2dee225d4": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.enableCloseableTracing()"
                ],
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.enableReferenceTracing()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "ae98a4cfec87c79d67cbebaf61bad093eec9b34d",
        "previous_commit": "cda9a1b52001009c872db3d46960b30582bf27d8",
        "date": 1690966249,
        "releases": {
            "previous": "ae98a4cfec87c79d67cbebaf61bad093eec9b34d",
            "next": "ae98a4cfec87c79d67cbebaf61bad093eec9b34d"
        },
        "commit_message": "Tune tests (#553)\n\n* Tune running of tests to reduce overhead\r\n\r\n* Tune running of tests to reduce overhead\r\n\r\n* Tune running of tests to reduce overhead",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "ae98a4cfec87c79d67cbebaf61bad093eec9b34d": {
                "src/main/java/net/openhft/chronicle/core/internal/CloseableUtils.java": [
                    "public static boolean net.openhft.chronicle.core.internal.CloseableUtils.waitForCloseablesToClose(long millis)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            },
            "cda9a1b52001009c872db3d46960b30582bf27d8": {
                "src/main/java/net/openhft/chronicle/core/internal/CloseableUtils.java": [
                    "public static boolean net.openhft.chronicle.core.internal.CloseableUtils.waitForCloseablesToClose(long millis)"
                ],
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d1d946093ebc482f40c384e1a200bbf2fc586d9a",
        "previous_commit": "fa6ba36ef7bd9b5125cef44920b337b39284a862",
        "date": 1615305084,
        "releases": {
            "previous": "d1d946093ebc482f40c384e1a200bbf2fc586d9a",
            "next": "d1d946093ebc482f40c384e1a200bbf2fc586d9a"
        },
        "commit_message": "Added performant memory access operations to use in Bytes, https://github.com/OpenHFT/Chronicle-Core/issues/209\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d1d946093ebc482f40c384e1a200bbf2fc586d9a": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copy8bit(String s, int start, int length, long addr)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.isEqual(long addr, String s, int length)"
                ]
            },
            "fa6ba36ef7bd9b5125cef44920b337b39284a862": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copy8bit(String s, int start, int length, long addr)",
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.isEqual(long addr, String s, int length)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "de1dc46e18feb959523d12c7e434cd042a96c6f7",
        "previous_commit": "125d78beef2d6d2a08c6ca97644d2338bd34a6d4",
        "date": 1592555822,
        "releases": {
            "previous": "de1dc46e18feb959523d12c7e434cd042a96c6f7",
            "next": "de1dc46e18feb959523d12c7e434cd042a96c6f7"
        },
        "commit_message": "Code tidy\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "de1dc46e18feb959523d12c7e434cd042a96c6f7": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void safepoint()"
                ]
            },
            "125d78beef2d6d2a08c6ca97644d2338bd34a6d4": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void safepoint()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "cf263c185c0be06c3387a84fb51a219983c31ca2",
        "previous_commit": "2692e2a1ee39403934c6afaaccafafdab1146543",
        "date": 1629980473,
        "releases": {
            "previous": "cf263c185c0be06c3387a84fb51a219983c31ca2",
            "next": "cf263c185c0be06c3387a84fb51a219983c31ca2"
        },
        "commit_message": "warn -> debug\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "cf263c185c0be06c3387a84fb51a219983c31ca2": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public void net.openhft.chronicle.core.threads.CleaningThread.run()"
                ]
            },
            "2692e2a1ee39403934c6afaaccafafdab1146543": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public void net.openhft.chronicle.core.threads.CleaningThread.run()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "a5b04bd13bfa8c42a88f30fb854c4abb94566b51",
        "previous_commit": "28d4b38d54afa3c80c8b9fde585015e609830872",
        "date": 1591011650,
        "releases": {
            "previous": "a5b04bd13bfa8c42a88f30fb854c4abb94566b51",
            "next": "a5b04bd13bfa8c42a88f30fb854c4abb94566b51"
        },
        "commit_message": "fix Jvm.getBoolean\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a5b04bd13bfa8c42a88f30fb854c4abb94566b51": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean getBoolean(String property, boolean defaultValue)"
                ]
            },
            "28d4b38d54afa3c80c8b9fde585015e609830872": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean getBoolean(String property, boolean defaultValue)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "aba43ff73af272f2d1d00f0cd4a1d8c7ff4a320f",
        "previous_commit": "30c5dfe8af7a1e5d12f15c5fe19c8132ee013ab7",
        "date": 1645699731,
        "releases": {
            "previous": "aba43ff73af272f2d1d00f0cd4a1d8c7ff4a320f",
            "next": "aba43ff73af272f2d1d00f0cd4a1d8c7ff4a320f"
        },
        "commit_message": "Minor fix due to merge failure\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "aba43ff73af272f2d1d00f0cd4a1d8c7ff4a320f": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.ignored(@NotNull Class<T> tClass, Class<?>... additional)"
                ]
            },
            "30c5dfe8af7a1e5d12f15c5fe19c8132ee013ab7": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.ignored(@NotNull Class<T> tClass, Class<?>... additional)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "9e303abc4bd115cd74337b0862c13ed405f251fb",
        "previous_commit": "a2c7cea0cb9e3243f24d482a7250c31830556ffd",
        "date": 1589217928,
        "releases": {
            "previous": "9e303abc4bd115cd74337b0862c13ed405f251fb",
            "next": "9e303abc4bd115cd74337b0862c13ed405f251fb"
        },
        "commit_message": "Rollback change in OS\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9e303abc4bd115cd74337b0862c13ed405f251fb": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public void net.openhft.chronicle.core.Unmapper.run()"
                ]
            },
            "a2c7cea0cb9e3243f24d482a7250c31830556ffd": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public void net.openhft.chronicle.core.Unmapper.run()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "640ec548a6c7d9e69a3bc668ade801e558358a58",
        "previous_commit": "32ad5a8cfb516146a334d6e25e019c03cbe1655d",
        "date": 1686242499,
        "releases": {
            "previous": "640ec548a6c7d9e69a3bc668ade801e558358a58",
            "next": "640ec548a6c7d9e69a3bc668ade801e558358a58"
        },
        "commit_message": "Improve checking of tests (#528)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "640ec548a6c7d9e69a3bc668ade801e558358a58": {
                "src/main/java/net/openhft/chronicle/core/shutdown/PriorityHook.java": [
                    "public static synchronized void net.openhft.chronicle.core.shutdown.PriorityHook.clear()"
                ]
            },
            "32ad5a8cfb516146a334d6e25e019c03cbe1655d": {
                "src/main/java/net/openhft/chronicle/core/shutdown/PriorityHook.java": [
                    "public static synchronized void net.openhft.chronicle.core.shutdown.PriorityHook.clear()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f283dc7032fecc91731d09d9bc4b3b7122a8e911",
        "previous_commit": "7b8cbccdce81d75240ca546012355d4d3b3c9109",
        "date": 1686651723,
        "releases": {
            "previous": "f283dc7032fecc91731d09d9bc4b3b7122a8e911",
            "next": "f283dc7032fecc91731d09d9bc4b3b7122a8e911"
        },
        "commit_message": "Avoid incomplete cleanup in case of no specific thread\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f283dc7032fecc91731d09d9bc4b3b7122a8e911": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "private static void net.openhft.chronicle.core.threads.CleaningThread.scanReferences(CleaningThreadLocal<?> ctl, WeakReference<?>[] table, Object o, Method remove)"
                ]
            },
            "7b8cbccdce81d75240ca546012355d4d3b3c9109": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "private static void net.openhft.chronicle.core.threads.CleaningThread.scanReferences(CleaningThreadLocal<?> ctl, WeakReference<?>[] table, Object o, Method remove)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "7bbcb1c398c89b66a7ff8f096c2cf54541f84fbb",
        "previous_commit": "4ed6a0f45e6f95eaa6e7f92f11ffdc329a21f641",
        "date": 1623745513,
        "releases": {
            "previous": "7bbcb1c398c89b66a7ff8f096c2cf54541f84fbb",
            "next": "7bbcb1c398c89b66a7ff8f096c2cf54541f84fbb"
        },
        "commit_message": "Tidy percentages\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7bbcb1c398c89b66a7ff8f096c2cf54541f84fbb": {
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public static double[] net.openhft.chronicle.core.util.Histogram.percentilesFor(long count)"
                ]
            },
            "4ed6a0f45e6f95eaa6e7f92f11ffdc329a21f641": {
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public static double[] net.openhft.chronicle.core.util.Histogram.percentilesFor(long count)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "27ec6ad579082b4cc2e4629a1f545a8d5025ac68",
        "previous_commit": "58e53658f5f15bacf5827766b7e3d43c1aefd40a",
        "date": 1684086976,
        "releases": {
            "previous": "27ec6ad579082b4cc2e4629a1f545a8d5025ac68",
            "next": "27ec6ad579082b4cc2e4629a1f545a8d5025ac68"
        },
        "commit_message": "associate Map/Set/List with concrete classes (#509)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "27ec6ad579082b4cc2e4629a1f545a8d5025ac68": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "static Class<?> net.openhft.chronicle.core.util.ObjectUtils.lookForImplEnum(Class<?> c2)"
                ]
            },
            "58e53658f5f15bacf5827766b7e3d43c1aefd40a": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "static Class<?> net.openhft.chronicle.core.util.ObjectUtils.lookForImplEnum(Class<?> c2)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d831af6e225ae08ffd2981da8f959247c2c33d4e",
        "previous_commit": "f8ec81a59fca1cf3e501af03af3f5f10c1a1ad63",
        "date": 1526460598,
        "releases": {
            "previous": "d831af6e225ae08ffd2981da8f959247c2c33d4e",
            "next": "d831af6e225ae08ffd2981da8f959247c2c33d4e"
        },
        "commit_message": "Added extra checks for boolean isTrue, isFalse and toBoolean, closes #59\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d831af6e225ae08ffd2981da8f959247c2c33d4e": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public ThrowingFunction<String, Object, Exception> net.openhft.chronicle.core.util.ConversionFunction.apply(@NotNull Class<?> c)"
                ]
            },
            "f8ec81a59fca1cf3e501af03af3f5f10c1a1ad63": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public ThrowingFunction<String, Object, Exception> net.openhft.chronicle.core.util.ConversionFunction.apply(@NotNull Class<?> c)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "6708e16e34d878ee737643a143dd5e01903a96c8",
        "previous_commit": "c923717ddb86174c3a683d2ee6110a8485be571e",
        "date": 1623317430,
        "releases": {
            "previous": "6708e16e34d878ee737643a143dd5e01903a96c8",
            "next": "6708e16e34d878ee737643a143dd5e01903a96c8"
        },
        "commit_message": "Thread's interrupt flag was somehow cleared throwing an AssertionError #175\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "6708e16e34d878ee737643a143dd5e01903a96c8": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public void net.openhft.chronicle.core.CommonInterruptible.interrupt()"
                ]
            },
            "c923717ddb86174c3a683d2ee6110a8485be571e": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public void net.openhft.chronicle.core.CommonInterruptible.interrupt()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "586f812f2ef7b03a1633e2333094a48e24744d36",
        "previous_commit": "c38f5c46e6af063daab1d7bfd4288ef4449779fc",
        "date": 1597862458,
        "releases": {
            "previous": "586f812f2ef7b03a1633e2333094a48e24744d36",
            "next": "586f812f2ef7b03a1633e2333094a48e24744d36"
        },
        "commit_message": "do full time calibration on Windows\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "586f812f2ef7b03a1633e2333094a48e24744d36": {
                "src/main/java/net/openhft/chronicle/core/time/SystemTimeProvider.java": [
                    "protected long currentTimeNanos1()"
                ]
            },
            "c38f5c46e6af063daab1d7bfd4288ef4449779fc": {
                "src/main/java/net/openhft/chronicle/core/time/SystemTimeProvider.java": [
                    "protected long currentTimeNanos1()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "aaccda29a116f9c7f33a20d9e97e1d1839fa7927",
        "previous_commit": "3fd9bc429d46f03a8e100b99946c5774aa681db9",
        "date": 1551111045,
        "releases": {
            "previous": "aaccda29a116f9c7f33a20d9e97e1d1839fa7927",
            "next": "aaccda29a116f9c7f33a20d9e97e1d1839fa7927"
        },
        "commit_message": "Added support for testing cool CPUs, https://github.com/OpenHFT/Chronicle-Core/issues/83\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "aaccda29a116f9c7f33a20d9e97e1d1839fa7927": {
                "src/main/java/net/openhft/chronicle/core/cooler/CoolerTester.java": [
                    "public void net.openhft.chronicle.core.cooler.CoolerTester.run()"
                ]
            },
            "3fd9bc429d46f03a8e100b99946c5774aa681db9": {
                "src/main/java/net/openhft/chronicle/core/cooler/CoolerTester.java": [
                    "public void net.openhft.chronicle.core.cooler.CoolerTester.run()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "7fe4156bf16c6621aa3c433c2ce9fb851e4c12d4",
        "previous_commit": "7eecb0c0fc3cb9d329b9e47ecb27f428669e286f",
        "date": 1599833408,
        "releases": {
            "previous": "7fe4156bf16c6621aa3c433c2ce9fb851e4c12d4",
            "next": "7fe4156bf16c6621aa3c433c2ce9fb851e4c12d4"
        },
        "commit_message": "Improved support for Dynamic Enums, https://github.com/OpenHFT/Chronicle-Wire/issues/196\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7fe4156bf16c6621aa3c433c2ce9fb851e4c12d4": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "private static Supplier supplierForClass(Class<?> c)"
                ]
            },
            "7eecb0c0fc3cb9d329b9e47ecb27f428669e286f": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "private static Supplier supplierForClass(Class<?> c)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "777dbb32961a4326025632da25b652c71ffc601f",
        "previous_commit": "f66fe96ecfe13dfc6c950e130ecac1fba41600c6",
        "date": 1626426505,
        "releases": {
            "previous": "777dbb32961a4326025632da25b652c71ffc601f",
            "next": "777dbb32961a4326025632da25b652c71ffc601f"
        },
        "commit_message": "Support converting to a DynamicEnum without a String constructor #237\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "777dbb32961a4326025632da25b652c71ffc601f": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public ThrowingFunction<String, Object, Exception> net.openhft.chronicle.core.util.ConversionFunction.apply(@NotNull Class<?> c)"
                ]
            },
            "f66fe96ecfe13dfc6c950e130ecac1fba41600c6": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public ThrowingFunction<String, Object, Exception> net.openhft.chronicle.core.util.ConversionFunction.apply(@NotNull Class<?> c)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "1c6d2b96976cf9b4feadb456e8adbf29bc8c2d4c",
        "previous_commit": "573d11d5bea0351230317c20c2a88632095cf102",
        "date": 1649339962,
        "releases": {
            "previous": "1c6d2b96976cf9b4feadb456e8adbf29bc8c2d4c",
            "next": "1c6d2b96976cf9b4feadb456e8adbf29bc8c2d4c"
        },
        "commit_message": "Sonar issue\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "1c6d2b96976cf9b4feadb456e8adbf29bc8c2d4c": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public String net.openhft.chronicle.core.pool.ClassAliasPool.nameFor(Class<?> clazz)"
                ]
            },
            "573d11d5bea0351230317c20c2a88632095cf102": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public String net.openhft.chronicle.core.pool.ClassAliasPool.nameFor(Class<?> clazz)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "a1a25cae584982751f612c09f60d996c9295fd69",
        "previous_commit": "04aa0c607c22fb4b1aa412730e2df850e302853b",
        "date": 1504093130,
        "releases": {
            "previous": "a1a25cae584982751f612c09f60d996c9295fd69",
            "next": "a1a25cae584982751f612c09f60d996c9295fd69"
        },
        "commit_message": "remove use of deprecated method\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a1a25cae584982751f612c09f60d996c9295fd69": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static void setCount(StringBuilder sb, int count)"
                ]
            },
            "04aa0c607c22fb4b1aa412730e2df850e302853b": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static void setCount(StringBuilder sb, int count)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c951fd777471a6e6b053a8f9e71d738a9ba7c415",
        "previous_commit": "bd8a80f96b46cdc19660cff036ec379a44b2c2ba",
        "date": 1600151971,
        "releases": {
            "previous": "c951fd777471a6e6b053a8f9e71d738a9ba7c415",
            "next": "c951fd777471a6e6b053a8f9e71d738a9ba7c415"
        },
        "commit_message": "Added support for mapping interfaces to a default implementation, https://github.com/OpenHFT/Chronicle-Wire/issues/200\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c951fd777471a6e6b053a8f9e71d738a9ba7c415": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static synchronized void defaultObjectForInterface(ThrowingFunction<Class, Class, ClassNotFoundException> defaultObjectForInterface)"
                ]
            },
            "bd8a80f96b46cdc19660cff036ec379a44b2c2ba": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static synchronized void defaultObjectForInterface(ThrowingFunction<Class, Class, ClassNotFoundException> defaultObjectForInterface)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "bcb143cd4c2c0e208e0880270e8e57fe7b1b88aa",
        "previous_commit": "97e9826b0eb69aef140eb306d4bc35e2018036e0",
        "date": 1656513360,
        "releases": {
            "previous": "bcb143cd4c2c0e208e0880270e8e57fe7b1b88aa",
            "next": "bcb143cd4c2c0e208e0880270e8e57fe7b1b88aa"
        },
        "commit_message": "Added GenericReflection.getParameterTypes() #428\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "bcb143cd4c2c0e208e0880270e8e57fe7b1b88aa": {
                "src/main/java/net/openhft/chronicle/core/util/GenericReflection.java": [
                    "public static Type getReturnType(Method method, Type type)"
                ]
            },
            "97e9826b0eb69aef140eb306d4bc35e2018036e0": {
                "src/main/java/net/openhft/chronicle/core/util/GenericReflection.java": [
                    "public static Type getReturnType(Method method, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8f69bdb1816c19adff469b3a3c9ce7344305978a",
        "previous_commit": "3759429f3641e0d8de1635a3e0a1dee075d461af",
        "date": 1507286982,
        "releases": {
            "previous": "8f69bdb1816c19adff469b3a3c9ce7344305978a",
            "next": "8f69bdb1816c19adff469b3a3c9ce7344305978a"
        },
        "commit_message": "only create an executor once when starting reference processor.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8f69bdb1816c19adff469b3a3c9ce7344305978a": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "public static WeakReferenceCleaner net.openhft.chronicle.core.util.WeakReferenceCleaner.newCleaner(final Object referent, final Runnable thunk)"
                ]
            },
            "3759429f3641e0d8de1635a3e0a1dee075d461af": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "public static WeakReferenceCleaner net.openhft.chronicle.core.util.WeakReferenceCleaner.newCleaner(final Object referent, final Runnable thunk)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "1beb07d87b638bcf5f473166f37cc4f531347a7d",
        "previous_commit": "a5590fae2732314ce12be55db81d26d0b213ac28",
        "date": 1503661816,
        "releases": {
            "previous": "1beb07d87b638bcf5f473166f37cc4f531347a7d",
            "next": "1beb07d87b638bcf5f473166f37cc4f531347a7d"
        },
        "commit_message": "Fix a bug where the type prefix is empty.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "1beb07d87b638bcf5f473166f37cc4f531347a7d": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public Class net.openhft.chronicle.core.pool.ClassAliasPool.forName(@NotNull CharSequence name)"
                ]
            },
            "a5590fae2732314ce12be55db81d26d0b213ac28": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public Class net.openhft.chronicle.core.pool.ClassAliasPool.forName(@NotNull CharSequence name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "41303e8405c6949645a2dfeaf3a2ad14ae969367",
        "previous_commit": "9431106907315d57855cc49d6a248ded617b4fdb",
        "date": 1580915777,
        "releases": {
            "previous": "41303e8405c6949645a2dfeaf3a2ad14ae969367",
            "next": "41303e8405c6949645a2dfeaf3a2ad14ae969367"
        },
        "commit_message": "Fixing NPE caused by BootStarp classloader \n\nfixing issue #94 \r\nNo other problems found running.",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "41303e8405c6949645a2dfeaf3a2ad14ae969367": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void loadSystemProperties(String name)"
                ]
            },
            "9431106907315d57855cc49d6a248ded617b4fdb": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void loadSystemProperties(String name)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "28465aea36b98f0ea3147e5fbeca3c8f76aeac14",
        "previous_commit": "5cc9ce45bb942df7c51898b28c69ac0de4c7f9e4",
        "date": 1688128895,
        "releases": {
            "previous": "28465aea36b98f0ea3147e5fbeca3c8f76aeac14",
            "next": "28465aea36b98f0ea3147e5fbeca3c8f76aeac14"
        },
        "commit_message": "Add javadoc to IO package (#543)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "28465aea36b98f0ea3147e5fbeca3c8f76aeac14": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.singleThreadedCheckDisabled(boolean singleThreadedCheckDisabled)"
                ]
            },
            "5cc9ce45bb942df7c51898b28c69ac0de4c7f9e4": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.singleThreadedCheckDisabled(boolean singleThreadedCheckDisabled)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f8e911fd247d9d6ab948a1d8e479acfdac678109",
        "previous_commit": "f734704f5722457ed374f2d3b784d6d5ae0372ab",
        "date": 1645027536,
        "releases": {
            "previous": "f8e911fd247d9d6ab948a1d8e479acfdac678109",
            "next": "f8e911fd247d9d6ab948a1d8e479acfdac678109"
        },
        "commit_message": "Create a tmp directory if one doesn't exists or is read only #315 (#316)\n\n* Create a tmp directory if one doesn't exists or is read only #315\r\n\r\n* Create a tmp directory if one doesn't exists or is read only #315\r\n\r\nCo-authored-by: Peter Lawrwy <peter.lawrey@chronicle.software>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f8e911fd247d9d6ab948a1d8e479acfdac678109": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static String net.openhft.chronicle.core.OS.findTarget()"
                ]
            },
            "f734704f5722457ed374f2d3b784d6d5ae0372ab": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static String net.openhft.chronicle.core.OS.findTarget()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e544fb6274756cdc24edb7d5f60fc458648b2706",
        "previous_commit": "93ea2aecdd1ec1e964766ce0f2aac9701decf996",
        "date": 1513352843,
        "releases": {
            "previous": "e544fb6274756cdc24edb7d5f60fc458648b2706",
            "next": "e544fb6274756cdc24edb7d5f60fc458648b2706"
        },
        "commit_message": "added better support for a clean shutdown\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e544fb6274756cdc24edb7d5f60fc458648b2706": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            },
            "93ea2aecdd1ec1e964766ce0f2aac9701decf996": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "0e37ee2fc21b33d625ecbdb63783127a0d0a6527",
        "previous_commit": "c38f5c46e6af063daab1d7bfd4288ef4449779fc",
        "date": 1597862757,
        "releases": {
            "previous": "0e37ee2fc21b33d625ecbdb63783127a0d0a6527",
            "next": "0e37ee2fc21b33d625ecbdb63783127a0d0a6527"
        },
        "commit_message": "Make currentTimeNanos monotonically increasing.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0e37ee2fc21b33d625ecbdb63783127a0d0a6527": {
                "src/main/java/net/openhft/chronicle/core/time/SystemTimeProvider.java": [
                    "protected long currentTimeNanos1()"
                ]
            },
            "c38f5c46e6af063daab1d7bfd4288ef4449779fc": {
                "src/main/java/net/openhft/chronicle/core/time/SystemTimeProvider.java": [
                    "protected long currentTimeNanos1()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "bb5aaf451202ac89af7f34cced103686289f72c3",
        "previous_commit": "3800cbe484a281f3838fe39d7f44a2d0803ca6dd",
        "date": 1628746619,
        "releases": {
            "previous": "bb5aaf451202ac89af7f34cced103686289f72c3",
            "next": "bb5aaf451202ac89af7f34cced103686289f72c3"
        },
        "commit_message": "does not make sense Jvm.isDebugEnabled to return true if running in the debugger - this method is be used to see if DEBUG log level enabled\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "bb5aaf451202ac89af7f34cced103686289f72c3": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean isDebugEnabled(final Class<?> aClass)"
                ]
            },
            "3800cbe484a281f3838fe39d7f44a2d0803ca6dd": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean isDebugEnabled(final Class<?> aClass)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "fd63d800a5f882adb43d3d149c6bffe4727b77c4",
        "previous_commit": "91a8596e99d9003d98c0c00b8db29e1b729c71f9",
        "date": 1508761817,
        "releases": {
            "previous": "fd63d800a5f882adb43d3d149c6bffe4727b77c4",
            "next": "fd63d800a5f882adb43d3d149c6bffe4727b77c4"
        },
        "commit_message": "Add checks that Bytes are released properly.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "fd63d800a5f882adb43d3d149c6bffe4727b77c4": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static long maxDirectMemory0()"
                ]
            },
            "91a8596e99d9003d98c0c00b8db29e1b729c71f9": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static long maxDirectMemory0()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "3b48834ff2c3fb2d5673009cd44dc2c5cdb6a401",
        "previous_commit": "86462edd5bc986862047fbb0313dc9ddab046199",
        "date": 1510053190,
        "releases": {
            "previous": "3b48834ff2c3fb2d5673009cd44dc2c5cdb6a401",
            "next": "3b48834ff2c3fb2d5673009cd44dc2c5cdb6a401"
        },
        "commit_message": "Don't enable SIGHUP on Windows.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3b48834ff2c3fb2d5673009cd44dc2c5cdb6a401": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void signalHandler(SignalHandler signalHandler)"
                ]
            },
            "86462edd5bc986862047fbb0313dc9ddab046199": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void signalHandler(SignalHandler signalHandler)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "8bea46119bc4fab01df87b1b47aac671f2530a68",
        "previous_commit": "a19ef385d5d4e75e39dbd03c4eb11dc537a1a9a4",
        "date": 1667894397,
        "releases": {
            "previous": "8bea46119bc4fab01df87b1b47aac671f2530a68",
            "next": "8bea46119bc4fab01df87b1b47aac671f2530a68"
        },
        "commit_message": "better detection of Mac Intel vs Arm. Closes #451\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8bea46119bc4fab01df87b1b47aac671f2530a68": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "static boolean net.openhft.chronicle.core.Bootstrap.isMacArm0()"
                ]
            },
            "a19ef385d5d4e75e39dbd03c4eb11dc537a1a9a4": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "static boolean net.openhft.chronicle.core.Bootstrap.isMacArm0()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "468140a5b87d8e5fa18c8f74f66e12007f19b3de",
        "previous_commit": "b0facd5b6141eb4b73095005e459ade07b961d17",
        "date": 1682503417,
        "releases": {
            "previous": "468140a5b87d8e5fa18c8f74f66e12007f19b3de",
            "next": "468140a5b87d8e5fa18c8f74f66e12007f19b3de"
        },
        "commit_message": "make LicenceCheck output more consistent\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "468140a5b87d8e5fa18c8f74f66e12007f19b3de": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class<?> caller)"
                ]
            },
            "b0facd5b6141eb4b73095005e459ade07b961d17": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class<?> caller)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "80602837b69c4997d93a8497c7dd03bd39e44d06",
        "previous_commit": "8816809d95568e7c768347d51821055559df6d3e",
        "date": 1593170738,
        "releases": {
            "previous": "80602837b69c4997d93a8497c7dd03bd39e44d06",
            "next": "80602837b69c4997d93a8497c7dd03bd39e44d06"
        },
        "commit_message": "added an earier test for arm\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "80602837b69c4997d93a8497c7dd03bd39e44d06": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void safepoint()"
                ]
            },
            "8816809d95568e7c768347d51821055559df6d3e": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void safepoint()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "ec32b42b9898d19d3f3976dff3aa0b0fd31a268d",
        "previous_commit": "758b7f20ab12b9acf6481ce615de628f75f77354",
        "date": 1658742182,
        "releases": {
            "previous": "ec32b42b9898d19d3f3976dff3aa0b0fd31a268d",
            "next": "ec32b42b9898d19d3f3976dff3aa0b0fd31a268d"
        },
        "commit_message": "Ignore if isClose() throws NPE as the resource might not be initialised. https://github.com/OpenHFT/Chronicle-Bytes/issues/406 (#434)\n\nCo-authored-by: Peter Lawrey <peter.lawrey@chronicle.software>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "ec32b42b9898d19d3f3976dff3aa0b0fd31a268d": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "static String net.openhft.chronicle.core.io.TracingReferenceCounted.asString(Object id)"
                ]
            },
            "758b7f20ab12b9acf6481ce615de628f75f77354": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "static String net.openhft.chronicle.core.io.TracingReferenceCounted.asString(Object id)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "a72823259e65d2abf30b7436e967b00b080c8a1c",
        "previous_commit": "d64056fc38a04e278258b08dc50484e87f6dd1e2",
        "date": 1571294816,
        "releases": {
            "previous": "a72823259e65d2abf30b7436e967b00b080c8a1c",
            "next": "a72823259e65d2abf30b7436e967b00b080c8a1c"
        },
        "commit_message": "changed to use Jvm.debug()\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a72823259e65d2abf30b7436e967b00b080c8a1c": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            },
            "d64056fc38a04e278258b08dc50484e87f6dd1e2": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "1642a97a133c55b6970e40c4a223bdea59f5332d",
        "previous_commit": "5798d48f907e3d0b3a261209c3a5998ef7cccef6",
        "date": 1504255365,
        "releases": {
            "previous": "1642a97a133c55b6970e40c4a223bdea59f5332d",
            "next": "1642a97a133c55b6970e40c4a223bdea59f5332d"
        },
        "commit_message": "revert change to work around java9 naming of Cleaner\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "1642a97a133c55b6970e40c4a223bdea59f5332d": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static void clean(ByteBuffer bb)"
                ]
            },
            "5798d48f907e3d0b3a261209c3a5998ef7cccef6": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static void clean(ByteBuffer bb)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6cf1b47514e1dca48be0f9f26439c34225bdbfd2",
        "previous_commit": "89948de718b6f51fc2ec110340cdb05cbf5ad55c",
        "date": 1639645155,
        "releases": {
            "previous": "6cf1b47514e1dca48be0f9f26439c34225bdbfd2",
            "next": "6cf1b47514e1dca48be0f9f26439c34225bdbfd2"
        },
        "commit_message": "Issue/291 (#292)\n\n* Remove flagged issue\r\n\r\n* Add JUnit5 and bump dependencies\r\n\r\n* Add assertions\r\n\r\n* Add assertions\r\n\r\n* Add a large number of assertions to UnsafeMemoryTest\r\n\r\n* Add assertions and remove unused class\r\n\r\n* Remove assertDoesNotThrow assertions",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "6cf1b47514e1dca48be0f9f26439c34225bdbfd2": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadLocalProperties.java": [
                    "public Object net.openhft.chronicle.core.threads.ThreadLocalProperties.clone()"
                ]
            },
            "89948de718b6f51fc2ec110340cdb05cbf5ad55c": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadLocalProperties.java": [
                    "public Object net.openhft.chronicle.core.threads.ThreadLocalProperties.clone()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8816809d95568e7c768347d51821055559df6d3e",
        "previous_commit": "72f238e7a1f4386f9613ac52d845d02b7a134644",
        "date": 1593170159,
        "releases": {
            "previous": "8816809d95568e7c768347d51821055559df6d3e",
            "next": "8816809d95568e7c768347d51821055559df6d3e"
        },
        "commit_message": "attempting to fix safepointTest on ARM\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8816809d95568e7c768347d51821055559df6d3e": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void safepoint()"
                ]
            },
            "72f238e7a1f4386f9613ac52d845d02b7a134644": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void safepoint()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "29947dc40c65814c023f694c63cb0a8b41599601",
        "previous_commit": "81e1119c7473f5a817b79d8154b7037a28084fcf",
        "date": 1601038953,
        "releases": {
            "previous": "29947dc40c65814c023f694c63cb0a8b41599601",
            "next": "29947dc40c65814c023f694c63cb0a8b41599601"
        },
        "commit_message": "ReflectionBasedByteBufferCleanerService::clean NPEs, Fix #140\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "29947dc40c65814c023f694c63cb0a8b41599601": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ]
            },
            "81e1119c7473f5a817b79d8154b7037a28084fcf": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "acc5377f1a71092f31f20ac6f2259e7bec126527",
        "previous_commit": "005e9f0ebc6d43a4b00ad17ea535acd285497a4a",
        "date": 1605809155,
        "releases": {
            "previous": "acc5377f1a71092f31f20ac6f2259e7bec126527",
            "next": "acc5377f1a71092f31f20ac6f2259e7bec126527"
        },
        "commit_message": "Add system prop for default builder\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "acc5377f1a71092f31f20ac6f2259e7bec126527": {
                "src/main/java/net/openhft/chronicle/core/analytics/AnalyticsFacade.java": [
                    "static Builder standardBuilder(@NotNull final String measurementId, @NotNull final String apiSecret, @NotNull final String appVersion)"
                ]
            },
            "005e9f0ebc6d43a4b00ad17ea535acd285497a4a": {
                "src/main/java/net/openhft/chronicle/core/analytics/AnalyticsFacade.java": [
                    "static Builder standardBuilder(@NotNull final String measurementId, @NotNull final String apiSecret, @NotNull final String appVersion)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f073e935cb7fe203c1a6c24071a358f19854f731",
        "previous_commit": "dea6a3affa59fe4e5c35e40552e0729a2c3e1dbe",
        "date": 1506952907,
        "releases": {
            "previous": "f073e935cb7fe203c1a6c24071a358f19854f731",
            "next": "f073e935cb7fe203c1a6c24071a358f19854f731"
        },
        "commit_message": "force reference processor to run if it has not been started already\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f073e935cb7fe203c1a6c24071a358f19854f731": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "public static WeakReferenceCleaner net.openhft.chronicle.core.util.WeakReferenceCleaner.newCleaner(final Object referent, final Runnable thunk)"
                ]
            },
            "dea6a3affa59fe4e5c35e40552e0729a2c3e1dbe": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "public static WeakReferenceCleaner net.openhft.chronicle.core.util.WeakReferenceCleaner.newCleaner(final Object referent, final Runnable thunk)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "88395d690c0eb9507b34586a6636a580e09152ea",
        "previous_commit": "866ba4cbf820358cbe0c5ef66d71bf704f5d0ad6",
        "date": 1634722470,
        "releases": {
            "previous": "88395d690c0eb9507b34586a6636a580e09152ea",
            "next": "88395d690c0eb9507b34586a6636a580e09152ea"
        },
        "commit_message": "use an IdentitySet so as to avoid calling hashCode() when reference accounting https://github.com/ChronicleEnterprise/Chronicle-FIX/issues/838\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "88395d690c0eb9507b34586a6636a580e09152ea": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ]
            },
            "866ba4cbf820358cbe0c5ef66d71bf704f5d0ad6": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "6c6df8019c0164afa2e01d8144d58c0dd1985ce8",
        "previous_commit": "0a932b5b2afe780a9e778fa51c2dc208b72e8b53",
        "date": 1604306176,
        "releases": {
            "previous": "6c6df8019c0164afa2e01d8144d58c0dd1985ce8",
            "next": "6c6df8019c0164afa2e01d8144d58c0dd1985ce8"
        },
        "commit_message": "Add a utility to make unique files/dirs easier, https://github.com/OpenHFT/Chronicle-Core/issues/149\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "6c6df8019c0164afa2e01d8144d58c0dd1985ce8": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static Path createTempDirectory(String s)"
                ]
            },
            "0a932b5b2afe780a9e778fa51c2dc208b72e8b53": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static Path createTempDirectory(String s)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "5c6b34d8900b3b7a07a33aae6e3de9a506472e21",
        "previous_commit": "f5f12d4c0f1f0b803c861e8cd9d44bf31aa6aad4",
        "date": 1633388472,
        "releases": {
            "previous": "5c6b34d8900b3b7a07a33aae6e3de9a506472e21",
            "next": "5c6b34d8900b3b7a07a33aae6e3de9a506472e21"
        },
        "commit_message": "Don't warn when interrupt is called from a non-interrupted thread (this can happen), Fixes #251 & ChronicleEnterprise/Chronicle-Queue-Enterprise#250\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5c6b34d8900b3b7a07a33aae6e3de9a506472e21": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public void net.openhft.chronicle.core.CommonInterruptible.interrupt()"
                ]
            },
            "f5f12d4c0f1f0b803c861e8cd9d44bf31aa6aad4": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public void net.openhft.chronicle.core.CommonInterruptible.interrupt()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2e3ecd4945ecfeac32a38bf8466bc6b67c9e29d8",
        "previous_commit": "9d2656a5e28f2a4595df097a4158475edcaac2bb",
        "date": 1532368147,
        "releases": {
            "previous": "2e3ecd4945ecfeac32a38bf8466bc6b67c9e29d8",
            "next": "2e3ecd4945ecfeac32a38bf8466bc6b67c9e29d8"
        },
        "commit_message": "https://github.com/ChronicleEnterprise/RootPom/issues/49 fixed formating issues\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2e3ecd4945ecfeac32a38bf8466bc6b67c9e29d8": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.printPercentilesSummary(String label, @NotNull List<double[]> percentileRuns, Appendable appendable)"
                ]
            },
            "9d2656a5e28f2a4595df097a4158475edcaac2bb": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.printPercentilesSummary(String label, @NotNull List<double[]> percentileRuns, Appendable appendable)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "57a0bd3ab1ee1747f24d50536f7b07d9abb3e1dd",
        "previous_commit": "8252e4a2f8d3c5ae0238e702ab74e983a39e096e",
        "date": 1586264964,
        "releases": {
            "previous": "57a0bd3ab1ee1747f24d50536f7b07d9abb3e1dd",
            "next": "57a0bd3ab1ee1747f24d50536f7b07d9abb3e1dd"
        },
        "commit_message": "Superfluous aliasing\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "57a0bd3ab1ee1747f24d50536f7b07d9abb3e1dd": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private ClassAliasPool net.openhft.chronicle.core.pool.ClassAliasPool.defaultAliases()"
                ]
            },
            "8252e4a2f8d3c5ae0238e702ab74e983a39e096e": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private ClassAliasPool net.openhft.chronicle.core.pool.ClassAliasPool.defaultAliases()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "86462edd5bc986862047fbb0313dc9ddab046199",
        "previous_commit": "017a5ffbb71fdf0d8afb386d1fc9523f03a3993c",
        "date": 1510052846,
        "releases": {
            "previous": "86462edd5bc986862047fbb0313dc9ddab046199",
            "next": "86462edd5bc986862047fbb0313dc9ddab046199"
        },
        "commit_message": "Don't enable SIGHUP on Windows.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "86462edd5bc986862047fbb0313dc9ddab046199": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void signalHandler(SignalHandler signalHandler)"
                ]
            },
            "017a5ffbb71fdf0d8afb386d1fc9523f03a3993c": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void signalHandler(SignalHandler signalHandler)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "9890c640ead602514d7e517006c429ac20291830",
        "previous_commit": "e9a006a9cd57a01f7e04b6111eb9aee8e071f81c",
        "date": 1704356843,
        "releases": {
            "previous": "9890c640ead602514d7e517006c429ac20291830",
            "next": "9890c640ead602514d7e517006c429ac20291830"
        },
        "commit_message": "Skip license verification in LicenceCheck for JGuard protection.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9890c640ead602514d7e517006c429ac20291830": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class<?> caller)"
                ]
            },
            "e9a006a9cd57a01f7e04b6111eb9aee8e071f81c": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class<?> caller)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "54a8ce44cb21b61447558348d755aa06ca1035c2",
        "previous_commit": "f8f17142d37ab135484eb5a3205c2b2e3b14ab57",
        "date": 1670211005,
        "releases": {
            "previous": "54a8ce44cb21b61447558348d755aa06ca1035c2",
            "next": "54a8ce44cb21b61447558348d755aa06ca1035c2"
        },
        "commit_message": "Return Closeable to allow cancellation of scheduled tasks in Timer, add tests for Timer, make Timer's TimeProvider configurable. Fixes #462.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "54a8ce44cb21b61447558348d755aa06ca1035c2": {
                "src/main/java/net/openhft/chronicle/core/threads/Timer.java": [
                    "public boolean net.openhft.chronicle.core.threads.Timer.action()"
                ]
            },
            "f8f17142d37ab135484eb5a3205c2b2e3b14ab57": {
                "src/main/java/net/openhft/chronicle/core/threads/Timer.java": [
                    "public boolean net.openhft.chronicle.core.threads.Timer.action()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "35c4b941cc9a7858316c0642aef329769452b837",
        "previous_commit": "45228db627462ba0ddd1a876be00a7adb2e8ea23",
        "date": 1589296087,
        "releases": {
            "previous": "35c4b941cc9a7858316c0642aef329769452b837",
            "next": "35c4b941cc9a7858316c0642aef329769452b837"
        },
        "commit_message": "Add tip on failure, Fix #110\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "35c4b941cc9a7858316c0642aef329769452b837": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ]
            },
            "45228db627462ba0ddd1a876be00a7adb2e8ea23": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b95573a5faeb953c4494c6710dfb4cad21db14d5",
        "previous_commit": "335a0509be43337702f9a556f6fb1855ac4660b4",
        "date": 1533847355,
        "releases": {
            "previous": "b95573a5faeb953c4494c6710dfb4cad21db14d5",
            "next": "b95573a5faeb953c4494c6710dfb4cad21db14d5"
        },
        "commit_message": "https://github.com/ChronicleEnterprise/RootPom/issues/65 reduced iterations as this was timing out\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b95573a5faeb953c4494c6710dfb4cad21db14d5": {
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public static double[] net.openhft.chronicle.core.util.Histogram.percentilesFor(long count)"
                ]
            },
            "335a0509be43337702f9a556f6fb1855ac4660b4": {
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public static double[] net.openhft.chronicle.core.util.Histogram.percentilesFor(long count)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "4f90722510544a09c337eda3a99d2431820b06e0",
        "previous_commit": "0ac177e6289cee72f0da785182362f2e14d89c06",
        "date": 1602508661,
        "releases": {
            "previous": "4f90722510544a09c337eda3a99d2431820b06e0",
            "next": "4f90722510544a09c337eda3a99d2431820b06e0"
        },
        "commit_message": "Make releaseLast duplicate message a debug\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "4f90722510544a09c337eda3a99d2431820b06e0": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public synchronized void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanup(T value)"
                ]
            },
            "0ac177e6289cee72f0da785182362f2e14d89c06": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public synchronized void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanup(T value)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "725bfd3907788f524ab60560065586e48f5ca9df",
        "previous_commit": "787813fcb3b9679c64868573c3ab6cdff4f659fc",
        "date": 1504889282,
        "releases": {
            "previous": "725bfd3907788f524ab60560065586e48f5ca9df",
            "next": "725bfd3907788f524ab60560065586e48f5ca9df"
        },
        "commit_message": "Create an interface for read/write access to socket channels\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "725bfd3907788f524ab60560065586e48f5ca9df": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.run()"
                ]
            },
            "787813fcb3b9679c64868573c3ab6cdff4f659fc": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "a5590fae2732314ce12be55db81d26d0b213ac28",
        "previous_commit": "4248ae96c12b09b70c027cdda93130ff5ac4aac2",
        "date": 1503581697,
        "releases": {
            "previous": "a5590fae2732314ce12be55db81d26d0b213ac28",
            "next": "a5590fae2732314ce12be55db81d26d0b213ac28"
        },
        "commit_message": "When a class alias is missing, don't set it to the full class name, just leave it as a default.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a5590fae2732314ce12be55db81d26d0b213ac28": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private String net.openhft.chronicle.core.pool.ClassAliasPool.nameFor0(Class clazz)"
                ]
            },
            "4248ae96c12b09b70c027cdda93130ff5ac4aac2": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private String net.openhft.chronicle.core.pool.ClassAliasPool.nameFor0(Class clazz)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "73cb3dde414659f60d2434d342c49d6a6bdde61c",
        "previous_commit": "cc458e5c9d8fd7b9601221085d19e4f2d7348977",
        "date": 1605271303,
        "releases": {
            "previous": "73cb3dde414659f60d2434d342c49d6a6bdde61c",
            "next": "73cb3dde414659f60d2434d342c49d6a6bdde61c"
        },
        "commit_message": "Fix bug in VanillaAnalytics\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "73cb3dde414659f60d2434d342c49d6a6bdde61c": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/VanillaAnalytics.java": [
                    "public void net.openhft.chronicle.core.internal.analytics.VanillaAnalytics.onFeature(@NotNull final String id, @NotNull final Map<String, String> eventParameters)"
                ]
            },
            "cc458e5c9d8fd7b9601221085d19e4f2d7348977": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/VanillaAnalytics.java": [
                    "public void net.openhft.chronicle.core.internal.analytics.VanillaAnalytics.onFeature(@NotNull final String id, @NotNull final Map<String, String> eventParameters)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "796cee33491d6078b1ab46d9dcf6cf876197d0a7",
        "previous_commit": "f56cfd7a293f57784babc44372f94cce1ee51bfc",
        "date": 1527266145,
        "releases": {
            "previous": "796cee33491d6078b1ab46d9dcf6cf876197d0a7",
            "next": "796cee33491d6078b1ab46d9dcf6cf876197d0a7"
        },
        "commit_message": "fixed https://github.com/OpenHFT/Chronicle-Queue/issues/484\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "796cee33491d6078b1ab46d9dcf6cf876197d0a7": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean hasException(@NotNull Map<ExceptionKey, Integer> exceptions)"
                ]
            },
            "f56cfd7a293f57784babc44372f94cce1ee51bfc": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean hasException(@NotNull Map<ExceptionKey, Integer> exceptions)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "c26551f7bc4f97f16eac7e446c0f571fd35c15cb",
        "previous_commit": "1fb9cc1fe2b718d18f910c2b2cfc44352c797062",
        "date": 1634810080,
        "releases": {
            "previous": "c26551f7bc4f97f16eac7e446c0f571fd35c15cb",
            "next": "c26551f7bc4f97f16eac7e446c0f571fd35c15cb"
        },
        "commit_message": "More histogram data points for longer tests\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c26551f7bc4f97f16eac7e446c0f571fd35c15cb": {
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public static double[] net.openhft.chronicle.core.util.Histogram.percentilesFor(long count)"
                ]
            },
            "1fb9cc1fe2b718d18f910c2b2cfc44352c797062": {
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public static double[] net.openhft.chronicle.core.util.Histogram.percentilesFor(long count)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "386f71be1ddb575c2625c062760a796442ec4318",
        "previous_commit": "f3ad8b397acf506c41b07ed7ba1976e346b43ab5",
        "date": 1685713718,
        "releases": {
            "previous": "386f71be1ddb575c2625c062760a796442ec4318",
            "next": "386f71be1ddb575c2625c062760a796442ec4318"
        },
        "commit_message": "#497 chagned to -   System.err.println(\"Unable to get the major version, defaulting to 8 \" + e.getMessage()); because - see dmitry's comment on this issue. (#511)\n\nCo-authored-by: Rob Austin <rob.austin@boundedbuffer.co.uk>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "386f71be1ddb575c2625c062760a796442ec4318": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "private static int net.openhft.chronicle.core.Bootstrap.getMajorVersion0()"
                ]
            },
            "f3ad8b397acf506c41b07ed7ba1976e346b43ab5": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "private static int net.openhft.chronicle.core.Bootstrap.getMajorVersion0()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "bf268bfe0f919a4e870718519294674233bf3de2",
        "previous_commit": "482f898d9d984df324de7f2cd81ce5a469a878c9",
        "date": 1569831728,
        "releases": {
            "previous": "bf268bfe0f919a4e870718519294674233bf3de2",
            "next": "bf268bfe0f919a4e870718519294674233bf3de2"
        },
        "commit_message": "Avoid a race condition in mapAlignment()\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "bf268bfe0f919a4e870718519294674233bf3de2": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long mapAlignment()"
                ]
            },
            "482f898d9d984df324de7f2cd81ce5a469a878c9": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long mapAlignment()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "80d001e8dd0654851a7903caef3315ad11679a31",
        "previous_commit": "d18065e65c2258809be25943d006b5d14bf61c72",
        "date": 1601905507,
        "releases": {
            "previous": "80d001e8dd0654851a7903caef3315ad11679a31",
            "next": "80d001e8dd0654851a7903caef3315ad11679a31"
        },
        "commit_message": "Added support for DynamicEnumSet and DynamicEnumMap, closes https://github.com/OpenHFT/Chronicle-Core/issues/143\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "80d001e8dd0654851a7903caef3315ad11679a31": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Field getField(@NotNull Class clazz, @NotNull String name)"
                ]
            },
            "d18065e65c2258809be25943d006b5d14bf61c72": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Field getField(@NotNull Class clazz, @NotNull String name)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "54c1b4ec68f1fd4c33316c946d7608de3b4b59f2",
        "previous_commit": "634c59ace631ff7e2ade212ef0701056cd48aa2c",
        "date": 1539788476,
        "releases": {
            "previous": "54c1b4ec68f1fd4c33316c946d7608de3b4b59f2",
            "next": "54c1b4ec68f1fd4c33316c946d7608de3b4b59f2"
        },
        "commit_message": "Fix for OpenHFT/Chronicle-Queue#538\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "54c1b4ec68f1fd4c33316c946d7608de3b4b59f2": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static String newString(@NotNull char[] chars)"
                ]
            },
            "634c59ace631ff7e2ade212ef0701056cd48aa2c": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static String newString(@NotNull char[] chars)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "eb7af5d94244ce09d60f756346df1bc66e3f84c9",
        "previous_commit": "5bbaca13ea2b6fbfe6e2c24bb199fd9eb5bf8bd8",
        "date": 1633519890,
        "releases": {
            "previous": "eb7af5d94244ce09d60f756346df1bc66e3f84c9",
            "next": "eb7af5d94244ce09d60f756346df1bc66e3f84c9"
        },
        "commit_message": "Enable throttling of memory mapping when they are running low on 64-bit systems. #253\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "eb7af5d94244ce09d60f756346df1bc66e3f84c9": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long net.openhft.chronicle.core.OS.map(@NotNull FileChannel fileChannel, FileChannel.MapMode mode, long start, long size)"
                ]
            },
            "5bbaca13ea2b6fbfe6e2c24bb199fd9eb5bf8bd8": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long net.openhft.chronicle.core.OS.map(@NotNull FileChannel fileChannel, FileChannel.MapMode mode, long start, long size)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c9e0beb0b51b36e42c4c6f3fbab1cc13fb8ef33f",
        "previous_commit": "c26551f7bc4f97f16eac7e446c0f571fd35c15cb",
        "date": 1634887216,
        "releases": {
            "previous": "c9e0beb0b51b36e42c4c6f3fbab1cc13fb8ef33f",
            "next": "c9e0beb0b51b36e42c4c6f3fbab1cc13fb8ef33f"
        },
        "commit_message": "Add link to latest releases and patches signup. Fix #256 (#257)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c9e0beb0b51b36e42c4c6f3fbab1cc13fb8ef33f": {
                "src/main/java/net/openhft/chronicle/core/internal/announcer/InternalAnnouncer.java": [
                    "private static void announceJvm()"
                ]
            },
            "c26551f7bc4f97f16eac7e446c0f571fd35c15cb": {
                "src/main/java/net/openhft/chronicle/core/internal/announcer/InternalAnnouncer.java": [
                    "private static void announceJvm()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c8c2d165d15b041a17a165619a19c586a909c9a3",
        "previous_commit": "14d56f22aa70e96271f34c13e3e2c0c0a50a91ef",
        "date": 1588022648,
        "releases": {
            "previous": "c8c2d165d15b041a17a165619a19c586a909c9a3",
            "next": "c8c2d165d15b041a17a165619a19c586a909c9a3"
        },
        "commit_message": "Implement ThreadDump#assertNoNewThreads() overload waiting up for a certain amount of time before emitting the first warning\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c8c2d165d15b041a17a165619a19c586a909c9a3": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads()"
                ]
            },
            "14d56f22aa70e96271f34c13e3e2c0c0a50a91ef": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "4584051843dd82a57fbc3c68999a54788e6c82e3",
        "previous_commit": "66937b350391af048e973c3b5a1ce03a53636ea0",
        "date": 1590658011,
        "releases": {
            "previous": "4584051843dd82a57fbc3c68999a54788e6c82e3",
            "next": "4584051843dd82a57fbc3c68999a54788e6c82e3"
        },
        "commit_message": "Impact handling in Java 11+\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "4584051843dd82a57fbc3c68999a54788e6c82e3": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public Impact net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.impact()"
                ]
            },
            "66937b350391af048e973c3b5a1ce03a53636ea0": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public Impact net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.impact()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d08906837888d8ae017230d498b4dde9ab66d180",
        "previous_commit": "cf263c185c0be06c3387a84fb51a219983c31ca2",
        "date": 1629989408,
        "releases": {
            "previous": "d08906837888d8ae017230d498b4dde9ab66d180",
            "next": "d08906837888d8ae017230d498b4dde9ab66d180"
        },
        "commit_message": "Use a rule instead fo explicit list\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d08906837888d8ae017230d498b4dde9ab66d180": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            },
            "cf263c185c0be06c3387a84fb51a219983c31ca2": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "0ca6d3c026a251690c08ba358c5bf58d0f446170",
        "previous_commit": "929137e30eb2a64aa9655959ff979b19a0c51ad9",
        "date": 1554476925,
        "releases": {
            "previous": "0ca6d3c026a251690c08ba358c5bf58d0f446170",
            "next": "0ca6d3c026a251690c08ba358c5bf58d0f446170"
        },
        "commit_message": "Benchmark module for Chronicle-Bytes\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0ca6d3c026a251690c08ba358c5bf58d0f446170": {
                "src/main/java/net/openhft/chronicle/core/cooler/CpuCoolers.java": [
                    "public static void busyWait(double nanos)"
                ]
            },
            "929137e30eb2a64aa9655959ff979b19a0c51ad9": {
                "src/main/java/net/openhft/chronicle/core/cooler/CpuCoolers.java": [
                    "public static void busyWait(double nanos)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "af831970fed624cc6592d009e0f69ae93ed4099e",
        "previous_commit": "2c5a7962dd6e9c7ea8dcb97abca548649ed29b9a",
        "date": 1512626983,
        "releases": {
            "previous": "af831970fed624cc6592d009e0f69ae93ed4099e",
            "next": "af831970fed624cc6592d009e0f69ae93ed4099e"
        },
        "commit_message": "Support chained signal handlers\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "af831970fed624cc6592d009e0f69ae93ed4099e": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void signalHandler(SignalHandler signalHandler)"
                ]
            },
            "2c5a7962dd6e9c7ea8dcb97abca548649ed29b9a": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void signalHandler(SignalHandler signalHandler)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "72ed2a14ad663dacd04698eb63fa7634fff6870f",
        "previous_commit": "b15ac499cbd9f7f42b911a0aae2014f5599c64e4",
        "date": 1588022491,
        "releases": {
            "previous": "72ed2a14ad663dacd04698eb63fa7634fff6870f",
            "next": "72ed2a14ad663dacd04698eb63fa7634fff6870f"
        },
        "commit_message": "Fix impact of Jdk9ByteBufferCleanerService\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "72ed2a14ad663dacd04698eb63fa7634fff6870f": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/jdk9/Jdk9ByteBufferCleanerService.java": [
                    "public int net.openhft.chronicle.core.cleaner.impl.jdk9.Jdk9ByteBufferCleanerService.impact()"
                ]
            },
            "b15ac499cbd9f7f42b911a0aae2014f5599c64e4": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/jdk9/Jdk9ByteBufferCleanerService.java": [
                    "public int net.openhft.chronicle.core.cleaner.impl.jdk9.Jdk9ByteBufferCleanerService.impact()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "cfead6485701bcde7ba4995f8c73e127fd7f1a09",
        "previous_commit": "2201c47241c0e8e2a6e72f6af4040b90b6110da3",
        "date": 1604253285,
        "releases": {
            "previous": "cfead6485701bcde7ba4995f8c73e127fd7f1a09",
            "next": "cfead6485701bcde7ba4995f8c73e127fd7f1a09"
        },
        "commit_message": "Improve code coverage\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "cfead6485701bcde7ba4995f8c73e127fd7f1a09": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.warnAndReleaseIfNotReleased()"
                ]
            },
            "2201c47241c0e8e2a6e72f6af4040b90b6110da3": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.warnAndReleaseIfNotReleased()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "91a8596e99d9003d98c0c00b8db29e1b729c71f9",
        "previous_commit": "5479db2c82068de7fbac6dcc69ec7578dc797e0f",
        "date": 1508595760,
        "releases": {
            "previous": "91a8596e99d9003d98c0c00b8db29e1b729c71f9",
            "next": "91a8596e99d9003d98c0c00b8db29e1b729c71f9"
        },
        "commit_message": "#43 Add support for setting default signals.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "91a8596e99d9003d98c0c00b8db29e1b729c71f9": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static int getMajorVersion0()"
                ]
            },
            "5479db2c82068de7fbac6dcc69ec7578dc797e0f": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static int getMajorVersion0()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "35e22075df6142e980a73c4ccfd1e49633ecfdc2",
        "previous_commit": "446cad6cd6174e6b41d6f6e94c7f64b106577e64",
        "date": 1651849460,
        "releases": {
            "previous": "35e22075df6142e980a73c4ccfd1e49633ecfdc2",
            "next": "35e22075df6142e980a73c4ccfd1e49633ecfdc2"
        },
        "commit_message": "Fallback when class loader is null\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "35e22075df6142e980a73c4ccfd1e49633ecfdc2": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.ignored(@NotNull Class<T> tClass, Class<?>... additional)"
                ]
            },
            "446cad6cd6174e6b41d6f6e94c7f64b106577e64": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T net.openhft.chronicle.core.Mocker.ignored(@NotNull Class<T> tClass, Class<?>... additional)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "fe314c1404da034944181b4b48302ccd2c564b72",
        "previous_commit": "3b74708aa60f151d5770a2974595c47e85215467",
        "date": 1579480561,
        "releases": {
            "previous": "fe314c1404da034944181b4b48302ccd2c564b72",
            "next": "fe314c1404da034944181b4b48302ccd2c564b72"
        },
        "commit_message": "make MonitorProfileAnalyserMain more forgiving of copy/pasting\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "fe314c1404da034944181b4b48302ccd2c564b72": {
                "src/main/java/net/openhft/chronicle/core/threads/MonitorProfileAnalyserMain.java": [
                    "public static void net.openhft.chronicle.core.threads.MonitorProfileAnalyserMain.main0(String[] args)"
                ]
            },
            "3b74708aa60f151d5770a2974595c47e85215467": {
                "src/main/java/net/openhft/chronicle/core/threads/MonitorProfileAnalyserMain.java": [
                    "public static void net.openhft.chronicle.core.threads.MonitorProfileAnalyserMain.main0(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "81b09adb85343ea3e3d1f5d9bb947ecfe349065d",
        "previous_commit": "ee1d03c68e63cfffa621e11ccd72c6d029707d9e",
        "date": 1691772963,
        "releases": {
            "previous": "81b09adb85343ea3e3d1f5d9bb947ecfe349065d",
            "next": "81b09adb85343ea3e3d1f5d9bb947ecfe349065d"
        },
        "commit_message": "Handle a race condition on closing resources (threads/channels) (#559)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "81b09adb85343ea3e3d1f5d9bb947ecfe349065d": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            },
            "ee1d03c68e63cfffa621e11ccd72c6d029707d9e": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "4983753627e9e6f1beb9e09766008ef08fb32369",
        "previous_commit": "79b201224574516f780a9da33ca9edd1e3e0a824",
        "date": 1659079650,
        "releases": {
            "previous": "4983753627e9e6f1beb9e09766008ef08fb32369",
            "next": "4983753627e9e6f1beb9e09766008ef08fb32369"
        },
        "commit_message": "Until we can tell if a Mac is ARM or not, the conservative option is to treat them all as ARM.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "4983753627e9e6f1beb9e09766008ef08fb32369": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "static boolean net.openhft.chronicle.core.Bootstrap.isMacArm0()"
                ]
            },
            "79b201224574516f780a9da33ca9edd1e3e0a824": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "static boolean net.openhft.chronicle.core.Bootstrap.isMacArm0()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "ae06ad660813d9a0472ab23b3fbfc94aff65f3b6",
        "previous_commit": "48e1c9ba29367b395901b6deac2a8f8680dc470a",
        "date": 1517285119,
        "releases": {
            "previous": "ae06ad660813d9a0472ab23b3fbfc94aff65f3b6",
            "next": "ae06ad660813d9a0472ab23b3fbfc94aff65f3b6"
        },
        "commit_message": "refactor: extract methods prior to allowing call from event loop\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "ae06ad660813d9a0472ab23b3fbfc94aff65f3b6": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.start()"
                ]
            },
            "48e1c9ba29367b395901b6deac2a8f8680dc470a": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.start()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "b42c56681beadd7f7355513f25b8c30b8e35d043",
        "previous_commit": "0bb469bb26f5c91f50848e8eb62c109dcae315ed",
        "date": 1625581166,
        "releases": {
            "previous": "b42c56681beadd7f7355513f25b8c30b8e35d043",
            "next": "b42c56681beadd7f7355513f25b8c30b8e35d043"
        },
        "commit_message": "Add the option to override individual ExceptionHandlers #236\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b42c56681beadd7f7355513f25b8c30b8e35d043": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Map<ExceptionKey, Integer> recordExceptions(final boolean debug, final boolean exceptionsOnly, final boolean logToSlf4j)"
                ]
            },
            "0bb469bb26f5c91f50848e8eb62c109dcae315ed": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Map<ExceptionKey, Integer> recordExceptions(final boolean debug, final boolean exceptionsOnly, final boolean logToSlf4j)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "1049ed3ad0e3b1cd0c6ef1506421c04c675d2752",
        "previous_commit": "e89bcbc4193d3b126fc84b0027498346e0556a27",
        "date": 1642066732,
        "releases": {
            "previous": "1049ed3ad0e3b1cd0c6ef1506421c04c675d2752",
            "next": "1049ed3ad0e3b1cd0c6ef1506421c04c675d2752"
        },
        "commit_message": "Ignore certain threads in ThreadDump::assertNoNewThreads, Fix #339 (#340)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "1049ed3ad0e3b1cd0c6ef1506421c04c675d2752": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            },
            "e89bcbc4193d3b126fc84b0027498346e0556a27": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "3322c7b084cd4fb3b96583c34cceb76e8fb74731",
        "previous_commit": "2d1a2d3567d84893066c757217e8c23077d8b65b",
        "date": 1628521060,
        "releases": {
            "previous": "3322c7b084cd4fb3b96583c34cceb76e8fb74731",
            "next": "3322c7b084cd4fb3b96583c34cceb76e8fb74731"
        },
        "commit_message": "Fix extra trailing zeros in serialized double, https://github.com/OpenHFT/Chronicle-Wire/issues/299\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3322c7b084cd4fb3b96583c34cceb76e8fb74731": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "private static double net.openhft.chronicle.core.io.UnsafeText.asDouble(long value, int exp, boolean negative, int deci)"
                ]
            },
            "2d1a2d3567d84893066c757217e8c23077d8b65b": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "private static double net.openhft.chronicle.core.io.UnsafeText.asDouble(long value, int exp, boolean negative, int deci)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "de0888ca6ef9476bbb4395a08bfe71b99a1e8635",
        "previous_commit": "fc2128f63314bd8607c5e7206416e6411c029fd1",
        "date": 1603107843,
        "releases": {
            "previous": "de0888ca6ef9476bbb4395a08bfe71b99a1e8635",
            "next": "de0888ca6ef9476bbb4395a08bfe71b99a1e8635"
        },
        "commit_message": "Code tidy\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "de0888ca6ef9476bbb4395a08bfe71b99a1e8635": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "private static Supplier supplierForClass(Class<?> c)"
                ]
            },
            "fc2128f63314bd8607c5e7206416e6411c029fd1": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "private static Supplier supplierForClass(Class<?> c)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "86e1efd5cf5ddc5588ab5a96348750dd1ceee121",
        "previous_commit": "12db5996bd7162279d4f04e94b274f2b5e8775ba",
        "date": 1607088116,
        "releases": {
            "previous": "86e1efd5cf5ddc5588ab5a96348750dd1ceee121",
            "next": "86e1efd5cf5ddc5588ab5a96348750dd1ceee121"
        },
        "commit_message": "Invert the chronicle.analytics.enable system property, Fix #161\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "86e1efd5cf5ddc5588ab5a96348750dd1ceee121": {
                "src/main/java/net/openhft/chronicle/core/analytics/AnalyticsFacade.java": [
                    "static Builder builder(@NotNull final String measurementId, @NotNull final String apiSecret)"
                ]
            },
            "12db5996bd7162279d4f04e94b274f2b5e8775ba": {
                "src/main/java/net/openhft/chronicle/core/analytics/AnalyticsFacade.java": [
                    "static Builder builder(@NotNull final String measurementId, @NotNull final String apiSecret)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "9d1e4d07b233ee98071853670b1d4d651a0f283f",
        "previous_commit": "64d772b0fc005e2f5a6741e013252353ad3b4afe",
        "date": 1597860923,
        "releases": {
            "previous": "9d1e4d07b233ee98071853670b1d4d651a0f283f",
            "next": "9d1e4d07b233ee98071853670b1d4d651a0f283f"
        },
        "commit_message": "Speed up currentTimeNanos and make it monotonically increasing.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9d1e4d07b233ee98071853670b1d4d651a0f283f": {
                "src/main/java/net/openhft/chronicle/core/time/SystemTimeProvider.java": [
                    "public long currentTimeNanos()"
                ]
            },
            "64d772b0fc005e2f5a6741e013252353ad3b4afe": {
                "src/main/java/net/openhft/chronicle/core/time/SystemTimeProvider.java": [
                    "public long currentTimeNanos()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "afc468e4373fc4a93d33f40a32421bc5d7fe666c",
        "previous_commit": "080d55a17a73e3849660ded0afc27bccfed86a8b",
        "date": 1629735180,
        "releases": {
            "previous": "afc468e4373fc4a93d33f40a32421bc5d7fe666c",
            "next": "afc468e4373fc4a93d33f40a32421bc5d7fe666c"
        },
        "commit_message": "Standardize how disableThreadSafetyCheck is done for Closeable, https://github.com/OpenHFT/Chronicle-Core/issues/245\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "afc468e4373fc4a93d33f40a32421bc5d7fe666c": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck(boolean isUsed)"
                ]
            },
            "080d55a17a73e3849660ded0afc27bccfed86a8b": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.threadSafetyCheck(boolean isUsed)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b8fabc932b97991f66050496da2adad178e28f94",
        "previous_commit": "8b6056479e6d793f720324c3ac3aca177000e64d",
        "date": 1519592706,
        "releases": {
            "previous": "b8fabc932b97991f66050496da2adad178e28f94",
            "next": "b8fabc932b97991f66050496da2adad178e28f94"
        },
        "commit_message": "Basic doco on jlbh & event loop #49\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b8fabc932b97991f66050496da2adad178e28f94": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public boolean net.openhft.chronicle.core.jlbh.JLBH.action()"
                ]
            },
            "8b6056479e6d793f720324c3ac3aca177000e64d": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public boolean net.openhft.chronicle.core.jlbh.JLBH.action()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "dea6a3affa59fe4e5c35e40552e0729a2c3e1dbe",
        "previous_commit": "1acf3786eeae4970d5007478b1251020d3068a3d",
        "date": 1506504225,
        "releases": {
            "previous": "dea6a3affa59fe4e5c35e40552e0729a2c3e1dbe",
            "next": "dea6a3affa59fe4e5c35e40552e0729a2c3e1dbe"
        },
        "commit_message": "#40 Improve the random id fall back.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "dea6a3affa59fe4e5c35e40552e0729a2c3e1dbe": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static int getProcessId0()"
                ]
            },
            "1acf3786eeae4970d5007478b1251020d3068a3d": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static int getProcessId0()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "7460218b133825db5b6c776c6f4111998b295654",
        "previous_commit": "0da62e1a0b8fd4d6de1c54125cd4996fc4a6989c",
        "date": 1675685812,
        "releases": {
            "previous": "7460218b133825db5b6c776c6f4111998b295654",
            "next": "7460218b133825db5b6c776c6f4111998b295654"
        },
        "commit_message": "Make ExceptionKey.toString() testable\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7460218b133825db5b6c776c6f4111998b295654": {
                "src/main/java/net/openhft/chronicle/core/onoes/ExceptionKey.java": [
                    "public String net.openhft.chronicle.core.onoes.ExceptionKey.toString()"
                ]
            },
            "0da62e1a0b8fd4d6de1c54125cd4996fc4a6989c": {
                "src/main/java/net/openhft/chronicle/core/onoes/ExceptionKey.java": [
                    "public String net.openhft.chronicle.core.onoes.ExceptionKey.toString()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "0669f126482e822744cda8f3ce5393cb03206099",
        "previous_commit": "fbf22a7ee89a534cffd3c8d164c111966ba783b1",
        "date": 1566926199,
        "releases": {
            "previous": "0669f126482e822744cda8f3ce5393cb03206099",
            "next": "0669f126482e822744cda8f3ce5393cb03206099"
        },
        "commit_message": "fixed java doc\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0669f126482e822744cda8f3ce5393cb03206099": {
                "src/main/java/net/openhft/chronicle/core/util/Time.java": [
                    "public static void sleep(long time, TimeUnit timeUnit)"
                ]
            },
            "fbf22a7ee89a534cffd3c8d164c111966ba783b1": {
                "src/main/java/net/openhft/chronicle/core/util/Time.java": [
                    "public static void sleep(long count, TimeUnit timeUnit)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c6ce10f0336018e134d74041ad7824e18d9a78f2",
        "previous_commit": "528e7971b28d3a9230341b32f352857508292536",
        "date": 1510738816,
        "releases": {
            "previous": "c6ce10f0336018e134d74041ad7824e18d9a78f2",
            "next": "c6ce10f0336018e134d74041ad7824e18d9a78f2"
        },
        "commit_message": "Optimise use of StringBuilderPool\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c6ce10f0336018e134d74041ad7824e18d9a78f2": {
                "src/main/java/net/openhft/chronicle/core/pool/StringBuilderPool.java": [
                    "public StringBuilder net.openhft.chronicle.core.pool.StringBuilderPool.acquireStringBuilder()"
                ]
            },
            "528e7971b28d3a9230341b32f352857508292536": {
                "src/main/java/net/openhft/chronicle/core/pool/StringBuilderPool.java": [
                    "public StringBuilder net.openhft.chronicle.core.pool.StringBuilderPool.acquireStringBuilder()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "d116ea643a137bcf6ac8c0239c226266e3b79a3c",
        "previous_commit": "9e48b03d97188d23b3f6f35b80a41217b7ff74b6",
        "date": 1580358370,
        "releases": {
            "previous": "d116ea643a137bcf6ac8c0239c226266e3b79a3c",
            "next": "d116ea643a137bcf6ac8c0239c226266e3b79a3c"
        },
        "commit_message": "fix -Dst.ignore\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d116ea643a137bcf6ac8c0239c226266e3b79a3c": {
                "src/main/java/net/openhft/chronicle/core/threads/MonitorProfileAnalyserMain.java": [
                    "public static void net.openhft.chronicle.core.threads.MonitorProfileAnalyserMain.main(String[] args)"
                ]
            },
            "9e48b03d97188d23b3f6f35b80a41217b7ff74b6": {
                "src/main/java/net/openhft/chronicle/core/threads/MonitorProfileAnalyserMain.java": [
                    "public static void net.openhft.chronicle.core.threads.MonitorProfileAnalyserMain.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "792ea43e26ae2e57d83b9c31562ac0ae9f727df0",
        "previous_commit": "96f0ad71ee443817e909fa2f211c416f533ad18d",
        "date": 1658907057,
        "releases": {
            "previous": "792ea43e26ae2e57d83b9c31562ac0ae9f727df0",
            "next": "792ea43e26ae2e57d83b9c31562ac0ae9f727df0"
        },
        "commit_message": "singleThreadedCheckReset() if disabled to remove references.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "792ea43e26ae2e57d83b9c31562ac0ae9f727df0": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.singleThreadedCheckDisabled(boolean singleThreadedCheckDisabled)"
                ]
            },
            "96f0ad71ee443817e909fa2f211c416f533ad18d": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public void net.openhft.chronicle.core.io.AbstractCloseable.singleThreadedCheckDisabled(boolean singleThreadedCheckDisabled)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "4af458376f3c5941ccb5d66ce462f1cea573b6d9",
        "previous_commit": "e4660d84fa535f23ed902e40af4c89d6aa14e579",
        "date": 1574129973,
        "releases": {
            "previous": "4af458376f3c5941ccb5d66ce462f1cea573b6d9",
            "next": "4af458376f3c5941ccb5d66ce462f1cea573b6d9"
        },
        "commit_message": "don't record exceptions if they are StackTrace\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "4af458376f3c5941ccb5d66ce462f1cea573b6d9": {
                "src/main/java/net/openhft/chronicle/core/onoes/RecordingExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.RecordingExceptionHandler.on(Class clazz, String message, Throwable thrown)"
                ]
            },
            "e4660d84fa535f23ed902e40af4c89d6aa14e579": {
                "src/main/java/net/openhft/chronicle/core/onoes/RecordingExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.RecordingExceptionHandler.on(Class clazz, String message, Throwable thrown)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "ea49a2ea60d054f10356ebf04f930954d073ed05",
        "previous_commit": "444d6c4808be08cd520b662b44f9cabcc862391d",
        "date": 1552301509,
        "releases": {
            "previous": "ea49a2ea60d054f10356ebf04f930954d073ed05",
            "next": "ea49a2ea60d054f10356ebf04f930954d073ed05"
        },
        "commit_message": "Added support for testing cool CPUs, https://github.com/OpenHFT/Chronicle-Core/issues/83\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "ea49a2ea60d054f10356ebf04f930954d073ed05": {
                "src/main/java/net/openhft/chronicle/core/cooler/CoolerTester.java": [
                    "public void net.openhft.chronicle.core.cooler.CoolerTester.run()"
                ]
            },
            "444d6c4808be08cd520b662b44f9cabcc862391d": {
                "src/main/java/net/openhft/chronicle/core/cooler/CoolerTester.java": [
                    "public void net.openhft.chronicle.core.cooler.CoolerTester.run()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "cf304fcf171b444799bd2281c55859cc388860b9",
        "previous_commit": "0389352174635a5ef2a62222e39be18d6c4de943",
        "date": 1597861777,
        "releases": {
            "previous": "cf304fcf171b444799bd2281c55859cc388860b9",
            "next": "cf304fcf171b444799bd2281c55859cc388860b9"
        },
        "commit_message": "do full time calibration on Windows\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "cf304fcf171b444799bd2281c55859cc388860b9": {
                "src/main/java/net/openhft/chronicle/core/time/SystemTimeProvider.java": [
                    "protected long currentTimeNanos1()"
                ]
            },
            "0389352174635a5ef2a62222e39be18d6c4de943": {
                "src/main/java/net/openhft/chronicle/core/time/SystemTimeProvider.java": [
                    "protected long currentTimeNanos1()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e9c3f5122e39a47ede49323b18e680bd14761453",
        "previous_commit": "7948bc41913a1b5c40eb5b4006489c22395c629c",
        "date": 1603120726,
        "releases": {
            "previous": "e9c3f5122e39a47ede49323b18e680bd14761453",
            "next": "e9c3f5122e39a47ede49323b18e680bd14761453"
        },
        "commit_message": "Improved unmonitoring for nested objects i.e. objects contains objects which should also be unmonitored.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e9c3f5122e39a47ede49323b18e680bd14761453": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "private static <T> void unmonitor(Class aClass, Object t, int depth)"
                ]
            },
            "7948bc41913a1b5c40eb5b4006489c22395c629c": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "private static <T> void unmonitor(Class aClass, Object t, int depth)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "fc8bc49e9c4c5e224e71ebe52a3d6eff2fa96c09",
        "previous_commit": "e5e176c4fca08d4c723acdb083159d45e5a54133",
        "date": 1592564591,
        "releases": {
            "previous": "fc8bc49e9c4c5e224e71ebe52a3d6eff2fa96c09",
            "next": "fc8bc49e9c4c5e224e71ebe52a3d6eff2fa96c09"
        },
        "commit_message": "Tidy up resources in CQE\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "fc8bc49e9c4c5e224e71ebe52a3d6eff2fa96c09": {
                "src/main/java/net/openhft/chronicle/core/StackTrace.java": [
                    "public static StackTrace net.openhft.chronicle.core.StackTrace.forThread(Thread t)"
                ]
            },
            "e5e176c4fca08d4c723acdb083159d45e5a54133": {
                "src/main/java/net/openhft/chronicle/core/StackTrace.java": [
                    "public static StackTrace net.openhft.chronicle.core.StackTrace.forThread(Thread t)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "a62f3b0af60dd429be8247ada9cec8358bc954cf",
        "previous_commit": "544a37852a9fe5005cb337bee3264d4930add635",
        "date": 1591269470,
        "releases": {
            "previous": "a62f3b0af60dd429be8247ada9cec8358bc954cf",
            "next": "a62f3b0af60dd429be8247ada9cec8358bc954cf"
        },
        "commit_message": "Add stack trace of running threads\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a62f3b0af60dd429be8247ada9cec8358bc954cf": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            },
            "544a37852a9fe5005cb337bee3264d4930add635": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "a4fdc4acdb642732f0e2b541e29f4ebab726d1ef",
        "previous_commit": "a566b7e016a081d2ef3e4cdfb88a02496a0e69d2",
        "date": 1600188360,
        "releases": {
            "previous": "a4fdc4acdb642732f0e2b541e29f4ebab726d1ef",
            "next": "a4fdc4acdb642732f0e2b541e29f4ebab726d1ef"
        },
        "commit_message": "Shutdown a replication test more cleanly.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a4fdc4acdb642732f0e2b541e29f4ebab726d1ef": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)"
                ]
            },
            "a566b7e016a081d2ef3e4cdfb88a02496a0e69d2": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "671034325ba01399034ea6361a6577f95a26dfc3",
        "previous_commit": "258ddeb9070bf2c4c15045a98f55846133542b82",
        "date": 1698742004,
        "releases": {
            "previous": "671034325ba01399034ea6361a6577f95a26dfc3",
            "next": "671034325ba01399034ea6361a6577f95a26dfc3"
        },
        "commit_message": "Add a safepoint for Java 8 that compiles in Java 21 (#587)\n\n* Add a safepoint for Java 8 that compiles in Java 21\r\n\r\n* Safepoint.force() now works in Java 8",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "671034325ba01399034ea6361a6577f95a26dfc3": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static MethodHandle net.openhft.chronicle.core.Jvm.getOnSpinWait()"
                ]
            },
            "258ddeb9070bf2c4c15045a98f55846133542b82": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static MethodHandle net.openhft.chronicle.core.Jvm.getOnSpinWait()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "967179d7ffdcd1c22790dfe5971a31ef34f5870e",
        "previous_commit": "9e53fc087b879f4dc9384c594577276fda9881cf",
        "date": 1632414670,
        "releases": {
            "previous": "967179d7ffdcd1c22790dfe5971a31ef34f5870e",
            "next": "967179d7ffdcd1c22790dfe5971a31ef34f5870e"
        },
        "commit_message": "Add gcAndWaitForCloseablesToClose #250\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "967179d7ffdcd1c22790dfe5971a31ef34f5870e": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanupNonCleaningThreads()"
                ]
            },
            "9e53fc087b879f4dc9384c594577276fda9881cf": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanupNonCleaningThreads()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "96a13458332e2c1b494ed9e221b4ddcf63dcbd30",
        "previous_commit": "8e899917e03edb6029f6c191dd7501b7fefd2f37",
        "date": 1625494579,
        "releases": {
            "previous": "96a13458332e2c1b494ed9e221b4ddcf63dcbd30",
            "next": "96a13458332e2c1b494ed9e221b4ddcf63dcbd30"
        },
        "commit_message": "Improve test coverage of combinations of access to Unsafe.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "96a13458332e2c1b494ed9e221b4ddcf63dcbd30": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public <T> T net.openhft.chronicle.core.UnsafeMemory.getObject(@NotNull Object object, long offset)"
                ]
            },
            "8e899917e03edb6029f6c191dd7501b7fefd2f37": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public <T> T net.openhft.chronicle.core.UnsafeMemory.getObject(Object object, long offset)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8d17cafd7e7cf2fe2ad954d8082d395506b231e5",
        "previous_commit": "08c495af328adfe05a42abadbd6a20a26d5c089e",
        "date": 1525936864,
        "releases": {
            "previous": "8d17cafd7e7cf2fe2ad954d8082d395506b231e5",
            "next": "8d17cafd7e7cf2fe2ad954d8082d395506b231e5"
        },
        "commit_message": "closed #58 Added isFalse to isTrue to support detecting when neither.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8d17cafd7e7cf2fe2ad954d8082d395506b231e5": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static boolean isTrue(CharSequence s)"
                ]
            },
            "08c495af328adfe05a42abadbd6a20a26d5c089e": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static boolean isTrue(CharSequence s)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "32ad5a8cfb516146a334d6e25e019c03cbe1655d",
        "previous_commit": "386f71be1ddb575c2625c062760a796442ec4318",
        "date": 1685714466,
        "releases": {
            "previous": "32ad5a8cfb516146a334d6e25e019c03cbe1655d",
            "next": "32ad5a8cfb516146a334d6e25e019c03cbe1655d"
        },
        "commit_message": "Issue 497 (#522)\n\n* #497 chagned to -   System.err.println(\"Unable to get the major version, defaulting to 8 \" + e.getMessage()); because - see dmitry's comment on this issue.\r\n\r\n* Update Bootstrap.java\r\n\r\nchanged e.getMessage() to e\r\n\r\n---------\r\n\r\nCo-authored-by: Rob Austin <rob.austin@boundedbuffer.co.uk>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "32ad5a8cfb516146a334d6e25e019c03cbe1655d": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "private static int net.openhft.chronicle.core.Bootstrap.getMajorVersion0()"
                ]
            },
            "386f71be1ddb575c2625c062760a796442ec4318": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "private static int net.openhft.chronicle.core.Bootstrap.getMajorVersion0()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "149cda9bf9473cf83f60079996aa532071abcdd8",
        "previous_commit": "d53e4622d98032fde53500829f5ab25f57705d21",
        "date": 1520602468,
        "releases": {
            "previous": "149cda9bf9473cf83f60079996aa532071abcdd8",
            "next": "149cda9bf9473cf83f60079996aa532071abcdd8"
        },
        "commit_message": "closed #50 Just use sleep\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "149cda9bf9473cf83f60079996aa532071abcdd8": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void pause(long millis)"
                ]
            },
            "d53e4622d98032fde53500829f5ab25f57705d21": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void pause(long millis)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "9e48b03d97188d23b3f6f35b80a41217b7ff74b6",
        "previous_commit": "dc79cbd13b0446d0a0d66ec4efe06586a403da85",
        "date": 1580307879,
        "releases": {
            "previous": "9e48b03d97188d23b3f6f35b80a41217b7ff74b6",
            "next": "9e48b03d97188d23b3f6f35b80a41217b7ff74b6"
        },
        "commit_message": "simplified testcases\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9e48b03d97188d23b3f6f35b80a41217b7ff74b6": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class caller)"
                ]
            },
            "dc79cbd13b0446d0a0d66ec4efe06586a403da85": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class caller)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "737371337492c203e0dd69f3cb29876f282eb038",
        "previous_commit": "b9cc45a126220e7073008ddf5a254b13c5d480e0",
        "date": 1522863693,
        "releases": {
            "previous": "737371337492c203e0dd69f3cb29876f282eb038",
            "next": "737371337492c203e0dd69f3cb29876f282eb038"
        },
        "commit_message": "fixes #53\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "737371337492c203e0dd69f3cb29876f282eb038": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static ExceptionHandler recordingExceptionHandler(LogLevel logLevel, Map<ExceptionKey, Integer> map, boolean exceptionsOnly, boolean logToSlf4j)"
                ]
            },
            "b9cc45a126220e7073008ddf5a254b13c5d480e0": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static ExceptionHandler recordingExceptionHandler(LogLevel logLevel, Map<ExceptionKey, Integer> map, boolean exceptionsOnly, boolean logToSlf4j)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "5bbaca13ea2b6fbfe6e2c24bb199fd9eb5bf8bd8",
        "previous_commit": "8408b78049f386abacdca3bce83607afb080d820",
        "date": 1633519571,
        "releases": {
            "previous": "5bbaca13ea2b6fbfe6e2c24bb199fd9eb5bf8bd8",
            "next": "5bbaca13ea2b6fbfe6e2c24bb199fd9eb5bf8bd8"
        },
        "commit_message": "Enable throttling of memory mapping when they are running low on 64-bit systems. #253\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5bbaca13ea2b6fbfe6e2c24bb199fd9eb5bf8bd8": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long net.openhft.chronicle.core.OS.map(@NotNull FileChannel fileChannel, FileChannel.MapMode mode, long start, long size)"
                ]
            },
            "8408b78049f386abacdca3bce83607afb080d820": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long net.openhft.chronicle.core.OS.map(@NotNull FileChannel fileChannel, FileChannel.MapMode mode, long start, long size)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "0d99f7a43727f9ee7118c15d4f01aacb4be763e8",
        "previous_commit": "30fec8790fc7c70de5f32b79edb989a7ff2686f4",
        "date": 1503412042,
        "releases": {
            "previous": "0d99f7a43727f9ee7118c15d4f01aacb4be763e8",
            "next": "0d99f7a43727f9ee7118c15d4f01aacb4be763e8"
        },
        "commit_message": "Add support for nano-second timings.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0d99f7a43727f9ee7118c15d4f01aacb4be763e8": {
                "src/main/java/net/openhft/chronicle/core/time/SystemTimeProvider.java": [
                    "public long currentTimeMicros()"
                ]
            },
            "30fec8790fc7c70de5f32b79edb989a7ff2686f4": {
                "src/main/java/net/openhft/chronicle/core/time/SystemTimeProvider.java": [
                    "public long currentTimeMicros()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "aa2b4376b4914a6d3d30d2e20d0f6add31b0f2a5",
        "previous_commit": "45f5eb4347aa3854151354f4c11b8b1879c52c58",
        "date": 1592385032,
        "releases": {
            "previous": "aa2b4376b4914a6d3d30d2e20d0f6add31b0f2a5",
            "next": "aa2b4376b4914a6d3d30d2e20d0f6add31b0f2a5"
        },
        "commit_message": "Use Jvm.getBoolean for more consistent parsing of system property flags.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "aa2b4376b4914a6d3d30d2e20d0f6add31b0f2a5": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean getBoolean(String property, boolean defaultValue)"
                ]
            },
            "45f5eb4347aa3854151354f4c11b8b1879c52c58": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean getBoolean(String property, boolean defaultValue)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "3bdb38d71a032c521bc846feaf0b9bdfa5e73c15",
        "previous_commit": "180498314bf905c380bd6e3aaabf15b80cdef5a0",
        "date": 1590651418,
        "releases": {
            "previous": "3bdb38d71a032c521bc846feaf0b9bdfa5e73c15",
            "next": "3bdb38d71a032c521bc846feaf0b9bdfa5e73c15"
        },
        "commit_message": "Impact handling in Java 11+\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3bdb38d71a032c521bc846feaf0b9bdfa5e73c15": {
                "src/main/java/net/openhft/chronicle/core/cleaner/CleanerServiceLocator.java": [
                    "public static synchronized ByteBufferCleanerService net.openhft.chronicle.core.cleaner.CleanerServiceLocator.cleanerService()"
                ]
            },
            "180498314bf905c380bd6e3aaabf15b80cdef5a0": {
                "src/main/java/net/openhft/chronicle/core/cleaner/CleanerServiceLocator.java": [
                    "public static synchronized ByteBufferCleanerService net.openhft.chronicle.core.cleaner.CleanerServiceLocator.cleanerService()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "0effd46c5c64f4e9e09cc10fc1f8ecc0eef11f9d",
        "previous_commit": "a9e8273ffefc18656645c989559bb171168bd341",
        "date": 1647527879,
        "releases": {
            "previous": "0effd46c5c64f4e9e09cc10fc1f8ecc0eef11f9d",
            "next": "0effd46c5c64f4e9e09cc10fc1f8ecc0eef11f9d"
        },
        "commit_message": "When resource tracing is off, if a MappedBytes has toString() called on it, the MappedBytes might not be released deterministically #359\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0effd46c5c64f4e9e09cc10fc1f8ecc0eef11f9d": {
                "src/main/java/net/openhft/chronicle/core/io/ReferenceOwner.java": [
                    "static ReferenceOwner temporary(String name)"
                ]
            },
            "a9e8273ffefc18656645c989559bb171168bd341": {
                "src/main/java/net/openhft/chronicle/core/io/ReferenceOwner.java": [
                    "static ReferenceOwner temporary(String name)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "40df6d92d27b59153e7e4f0594435e85f2eb1fad",
        "previous_commit": "9b2c4f4680e25da22cb5f568cbb3b310048dfbf7",
        "date": 1604064718,
        "releases": {
            "previous": "40df6d92d27b59153e7e4f0594435e85f2eb1fad",
            "next": "40df6d92d27b59153e7e4f0594435e85f2eb1fad"
        },
        "commit_message": "Ensure all resources are cleaned up even if one throws an Throwable.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "40df6d92d27b59153e7e4f0594435e85f2eb1fad": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)"
                ]
            },
            "9b2c4f4680e25da22cb5f568cbb3b310048dfbf7": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "21deb351345ab4bee8cbf7d08ba90fca91aa2a26",
        "previous_commit": "fff1bf1e8125fc7b6c9f47dc68476808e6bf7b1f",
        "date": 1623930500,
        "releases": {
            "previous": "21deb351345ab4bee8cbf7d08ba90fca91aa2a26",
            "next": "21deb351345ab4bee8cbf7d08ba90fca91aa2a26"
        },
        "commit_message": "Move SignalHandler code to core, https://github.com/OpenHFT/Chronicle-Core/issues/230\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "21deb351345ab4bee8cbf7d08ba90fca91aa2a26": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void addSignalHandler(final SignalHandler signalHandler)"
                ]
            },
            "fff1bf1e8125fc7b6c9f47dc68476808e6bf7b1f": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void signalHandler(final SignalHandler signalHandler)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "280ec3f414afb628baaf62145ea421190f219f41",
        "previous_commit": "0efe3750fc01d52b383a2d376a16114cc115673c",
        "date": 1525776150,
        "releases": {
            "previous": "280ec3f414afb628baaf62145ea421190f219f41",
            "next": "280ec3f414afb628baaf62145ea421190f219f41"
        },
        "commit_message": "Fix the build.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "280ec3f414afb628baaf62145ea421190f219f41": {
                "src/main/java/net/openhft/chronicle/core/jlbh/ImmutableRunResult.java": [
                    "private static Map<Percentile, Duration> net.openhft.chronicle.core.jlbh.ImmutableRunResult.asMap(double[] percentiles)"
                ]
            },
            "0efe3750fc01d52b383a2d376a16114cc115673c": {
                "src/main/java/net/openhft/chronicle/core/jlbh/ImmutableRunResult.java": [
                    "private static Map<Percentile, Duration> net.openhft.chronicle.core.jlbh.ImmutableRunResult.asMap(double[] percentiles)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "58e53658f5f15bacf5827766b7e3d43c1aefd40a",
        "previous_commit": "539688cf05c6940faf21de7fe44a5ae894e694e2",
        "date": 1683919129,
        "releases": {
            "previous": "58e53658f5f15bacf5827766b7e3d43c1aefd40a",
            "next": "58e53658f5f15bacf5827766b7e3d43c1aefd40a"
        },
        "commit_message": "No internal (#510)\n\n* Disable creating JVM internal classes\r\n\r\n* Disable creating JVM internal classes",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "58e53658f5f15bacf5827766b7e3d43c1aefd40a": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "private static Supplier<?> net.openhft.chronicle.core.util.ObjectUtils.supplierForClass(Class<?> c)"
                ]
            },
            "539688cf05c6940faf21de7fe44a5ae894e694e2": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "private static Supplier<?> net.openhft.chronicle.core.util.ObjectUtils.supplierForClass(Class<?> c)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "08a2f2bef8b15d6ba93cdd82c620c37535cb36b5",
        "previous_commit": "ff2a62a55cd9c128bf4af1527442912bc5018fb4",
        "date": 1718113333,
        "releases": {
            "previous": "08a2f2bef8b15d6ba93cdd82c620c37535cb36b5",
            "next": "08a2f2bef8b15d6ba93cdd82c620c37535cb36b5"
        },
        "commit_message": "Use an optimised Class.getPackageName() in Java 9+ Fixes #662 (#663)\n\n* Use an optimised Class.getPackageName() in Java 9+ Fixes #662\r\n\r\n* Add a helper method to use Class.getPackageName() , Fixes https://github.com/OpenHFT/Chronicle-Core/issues/662",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "08a2f2bef8b15d6ba93cdd82c620c37535cb36b5": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "protected static boolean net.openhft.chronicle.core.pool.ClassAliasPool.testPackage(String pkgName, Class<?> clazz)"
                ]
            },
            "ff2a62a55cd9c128bf4af1527442912bc5018fb4": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "protected static boolean net.openhft.chronicle.core.pool.ClassAliasPool.testPackage(String pkgName, Class<?> clazz)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "134b5a270dd567d152208dcbedee2d37973afd6e",
        "previous_commit": "21fca3ca8631dab3a22abbb3e6cf820be5872f9f",
        "date": 1503662075,
        "releases": {
            "previous": "134b5a270dd567d152208dcbedee2d37973afd6e",
            "next": "134b5a270dd567d152208dcbedee2d37973afd6e"
        },
        "commit_message": "Fix a bug where the type prefix is empty.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "134b5a270dd567d152208dcbedee2d37973afd6e": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private String net.openhft.chronicle.core.pool.ClassAliasPool.nameFor0(Class clazz)"
                ]
            },
            "21fca3ca8631dab3a22abbb3e6cf820be5872f9f": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private String net.openhft.chronicle.core.pool.ClassAliasPool.nameFor0(Class clazz)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "21581998fbbff8197806390663d10b9eb08ef188",
        "previous_commit": "aa0ee014d90ab51e307035d8c5c3997e44114ac2",
        "date": 1684439528,
        "releases": {
            "previous": "21581998fbbff8197806390663d10b9eb08ef188",
            "next": "21581998fbbff8197806390663d10b9eb08ef188"
        },
        "commit_message": "Expose whether validations is enabled (#512)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "21581998fbbff8197806390663d10b9eb08ef188": {
                "src/main/java/net/openhft/chronicle/core/io/ValidatableUtil.java": [
                    "public static <T> T net.openhft.chronicle.core.io.ValidatableUtil.validate(T t)"
                ]
            },
            "aa0ee014d90ab51e307035d8c5c3997e44114ac2": {
                "src/main/java/net/openhft/chronicle/core/io/ValidatableUtil.java": [
                    "public static <T> T net.openhft.chronicle.core.io.ValidatableUtil.validate(T t)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "60860ee8da0a35b47c6b9ca0c4c2a88aebe81c3f",
        "previous_commit": "b3ba7f020117a03b28cf4b819dc70ca45aee7970",
        "date": 1586257940,
        "releases": {
            "previous": "60860ee8da0a35b47c6b9ca0c4c2a88aebe81c3f",
            "next": "60860ee8da0a35b47c6b9ca0c4c2a88aebe81c3f"
        },
        "commit_message": "fixed https://github.com/OpenHFT/Chronicle-Wire/issues/103\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "60860ee8da0a35b47c6b9ca0c4c2a88aebe81c3f": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private ClassAliasPool net.openhft.chronicle.core.pool.ClassAliasPool.defaultAliases()"
                ]
            },
            "b3ba7f020117a03b28cf4b819dc70ca45aee7970": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private ClassAliasPool net.openhft.chronicle.core.pool.ClassAliasPool.defaultAliases()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2d7add07da8b76b74c73ebc658c7938d91dbab9d",
        "previous_commit": "d5e62024e24fc556c2e02007f040405546167293",
        "date": 1655310092,
        "releases": {
            "previous": "2d7add07da8b76b74c73ebc658c7938d91dbab9d",
            "next": "2d7add07da8b76b74c73ebc658c7938d91dbab9d"
        },
        "commit_message": "Added SingleThreadedChecked to make resetting and disabling this check more consistent, https://github.com/OpenHFT/Chronicle-Core/issues/409\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2d7add07da8b76b74c73ebc658c7938d91dbab9d": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "static <E> E net.openhft.chronicle.core.util.ObjectUtils.convertTo0(Class<E> eClass, @Nullable Object o)"
                ]
            },
            "d5e62024e24fc556c2e02007f040405546167293": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "static <E> E net.openhft.chronicle.core.util.ObjectUtils.convertTo0(Class<E> eClass, @Nullable Object o)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "cc779e9fcdc67674703876771d36d75b2819f198",
        "previous_commit": "dcd98ede3dd56b00841fc69df0f43eb6065aa3de",
        "date": 1586544355,
        "releases": {
            "previous": "cc779e9fcdc67674703876771d36d75b2819f198",
            "next": "cc779e9fcdc67674703876771d36d75b2819f198"
        },
        "commit_message": "Initial JDK 14 support\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "cc779e9fcdc67674703876771d36d75b2819f198": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static long invokeFileChannelMap0(@NotNull MethodHandle map0, @NotNull FileChannel fileChannel, int imode, long start, long size, @NotNull ThrowingFunction<OutOfMemoryError, Long, IOException> errorHandler)"
                ]
            },
            "dcd98ede3dd56b00841fc69df0f43eb6065aa3de": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static long invokeFileChannelMap0(@NotNull MethodHandle map0, @NotNull FileChannel fileChannel, int imode, long start, long size, @NotNull ThrowingFunction<OutOfMemoryError, Long, IOException> errorHandler)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "156730b23b669607b066ecdb5e8aea7ee972e979",
        "previous_commit": "ec76feafb710c387279b20d4cf19f73424d07cfe",
        "date": 1592491217,
        "releases": {
            "previous": "156730b23b669607b066ecdb5e8aea7ee972e979",
            "next": "156730b23b669607b066ecdb5e8aea7ee972e979"
        },
        "commit_message": "Ensure cleanup on loopFinished\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "156730b23b669607b066ecdb5e8aea7ee972e979": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.assertReferencesReleased()"
                ]
            },
            "ec76feafb710c387279b20d4cf19f73424d07cfe": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractReferenceCounted.assertReferencesReleased()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "341e38393d7c81dcc0e14e15e7cc9d07d686f36d",
        "previous_commit": "95d8e471c2447f1cec3a57f1564dae37f1c80005",
        "date": 1684495159,
        "releases": {
            "previous": "341e38393d7c81dcc0e14e15e7cc9d07d686f36d",
            "next": "341e38393d7c81dcc0e14e15e7cc9d07d686f36d"
        },
        "commit_message": "Be more friendly to concurrent closing of a collection (#514)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "341e38393d7c81dcc0e14e15e7cc9d07d686f36d": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            },
            "95d8e471c2447f1cec3a57f1564dae37f1c80005": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2016c5c068488ccbeffdbe7512a1767ae003c993",
        "previous_commit": "32ad5a8cfb516146a334d6e25e019c03cbe1655d",
        "date": 1686224446,
        "releases": {
            "previous": "2016c5c068488ccbeffdbe7512a1767ae003c993",
            "next": "2016c5c068488ccbeffdbe7512a1767ae003c993"
        },
        "commit_message": "Silently drop an IOException that occurs when a ServerSocketChannel is closed twice. (#526)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2016c5c068488ccbeffdbe7512a1767ae003c993": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            },
            "32ad5a8cfb516146a334d6e25e019c03cbe1655d": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2f36f7122c4d75608b7df236a12774bef3d0d788",
        "previous_commit": "a8ceb4201184361b8ed48ea42c219930d6666aa7",
        "date": 1507633682,
        "releases": {
            "previous": "2f36f7122c4d75608b7df236a12774bef3d0d788",
            "next": "2f36f7122c4d75608b7df236a12774bef3d0d788"
        },
        "commit_message": "Get correct MAX_DIRECT_MEMORY value in Java 9\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2f36f7122c4d75608b7df236a12774bef3d0d788": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static long maxDirectMemory0()"
                ]
            },
            "a8ceb4201184361b8ed48ea42c219930d6666aa7": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static long maxDirectMemory0()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "f59abe928a9c98a7f97e30e3d51cbc948db3dfff",
        "previous_commit": "aff60254e2ea4c505f917fa97bf731aa18478498",
        "date": 1605775299,
        "releases": {
            "previous": "f59abe928a9c98a7f97e30e3d51cbc948db3dfff",
            "next": "f59abe928a9c98a7f97e30e3d51cbc948db3dfff"
        },
        "commit_message": "standardBuilder with max 4 messages per hour\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f59abe928a9c98a7f97e30e3d51cbc948db3dfff": {
                "src/main/java/net/openhft/chronicle/core/analytics/AnalyticsFacade.java": [
                    "static Builder standardBuilder(@NotNull final String measurementId, @NotNull final String apiSecret, @NotNull final String appVersion)"
                ]
            },
            "aff60254e2ea4c505f917fa97bf731aa18478498": {
                "src/main/java/net/openhft/chronicle/core/analytics/AnalyticsFacade.java": [
                    "static Builder standardBuilder(@NotNull final String measurementId, @NotNull final String apiSecret, @NotNull final String appVersion)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "539688cf05c6940faf21de7fe44a5ae894e694e2",
        "previous_commit": "a2629b7bdf71f2db4259bc423c3ceaa1796446ac",
        "date": 1683645706,
        "releases": {
            "previous": "539688cf05c6940faf21de7fe44a5ae894e694e2",
            "next": "539688cf05c6940faf21de7fe44a5ae894e694e2"
        },
        "commit_message": "fix bug when asking for supplier for class for an interface\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "539688cf05c6940faf21de7fe44a5ae894e694e2": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "private static Supplier<?> net.openhft.chronicle.core.util.ObjectUtils.supplierForClass(Class<?> c)"
                ]
            },
            "a2629b7bdf71f2db4259bc423c3ceaa1796446ac": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "private static Supplier<?> net.openhft.chronicle.core.util.ObjectUtils.supplierForClass(Class<?> c)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "605cb7ec0524c4de5fc4715a36773b64316a14c0",
        "previous_commit": "96ace1c6d3ccb1380ec14944e71062b6b9608b6c",
        "date": 1608120217,
        "releases": {
            "previous": "605cb7ec0524c4de5fc4715a36773b64316a14c0",
            "next": "605cb7ec0524c4de5fc4715a36773b64316a14c0"
        },
        "commit_message": "changed this to an info ->    LOGGER.info(\"Unable to find suitable cleaner service, falling back to using reflection\");\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "605cb7ec0524c4de5fc4715a36773b64316a14c0": {
                "src/main/java/net/openhft/chronicle/core/cleaner/CleanerServiceLocator.java": [
                    "public static synchronized ByteBufferCleanerService net.openhft.chronicle.core.cleaner.CleanerServiceLocator.cleanerService()"
                ]
            },
            "96ace1c6d3ccb1380ec14944e71062b6b9608b6c": {
                "src/main/java/net/openhft/chronicle/core/cleaner/CleanerServiceLocator.java": [
                    "public static synchronized ByteBufferCleanerService net.openhft.chronicle.core.cleaner.CleanerServiceLocator.cleanerService()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "42ef027d5b37aa044ae67a15ce182bccb905caaf",
        "previous_commit": "1514305f2ff59b151282f54c1f07b5d4ee483715",
        "date": 1553025104,
        "releases": {
            "previous": "42ef027d5b37aa044ae67a15ce182bccb905caaf",
            "next": "42ef027d5b37aa044ae67a15ce182bccb905caaf"
        },
        "commit_message": "changed ClOrdId to a long\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "42ef027d5b37aa044ae67a15ce182bccb905caaf": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static long parseLong(CharSequence s, int radix)"
                ]
            },
            "1514305f2ff59b151282f54c1f07b5d4ee483715": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static int parseInt(CharSequence s, int radix)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "461c0006d9f59b78b28c75ce3bde961d8c18bad5",
        "previous_commit": "9bd6de740d879e65117c93dbaac296f049d8c5ef",
        "date": 1566642625,
        "releases": {
            "previous": "461c0006d9f59b78b28c75ce3bde961d8c18bad5",
            "next": "461c0006d9f59b78b28c75ce3bde961d8c18bad5"
        },
        "commit_message": "Added support for dynamic discovery of files, https://github.com/OpenHFT/Chronicle-Core/issues/88\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "461c0006d9f59b78b28c75ce3bde961d8c18bad5": {
                "src/main/java/net/openhft/chronicle/core/watcher/FileSystemWatcher.java": [
                    "void net.openhft.chronicle.core.watcher.FileSystemWatcher.run()"
                ]
            },
            "9bd6de740d879e65117c93dbaac296f049d8c5ef": {
                "src/main/java/net/openhft/chronicle/core/watcher/FileSystemWatcher.java": [
                    "void net.openhft.chronicle.core.watcher.FileSystemWatcher.run()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "92cfb475c605778bd6c24ccbcf9d22e274d3bed4",
        "previous_commit": "7d54516dec0823a869c4c91378dc93bb6f620a3b",
        "date": 1592216270,
        "releases": {
            "previous": "92cfb475c605778bd6c24ccbcf9d22e274d3bed4",
            "next": "92cfb475c605778bd6c24ccbcf9d22e274d3bed4"
        },
        "commit_message": "Change WireStore to be Closeable only to simplify the life cycle, https://github.com/OpenHFT/Chronicle-Queue/issues/685\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "92cfb475c605778bd6c24ccbcf9d22e274d3bed4": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfNotReleased()"
                ]
            },
            "7d54516dec0823a869c4c91378dc93bb6f620a3b": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfNotReleased()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8180166e89d5b5d5050e5e41b5488f4961ec2e9e",
        "previous_commit": "bfff6934437565504086270b470cb6e9203baaa9",
        "date": 1576510301,
        "releases": {
            "previous": "8180166e89d5b5d5050e5e41b5488f4961ec2e9e",
            "next": "8180166e89d5b5d5050e5e41b5488f4961ec2e9e"
        },
        "commit_message": "Added support for chained method reader/writers, https://github.com/OpenHFT/Chronicle-Wire/issues/152\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8180166e89d5b5d5050e5e41b5488f4961ec2e9e": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "private static <T> void addInterface(Set<Class> classes, Class<T> tClass)"
                ]
            },
            "bfff6934437565504086270b470cb6e9203baaa9": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "private static <T> void addInterface(Set<Class> classes, Class<T> tClass)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "641e60c8a5cc562c216b3ba2ae4d68de0954f759",
        "previous_commit": "d9de31bfbe99f256f1408d0c094c4709f57461fd",
        "date": 1649856253,
        "releases": {
            "previous": "641e60c8a5cc562c216b3ba2ae4d68de0954f759",
            "next": "641e60c8a5cc562c216b3ba2ae4d68de0954f759"
        },
        "commit_message": "Add a ThreadConfinementAsserter that is always enabled, Fix  #381 (#382)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "641e60c8a5cc562c216b3ba2ae4d68de0954f759": {
                "src/main/java/net/openhft/chronicle/core/internal/util/ThreadConfinementLifecycle.java": [
                    "public static ThreadConfinementAsserter net.openhft.chronicle.core.internal.util.ThreadConfinementLifecycle.create()"
                ]
            },
            "d9de31bfbe99f256f1408d0c094c4709f57461fd": {
                "src/main/java/net/openhft/chronicle/core/internal/util/ThreadConfinementLifecycle.java": [
                    "public static ThreadConfinementAsserter net.openhft.chronicle.core.internal.util.ThreadConfinementLifecycle.create()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "fd6c7f96c29e06932f639ee3b091364c36b51413",
        "previous_commit": "f7183709f442f1f2af72b74cad77e998a88bb919",
        "date": 1591103116,
        "releases": {
            "previous": "fd6c7f96c29e06932f639ee3b091364c36b51413",
            "next": "fd6c7f96c29e06932f639ee3b091364c36b51413"
        },
        "commit_message": "Make more resource trace whether they were closed properly or not, https://github.com/OpenHFT/Chronicle-Core/issues/116\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "fd6c7f96c29e06932f639ee3b091364c36b51413": {
                "src/main/java/net/openhft/chronicle/core/io/SimpleCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.SimpleCloseable.performClose()"
                ]
            },
            "f7183709f442f1f2af72b74cad77e998a88bb919": {
                "src/main/java/net/openhft/chronicle/core/io/SimpleCloseable.java": []
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "3a375b7a25731cd8dfe2b9f8aa9d3181009bf796",
        "previous_commit": "9d6afbfed093b7b25d0d8ed4a8865d4b5fa02730",
        "date": 1659016452,
        "releases": {
            "previous": "3a375b7a25731cd8dfe2b9f8aa9d3181009bf796",
            "next": "3a375b7a25731cd8dfe2b9f8aa9d3181009bf796"
        },
        "commit_message": "Only log the threads once\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3a375b7a25731cd8dfe2b9f8aa9d3181009bf796": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            },
            "9d6afbfed093b7b25d0d8ed4a8865d4b5fa02730": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "6f238d6ac04b80ab610001ae43b0e419d148ed1c",
        "previous_commit": "41030ebf205e7da2830462e6756ee40683c17928",
        "date": 1632149052,
        "releases": {
            "previous": "6f238d6ac04b80ab610001ae43b0e419d148ed1c",
            "next": "6f238d6ac04b80ab610001ae43b0e419d148ed1c"
        },
        "commit_message": "Improve behaviour for a resource closing the in background, https://github.com/OpenHFT/Chronicle-Core/issues/249\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "6f238d6ac04b80ab610001ae43b0e419d148ed1c": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static void net.openhft.chronicle.core.OS.unmap(long address, long size)"
                ]
            },
            "41030ebf205e7da2830462e6756ee40683c17928": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static void net.openhft.chronicle.core.OS.unmap(long address, long size)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b5448b2912f855df909135e1184fd275318590cf",
        "previous_commit": "16afe6b0b1b84ae177f68c52fdeeac21eaa04a2d",
        "date": 1605112984,
        "releases": {
            "previous": "b5448b2912f855df909135e1184fd275318590cf",
            "next": "b5448b2912f855df909135e1184fd275318590cf"
        },
        "commit_message": "Change user properties\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b5448b2912f855df909135e1184fd275318590cf": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/google/GoogleAnalytics.java": [
                    "private Map<String, Object> net.openhft.chronicle.core.internal.analytics.google.GoogleAnalytics.userProperties()"
                ]
            },
            "16afe6b0b1b84ae177f68c52fdeeac21eaa04a2d": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/google/GoogleAnalytics.java": [
                    "private Map<String, Object> net.openhft.chronicle.core.internal.analytics.google.GoogleAnalytics.userProperties()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "279d883300bbcd44a835ce2d1e5dc9e0ce92a8da",
        "previous_commit": "54f892d257daac69268950ada8f3b8cda5134374",
        "date": 1608022085,
        "releases": {
            "previous": "279d883300bbcd44a835ce2d1e5dc9e0ce92a8da",
            "next": "279d883300bbcd44a835ce2d1e5dc9e0ce92a8da"
        },
        "commit_message": "Add AnalyticsFacade::isEnabled, Fix #167\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "279d883300bbcd44a835ce2d1e5dc9e0ce92a8da": {
                "src/main/java/net/openhft/chronicle/core/analytics/AnalyticsFacade.java": [
                    "static Builder builder(@NotNull final String measurementId, @NotNull final String apiSecret)"
                ]
            },
            "54f892d257daac69268950ada8f3b8cda5134374": {
                "src/main/java/net/openhft/chronicle/core/analytics/AnalyticsFacade.java": [
                    "static Builder builder(@NotNull final String measurementId, @NotNull final String apiSecret)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "a2629b7bdf71f2db4259bc423c3ceaa1796446ac",
        "previous_commit": "e364e7e17d7d90fb0767160f0a1248e31e63d047",
        "date": 1683645691,
        "releases": {
            "previous": "a2629b7bdf71f2db4259bc423c3ceaa1796446ac",
            "next": "a2629b7bdf71f2db4259bc423c3ceaa1796446ac"
        },
        "commit_message": "fix log level mapping for PERF\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a2629b7bdf71f2db4259bc423c3ceaa1796446ac": {
                "src/main/java/net/openhft/chronicle/core/onoes/Slf4jExceptionHandler.java": [
                    "public static Slf4jExceptionHandler valueOf(LogLevel logLevel)"
                ]
            },
            "e364e7e17d7d90fb0767160f0a1248e31e63d047": {
                "src/main/java/net/openhft/chronicle/core/onoes/Slf4jExceptionHandler.java": [
                    "public static Slf4jExceptionHandler valueOf(LogLevel logLevel)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "4442a2c169f60d16e483168dc8d4f384fb9c87bc",
        "previous_commit": "abfb9de432353af887880b0ffe4c1c8415ccdf5d",
        "date": 1712909791,
        "releases": {
            "previous": "4442a2c169f60d16e483168dc8d4f384fb9c87bc",
            "next": "4442a2c169f60d16e483168dc8d4f384fb9c87bc"
        },
        "commit_message": "Optimise for longer copies with some loop unrolling. Improves Java 21 perf. (#643)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "4442a2c169f60d16e483168dc8d4f384fb9c87bc": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "private void net.openhft.chronicle.core.UnsafeMemory.copyMemoryLoop(Object src, long srcOffset, Object dest, long destOffset, int length)"
                ]
            },
            "abfb9de432353af887880b0ffe4c1c8415ccdf5d": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "private void net.openhft.chronicle.core.UnsafeMemory.copyMemoryLoop(Object src, long srcOffset, Object dest, long destOffset, int length)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "a0914f8c8fa8f0574940493945a088003b4d84af",
        "previous_commit": "ec2c003aff6a79d0ecee27c2b484f11572eb2466",
        "date": 1601643013,
        "releases": {
            "previous": "a0914f8c8fa8f0574940493945a088003b4d84af",
            "next": "a0914f8c8fa8f0574940493945a088003b4d84af"
        },
        "commit_message": "Added support for DynamicEnumSet and DynamicEnumMap, https://github.com/OpenHFT/Chronicle-Core/issues/143\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a0914f8c8fa8f0574940493945a088003b4d84af": {
                "src/main/java/net/openhft/chronicle/core/pool/EnumCache.java": [
                    "protected static long net.openhft.chronicle.core.pool.EnumCache<E>.guessInitialSize(Class<? extends Enum> eClass)"
                ]
            },
            "ec2c003aff6a79d0ecee27c2b484f11572eb2466": {
                "src/main/java/net/openhft/chronicle/core/pool/EnumCache.java": [
                    "protected static int net.openhft.chronicle.core.pool.EnumCache<E>.guessInitialSize(Class<? extends Enum> eClass)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "88f0d71a886d248db7b39be2ef14d4cbec168910",
        "previous_commit": "ebac982aa139a39fba80c6671f6aee57a52e91c2",
        "date": 1590998843,
        "releases": {
            "previous": "88f0d71a886d248db7b39be2ef14d4cbec168910",
            "next": "88f0d71a886d248db7b39be2ef14d4cbec168910"
        },
        "commit_message": "Fix a race condition when a weak reference returns null.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "88f0d71a886d248db7b39be2ef14d4cbec168910": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ]
            },
            "ebac982aa139a39fba80c6671f6aee57a52e91c2": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c29f28fe99684d12289fd72c299b7cd56fb76acd",
        "previous_commit": "f1e82deea91cf4e5e7164dc47c2625fd244eb8b0",
        "date": 1645099605,
        "releases": {
            "previous": "c29f28fe99684d12289fd72c299b7cd56fb76acd",
            "next": "c29f28fe99684d12289fd72c299b7cd56fb76acd"
        },
        "commit_message": "Bump core, bytes, wire\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c29f28fe99684d12289fd72c299b7cd56fb76acd": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static String net.openhft.chronicle.core.OS.findTmp()"
                ]
            },
            "f1e82deea91cf4e5e7164dc47c2625fd244eb8b0": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static String net.openhft.chronicle.core.OS.findTmp()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e04fb4cab7a2476a4cdf19310665386eae6817ab",
        "previous_commit": "7c1af91fcb6e79ae3689fc4c27ce9166a1fe8677",
        "date": 1507733497,
        "releases": {
            "previous": "e04fb4cab7a2476a4cdf19310665386eae6817ab",
            "next": "e04fb4cab7a2476a4cdf19310665386eae6817ab"
        },
        "commit_message": "#42 SetTimeProvider should support setting time in micros and nanos and advancing time.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e04fb4cab7a2476a4cdf19310665386eae6817ab": {
                "src/main/java/net/openhft/chronicle/core/time/SetTimeProvider.java": [
                    "public long net.openhft.chronicle.core.time.SetTimeProvider.currentTimeMillis()"
                ]
            },
            "7c1af91fcb6e79ae3689fc4c27ce9166a1fe8677": {
                "src/main/java/net/openhft/chronicle/core/time/SetTimeProvider.java": [
                    "public long net.openhft.chronicle.core.time.SetTimeProvider.currentTimeMillis()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "df446c471e817f1c3a70bed020601b774245d8bd",
        "previous_commit": "b4951794d4a46210bbfaf2d596b4978a402ed75a",
        "date": 1675263258,
        "releases": {
            "previous": "df446c471e817f1c3a70bed020601b774245d8bd",
            "next": "df446c471e817f1c3a70bed020601b774245d8bd"
        },
        "commit_message": "Don't use the simpleName ad a class alias if the name has been given.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "df446c471e817f1c3a70bed020601b774245d8bd": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.addAlias(Class<?> clazz, @NotNull String names)"
                ]
            },
            "b4951794d4a46210bbfaf2d596b4978a402ed75a": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public void net.openhft.chronicle.core.pool.ClassAliasPool.addAlias(Class<?> clazz, @NotNull String names)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2e78dfe28b29ed3981e492bad146c09d16b869b9",
        "previous_commit": "2119922debabb3b2240c75b4bad7facf1e1fc550",
        "date": 1602154546,
        "releases": {
            "previous": "2e78dfe28b29ed3981e492bad146c09d16b869b9",
            "next": "2e78dfe28b29ed3981e492bad146c09d16b869b9"
        },
        "commit_message": "Added support for DynamicEnumSet and DynamicEnumMap, closes https://github.com/OpenHFT/Chronicle-Core/issues/143\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2e78dfe28b29ed3981e492bad146c09d16b869b9": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadLocalProperties.java": [
                    "public static void net.openhft.chronicle.core.threads.ThreadLocalProperties.forSystemProperties()"
                ]
            },
            "2119922debabb3b2240c75b4bad7facf1e1fc550": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadLocalProperties.java": [
                    "public static void net.openhft.chronicle.core.threads.ThreadLocalProperties.forSystemProperties()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "45f5eb4347aa3854151354f4c11b8b1879c52c58",
        "previous_commit": "42526185a239293b9058539e77f3eb84260bf211",
        "date": 1592384619,
        "releases": {
            "previous": "45f5eb4347aa3854151354f4c11b8b1879c52c58",
            "next": "45f5eb4347aa3854151354f4c11b8b1879c52c58"
        },
        "commit_message": "Use Jvm.getBoolean for more consistent parsing of system property flags.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "45f5eb4347aa3854151354f4c11b8b1879c52c58": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean getBoolean(String property, boolean defaultValue)"
                ]
            },
            "42526185a239293b9058539e77f3eb84260bf211": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean getBoolean(String property, boolean defaultValue)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "28208f5ca8d70221bea1d148104a7a316384991c",
        "previous_commit": "aa79f280378e466499574e34d219f831aa423a8e",
        "date": 1655395898,
        "releases": {
            "previous": "28208f5ca8d70221bea1d148104a7a316384991c",
            "next": "28208f5ca8d70221bea1d148104a7a316384991c"
        },
        "commit_message": "Only produce the report once every 30 minutes\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "28208f5ca8d70221bea1d148104a7a316384991c": {
                "src/main/java/net/openhft/chronicle/core/PerformanceTuning.java": [
                    "public static List<String> net.openhft.chronicle.core.PerformanceTuning.issues()"
                ]
            },
            "aa79f280378e466499574e34d219f831aa423a8e": {
                "src/main/java/net/openhft/chronicle/core/PerformanceTuning.java": [
                    "public static List<String> net.openhft.chronicle.core.PerformanceTuning.issues()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f255116170e1eeb6de9e340fb369f2e2d7d6626a",
        "previous_commit": "c59559d2e3c290ef34bd8f4c5d05570b9a770734",
        "date": 1592407923,
        "releases": {
            "previous": "f255116170e1eeb6de9e340fb369f2e2d7d6626a",
            "next": "f255116170e1eeb6de9e340fb369f2e2d7d6626a"
        },
        "commit_message": "Change the default Bytes.from to be on heap to avoid having to remember to release it. No point having an inconvenient convenience method.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f255116170e1eeb6de9e340fb369f2e2d7d6626a": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public ThrowingFunction<String, Object, Exception> net.openhft.chronicle.core.util.ConversionFunction.apply(@NotNull Class<?> c)"
                ]
            },
            "c59559d2e3c290ef34bd8f4c5d05570b9a770734": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public ThrowingFunction<String, Object, Exception> net.openhft.chronicle.core.util.ConversionFunction.apply(@NotNull Class<?> c)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8408b78049f386abacdca3bce83607afb080d820",
        "previous_commit": "06ddbee8d8414cb8cc75a7165c3d750fdf622580",
        "date": 1633512141,
        "releases": {
            "previous": "8408b78049f386abacdca3bce83607afb080d820",
            "next": "8408b78049f386abacdca3bce83607afb080d820"
        },
        "commit_message": "Enable throttling of memory mapping when they are running low on 64-bit systems. #253\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8408b78049f386abacdca3bce83607afb080d820": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long net.openhft.chronicle.core.OS.map(@NotNull FileChannel fileChannel, FileChannel.MapMode mode, long start, long size)"
                ]
            },
            "06ddbee8d8414cb8cc75a7165c3d750fdf622580": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long net.openhft.chronicle.core.OS.map(@NotNull FileChannel fileChannel, FileChannel.MapMode mode, long start, long size)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "624723c7f9f4a1124578d4dc24f843d8bb2cc212",
        "previous_commit": "f647b472ecc2a68a94c4edf6f3ddadfa099ea1cc",
        "date": 1649780869,
        "releases": {
            "previous": "624723c7f9f4a1124578d4dc24f843d8bb2cc212",
            "next": "624723c7f9f4a1124578d4dc24f843d8bb2cc212"
        },
        "commit_message": "Wget (#379)\n\n* fixed #376 added wget\r\n\r\n* corrected typo\r\n\r\n* changed to static\r\n\r\nCo-authored-by: Rob Austin <rob.austin@boundedbuffer.co.uk>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "624723c7f9f4a1124578d4dc24f843d8bb2cc212": {
                "src/main/java/net/openhft/chronicle/core/io/Wget.java": [
                    "public static CharSequence net.openhft.chronicle.core.io.Wget.url(String url)"
                ]
            },
            "f647b472ecc2a68a94c4edf6f3ddadfa099ea1cc": {
                "src/main/java/net/openhft/chronicle/core/io/Wget.java": [
                    "public static CharSequence net.openhft.chronicle.core.io.Wget.url(String url)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e900bc3a2c90c887cf9e4f5d9bac2dd65562d4a0",
        "previous_commit": "12f85c1cfece9587ae7a8535aa0c088dbc87b3ee",
        "date": 1597910323,
        "releases": {
            "previous": "e900bc3a2c90c887cf9e4f5d9bac2dd65562d4a0",
            "next": "e900bc3a2c90c887cf9e4f5d9bac2dd65562d4a0"
        },
        "commit_message": "Monotonically increasing however the top 59 bits are unique. This is so the number can be shifted by 5 and still be unique.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e900bc3a2c90c887cf9e4f5d9bac2dd65562d4a0": {
                "src/main/java/net/openhft/chronicle/core/time/SystemTimeProvider.java": [
                    "public long currentTimeNanos()"
                ]
            },
            "12f85c1cfece9587ae7a8535aa0c088dbc87b3ee": {
                "src/main/java/net/openhft/chronicle/core/time/SystemTimeProvider.java": [
                    "public long currentTimeNanos()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c7aa28099ed4cb724f4ff0317c14871e7f81e5c9",
        "previous_commit": "9d9a46de1524ffb1e4510bffae07f419cb3d0f74",
        "date": 1656517293,
        "releases": {
            "previous": "c7aa28099ed4cb724f4ff0317c14871e7f81e5c9",
            "next": "c7aa28099ed4cb724f4ff0317c14871e7f81e5c9"
        },
        "commit_message": "Handle erase(TypeVariable)\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c7aa28099ed4cb724f4ff0317c14871e7f81e5c9": {
                "src/main/java/net/openhft/chronicle/core/util/GenericReflection.java": [
                    "public static Class<?> erase(Type type)"
                ]
            },
            "9d9a46de1524ffb1e4510bffae07f419cb3d0f74": {
                "src/main/java/net/openhft/chronicle/core/util/GenericReflection.java": [
                    "public static Class<?> erase(Type type)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "bb48028e8fed2ed8a65cc4cf6520d02468d6f637",
        "previous_commit": "fc2be576aa5f6481a307c673f6c2c66635f98d26",
        "date": 1689587902,
        "releases": {
            "previous": "bb48028e8fed2ed8a65cc4cf6520d02468d6f637",
            "next": "bb48028e8fed2ed8a65cc4cf6520d02468d6f637"
        },
        "commit_message": "Multiple GC attempts to make Zing happy\n\ncloses #549\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "bb48028e8fed2ed8a65cc4cf6520d02468d6f637": {
                "src/main/java/net/openhft/chronicle/core/internal/CloseableUtils.java": [
                    "public static void net.openhft.chronicle.core.internal.CloseableUtils.gcAndWaitForCloseablesToClose()"
                ]
            },
            "fc2be576aa5f6481a307c673f6c2c66635f98d26": {
                "src/main/java/net/openhft/chronicle/core/internal/CloseableUtils.java": [
                    "public static void net.openhft.chronicle.core.internal.CloseableUtils.gcAndWaitForCloseablesToClose()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "14d56f22aa70e96271f34c13e3e2c0c0a50a91ef",
        "previous_commit": "d6723ec8e5897d0d81b092b2b7686de904dbd313",
        "date": 1588022574,
        "releases": {
            "previous": "14d56f22aa70e96271f34c13e3e2c0c0a50a91ef",
            "next": "14d56f22aa70e96271f34c13e3e2c0c0a50a91ef"
        },
        "commit_message": "Improve Jvm.setAccessible() on Java 12+\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "14d56f22aa70e96271f34c13e3e2c0c0a50a91ef": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void setAccessible(AccessibleObject h)"
                ]
            },
            "d6723ec8e5897d0d81b092b2b7686de904dbd313": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void setAccessible(AccessibleObject h)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "204f5c4154fe8f2e45e1c7d56113d35ac4b8464a",
        "previous_commit": "1840ffea4054bd39329fa59138ee7605c98e83b3",
        "date": 1526580341,
        "releases": {
            "previous": "204f5c4154fe8f2e45e1c7d56113d35ac4b8464a",
            "next": "204f5c4154fe8f2e45e1c7d56113d35ac4b8464a"
        },
        "commit_message": "Added Jvm.safepoint() and Jvm.optionalSafepoint() to Pauser.pause() implementations, closes #17\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "204f5c4154fe8f2e45e1c7d56113d35ac4b8464a": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void optionalSafepoint()"
                ]
            },
            "1840ffea4054bd39329fa59138ee7605c98e83b3": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void optionalSafepoint()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "80ab8af7484e46790c712a7d333e5aa568ae1adb",
        "previous_commit": "7d6029a0a2a0c695fedafc76deafe267eb2e867a",
        "date": 1607511091,
        "releases": {
            "previous": "80ab8af7484e46790c712a7d333e5aa568ae1adb",
            "next": "80ab8af7484e46790c712a7d333e5aa568ae1adb"
        },
        "commit_message": "Use PERF output for a performance message\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "80ab8af7484e46790c712a7d333e5aa568ae1adb": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "void net.openhft.chronicle.core.io.AbstractReferenceCounted.inThreadPerformRelease()"
                ]
            },
            "7d6029a0a2a0c695fedafc76deafe267eb2e867a": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "void net.openhft.chronicle.core.io.AbstractReferenceCounted.inThreadPerformRelease()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "16e5b6228f34604756a79522a4db83df20b67c89",
        "previous_commit": "76ec1b9627cc67a360b5c5ee7f692d4a57096e63",
        "date": 1504094551,
        "releases": {
            "previous": "16e5b6228f34604756a79522a4db83df20b67c89",
            "next": "16e5b6228f34604756a79522a4db83df20b67c89"
        },
        "commit_message": "fix StringUtils.extractChars for StringBuilder on pre-jdk9 runtimes\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "16e5b6228f34604756a79522a4db83df20b67c89": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static char[] extractChars(StringBuilder sb)"
                ]
            },
            "76ec1b9627cc67a360b5c5ee7f692d4a57096e63": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static char[] extractChars(StringBuilder sb)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "54f892d257daac69268950ada8f3b8cda5134374",
        "previous_commit": "6fb07a45ca6f44dbf460b42774c7c9a374a9be9c",
        "date": 1607971427,
        "releases": {
            "previous": "54f892d257daac69268950ada8f3b8cda5134374",
            "next": "54f892d257daac69268950ada8f3b8cda5134374"
        },
        "commit_message": "Throw FileNotFoundException if not found.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "54f892d257daac69268950ada8f3b8cda5134374": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static URL urlFor(ClassLoader classLoader, String name)"
                ]
            },
            "6fb07a45ca6f44dbf460b42774c7c9a374a9be9c": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static URL urlFor(ClassLoader classLoader, String name)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "20a749d116c5c51c6f7706f25255b7220f7c1d12",
        "previous_commit": "efeb4000bf121d4789c0bcce36114ae66cb32f3e",
        "date": 1680109251,
        "releases": {
            "previous": "20a749d116c5c51c6f7706f25255b7220f7c1d12",
            "next": "20a749d116c5c51c6f7706f25255b7220f7c1d12"
        },
        "commit_message": "#497 no catch's NPE as well (#498)\n\nCo-authored-by: Rob Austin <rob.austin@boundedbuffer.co.uk>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "20a749d116c5c51c6f7706f25255b7220f7c1d12": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "private static int net.openhft.chronicle.core.Bootstrap.getMajorVersion0()"
                ]
            },
            "efeb4000bf121d4789c0bcce36114ae66cb32f3e": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "private static int net.openhft.chronicle.core.Bootstrap.getMajorVersion0()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "fbe3d22a225554866c452ef32806dc07d7b84539",
        "previous_commit": "753f4c89c7f9add4814b34d7c51a416b77150f75",
        "date": 1687535405,
        "releases": {
            "previous": "fbe3d22a225554866c452ef32806dc07d7b84539",
            "next": "fbe3d22a225554866c452ef32806dc07d7b84539"
        },
        "commit_message": "OS.mapAlign is not working correctly when offset is not already aligned. (#518)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "fbe3d22a225554866c452ef32806dc07d7b84539": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long net.openhft.chronicle.core.OS.mapAlign(long offset)"
                ]
            },
            "753f4c89c7f9add4814b34d7c51a416b77150f75": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long net.openhft.chronicle.core.OS.mapAlign(long offset)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e944792845cde8c649fd568795b8e219a43a6985",
        "previous_commit": "2e3ecd4945ecfeac32a38bf8466bc6b67c9e29d8",
        "date": 1532436280,
        "releases": {
            "previous": "e944792845cde8c649fd568795b8e219a43a6985",
            "next": "e944792845cde8c649fd568795b8e219a43a6985"
        },
        "commit_message": "fixed https://github.com/OpenHFT/Chronicle-Wire/issues/82\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e944792845cde8c649fd568795b8e219a43a6985": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private ClassAliasPool net.openhft.chronicle.core.pool.ClassAliasPool.defaultAliases()"
                ]
            },
            "2e3ecd4945ecfeac32a38bf8466bc6b67c9e29d8": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private ClassAliasPool net.openhft.chronicle.core.pool.ClassAliasPool.defaultAliases()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "c9d831fb3b1b9303d1f8ace3cc80d900319821e6",
        "previous_commit": "9e4887c3f9e84ebf2c2f91c4f9b79fe42b56644a",
        "date": 1593169671,
        "releases": {
            "previous": "c9d831fb3b1b9303d1f8ace3cc80d900319821e6",
            "next": "c9d831fb3b1b9303d1f8ace3cc80d900319821e6"
        },
        "commit_message": "fixed stack trace of Suppressed\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c9d831fb3b1b9303d1f8ace3cc80d900319821e6": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ]
            },
            "9e4887c3f9e84ebf2c2f91c4f9b79fe42b56644a": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "a3112a688ce9798d39f69bb31e0ac57ad8fb18cc",
        "previous_commit": "5e3ded487bf1b5fe54de4e706cf923487e62ff06",
        "date": 1709217662,
        "releases": {
            "previous": "a3112a688ce9798d39f69bb31e0ac57ad8fb18cc",
            "next": "a3112a688ce9798d39f69bb31e0ac57ad8fb18cc"
        },
        "commit_message": "ClassAliasPool.forName inefficent on Java 9+ #629 (#630)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a3112a688ce9798d39f69bb31e0ac57ad8fb18cc": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public boolean net.openhft.chronicle.core.pool.ClassAliasPool.equals(Object obj)"
                ]
            },
            "5e3ded487bf1b5fe54de4e706cf923487e62ff06": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public boolean net.openhft.chronicle.core.pool.ClassAliasPool.equals(Object obj)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d876d9e3e6125f6b26e2e5f1c5a0717beac4c1f2",
        "previous_commit": "a039ddd4101207748785e3cdb63520cf033fb40a",
        "date": 1611855949,
        "releases": {
            "previous": "d876d9e3e6125f6b26e2e5f1c5a0717beac4c1f2",
            "next": "d876d9e3e6125f6b26e2e5f1c5a0717beac4c1f2"
        },
        "commit_message": "Improve Azul Zing support https://github.com/OpenHFT/OpenHFT/issues/47\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d876d9e3e6125f6b26e2e5f1c5a0717beac4c1f2": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static int objectHeaderSize()"
                ]
            },
            "a039ddd4101207748785e3cdb63520cf033fb40a": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static int objectHeaderSize()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "73511872fe38ede9f52cde3a583dd76d54e8c972",
        "previous_commit": "d2f9a29f8e25c7d690f2953fe1c8fd1df78715a8",
        "date": 1512939607,
        "releases": {
            "previous": "73511872fe38ede9f52cde3a583dd76d54e8c972",
            "next": "73511872fe38ede9f52cde3a583dd76d54e8c972"
        },
        "commit_message": "[Issue #45] Add JLBH result API to be used in xUnit style of testing.\n\nThis commit allows anyone to use JLBH in their xUnit tests.\nIt is now possible to continuously monitor if latencies stays within expected range\nas a part of the CI process.\nObvioulsy the performance type of testing should be done on the production-like system with production-like data.\nJLBH backed JUnit tests can form another, performance-oriented group, next to already existing unit and integration tests.\n\nOnly interfaces are public to make further package maintanance easier\n\nFeatures:\n\n- Read src/main/java/net/openhft/chronicle/core/jlbh/README.adoc#using-jlbh-as-part-of-automated-performanceperformance-regression-testing\n- Provides end to end percentile latencies breakdown for each run\n- Provides additional probes percentile latencies breakdown for each run\n\nExamples:\n\n- See src/test/java/net/openhft/chronicle/core/jlbh/JLBHTest.java#L44 (test shouldProvideResultData())\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "73511872fe38ede9f52cde3a583dd76d54e8c972": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.start()"
                ]
            },
            "d2f9a29f8e25c7d690f2953fe1c8fd1df78715a8": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.start()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "53072bed32616637952c2a90d8a0b598e4d08fe0",
        "previous_commit": "668e2b2b7192d8c62f05b2a40f31ee8b5b24a167",
        "date": 1605807769,
        "releases": {
            "previous": "53072bed32616637952c2a90d8a0b598e4d08fe0",
            "next": "53072bed32616637952c2a90d8a0b598e4d08fe0"
        },
        "commit_message": "Add system property chronicle.analytics.enable\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "53072bed32616637952c2a90d8a0b598e4d08fe0": {
                "src/main/java/net/openhft/chronicle/core/analytics/AnalyticsFacade.java": [
                    "static Builder builder(@NotNull final String measurementId, @NotNull final String apiSecret)"
                ]
            },
            "668e2b2b7192d8c62f05b2a40f31ee8b5b24a167": {
                "src/main/java/net/openhft/chronicle/core/analytics/AnalyticsFacade.java": [
                    "static Builder builder(@NotNull final String measurementId, @NotNull final String apiSecret)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8c1ebe56fca8a91f91218d079632c926de776347",
        "previous_commit": "6ff944ce6d80b19cbed97c3974544cc9ce1dc99f",
        "date": 1657815104,
        "releases": {
            "previous": "8c1ebe56fca8a91f91218d079632c926de776347",
            "next": "8c1ebe56fca8a91f91218d079632c926de776347"
        },
        "commit_message": "Append doesn't modify the timestamp when nothing added\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8c1ebe56fca8a91f91218d079632c926de776347": {
                "src/main/java/net/openhft/chronicle/core/PerformanceTuning.java": [
                    "public static List<String> net.openhft.chronicle.core.PerformanceTuning.issues()"
                ]
            },
            "6ff944ce6d80b19cbed97c3974544cc9ce1dc99f": {
                "src/main/java/net/openhft/chronicle/core/PerformanceTuning.java": [
                    "public static List<String> net.openhft.chronicle.core.PerformanceTuning.issues()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "644607d362cf8c1c838095c8cb649f25c925930d",
        "previous_commit": "fe657de5b53f213af84212254efb73a942ad4173",
        "date": 1606316464,
        "releases": {
            "previous": "644607d362cf8c1c838095c8cb649f25c925930d",
            "next": "644607d362cf8c1c838095c8cb649f25c925930d"
        },
        "commit_message": "Surefire can sometimes clear the thread interrupt flag causing tests sensitive to interrupts to behave differently when run from maven,  https://github.com/OpenHFT/Chronicle-Core/issues/156\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "644607d362cf8c1c838095c8cb649f25c925930d": {
                "src/main/java/net/openhft/chronicle/core/onoes/PrintExceptionHandler.java": [
                    "private static void printLog(@NotNull Class clazz, String message, @Nullable Throwable thrown, PrintStream stream)"
                ]
            },
            "fe657de5b53f213af84212254efb73a942ad4173": {
                "src/main/java/net/openhft/chronicle/core/onoes/PrintExceptionHandler.java": [
                    "private static void printLog(@NotNull Class clazz, String message, @Nullable Throwable thrown, PrintStream stream)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "1840ffea4054bd39329fa59138ee7605c98e83b3",
        "previous_commit": "f36e567a21704b96faef9b63c3a0e5076d95098f",
        "date": 1526580312,
        "releases": {
            "previous": "1840ffea4054bd39329fa59138ee7605c98e83b3",
            "next": "1840ffea4054bd39329fa59138ee7605c98e83b3"
        },
        "commit_message": "Added Jvm.safepoint() and Jvm.optionalSafepoint() to Pauser.pause() implementations, closes #17\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "1840ffea4054bd39329fa59138ee7605c98e83b3": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void safepoint()"
                ]
            },
            "f36e567a21704b96faef9b63c3a0e5076d95098f": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void safepoint()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "1acf3786eeae4970d5007478b1251020d3068a3d",
        "previous_commit": "341239f55c273397f2847b175c374187198612b3",
        "date": 1506503984,
        "releases": {
            "previous": "1acf3786eeae4970d5007478b1251020d3068a3d",
            "next": "1acf3786eeae4970d5007478b1251020d3068a3d"
        },
        "commit_message": "#40 OS.getProcessId slow if reverse DNS not setup correctly. Change to looking this up lazily. Note: doesn't impact Linux.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "1acf3786eeae4970d5007478b1251020d3068a3d": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static int getProcessId()"
                ]
            },
            "341239f55c273397f2847b175c374187198612b3": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static int getProcessId()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "01112994510c08c46d86f23807b822b35d2d7676",
        "previous_commit": "5268461f064a2d924bdc9bf2584246c74e0d34bf",
        "date": 1595460752,
        "releases": {
            "previous": "01112994510c08c46d86f23807b822b35d2d7676",
            "next": "01112994510c08c46d86f23807b822b35d2d7676"
        },
        "commit_message": "fix deleteDirWithFiles return value\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "01112994510c08c46d86f23807b822b35d2d7676": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static boolean deleteDirWithFiles(@NotNull String... dirs)"
                ]
            },
            "5268461f064a2d924bdc9bf2584246c74e0d34bf": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static boolean deleteDirWithFiles(@NotNull String... dirs)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "05f3cd1137d5c9f39a5bc97d0533e62be5859ce4",
        "previous_commit": "bc9bbce0e8df1f82d0b3acb48285ca89d8f60f9d",
        "date": 1535290242,
        "releases": {
            "previous": "05f3cd1137d5c9f39a5bc97d0533e62be5859ce4",
            "next": "05f3cd1137d5c9f39a5bc97d0533e62be5859ce4"
        },
        "commit_message": "Added autoIncrement to SetTimeProvider\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "05f3cd1137d5c9f39a5bc97d0533e62be5859ce4": {
                "src/main/java/net/openhft/chronicle/core/time/SetTimeProvider.java": [
                    "public void net.openhft.chronicle.core.time.SetTimeProvider.currentTimeNanos(long nanos)"
                ]
            },
            "bc9bbce0e8df1f82d0b3acb48285ca89d8f60f9d": {
                "src/main/java/net/openhft/chronicle/core/time/SetTimeProvider.java": [
                    "public void net.openhft.chronicle.core.time.SetTimeProvider.currentTimeNanos(long nanos)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "45d96bb99bb7fbf38c5c0418b4f1965528a20441",
        "previous_commit": "f496617e947dd089c8bc968953ba0d83d5d8ff48",
        "date": 1633698543,
        "releases": {
            "previous": "45d96bb99bb7fbf38c5c0418b4f1965528a20441",
            "next": "45d96bb99bb7fbf38c5c0418b4f1965528a20441"
        },
        "commit_message": "Fix typo\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "45d96bb99bb7fbf38c5c0418b4f1965528a20441": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(Object o, long offset, Object o2, long offset2, int length)"
                ]
            },
            "f496617e947dd089c8bc968953ba0d83d5d8ff48": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(Object o, long offset, Object o2, long offset2, int length)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "706dab13d767ec57eafda51a6b7b6a58981ad9d5",
        "previous_commit": "6161f0e195f27105d756ef4c61bac311a75285bd",
        "date": 1524838729,
        "releases": {
            "previous": "706dab13d767ec57eafda51a6b7b6a58981ad9d5",
            "next": "706dab13d767ec57eafda51a6b7b6a58981ad9d5"
        },
        "commit_message": "Handle a concurrency issues when shutting down on a signal handler\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "706dab13d767ec57eafda51a6b7b6a58981ad9d5": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public void net.openhft.chronicle.core.ChainedSignalHandler.handle(Signal signal)"
                ]
            },
            "6161f0e195f27105d756ef4c61bac311a75285bd": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public void net.openhft.chronicle.core.ChainedSignalHandler.handle(Signal signal)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "4c08a032e6fd76800babd321cab36ed5a7860ae7",
        "previous_commit": "f3b466980e9b8504d8a94d2cd7f53dcb35cb6e73",
        "date": 1650429660,
        "releases": {
            "previous": "4c08a032e6fd76800babd321cab36ed5a7860ae7",
            "next": "4c08a032e6fd76800babd321cab36ed5a7860ae7"
        },
        "commit_message": "Make default set of exception handlers explicit, so they can be restored when resetExceptionHandlers() is called. Fixes #384\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "4c08a032e6fd76800babd321cab36ed5a7860ae7": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void net.openhft.chronicle.core.Jvm.resetExceptionHandlers()"
                ]
            },
            "f3b466980e9b8504d8a94d2cd7f53dcb35cb6e73": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void net.openhft.chronicle.core.Jvm.resetExceptionHandlers()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d6723ec8e5897d0d81b092b2b7686de904dbd313",
        "previous_commit": "52587ea37c4d17ad689c9532f6b59e2e70ebe3a7",
        "date": 1588022491,
        "releases": {
            "previous": "d6723ec8e5897d0d81b092b2b7686de904dbd313",
            "next": "d6723ec8e5897d0d81b092b2b7686de904dbd313"
        },
        "commit_message": "Improve code\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d6723ec8e5897d0d81b092b2b7686de904dbd313": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/jdk9/Jdk9ByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.jdk9.Jdk9ByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ]
            },
            "52587ea37c4d17ad689c9532f6b59e2e70ebe3a7": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/jdk9/Jdk9ByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.jdk9.Jdk9ByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2def60cab55d22fa0dee4f3adfee5e65f64cf9f7",
        "previous_commit": "5c7e9bc7b4ce698a6b8df6eaec6e3a077cad41f2",
        "date": 1621005324,
        "releases": {
            "previous": "2def60cab55d22fa0dee4f3adfee5e65f64cf9f7",
            "next": "2def60cab55d22fa0dee4f3adfee5e65f64cf9f7"
        },
        "commit_message": "Don't clear the cleanup task after the first use #223\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2def60cab55d22fa0dee4f3adfee5e65f64cf9f7": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public synchronized void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanup(T value)"
                ]
            },
            "5c7e9bc7b4ce698a6b8df6eaec6e3a077cad41f2": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public synchronized void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanup(T value)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "a088e4e158582be517724aa792b0c9e929ede1ee",
        "previous_commit": "f17fc90cf24a46177e9c6975aad2a01cf37d11bf",
        "date": 1613139170,
        "releases": {
            "previous": "a088e4e158582be517724aa792b0c9e929ede1ee",
            "next": "a088e4e158582be517724aa792b0c9e929ede1ee"
        },
        "commit_message": "Add Histogram support for dumping the percentage for a value.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a088e4e158582be517724aa792b0c9e929ede1ee": {
                "src/main/java/net/openhft/chronicle/core/cooler/CpuCoolers.java": [
                    "public static void busyWait(double nanos)"
                ]
            },
            "f17fc90cf24a46177e9c6975aad2a01cf37d11bf": {
                "src/main/java/net/openhft/chronicle/core/cooler/CpuCoolers.java": [
                    "public static void busyWait(double nanos)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e489265169010e4067ad883f91ff4af1becc7db4",
        "previous_commit": "37770931fabebf0dc2d60795e422cef52de3db63",
        "date": 1528891494,
        "releases": {
            "previous": "e489265169010e4067ad883f91ff4af1becc7db4",
            "next": "e489265169010e4067ad883f91ff4af1becc7db4"
        },
        "commit_message": "Added support for strongly referenced appender in queue cache OpenHFT/Chronicle-Queue#509\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e489265169010e4067ad883f91ff4af1becc7db4": {
                "src/main/java/net/openhft/chronicle/core/onoes/RecordingExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.RecordingExceptionHandler.on(Class clazz, String message, Throwable thrown)"
                ]
            },
            "37770931fabebf0dc2d60795e422cef52de3db63": {
                "src/main/java/net/openhft/chronicle/core/onoes/RecordingExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.RecordingExceptionHandler.on(Class clazz, String message, Throwable thrown)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "08da4db739bc3832a17ff6681e1b705f2b7f6b0a",
        "previous_commit": "d059f1f58e2b5b4b65c6eedbe56bacafdb4ad70d",
        "date": 1623249273,
        "releases": {
            "previous": "08da4db739bc3832a17ff6681e1b705f2b7f6b0a",
            "next": "08da4db739bc3832a17ff6681e1b705f2b7f6b0a"
        },
        "commit_message": "Fix a bug with encoding small doubles. closes https://github.com/OpenHFT/Chronicle-Bytes/issues/199\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "08da4db739bc3832a17ff6681e1b705f2b7f6b0a": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "private static double net.openhft.chronicle.core.io.UnsafeText.asDouble(long value, int exp, boolean negative, int deci)"
                ]
            },
            "d059f1f58e2b5b4b65c6eedbe56bacafdb4ad70d": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "private static double net.openhft.chronicle.core.io.UnsafeText.asDouble(long value, int exp, boolean negative, int deci)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "885750bdab180c35a6e61b8822b85eb7a537a9e5",
        "previous_commit": "b203f3005c44de4a67a6de44ff047d55480fa89e",
        "date": 1697692505,
        "releases": {
            "previous": "885750bdab180c35a6e61b8822b85eb7a537a9e5",
            "next": "885750bdab180c35a6e61b8822b85eb7a537a9e5"
        },
        "commit_message": "Undo potential regression from scoped-thread-local change\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "885750bdab180c35a6e61b8822b85eb7a537a9e5": {
                "src/main/java/net/openhft/chronicle/core/io/Wget.java": [
                    "public static CharSequence net.openhft.chronicle.core.io.Wget.url(String url)"
                ]
            },
            "b203f3005c44de4a67a6de44ff047d55480fa89e": {
                "src/main/java/net/openhft/chronicle/core/io/Wget.java": [
                    "public static CharSequence net.openhft.chronicle.core.io.Wget.url(String url)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "7e4d5e6c9697098fd963a9b70a2feca3bd8e1117",
        "previous_commit": "112ceb8886a15a269e79d6f27e3c05666de5b35e",
        "date": 1665977237,
        "releases": {
            "previous": "7e4d5e6c9697098fd963a9b70a2feca3bd8e1117",
            "next": "7e4d5e6c9697098fd963a9b70a2feca3bd8e1117"
        },
        "commit_message": "log a warning with link to doco for command line args for Java >= 11. Fixes #457\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7e4d5e6c9697098fd963a9b70a2feca3bd8e1117": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static MethodHandle net.openhft.chronicle.core.Jvm.getSetAccessible0Method()"
                ]
            },
            "112ceb8886a15a269e79d6f27e3c05666de5b35e": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static MethodHandle net.openhft.chronicle.core.Jvm.getSetAccessible0Method()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b0facd5b6141eb4b73095005e459ade07b961d17",
        "previous_commit": "5b603a648bd797e2315c21e2522321ff4a8e56a6",
        "date": 1681484302,
        "releases": {
            "previous": "b0facd5b6141eb4b73095005e459ade07b961d17",
            "next": "b0facd5b6141eb4b73095005e459ade07b961d17"
        },
        "commit_message": "Support for JDK 20.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b0facd5b6141eb4b73095005e459ade07b961d17": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static long net.openhft.chronicle.core.OS.invokeFileChannelMap0(@NotNull MethodHandle map0, @NotNull FileChannel fileChannel, int imode, long start, long size, @NotNull ThrowingFunction<OutOfMemoryError, Long, IOException> errorHandler)"
                ]
            },
            "5b603a648bd797e2315c21e2522321ff4a8e56a6": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static long net.openhft.chronicle.core.OS.invokeFileChannelMap0(@NotNull MethodHandle map0, @NotNull FileChannel fileChannel, int imode, long start, long size, @NotNull ThrowingFunction<OutOfMemoryError, Long, IOException> errorHandler)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "81e1119c7473f5a817b79d8154b7037a28084fcf",
        "previous_commit": "5dff3e936df9c73034a4139fb0267f54e524850a",
        "date": 1601038138,
        "releases": {
            "previous": "81e1119c7473f5a817b79d8154b7037a28084fcf",
            "next": "81e1119c7473f5a817b79d8154b7037a28084fcf"
        },
        "commit_message": "Pretty\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "81e1119c7473f5a817b79d8154b7037a28084fcf": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/jdk9/Jdk9ByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.jdk9.Jdk9ByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ]
            },
            "5dff3e936df9c73034a4139fb0267f54e524850a": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/jdk9/Jdk9ByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.jdk9.Jdk9ByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "7c1614d99d3e535de678c298849981d9c03be6d8",
        "previous_commit": "f292fbb7dfe20930e7f9e89c70a0fe2a617b874c",
        "date": 1600937800,
        "releases": {
            "previous": "7c1614d99d3e535de678c298849981d9c03be6d8",
            "next": "7c1614d99d3e535de678c298849981d9c03be6d8"
        },
        "commit_message": "Optimised isProcessAlive for Linux\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7c1614d99d3e535de678c298849981d9c03be6d8": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean isProcessAlive(long pid)"
                ]
            },
            "f292fbb7dfe20930e7f9e89c70a0fe2a617b874c": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean isProcessAlive(long pid)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "5c7e9bc7b4ce698a6b8df6eaec6e3a077cad41f2",
        "previous_commit": "4e6207b2d953c5a001d89f4ad93a2e852f9b1011",
        "date": 1621002927,
        "releases": {
            "previous": "5c7e9bc7b4ce698a6b8df6eaec6e3a077cad41f2",
            "next": "5c7e9bc7b4ce698a6b8df6eaec6e3a077cad41f2"
        },
        "commit_message": "Move AbstractCloseable#throwExceptionIfClosed to an expert use interface, closes https://github.com/OpenHFT/Chronicle-Core/issues/220\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5c7e9bc7b4ce698a6b8df6eaec6e3a077cad41f2": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfNotReleased()"
                ]
            },
            "4e6207b2d953c5a001d89f4ad93a2e852f9b1011": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfNotReleased()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "da6776fba1af4db60ae9f01c8d544f3b5cb48281",
        "previous_commit": "1ee27882cb45a627e87904c36cec38863051117f",
        "date": 1593176175,
        "releases": {
            "previous": "da6776fba1af4db60ae9f01c8d544f3b5cb48281",
            "next": "da6776fba1af4db60ae9f01c8d544f3b5cb48281"
        },
        "commit_message": "Improve trailing zeros in decimals, https://github.com/OpenHFT/Chronicle-Bytes/issues/128\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "da6776fba1af4db60ae9f01c8d544f3b5cb48281": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "protected static long appendFraction(long address, double d, int sign, long mantissa, int shift)"
                ]
            },
            "1ee27882cb45a627e87904c36cec38863051117f": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "protected static long appendFraction(long address, double d, int sign, long mantissa, int shift)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b33d2ffbcb9d704fc2ec6a730d4d26176efed6fe",
        "previous_commit": "0f47c349f0d2abdc1a101536f91c190b3db164e9",
        "date": 1699025189,
        "releases": {
            "previous": "b33d2ffbcb9d704fc2ec6a730d4d26176efed6fe",
            "next": "b33d2ffbcb9d704fc2ec6a730d4d26176efed6fe"
        },
        "commit_message": "Use Jvm.isLambdaClass(Class)\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b33d2ffbcb9d704fc2ec6a730d4d26176efed6fe": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public String net.openhft.chronicle.core.pool.ClassAliasPool.nameFor(Class<?> clazz)"
                ]
            },
            "0f47c349f0d2abdc1a101536f91c190b3db164e9": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "public String net.openhft.chronicle.core.pool.ClassAliasPool.nameFor(Class<?> clazz)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "ca65885c30340647cce2c6990fdd7cd51abd2ea6",
        "previous_commit": "df3ce2dae2eab95bd8528dfea1081408383e8999",
        "date": 1512516684,
        "releases": {
            "previous": "ca65885c30340647cce2c6990fdd7cd51abd2ea6",
            "next": "ca65885c30340647cce2c6990fdd7cd51abd2ea6"
        },
        "commit_message": "JLBH notify hook that warmup completed\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "ca65885c30340647cce2c6990fdd7cd51abd2ea6": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.start()"
                ]
            },
            "df3ce2dae2eab95bd8528dfea1081408383e8999": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.start()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "7ff5c796c7cfd24226962d7fa91c9baba87b7948",
        "previous_commit": "11d606f39bf6c8328c34d542a02d9669fe9e61f5",
        "date": 1610412327,
        "releases": {
            "previous": "7ff5c796c7cfd24226962d7fa91c9baba87b7948",
            "next": "7ff5c796c7cfd24226962d7fa91c9baba87b7948"
        },
        "commit_message": "@peter-lawrey change from master. Don't use unsafe unnecessarily #186\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7ff5c796c7cfd24226962d7fa91c9baba87b7948": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static long maxDirectMemory0()"
                ]
            },
            "11d606f39bf6c8328c34d542a02d9669fe9e61f5": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static long maxDirectMemory0()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "5259d45be8d44ba960efa082f1b9768a41e5a1b8",
        "previous_commit": "c28b74e5d0000c59da78775c0a633056bbe7337a",
        "date": 1612194623,
        "releases": {
            "previous": "5259d45be8d44ba960efa082f1b9768a41e5a1b8",
            "next": "5259d45be8d44ba960efa082f1b9768a41e5a1b8"
        },
        "commit_message": "LicenceCheck only warn if 30 days remaining\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5259d45be8d44ba960efa082f1b9768a41e5a1b8": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class caller)"
                ]
            },
            "c28b74e5d0000c59da78775c0a633056bbe7337a": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class caller)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2bdf8a418117055baa4f531a75bf97e2e9923554",
        "previous_commit": "a852b0542149b305f9ddb79df904b1ce9bb85890",
        "date": 1673436966,
        "releases": {
            "previous": "2bdf8a418117055baa4f531a75bf97e2e9923554",
            "next": "2bdf8a418117055baa4f531a75bf97e2e9923554"
        },
        "commit_message": "Improve support for FIX logging in Jvm.warn() etc (#467)\n\n* ExceptionHandler to specify the Logger to use as this is how the FIX logging works #466\r\n\r\n* ExceptionHandler to specify the Logger to use as this is how the FIX logging works #466\r\n\r\n* ExceptionHandler to specify the Logger to use as this is how the FIX logging works #466\r\n\r\n* ExceptionHandler to specify the Logger to use as this is how the FIX logging works #466\r\n\r\nCo-authored-by: Peter Lawrey <peter.lawrey@chronicle.software>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2bdf8a418117055baa4f531a75bf97e2e9923554": {
                "src/main/java/net/openhft/chronicle/core/onoes/RecordingExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.RecordingExceptionHandler.on(@NotNull Class<?> clazz, @Nullable String message, Throwable thrown)"
                ]
            },
            "a852b0542149b305f9ddb79df904b1ce9bb85890": {
                "src/main/java/net/openhft/chronicle/core/onoes/RecordingExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.RecordingExceptionHandler.on(@NotNull Class<?> clazz, @Nullable String message, Throwable thrown)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "7e8f7d356859a3bb2acb8e87e61b76f714f050e0",
        "previous_commit": "1895a2384b9b9d17617213902209091b54604d1d",
        "date": 1528087262,
        "releases": {
            "previous": "7e8f7d356859a3bb2acb8e87e61b76f714f050e0",
            "next": "7e8f7d356859a3bb2acb8e87e61b76f714f050e0"
        },
        "commit_message": "troubleshooting for JLBH stats\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7e8f7d356859a3bb2acb8e87e61b76f714f050e0": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "private void net.openhft.chronicle.core.jlbh.JLBH.printPercentilesSummary(String label, @NotNull List<double[]> percentileRuns)"
                ]
            },
            "1895a2384b9b9d17617213902209091b54604d1d": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "private void net.openhft.chronicle.core.jlbh.JLBH.printPercentilesSummary(String label, @NotNull List<double[]> percentileRuns)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "6e99729536a4a82bdd4d7b5879710acf23e43be8",
        "previous_commit": "f51bf3ee45887bc5fb1f4fbf0fbf060048d34d11",
        "date": 1598958131,
        "releases": {
            "previous": "6e99729536a4a82bdd4d7b5879710acf23e43be8",
            "next": "6e99729536a4a82bdd4d7b5879710acf23e43be8"
        },
        "commit_message": "Make top level configuration DTO also Events so they can be passed to services and changed on the fly, https://github.com/OpenHFT/Chronicle-Wire/issues/194\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "6e99729536a4a82bdd4d7b5879710acf23e43be8": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "void net.openhft.chronicle.core.io.AbstractReferenceCounted.inThreadPerformRelease()"
                ]
            },
            "f51bf3ee45887bc5fb1f4fbf0fbf060048d34d11": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "void net.openhft.chronicle.core.io.AbstractReferenceCounted.inThreadPerformRelease()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "86f8c3c49143e7f1f37a0a1095d03d394a861d16",
        "previous_commit": "c8c2d165d15b041a17a165619a19c586a909c9a3",
        "date": 1588081947,
        "releases": {
            "previous": "86f8c3c49143e7f1f37a0a1095d03d394a861d16",
            "next": "86f8c3c49143e7f1f37a0a1095d03d394a861d16"
        },
        "commit_message": "Fix Jdk9ByteBufferCleanerService not selected on Java 10+\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "86f8c3c49143e7f1f37a0a1095d03d394a861d16": {
                "src/main/java/net/openhft/chronicle/core/cleaner/CleanerServiceLocator.java": [
                    "private static boolean net.openhft.chronicle.core.cleaner.CleanerServiceLocator.isAllowedInThisMajorVersion(final ByteBufferCleanerService svc)"
                ]
            },
            "c8c2d165d15b041a17a165619a19c586a909c9a3": {
                "src/main/java/net/openhft/chronicle/core/cleaner/CleanerServiceLocator.java": [
                    "private static boolean net.openhft.chronicle.core.cleaner.CleanerServiceLocator.isAllowedInThisMajorVersion(final ByteBufferCleanerService svc)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "3cf866c649c36411c2bdb59f37a0ef3bce72dc31",
        "previous_commit": "8829b0122e8090dd35417e749707e23b1f9ba807",
        "date": 1573234508,
        "releases": {
            "previous": "3cf866c649c36411c2bdb59f37a0ef3bce72dc31",
            "next": "3cf866c649c36411c2bdb59f37a0ef3bce72dc31"
        },
        "commit_message": "fixed bom and getValue()\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3cf866c649c36411c2bdb59f37a0ef3bce72dc31": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static <V> V getValue(@NotNull Object obj, @NotNull String name)"
                ]
            },
            "8829b0122e8090dd35417e749707e23b1f9ba807": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static <V> V getValue(@NotNull Object obj, @NotNull String name)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8388b97d0ef5fabcaaa38d3cd8cbd8e4a8187ca7",
        "previous_commit": "f98311cd5f4c21689026d488d148fa1ba9b10c22",
        "date": 1592487460,
        "releases": {
            "previous": "8388b97d0ef5fabcaaa38d3cd8cbd8e4a8187ca7",
            "next": "8388b97d0ef5fabcaaa38d3cd8cbd8e4a8187ca7"
        },
        "commit_message": "Slow performClose shouldn't fail a test\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8388b97d0ef5fabcaaa38d3cd8cbd8e4a8187ca7": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "void net.openhft.chronicle.core.io.AbstractReferenceCounted.inThreadPerformRelease()"
                ]
            },
            "f98311cd5f4c21689026d488d148fa1ba9b10c22": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "void net.openhft.chronicle.core.io.AbstractReferenceCounted.inThreadPerformRelease()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "39641e08083ae32a94456bddb03af5b497b410df",
        "previous_commit": "1514305f2ff59b151282f54c1f07b5d4ee483715",
        "date": 1553015778,
        "releases": {
            "previous": "39641e08083ae32a94456bddb03af5b497b410df",
            "next": "39641e08083ae32a94456bddb03af5b497b410df"
        },
        "commit_message": "Added support for testing cool CPUs, https://github.com/OpenHFT/Chronicle-Core/issues/83\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "39641e08083ae32a94456bddb03af5b497b410df": {
                "src/main/java/net/openhft/chronicle/core/cooler/CoolerTester.java": [
                    "public void net.openhft.chronicle.core.cooler.CoolerTester.run()"
                ]
            },
            "1514305f2ff59b151282f54c1f07b5d4ee483715": {
                "src/main/java/net/openhft/chronicle/core/cooler/CoolerTester.java": [
                    "public void net.openhft.chronicle.core.cooler.CoolerTester.run()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "65459b7d9be0eb8402a6cc133f58d9bb47cfa381",
        "previous_commit": "a5202f05232c2bee14399763e80c5ce6cc365718",
        "date": 1629810830,
        "releases": {
            "previous": "65459b7d9be0eb8402a6cc133f58d9bb47cfa381",
            "next": "65459b7d9be0eb8402a6cc133f58d9bb47cfa381"
        },
        "commit_message": "Remove use of deprecated class\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "65459b7d9be0eb8402a6cc133f58d9bb47cfa381": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static long net.openhft.chronicle.core.io.IOTools.addressFor(ByteBuffer byteBuffer)"
                ]
            },
            "a5202f05232c2bee14399763e80c5ce6cc365718": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static long net.openhft.chronicle.core.io.IOTools.addressFor(ByteBuffer byteBuffer)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "bbebb0f53259bdfe84d5a33e946548d1f476a5b7",
        "previous_commit": "1b315397fdb41ae37e9ec5705695e94b803a2550",
        "date": 1687312309,
        "releases": {
            "previous": "bbebb0f53259bdfe84d5a33e946548d1f476a5b7",
            "next": "bbebb0f53259bdfe84d5a33e946548d1f476a5b7"
        },
        "commit_message": "withstand extra characters e.g. newline in license file. Remove old comment\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "bbebb0f53259bdfe84d5a33e946548d1f476a5b7": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void licenceExpiry(String product, Class<?> caller, BiConsumer<Long, String> licenceExpiryDetails)"
                ]
            },
            "1b315397fdb41ae37e9ec5705695e94b803a2550": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void licenceExpiry(String product, Class<?> caller, BiConsumer<Long, String> licenceExpiryDetails)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "951f779e91fa266bd2f14f0e8fe498a6ed4eeff8",
        "previous_commit": "409be7a6de14ed577b1f42fb38fb02ad1f634d05",
        "date": 1529931803,
        "releases": {
            "previous": "951f779e91fa266bd2f14f0e8fe498a6ed4eeff8",
            "next": "951f779e91fa266bd2f14f0e8fe498a6ed4eeff8"
        },
        "commit_message": "fixed https://github.com/OpenHFT/Chronicle-Core/issues/71\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "951f779e91fa266bd2f14f0e8fe498a6ed4eeff8": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            },
            "409be7a6de14ed577b1f42fb38fb02ad1f634d05": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "8a57fac87559cda02ef16289684ed4d22528e347",
        "previous_commit": "fee5a6fe14470ea738e85cf9f7458ff81dbee0ca",
        "date": 1693903637,
        "releases": {
            "previous": "8a57fac87559cda02ef16289684ed4d22528e347",
            "next": "8a57fac87559cda02ef16289684ed4d22528e347"
        },
        "commit_message": "Explicitly ban unsafe package for serialization (#574)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8a57fac87559cda02ef16289684ed4d22528e347": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private Class<?> net.openhft.chronicle.core.pool.ClassAliasPool.doLookup(String name)"
                ]
            },
            "fee5a6fe14470ea738e85cf9f7458ff81dbee0ca": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private Class<?> net.openhft.chronicle.core.pool.ClassAliasPool.doLookup(String name)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "821953b8ca973269dc488ff48fb9d9ad08d6cfe3",
        "previous_commit": "8324ae664cdeb72645a69dd54d163de291754de1",
        "date": 1504273838,
        "releases": {
            "previous": "821953b8ca973269dc488ff48fb9d9ad08d6cfe3",
            "next": "821953b8ca973269dc488ff48fb9d9ad08d6cfe3"
        },
        "commit_message": "module def tweaks\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "821953b8ca973269dc488ff48fb9d9ad08d6cfe3": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ]
            },
            "8324ae664cdeb72645a69dd54d163de291754de1": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "66937b350391af048e973c3b5a1ce03a53636ea0",
        "previous_commit": "6a8c2353b3fc97bf3bccdd3911283c64e24f16ea",
        "date": 1590657016,
        "releases": {
            "previous": "66937b350391af048e973c3b5a1ce03a53636ea0",
            "next": "66937b350391af048e973c3b5a1ce03a53636ea0"
        },
        "commit_message": "Only warn if tracing enabled.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "66937b350391af048e973c3b5a1ce03a53636ea0": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.warnIfNotClosed()"
                ]
            },
            "6a8c2353b3fc97bf3bccdd3911283c64e24f16ea": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.warnIfNotClosed()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "75bcd02f9f5e6b945d54c4d0ed3472086af894d3",
        "previous_commit": "30955c2f8058cb7cefa2c269aca52b6577fc0ce9",
        "date": 1603188696,
        "releases": {
            "previous": "75bcd02f9f5e6b945d54c4d0ed3472086af894d3",
            "next": "75bcd02f9f5e6b945d54c4d0ed3472086af894d3"
        },
        "commit_message": "Invert close background/wait check\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "75bcd02f9f5e6b945d54c4d0ed3472086af894d3": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ]
            },
            "30955c2f8058cb7cefa2c269aca52b6577fc0ce9": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "79d425af15eed5baf5f9a72326e46f8a511912e3",
        "previous_commit": "341e38393d7c81dcc0e14e15e7cc9d07d686f36d",
        "date": 1684498337,
        "releases": {
            "previous": "79d425af15eed5baf5f9a72326e46f8a511912e3",
            "next": "79d425af15eed5baf5f9a72326e46f8a511912e3"
        },
        "commit_message": "Code cleanup (#515)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "79d425af15eed5baf5f9a72326e46f8a511912e3": {
                "src/main/java/net/openhft/chronicle/core/onoes/ExceptionKey.java": [
                    "public boolean net.openhft.chronicle.core.onoes.ExceptionKey.equals(Object o)"
                ]
            },
            "341e38393d7c81dcc0e14e15e7cc9d07d686f36d": {
                "src/main/java/net/openhft/chronicle/core/onoes/ExceptionKey.java": [
                    "public boolean net.openhft.chronicle.core.onoes.ExceptionKey.equals(Object o)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "7e44bb67aad41dffee9c4bfb99a587b10634966f",
        "previous_commit": "6f238d6ac04b80ab610001ae43b0e419d148ed1c",
        "date": 1632150310,
        "releases": {
            "previous": "7e44bb67aad41dffee9c4bfb99a587b10634966f",
            "next": "7e44bb67aad41dffee9c4bfb99a587b10634966f"
        },
        "commit_message": "Improve behaviour for a resource closing the in background, https://github.com/OpenHFT/Chronicle-Core/issues/249\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7e44bb67aad41dffee9c4bfb99a587b10634966f": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static void net.openhft.chronicle.core.OS.unmap(long address, long size)"
                ]
            },
            "6f238d6ac04b80ab610001ae43b0e419d148ed1c": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static void net.openhft.chronicle.core.OS.unmap(long address, long size)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b0d817301276b2410e05dc87fa3b4b3424864959",
        "previous_commit": "644607d362cf8c1c838095c8cb649f25c925930d",
        "date": 1606320289,
        "releases": {
            "previous": "b0d817301276b2410e05dc87fa3b4b3424864959",
            "next": "b0d817301276b2410e05dc87fa3b4b3424864959"
        },
        "commit_message": "Surefire can sometimes clear the thread interrupt flag causing tests sensitive to interrupts to behave differently when run from maven,  closes https://github.com/OpenHFT/Chronicle-Core/issues/156\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b0d817301276b2410e05dc87fa3b4b3424864959": {
                "src/main/java/net/openhft/chronicle/core/onoes/ThreadLocalisedExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.ThreadLocalisedExceptionHandler.on(Class clazz, String message, Throwable thrown)"
                ]
            },
            "644607d362cf8c1c838095c8cb649f25c925930d": {
                "src/main/java/net/openhft/chronicle/core/onoes/ThreadLocalisedExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.ThreadLocalisedExceptionHandler.on(Class clazz, String message, Throwable thrown)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "daa3bb443f46e1335f3dbacc91ef5200ffb21ed5",
        "previous_commit": "05529a74e767c924b896aa4207091684f31d58ff",
        "date": 1504259947,
        "releases": {
            "previous": "daa3bb443f46e1335f3dbacc91ef5200ffb21ed5",
            "next": "daa3bb443f46e1335f3dbacc91ef5200ffb21ed5"
        },
        "commit_message": "cleaner service\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "daa3bb443f46e1335f3dbacc91ef5200ffb21ed5": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static void clean(ByteBuffer bb)"
                ]
            },
            "05529a74e767c924b896aa4207091684f31d58ff": {
                "src/main/java/net/openhft/chronicle/core/io/IOTools.java": [
                    "public static void clean(ByteBuffer bb)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2fc1aa18e979392f3a4c52362b99b4dee274513d",
        "previous_commit": "20b9f69dcfc846f80b55b4b4fa97060d247aabf0",
        "date": 1599138855,
        "releases": {
            "previous": "2fc1aa18e979392f3a4c52362b99b4dee274513d",
            "next": "2fc1aa18e979392f3a4c52362b99b4dee274513d"
        },
        "commit_message": "Chronicle FIX to use ServicesTimestampLongConvertor for consistency, closes https://github.com/ChronicleEnterprise/Chronicle-Services/issues/180\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2fc1aa18e979392f3a4c52362b99b4dee274513d": {
                "src/main/java/net/openhft/chronicle/core/time/SetTimeProvider.java": [
                    "static long net.openhft.chronicle.core.time.SetTimeProvider.initialNanos(String timestamp)"
                ]
            },
            "20b9f69dcfc846f80b55b4b4fa97060d247aabf0": {
                "src/main/java/net/openhft/chronicle/core/time/SetTimeProvider.java": [
                    "static long net.openhft.chronicle.core.time.SetTimeProvider.initialNanos(String timestamp)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e45d5013addbbfc24dd55f1d6458bfa1b1e1648c",
        "previous_commit": "984a61cc9527f1f2580f39d2170ab1c511251f63",
        "date": 1593523730,
        "releases": {
            "previous": "e45d5013addbbfc24dd55f1d6458bfa1b1e1648c",
            "next": "e45d5013addbbfc24dd55f1d6458bfa1b1e1648c"
        },
        "commit_message": "More detail\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e45d5013addbbfc24dd55f1d6458bfa1b1e1648c": {
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "private String net.openhft.chronicle.core.util.Histogram.p(double v)"
                ]
            },
            "984a61cc9527f1f2580f39d2170ab1c511251f63": {
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "private String net.openhft.chronicle.core.util.Histogram.p(double v)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "250455fa41b9e6822015b3ab581e541bfc3f80cc",
        "previous_commit": "cdc7ce47c7d1b4afbe401ac38aeef42e19659f17",
        "date": 1613138194,
        "releases": {
            "previous": "250455fa41b9e6822015b3ab581e541bfc3f80cc",
            "next": "250455fa41b9e6822015b3ab581e541bfc3f80cc"
        },
        "commit_message": "Add Histogram support for dumping the percentage for a value.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "250455fa41b9e6822015b3ab581e541bfc3f80cc": {
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public String net.openhft.chronicle.core.util.Histogram.toLongMicrosFormat(@NotNull DoubleFunction<Double> toMicros)"
                ]
            },
            "cdc7ce47c7d1b4afbe401ac38aeef42e19659f17": {
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public String net.openhft.chronicle.core.util.Histogram.toLongMicrosFormat(@NotNull DoubleFunction<Double> toMicros)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "573d11d5bea0351230317c20c2a88632095cf102",
        "previous_commit": "fa040b21450b6e3b4635695a58205ac8197d9cd4",
        "date": 1649206410,
        "releases": {
            "previous": "573d11d5bea0351230317c20c2a88632095cf102",
            "next": "573d11d5bea0351230317c20c2a88632095cf102"
        },
        "commit_message": "Catch the NoClassDefFoundError thrown when Windows/OSX attempts to look up a class with the wrong case, Fixes #372\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "573d11d5bea0351230317c20c2a88632095cf102": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private synchronized Class<?> net.openhft.chronicle.core.pool.ClassAliasPool.forName0(@NotNull CAPKey key)"
                ]
            },
            "fa040b21450b6e3b4635695a58205ac8197d9cd4": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private synchronized Class<?> net.openhft.chronicle.core.pool.ClassAliasPool.forName0(@NotNull CAPKey key)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "0568357ca2e86231e9e9603266f843f91e565f84",
        "previous_commit": "4f90722510544a09c337eda3a99d2431820b06e0",
        "date": 1602508844,
        "releases": {
            "previous": "0568357ca2e86231e9e9603266f843f91e565f84",
            "next": "0568357ca2e86231e9e9603266f843f91e565f84"
        },
        "commit_message": "Release bytes if not already released. TODO fix this.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0568357ca2e86231e9e9603266f843f91e565f84": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public synchronized void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanup(T value)"
                ]
            },
            "4f90722510544a09c337eda3a99d2431820b06e0": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public synchronized void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanup(T value)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2c5a7962dd6e9c7ea8dcb97abca548649ed29b9a",
        "previous_commit": "ca65885c30340647cce2c6990fdd7cd51abd2ea6",
        "date": 1512516684,
        "releases": {
            "previous": "2c5a7962dd6e9c7ea8dcb97abca548649ed29b9a",
            "next": "2c5a7962dd6e9c7ea8dcb97abca548649ed29b9a"
        },
        "commit_message": "Jvm.warn() if you override existing SignalHandler\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2c5a7962dd6e9c7ea8dcb97abca548649ed29b9a": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void signalHandler(SignalHandler signalHandler)"
                ]
            },
            "ca65885c30340647cce2c6990fdd7cd51abd2ea6": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void signalHandler(SignalHandler signalHandler)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "a523ef614cb6226dbaaad785768dd616511613c3",
        "previous_commit": "f162747f8cc7d98579cb336fecbb0c08d1ec790e",
        "date": 1636082618,
        "releases": {
            "previous": "a523ef614cb6226dbaaad785768dd616511613c3",
            "next": "a523ef614cb6226dbaaad785768dd616511613c3"
        },
        "commit_message": "Close AutoCloseable in Closeable.closeQuietly, Fixes #268\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a523ef614cb6226dbaaad785768dd616511613c3": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            },
            "f162747f8cc7d98579cb336fecbb0c08d1ec790e": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "7df071a175265cb332536cb3b5cb801a445f8b86",
        "previous_commit": "502a6b1b3a41d55cd9887f84cd20426a2f1ff427",
        "date": 1635245719,
        "releases": {
            "previous": "7df071a175265cb332536cb3b5cb801a445f8b86",
            "next": "7df071a175265cb332536cb3b5cb801a445f8b86"
        },
        "commit_message": "fix for java 11\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7df071a175265cb332536cb3b5cb801a445f8b86": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(@Nullable Object src, long srcOffset, long dest, int length)"
                ]
            },
            "502a6b1b3a41d55cd9887f84cd20426a2f1ff427": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(@Nullable Object src, long srcOffset, long dest, int length)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "038acbaa157efa3eca0dd3d44dc4f5e331151a0e",
        "previous_commit": "bed56cffda29e2fcd9ed2e4c2a2b11433c8e7fd5",
        "date": 1619007355,
        "releases": {
            "previous": "038acbaa157efa3eca0dd3d44dc4f5e331151a0e",
            "next": "038acbaa157efa3eca0dd3d44dc4f5e331151a0e"
        },
        "commit_message": "Move AbstractCloseable#throwExceptionIfClosed to an expert use interface, closes https://github.com/OpenHFT/Chronicle-Core/issues/220\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "038acbaa157efa3eca0dd3d44dc4f5e331151a0e": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfNotReleased()"
                ]
            },
            "bed56cffda29e2fcd9ed2e4c2a2b11433c8e7fd5": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.throwExceptionIfNotReleased()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "1ea0e552a86f8b026bce348b01a5ab723ec2b1c1",
        "previous_commit": "e99ead3140e4af087a71d7df95f4596e6ae7695b",
        "date": 1568028150,
        "releases": {
            "previous": "1ea0e552a86f8b026bce348b01a5ab723ec2b1c1",
            "next": "1ea0e552a86f8b026bce348b01a5ab723ec2b1c1"
        },
        "commit_message": "Fixed StringUtils to cache String/StringBuilder reflection-cache\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "1ea0e552a86f8b026bce348b01a5ab723ec2b1c1": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "private static byte getStringCoderForStringOrStringBuilder(@NotNull CharSequence charSequence)"
                ]
            },
            "e99ead3140e4af087a71d7df95f4596e6ae7695b": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "private static byte getStringCoderForStringOrStringBuilder(@NotNull CharSequence charSequence)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "a15ace3c4bb6d7dd065187877d70f3fc4a2a29c3",
        "previous_commit": "abf8a07ce08239dcfc6282330cc7088fbd480f98",
        "date": 1626915292,
        "releases": {
            "previous": "a15ace3c4bb6d7dd065187877d70f3fc4a2a29c3",
            "next": "a15ace3c4bb6d7dd065187877d70f3fc4a2a29c3"
        },
        "commit_message": "Add ability to check if the current thread is the background resource releaser thread\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a15ace3c4bb6d7dd065187877d70f3fc4a2a29c3": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ]
            },
            "abf8a07ce08239dcfc6282330cc7088fbd480f98": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d31978a9c5b8fb870448e3a56167f988396fe914",
        "previous_commit": "6df026758690c648dda6880ef9e63af2564d85bf",
        "date": 1590938092,
        "releases": {
            "previous": "d31978a9c5b8fb870448e3a56167f988396fe914",
            "next": "d31978a9c5b8fb870448e3a56167f988396fe914"
        },
        "commit_message": "Add support for a permissive getBoolean for System properties.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d31978a9c5b8fb870448e3a56167f988396fe914": {
                "src/main/java/net/openhft/chronicle/core/tcp/ISocketChannel.java": [
                    "static boolean isFastJava8IO()"
                ]
            },
            "6df026758690c648dda6880ef9e63af2564d85bf": {
                "src/main/java/net/openhft/chronicle/core/tcp/ISocketChannel.java": [
                    "static boolean isFastJava8IO()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "fd0097a23742d7a440ed433ff07859012181b4a0",
        "previous_commit": "482f898d9d984df324de7f2cd81ce5a469a878c9",
        "date": 1571004990,
        "releases": {
            "previous": "fd0097a23742d7a440ed433ff07859012181b4a0",
            "next": "fd0097a23742d7a440ed433ff07859012181b4a0"
        },
        "commit_message": "Simplify string builder pool code\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "fd0097a23742d7a440ed433ff07859012181b4a0": {
                "src/main/java/net/openhft/chronicle/core/pool/StringBuilderPool.java": [
                    "public StringBuilder net.openhft.chronicle.core.pool.StringBuilderPool.acquireStringBuilder()"
                ]
            },
            "482f898d9d984df324de7f2cd81ce5a469a878c9": {
                "src/main/java/net/openhft/chronicle/core/pool/StringBuilderPool.java": [
                    "public StringBuilder net.openhft.chronicle.core.pool.StringBuilderPool.acquireStringBuilder()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "79b201224574516f780a9da33ca9edd1e3e0a824",
        "previous_commit": "3a375b7a25731cd8dfe2b9f8aa9d3181009bf796",
        "date": 1659017898,
        "releases": {
            "previous": "79b201224574516f780a9da33ca9edd1e3e0a824",
            "next": "79b201224574516f780a9da33ca9edd1e3e0a824"
        },
        "commit_message": "Allow more time to shut down threads\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "79b201224574516f780a9da33ca9edd1e3e0a824": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            },
            "3a375b7a25731cd8dfe2b9f8aa9d3181009bf796": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f4d10184477a3960a07a54747938824be7f40bd7",
        "previous_commit": "d31978a9c5b8fb870448e3a56167f988396fe914",
        "date": 1590994117,
        "releases": {
            "previous": "f4d10184477a3960a07a54747938824be7f40bd7",
            "next": "f4d10184477a3960a07a54747938824be7f40bd7"
        },
        "commit_message": "Use WeakIdentityHashMap for tracking closeables, Make SocketChannnels closeable, Make all tests in bytes check all resources are closed. https://github.com/OpenHFT/Chronicle-Core/issues/116\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f4d10184477a3960a07a54747938824be7f40bd7": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.enableCloseableTracing()"
                ]
            },
            "d31978a9c5b8fb870448e3a56167f988396fe914": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.enableCloseableTracing()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "99e37eb224973549d3ea2c40edabdbb074df4204",
        "previous_commit": "821953b8ca973269dc488ff48fb9d9ad08d6cfe3",
        "date": 1504513343,
        "releases": {
            "previous": "99e37eb224973549d3ea2c40edabdbb074df4204",
            "next": "99e37eb224973549d3ea2c40edabdbb074df4204"
        },
        "commit_message": "working test for java9 module against java8-compiled binary\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "99e37eb224973549d3ea2c40edabdbb074df4204": {
                "src/main/java/net/openhft/chronicle/core/cleaner/CleanerServiceLocator.java": [
                    "public static synchronized ByteBufferCleanerService net.openhft.chronicle.core.cleaner.CleanerServiceLocator.cleanerService()"
                ]
            },
            "821953b8ca973269dc488ff48fb9d9ad08d6cfe3": {
                "src/main/java/net/openhft/chronicle/core/cleaner/CleanerServiceLocator.java": [
                    "public static synchronized ByteBufferCleanerService net.openhft.chronicle.core.cleaner.CleanerServiceLocator.cleanerService()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "dc16c3df8cabdea29b39425de8381742779e6a73",
        "previous_commit": "4e7bc4d6f62cb2991dc47eb9121ceb4cdab00703",
        "date": 1604553458,
        "releases": {
            "previous": "dc16c3df8cabdea29b39425de8381742779e6a73",
            "next": "dc16c3df8cabdea29b39425de8381742779e6a73"
        },
        "commit_message": "better classpath troubleshooting\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "dc16c3df8cabdea29b39425de8381742779e6a73": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void addToClassPath(Class clazz)"
                ]
            },
            "4e7bc4d6f62cb2991dc47eb9121ceb4cdab00703": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void addToClassPath(Class clazz)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "9cf19c9c195d8b38dd8c550523c41a18b38b00cf",
        "previous_commit": "6708e16e34d878ee737643a143dd5e01903a96c8",
        "date": 1623319077,
        "releases": {
            "previous": "9cf19c9c195d8b38dd8c550523c41a18b38b00cf",
            "next": "9cf19c9c195d8b38dd8c550523c41a18b38b00cf"
        },
        "commit_message": "Jvm:getFieldOrNull should not rely on catching an error #174\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9cf19c9c195d8b38dd8c550523c41a18b38b00cf": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Field getFieldOrNull(@NotNull final Class<?> clazz, @NotNull final String fieldName)"
                ]
            },
            "6708e16e34d878ee737643a143dd5e01903a96c8": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Field getFieldOrNull(@NotNull final Class<?> clazz, @NotNull final String fieldName)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "53dd2c8e702b752848119e60ba649b83b7f7e10f",
        "previous_commit": "ae3894acdc53945d6172fc00c33a1b4e9b56dfa4",
        "date": 1594045555,
        "releases": {
            "previous": "53dd2c8e702b752848119e60ba649b83b7f7e10f",
            "next": "53dd2c8e702b752848119e60ba649b83b7f7e10f"
        },
        "commit_message": "Possible race condition in the detection of closed resources, due to a bug in the test which didn't wait for background threads to finish, closes https://github.com/OpenHFT/Chronicle-Queue/issues/688\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "53dd2c8e702b752848119e60ba649b83b7f7e10f": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ]
            },
            "ae3894acdc53945d6172fc00c33a1b4e9b56dfa4": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "ed65b0e7845ae3caf13b92a588e65baca6a8c868",
        "previous_commit": "9bcc28c7e51843d1fdaa0f9686592137da012dff",
        "date": 1552650971,
        "releases": {
            "previous": "ed65b0e7845ae3caf13b92a588e65baca6a8c868",
            "next": "ed65b0e7845ae3caf13b92a588e65baca6a8c868"
        },
        "commit_message": "Added support for testing cool CPUs, https://github.com/OpenHFT/Chronicle-Core/issues/83\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "ed65b0e7845ae3caf13b92a588e65baca6a8c868": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long appendDouble(long address, double d)"
                ]
            },
            "9bcc28c7e51843d1fdaa0f9686592137da012dff": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long appendDouble(long address, double d)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "efbb6ca7d43a5033b694b45ac2ad543694c9a2ab",
        "previous_commit": "7df071a175265cb332536cb3b5cb801a445f8b86",
        "date": 1635245719,
        "releases": {
            "previous": "efbb6ca7d43a5033b694b45ac2ad543694c9a2ab",
            "next": "efbb6ca7d43a5033b694b45ac2ad543694c9a2ab"
        },
        "commit_message": "fix for ARM\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "efbb6ca7d43a5033b694b45ac2ad543694c9a2ab": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(@Nullable Object src, long srcOffset, long dest, int length)"
                ]
            },
            "7df071a175265cb332536cb3b5cb801a445f8b86": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(@Nullable Object src, long srcOffset, long dest, int length)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c6b84ce1a2c131231fcd0e8089ea21ce1f8fa277",
        "previous_commit": "b18574eca2ab8d25dd7da5dfb70f97e97863b040",
        "date": 1713407247,
        "releases": {
            "previous": "c6b84ce1a2c131231fcd0e8089ea21ce1f8fa277",
            "next": "c6b84ce1a2c131231fcd0e8089ea21ce1f8fa277"
        },
        "commit_message": "When resource tracing is turned on, ScopedResourcePool logs stack trace to help troubleshoot problematic re-use\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c6b84ce1a2c131231fcd0e8089ea21ce1f8fa277": {
                "src/main/java/net/openhft/chronicle/core/scoped/ScopedThreadLocal.java": [
                    "void net.openhft.chronicle.core.scoped.ScopedThreadLocal<T>.push(AbstractScopedResource<T> instance)"
                ]
            },
            "b18574eca2ab8d25dd7da5dfb70f97e97863b040": {
                "src/main/java/net/openhft/chronicle/core/scoped/ScopedThreadLocal.java": [
                    "void net.openhft.chronicle.core.scoped.ScopedThreadLocal<T>.push(AbstractScopedResource<T> instance)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f8ea28201da82d25914edab6bad9afb2dec0757a",
        "previous_commit": "40df6d92d27b59153e7e4f0594435e85f2eb1fad",
        "date": 1604064820,
        "releases": {
            "previous": "f8ea28201da82d25914edab6bad9afb2dec0757a",
            "next": "f8ea28201da82d25914edab6bad9afb2dec0757a"
        },
        "commit_message": "Ensure all resources are cleaned up even if one throws an Throwable.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f8ea28201da82d25914edab6bad9afb2dec0757a": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)"
                ]
            },
            "40df6d92d27b59153e7e4f0594435e85f2eb1fad": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "3665521dc1de1397d4ee0ced438b5d73a4c69c38",
        "previous_commit": "cef5b3845a122e0b1ee1876e7e4c6e100ec7074b",
        "date": 1532367243,
        "releases": {
            "previous": "3665521dc1de1397d4ee0ced438b5d73a4c69c38",
            "next": "3665521dc1de1397d4ee0ced438b5d73a4c69c38"
        },
        "commit_message": "https://github.com/ChronicleEnterprise/RootPom/issues/49 changed printPercentilesSummary to take an appender so that it can be used in emails\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3665521dc1de1397d4ee0ced438b5d73a4c69c38": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "private void net.openhft.chronicle.core.jlbh.JLBH.endOfAllRuns()"
                ]
            },
            "cef5b3845a122e0b1ee1876e7e4c6e100ec7074b": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "private void net.openhft.chronicle.core.jlbh.JLBH.endOfAllRuns()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "673a04a7df350271b5513026677b07fa75393436",
        "previous_commit": "9c5660c9075f0c3f26f9d6253c6d95f942c84cf1",
        "date": 1524795505,
        "releases": {
            "previous": "673a04a7df350271b5513026677b07fa75393436",
            "next": "673a04a7df350271b5513026677b07fa75393436"
        },
        "commit_message": "Fix tests for JLBH new Histo defaults\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "673a04a7df350271b5513026677b07fa75393436": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "protected Histogram net.openhft.chronicle.core.jlbh.JLBH.createHistogram()"
                ]
            },
            "9c5660c9075f0c3f26f9d6253c6d95f942c84cf1": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "protected Histogram net.openhft.chronicle.core.jlbh.JLBH.createHistogram()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "753f4c89c7f9add4814b34d7c51a416b77150f75",
        "previous_commit": "d1cbb5e898ac9dce38876f4de19a4f2f3ad25fb9",
        "date": 1687487029,
        "releases": {
            "previous": "753f4c89c7f9add4814b34d7c51a416b77150f75",
            "next": "753f4c89c7f9add4814b34d7c51a416b77150f75"
        },
        "commit_message": "more accurate license days calculation\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "753f4c89c7f9add4814b34d7c51a416b77150f75": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void licenceExpiry(String product, Class<?> caller, BiConsumer<Long, String> licenceExpiryDetails)"
                ]
            },
            "d1cbb5e898ac9dce38876f4de19a4f2f3ad25fb9": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void licenceExpiry(String product, Class<?> caller, BiConsumer<Long, String> licenceExpiryDetails)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "9e53fc087b879f4dc9384c594577276fda9881cf",
        "previous_commit": "4f2a4534ae70907796f0f5ddc441cb2b9eac1635",
        "date": 1632414539,
        "releases": {
            "previous": "9e53fc087b879f4dc9384c594577276fda9881cf",
            "next": "9e53fc087b879f4dc9384c594577276fda9881cf"
        },
        "commit_message": "Add gcAndWaitForCloseablesToClose #250\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9e53fc087b879f4dc9384c594577276fda9881cf": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanupNonCleaningThreads()"
                ]
            },
            "4f2a4534ae70907796f0f5ddc441cb2b9eac1635": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanupNonCleaningThreads()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d5c6c28440ce6de5ef9a01db2a898d98b0a2b450",
        "previous_commit": "a1e4c0629bae05bae7be7aef14cec37272f5cd50",
        "date": 1592486931,
        "releases": {
            "previous": "d5c6c28440ce6de5ef9a01db2a898d98b0a2b450",
            "next": "d5c6c28440ce6de5ef9a01db2a898d98b0a2b450"
        },
        "commit_message": "assertTrue -> assumeTrue\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d5c6c28440ce6de5ef9a01db2a898d98b0a2b450": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ]
            },
            "a1e4c0629bae05bae7be7aef14cec37272f5cd50": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e243bfa5095657d6e3ecc877a6302bec41f2c13e",
        "previous_commit": "6d93924813c544136a747be0758e4c30d751714c",
        "date": 1661938191,
        "releases": {
            "previous": "e243bfa5095657d6e3ecc877a6302bec41f2c13e",
            "next": "e243bfa5095657d6e3ecc877a6302bec41f2c13e"
        },
        "commit_message": "Drop a perf message we don't check for in any test\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e243bfa5095657d6e3ecc877a6302bec41f2c13e": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "void net.openhft.chronicle.core.io.AbstractReferenceCounted.inThreadPerformRelease()"
                ]
            },
            "6d93924813c544136a747be0758e4c30d751714c": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "void net.openhft.chronicle.core.io.AbstractReferenceCounted.inThreadPerformRelease()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "bfa7f44e194bd604a6badf8a98abdfc8cbd81693",
        "previous_commit": "daa3bb443f46e1335f3dbacc91ef5200ffb21ed5",
        "date": 1504261407,
        "releases": {
            "previous": "bfa7f44e194bd604a6badf8a98abdfc8cbd81693",
            "next": "bfa7f44e194bd604a6badf8a98abdfc8cbd81693"
        },
        "commit_message": "package shuffle + build tweaks to support java9\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "bfa7f44e194bd604a6badf8a98abdfc8cbd81693": {
                "src/main/java/net/openhft/chronicle/core/cleaner/CleanerServiceLocator.java": [
                    "public static synchronized ByteBufferCleanerService net.openhft.chronicle.core.cleaner.CleanerServiceLocator.cleanerService()"
                ]
            },
            "daa3bb443f46e1335f3dbacc91ef5200ffb21ed5": {
                "src/main/java/net/openhft/chronicle/core/cleaner/CleanerServiceLocator.java": [
                    "public static synchronized ByteBufferCleanerService net.openhft.chronicle.core.cleaner.CleanerServiceLocator.cleanerService()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "dd6b5e8df2f923361e5281b72aff5a4610a59acd",
        "previous_commit": "c4d6ec0b11aec9234edb69400fa93867f2cde295",
        "date": 1522232259,
        "releases": {
            "previous": "dd6b5e8df2f923361e5281b72aff5a4610a59acd",
            "next": "dd6b5e8df2f923361e5281b72aff5a4610a59acd"
        },
        "commit_message": "Fix annotations\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "dd6b5e8df2f923361e5281b72aff5a4610a59acd": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadLocalHelper.java": [
                    "public static <T, A> T getTL(@NotNull final ThreadLocal<WeakReference<T>> threadLocal, final A a, @NotNull final Function<A, T> function, @Nullable final ReferenceQueue<T> referenceQueue, @Nullable final Consumer<WeakReference<T>> refConsumer)"
                ]
            },
            "c4d6ec0b11aec9234edb69400fa93867f2cde295": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadLocalHelper.java": [
                    "public static <T, A> T getTL(@NotNull final ThreadLocal<WeakReference<T>> threadLocal, final A a, @NotNull final Function<A, T> function, @Nullable final ReferenceQueue<T> referenceQueue, @Nullable final Consumer<WeakReference<T>> refConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "91a92d87bcff59db8d7f53312f191dde448ba80f",
        "previous_commit": "62c15fa163cdd1f0174de8d0323d963f9d8b3529",
        "date": 1707137685,
        "releases": {
            "previous": "91a92d87bcff59db8d7f53312f191dde448ba80f",
            "next": "91a92d87bcff59db8d7f53312f191dde448ba80f"
        },
        "commit_message": "Add a helper method to determine if converting from text to a class is supported. (#626)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "91a92d87bcff59db8d7f53312f191dde448ba80f": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public ThrowingFunction<String, Object, Exception> net.openhft.chronicle.core.util.ObjectUtils.apply(@NotNull Class<?> c)"
                ]
            },
            "62c15fa163cdd1f0174de8d0323d963f9d8b3529": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public ThrowingFunction<String, Object, Exception> net.openhft.chronicle.core.util.ObjectUtils.apply(@NotNull Class<?> c)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b155ae5674ccececb5023a45be79d77389523b32",
        "previous_commit": "8d9914558b515ea8e5858b725b1ba0386768fcc7",
        "date": 1517407701,
        "releases": {
            "previous": "b155ae5674ccececb5023a45be79d77389523b32",
            "next": "b155ae5674ccececb5023a45be79d77389523b32"
        },
        "commit_message": "Use standard exception type\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b155ae5674ccececb5023a45be79d77389523b32": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.initEventLoop()"
                ]
            },
            "8d9914558b515ea8e5858b725b1ba0386768fcc7": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.initEventLoop()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "951128a254409aac20f02370bbb20da85fef899c",
        "previous_commit": "6e99729536a4a82bdd4d7b5879710acf23e43be8",
        "date": 1599014262,
        "releases": {
            "previous": "951128a254409aac20f02370bbb20da85fef899c",
            "next": "951128a254409aac20f02370bbb20da85fef899c"
        },
        "commit_message": "Reduced some object creation, https://github.com/OpenHFT/Chronicle-Core/issues/135\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "951128a254409aac20f02370bbb20da85fef899c": {
                "src/main/java/net/openhft/chronicle/core/ClassMetrics.java": [
                    "public int net.openhft.chronicle.core.ClassMetrics.hashCode()"
                ]
            },
            "6e99729536a4a82bdd4d7b5879710acf23e43be8": {
                "src/main/java/net/openhft/chronicle/core/ClassMetrics.java": [
                    "public int net.openhft.chronicle.core.ClassMetrics.hashCode()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "90bb606ec72e90dd0eb236f3f3dd2bb904ad8332",
        "previous_commit": "0bda44376fd7203f343ab4508d664bf0391c6d4f",
        "date": 1524725873,
        "releases": {
            "previous": "90bb606ec72e90dd0eb236f3f3dd2bb904ad8332",
            "next": "90bb606ec72e90dd0eb236f3f3dd2bb904ad8332"
        },
        "commit_message": "Fix tests\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "90bb606ec72e90dd0eb236f3f3dd2bb904ad8332": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "protected Histogram net.openhft.chronicle.core.jlbh.JLBH.createHistogram()"
                ]
            },
            "0bda44376fd7203f343ab4508d664bf0391c6d4f": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "protected Histogram net.openhft.chronicle.core.jlbh.JLBH.createHistogram()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "8656b3ebf44a1bbd836bbd03cc16dd6d39887040",
        "previous_commit": "f598adb8e133e8b17e6d374b735ea10976aea4b2",
        "date": 1606146612,
        "releases": {
            "previous": "8656b3ebf44a1bbd836bbd03cc16dd6d39887040",
            "next": "8656b3ebf44a1bbd836bbd03cc16dd6d39887040"
        },
        "commit_message": "Reduce warnings when a queue is slow to close, closes https://github.com/OpenHFT/Chronicle-Queue/issues/759\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8656b3ebf44a1bbd836bbd03cc16dd6d39887040": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)"
                ]
            },
            "f598adb8e133e8b17e6d374b735ea10976aea4b2": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.TracingReferenceCounted.release(ReferenceOwner id)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "bc800c76a97be65707987591d3ace2f58ccfc569",
        "previous_commit": "ed65b0e7845ae3caf13b92a588e65baca6a8c868",
        "date": 1552663960,
        "releases": {
            "previous": "bc800c76a97be65707987591d3ace2f58ccfc569",
            "next": "bc800c76a97be65707987591d3ace2f58ccfc569"
        },
        "commit_message": "Added support for testing cool CPUs, https://github.com/OpenHFT/Chronicle-Core/issues/83\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "bc800c76a97be65707987591d3ace2f58ccfc569": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long appendBase10(long address, long num)"
                ]
            },
            "ed65b0e7845ae3caf13b92a588e65baca6a8c868": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long appendBase10(long address, long num)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "0ffaa668897c0e8556d47f691a3c21bb29b7ddac",
        "previous_commit": "28e9942015b1d3591745e13e587533ac9ab9184c",
        "date": 1565800975,
        "releases": {
            "previous": "0ffaa668897c0e8556d47f691a3c21bb29b7ddac",
            "next": "0ffaa668897c0e8556d47f691a3c21bb29b7ddac"
        },
        "commit_message": "Add support for license checking, closes https://github.com/OpenHFT/Chronicle-Core/issues/86\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0ffaa668897c0e8556d47f691a3c21bb29b7ddac": {
                "src/main/java/net/openhft/chronicle/core/util/LicenseCheck.java": [
                    "public static void check(String product, Class caller)"
                ]
            },
            "28e9942015b1d3591745e13e587533ac9ab9184c": {
                "src/main/java/net/openhft/chronicle/core/util/LicenseCheck.java": [
                    "public static void check(String product, Class caller)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "7f6801a6a23c33e9b2c2cb8a7a0dbc31d8d22e91",
        "previous_commit": "d5a947f9883b8e769207d78f8c35bbe9024f9803",
        "date": 1570720687,
        "releases": {
            "previous": "7f6801a6a23c33e9b2c2cb8a7a0dbc31d8d22e91",
            "next": "7f6801a6a23c33e9b2c2cb8a7a0dbc31d8d22e91"
        },
        "commit_message": "return the intercepting value.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7f6801a6a23c33e9b2c2cb8a7a0dbc31d8d22e91": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T intercepting(@NotNull Class<T> tClass, @NotNull BiConsumer<String, Object[]> consumer, T t)"
                ]
            },
            "d5a947f9883b8e769207d78f8c35bbe9024f9803": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T intercepting(@NotNull Class<T> tClass, @NotNull BiConsumer<String, Object[]> consumer, T t)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "7c53d2dccf25e82541164aa5b73de2bf3d8f010f",
        "previous_commit": "944023bcf339a5a0760f833813a9ef47942aac16",
        "date": 1546224143,
        "releases": {
            "previous": "7c53d2dccf25e82541164aa5b73de2bf3d8f010f",
            "next": "7c53d2dccf25e82541164aa5b73de2bf3d8f010f"
        },
        "commit_message": "make findTarget gradle aware\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7c53d2dccf25e82541164aa5b73de2bf3d8f010f": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static String findTarget()"
                ]
            },
            "944023bcf339a5a0760f833813a9ef47942aac16": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static String findTarget()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "26c6df77fcd81be55317200cbca3af10956a352a",
        "previous_commit": "8180166e89d5b5d5050e5e41b5488f4961ec2e9e",
        "date": 1576521355,
        "releases": {
            "previous": "26c6df77fcd81be55317200cbca3af10956a352a",
            "next": "26c6df77fcd81be55317200cbca3af10956a352a"
        },
        "commit_message": "Added support for chained method reader/writers, https://github.com/OpenHFT/Chronicle-Wire/issues/152\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "26c6df77fcd81be55317200cbca3af10956a352a": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "private static <T> void addInterface(Set<Class> classes, Class<T> tClass)"
                ]
            },
            "8180166e89d5b5d5050e5e41b5488f4961ec2e9e": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "private static <T> void addInterface(Set<Class> classes, Class<T> tClass)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "0cfcd46baca75b610b7e14051af5018f2145988e",
        "previous_commit": "601c24bc73ea349e1cda9ba14c4b999a8cb75b8b",
        "date": 1610060638,
        "releases": {
            "previous": "0cfcd46baca75b610b7e14051af5018f2145988e",
            "next": "0cfcd46baca75b610b7e14051af5018f2145988e"
        },
        "commit_message": "VM crash on Zing when calculating max direct memory #186\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0cfcd46baca75b610b7e14051af5018f2145988e": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static long maxDirectMemory0()"
                ]
            },
            "601c24bc73ea349e1cda9ba14c4b999a8cb75b8b": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static long maxDirectMemory0()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b7d609ea80ace25a7bfe5e49e6db42c0e09bb837",
        "previous_commit": "09b100ecbb665cffb3bd5b191e5d791d73030365",
        "date": 1591261104,
        "releases": {
            "previous": "b7d609ea80ace25a7bfe5e49e6db42c0e09bb837",
            "next": "b7d609ea80ace25a7bfe5e49e6db42c0e09bb837"
        },
        "commit_message": "Added a FlakyTestRunner, https://github.com/OpenHFT/Chronicle-Core/issues/120\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b7d609ea80ace25a7bfe5e49e6db42c0e09bb837": {
                "src/main/java/net/openhft/chronicle/core/FlakyTestRunner.java": [
                    "public static <T extends Throwable> void run(RunnableThrows<T> rt)"
                ]
            },
            "09b100ecbb665cffb3bd5b191e5d791d73030365": {
                "src/main/java/net/openhft/chronicle/core/FlakyTestRunner.java": [
                    "public static <T extends Throwable> void run(RunnableThrows<T> rt)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "5b17d24956a71699dc065b4c47c8bbdfcd7e3e91",
        "previous_commit": "de1dc46e18feb959523d12c7e434cd042a96c6f7",
        "date": 1592555853,
        "releases": {
            "previous": "5b17d24956a71699dc065b4c47c8bbdfcd7e3e91",
            "next": "5b17d24956a71699dc065b4c47c8bbdfcd7e3e91"
        },
        "commit_message": "Code tidy\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5b17d24956a71699dc065b4c47c8bbdfcd7e3e91": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void safepoint()"
                ]
            },
            "de1dc46e18feb959523d12c7e434cd042a96c6f7": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void safepoint()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "30ca9e3db7e268707e9bcf63c6de32ef52d8a9b4",
        "previous_commit": "5028d688d347d3ad2d6bd62c68b776a35d5668bb",
        "date": 1569412066,
        "releases": {
            "previous": "30ca9e3db7e268707e9bcf63c6de32ef52d8a9b4",
            "next": "30ca9e3db7e268707e9bcf63c6de32ef52d8a9b4"
        },
        "commit_message": "Fixed StreamingDataInput.read(byte[], offset, length) was ignoring the offset, closes https://github.com/OpenHFT/Chronicle-Map/issues/183\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "30ca9e3db7e268707e9bcf63c6de32ef52d8a9b4": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static <V> V getValue(@NotNull Object obj, @NotNull String name)"
                ]
            },
            "5028d688d347d3ad2d6bd62c68b776a35d5668bb": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static <V> V getValue(@NotNull Object obj, @NotNull String name)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d18065e65c2258809be25943d006b5d14bf61c72",
        "previous_commit": "3a7668e26ff52d59b21ae5cca08dc59be3dbed9d",
        "date": 1601658119,
        "releases": {
            "previous": "d18065e65c2258809be25943d006b5d14bf61c72",
            "next": "d18065e65c2258809be25943d006b5d14bf61c72"
        },
        "commit_message": "Add logging for objects with a high reserve count\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d18065e65c2258809be25943d006b5d14bf61c72": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.reserve(ReferenceOwner id)"
                ]
            },
            "3a7668e26ff52d59b21ae5cca08dc59be3dbed9d": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.reserve(ReferenceOwner id)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2714c364dc97750d242fac27c844b14748666cef",
        "previous_commit": "9ed7cea6b794445cd3639bf2d2172046c2ebdba6",
        "date": 1530012821,
        "releases": {
            "previous": "2714c364dc97750d242fac27c844b14748666cef",
            "next": "2714c364dc97750d242fac27c844b14748666cef"
        },
        "commit_message": "fixed https://github.com/OpenHFT/Chronicle-Core/issues/72\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2714c364dc97750d242fac27c844b14748666cef": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void resetExceptionHandlers()"
                ]
            },
            "9ed7cea6b794445cd3639bf2d2172046c2ebdba6": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void resetExceptionHandlers()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "fee5a6fe14470ea738e85cf9f7458ff81dbee0ca",
        "previous_commit": "c70a185ad17271cdc3e08c56d620eac840bd65b2",
        "date": 1693493437,
        "releases": {
            "previous": "fee5a6fe14470ea738e85cf9f7458ff81dbee0ca",
            "next": "fee5a6fe14470ea738e85cf9f7458ff81dbee0ca"
        },
        "commit_message": "Handle compact strings disabled (#572)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "fee5a6fe14470ea738e85cf9f7458ff81dbee0ca": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static byte[] net.openhft.chronicle.core.util.StringUtils.extractBytes(@NotNull String s)"
                ]
            },
            "c70a185ad17271cdc3e08c56d620eac840bd65b2": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "public static byte[] net.openhft.chronicle.core.util.StringUtils.extractBytes(@NotNull String s)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "ea939964fdbcb14c5c0943c19755d5d6fbc274dc",
        "previous_commit": "834e69df4ce66808de74f26dd40b8a7cb8e3b1d6",
        "date": 1647966520,
        "releases": {
            "previous": "ea939964fdbcb14c5c0943c19755d5d6fbc274dc",
            "next": "ea939964fdbcb14c5c0943c19755d5d6fbc274dc"
        },
        "commit_message": "Add fallback System Properties for Greeting messages, Fix #364 (#365)\n\n* Add fallback System Properties for Greeting messages, Fix #364\r\n\r\n* Simplify call",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "ea939964fdbcb14c5c0943c19755d5d6fbc274dc": {
                "src/main/java/net/openhft/chronicle/core/internal/announcer/InternalAnnouncer.java": [
                    "private static void net.openhft.chronicle.core.internal.announcer.InternalAnnouncer.announceJvm()"
                ]
            },
            "834e69df4ce66808de74f26dd40b8a7cb8e3b1d6": {
                "src/main/java/net/openhft/chronicle/core/internal/announcer/InternalAnnouncer.java": [
                    "private static void net.openhft.chronicle.core.internal.announcer.InternalAnnouncer.announceJvm()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f598adb8e133e8b17e6d374b735ea10976aea4b2",
        "previous_commit": "4a310adb7fa3031f551042f8026576c20db64587",
        "date": 1606144444,
        "releases": {
            "previous": "f598adb8e133e8b17e6d374b735ea10976aea4b2",
            "next": "f598adb8e133e8b17e6d374b735ea10976aea4b2"
        },
        "commit_message": "changed -> System.err.println(clazz.getName() + \" - \" + fc + \" not closed on interrupt\") to debug becuase it can occur on normal shutdown conditions. It should not be an ERROR\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f598adb8e133e8b17e6d374b735ea10976aea4b2": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void doNotCloseOnInterrupt8(Class clazz, FileChannel fc)"
                ]
            },
            "4a310adb7fa3031f551042f8026576c20db64587": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void doNotCloseOnInterrupt8(Class clazz, FileChannel fc)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "dcf11cf7dc2f44311357b5fc6f608420c9812862",
        "previous_commit": "2e78dfe28b29ed3981e492bad146c09d16b869b9",
        "date": 1602154587,
        "releases": {
            "previous": "dcf11cf7dc2f44311357b5fc6f608420c9812862",
            "next": "dcf11cf7dc2f44311357b5fc6f608420c9812862"
        },
        "commit_message": "Ensure cleanup is called exactly once.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "dcf11cf7dc2f44311357b5fc6f608420c9812862": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public synchronized void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanup(T value)"
                ]
            },
            "2e78dfe28b29ed3981e492bad146c09d16b869b9": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThreadLocal.java": [
                    "public void net.openhft.chronicle.core.threads.CleaningThreadLocal<T>.cleanup(T value)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "7f1e159cd365d58ed263a9746fe9610007ba3ef6",
        "previous_commit": "bb5aaf451202ac89af7f34cced103686289f72c3",
        "date": 1628791177,
        "releases": {
            "previous": "7f1e159cd365d58ed263a9746fe9610007ba3ef6",
            "next": "7f1e159cd365d58ed263a9746fe9610007ba3ef6"
        },
        "commit_message": "Fix math error in UnsafeText.asDouble\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7f1e159cd365d58ed263a9746fe9610007ba3ef6": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "private static double net.openhft.chronicle.core.io.UnsafeText.asDouble(long value, int exp, boolean negative, int deci)"
                ]
            },
            "bb5aaf451202ac89af7f34cced103686289f72c3": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "private static double net.openhft.chronicle.core.io.UnsafeText.asDouble(long value, int exp, boolean negative, int deci)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b11133630a99ea05d67954d2b37b169a4374db92",
        "previous_commit": "67400736c16edaaa1f773a4c2b4d08bea85c46d6",
        "date": 1524489345,
        "releases": {
            "previous": "b11133630a99ea05d67954d2b37b169a4374db92",
            "next": "b11133630a99ea05d67954d2b37b169a4374db92"
        },
        "commit_message": "* Add ability customise histograms and change the defaults. Closes #54.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b11133630a99ea05d67954d2b37b169a4374db92": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public NanoSampler net.openhft.chronicle.core.jlbh.JLBH.addProbe(String name)"
                ]
            },
            "67400736c16edaaa1f773a4c2b4d08bea85c46d6": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public NanoSampler net.openhft.chronicle.core.jlbh.JLBH.addProbe(String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "b68c0335c4f4e8f10ac51a166176224ca79eb118",
        "previous_commit": "6e42cf23afc919f43430c81ab2b08f5f858c2a90",
        "date": 1585816981,
        "releases": {
            "previous": "b68c0335c4f4e8f10ac51a166176224ca79eb118",
            "next": "b68c0335c4f4e8f10ac51a166176224ca79eb118"
        },
        "commit_message": "Support overriding the `system.properties`, https://github.com/OpenHFT/Chronicle-Core/issues/97\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b68c0335c4f4e8f10ac51a166176224ca79eb118": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void loadSystemProperties(String name)"
                ]
            },
            "6e42cf23afc919f43430c81ab2b08f5f858c2a90": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void loadSystemProperties(String name)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b391901a25176ea7278126d583e98691e25b893c",
        "previous_commit": "e45d5013addbbfc24dd55f1d6458bfa1b1e1648c",
        "date": 1593530957,
        "releases": {
            "previous": "b391901a25176ea7278126d583e98691e25b893c",
            "next": "b391901a25176ea7278126d583e98691e25b893c"
        },
        "commit_message": "Code tidy\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b391901a25176ea7278126d583e98691e25b893c": {
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "private String net.openhft.chronicle.core.util.Histogram.p(double v)"
                ]
            },
            "e45d5013addbbfc24dd55f1d6458bfa1b1e1648c": {
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "private String net.openhft.chronicle.core.util.Histogram.p(double v)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "969eda235de0abc334bb2d4095df1f28c1a3de50",
        "previous_commit": "7405aeb8016ff65eaa71a474b235199b424ef784",
        "date": 1641402950,
        "releases": {
            "previous": "969eda235de0abc334bb2d4095df1f28c1a3de50",
            "next": "969eda235de0abc334bb2d4095df1f28c1a3de50"
        },
        "commit_message": "Issue/320 (#321)\n\n* Add a new method AbstractCloseable:assertCloseable, Fix #320\r\n\r\n* Add a test",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "969eda235de0abc334bb2d4095df1f28c1a3de50": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ]
            },
            "7405aeb8016ff65eaa71a474b235199b424ef784": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "4eec270f65111f6dce1bb0dbe81d7cfafa4e1194",
        "previous_commit": "d2881e0f4e6eb10489edf13ac0adafb96ca91510",
        "date": 1604998836,
        "releases": {
            "previous": "4eec270f65111f6dce1bb0dbe81d7cfafa4e1194",
            "next": "4eec270f65111f6dce1bb0dbe81d7cfafa4e1194"
        },
        "commit_message": "Add eventParameters and allow many events to pass\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "4eec270f65111f6dce1bb0dbe81d7cfafa4e1194": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/http/HttpUtil.java": [
                    "public static void send(@NotNull final String urlString, @NotNull final String json)"
                ]
            },
            "d2881e0f4e6eb10489edf13ac0adafb96ca91510": {
                "src/main/java/net/openhft/chronicle/core/internal/analytics/http/HttpUtil.java": [
                    "public static void send(@NotNull final String urlString, @NotNull final String json)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f4ca80b30cf16ae3fdfa51ea65461e3120f39d3a",
        "previous_commit": "59e9aa8e34ad40f8a0076b0735c122bc20d1ad36",
        "date": 1646207476,
        "releases": {
            "previous": "f4ca80b30cf16ae3fdfa51ea65461e3120f39d3a",
            "next": "f4ca80b30cf16ae3fdfa51ea65461e3120f39d3a"
        },
        "commit_message": "Added support for generic return types from GenericReflection.getReturnType() #351\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f4ca80b30cf16ae3fdfa51ea65461e3120f39d3a": {
                "src/main/java/net/openhft/chronicle/core/util/GenericReflection.java": [
                    "public static Type getReturnType(Method method, Type type)"
                ]
            },
            "59e9aa8e34ad40f8a0076b0735c122bc20d1ad36": {
                "src/main/java/net/openhft/chronicle/core/util/GenericReflection.java": [
                    "public static Type getReturnType(Method m, Class forClass)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "555852888374bd8faee1d99e41406eaa4ebea858",
        "previous_commit": "8ff843f54d6b7dc3ee3ebb1d7383234f7e49fda8",
        "date": 1593179968,
        "releases": {
            "previous": "555852888374bd8faee1d99e41406eaa4ebea858",
            "next": "555852888374bd8faee1d99e41406eaa4ebea858"
        },
        "commit_message": "Use a counter to ensure the releasePendingResources() doesn't return while the background thread is busy.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "555852888374bd8faee1d99e41406eaa4ebea858": {
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "public static void releasePendingResources()"
                ]
            },
            "8ff843f54d6b7dc3ee3ebb1d7383234f7e49fda8": {
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "public static void releasePendingResources()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "7d54516dec0823a869c4c91378dc93bb6f620a3b",
        "previous_commit": "22347d27520079903841e80dfea7430a7702cdbb",
        "date": 1592213751,
        "releases": {
            "previous": "7d54516dec0823a869c4c91378dc93bb6f620a3b",
            "next": "7d54516dec0823a869c4c91378dc93bb6f620a3b"
        },
        "commit_message": "Added CleaningThreadLocal and CleaningThread to clean thread local resources on exit, https://github.com/OpenHFT/Chronicle-Core/issues/122\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7d54516dec0823a869c4c91378dc93bb6f620a3b": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            },
            "22347d27520079903841e80dfea7430a7702cdbb": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "a73f2da26ee0f716440706d4a178b166b8ad2ce3",
        "previous_commit": "833c0e17c3b37353996eb4ac8e6fc688f700dde6",
        "date": 1590501964,
        "releases": {
            "previous": "a73f2da26ee0f716440706d4a178b166b8ad2ce3",
            "next": "a73f2da26ee0f716440706d4a178b166b8ad2ce3"
        },
        "commit_message": "Added AbstractCloseable so resource lifecycles can be standardised, https://github.com/OpenHFT/Chronicle-Core/issues/116\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a73f2da26ee0f716440706d4a178b166b8ad2ce3": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ]
            },
            "833c0e17c3b37353996eb4ac8e6fc688f700dde6": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "59d666f88a622de57b094c2e6a2b9c36682ad419",
        "previous_commit": "755ff466b040f13be532cdd4404f1d513c7b935d",
        "date": 1658321043,
        "releases": {
            "previous": "59d666f88a622de57b094c2e6a2b9c36682ad419",
            "next": "59d666f88a622de57b094c2e6a2b9c36682ad419"
        },
        "commit_message": "Delegate checking throwExceptionIfReleased() so it can produce a more detailed exception, if available.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "59d666f88a622de57b094c2e6a2b9c36682ad419": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.throwExceptionIfReleased()"
                ]
            },
            "755ff466b040f13be532cdd4404f1d513c7b935d": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractReferenceCounted.java": [
                    "public void net.openhft.chronicle.core.io.AbstractReferenceCounted.throwExceptionIfReleased()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "05a5e220ae11927261e8f47861ec6b6ca9296dfc",
        "previous_commit": "fd63d800a5f882adb43d3d149c6bffe4727b77c4",
        "date": 1508943644,
        "releases": {
            "previous": "05a5e220ae11927261e8f47861ec6b6ca9296dfc",
            "next": "05a5e220ae11927261e8f47861ec6b6ca9296dfc"
        },
        "commit_message": "Only write to the slf4j\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "05a5e220ae11927261e8f47861ec6b6ca9296dfc": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void signalHandler(SignalHandler signalHandler)"
                ]
            },
            "fd63d800a5f882adb43d3d149c6bffe4727b77c4": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void signalHandler(SignalHandler signalHandler)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "c72313212b123022b23a894eda5e6db37e7a6471",
        "previous_commit": "99099487af6bdcbfb76cb06aa822a72a13ac954d",
        "date": 1566128945,
        "releases": {
            "previous": "c72313212b123022b23a894eda5e6db37e7a6471",
            "next": "c72313212b123022b23a894eda5e6db37e7a6471"
        },
        "commit_message": "StackTrace does not trigger Jvm.hasExceptions\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c72313212b123022b23a894eda5e6db37e7a6471": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean hasException(@NotNull Map<ExceptionKey, Integer> exceptions)"
                ]
            },
            "99099487af6bdcbfb76cb06aa822a72a13ac954d": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static boolean hasException(@NotNull Map<ExceptionKey, Integer> exceptions)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "315ceb5fa64889025b3bbb7754e69045372c2c19",
        "previous_commit": "5e6d8034a3b0421f1b5c7b82c65d7fe7cc7d5b03",
        "date": 1599666555,
        "releases": {
            "previous": "315ceb5fa64889025b3bbb7754e69045372c2c19",
            "next": "315ceb5fa64889025b3bbb7754e69045372c2c19"
        },
        "commit_message": "Add Instant constructor for SetTimeProvider\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "315ceb5fa64889025b3bbb7754e69045372c2c19": {
                "src/main/java/net/openhft/chronicle/core/time/SetTimeProvider.java": [
                    "static long net.openhft.chronicle.core.time.SetTimeProvider.initialNanos(String timestamp)"
                ]
            },
            "5e6d8034a3b0421f1b5c7b82c65d7fe7cc7d5b03": {
                "src/main/java/net/openhft/chronicle/core/time/SetTimeProvider.java": [
                    "static long net.openhft.chronicle.core.time.SetTimeProvider.initialNanos(String timestamp)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "91272de397485ff768cba4e019e0ab4a39467726",
        "previous_commit": "992c9d545cd7b1fbf96e488bb0ce662a15923eb1",
        "date": 1615814231,
        "releases": {
            "previous": "91272de397485ff768cba4e019e0ab4a39467726",
            "next": "91272de397485ff768cba4e019e0ab4a39467726"
        },
        "commit_message": "Sample System properties\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "91272de397485ff768cba4e019e0ab4a39467726": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "static boolean isArm0()"
                ]
            },
            "992c9d545cd7b1fbf96e488bb0ce662a15923eb1": {
                "src/main/java/net/openhft/chronicle/core/Bootstrap.java": [
                    "static boolean isArm0()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "29e05a9950510b726d14a42714b5d8d558e7a053",
        "previous_commit": "5b75738555c4af3b9b323d76de40276f9d4215e7",
        "date": 1640704672,
        "releases": {
            "previous": "29e05a9950510b726d14a42714b5d8d558e7a053",
            "next": "29e05a9950510b726d14a42714b5d8d558e7a053"
        },
        "commit_message": "Rename long variable name\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "29e05a9950510b726d14a42714b5d8d558e7a053": {
                "src/main/java/net/openhft/chronicle/core/StackTrace.java": [
                    "public static StackTrace net.openhft.chronicle.core.StackTrace.forThread(Thread t)"
                ]
            },
            "5b75738555c4af3b9b323d76de40276f9d4215e7": {
                "src/main/java/net/openhft/chronicle/core/StackTrace.java": [
                    "public static StackTrace net.openhft.chronicle.core.StackTrace.forThread(Thread t)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "805d872c64d512e9da12e680d5b3507b53a9071b",
        "previous_commit": "b4e8e56babe54d7c519b63090c62ed3e2569a071",
        "date": 1644419920,
        "releases": {
            "previous": "805d872c64d512e9da12e680d5b3507b53a9071b",
            "next": "805d872c64d512e9da12e680d5b3507b53a9071b"
        },
        "commit_message": "Improve consistency of the Exception thrown by ClassLookup.forName(String name) #345 (#346)\n\n* Improve consistency of the Exception thrown by ClassLookup.forName(String name) #345\r\n\r\n* Improve consistency of the Exception thrown by ClassLookup.forName(String name) #345\r\n\r\n* Improve consistency of the Exception thrown by ClassLookup.forName(String name) #345\r\n\r\nCo-authored-by: Peter Lawrey <peter.lawrey@chronicle.software>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "805d872c64d512e9da12e680d5b3507b53a9071b": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private synchronized Class<?> net.openhft.chronicle.core.pool.ClassAliasPool.forName0(@NotNull CAPKey key)"
                ]
            },
            "b4e8e56babe54d7c519b63090c62ed3e2569a071": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private synchronized Class<?> net.openhft.chronicle.core.pool.ClassAliasPool.forName0(@NotNull CAPKey key)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "59e9aa8e34ad40f8a0076b0735c122bc20d1ad36",
        "previous_commit": "8224916584022039afa4f9c6d28a3e540eccea97",
        "date": 1645799850,
        "releases": {
            "previous": "59e9aa8e34ad40f8a0076b0735c122bc20d1ad36",
            "next": "59e9aa8e34ad40f8a0076b0735c122bc20d1ad36"
        },
        "commit_message": "Added support for generic return types from GenericReflection.getReturnType() #351\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "59e9aa8e34ad40f8a0076b0735c122bc20d1ad36": {
                "src/main/java/net/openhft/chronicle/core/util/GenericReflection.java": [
                    "public static Type getReturnType(Method m, Class forClass)"
                ]
            },
            "8224916584022039afa4f9c6d28a3e540eccea97": {
                "src/main/java/net/openhft/chronicle/core/util/GenericReflection.java": [
                    "public static Type getReturnType(Method m, Class forClass)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "502a6b1b3a41d55cd9887f84cd20426a2f1ff427",
        "previous_commit": "1b5f39fc0575ebda996dbd94e2541b3b8261e04c",
        "date": 1635231676,
        "releases": {
            "previous": "502a6b1b3a41d55cd9887f84cd20426a2f1ff427",
            "next": "502a6b1b3a41d55cd9887f84cd20426a2f1ff427"
        },
        "commit_message": "rationalise UnsafeMemory.copyMemory functions, optimise performance, fix bugs, improve test coverage\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "502a6b1b3a41d55cd9887f84cd20426a2f1ff427": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public static void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long from, long to, int length)"
                ]
            },
            "1b5f39fc0575ebda996dbd94e2541b3b8261e04c": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public static void net.openhft.chronicle.core.UnsafeMemory.copyMemory(long from, long to, int length)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "833c0e17c3b37353996eb4ac8e6fc688f700dde6",
        "previous_commit": "e20d37d7791580e155dbaee578808c0cc7102b4d",
        "date": 1590501904,
        "releases": {
            "previous": "833c0e17c3b37353996eb4ac8e6fc688f700dde6",
            "next": "833c0e17c3b37353996eb4ac8e6fc688f700dde6"
        },
        "commit_message": "Added AbstractCloseable so resource lifecycles can be standardised, https://github.com/OpenHFT/Chronicle-Core/issues/116\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "833c0e17c3b37353996eb4ac8e6fc688f700dde6": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ]
            },
            "e20d37d7791580e155dbaee578808c0cc7102b4d": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public final void net.openhft.chronicle.core.io.AbstractCloseable.close()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "6f166f81648b40d0dc4d72e2ac074199c3b66094",
        "previous_commit": "a1ab53bd06b4f6ed257f10232734ee178e10d178",
        "date": 1648543891,
        "releases": {
            "previous": "6f166f81648b40d0dc4d72e2ac074199c3b66094",
            "next": "6f166f81648b40d0dc4d72e2ac074199c3b66094"
        },
        "commit_message": "Added support for HttpURLConnection to Closeable.close() #367\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "6f166f81648b40d0dc4d72e2ac074199c3b66094": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            },
            "a1ab53bd06b4f6ed257f10232734ee178e10d178": {
                "src/main/java/net/openhft/chronicle/core/io/Closeable.java": [
                    "static void closeQuietly(@Nullable Object o)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "788ec28e9c493f20a8f2f5094c32ad50dde62fc3",
        "previous_commit": "cf0097f93974420cac0cb0f762d726c200a3695c",
        "date": 1679400582,
        "releases": {
            "previous": "788ec28e9c493f20a8f2f5094c32ad50dde62fc3",
            "next": "788ec28e9c493f20a8f2f5094c32ad50dde62fc3"
        },
        "commit_message": "UnsafeTextTest.testRandom is flaky #493\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "788ec28e9c493f20a8f2f5094c32ad50dde62fc3": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long net.openhft.chronicle.core.io.UnsafeText.appendDouble(long address, double d)"
                ]
            },
            "cf0097f93974420cac0cb0f762d726c200a3695c": {
                "src/main/java/net/openhft/chronicle/core/io/UnsafeText.java": [
                    "public static long net.openhft.chronicle.core.io.UnsafeText.appendDouble(long address, double d)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "ece11ab25c7b781f44a2907df9b80d51f008ec8b",
        "previous_commit": "149cda9bf9473cf83f60079996aa532071abcdd8",
        "date": 1521179658,
        "releases": {
            "previous": "ece11ab25c7b781f44a2907df9b80d51f008ec8b",
            "next": "ece11ab25c7b781f44a2907df9b80d51f008ec8b"
        },
        "commit_message": "Improved recordExceptions to optionally log to SLF4J\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "ece11ab25c7b781f44a2907df9b80d51f008ec8b": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Map<ExceptionKey, Integer> recordExceptions(boolean debug, boolean exceptionsOnly)"
                ]
            },
            "149cda9bf9473cf83f60079996aa532071abcdd8": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static Map<ExceptionKey, Integer> recordExceptions(boolean debug, boolean exceptionsOnly)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "0e839b26342d39727a99e6fda96447c06374fbef",
        "previous_commit": "c895729f869ca4e4fe58eb88bf6cc0c277b034ea",
        "date": 1659434317,
        "releases": {
            "previous": "0e839b26342d39727a99e6fda96447c06374fbef",
            "next": "0e839b26342d39727a99e6fda96447c06374fbef"
        },
        "commit_message": "Allow more time for background resources to be closed\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0e839b26342d39727a99e6fda96447c06374fbef": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ]
            },
            "c895729f869ca4e4fe58eb88bf6cc0c277b034ea": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "public static void net.openhft.chronicle.core.io.AbstractCloseable.assertCloseablesClosed()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "78c567f7ad859e53aa24756f26a1e2e91c519967",
        "previous_commit": "2a22e72b4db9437c493044b7647bba67f0b08ae9",
        "date": 1697675057,
        "releases": {
            "previous": "78c567f7ad859e53aa24756f26a1e2e91c519967",
            "next": "78c567f7ad859e53aa24756f26a1e2e91c519967"
        },
        "commit_message": "Deprecate StringBuilderPool#acquireStringBuilder, add StringBuilderPool#createThreadLocal\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "78c567f7ad859e53aa24756f26a1e2e91c519967": {
                "src/main/java/net/openhft/chronicle/core/io/Wget.java": [
                    "public static CharSequence net.openhft.chronicle.core.io.Wget.url(String url)"
                ]
            },
            "2a22e72b4db9437c493044b7647bba67f0b08ae9": {
                "src/main/java/net/openhft/chronicle/core/io/Wget.java": [
                    "public static CharSequence net.openhft.chronicle.core.io.Wget.url(String url)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "d36e7e1dd249317916a28bd76734c0cfe29eec59",
        "previous_commit": "b756323a0080f99c27268b1dac963c5d8ae11e10",
        "date": 1543921890,
        "releases": {
            "previous": "d36e7e1dd249317916a28bd76734c0cfe29eec59",
            "next": "d36e7e1dd249317916a28bd76734c0cfe29eec59"
        },
        "commit_message": "Added a multi-threading thread sampler tool, https://github.com/OpenHFT/Chronicle-Core/issues/79\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d36e7e1dd249317916a28bd76734c0cfe29eec59": {
                "src/main/java/net/openhft/chronicle/core/threads/JitterSampler.java": [
                    "public static String takeSnapshot(long threshold)"
                ]
            },
            "b756323a0080f99c27268b1dac963c5d8ae11e10": {
                "src/main/java/net/openhft/chronicle/core/threads/JitterSampler.java": [
                    "public static String takeSnapshot(long threshold)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "c06a8851a7cbb5ad7c44334e23449c4cb210e1d0",
        "previous_commit": "0a55904a3b34e615b93de64310f3464fd116be90",
        "date": 1680619390,
        "releases": {
            "previous": "c06a8851a7cbb5ad7c44334e23449c4cb210e1d0",
            "next": "c06a8851a7cbb5ad7c44334e23449c4cb210e1d0"
        },
        "commit_message": "Clean up resources in a thread that has been interrupted\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "c06a8851a7cbb5ad7c44334e23449c4cb210e1d0": {
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "public static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.releasePendingResources()"
                ]
            },
            "0a55904a3b34e615b93de64310f3464fd116be90": {
                "src/main/java/net/openhft/chronicle/core/io/BackgroundResourceReleaser.java": [
                    "public static void net.openhft.chronicle.core.io.BackgroundResourceReleaser.releasePendingResources()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8d9914558b515ea8e5858b725b1ba0386768fcc7",
        "previous_commit": "ae06ad660813d9a0472ab23b3fbfc94aff65f3b6",
        "date": 1517387560,
        "releases": {
            "previous": "8d9914558b515ea8e5858b725b1ba0386768fcc7",
            "next": "8d9914558b515ea8e5858b725b1ba0386768fcc7"
        },
        "commit_message": "commit partially finished jlbh event loop\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8d9914558b515ea8e5858b725b1ba0386768fcc7": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.start()"
                ]
            },
            "ae06ad660813d9a0472ab23b3fbfc94aff65f3b6": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.start()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "98afc37f3be870f225834506331e246026aa32c1",
        "previous_commit": "5e647400c91ee498d23af65c166435ff30780251",
        "date": 1519038107,
        "releases": {
            "previous": "98afc37f3be870f225834506331e246026aa32c1",
            "next": "98afc37f3be870f225834506331e246026aa32c1"
        },
        "commit_message": "Add support for mocked chained methods.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "98afc37f3be870f225834506331e246026aa32c1": {
                "src/main/java/net/openhft/chronicle/core/util/AbstractInvocationHandler.java": [
                    "public final Object net.openhft.chronicle.core.util.AbstractInvocationHandler.invoke(Object proxy, Method method, Object[] args)"
                ]
            },
            "5e647400c91ee498d23af65c166435ff30780251": {
                "src/main/java/net/openhft/chronicle/core/util/AbstractInvocationHandler.java": [
                    "public final Object net.openhft.chronicle.core.util.AbstractInvocationHandler.invoke(Object proxy, Method method, Object[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "f76905682eff0222b0201b15ec0dc5b7f58cb208",
        "previous_commit": "740f02f776a73d516fe70fc24934fcf4e9452c32",
        "date": 1677107642,
        "releases": {
            "previous": "f76905682eff0222b0201b15ec0dc5b7f58cb208",
            "next": "f76905682eff0222b0201b15ec0dc5b7f58cb208"
        },
        "commit_message": "Consolidate asDouble implementations, run perf test in run-benchmarks #479\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f76905682eff0222b0201b15ec0dc5b7f58cb208": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double net.openhft.chronicle.core.Maths.asDouble(@NonNegative long value, int exponent, boolean negative, int decimalPlaces)"
                ]
            },
            "740f02f776a73d516fe70fc24934fcf4e9452c32": {
                "src/main/java/net/openhft/chronicle/core/Maths.java": [
                    "public static double net.openhft.chronicle.core.Maths.asDouble(@NonNegative long value, int exponent, boolean negative, int decimalPlaces)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "50f13b4a5344163c9de768ad10420ff28b1fbf74",
        "previous_commit": "dc16c3df8cabdea29b39425de8381742779e6a73",
        "date": 1604617715,
        "releases": {
            "previous": "50f13b4a5344163c9de768ad10420ff28b1fbf74",
            "next": "50f13b4a5344163c9de768ad10420ff28b1fbf74"
        },
        "commit_message": "tidy logging\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "50f13b4a5344163c9de768ad10420ff28b1fbf74": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void addToClassPath(Class clazz)"
                ]
            },
            "dc16c3df8cabdea29b39425de8381742779e6a73": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void addToClassPath(Class clazz)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "fe63ffee4cc07ee75fa80d5792e3d480d475606d",
        "previous_commit": "cd77ff29817d3e0fd49326a469a3498bbdd378ba",
        "date": 1605922140,
        "releases": {
            "previous": "fe63ffee4cc07ee75fa80d5792e3d480d475606d",
            "next": "fe63ffee4cc07ee75fa80d5792e3d480d475606d"
        },
        "commit_message": "add comment, deduplicate and apply some IntelliJ analysis findings\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "fe63ffee4cc07ee75fa80d5792e3d480d475606d": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadHints.java": [
                    "public static void net.openhft.chronicle.core.threads.ThreadHints.onSpinWait()"
                ]
            },
            "cd77ff29817d3e0fd49326a469a3498bbdd378ba": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadHints.java": [
                    "public static void net.openhft.chronicle.core.threads.ThreadHints.onSpinWait()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "3c3f4228ac874baeb7b322bbd60d8972fd0f3ac8",
        "previous_commit": "e944792845cde8c649fd568795b8e219a43a6985",
        "date": 1532442677,
        "releases": {
            "previous": "3c3f4228ac874baeb7b322bbd60d8972fd0f3ac8",
            "next": "3c3f4228ac874baeb7b322bbd60d8972fd0f3ac8"
        },
        "commit_message": "More reflective magic to remove warning\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3c3f4228ac874baeb7b322bbd60d8972fd0f3ac8": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ]
            },
            "e944792845cde8c649fd568795b8e219a43a6985": {
                "src/main/java/net/openhft/chronicle/core/cleaner/impl/reflect/ReflectionBasedByteBufferCleanerService.java": [
                    "public void net.openhft.chronicle.core.cleaner.impl.reflect.ReflectionBasedByteBufferCleanerService.clean(final ByteBuffer buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "0d74107248270a292a897d71a30d360014e4c159",
        "previous_commit": "2c8000b55197cca8728a6dbaeb20bee7885576d3",
        "date": 1613402109,
        "releases": {
            "previous": "0d74107248270a292a897d71a30d360014e4c159",
            "next": "0d74107248270a292a897d71a30d360014e4c159"
        },
        "commit_message": "Allow ThreadLocalisedExceptionHandler to be passed to the defaultHandler setter\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "0d74107248270a292a897d71a30d360014e4c159": {
                "src/main/java/net/openhft/chronicle/core/onoes/ThreadLocalisedExceptionHandler.java": [
                    "public ThreadLocalisedExceptionHandler net.openhft.chronicle.core.onoes.ThreadLocalisedExceptionHandler.defaultHandler(ExceptionHandler defaultHandler)"
                ]
            },
            "2c8000b55197cca8728a6dbaeb20bee7885576d3": {
                "src/main/java/net/openhft/chronicle/core/onoes/ThreadLocalisedExceptionHandler.java": [
                    "public ThreadLocalisedExceptionHandler net.openhft.chronicle.core.onoes.ThreadLocalisedExceptionHandler.defaultHandler(ExceptionHandler defaultHandler)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "9b2c4f4680e25da22cb5f568cbb3b310048dfbf7",
        "previous_commit": "d1fc4fe8c1396547f4550eb224aadd2859ce60b2",
        "date": 1604043980,
        "releases": {
            "previous": "9b2c4f4680e25da22cb5f568cbb3b310048dfbf7",
            "next": "9b2c4f4680e25da22cb5f568cbb3b310048dfbf7"
        },
        "commit_message": "better paths for Windows\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "9b2c4f4680e25da22cb5f568cbb3b310048dfbf7": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void addToClassPath(Class clazz)"
                ]
            },
            "d1fc4fe8c1396547f4550eb224aadd2859ce60b2": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void addToClassPath(Class clazz)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "4c1b33d49f432c18f54a9954802ed8f22d1acb5a",
        "previous_commit": "7dc0a83f53a15deda2db03526c7c3ee8dd4ab991",
        "date": 1640936674,
        "releases": {
            "previous": "4c1b33d49f432c18f54a9954802ed8f22d1acb5a",
            "next": "4c1b33d49f432c18f54a9954802ed8f22d1acb5a"
        },
        "commit_message": "Issue/301 (#308)\n\n* Added support for using a LongValue as a timed lock which can check if a thread is running #301\r\n\r\n* Added support for using a LongValue as a timed lock which can check if a thread is running #301\r\n\r\n* Added support for using a LongValue as a timed lock which can check if a thread is running #301\r\n\r\n* Added support for using a LongValue as a timed lock which can check if a thread is running https://github.com/OpenHFT/Chronicle-Core/issues/301\r\n\r\n* Added support for using a LongValue as a timed lock which can check if a thread is running https://github.com/OpenHFT/Chronicle-Core/issues/301\r\n\r\n* Added support for using a LongValue as a timed lock which can check if a thread is running https://github.com/OpenHFT/Chronicle-Core/issues/301\r\n\r\n* Added support for using a LongValue as a timed lock which can check if a thread is running https://github.com/OpenHFT/Chronicle-Core/issues/301\r\n\r\n* Added support for using a LongValue as a timed lock which can check if a thread is running https://github.com/OpenHFT/Chronicle-Core/issues/301\r\n\r\n* Added support for using a LongValue as a timed lock which can check if a thread is running https://github.com/OpenHFT/Chronicle-Core/issues/301\r\n\r\n* Log the dump of exceptions as maven can ignore System.err https://github.com/OpenHFT/Chronicle-Core/issues/301\r\n\r\n* Log the dump of exceptions as maven can ignore System.err https://github.com/OpenHFT/Chronicle-Core/issues/301\r\n\r\n* Log the dump of exceptions as maven can ignore System.err https://github.com/OpenHFT/Chronicle-Core/issues/301\r\n\r\n* JLBH depends on core not the other way around, fixed-? by: org.codehaus.plexus.util.dag.CycleDetectedException: Edge between \u2019Vertex{label=\u2018net.openhft:jlbh:1.22ea5-SNAPSHOT\u2019}' and \u2019Vertex{label=\u2018net.openhft:chronicle-core:2.22ea20-SNAPSHOT\u2019}' introduces to cycle in the graph net.openhft:chronicle-core:2.22ea20-SNAPSHOT --> net.openhft:jlbh:1.22ea5-SNAPSHOT --> net.openhft:chronicle-core:2.22ea20-SNAPSHOT\r\n         [14:09:43][Step\r\n\r\n* Issue/309 (#310)\r\n\r\n* Document certain classes as thread-confined, Fix #309\r\n\r\n* Fix typo\r\n\r\n* Updating to bom version 2.22ea73\r\n\r\n* [maven-release-plugin] prepare release chronicle-core-2.22ea20\r\n\r\n* [maven-release-plugin] prepare for next development iteration\r\n\r\n* Reverting back to bom version 2.22ea-SNAPSHOT\r\n\r\n* latest third-party-bom and fix up run-benchmarks\r\n\r\n* Correct NanoSample documentation, Fix #313 (#314)\r\n\r\n* Rename long variable name\r\n\r\n* Updating to bom version 2.22ea74\r\n\r\n* [maven-release-plugin] prepare release chronicle-core-2.22ea21\r\n\r\n* [maven-release-plugin] prepare for next development iteration\r\n\r\n* Reverting back to bom version 2.22ea-SNAPSHOT\r\n\r\n* Added support for using a LongValue as a timed lock which can check if a thread is running #301\r\n\r\n* Added support for using a LongValue as a timed lock which can check if a thread is running #301\r\n\r\n* Added support for using a LongValue as a timed lock which can check if a thread is running #301\r\n\r\n* Added support for using a LongValue as a timed lock which can check if a thread is running https://github.com/OpenHFT/Chronicle-Core/issues/301\r\n\r\n* Added support for using a LongValue as a timed lock which can check if a thread is running https://github.com/OpenHFT/Chronicle-Core/issues/301\r\n\r\n* Added support for using a LongValue as a timed lock which can check if a thread is running https://github.com/OpenHFT/Chronicle-Core/issues/301\r\n\r\n* Added support for using a LongValue as a timed lock which can check if a thread is running https://github.com/OpenHFT/Chronicle-Core/issues/301\r\n\r\n* Added support for using a LongValue as a timed lock which can check if a thread is running https://github.com/OpenHFT/Chronicle-Core/issues/301\r\n\r\n* Added support for using a LongValue as a timed lock which can check if a thread is running https://github.com/OpenHFT/Chronicle-Core/issues/301\r\n\r\n* Log the dump of exceptions as maven can ignore System.err https://github.com/OpenHFT/Chronicle-Core/issues/301\r\n\r\n* Log the dump of exceptions as maven can ignore System.err https://github.com/OpenHFT/Chronicle-Core/issues/301\r\n\r\n* Rebased and run tests on windows, https://github.com/OpenHFT/Chronicle-Core/tree/issue/301\r\n\r\n* Rebased and run tests on windows, https://github.com/OpenHFT/Chronicle-Core/tree/issue/301\r\n\r\n* Add default implementations for the current thread, https://github.com/OpenHFT/Chronicle-Core/tree/issue/301\r\n\r\n* Add default implementations for the current thread, https://github.com/OpenHFT/Chronicle-Core/tree/issue/301\r\n\r\nCo-authored-by: Peter Lawrey <peter.lawrey@chronicle.software>\r\nCo-authored-by: Rob Austin <rob.austin@boundedbuffer.co.uk>\r\nCo-authored-by: Per-\u00c5ke Minborg <minborg@speedment.com>\r\nCo-authored-by: teamcity_hft <teamcity@chronicle.software>\r\nCo-authored-by: Jerry Shea <jerry.shea@chronicle.software>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "4c1b33d49f432c18f54a9954802ed8f22d1acb5a": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void net.openhft.chronicle.core.Jvm.dumpException(@NotNull final Map<ExceptionKey, Integer> exceptions)"
                ]
            },
            "7dc0a83f53a15deda2db03526c7c3ee8dd4ab991": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void net.openhft.chronicle.core.Jvm.dumpException(@NotNull final Map<ExceptionKey, Integer> exceptions)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "22e01d2f8a55642237ab31fe342cb3a4e4fe29d7",
        "previous_commit": "a039ddd4101207748785e3cdb63520cf033fb40a",
        "date": 1612260690,
        "releases": {
            "previous": "22e01d2f8a55642237ab31fe342cb3a4e4fe29d7",
            "next": "22e01d2f8a55642237ab31fe342cb3a4e4fe29d7"
        },
        "commit_message": "Added a test for StackTrace.forThread #194\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "22e01d2f8a55642237ab31fe342cb3a4e4fe29d7": {
                "src/main/java/net/openhft/chronicle/core/StackTrace.java": [
                    "public static StackTrace net.openhft.chronicle.core.StackTrace.forThread(Thread t)"
                ]
            },
            "a039ddd4101207748785e3cdb63520cf033fb40a": {
                "src/main/java/net/openhft/chronicle/core/StackTrace.java": [
                    "public static StackTrace net.openhft.chronicle.core.StackTrace.forThread(Thread t)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "afe7028423c483615649644ceebed647553be11d",
        "previous_commit": "366135eb80b9f1bb07ef88ea5c892b51fceeeca2",
        "date": 1597929655,
        "releases": {
            "previous": "afe7028423c483615649644ceebed647553be11d",
            "next": "afe7028423c483615649644ceebed647553be11d"
        },
        "commit_message": "Fix handling of code generation for writingDocument.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "afe7028423c483615649644ceebed647553be11d": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T ignored(@NotNull Class<T> tClass, Class... additional)"
                ]
            },
            "366135eb80b9f1bb07ef88ea5c892b51fceeeca2": {
                "src/main/java/net/openhft/chronicle/core/Mocker.java": [
                    "public static <T> T ignored(@NotNull Class<T> tClass)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "6984033878840097f7f7b56c693a6b16fd77f47e",
        "previous_commit": "91c1c9028105ccaa541afb7aab29da55168927b7",
        "date": 1537355880,
        "releases": {
            "previous": "6984033878840097f7f7b56c693a6b16fd77f47e",
            "next": "6984033878840097f7f7b56c693a6b16fd77f47e"
        },
        "commit_message": "Fix file permissions; some more fixes for Java 11\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "6984033878840097f7f7b56c693a6b16fd77f47e": {
                "src/main/java/net/openhft/chronicle/core/util/AbstractInvocationHandler.java": [
                    "private static MethodHandles.Lookup net.openhft.chronicle.core.util.AbstractInvocationHandler.acquireLookup(Class<?> c)"
                ]
            },
            "91c1c9028105ccaa541afb7aab29da55168927b7": {
                "src/main/java/net/openhft/chronicle/core/util/AbstractInvocationHandler.java": [
                    "private static MethodHandles.Lookup net.openhft.chronicle.core.util.AbstractInvocationHandler.acquireLookup(Class<?> c)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "5479db2c82068de7fbac6dcc69ec7578dc797e0f",
        "previous_commit": "74ff7712dd71aa8d5443c5e302e21509f1e9b260",
        "date": 1508403579,
        "releases": {
            "previous": "5479db2c82068de7fbac6dcc69ec7578dc797e0f",
            "next": "5479db2c82068de7fbac6dcc69ec7578dc797e0f"
        },
        "commit_message": "#45 Add TimeUnit alias.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5479db2c82068de7fbac6dcc69ec7578dc797e0f": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private ClassAliasPool net.openhft.chronicle.core.pool.ClassAliasPool.defaultAliases()"
                ]
            },
            "74ff7712dd71aa8d5443c5e302e21509f1e9b260": {
                "src/main/java/net/openhft/chronicle/core/pool/ClassAliasPool.java": [
                    "private ClassAliasPool net.openhft.chronicle.core.pool.ClassAliasPool.defaultAliases()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "b855496e47474223f91e3263f7557c2077533e0c",
        "previous_commit": "acc5377f1a71092f31f20ac6f2259e7bec126527",
        "date": 1605809191,
        "releases": {
            "previous": "b855496e47474223f91e3263f7557c2077533e0c",
            "next": "b855496e47474223f91e3263f7557c2077533e0c"
        },
        "commit_message": "Remove redundant code\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b855496e47474223f91e3263f7557c2077533e0c": {
                "src/main/java/net/openhft/chronicle/core/analytics/AnalyticsFacade.java": [
                    "static Builder standardBuilder(@NotNull final String measurementId, @NotNull final String apiSecret, @NotNull final String appVersion)"
                ]
            },
            "acc5377f1a71092f31f20ac6f2259e7bec126527": {
                "src/main/java/net/openhft/chronicle/core/analytics/AnalyticsFacade.java": [
                    "static Builder standardBuilder(@NotNull final String measurementId, @NotNull final String apiSecret, @NotNull final String appVersion)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f438375c5414f839d6bda013e278f3c8275a8d26",
        "previous_commit": "1e4cf934761c5cfba6bd753e56ac0fd775f53aea",
        "date": 1524749077,
        "releases": {
            "previous": "f438375c5414f839d6bda013e278f3c8275a8d26",
            "next": "f438375c5414f839d6bda013e278f3c8275a8d26"
        },
        "commit_message": "* Closes #55 ie make it so the ignored value is contained in the name, not an exact match.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f438375c5414f839d6bda013e278f3c8275a8d26": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads()"
                ]
            },
            "1e4cf934761c5cfba6bd753e56ac0fd775f53aea": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "634c59ace631ff7e2ade212ef0701056cd48aa2c",
        "previous_commit": "ff3a76b0cca3c877fe6486c1d0a82700718018a4",
        "date": 1539677127,
        "releases": {
            "previous": "634c59ace631ff7e2ade212ef0701056cd48aa2c",
            "next": "634c59ace631ff7e2ade212ef0701056cd48aa2c"
        },
        "commit_message": "Simplify ARM support for CAS\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "634c59ace631ff7e2ade212ef0701056cd48aa2c": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(long address, int expected, int value)"
                ]
            },
            "ff3a76b0cca3c877fe6486c1d0a82700718018a4": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(long address, int expected, int value)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "3331878a2067fb9e85e6f9a451e1cad3d5bce175",
        "previous_commit": "de0888ca6ef9476bbb4395a08bfe71b99a1e8635",
        "date": 1603115504,
        "releases": {
            "previous": "3331878a2067fb9e85e6f9a451e1cad3d5bce175",
            "next": "3331878a2067fb9e85e6f9a451e1cad3d5bce175"
        },
        "commit_message": "Added support ChronicleQueuePersistence, https://github.com/ChronicleEnterprise/Chronicle-Services/issues/187\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3331878a2067fb9e85e6f9a451e1cad3d5bce175": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "private StackTrace net.openhft.chronicle.core.io.TracingReferenceCounted.stackTrace(String oper, ReferenceOwner ro)"
                ]
            },
            "de0888ca6ef9476bbb4395a08bfe71b99a1e8635": {
                "src/main/java/net/openhft/chronicle/core/io/TracingReferenceCounted.java": [
                    "private StackTrace net.openhft.chronicle.core.io.TracingReferenceCounted.stackTrace(String oper, ReferenceOwner ro)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "621ac7ba8199a0cbaff18ff712dd8bea148a279c",
        "previous_commit": "9e9157c1618401392dc58105abefd1364e4f8968",
        "date": 1600705249,
        "releases": {
            "previous": "621ac7ba8199a0cbaff18ff712dd8bea148a279c",
            "next": "621ac7ba8199a0cbaff18ff712dd8bea148a279c"
        },
        "commit_message": "fixed https://github.com/ChronicleEnterprise/Chronicle-Queue-Enterprise/issues/120 Upon a hard restart of the sink, remove the queue lock if pid of old sink is dead\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "621ac7ba8199a0cbaff18ff712dd8bea148a279c": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static int getMajorVersion0()"
                ]
            },
            "9e9157c1618401392dc58105abefd1364e4f8968": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static int getMajorVersion0()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "07cb35d1be6a0538867ba04ee286132d75ec2635",
        "previous_commit": "e04fb4cab7a2476a4cdf19310665386eae6817ab",
        "date": 1507801549,
        "releases": {
            "previous": "07cb35d1be6a0538867ba04ee286132d75ec2635",
            "next": "07cb35d1be6a0538867ba04ee286132d75ec2635"
        },
        "commit_message": "#42 SetTimeProvider trivial change and tests.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "07cb35d1be6a0538867ba04ee286132d75ec2635": {
                "src/main/java/net/openhft/chronicle/core/time/SetTimeProvider.java": [
                    "public void net.openhft.chronicle.core.time.SetTimeProvider.currentTimeNanos(long nanos)"
                ]
            },
            "e04fb4cab7a2476a4cdf19310665386eae6817ab": {
                "src/main/java/net/openhft/chronicle/core/time/SetTimeProvider.java": [
                    "public void net.openhft.chronicle.core.time.SetTimeProvider.currentTimeNanos(long nanos)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "4189a915fe8f0a502f96294586d3fafc85ebfa6a",
        "previous_commit": "b11133630a99ea05d67954d2b37b169a4374db92",
        "date": 1524723021,
        "releases": {
            "previous": "4189a915fe8f0a502f96294586d3fafc85ebfa6a",
            "next": "4189a915fe8f0a502f96294586d3fafc85ebfa6a"
        },
        "commit_message": "WeakReferenceCleaner now has a middle ground, to schedule cleanup https://github.com/OpenHFT/Chronicle-Queue/issues/457\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "4189a915fe8f0a502f96294586d3fafc85ebfa6a": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.run()"
                ]
            },
            "b11133630a99ea05d67954d2b37b169a4374db92": {
                "src/main/java/net/openhft/chronicle/core/util/WeakReferenceCleaner.java": [
                    "public void net.openhft.chronicle.core.util.WeakReferenceCleaner.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "72f238e7a1f4386f9613ac52d845d02b7a134644",
        "previous_commit": "c9d831fb3b1b9303d1f8ace3cc80d900319821e6",
        "date": 1593169840,
        "releases": {
            "previous": "72f238e7a1f4386f9613ac52d845d02b7a134644",
            "next": "72f238e7a1f4386f9613ac52d845d02b7a134644"
        },
        "commit_message": "attempting to fix safepointTest on ARM\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "72f238e7a1f4386f9613ac52d845d02b7a134644": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void safepoint()"
                ]
            },
            "c9d831fb3b1b9303d1f8ace3cc80d900319821e6": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void safepoint()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "7b8cbccdce81d75240ca546012355d4d3b3c9109",
        "previous_commit": "da67f8f63a5a5473cbd681a5c08fe328354fa3b1",
        "date": 1686258425,
        "releases": {
            "previous": "7b8cbccdce81d75240ca546012355d4d3b3c9109",
            "next": "7b8cbccdce81d75240ca546012355d4d3b3c9109"
        },
        "commit_message": "Support byte array resolving in ObjectUtils\n\nneeded for OpenHFT/Chronicle-Wire#633\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "7b8cbccdce81d75240ca546012355d4d3b3c9109": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public ThrowingFunction<String, Object, Exception> net.openhft.chronicle.core.util.ObjectUtils.apply(@NotNull Class<?> c)"
                ]
            },
            "da67f8f63a5a5473cbd681a5c08fe328354fa3b1": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public ThrowingFunction<String, Object, Exception> net.openhft.chronicle.core.util.ObjectUtils.apply(@NotNull Class<?> c)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2cd6ea5273284ac96d0e15e12fb93bd223cf0fba",
        "previous_commit": "6eb24cf3587536daf4f36d0de48e90bc6bebcb04",
        "date": 1592306389,
        "releases": {
            "previous": "2cd6ea5273284ac96d0e15e12fb93bd223cf0fba",
            "next": "2cd6ea5273284ac96d0e15e12fb93bd223cf0fba"
        },
        "commit_message": "Remove the WeakReferenceCleaner, https://github.com/OpenHFT/Chronicle-Core/issues/126\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2cd6ea5273284ac96d0e15e12fb93bd223cf0fba": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.warnAndCloseIfNotClosed()"
                ]
            },
            "6eb24cf3587536daf4f36d0de48e90bc6bebcb04": {
                "src/main/java/net/openhft/chronicle/core/io/AbstractCloseable.java": [
                    "protected void net.openhft.chronicle.core.io.AbstractCloseable.warnAndCloseIfNotClosed()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "684abf182761740f82cc07006ebe243e1ca4e642",
        "previous_commit": "75ee76573337b574be3112ceab6c129e4d651521",
        "date": 1591002097,
        "releases": {
            "previous": "684abf182761740f82cc07006ebe243e1ca4e642",
            "next": "684abf182761740f82cc07006ebe243e1ca4e642"
        },
        "commit_message": "Yield if pausing for 0 millis\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "684abf182761740f82cc07006ebe243e1ca4e642": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void pause(long millis)"
                ]
            },
            "75ee76573337b574be3112ceab6c129e4d651521": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void pause(long millis)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "5d8738c6fdfdb70d9f2511919b3c974cb5b9e2c2",
        "previous_commit": "a2a06ea95520937fbf324d95c45aef59b113df79",
        "date": 1592286943,
        "releases": {
            "previous": "5d8738c6fdfdb70d9f2511919b3c974cb5b9e2c2",
            "next": "5d8738c6fdfdb70d9f2511919b3c974cb5b9e2c2"
        },
        "commit_message": "Ignore threads with ~ in their name for checking ThreadDumps, https://github.com/OpenHFT/Chronicle-Core/issues/124\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "5d8738c6fdfdb70d9f2511919b3c974cb5b9e2c2": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            },
            "a2a06ea95520937fbf324d95c45aef59b113df79": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "78673869c1472ea097d25fabf2a21bfcc4404fa8",
        "previous_commit": "139a396f53892323dc27a349a106c8672d7964d9",
        "date": 1605613947,
        "releases": {
            "previous": "78673869c1472ea097d25fabf2a21bfcc4404fa8",
            "next": "78673869c1472ea097d25fabf2a21bfcc4404fa8"
        },
        "commit_message": "Add default frequency limit\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "78673869c1472ea097d25fabf2a21bfcc4404fa8": {
                "src/main/java/net/openhft/chronicle/core/analytics/AnalyticsFacade.java": [
                    "static Builder builderWithStandard(@NotNull final String measurementId, @NotNull final String apiSecret, @NotNull final String appVersion)"
                ]
            },
            "139a396f53892323dc27a349a106c8672d7964d9": {
                "src/main/java/net/openhft/chronicle/core/analytics/AnalyticsFacade.java": [
                    "static Builder builderWithStandard(@NotNull final String measurementId, @NotNull final String apiSecret, @NotNull final String appVersion)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "aa08cd2d831c509d5be5aa7c990be0037cafdb39",
        "previous_commit": "ea49a2ea60d054f10356ebf04f930954d073ed05",
        "date": 1552320066,
        "releases": {
            "previous": "aa08cd2d831c509d5be5aa7c990be0037cafdb39",
            "next": "aa08cd2d831c509d5be5aa7c990be0037cafdb39"
        },
        "commit_message": "Added support for testing cool CPUs, https://github.com/OpenHFT/Chronicle-Core/issues/83\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "aa08cd2d831c509d5be5aa7c990be0037cafdb39": {
                "src/main/java/net/openhft/chronicle/core/io/RawText.java": [
                    "public static long appendBase10(long address, long num)"
                ]
            },
            "ea49a2ea60d054f10356ebf04f930954d073ed05": {
                "src/main/java/net/openhft/chronicle/core/io/RawText.java": [
                    "public static long appendBase10(long address, long num)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "fdedff54e2d0ee58756bc131f16da4d9ae9d6c7b",
        "previous_commit": "05a5e220ae11927261e8f47861ec6b6ca9296dfc",
        "date": 1508944448,
        "releases": {
            "previous": "fdedff54e2d0ee58756bc131f16da4d9ae9d6c7b",
            "next": "fdedff54e2d0ee58756bc131f16da4d9ae9d6c7b"
        },
        "commit_message": "Only write to the slf4j (reverted as this turns out the be useful)\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "fdedff54e2d0ee58756bc131f16da4d9ae9d6c7b": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void signalHandler(SignalHandler signalHandler)"
                ]
            },
            "05a5e220ae11927261e8f47861ec6b6ca9296dfc": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "public static void signalHandler(SignalHandler signalHandler)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "a19ef385d5d4e75e39dbd03c4eb11dc537a1a9a4",
        "previous_commit": "7e4d5e6c9697098fd963a9b70a2feca3bd8e1117",
        "date": 1667172396,
        "releases": {
            "previous": "a19ef385d5d4e75e39dbd03c4eb11dc537a1a9a4",
            "next": "a19ef385d5d4e75e39dbd03c4eb11dc537a1a9a4"
        },
        "commit_message": "Support new signature of sun.nio.ch.FileChannelImpl.map0() introduced with JDK-8286671 in Java 19\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a19ef385d5d4e75e39dbd03c4eb11dc537a1a9a4": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static long net.openhft.chronicle.core.OS.invokeFileChannelMap0(@NotNull MethodHandle map0, @NotNull FileChannel fileChannel, int imode, long start, long size, @NotNull ThrowingFunction<OutOfMemoryError, Long, IOException> errorHandler)"
                ]
            },
            "7e4d5e6c9697098fd963a9b70a2feca3bd8e1117": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "private static long net.openhft.chronicle.core.OS.invokeFileChannelMap0(@NotNull MethodHandle map0, @NotNull FileChannel fileChannel, int imode, long start, long size, @NotNull ThrowingFunction<OutOfMemoryError, Long, IOException> errorHandler)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f7183709f442f1f2af72b74cad77e998a88bb919",
        "previous_commit": "4fbfbc78602b8f1ea0e1bf9940e44b2bf4b3a8b6",
        "date": 1591082682,
        "releases": {
            "previous": "f7183709f442f1f2af72b74cad77e998a88bb919",
            "next": "f7183709f442f1f2af72b74cad77e998a88bb919"
        },
        "commit_message": "Look for the system properties in the parent directory if not in the working directory to support multi-module projects.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f7183709f442f1f2af72b74cad77e998a88bb919": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void loadSystemProperties(String name, boolean wasSet)"
                ]
            },
            "4fbfbc78602b8f1ea0e1bf9940e44b2bf4b3a8b6": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void loadSystemProperties(String name)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "a2c7cea0cb9e3243f24d482a7250c31830556ffd",
        "previous_commit": "9e2cb11e261a5ed1764a12c73b1584c3f150f346",
        "date": 1589206715,
        "releases": {
            "previous": "a2c7cea0cb9e3243f24d482a7250c31830556ffd",
            "next": "a2c7cea0cb9e3243f24d482a7250c31830556ffd"
        },
        "commit_message": "Make OS.Unmapper release ReferenceCounted owner, Fix #112\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "a2c7cea0cb9e3243f24d482a7250c31830556ffd": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public void net.openhft.chronicle.core.Unmapper.run()"
                ]
            },
            "9e2cb11e261a5ed1764a12c73b1584c3f150f346": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public void net.openhft.chronicle.core.Unmapper.run()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "942f845184e433f59285a11e030f4004c29e84a6",
        "previous_commit": "31b070480fa864e18031948f8fd6f18869d210be",
        "date": 1530599503,
        "releases": {
            "previous": "942f845184e433f59285a11e030f4004c29e84a6",
            "next": "942f845184e433f59285a11e030f4004c29e84a6"
        },
        "commit_message": "consistent-ise Histogram & JLBH and sprinkle some TODOs\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "942f845184e433f59285a11e030f4004c29e84a6": {
                "src/main/java/net/openhft/chronicle/core/jlbh/ImmutableRunResult.java": [
                    "private static Map<Percentile, Duration> net.openhft.chronicle.core.jlbh.ImmutableRunResult.asMap(double[] percentiles)"
                ]
            },
            "31b070480fa864e18031948f8fd6f18869d210be": {
                "src/main/java/net/openhft/chronicle/core/jlbh/ImmutableRunResult.java": [
                    "private static Map<Percentile, Duration> net.openhft.chronicle.core.jlbh.ImmutableRunResult.asMap(double[] percentiles)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "53992164131ab542a7ea1b708b6082f13391cfc4",
        "previous_commit": "0a73c850f32c93f6c4d2f842157feaf188a72620",
        "date": 1504191362,
        "releases": {
            "previous": "53992164131ab542a7ea1b708b6082f13391cfc4",
            "next": "53992164131ab542a7ea1b708b6082f13391cfc4"
        },
        "commit_message": "use library method to retrieve field\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "53992164131ab542a7ea1b708b6082f13391cfc4": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "private static byte getStringCoderForStringOrStringBuilder(CharSequence charSequence)"
                ]
            },
            "0a73c850f32c93f6c4d2f842157feaf188a72620": {
                "src/main/java/net/openhft/chronicle/core/util/StringUtils.java": [
                    "private static byte getStringCoderForStringOrStringBuilder(CharSequence charSequence)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "30583898e03cfe4db2b3e1f35571dbe38368caf6",
        "previous_commit": "c6ce10f0336018e134d74041ad7824e18d9a78f2",
        "date": 1510901117,
        "releases": {
            "previous": "30583898e03cfe4db2b3e1f35571dbe38368caf6",
            "next": "30583898e03cfe4db2b3e1f35571dbe38368caf6"
        },
        "commit_message": "DEBUG Slf4jExceptionHandler support isEnabled\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "30583898e03cfe4db2b3e1f35571dbe38368caf6": {
                "src/main/java/net/openhft/chronicle/core/onoes/ThreadLocalisedExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.ThreadLocalisedExceptionHandler.on(Class clazz, String message, Throwable thrown)"
                ]
            },
            "c6ce10f0336018e134d74041ad7824e18d9a78f2": {
                "src/main/java/net/openhft/chronicle/core/onoes/ThreadLocalisedExceptionHandler.java": [
                    "public void net.openhft.chronicle.core.onoes.ThreadLocalisedExceptionHandler.on(Class clazz, String message, Throwable thrown)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "3bbd51e0b527168fdc9b871bab7ecfe55023e2aa",
        "previous_commit": "d36e7e1dd249317916a28bd76734c0cfe29eec59",
        "date": 1543922148,
        "releases": {
            "previous": "3bbd51e0b527168fdc9b871bab7ecfe55023e2aa",
            "next": "3bbd51e0b527168fdc9b871bab7ecfe55023e2aa"
        },
        "commit_message": "Added a multi-threading thread sampler tool, https://github.com/OpenHFT/Chronicle-Core/issues/79\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3bbd51e0b527168fdc9b871bab7ecfe55023e2aa": {
                "src/main/java/net/openhft/chronicle/core/threads/JitterSampler.java": [
                    "public static String takeSnapshot(long threshold)"
                ]
            },
            "d36e7e1dd249317916a28bd76734c0cfe29eec59": {
                "src/main/java/net/openhft/chronicle/core/threads/JitterSampler.java": [
                    "public static String takeSnapshot(long threshold)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "bed56cffda29e2fcd9ed2e4c2a2b11433c8e7fd5",
        "previous_commit": "24d7ced8fa78d2b92c3828b9e36d2378a503c3d0",
        "date": 1618930546,
        "releases": {
            "previous": "bed56cffda29e2fcd9ed2e4c2a2b11433c8e7fd5",
            "next": "bed56cffda29e2fcd9ed2e4c2a2b11433c8e7fd5"
        },
        "commit_message": "Improve handling and reporting of affinity, https://github.com/OpenHFT/Chronicle-Network/issues/99\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "bed56cffda29e2fcd9ed2e4c2a2b11433c8e7fd5": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public void net.openhft.chronicle.core.threads.CleaningThread.run()"
                ]
            },
            "24d7ced8fa78d2b92c3828b9e36d2378a503c3d0": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public void net.openhft.chronicle.core.threads.CleaningThread.run()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "b6ea6447508e41282aaccc5c6d4b320de177509e",
        "previous_commit": "c1a3d2f848c0131fc7a791bce65b0bdd23b0ce44",
        "date": 1624008456,
        "releases": {
            "previous": "b6ea6447508e41282aaccc5c6d4b320de177509e",
            "next": "b6ea6447508e41282aaccc5c6d4b320de177509e"
        },
        "commit_message": "Added detection for safe CAS operations by address #232\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "b6ea6447508e41282aaccc5c6d4b320de177509e": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(long address, long offset, int expected, int value)"
                ]
            },
            "c1a3d2f848c0131fc7a791bce65b0bdd23b0ce44": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.testAndSetInt(long address, long offset, int expected, int value)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "17a06936c84e5b8acf6e5f20c75758e9ad9f195c",
        "previous_commit": "242b1fbb59e8ce83873a1f5c682af633d5bda6ad",
        "date": 1615895003,
        "releases": {
            "previous": "17a06936c84e5b8acf6e5f20c75758e9ad9f195c",
            "next": "17a06936c84e5b8acf6e5f20c75758e9ad9f195c"
        },
        "commit_message": "Added EmbeddedBytes for Trivially Copyable data transfer objects, https://github.com/OpenHFT/Chronicle-Bytes/issues/173\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "17a06936c84e5b8acf6e5f20c75758e9ad9f195c": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, Object obj2, long offset2, int length)"
                ]
            },
            "242b1fbb59e8ce83873a1f5c682af633d5bda6ad": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(byte[] bytes, int offset, Object obj2, long offset2, int length)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f8c76d23a8c8354c349370452a6d83df025202e9",
        "previous_commit": "d562eb307d8c95b8cfe3c2dc3ee81827582ab5b7",
        "date": 1687255800,
        "releases": {
            "previous": "f8c76d23a8c8354c349370452a6d83df025202e9",
            "next": "f8c76d23a8c8354c349370452a6d83df025202e9"
        },
        "commit_message": "reduce verbosity of license check message if >30 days to run. Allow called to determine license expiry days. Closes #523\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f8c76d23a8c8354c349370452a6d83df025202e9": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class<?> caller)"
                ]
            },
            "d562eb307d8c95b8cfe3c2dc3ee81827582ab5b7": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class<?> caller)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e87c9a02edf3209368f668d069a8a40e34ebeaa2",
        "previous_commit": "96eefa11fd0c0f2ddfb2349fb8260d1e24d8c39f",
        "date": 1600155902,
        "releases": {
            "previous": "e87c9a02edf3209368f668d069a8a40e34ebeaa2",
            "next": "e87c9a02edf3209368f668d069a8a40e34ebeaa2"
        },
        "commit_message": "Added support for mapping interfaces to a default implementation, https://github.com/OpenHFT/Chronicle-Wire/issues/200\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e87c9a02edf3209368f668d069a8a40e34ebeaa2": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static synchronized void defaultObjectForInterface(ThrowingFunction<Class, Class, ClassNotFoundException> defaultObjectForInterface)"
                ]
            },
            "96eefa11fd0c0f2ddfb2349fb8260d1e24d8c39f": {
                "src/main/java/net/openhft/chronicle/core/util/ObjectUtils.java": [
                    "public static synchronized void defaultObjectForInterface(ThrowingFunction<Class, Class, ClassNotFoundException> defaultObjectForInterface)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "2f6b2e04e76c5a03b50983a7fcb20c85a9167103",
        "previous_commit": "86f8c3c49143e7f1f37a0a1095d03d394a861d16",
        "date": 1588594882,
        "releases": {
            "previous": "2f6b2e04e76c5a03b50983a7fcb20c85a9167103",
            "next": "2f6b2e04e76c5a03b50983a7fcb20c85a9167103"
        },
        "commit_message": "Give Histogram 2 digits of accuracy and min(), max(), typical()\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "2f6b2e04e76c5a03b50983a7fcb20c85a9167103": {
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public double net.openhft.chronicle.core.util.Histogram.percentile(double fraction)"
                ]
            },
            "86f8c3c49143e7f1f37a0a1095d03d394a861d16": {
                "src/main/java/net/openhft/chronicle/core/util/Histogram.java": [
                    "public double net.openhft.chronicle.core.util.Histogram.percentile(double fraction)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "3a5a6d33d7bac979ad2520ec8327eb23be1509ad",
        "previous_commit": "14d75743b5f4e36855116c4b3369985c6c617efd",
        "date": 1611679934,
        "releases": {
            "previous": "3a5a6d33d7bac979ad2520ec8327eb23be1509ad",
            "next": "3a5a6d33d7bac979ad2520ec8327eb23be1509ad"
        },
        "commit_message": "CleaningThread.cleanup to remove cleaned up ThreadLocals #191\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3a5a6d33d7bac979ad2520ec8327eb23be1509ad": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)"
                ]
            },
            "14d75743b5f4e36855116c4b3369985c6c617efd": {
                "src/main/java/net/openhft/chronicle/core/threads/CleaningThread.java": [
                    "public static void net.openhft.chronicle.core.threads.CleaningThread.performCleanup(Thread thread)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "48e1c9ba29367b395901b6deac2a8f8680dc470a",
        "previous_commit": "e95fc63f1ae1b4c5ca7e60236d84ac1c631c0caf",
        "date": 1517271068,
        "releases": {
            "previous": "48e1c9ba29367b395901b6deac2a8f8680dc470a",
            "next": "48e1c9ba29367b395901b6deac2a8f8680dc470a"
        },
        "commit_message": "allow AffinityLock to be overidden for JLBH\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "48e1c9ba29367b395901b6deac2a8f8680dc470a": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.start()"
                ]
            },
            "e95fc63f1ae1b4c5ca7e60236d84ac1c631c0caf": {
                "src/main/java/net/openhft/chronicle/core/jlbh/JLBH.java": [
                    "public void net.openhft.chronicle.core.jlbh.JLBH.start()"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "497f599402596d0de6a19a15812f4235ad347a8e",
        "previous_commit": "753508350ab2b616f6fcaf9fa376b22d23956386",
        "date": 1605025620,
        "releases": {
            "previous": "497f599402596d0de6a19a15812f4235ad347a8e",
            "next": "497f599402596d0de6a19a15812f4235ad347a8e"
        },
        "commit_message": "Resized the default TableStore so it is the same is the minimum size for Windows, closes https://github.com/OpenHFT/Chronicle-Queue/issues/753\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "497f599402596d0de6a19a15812f4235ad347a8e": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long mapAlignment()"
                ]
            },
            "753508350ab2b616f6fcaf9fa376b22d23956386": {
                "src/main/java/net/openhft/chronicle/core/OS.java": [
                    "public static long mapAlignment()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "1712c4a3d91f1fa5f67a041dc9999960f348695d",
        "previous_commit": "34c11c8871be5943350568f3f4652e829e9f8c25",
        "date": 1614726171,
        "releases": {
            "previous": "1712c4a3d91f1fa5f67a041dc9999960f348695d",
            "next": "1712c4a3d91f1fa5f67a041dc9999960f348695d"
        },
        "commit_message": "allow system properties loaded from system.properties file to be overriden from command line -D\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "1712c4a3d91f1fa5f67a041dc9999960f348695d": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void loadSystemProperties(final String name, final boolean wasSet)"
                ]
            },
            "34c11c8871be5943350568f3f4652e829e9f8c25": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static void loadSystemProperties(final String name, final boolean wasSet)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "14f3ddc1bf9fea09a9eae92d50376cc10bd3ed35",
        "previous_commit": "efbb6ca7d43a5033b694b45ac2ad543694c9a2ab",
        "date": 1635245719,
        "releases": {
            "previous": "14f3ddc1bf9fea09a9eae92d50376cc10bd3ed35",
            "next": "14f3ddc1bf9fea09a9eae92d50376cc10bd3ed35"
        },
        "commit_message": "faster\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "14f3ddc1bf9fea09a9eae92d50376cc10bd3ed35": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(@Nullable Object src, long srcOffset, long dest, int length)"
                ]
            },
            "efbb6ca7d43a5033b694b45ac2ad543694c9a2ab": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public void net.openhft.chronicle.core.UnsafeMemory.copyMemory(@Nullable Object src, long srcOffset, long dest, int length)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "3f34ffde06c7a9b24369862714730df0ef83ef89",
        "previous_commit": "b9601a4baa1c0ed6562cd7daaaae133a046fb86b",
        "date": 1604320048,
        "releases": {
            "previous": "3f34ffde06c7a9b24369862714730df0ef83ef89",
            "next": "3f34ffde06c7a9b24369862714730df0ef83ef89"
        },
        "commit_message": "Tidy code\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "3f34ffde06c7a9b24369862714730df0ef83ef89": {
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserve(ReferenceOwner id)"
                ]
            },
            "b9601a4baa1c0ed6562cd7daaaae133a046fb86b": {
                "src/main/java/net/openhft/chronicle/core/io/DualReferenceCounted.java": [
                    "public synchronized void net.openhft.chronicle.core.io.DualReferenceCounted.reserve(ReferenceOwner id)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e1a63ef49a32806e36fc0535cc9ea8103ac6b05e",
        "previous_commit": "146466d3545bfb2674ae8283fa418f80d484b51a",
        "date": 1659094130,
        "releases": {
            "previous": "e1a63ef49a32806e36fc0535cc9ea8103ac6b05e",
            "next": "e1a63ef49a32806e36fc0535cc9ea8103ac6b05e"
        },
        "commit_message": "Allow more time for slow threads\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e1a63ef49a32806e36fc0535cc9ea8103ac6b05e": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            },
            "146466d3545bfb2674ae8283fa418f80d484b51a": {
                "src/main/java/net/openhft/chronicle/core/threads/ThreadDump.java": [
                    "public void net.openhft.chronicle.core.threads.ThreadDump.assertNoNewThreads(int delay, @NotNull TimeUnit delayUnit)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8fb605ed6555698e9d1d4d50db9b449c9f66ef71",
        "previous_commit": "45d43ba68ce86e223f1ecea5ea8e0869229028bb",
        "date": 1580305156,
        "releases": {
            "previous": "8fb605ed6555698e9d1d4d50db9b449c9f66ef71",
            "next": "8fb605ed6555698e9d1d4d50db9b449c9f66ef71"
        },
        "commit_message": "updated licence check to look for a <product>.expiry-date file\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8fb605ed6555698e9d1d4d50db9b449c9f66ef71": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class caller)"
                ]
            },
            "45d43ba68ce86e223f1ecea5ea8e0869229028bb": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class caller)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "8a2b54468df8cbaac999c45d0ed11abb1e7d6f50",
        "previous_commit": "c19ea98a84a0e0bd9153fbbec331f6cdcf3a1c91",
        "date": 1536825579,
        "releases": {
            "previous": "8a2b54468df8cbaac999c45d0ed11abb1e7d6f50",
            "next": "8a2b54468df8cbaac999c45d0ed11abb1e7d6f50"
        },
        "commit_message": "Added ARM support for UnsafeMemory, https://github.com/OpenHFT/OpenHFT/issues/23\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "8a2b54468df8cbaac999c45d0ed11abb1e7d6f50": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(long address, int expected, int value)"
                ]
            },
            "c19ea98a84a0e0bd9153fbbec331f6cdcf3a1c91": {
                "src/main/java/net/openhft/chronicle/core/UnsafeMemory.java": [
                    "public boolean net.openhft.chronicle.core.UnsafeMemory.compareAndSwapInt(long address, int expected, int value)"
                ]
            }
        },
        "java_version": {
            "version": "1.9",
            "should_update_pom": false
        }
    },
    {
        "commit": "d29e88ab92954eda399ee9eb1597f1681d4edf99",
        "previous_commit": "3eb12daa83241b014717236762d19523a7917f1d",
        "date": 1609741157,
        "releases": {
            "previous": "d29e88ab92954eda399ee9eb1597f1681d4edf99",
            "next": "d29e88ab92954eda399ee9eb1597f1681d4edf99"
        },
        "commit_message": "Closing an EventHandler should cause it to throw InvalidEventHandlerException on action() #184\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "d29e88ab92954eda399ee9eb1597f1681d4edf99": {
                "src/main/java/net/openhft/chronicle/core/threads/Timer.java": [
                    "public boolean net.openhft.chronicle.core.threads.Timer.action()"
                ]
            },
            "3eb12daa83241b014717236762d19523a7917f1d": {
                "src/main/java/net/openhft/chronicle/core/threads/Timer.java": [
                    "public boolean net.openhft.chronicle.core.threads.Timer.action()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "e4c7d8ec9eb62bf9b47f0605fa620d9416555616",
        "previous_commit": "8a86094a46fbe8a9b3e42c8fbabe607e619db225",
        "date": 1616588215,
        "releases": {
            "previous": "e4c7d8ec9eb62bf9b47f0605fa620d9416555616",
            "next": "e4c7d8ec9eb62bf9b47f0605fa620d9416555616"
        },
        "commit_message": "Remove references to Random from production code, closes https://github.com/OpenHFT/Chronicle-Core/issues/218\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "e4c7d8ec9eb62bf9b47f0605fa620d9416555616": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static int getProcessId0()"
                ]
            },
            "8a86094a46fbe8a9b3e42c8fbabe607e619db225": {
                "src/main/java/net/openhft/chronicle/core/Jvm.java": [
                    "private static int getProcessId0()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "f63217b0438a96c486eb4beedc333831899341bd",
        "previous_commit": "a2071867ee6ab0c8a1278bf4a4b9adeaff33e0a1",
        "date": 1565861836,
        "releases": {
            "previous": "f63217b0438a96c486eb4beedc333831899341bd",
            "next": "f63217b0438a96c486eb4beedc333831899341bd"
        },
        "commit_message": "Add support for license checking, closes https://github.com/OpenHFT/Chronicle-Core/issues/86\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "f63217b0438a96c486eb4beedc333831899341bd": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class caller)"
                ]
            },
            "a2071867ee6ab0c8a1278bf4a4b9adeaff33e0a1": {
                "src/main/java/net/openhft/chronicle/core/LicenceCheck.java": [
                    "static void check(String product, Class caller)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "30c5dfe8af7a1e5d12f15c5fe19c8132ee013ab7",
        "previous_commit": "6ab52d724b364c84a3a5750fbb68f15ab2cd8d36",
        "date": 1645634511,
        "releases": {
            "previous": "30c5dfe8af7a1e5d12f15c5fe19c8132ee013ab7",
            "next": "30c5dfe8af7a1e5d12f15c5fe19c8132ee013ab7"
        },
        "commit_message": "SystemTimeProvider drops uniqueness across multiples of 32 ns #349\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "core-benchmarks.jar"
        },
        "method_changes": {
            "30c5dfe8af7a1e5d12f15c5fe19c8132ee013ab7": {
                "src/main/java/net/openhft/chronicle/core/time/SystemTimeProvider.java": [
                    "public long currentTimeNanos()"
                ]
            },
            "6ab52d724b364c84a3a5750fbb68f15ab2cd8d36": {
                "src/main/java/net/openhft/chronicle/core/time/SystemTimeProvider.java": [
                    "public long currentTimeNanos()"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    }
]