[
    {
        "commit": "f2213bd869e89b9ccdd2b3e1dd4e4a1f5fb650de",
        "previous_commit": "11189ca08a4ec60adc41c3a5097e5a6dddd452cc",
        "date": 1577094142,
        "releases": {
            "previous": "f2213bd869e89b9ccdd2b3e1dd4e4a1f5fb650de",
            "next": "f2213bd869e89b9ccdd2b3e1dd4e4a1f5fb650de"
        },
        "commit_message": "Rename ref array accessors and fallout\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "f2213bd869e89b9ccdd2b3e1dd4e4a1f5fb650de": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.organiseImports(CompilationUnit cu)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.organiseImports(CompilationUnit cu)"
                ],
                "jctools-channels/src/main/java/org/jctools/channels/OffHeapFixedMessageSizeRingBuffer.java": [
                    "protected Object org.jctools.channels.OffHeapFixedMessageSizeRingBuffer.readReference(long offset)",
                    "protected void org.jctools.channels.OffHeapFixedMessageSizeRingBuffer.writeReference(long offset, Object reference)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "private static long org.jctools.queues.BaseMpscLinkedArrayQueue<E>.nextArrayOffset(long mask)",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.BaseMpscLinkedArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.relaxedPoll()",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.getNext()",
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "private void org.jctools.queues.BaseMpscLinkedArrayQueue<E>.resize(long oldMask, E[] oldBuffer, long pIndex, E e, Supplier<E> s)",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.peek()",
                    "private E[] org.jctools.queues.BaseMpscLinkedArrayQueue<E>.nextBuffer(final E[] buffer, final long mask)",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferPeek(E[] nextBuffer, long index)",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferPoll(E[] nextBuffer, long index)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.BaseSpscLinkedArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.poll()",
                    "protected final E[] org.jctools.queues.BaseSpscLinkedArrayQueue<E>.lvNextArrayAndUnlink(E[] curr)",
                    "private E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.newBufferPeek(final E[] buffer, final long index)",
                    "private E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.newBufferPoll(final E[] buffer, final long index)",
                    "public int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.peek()",
                    "final void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.linkOldToNew( final long currIndex, final E[] oldBuffer, final long offset, final E[] newBuffer, final long offsetInNew, final E e)",
                    "final void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.writeToQueue(final E[] buffer, final E e, final long index, final long offset)",
                    "protected final void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.soNext(E[] curr, E[] next)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "private E org.jctools.queues.ConcurrentCircularArrayQueue<E>.getNext()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.relaxedOffer(E e)",
                    "private int org.jctools.queues.MpmcArrayQueue<E>.fillOneByOne(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPeek()",
                    "private int org.jctools.queues.MpmcArrayQueue<E>.drainOneByOne(Consumer<E> c, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddChunk.java": [
                    "E org.jctools.queues.MpmcUnboundedXaddChunk<E>.lvElement(int index)",
                    "void org.jctools.queues.MpmcUnboundedXaddChunk<E>.soElement(int index, E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public final int org.jctools.queues.MpscArrayQueue<E>.failFastOffer(final E e)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPoll()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offerIfBelowThreshold(final E e, int threshold)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPeek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.peek()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.take()",
                    "public boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.offer(final E e)",
                    "private Object org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.spinWaitForElement(E[] buffer, long offset)",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.poll(long timeout, TimeUnit unit)",
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "private boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.offerAndWakeup(E[] buffer, long mask, long pIndex, E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddChunk.java": [
                    "E org.jctools.queues.MpscUnboundedXaddChunk<E>.lvElement(int index)",
                    "void org.jctools.queues.MpscUnboundedXaddChunk<E>.soElement(int index, E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.relaxedOffer(E e)",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.relaxedPeek()",
                    "private E org.jctools.queues.SpmcArrayQueue<E>.removeElement(final E[] buffer, long index, final long mask)",
                    "public int org.jctools.queues.SpmcArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public void org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public void org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()",
                    "public int org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public int org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "private boolean org.jctools.queues.SpscArrayQueue<E>.offerSlowPath(final E[] buffer, final long mask, final long producerIndex)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscChunkedArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscChunkedArrayQueue<E>.offerColdPath(E[] buffer, long mask, long pIndex, long offset, E v, Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath( final E[] buffer, final long mask, final long index, final long offset, final E v, final Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offerColdPath(E[] buffer, long mask, long pIndex, long offset, E v, Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/AtomicReferenceArrayQueue.java": [
                    "private E org.jctools.queues.atomic.AtomicReferenceArrayQueue<E>.getNext()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "private static int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.nextArrayOffset(long mask)",
                    "public boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferPoll(AtomicReferenceArray<E> nextBuffer, long index)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.peek()",
                    "private void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.resize(long oldMask, AtomicReferenceArray<E> oldBuffer, long pIndex, E e, Supplier<E> s)",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferPeek(AtomicReferenceArray<E> nextBuffer, long index)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.poll()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPoll()",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.getNext()",
                    "private AtomicReferenceArray<E> org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.nextBuffer(final AtomicReferenceArray<E> buffer, final long mask)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "protected final AtomicReferenceArray<E> org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.lvNextArrayAndUnlink(AtomicReferenceArray<E> curr)",
                    "public boolean org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.offer(final E e)",
                    "final void org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.linkOldToNew(final long currIndex, final AtomicReferenceArray<E> oldBuffer, final int offset, final AtomicReferenceArray<E> newBuffer, final int offsetInNew, final E e)",
                    "private E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.newBufferPeek(final AtomicReferenceArray<E> buffer, final long index)",
                    "public E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.peek()",
                    "public E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.poll()",
                    "public int org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "private E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.newBufferPoll(final AtomicReferenceArray<E> buffer, final long index)",
                    "final void org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.writeToQueue(final AtomicReferenceArray<E> buffer, final E e, final long index, final int offset)",
                    "protected final void org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.soNext(AtomicReferenceArray<E> curr, AtomicReferenceArray<E> next)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "private int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fillOneByOne(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedOffer(E e)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedPeek()",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.peek()",
                    "private int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drainOneByOne(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.peek()",
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.relaxedPeek()",
                    "public boolean org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.offerIfBelowThreshold(final E e, int threshold)",
                    "public final int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.failFastOffer(final E e)",
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.peek()",
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.relaxedOffer(E e)",
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.relaxedPeek()",
                    "private E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.removeElement(final AtomicReferenceArray<E> buffer, long index, final int mask)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.peek()",
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "private boolean org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.offerSlowPath(final AtomicReferenceArray<E> buffer, final int mask, final long producerIndex)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscChunkedAtomicArrayQueue.java": [
                    "final boolean org.jctools.queues.atomic.SpscChunkedAtomicArrayQueue<E>.offerColdPath(AtomicReferenceArray<E> buffer, long mask, long pIndex, int offset, E v, Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscGrowableAtomicArrayQueue.java": [
                    "final boolean org.jctools.queues.atomic.SpscGrowableAtomicArrayQueue<E>.offerColdPath(final AtomicReferenceArray<E> buffer, final long mask, final long index, final int offset, final E v, final Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscUnboundedAtomicArrayQueue.java": [
                    "final boolean org.jctools.queues.atomic.SpscUnboundedAtomicArrayQueue<E>.offerColdPath(AtomicReferenceArray<E> buffer, long mask, long pIndex, int offset, E v, Supplier<? extends E> s)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public E org.jctools.queues.FFBuffer<E>.poll()",
                    "public E org.jctools.queues.FFBuffer<E>.peek()",
                    "public boolean org.jctools.queues.FFBuffer<E>.offer(final E e)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/MpscRelaxedArrayQueue.java": [
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.relaxedPeek()",
                    "private void org.jctools.queues.MpscRelaxedArrayQueue<E>.soCycleElement(E[] buffer, E e, int activeCycleIndex, int positionWithinCycle, int cycleLengthLog2)",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpscRelaxedArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public void org.jctools.queues.MpscRelaxedArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "private E org.jctools.queues.MpscRelaxedArrayQueue<E>.spinForElement(final E[] buffer, long offset)",
                    "private void org.jctools.queues.MpscRelaxedArrayQueue<E>.signalConsumerProgress(long consumerPosition, E[] buffer, long offset)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/MpscSequencedArrayQueue.java": [
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.MpscSequencedArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.peek()"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.remove(Object val)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.removeSlowPath(Object val, E[] buffer, long mask, int hash)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.containsImpl(Object needle)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.addForResize(final E[] buffer, final long mask, E newVal)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.compactAndRemove(final E[] buffer, final long mask, int removeHashIndex)",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.add(E newVal)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.containsSlowPath(final E[] buffer, final long mask, final int hash, Object needle)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.addSlowPath(E[] buffer, long mask, E newVal, int hash)"
                ]
            },
            "11189ca08a4ec60adc41c3a5097e5a6dddd452cc": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.organiseImports(CompilationUnit cu)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.organiseImports(CompilationUnit cu)"
                ],
                "jctools-channels/src/main/java/org/jctools/channels/OffHeapFixedMessageSizeRingBuffer.java": [
                    "protected Object org.jctools.channels.OffHeapFixedMessageSizeRingBuffer.readReference(long offset)",
                    "protected void org.jctools.channels.OffHeapFixedMessageSizeRingBuffer.writeReference(long offset, Object reference)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "private static long org.jctools.queues.BaseMpscLinkedArrayQueue<E>.nextArrayOffset(long mask)",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.BaseMpscLinkedArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.relaxedPoll()",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.getNext()",
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "private void org.jctools.queues.BaseMpscLinkedArrayQueue<E>.resize(long oldMask, E[] oldBuffer, long pIndex, E e, Supplier<E> s)",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.peek()",
                    "private E[] org.jctools.queues.BaseMpscLinkedArrayQueue<E>.nextBuffer(final E[] buffer, final long mask)",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferPeek(E[] nextBuffer, long index)",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferPoll(E[] nextBuffer, long index)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.BaseSpscLinkedArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.poll()",
                    "protected final E[] org.jctools.queues.BaseSpscLinkedArrayQueue<E>.lvNextArrayAndUnlink(E[] curr)",
                    "private E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.newBufferPeek(final E[] buffer, final long index)",
                    "private E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.newBufferPoll(final E[] buffer, final long index)",
                    "public int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.peek()",
                    "final void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.linkOldToNew( final long currIndex, final E[] oldBuffer, final long offset, final E[] newBuffer, final long offsetInNew, final E e)",
                    "final void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.writeToQueue(final E[] buffer, final E e, final long index, final long offset)",
                    "protected final void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.soNext(E[] curr, E[] next)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "private E org.jctools.queues.ConcurrentCircularArrayQueue<E>.getNext()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.relaxedOffer(E e)",
                    "private int org.jctools.queues.MpmcArrayQueue<E>.fillOneByOne(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPeek()",
                    "private int org.jctools.queues.MpmcArrayQueue<E>.drainOneByOne(Consumer<E> c, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddChunk.java": [
                    "E org.jctools.queues.MpmcUnboundedXaddChunk<E>.lvElement(int index)",
                    "void org.jctools.queues.MpmcUnboundedXaddChunk<E>.soElement(int index, E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public final int org.jctools.queues.MpscArrayQueue<E>.failFastOffer(final E e)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPoll()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offerIfBelowThreshold(final E e, int threshold)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPeek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.peek()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.take()",
                    "public boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.offer(final E e)",
                    "private Object org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.spinWaitForElement(E[] buffer, long offset)",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.poll(long timeout, TimeUnit unit)",
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "private boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.offerAndWakeup(E[] buffer, long mask, long pIndex, E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddChunk.java": [
                    "E org.jctools.queues.MpscUnboundedXaddChunk<E>.lvElement(int index)",
                    "void org.jctools.queues.MpscUnboundedXaddChunk<E>.soElement(int index, E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.relaxedOffer(E e)",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.relaxedPeek()",
                    "private E org.jctools.queues.SpmcArrayQueue<E>.removeElement(final E[] buffer, long index, final long mask)",
                    "public int org.jctools.queues.SpmcArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public void org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public void org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()",
                    "public int org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public int org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "private boolean org.jctools.queues.SpscArrayQueue<E>.offerSlowPath(final E[] buffer, final long mask, final long producerIndex)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscChunkedArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscChunkedArrayQueue<E>.offerColdPath(E[] buffer, long mask, long pIndex, long offset, E v, Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath( final E[] buffer, final long mask, final long index, final long offset, final E v, final Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offerColdPath(E[] buffer, long mask, long pIndex, long offset, E v, Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/AtomicReferenceArrayQueue.java": [
                    "private E org.jctools.queues.atomic.AtomicReferenceArrayQueue<E>.getNext()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "private static int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.nextArrayOffset(long mask)",
                    "public boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferPoll(AtomicReferenceArray<E> nextBuffer, long index)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.peek()",
                    "private void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.resize(long oldMask, AtomicReferenceArray<E> oldBuffer, long pIndex, E e, Supplier<E> s)",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferPeek(AtomicReferenceArray<E> nextBuffer, long index)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.poll()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPoll()",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.getNext()",
                    "private AtomicReferenceArray<E> org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.nextBuffer(final AtomicReferenceArray<E> buffer, final long mask)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "protected final AtomicReferenceArray<E> org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.lvNextArrayAndUnlink(AtomicReferenceArray<E> curr)",
                    "public boolean org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.offer(final E e)",
                    "final void org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.linkOldToNew(final long currIndex, final AtomicReferenceArray<E> oldBuffer, final int offset, final AtomicReferenceArray<E> newBuffer, final int offsetInNew, final E e)",
                    "private E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.newBufferPeek(final AtomicReferenceArray<E> buffer, final long index)",
                    "public E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.peek()",
                    "public E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.poll()",
                    "public int org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "private E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.newBufferPoll(final AtomicReferenceArray<E> buffer, final long index)",
                    "final void org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.writeToQueue(final AtomicReferenceArray<E> buffer, final E e, final long index, final int offset)",
                    "protected final void org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.soNext(AtomicReferenceArray<E> curr, AtomicReferenceArray<E> next)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "private int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fillOneByOne(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedOffer(E e)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedPeek()",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.peek()",
                    "private int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drainOneByOne(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.peek()",
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.relaxedPeek()",
                    "public boolean org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.offerIfBelowThreshold(final E e, int threshold)",
                    "public final int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.failFastOffer(final E e)",
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.peek()",
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.relaxedOffer(E e)",
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.relaxedPeek()",
                    "private E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.removeElement(final AtomicReferenceArray<E> buffer, long index, final int mask)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.peek()",
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "private boolean org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.offerSlowPath(final AtomicReferenceArray<E> buffer, final int mask, final long producerIndex)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscChunkedAtomicArrayQueue.java": [
                    "final boolean org.jctools.queues.atomic.SpscChunkedAtomicArrayQueue<E>.offerColdPath(AtomicReferenceArray<E> buffer, long mask, long pIndex, int offset, E v, Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscGrowableAtomicArrayQueue.java": [
                    "final boolean org.jctools.queues.atomic.SpscGrowableAtomicArrayQueue<E>.offerColdPath(final AtomicReferenceArray<E> buffer, final long mask, final long index, final int offset, final E v, final Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscUnboundedAtomicArrayQueue.java": [
                    "final boolean org.jctools.queues.atomic.SpscUnboundedAtomicArrayQueue<E>.offerColdPath(AtomicReferenceArray<E> buffer, long mask, long pIndex, int offset, E v, Supplier<? extends E> s)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public E org.jctools.queues.FFBuffer<E>.poll()",
                    "public E org.jctools.queues.FFBuffer<E>.peek()",
                    "public boolean org.jctools.queues.FFBuffer<E>.offer(final E e)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/MpscRelaxedArrayQueue.java": [
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.relaxedPeek()",
                    "private void org.jctools.queues.MpscRelaxedArrayQueue<E>.soCycleElement(E[] buffer, E e, int activeCycleIndex, int positionWithinCycle, int cycleLengthLog2)",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpscRelaxedArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public void org.jctools.queues.MpscRelaxedArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "private E org.jctools.queues.MpscRelaxedArrayQueue<E>.spinForElement(final E[] buffer, long offset)",
                    "private void org.jctools.queues.MpscRelaxedArrayQueue<E>.signalConsumerProgress(long consumerPosition, E[] buffer, long offset)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/MpscSequencedArrayQueue.java": [
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.MpscSequencedArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.peek()"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.remove(Object val)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.removeSlowPath(Object val, E[] buffer, long mask, int hash)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.containsImpl(Object needle)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.addForResize(final E[] buffer, final long mask, E newVal)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.compactAndRemove(final E[] buffer, final long mask, int removeHashIndex)",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.add(E newVal)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.containsSlowPath(final E[] buffer, final long mask, final int hash, Object needle)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.addSlowPath(E[] buffer, long mask, E newVal, int hash)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "f69aa2f9a989bba61e35e8ce12464dedcc707d6d",
        "previous_commit": "3bedbf67c4c2ee96cd74de8f0ea9b90bf42be49b",
        "date": 1576858630,
        "releases": {
            "previous": "f69aa2f9a989bba61e35e8ce12464dedcc707d6d",
            "next": "f69aa2f9a989bba61e35e8ce12464dedcc707d6d"
        },
        "commit_message": "Reduce indirection and remove unused helpers\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "f69aa2f9a989bba61e35e8ce12464dedcc707d6d": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.organiseImports(CompilationUnit cu)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.BaseSpscLinkedArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.poll()",
                    "private E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.newBufferPeek(final E[] buffer, final long index)",
                    "private E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.newBufferPoll(final E[] buffer, final long index)",
                    "public E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.peek()",
                    "public int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "public Iterator<E> org.jctools.queues.ConcurrentCircularArrayQueue<E>.iterator()",
                    "public E org.jctools.queues.ConcurrentCircularArrayQueue<E>.next()",
                    "private E org.jctools.queues.ConcurrentCircularArrayQueue<E>.getNext()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.relaxedOffer(E e)",
                    "private int org.jctools.queues.MpmcArrayQueue<E>.fillOneByOne(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPeek()",
                    "private int org.jctools.queues.MpmcArrayQueue<E>.drainOneByOne(Consumer<E> c, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public final int org.jctools.queues.MpscArrayQueue<E>.failFastOffer(final E e)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPoll()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offerIfBelowThreshold(final E e, int threshold)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPeek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.relaxedOffer(E e)",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.relaxedPeek()",
                    "private E org.jctools.queues.SpmcArrayQueue<E>.removeElement(final E[] buffer, long index, final long mask)",
                    "public int org.jctools.queues.SpmcArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public void org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public void org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()",
                    "public int org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public int org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "private boolean org.jctools.queues.SpscArrayQueue<E>.offerSlowPath(final E[] buffer, final long mask, final long producerIndex)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscChunkedArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscChunkedArrayQueue<E>.offerColdPath(E[] buffer, long mask, long pIndex, long offset, E v, Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath( final E[] buffer, final long mask, final long index, final long offset, final E v, final Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offerColdPath(E[] buffer, long mask, long pIndex, long offset, E v, Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/AtomicReferenceArrayQueue.java": [
                    "public final Iterator<E> org.jctools.queues.atomic.AtomicReferenceArrayQueue<E>.iterator()",
                    "public E org.jctools.queues.atomic.AtomicReferenceArrayQueue<E>.next()",
                    "private E org.jctools.queues.atomic.AtomicReferenceArrayQueue<E>.getNext()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.offer(final E e)",
                    "private E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.newBufferPeek(final AtomicReferenceArray<E> buffer, final long index)",
                    "public E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.peek()",
                    "public E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.poll()",
                    "public int org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "private E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.newBufferPoll(final AtomicReferenceArray<E> buffer, final long index)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "private int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fillOneByOne(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedOffer(E e)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedPeek()",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.peek()",
                    "private int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drainOneByOne(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.peek()",
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.relaxedPeek()",
                    "public boolean org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.offerIfBelowThreshold(final E e, int threshold)",
                    "public final int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.failFastOffer(final E e)",
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.peek()",
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.relaxedOffer(E e)",
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.relaxedPeek()",
                    "private E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.removeElement(final AtomicReferenceArray<E> buffer, long index, final int mask)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.peek()",
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "private boolean org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.offerSlowPath(final AtomicReferenceArray<E> buffer, final int mask, final long producerIndex)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscChunkedAtomicArrayQueue.java": [
                    "final boolean org.jctools.queues.atomic.SpscChunkedAtomicArrayQueue<E>.offerColdPath(AtomicReferenceArray<E> buffer, long mask, long pIndex, int offset, E v, Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscGrowableAtomicArrayQueue.java": [
                    "final boolean org.jctools.queues.atomic.SpscGrowableAtomicArrayQueue<E>.offerColdPath(final AtomicReferenceArray<E> buffer, final long mask, final long index, final int offset, final E v, final Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscUnboundedAtomicArrayQueue.java": [
                    "final boolean org.jctools.queues.atomic.SpscUnboundedAtomicArrayQueue<E>.offerColdPath(AtomicReferenceArray<E> buffer, long mask, long pIndex, int offset, E v, Supplier<? extends E> s)"
                ]
            },
            "3bedbf67c4c2ee96cd74de8f0ea9b90bf42be49b": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.organiseImports(CompilationUnit cu)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.BaseSpscLinkedArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.poll()",
                    "private E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.newBufferPeek(final E[] buffer, final long index)",
                    "private E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.newBufferPoll(final E[] buffer, final long index)",
                    "public E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.peek()",
                    "public int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "public final Iterator<E> org.jctools.queues.ConcurrentCircularArrayQueue<E>.iterator()",
                    "public E org.jctools.queues.ConcurrentCircularArrayQueue<E>.next()",
                    "private E org.jctools.queues.ConcurrentCircularArrayQueue<E>.getNext()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.relaxedOffer(E e)",
                    "private int org.jctools.queues.MpmcArrayQueue<E>.fillOneByOne(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPeek()",
                    "private int org.jctools.queues.MpmcArrayQueue<E>.drainOneByOne(Consumer<E> c, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public final int org.jctools.queues.MpscArrayQueue<E>.failFastOffer(final E e)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPoll()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offerIfBelowThreshold(final E e, int threshold)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPeek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.relaxedOffer(E e)",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.relaxedPeek()",
                    "private E org.jctools.queues.SpmcArrayQueue<E>.removeElement(final E[] buffer, long index, final long mask)",
                    "public int org.jctools.queues.SpmcArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public void org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public void org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()",
                    "public int org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public int org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "private boolean org.jctools.queues.SpscArrayQueue<E>.offerSlowPath(final E[] buffer, final long mask, final long producerIndex)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscChunkedArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscChunkedArrayQueue<E>.offerColdPath(E[] buffer, long mask, long pIndex, long offset, E v, Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath( final E[] buffer, final long mask, final long index, final long offset, final E v, final Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offerColdPath(E[] buffer, long mask, long pIndex, long offset, E v, Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/AtomicReferenceArrayQueue.java": [
                    "public final Iterator<E> org.jctools.queues.atomic.AtomicReferenceArrayQueue<E>.iterator()",
                    "public E org.jctools.queues.atomic.AtomicReferenceArrayQueue<E>.next()",
                    "private E org.jctools.queues.atomic.AtomicReferenceArrayQueue<E>.getNext()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.offer(final E e)",
                    "private E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.newBufferPeek(final AtomicReferenceArray<E> buffer, final long index)",
                    "public E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.peek()",
                    "public E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.poll()",
                    "public int org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "private E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.newBufferPoll(final AtomicReferenceArray<E> buffer, final long index)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "private int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fillOneByOne(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedOffer(E e)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedPeek()",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.peek()",
                    "private int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drainOneByOne(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.peek()",
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.relaxedPeek()",
                    "public boolean org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.offerIfBelowThreshold(final E e, int threshold)",
                    "public final int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.failFastOffer(final E e)",
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.peek()",
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.relaxedOffer(E e)",
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.relaxedPeek()",
                    "private E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.removeElement(final AtomicReferenceArray<E> buffer, long index, final int mask)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.peek()",
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "private boolean org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.offerSlowPath(final AtomicReferenceArray<E> buffer, final int mask, final long producerIndex)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscChunkedAtomicArrayQueue.java": [
                    "final boolean org.jctools.queues.atomic.SpscChunkedAtomicArrayQueue<E>.offerColdPath(AtomicReferenceArray<E> buffer, long mask, long pIndex, int offset, E v, Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscGrowableAtomicArrayQueue.java": [
                    "final boolean org.jctools.queues.atomic.SpscGrowableAtomicArrayQueue<E>.offerColdPath(final AtomicReferenceArray<E> buffer, final long mask, final long index, final int offset, final E v, final Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscUnboundedAtomicArrayQueue.java": [
                    "final boolean org.jctools.queues.atomic.SpscUnboundedAtomicArrayQueue<E>.offerColdPath(AtomicReferenceArray<E> buffer, long mask, long pIndex, int offset, E v, Supplier<? extends E> s)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "72c55e5bee5ed05e47c5f997f8d4bc9d736659d1",
        "previous_commit": "84dbbbaa3bb95d04efe23921a6898d5feb1d3c17",
        "date": 1526901267,
        "releases": {
            "previous": "72c55e5bee5ed05e47c5f997f8d4bc9d736659d1",
            "next": "72c55e5bee5ed05e47c5f997f8d4bc9d736659d1"
        },
        "commit_message": "Fix up visibility and fix #209\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "72c55e5bee5ed05e47c5f997f8d4bc9d736659d1": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "public void org.jctools.queues.BaseLinkedQueue<E>.drain(Consumer<E> c, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.BaseLinkedQueue<E>.drain(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.poll()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.relaxedPoll()",
                    "public final long org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields<E>.lvProducerIndex()",
                    "public final long org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields<E>.lvConsumerIndex()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.BaseSpscLinkedArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.poll()",
                    "public final long org.jctools.queues.BaseSpscLinkedArrayQueueProducerFields<E>.lvProducerIndex()",
                    "public final long org.jctools.queues.BaseSpscLinkedArrayQueueConsumerField<E>.lvConsumerIndex()",
                    "public int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "final long org.jctools.queues.MpscArrayQueueConsumerIndexField<E>.lpConsumerIndex()",
                    "public final long org.jctools.queues.MpscArrayQueueConsumerIndexField<E>.lvConsumerIndex()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue7.java": [
                    "protected final LinkedQueueNode<E> org.jctools.queues.MpscLinkedQueue7<E>.xchgProducerNode(LinkedQueueNode<E> newVal)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.relaxedOffer(E e)",
                    "public int org.jctools.queues.SpmcArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public void org.jctools.queues.SpmcArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public final long org.jctools.queues.SpmcArrayQueueProducerIndexField<E>.lvProducerIndex()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public void org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public void org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.peek()",
                    "public final long org.jctools.queues.SpscArrayQueueProducerIndexFields<E>.lvProducerIndex()",
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()",
                    "public int org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public int org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public void org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseLinkedAtomicQueue.java": [
                    "public void org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.drain(Consumer<E> c, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.drain(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.poll()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public void org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.relaxedOffer(E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.peek()",
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public void org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ]
            },
            "84dbbbaa3bb95d04efe23921a6898d5feb1d3c17": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "public void org.jctools.queues.BaseLinkedQueue<E>.drain(Consumer<E> c, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.BaseLinkedQueue<E>.drain(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.poll()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.relaxedPoll()",
                    "public final long org.jctools.queues.BaseMpscLinkedArrayQueueProducerFields<E>.lvProducerIndex()",
                    "public final long org.jctools.queues.BaseMpscLinkedArrayQueueConsumerFields<E>.lvConsumerIndex()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.BaseSpscLinkedArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.poll()",
                    "public final long org.jctools.queues.BaseSpscLinkedArrayQueueProducerFields<E>.lvProducerIndex()",
                    "public final long org.jctools.queues.BaseSpscLinkedArrayQueueConsumerField<E>.lvConsumerIndex()",
                    "public int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public final long org.jctools.queues.MpscArrayQueueConsumerIndexField<E>.lvConsumerIndex()",
                    "protected final long org.jctools.queues.MpscArrayQueueConsumerIndexField<E>.lpConsumerIndex()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue7.java": [
                    "protected final LinkedQueueNode<E> org.jctools.queues.MpscLinkedQueue7<E>.xchgProducerNode(LinkedQueueNode<E> newVal)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.relaxedOffer(E e)",
                    "public int org.jctools.queues.SpmcArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public void org.jctools.queues.SpmcArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public final long org.jctools.queues.SpmcArrayQueueProducerIndexField<E>.lvProducerIndex()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public void org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public void org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.peek()",
                    "public final long org.jctools.queues.SpscArrayQueueProducerIndexFields<E>.lvProducerIndex()",
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()",
                    "public int org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public int org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public void org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseLinkedAtomicQueue.java": [
                    "public void org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.drain(Consumer<E> c, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.drain(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.poll()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public void org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.relaxedOffer(E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.peek()",
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public void org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "58d8c95b89cab0794a32f508d63ed611f6c2dd08",
        "previous_commit": "d07783a2d69d96fb26069715e747748d38c5efe3",
        "date": 1574071111,
        "releases": {
            "previous": "58d8c95b89cab0794a32f508d63ed611f6c2dd08",
            "next": "58d8c95b89cab0794a32f508d63ed611f6c2dd08"
        },
        "commit_message": "Use standard drain/fill, add drain param checks + tests\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "58d8c95b89cab0794a32f508d63ed611f6c2dd08": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "public int org.jctools.queues.BaseLinkedQueue<E>.drain(Consumer<E> c)",
                    "public void org.jctools.queues.BaseLinkedQueue<E>.drain(Consumer<E> c, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.BaseLinkedQueue<E>.drain(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c)",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s)",
                    "public void org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public void org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public int org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.drain(Consumer<E> c)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public void org.jctools.queues.MpscArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public void org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s)",
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.drain(final Consumer<E> c, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public void org.jctools.queues.MpscCompoundQueue<E>.drain(Consumer<E> c, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.MpscCompoundQueue<E>.drain(Consumer<E> c, int limit)",
                    "public int org.jctools.queues.MpscCompoundQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public void org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public void org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public void org.jctools.queues.SpmcArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public int org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public int org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c)",
                    "public void org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public void org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public int org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseLinkedAtomicQueue.java": [
                    "public void org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.drain(Consumer<E> c, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.drain(Consumer<E> c, int limit)",
                    "public int org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.drain(Consumer<E> c)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public void org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public void org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public void org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public void org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.drain(final Consumer<E> c)",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.relaxedOffer(E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)"
                ]
            },
            "d07783a2d69d96fb26069715e747748d38c5efe3": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "public int org.jctools.queues.BaseLinkedQueue<E>.drain(Consumer<E> c)",
                    "public void org.jctools.queues.BaseLinkedQueue<E>.drain(Consumer<E> c, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.BaseLinkedQueue<E>.drain(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public void org.jctools.queues.MpmcArrayQueue<E>.drain( Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s)",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c)",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public void org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public int org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.drain(Consumer<E> c)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public void org.jctools.queues.MpscArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public void org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s)",
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.drain(final Consumer<E> c, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public int org.jctools.queues.MpscCompoundQueue<E>.drain(Consumer<E> c, int limit)",
                    "public void org.jctools.queues.MpscCompoundQueue<E>.drain( Consumer<E> c, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.MpscCompoundQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public void org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public void org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public void org.jctools.queues.SpmcArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public int org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public int org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c)",
                    "public void org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public void org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public int org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseLinkedAtomicQueue.java": [
                    "public void org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.drain(Consumer<E> c, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.drain(Consumer<E> c, int limit)",
                    "public int org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.drain(Consumer<E> c)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public void org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public void org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public void org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public void org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.drain(final Consumer<E> c)",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.relaxedOffer(E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "4e68fd268b6d936c6e73aacb1badaa48586d539f",
        "previous_commit": "e5feff2aafc4c8ce46179eb4d1b5bd518f8c6559",
        "date": 1503303559,
        "releases": {
            "previous": "4e68fd268b6d936c6e73aacb1badaa48586d539f",
            "next": "4e68fd268b6d936c6e73aacb1badaa48586d539f"
        },
        "commit_message": "Merge branch 'homogenize_atomic_linked_queues' of git://github.com/kay/JCTools into kay-homogenize_atomic_linked_queues\n\n# Conflicts:\n#\tjctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java\n#\tjctools-core/src/main/java/org/jctools/queues/atomic/AtomicReferenceArrayQueue.java\n#\tjctools-core/src/main/java/org/jctools/queues/atomic/BaseLinkedAtomicQueue.java\n#\tjctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java\n#\tjctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java\n#\tjctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "4e68fd268b6d936c6e73aacb1badaa48586d539f": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public void org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill( Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public void org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s)",
                    "public void org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public void org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedArrayQueue.java": [
                    "public int org.jctools.queues.MpscUnboundedArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public void org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public int org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.offer(final E e)",
                    "final long org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueColdProducerFields<E>.lvProducerLimit()",
                    "private void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.resize(long oldMask, AtomicReferenceArray<E> oldBuffer, long pIndex, E e)",
                    "final boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueColdProducerFields<E>.casProducerLimit(long expect, long newValue)",
                    "public final long org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueConsumerFields<E>.lvConsumerIndex()",
                    "public final long org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields<E>.lvProducerIndex()",
                    "private AtomicReferenceArray<E> org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.getNextBuffer(final AtomicReferenceArray<E> buffer, final long mask)",
                    "private int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferAndOffset(AtomicReferenceArray<E> nextBuffer, long index)",
                    "public void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "final boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields<E>.casProducerIndex(long expect, long newValue)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.peek()",
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.poll()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPoll()",
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public void org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s)",
                    "public void org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public final boolean org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscUnboundedAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.drain(final Consumer<E> c)"
                ]
            },
            "e5feff2aafc4c8ce46179eb4d1b5bd518f8c6559": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public void org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill( Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public void org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s)",
                    "public void org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public void org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedArrayQueue.java": [
                    "public int org.jctools.queues.MpscUnboundedArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public void org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public int org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.offer(final E e)",
                    "private boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.casProducerIndex(long expect, long newValue)",
                    "private long org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.lvConsumerIndex()",
                    "private int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferAndOffset(AtomicReferenceArray<E> nextBuffer, final long index)",
                    "private AtomicReferenceArray<E> org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.getNextBuffer(final AtomicReferenceArray<E> buffer, final long mask)",
                    "private boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.casProducerLimit(long expect, long newValue)",
                    "public void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.peek()",
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s)",
                    "private long org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.lvProducerIndex()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.poll()",
                    "private long org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.lvProducerLimit()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPoll()",
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int batchSize)",
                    "private void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.resize(long oldMask, AtomicReferenceArray<E> oldBuffer, long pIndex, final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public void org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s)",
                    "public void org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public final boolean org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscUnboundedAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.drain(final Consumer<E> c)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "78965db4efd244c428cea9825527f4ab8101ab00",
        "previous_commit": "d751cda56d66b23b89ff29d9eeb7e2b710bb29d3",
        "date": 1573049857,
        "releases": {
            "previous": "78965db4efd244c428cea9825527f4ab8101ab00",
            "next": "78965db4efd244c428cea9825527f4ab8101ab00"
        },
        "commit_message": "Standardize on arg checking for `fill` methods + tests\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "78965db4efd244c428cea9825527f4ab8101ab00": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill( Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public void org.jctools.queues.MpmcArrayQueue<E>.fill( Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public int org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public void org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public void org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill( Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public int org.jctools.queues.MpscCompoundQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.MpscCompoundQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public int org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public int org.jctools.queues.SpmcArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public void org.jctools.queues.SpmcArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public void org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public int org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public int org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public void org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public void org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public void org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            },
            "d751cda56d66b23b89ff29d9eeb7e2b710bb29d3": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill( Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public void org.jctools.queues.MpmcArrayQueue<E>.fill( Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public int org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public void org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public void org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill( Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public int org.jctools.queues.MpscCompoundQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.MpscCompoundQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public int org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public int org.jctools.queues.SpmcArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public void org.jctools.queues.SpmcArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public void org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public int org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public int org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public void org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public void org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public void org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "9c6339fdf8ef38760eabee87de0a0259d3a578e6",
        "previous_commit": "28b866eb886f6f70731dd7edf4061885ec640ef1",
        "date": 1606381415,
        "releases": {
            "previous": "9c6339fdf8ef38760eabee87de0a0259d3a578e6",
            "next": "9c6339fdf8ef38760eabee87de0a0259d3a578e6"
        },
        "commit_message": "Consolidate padded long classes and move to core\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "9c6339fdf8ef38760eabee87de0a0259d3a578e6": {
                "jctools-core/src/main/java/org/jctools/util/PaddedAtomicLong.java": [
                    "public long org.jctools.util.PaddedAtomicLong.get()",
                    "public void org.jctools.util.PaddedAtomicLong.lazySet(long newValue)",
                    "public long org.jctools.util.PaddedAtomicLong.getAndAccumulate(long v, LongBinaryOperator f)",
                    "public long org.jctools.util.PaddedAtomicLong.addAndGet(long delta)",
                    "public boolean org.jctools.util.PaddedAtomicLong.compareAndSet(long expect, long update)",
                    "public long org.jctools.util.PaddedAtomicLong.getAndDecrement()",
                    "public long org.jctools.util.PaddedAtomicLong.decrementAndGet()",
                    "public long org.jctools.util.PaddedAtomicLong.longValue()",
                    "public double org.jctools.util.PaddedAtomicLong.doubleValue()",
                    "public float org.jctools.util.PaddedAtomicLong.floatValue()",
                    "public long org.jctools.util.PaddedAtomicLong.accumulateAndGet(long x, LongBinaryOperator f)",
                    "public long org.jctools.util.PaddedAtomicLong.getAndUpdate(LongUnaryOperator updateFunction)",
                    "public boolean org.jctools.util.PaddedAtomicLong.weakCompareAndSet(long expect, long update)",
                    "public long org.jctools.util.PaddedAtomicLong.getAndSet(long newValue)",
                    "public long org.jctools.util.PaddedAtomicLong.updateAndGet(LongUnaryOperator updateFunction)",
                    "public long org.jctools.util.PaddedAtomicLong.incrementAndGet()",
                    "public long org.jctools.util.PaddedAtomicLong.getAndIncrement()",
                    "public String org.jctools.util.PaddedAtomicLong.toString()",
                    "public int org.jctools.util.PaddedAtomicLong.intValue()",
                    "public long org.jctools.util.PaddedAtomicLong.getAndAdd(long delta)",
                    "public void org.jctools.util.PaddedAtomicLong.set(long newValue)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/FloatingCountersSpscConcurrentArrayQueue.java": [
                    "public boolean org.jctools.queues.FloatingCountersSpscConcurrentArrayQueue<E>.contains(final Object o)",
                    "public int org.jctools.queues.FloatingCountersSpscConcurrentArrayQueue<E>.size()",
                    "public E org.jctools.queues.FloatingCountersSpscConcurrentArrayQueue<E>.peek()",
                    "public E org.jctools.queues.FloatingCountersSpscConcurrentArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.FloatingCountersSpscConcurrentArrayQueue<E>.isEmpty()",
                    "public boolean org.jctools.queues.FloatingCountersSpscConcurrentArrayQueue<E>.offer(final E e)",
                    "private E org.jctools.queues.FloatingCountersSpscConcurrentArrayQueue<E>.getElement(long index)"
                ]
            },
            "28b866eb886f6f70731dd7edf4061885ec640ef1": {
                "jctools-core/src/main/java/org/jctools/util/PaddedAtomicLong.java": [
                    "public long org.jctools.util.PaddedAtomicLong.get()",
                    "public void org.jctools.util.PaddedAtomicLong.lazySet(long newValue)",
                    "public long org.jctools.util.PaddedAtomicLong.getAndAccumulate(long v, LongBinaryOperator f)",
                    "public long org.jctools.util.PaddedAtomicLong.addAndGet(long delta)",
                    "public boolean org.jctools.util.PaddedAtomicLong.compareAndSet(long expect, long update)",
                    "public long org.jctools.util.PaddedAtomicLong.getAndDecrement()",
                    "public long org.jctools.util.PaddedAtomicLong.decrementAndGet()",
                    "public long org.jctools.util.PaddedAtomicLong.longValue()",
                    "public double org.jctools.util.PaddedAtomicLong.doubleValue()",
                    "public float org.jctools.util.PaddedAtomicLong.floatValue()",
                    "public long org.jctools.util.PaddedAtomicLong.accumulateAndGet(long x, LongBinaryOperator f)",
                    "public long org.jctools.util.PaddedAtomicLong.getAndUpdate(LongUnaryOperator updateFunction)",
                    "public boolean org.jctools.util.PaddedAtomicLong.weakCompareAndSet(long expect, long update)",
                    "public long org.jctools.util.PaddedAtomicLong.getAndSet(long newValue)",
                    "public long org.jctools.util.PaddedAtomicLong.updateAndGet(LongUnaryOperator updateFunction)",
                    "public long org.jctools.util.PaddedAtomicLong.incrementAndGet()",
                    "public long org.jctools.util.PaddedAtomicLong.getAndIncrement()",
                    "public String org.jctools.util.PaddedAtomicLong.toString()",
                    "public int org.jctools.util.PaddedAtomicLong.intValue()",
                    "public long org.jctools.util.PaddedAtomicLong.getAndAdd(long delta)",
                    "public void org.jctools.util.PaddedAtomicLong.set(long newValue)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/FloatingCountersSpscConcurrentArrayQueue.java": [
                    "public boolean org.jctools.queues.FloatingCountersSpscConcurrentArrayQueue<E>.contains(final Object o)",
                    "public int org.jctools.queues.FloatingCountersSpscConcurrentArrayQueue<E>.size()",
                    "public E org.jctools.queues.FloatingCountersSpscConcurrentArrayQueue<E>.peek()",
                    "public E org.jctools.queues.FloatingCountersSpscConcurrentArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.FloatingCountersSpscConcurrentArrayQueue<E>.isEmpty()",
                    "public boolean org.jctools.queues.FloatingCountersSpscConcurrentArrayQueue<E>.offer(final E e)",
                    "private E org.jctools.queues.FloatingCountersSpscConcurrentArrayQueue<E>.getElement(long index)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "42fa9fab84026952fc31b06b69ba156b92c2d11b",
        "previous_commit": "118fb65c71015e19a56d620f1988a0eb080d5e88",
        "date": 1435930067,
        "releases": {
            "previous": "42fa9fab84026952fc31b06b69ba156b92c2d11b",
            "next": "42fa9fab84026952fc31b06b69ba156b92c2d11b"
        },
        "commit_message": "extract ref array access and circular array offset calculators into\nseparate classes",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "42fa9fab84026952fc31b06b69ba156b92c2d11b": {
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "protected static final long org.jctools.queues.ConcurrentCircularArrayQueue<E>.calcElementOffset(long index, long mask)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "protected final long org.jctools.queues.MpscArrayQueueHeadCacheField<E>.lvConsumerIndexCache()",
                    "public final int org.jctools.queues.MpscArrayQueue<E>.weakOffer(final E e)",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)",
                    "protected final void org.jctools.queues.MpscArrayQueueHeadCacheField<E>.svConsumerIndexCache(long v)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()",
                    "public E org.jctools.queues.SpscArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "public final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offer(final E e)",
                    "private E org.jctools.queues.SpscGrowableArrayQueue<E>.newBufferPoll(E[] nextBuffer, final long index)",
                    "private E org.jctools.queues.SpscGrowableArrayQueue<E>.newBufferPeek(E[] nextBuffer, final long index)",
                    "private void org.jctools.queues.SpscGrowableArrayQueue<E>.adjustLookAheadStep(int capacity)",
                    "public final E org.jctools.queues.SpscGrowableArrayQueue<E>.peek()",
                    "public final E org.jctools.queues.SpscGrowableArrayQueue<E>.poll()"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public E org.jctools.queues.FFBuffer<E>.poll()",
                    "public boolean org.jctools.queues.FFBuffer<E>.offer(final E e)",
                    "private E org.jctools.queues.FFBuffer<E>.getElement(long index)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/MpscSequencedArrayQueue.java": [
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.MpscSequencedArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.peek()"
                ]
            },
            "118fb65c71015e19a56d620f1988a0eb080d5e88": {
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "protected static final long org.jctools.queues.ConcurrentCircularArrayQueue<E>.calcElementOffset(long index, long mask)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "protected final long org.jctools.queues.MpscArrayQueueHeadCacheField<E>.lvConsumerIndexCache()",
                    "public final int org.jctools.queues.MpscArrayQueue<E>.weakOffer(final E e)",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)",
                    "protected final void org.jctools.queues.MpscArrayQueueHeadCacheField<E>.svConsumerIndexCache(long v)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()",
                    "public E org.jctools.queues.SpscArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "public final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offer(final E e)",
                    "private E org.jctools.queues.SpscGrowableArrayQueue<E>.newBufferPoll(E[] nextBuffer, final long index)",
                    "private E org.jctools.queues.SpscGrowableArrayQueue<E>.newBufferPeek(E[] nextBuffer, final long index)",
                    "private void org.jctools.queues.SpscGrowableArrayQueue<E>.adjustLookAheadStep(int capacity)",
                    "public final E org.jctools.queues.SpscGrowableArrayQueue<E>.peek()",
                    "public final E org.jctools.queues.SpscGrowableArrayQueue<E>.poll()"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public E org.jctools.queues.FFBuffer<E>.poll()",
                    "public boolean org.jctools.queues.FFBuffer<E>.offer(final E e)",
                    "private E org.jctools.queues.FFBuffer<E>.getElement(long index)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/MpscSequencedArrayQueue.java": [
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.MpscSequencedArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "e5da44dc316d8ce2914b5081a39506a06cf24c0c",
        "previous_commit": "bfaa2da99397d196f77be18a3680087e896a337f",
        "date": 1573039932,
        "releases": {
            "previous": "e5da44dc316d8ce2914b5081a39506a06cf24c0c",
            "next": "e5da44dc316d8ce2914b5081a39506a06cf24c0c"
        },
        "commit_message": "Fix argument checks on `fill(s,limit)`, add tests\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "e5da44dc316d8ce2914b5081a39506a06cf24c0c": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public int org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public int org.jctools.queues.MpscCompoundQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public int org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public int org.jctools.queues.SpmcArrayQueue<E>.fill(final Supplier<E> s, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public int org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public int org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public int org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public int org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            },
            "bfaa2da99397d196f77be18a3680087e896a337f": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public int org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public int org.jctools.queues.MpscCompoundQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public int org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public int org.jctools.queues.SpmcArrayQueue<E>.fill(final Supplier<E> s, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public int org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public int org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public int org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.fill(final Supplier<E> s, final int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public int org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "4db7bd71c4a70093eeafc4545668a7d227d940d0",
        "previous_commit": "615c6583174a1a9a8928b6ed0efa8f2e1a1b6798",
        "date": 1451570626,
        "releases": {
            "previous": "4db7bd71c4a70093eeafc4545668a7d227d940d0",
            "next": "4db7bd71c4a70093eeafc4545668a7d227d940d0"
        },
        "commit_message": "Fix remove in all impls.\n\nAlso stop using Unsafe for plain implementations.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "4db7bd71c4a70093eeafc4545668a7d227d940d0": {
                "jctools-experimental/src/main/java/org/jctools/sets/IdentityOpenHashSet.java": [
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.resize()",
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.add(E newVal)",
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.remove(Object val)",
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.findNextVal()",
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.contains(Object needle)",
                    "public void org.jctools.sets.IdentityOpenHashSet<E>.remove()",
                    "public E org.jctools.sets.IdentityOpenHashSet<E>.next()"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/OpenHashSet.java": [
                    "public E org.jctools.sets.OpenHashSet<E>.next()",
                    "public void org.jctools.sets.OpenHashSet<E>.remove()",
                    "private void org.jctools.sets.OpenHashSet<E>.resize()",
                    "public boolean org.jctools.sets.OpenHashSet<E>.add(E newVal)",
                    "public boolean org.jctools.sets.OpenHashSet<E>.remove(Object val)",
                    "private void org.jctools.sets.OpenHashSet<E>.findNextVal()",
                    "public boolean org.jctools.sets.OpenHashSet<E>.contains(Object needle)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "private void org.jctools.sets.SingleWriterHashSet<E>.resize()",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.remove(Object val)",
                    "public E org.jctools.sets.SingleWriterHashSet<E>.next()",
                    "public void org.jctools.sets.SingleWriterHashSet<E>.remove()",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.removeSlowPath(Object val, final E[] buffer, final long mask, final int hashCode, final int hash)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.findNextVal()"
                ]
            },
            "615c6583174a1a9a8928b6ed0efa8f2e1a1b6798": {
                "jctools-experimental/src/main/java/org/jctools/sets/IdentityOpenHashSet.java": [
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.resize()",
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.add(E newVal)",
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.remove(Object val)",
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.findNextVal()",
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.contains(Object needle)",
                    "public void org.jctools.sets.IdentityOpenHashSet<E>.remove()",
                    "public E org.jctools.sets.IdentityOpenHashSet<E>.next()"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/OpenHashSet.java": [
                    "public E org.jctools.sets.OpenHashSet<E>.next()",
                    "public void org.jctools.sets.OpenHashSet<E>.remove()",
                    "private void org.jctools.sets.OpenHashSet<E>.resize()",
                    "public boolean org.jctools.sets.OpenHashSet<E>.add(E newVal)",
                    "public boolean org.jctools.sets.OpenHashSet<E>.remove(Object val)",
                    "private void org.jctools.sets.OpenHashSet<E>.findNextVal()",
                    "public boolean org.jctools.sets.OpenHashSet<E>.contains(Object needle)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "private void org.jctools.sets.SingleWriterHashSet<E>.resize()",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.remove(Object val)",
                    "public E org.jctools.sets.SingleWriterHashSet<E>.next()",
                    "public void org.jctools.sets.SingleWriterHashSet<E>.remove()",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.removeSlowPath(Object val, final E[] buffer, final long mask, final int hashCode, final int hash)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.findNextVal()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "4eaa9f2c070babbdf191b7a36f92484c80b5a0bd",
        "previous_commit": "54620a49f249504f94aba71894d0b3fcb181f7a3",
        "date": 1577090347,
        "releases": {
            "previous": "4eaa9f2c070babbdf191b7a36f92484c80b5a0bd",
            "next": "4eaa9f2c070babbdf191b7a36f92484c80b5a0bd"
        },
        "commit_message": "Refactor out the Unsafe long[] access common parts\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "4eaa9f2c070babbdf191b7a36f92484c80b5a0bd": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.relaxedOffer(E e)",
                    "private int org.jctools.queues.MpmcArrayQueue<E>.fillOneByOne(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPoll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "private int org.jctools.queues.MpmcArrayQueue<E>.drainOneByOne(Consumer<E> c, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)",
                    "private boolean org.jctools.queues.MpmcArrayQueue<E>.notAvailable(long index, long mask, long[] sBuffer, long expectedSeq)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "private int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fillOneByOne(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedOffer(E e)",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedPoll()",
                    "private boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.notAvailable(long index, int mask, AtomicLongArray sBuffer, long expectedSeq)",
                    "private int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drainOneByOne(Consumer<E> c, int limit)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/MpscSequencedArrayQueue.java": [
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.MpscSequencedArrayQueue<E>.offer(final E e)"
                ]
            },
            "54620a49f249504f94aba71894d0b3fcb181f7a3": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.relaxedOffer(E e)",
                    "private int org.jctools.queues.MpmcArrayQueue<E>.fillOneByOne(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPoll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "private int org.jctools.queues.MpmcArrayQueue<E>.drainOneByOne(Consumer<E> c, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)",
                    "private boolean org.jctools.queues.MpmcArrayQueue<E>.notAvailable(long index, long mask, long[] sBuffer, long expectedSeq)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "private int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fillOneByOne(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedOffer(E e)",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedPoll()",
                    "private boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.notAvailable(long index, int mask, AtomicLongArray sBuffer, long expectedSeq)",
                    "private int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drainOneByOne(Consumer<E> c, int limit)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/MpscSequencedArrayQueue.java": [
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.MpscSequencedArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "aa9db72892923977fee046f1a1735feeb65228d5",
        "previous_commit": "fd823b2255672f68190e6dce7a60be17722b517e",
        "date": 1395998675,
        "releases": {
            "previous": "aa9db72892923977fee046f1a1735feeb65228d5",
            "next": "aa9db72892923977fee046f1a1735feeb65228d5"
        },
        "commit_message": "Cleanup. Use common class throughout. Implement cached counters for\nMPSC/SPMC",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "aa9db72892923977fee046f1a1735feeb65228d5": {
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueue.java": [
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.offer(final E e)",
                    "public int io.jaq.mpmc.MpmcConcurrentQueue<E>.size()",
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.isEmpty()",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.peek()",
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.contains(final Object o)",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.poll()"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueueCq.java": [
                    "public int io.jaq.mpmc.MpmcConcurrentQueueCq<E>.capacity()",
                    "final long io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.vlHead()",
                    "public int io.jaq.mpmc.MpmcConcurrentQueueCq<E>.size()",
                    "final long io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.vlTail()",
                    "public E io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.peek()"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpsc/MpscCompoundQueue.java": [
                    "public int io.jaq.mpsc.MpscCompoundQueue<E>.capacity()"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpsc/MpscConcurrentQueue.java": [
                    "public boolean io.jaq.mpsc.MpscConcurrentQueue<E>.isEmpty()",
                    "public boolean io.jaq.mpsc.MpscConcurrentQueue<E>.contains(final Object o)",
                    "public int io.jaq.mpsc.MpscConcurrentQueue<E>.offerStatus(final E e)",
                    "public E io.jaq.mpsc.MpscConcurrentQueue<E>.poll()",
                    "public boolean io.jaq.mpsc.MpscConcurrentQueue<E>.offer(final E e)",
                    "public E io.jaq.mpsc.MpscConcurrentQueue<E>.peek()",
                    "protected void io.jaq.mpsc.MpscConcurrentQueueHeadField<E>.lazySetHead(long l)",
                    "public int io.jaq.mpsc.MpscConcurrentQueue<E>.size()"
                ]
            },
            "fd823b2255672f68190e6dce7a60be17722b517e": {
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueue.java": [
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.offer(final E e)",
                    "public int io.jaq.mpmc.MpmcConcurrentQueue<E>.size()",
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.isEmpty()",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.peek()",
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.contains(final Object o)",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.poll()"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueueCq.java": [
                    "final long io.jaq.mpmc.MpmcConcurrentQueueCq<E>.vlHead()",
                    "final long io.jaq.mpmc.MpmcConcurrentQueueCq<E>.vlTail()",
                    "public E io.jaq.mpmc.MpmcConcurrentQueueCq<E>.peek()",
                    "public int io.jaq.mpmc.MpmcConcurrentQueueCq<E>.capacity()",
                    "public int io.jaq.mpmc.MpmcConcurrentQueueCq<E>.size()"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpsc/MpscCompoundQueue.java": [
                    "public int io.jaq.mpsc.MpscCompoundQueue<E>.capacity()"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpsc/MpscConcurrentQueue.java": [
                    "public boolean io.jaq.mpsc.MpscConcurrentQueue<E>.isEmpty()",
                    "public boolean io.jaq.mpsc.MpscConcurrentQueue<E>.contains(final Object o)",
                    "public int io.jaq.mpsc.MpscConcurrentQueue<E>.offerStatus(final E e)",
                    "public E io.jaq.mpsc.MpscConcurrentQueue<E>.poll()",
                    "public boolean io.jaq.mpsc.MpscConcurrentQueue<E>.offer(final E e)",
                    "public E io.jaq.mpsc.MpscConcurrentQueue<E>.peek()",
                    "public int io.jaq.mpsc.MpscConcurrentQueue<E>.size()",
                    "private void io.jaq.mpsc.MpscConcurrentQueue<E>.lazySetHead(long l)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "5a20fbb6fb346744b3434cf19f2386ae065b8cbc",
        "previous_commit": "f69aa2f9a989bba61e35e8ce12464dedcc707d6d",
        "date": 1576858662,
        "releases": {
            "previous": "5a20fbb6fb346744b3434cf19f2386ae065b8cbc",
            "next": "5a20fbb6fb346744b3434cf19f2386ae065b8cbc"
        },
        "commit_message": "Reduce indirection and remove unused helpers\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "5a20fbb6fb346744b3434cf19f2386ae065b8cbc": {
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public E org.jctools.queues.FFBuffer<E>.poll()",
                    "public E org.jctools.queues.FFBuffer<E>.peek()",
                    "public boolean org.jctools.queues.FFBuffer<E>.offer(final E e)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/MpscRelaxedArrayQueue.java": [
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpscRelaxedArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public void org.jctools.queues.MpscRelaxedArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/MpscSequencedArrayQueue.java": [
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.MpscSequencedArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.peek()"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.remove(Object val)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.removeSlowPath(Object val, E[] buffer, long mask, int hash)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.containsImpl(Object needle)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.addForResize(final E[] buffer, final long mask, E newVal)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.compactAndRemove(final E[] buffer, final long mask, int removeHashIndex)",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.add(E newVal)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.containsSlowPath(final E[] buffer, final long mask, final int hash, Object needle)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.addSlowPath(E[] buffer, long mask, E newVal, int hash)"
                ]
            },
            "f69aa2f9a989bba61e35e8ce12464dedcc707d6d": {
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public E org.jctools.queues.FFBuffer<E>.poll()",
                    "public E org.jctools.queues.FFBuffer<E>.peek()",
                    "public boolean org.jctools.queues.FFBuffer<E>.offer(final E e)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/MpscRelaxedArrayQueue.java": [
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpscRelaxedArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public void org.jctools.queues.MpscRelaxedArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/MpscSequencedArrayQueue.java": [
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.MpscSequencedArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.peek()"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.remove(Object val)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.removeSlowPath(Object val, E[] buffer, long mask, int hash)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.containsImpl(Object needle)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.addForResize(final E[] buffer, final long mask, E newVal)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.compactAndRemove(final E[] buffer, final long mask, int removeHashIndex)",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.add(E newVal)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.containsSlowPath(final E[] buffer, final long mask, final int hash, Object needle)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.addSlowPath(E[] buffer, long mask, E newVal, int hash)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "54aa2a2a73847e3a89169b75fc8bbea818278b18",
        "previous_commit": "e383012c506a11cdebb0666b966348f26a4864f1",
        "date": 1403117585,
        "releases": {
            "previous": "54aa2a2a73847e3a89169b75fc8bbea818278b18",
            "next": "54aa2a2a73847e3a89169b75fc8bbea818278b18"
        },
        "commit_message": "Documentation and standards cleanup.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "54aa2a2a73847e3a89169b75fc8bbea818278b18": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.size()",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public int org.jctools.queues.MpscArrayQueue<E>.tryOffer(final E e)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()",
                    "public E org.jctools.queues.SpscArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/alt/ConcurrentQueueFactory.java": [
                    "public static <E> ConcurrentQueue<E> org.jctools.queues.alt.ConcurrentQueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public E org.jctools.queues.FFBuffer<E>.poll()",
                    "public boolean org.jctools.queues.FFBuffer<E>.offer(final E e)",
                    "private E org.jctools.queues.FFBuffer<E>.getElement(long index)"
                ]
            },
            "e383012c506a11cdebb0666b966348f26a4864f1": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.size()",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public int org.jctools.queues.MpscArrayQueue<E>.tryOffer(final E e)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()",
                    "public E org.jctools.queues.SpscArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/alt/ConcurrentQueueFactory.java": [
                    "public static <E> ConcurrentQueue<E> org.jctools.queues.alt.ConcurrentQueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public E org.jctools.queues.FFBuffer<E>.poll()",
                    "public boolean org.jctools.queues.FFBuffer<E>.offer(final E e)",
                    "private E org.jctools.queues.FFBuffer<E>.getElement(long index)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "dfc88034bc1d460b8c2b3980029d68dafb100e4e",
        "previous_commit": "4752a372e993b6ff93db23c4ecfa1a3288b80298",
        "date": 1396026340,
        "releases": {
            "previous": "dfc88034bc1d460b8c2b3980029d68dafb100e4e",
            "next": "dfc88034bc1d460b8c2b3980029d68dafb100e4e"
        },
        "commit_message": "Formatting and renaming",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "dfc88034bc1d460b8c2b3980029d68dafb100e4e": {
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueue.java": [
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.offer(final E e)",
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.contains(final Object o)",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.peek()",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.poll()"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueueCq.java": [
                    "public E io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.poll()",
                    "protected final boolean io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.casHead(long expect, long newValue)",
                    "protected final boolean io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.casTail(long expect, long newValue)",
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.offer(final E e)",
                    "public E io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.peek()"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpsc/MpscConcurrentQueue.java": [
                    "public boolean io.jaq.mpsc.MpscConcurrentQueue<E>.contains(final Object o)",
                    "public int io.jaq.mpsc.MpscConcurrentQueue<E>.offerStatus(final E e)",
                    "public E io.jaq.mpsc.MpscConcurrentQueue<E>.poll()",
                    "public boolean io.jaq.mpsc.MpscConcurrentQueue<E>.offer(final E e)",
                    "public E io.jaq.mpsc.MpscConcurrentQueue<E>.peek()"
                ],
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatchCq.java": [
                    "public E io.jaq.spsc.FFBufferWithOfferBatchCq<E>.peek()",
                    "public E io.jaq.spsc.FFBufferWithOfferBatchCq<E>.poll()",
                    "public boolean io.jaq.spsc.FFBufferWithOfferBatchCq<E>.offer(final E e)"
                ]
            },
            "4752a372e993b6ff93db23c4ecfa1a3288b80298": {
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueue.java": [
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.offer(final E e)",
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.contains(final Object o)",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.peek()",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.poll()"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueueCq.java": [
                    "public E io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.poll()",
                    "protected final boolean io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.casHead(long expect, long newValue)",
                    "protected final boolean io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.casTail(long expect, long newValue)",
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.offer(final E e)",
                    "public E io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.peek()"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpsc/MpscConcurrentQueue.java": [
                    "public boolean io.jaq.mpsc.MpscConcurrentQueue<E>.contains(final Object o)",
                    "public int io.jaq.mpsc.MpscConcurrentQueue<E>.offerStatus(final E e)",
                    "public E io.jaq.mpsc.MpscConcurrentQueue<E>.poll()",
                    "public boolean io.jaq.mpsc.MpscConcurrentQueue<E>.offer(final E e)",
                    "public E io.jaq.mpsc.MpscConcurrentQueue<E>.peek()"
                ],
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatchCq.java": [
                    "public E io.jaq.spsc.FFBufferWithOfferBatchCq<E>.peek()",
                    "public E io.jaq.spsc.FFBufferWithOfferBatchCq<E>.poll()",
                    "public boolean io.jaq.spsc.FFBufferWithOfferBatchCq<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "11189ca08a4ec60adc41c3a5097e5a6dddd452cc",
        "previous_commit": "4eaa9f2c070babbdf191b7a36f92484c80b5a0bd",
        "date": 1577091493,
        "releases": {
            "previous": "11189ca08a4ec60adc41c3a5097e5a6dddd452cc",
            "next": "11189ca08a4ec60adc41c3a5097e5a6dddd452cc"
        },
        "commit_message": "Extract chunks to files + formatting/refactoring\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "11189ca08a4ec60adc41c3a5097e5a6dddd452cc": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "private MpmcUnboundedXaddChunk<E> org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.producerBufferOf(MpmcUnboundedXaddChunk<E> producerBuffer, long expectedChunkIndex)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "private MpmcUnboundedXaddChunk<E> org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.appendNextChunks(MpmcUnboundedXaddChunk<E> producerBuffer, long chunkIndex, int chunkSize, long chunks)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.offer(E e)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "private MpscUnboundedXaddChunk<E> org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.producerBufferOf(MpscUnboundedXaddChunk<E> producerBuffer, long expectedChunkIndex)",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.offer(E e)",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPeek()",
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.drain(Consumer<E> c, int limit)"
                ]
            },
            "4eaa9f2c070babbdf191b7a36f92484c80b5a0bd": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "private AtomicChunk<E> org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.producerBufferOf(AtomicChunk<E> producerBuffer, long expectedChunkIndex)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPeek()",
                    "private AtomicChunk<E> org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.appendNextChunks(AtomicChunk<E> producerBuffer, long chunkIndex, int chunkSize, long chunks)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.offer(E e)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.offer(E e)",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPeek()",
                    "private AtomicChunk<E> org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.producerBufferOf(AtomicChunk<E> producerBuffer, long expectedChunkIndex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "c9f203a781b11719268b7bcff58694206540fd3f",
        "previous_commit": "ef3048d48851becf582841a61edf8863f8a6233d",
        "date": 1453991662,
        "releases": {
            "previous": "c9f203a781b11719268b7bcff58694206540fd3f",
            "next": "c9f203a781b11719268b7bcff58694206540fd3f"
        },
        "commit_message": "IntelliJ 15.0.3 inspections suggestions applied.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "c9f203a781b11719268b7bcff58694206540fd3f": {
                "jctools-experimental/src/main/java/org/jctools/queues/FloatingCountersSpscConcurrentArrayQueue.java": [
                    "public E org.jctools.queues.FloatingCountersSpscConcurrentArrayQueue<E>.poll()"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/MpmcConcurrentQueueStateMarkers.java": [
                    "protected final Object org.jctools.queues.MpmcConcurrentQueueSMBuffer<E>.lvElement(E[] buffer, long offset)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/SpscOffHeapIntQueue.java": [
                    "public boolean org.jctools.queues.SpscOffHeapIntQueue.offer(final Integer e)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/alt/MpmcArrayConcurrentQueue.java": [
                    "public int org.jctools.queues.alt.MpmcArrayConcurrentQueue<E>.size()"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/IdentityOpenHashSet.java": [
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.add(E newVal)",
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.compactAndRemove(final E[] buffer, final int mask, int removeHashIndex)",
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.addForResize(final E[] buffer, final int mask, E newVal)",
                    "private boolean org.jctools.sets.IdentityOpenHashSet<E>.removeSlowPath(Object val, final E[] buffer, final int mask, final int hashCode, final int hash)",
                    "private boolean org.jctools.sets.IdentityOpenHashSet<E>.addSlowPath(E[] buffer, int mask, E newVal, int hash)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/OpenHashSet.java": [
                    "private boolean org.jctools.sets.OpenHashSet<E>.removeSlowPath(Object val, final E[] buffer, final int mask, final int hashCode, final int hash)",
                    "public boolean org.jctools.sets.OpenHashSet<E>.add(E newVal)",
                    "private void org.jctools.sets.OpenHashSet<E>.addForResize(final E[] buffer, final int mask, E newVal)",
                    "private void org.jctools.sets.OpenHashSet<E>.compactAndRemove(final E[] buffer, final int mask, int removeHashIndex)",
                    "private boolean org.jctools.sets.OpenHashSet<E>.addSlowPath(E[] buffer, int mask, E newVal, int hash)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.add(E newVal)"
                ],
                "jctools-experimental/src/main/java/org/jctools/util/Template.java": [
                    "private static Template org.jctools.util.Template.fromStream(InputStream templateStream)"
                ]
            },
            "ef3048d48851becf582841a61edf8863f8a6233d": {
                "jctools-experimental/src/main/java/org/jctools/queues/FloatingCountersSpscConcurrentArrayQueue.java": [
                    "public E org.jctools.queues.FloatingCountersSpscConcurrentArrayQueue<E>.poll()"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/MpmcConcurrentQueueStateMarkers.java": [
                    "protected final Object org.jctools.queues.MpmcConcurrentQueueSMBuffer<E>.lvElement(E[] buffer, long offset)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/SpscOffHeapIntQueue.java": [
                    "public boolean org.jctools.queues.SpscOffHeapIntQueue.offer(final Integer e)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/alt/MpmcArrayConcurrentQueue.java": [
                    "public int org.jctools.queues.alt.MpmcArrayConcurrentQueue<E>.size()"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/IdentityOpenHashSet.java": [
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.add(E newVal)",
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.compactAndRemove(final E[] buffer, final int mask, int removeHashIndex)",
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.addForResize(final E[] buffer, final int mask, E newVal)",
                    "private boolean org.jctools.sets.IdentityOpenHashSet<E>.removeSlowPath(Object val, final E[] buffer, final int mask, final int hashCode, final int hash)",
                    "private boolean org.jctools.sets.IdentityOpenHashSet<E>.addSlowPath(E[] buffer, int mask, E newVal, int hash)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/OpenHashSet.java": [
                    "private boolean org.jctools.sets.OpenHashSet<E>.removeSlowPath(Object val, final E[] buffer, final int mask, final int hashCode, final int hash)",
                    "public boolean org.jctools.sets.OpenHashSet<E>.add(E newVal)",
                    "private void org.jctools.sets.OpenHashSet<E>.addForResize(final E[] buffer, final int mask, E newVal)",
                    "private void org.jctools.sets.OpenHashSet<E>.compactAndRemove(final E[] buffer, final int mask, int removeHashIndex)",
                    "private boolean org.jctools.sets.OpenHashSet<E>.addSlowPath(E[] buffer, int mask, E newVal, int hash)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.add(E newVal)"
                ],
                "jctools-experimental/src/main/java/org/jctools/util/Template.java": [
                    "private static Template org.jctools.util.Template.fromStream(InputStream templateStream)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d4cba97c898c048de9d06a436ad34aa725858f9d",
        "previous_commit": "7ddcf61ccceb67e333c9c3cc75bbb4d659adc785",
        "date": 1502727549,
        "releases": {
            "previous": "d4cba97c898c048de9d06a436ad34aa725858f9d",
            "next": "d4cba97c898c048de9d06a436ad34aa725858f9d"
        },
        "commit_message": "MPSC variant: Refactored base linked array queues to be more similiar.\n\nI've replaced direct accesses to the buffer with the soElement/lvElement/etc\nstyle method accessors like the unsafe variants. I've moved the direct field\naccessors, e.g. soProducerIndex to the padded classes.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d4cba97c898c048de9d06a436ad34aa725858f9d": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "private long org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferAndOffset(E[] nextBuffer, long index)",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferPeek(E[] nextBuffer, long index)",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferPoll(E[] nextBuffer, long index)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.offer(final E e)",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferPoll(AtomicReferenceArray<E> nextBuffer, final long index)",
                    "private void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.resize(long oldMask, AtomicReferenceArray<E> oldBuffer, long pIndex, E e)",
                    "private AtomicReferenceArray<E> org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.getNextBuffer(final AtomicReferenceArray<E> buffer, final long mask)",
                    "private int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferAndOffset(AtomicReferenceArray<E> nextBuffer, long index)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.peek()",
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s)",
                    "public void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill( Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.poll()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPoll()",
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int batchSize)",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferPeek(AtomicReferenceArray<E> nextBuffer, final long index)"
                ]
            },
            "7ddcf61ccceb67e333c9c3cc75bbb4d659adc785": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "private long org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferAndOffset(E[] nextBuffer, long index)",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferPeek(E[] nextBuffer, long index)",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferPoll(E[] nextBuffer, long index)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.offer(final E e)",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferPoll(AtomicReferenceArray<E> nextBuffer, final long index)",
                    "private int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferAndOffset(AtomicReferenceArray<E> nextBuffer, final long index)",
                    "private AtomicReferenceArray<E> org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.getNextBuffer(final AtomicReferenceArray<E> buffer, final long mask)",
                    "public void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.peek()",
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.poll()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPoll()",
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int batchSize)",
                    "private void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.resize(long oldMask, AtomicReferenceArray<E> oldBuffer, long pIndex, final E e)",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferPeek(AtomicReferenceArray<E> nextBuffer, final long index)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d9bab162bb15262cf89ce2dd28c564321e91ec75",
        "previous_commit": "f9d58737ebc7e9e82199796dfaf24d41b2d3daef",
        "date": 1457036654,
        "releases": {
            "previous": "d9bab162bb15262cf89ce2dd28c564321e91ec75",
            "next": "d9bab162bb15262cf89ce2dd28c564321e91ec75"
        },
        "commit_message": "Standardize offer(null) should throw NPE",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d9bab162bb15262cf89ce2dd28c564321e91ec75": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.relaxedOffer(E e)",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "public boolean org.jctools.queues.MpscChunkedArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public boolean org.jctools.queues.MpscCompoundQueue<E>.relaxedOffer(E e)",
                    "public boolean org.jctools.queues.MpscCompoundQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "public boolean org.jctools.queues.MpscGrowableArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "public final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "public final boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.offer(E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscUnboundedAtomicArrayQueue.java": [
                    "public final boolean org.jctools.queues.atomic.SpscUnboundedAtomicArrayQueue<E>.offer(final E e)"
                ]
            },
            "f9d58737ebc7e9e82199796dfaf24d41b2d3daef": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.relaxedOffer(E e)",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "public boolean org.jctools.queues.MpscChunkedArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public boolean org.jctools.queues.MpscCompoundQueue<E>.relaxedOffer(E e)",
                    "public boolean org.jctools.queues.MpscCompoundQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "public boolean org.jctools.queues.MpscGrowableArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "public final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "public final boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.offer(E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscUnboundedAtomicArrayQueue.java": [
                    "public final boolean org.jctools.queues.atomic.SpscUnboundedAtomicArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "03df0a555ac7a7429c1a8f41294b079d0b4ac7c7",
        "previous_commit": "4374f149cf7aa96c83435a3922cc1637e1a06476",
        "date": 1451488430,
        "releases": {
            "previous": "03df0a555ac7a7429c1a8f41294b079d0b4ac7c7",
            "next": "03df0a555ac7a7429c1a8f41294b079d0b4ac7c7"
        },
        "commit_message": "Standardize set implementations.\n\nAlso split out containsSlowPath",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "03df0a555ac7a7429c1a8f41294b079d0b4ac7c7": {
                "jctools-experimental/src/main/java/org/jctools/sets/IdentityOpenHashSet.java": [
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.add(E newVal)",
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.resize()",
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.findNextVal()",
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.remove(Object val)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/OpenHashSet.java": [
                    "private void org.jctools.sets.OpenHashSet<E>.resize()",
                    "public boolean org.jctools.sets.OpenHashSet<E>.remove(Object val)",
                    "private void org.jctools.sets.OpenHashSet<E>.findNextVal()",
                    "public boolean org.jctools.sets.OpenHashSet<E>.add(E newVal)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "private void org.jctools.sets.SingleWriterHashSet<E>.resize()",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.remove(Object val)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.compactValueSequenceAfterRemove(final E[] buffer, final long mask, long removedOffset, final int hashIndexLimit, int removedHashIndex, int removedHashCode)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.addForResize(final E[] buffer, final long mask, E newVal)",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.add(E newVal)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.addSlowPath(E[] buffer, long mask, E newVal, int hash)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.removeSlowPath(Object val, final E[] buffer, final long mask, final int hashCode, final int hash)"
                ]
            },
            "4374f149cf7aa96c83435a3922cc1637e1a06476": {
                "jctools-experimental/src/main/java/org/jctools/sets/IdentityOpenHashSet.java": [
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.add(E newVal)",
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.resize()",
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.findNextVal()",
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.remove(Object val)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/OpenHashSet.java": [
                    "private void org.jctools.sets.OpenHashSet<E>.resize()",
                    "public boolean org.jctools.sets.OpenHashSet<E>.remove(Object val)",
                    "private void org.jctools.sets.OpenHashSet<E>.findNextVal()",
                    "public boolean org.jctools.sets.OpenHashSet<E>.add(E newVal)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "private void org.jctools.sets.SingleWriterHashSet<E>.resize()",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.remove(Object val)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.compactValueSequenceAfterRemove(final E[] buffer, final long mask, long removedOffset, final int hashIndexLimit, int removedHashIndex, int removedHashCode)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.addForResize(final E[] buffer, final long mask, E newVal)",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.add(E newVal)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.addSlowPath(E[] buffer, long mask, E newVal, int hash)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.removeSlowPath(Object val, final E[] buffer, final long mask, final int hashCode, final int hash)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "4cd6cb0d0b718f8d6effbb9c2b94ae999bdf210c",
        "previous_commit": "fb8f16454523946032556a5f754fb953ccd05933",
        "date": 1456971923,
        "releases": {
            "previous": "4cd6cb0d0b718f8d6effbb9c2b94ae999bdf210c",
            "next": "4cd6cb0d0b718f8d6effbb9c2b94ae999bdf210c"
        },
        "commit_message": "Add in benchmark for CAT, tweak\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "4cd6cb0d0b718f8d6effbb9c2b94ae999bdf210c": {
                "jctools-core/src/main/java/org/cliffc/high_scale_lib/ConcurrentAutoTable.java": [
                    "public void org.cliffc.high_scale_lib.ConcurrentAutoTable.add( long x )",
                    "public void org.cliffc.high_scale_lib.ConcurrentAutoTable.increment()",
                    "public int org.cliffc.high_scale_lib.ConcurrentAutoTable.intValue()",
                    "public long org.cliffc.high_scale_lib.ConcurrentAutoTable.longValue()",
                    "public String org.cliffc.high_scale_lib.ConcurrentAutoTable.toString()",
                    "public void org.cliffc.high_scale_lib.ConcurrentAutoTable.decrement()",
                    "public void org.cliffc.high_scale_lib.ConcurrentAutoTable.all_or( long mask )",
                    "public void org.cliffc.high_scale_lib.ConcurrentAutoTable.all_set( long val )",
                    "public long org.cliffc.high_scale_lib.ConcurrentAutoTable.estimate_get( )",
                    "private static final int org.cliffc.high_scale_lib.ConcurrentAutoTable.hash()",
                    "public long org.cliffc.high_scale_lib.ConcurrentAutoTable.estimate_sum( )",
                    "public void org.cliffc.high_scale_lib.ConcurrentAutoTable.print()",
                    "public void org.cliffc.high_scale_lib.ConcurrentAutoTable.all_and( long mask )",
                    "public long org.cliffc.high_scale_lib.ConcurrentAutoTable.get()",
                    "public String org.cliffc.high_scale_lib.ConcurrentAutoTable.toString( )"
                ]
            },
            "fb8f16454523946032556a5f754fb953ccd05933": {
                "jctools-core/src/main/java/org/cliffc/high_scale_lib/ConcurrentAutoTable.java": [
                    "public void org.cliffc.high_scale_lib.ConcurrentAutoTable.add( long x )",
                    "public void org.cliffc.high_scale_lib.ConcurrentAutoTable.increment()",
                    "public int org.cliffc.high_scale_lib.ConcurrentAutoTable.intValue()",
                    "public long org.cliffc.high_scale_lib.ConcurrentAutoTable.longValue()",
                    "public long org.cliffc.high_scale_lib.ConcurrentAutoTable.estimate_sum( long mask )",
                    "public String org.cliffc.high_scale_lib.ConcurrentAutoTable.toString()",
                    "public void org.cliffc.high_scale_lib.ConcurrentAutoTable.decrement()",
                    "public void org.cliffc.high_scale_lib.ConcurrentAutoTable.all_or( long mask )",
                    "public void org.cliffc.high_scale_lib.ConcurrentAutoTable.all_set( long val )",
                    "public long org.cliffc.high_scale_lib.ConcurrentAutoTable.estimate_get( )",
                    "private static final int org.cliffc.high_scale_lib.ConcurrentAutoTable.hash()",
                    "public void org.cliffc.high_scale_lib.ConcurrentAutoTable.print()",
                    "public void org.cliffc.high_scale_lib.ConcurrentAutoTable.all_and( long mask )",
                    "public long org.cliffc.high_scale_lib.ConcurrentAutoTable.get()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "ef83818b91f70c2789c4ee101496bd492ea2ac2a",
        "previous_commit": "41b863311bbdf3cc3f1de9ae0212b4a13796aed0",
        "date": 1441135457,
        "releases": {
            "previous": "ef83818b91f70c2789c4ee101496bd492ea2ac2a",
            "next": "ef83818b91f70c2789c4ee101496bd492ea2ac2a"
        },
        "commit_message": "a more refined drain solution for MPMC and some standardization across\nMpsc/Spmc",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "ef83818b91f70c2789c4ee101496bd492ea2ac2a": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.relaxedOffer(E e)",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public void org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public void org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public int org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c)"
                ]
            },
            "41b863311bbdf3cc3f1de9ae0212b4a13796aed0": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.relaxedOffer(E e)",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public void org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public void org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public int org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "9def52951541af24751964bb0cb4f611f50bdca4",
        "previous_commit": "0ef3df124c06efd365de4a1fa20a0bd74b85d9d0",
        "date": 1480035856,
        "releases": {
            "previous": "9def52951541af24751964bb0cb4f611f50bdca4",
            "next": "9def52951541af24751964bb0cb4f611f50bdca4"
        },
        "commit_message": "Refactoring, added LocalsHelper class to make it easier (hopefully) for\nthe reader to follow local variable accesses within the code generator.\n\nI've renamed some variable names to be consistent with DemoProxyResult.\ne.g. wOffset was used in implementProcess and getUnsafe but\nusage in DemoProxyResult calls that rOffset.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "9def52951541af24751964bb0cb4f611f50bdca4": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.producerReferenceArrayIndex(MethodVisitor methodVisitor)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.putReference(MethodVisitor methodVisitor, Class<?> parameterType, int localIndexOfArrayReferenceBaseIndex, int arrayReferenceBaseIndexDelta, int varOffset)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProcess(ClassVisitor classVisitor, List<Method> methods, Class<?> iFace, String generatedName)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProxyInstance(ClassVisitor classVisitor, Class<?> iFace, String generatedName)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.writeRelease(MethodVisitor methodVisitor, int wOffset, int type)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.readRelease(MethodVisitor methodVisitor, int wOffset)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProxy(ClassVisitor classVisitor, Class<?> iFace, String generatedName)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementConstructor(ClassVisitor classVisitor)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.consumerReferenceArrayIndex(MethodVisitor methodVisitor)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.writeAcquireWithWaitStrategy(MethodVisitor methodVisitor)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.readAcquire(MethodVisitor methodVisitor)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.getReference(MethodVisitor methodVisitor, Class<?> parameterType, int localIndexOfArrayReferenceBaseIndex, int arrayReferenceBaseIndexDelta)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementUserMethod(Method method, ClassVisitor classVisitor, int type)"
                ]
            },
            "0ef3df124c06efd365de4a1fa20a0bd74b85d9d0": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.producerReferenceArrayIndex(MethodVisitor methodVisitor)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.putReference(MethodVisitor methodVisitor, Class<?> parameterType, int localIndexOfArrayReferenceBaseIndex, int arrayReferenceBaseIndexDelta, int varOffset)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProcess(ClassVisitor classVisitor, List<Method> methods, Class<?> iFace, String generatedName)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProxyInstance(ClassVisitor classVisitor, Class<?> iFace, String generatedName)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.writeRelease(MethodVisitor methodVisitor, int wOffset, int type)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.readRelease(MethodVisitor methodVisitor, int wOffset)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProxy(ClassVisitor classVisitor, Class<?> iFace, String generatedName)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementConstructor(ClassVisitor classVisitor)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.consumerReferenceArrayIndex(MethodVisitor methodVisitor)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.writeAcquireWithWaitStrategy(MethodVisitor methodVisitor)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.readAcquire(MethodVisitor methodVisitor)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.getReference(MethodVisitor methodVisitor, Class<?> parameterType, int localIndexOfArrayReferenceBaseIndex, int arrayReferenceBaseIndexDelta)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementUserMethod(Method method, ClassVisitor classVisitor, int type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d2538cf69320b63ffae870686e4af7100304df44",
        "previous_commit": "48adfd10c2ba72d813608fb80d73b5dc53c698b6",
        "date": 1547837785,
        "releases": {
            "previous": "d2538cf69320b63ffae870686e4af7100304df44",
            "next": "d2538cf69320b63ffae870686e4af7100304df44"
        },
        "commit_message": "Update Javadoc, set new buffer reference before updating BUFFER_CONSUMED to ensure iterator doesn't jump to old buffer\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d2538cf69320b63ffae870686e4af7100304df44": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.poll()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.peek()",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferPeek(E[] nextBuffer, long index)",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferPoll(E[] nextBuffer, long index)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferPoll(AtomicReferenceArray<E> nextBuffer, long index)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.peek()",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferPeek(AtomicReferenceArray<E> nextBuffer, long index)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.poll()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPoll()",
                    "public Iterator<E> org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.iterator()"
                ]
            },
            "48adfd10c2ba72d813608fb80d73b5dc53c698b6": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.poll()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.peek()",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferPeek(E[] nextBuffer, long index)",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferPoll(E[] nextBuffer, long index)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public final Iterator<E> org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.iterator()",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferPoll(AtomicReferenceArray<E> nextBuffer, long index)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.peek()",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferPeek(AtomicReferenceArray<E> nextBuffer, long index)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.poll()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPoll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "5fd57720bf19fcd8d93a91c6281f8c41d5ee6b00",
        "previous_commit": "9157a5c593acec846b2ebbf8733c2528330dec14",
        "date": 1590054276,
        "releases": {
            "previous": "5fd57720bf19fcd8d93a91c6281f8c41d5ee6b00",
            "next": "5fd57720bf19fcd8d93a91c6281f8c41d5ee6b00"
        },
        "commit_message": "Fix inconsistent isEmpty/poll/peek/offer dynamics for SpscLinkedQueue\n\nAlso handle negative edge cases for index queues (fix issue for Spsc)\nFixes #292\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "5fd57720bf19fcd8d93a91c6281f8c41d5ee6b00": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "final void org.jctools.queues.BaseLinkedQueueProducerNodeRef<E>.spProducerNode(LinkedQueueNode<E> newValue)",
                    "final LinkedQueueNode<E> org.jctools.queues.BaseLinkedQueueProducerNodeRef<E>.lvProducerNode()",
                    "public boolean org.jctools.queues.BaseLinkedQueue<E>.isEmpty()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/IndexedQueueSizeUtil.java": [
                    "public static boolean org.jctools.queues.IndexedQueueSizeUtil.isEmpty(IndexedQueue iq)",
                    "public static int org.jctools.queues.IndexedQueueSizeUtil.size(IndexedQueue iq)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "private LinkedQueueNode<E> org.jctools.queues.MpscLinkedQueue<E>.xchgProducerNode(LinkedQueueNode<E> newVal)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public boolean org.jctools.queues.SpscLinkedQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseLinkedAtomicQueue.java": [
                    "public boolean org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.isEmpty()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public boolean org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.offer(final E e)",
                    "public void org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            },
            "9157a5c593acec846b2ebbf8733c2528330dec14": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "final void org.jctools.queues.BaseLinkedQueueProducerNodeRef<E>.spProducerNode(LinkedQueueNode<E> newValue)",
                    "final LinkedQueueNode<E> org.jctools.queues.BaseLinkedQueueProducerNodeRef<E>.lvProducerNode()",
                    "public boolean org.jctools.queues.BaseLinkedQueue<E>.isEmpty()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/IndexedQueueSizeUtil.java": [
                    "public static boolean org.jctools.queues.IndexedQueueSizeUtil.isEmpty(IndexedQueue iq)",
                    "public static int org.jctools.queues.IndexedQueueSizeUtil.size(IndexedQueue iq)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "private LinkedQueueNode<E> org.jctools.queues.MpscLinkedQueue<E>.xchgProducerNode(LinkedQueueNode<E> newVal)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public boolean org.jctools.queues.SpscLinkedQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseLinkedAtomicQueue.java": [
                    "public boolean org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.isEmpty()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public boolean org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.offer(final E e)",
                    "public void org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public int org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "67ea0270ac81d66ea92e4ab0b9a7b15440972348",
        "previous_commit": "d64cdc16c3ebaf4692c5d376bd0852fe262e28bc",
        "date": 1438083624,
        "releases": {
            "previous": "67ea0270ac81d66ea92e4ab0b9a7b15440972348",
            "next": "67ea0270ac81d66ea92e4ab0b9a7b15440972348"
        },
        "commit_message": "Adding an MpscChannel.\nFix a benchmark bug.\nBetter sharing of code between SPSC/MPSC implementations",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "67ea0270ac81d66ea92e4ab0b9a7b15440972348": {
                "jctools-experimental/src/main/java/org/jctools/channels/OffHeapFixedMessageSizeRingBuffer.java": [
                    "protected final long org.jctools.channels.OffHeapFixedMessageSizeRingBuffer.offsetForIndex(long currentHead)"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/Mapper.java": [
                    "private <I> I org.jctools.channels.mapping.Mapper<S>.instantiateImplementation(Class<?>[] constructorParameterTypes, String name, CompilationResult result, Object[] args)"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBuffer.java": [
                    "protected final void org.jctools.channels.mpsc.MpscOffHeapFixedSizeRingBuffer.writeRelease(long offset)",
                    "protected final long org.jctools.channels.mpsc.MpscOffHeapFixedSizeRingBuffer.readAcquire()",
                    "protected final void org.jctools.channels.mpsc.MpscOffHeapFixedSizeRingBuffer.readRelease(long offset)",
                    "protected final long org.jctools.channels.mpsc.MpscOffHeapFixedSizeRingBuffer.writeAcquire()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannel.java": [
                    "private SpscChannelProducer<E> org.jctools.channels.spsc.SpscChannel<E>.newProducer(final Class<E> type, final Object... args)",
                    "private SpscChannelConsumer<E> org.jctools.channels.spsc.SpscChannel<E>.newConsumer(Object... args)"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "protected final long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeAcquire()",
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readRelease(long offset)",
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeRelease(long offset)",
                    "protected final long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readAcquire()"
                ],
                "jctools-experimental/src/main/java/org/jctools/util/Template.java": [
                    "public static Template org.jctools.util.Template.fromFile(final Class<?> resourceRoot, final String fileName)"
                ]
            },
            "d64cdc16c3ebaf4692c5d376bd0852fe262e28bc": {
                "jctools-experimental/src/main/java/org/jctools/channels/OffHeapFixedMessageSizeRingBuffer.java": [
                    "protected final long org.jctools.channels.OffHeapFixedMessageSizeRingBuffer.offsetForIndex(long currentHead)"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/Mapper.java": [
                    "private <I> I org.jctools.channels.mapping.Mapper<S>.instantiateImplementation( Class<?>[] constructorParameterTypes, String name, CompilationResult result, Object[] args)"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBuffer.java": [
                    "protected final void org.jctools.channels.mpsc.MpscOffHeapFixedSizeRingBuffer.writeRelease(long offset)",
                    "protected final long org.jctools.channels.mpsc.MpscOffHeapFixedSizeRingBuffer.readAcquire()",
                    "protected final void org.jctools.channels.mpsc.MpscOffHeapFixedSizeRingBuffer.readRelease(long offset)",
                    "protected final long org.jctools.channels.mpsc.MpscOffHeapFixedSizeRingBuffer.writeAcquire()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannel.java": [
                    "private SpscChannelProducer<E> org.jctools.channels.spsc.SpscChannel<E>.newProducer(final Class<E> type, final Object... args)",
                    "private SpscChannelConsumer<E> org.jctools.channels.spsc.SpscChannel<E>.newConsumer(Object... args)"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "protected final long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeAcquire()",
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readRelease(long offset)",
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeRelease(long offset)",
                    "protected final long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readAcquire()"
                ],
                "jctools-experimental/src/main/java/org/jctools/util/Template.java": [
                    "public static Template org.jctools.util.Template.fromFile(final Class<?> resourceRoot, final String fileName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "200cdbfd3805d34767c1b5667adaaed0aafc2b42",
        "previous_commit": "738b440127b5c9ea722357ab2b3859019e5784c2",
        "date": 1406741291,
        "releases": {
            "previous": "200cdbfd3805d34767c1b5667adaaed0aafc2b42",
            "next": "200cdbfd3805d34767c1b5667adaaed0aafc2b42"
        },
        "commit_message": "move to use Nitan's fastflow queue implementation for the channel\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "200cdbfd3805d34767c1b5667adaaed0aafc2b42": {
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/BytecodeGenerator.java": [],
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/TypeInspector.java": [
                    "public int org.jctools.channels.mapping.TypeInspector.getSizeInBytes()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannel.java": [
                    "public int org.jctools.channels.spsc.SpscChannel<E>.size()",
                    "public boolean org.jctools.channels.spsc.SpscChannel<E>.isEmpty()",
                    "public ChannelConsumer org.jctools.channels.spsc.SpscChannel<E>.consumer(ChannelReceiver<E> receiver)",
                    "public int org.jctools.channels.spsc.SpscChannel<E>.capacity()",
                    "public ChannelProducer<E> org.jctools.channels.spsc.SpscChannel<E>.producer()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannelConsumer.java": [
                    "public boolean org.jctools.channels.spsc.SpscChannelConsumer<E>.read()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannelProducer.java": [
                    "public E org.jctools.channels.spsc.SpscChannelProducer<E>.getWriter()",
                    "public final boolean org.jctools.channels.spsc.SpscChannelProducer<E>.claim()",
                    "public final boolean org.jctools.channels.spsc.SpscChannelProducer<E>.commit()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "public static int org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.getRequiredBufferSize(final int capacity, final int messageSize)",
                    "protected final long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeAcquire()",
                    "protected final long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readAcquire()"
                ]
            },
            "738b440127b5c9ea722357ab2b3859019e5784c2": {
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/BytecodeGenerator.java": [
                    "private void org.jctools.channels.mapping.BytecodeGenerator<E>.declareConstructor(CheckClassAdapter writer)"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/TypeInspector.java": [
                    "public int org.jctools.channels.mapping.TypeInspector.getSizeInBytes()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannel.java": [
                    "public int org.jctools.channels.spsc.SpscChannel<E>.size()",
                    "public boolean org.jctools.channels.spsc.SpscChannel<E>.isEmpty()",
                    "public ChannelConsumer org.jctools.channels.spsc.SpscChannel<E>.consumer(ChannelReceiver<E> receiver)",
                    "public int org.jctools.channels.spsc.SpscChannel<E>.capacity()",
                    "public ChannelProducer<E> org.jctools.channels.spsc.SpscChannel<E>.producer()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannelConsumer.java": [
                    "public boolean org.jctools.channels.spsc.SpscChannelConsumer<E>.read()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannelProducer.java": [
                    "public E org.jctools.channels.spsc.SpscChannelProducer<E>.getWriter()",
                    "public boolean org.jctools.channels.spsc.SpscChannelProducer<E>.claim()",
                    "public boolean org.jctools.channels.spsc.SpscChannelProducer<E>.commit()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "public static int org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.getRequiredBufferSize(final int capacity, final int messageSize)",
                    "protected final long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeAcquire()",
                    "protected final long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readAcquire()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "31f91eed8e8e06421661ce499a6668a8f4071fe0",
        "previous_commit": "ad8e2697cbbd9b16fff8082a07bc6c3ffd0e70ec",
        "date": 1406132081,
        "releases": {
            "previous": "31f91eed8e8e06421661ce499a6668a8f4071fe0",
            "next": "31f91eed8e8e06421661ce499a6668a8f4071fe0"
        },
        "commit_message": "Uniformly accept a relaxed interpretation of peek/poll/offer and\ndocument as such.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "31f91eed8e8e06421661ce499a6668a8f4071fe0": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.size()",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public boolean org.jctools.queues.MpscCompoundQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue7.java": [
                    "public E org.jctools.queues.MpscLinkedQueue7<E>.poll()",
                    "public E org.jctools.queues.MpscLinkedQueue7<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue8.java": [
                    "public E org.jctools.queues.MpscLinkedQueue8<E>.peek()",
                    "public E org.jctools.queues.MpscLinkedQueue8<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public int org.jctools.queues.SpmcArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public int org.jctools.queues.SpscArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public E org.jctools.queues.SpscLinkedQueue<E>.poll()"
                ]
            },
            "ad8e2697cbbd9b16fff8082a07bc6c3ffd0e70ec": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.size()",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public boolean org.jctools.queues.MpscCompoundQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue7.java": [
                    "public E org.jctools.queues.MpscLinkedQueue7<E>.poll()",
                    "public E org.jctools.queues.MpscLinkedQueue7<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue8.java": [
                    "public E org.jctools.queues.MpscLinkedQueue8<E>.peek()",
                    "public E org.jctools.queues.MpscLinkedQueue8<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public int org.jctools.queues.SpmcArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public int org.jctools.queues.SpscArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public E org.jctools.queues.SpscLinkedQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "32dd5822bb876198ed398a5250ef3d879b5cf6cf",
        "previous_commit": "d4cba97c898c048de9d06a436ad34aa725858f9d",
        "date": 1502727549,
        "releases": {
            "previous": "32dd5822bb876198ed398a5250ef3d879b5cf6cf",
            "next": "32dd5822bb876198ed398a5250ef3d879b5cf6cf"
        },
        "commit_message": "MPSC variant: Use field updaters\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "32dd5822bb876198ed398a5250ef3d879b5cf6cf": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "final long org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueColdProducerFields<E>.lvProducerLimit()",
                    "final void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueConsumerFields<E>.soConsumerIndex(long newValue)",
                    "public final long org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueConsumerFields<E>.lvConsumerIndex()",
                    "public final long org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields<E>.lvProducerIndex()",
                    "final boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueColdProducerFields<E>.casProducerLimit(long expect, long newValue)",
                    "final boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields<E>.casProducerIndex(long expect, long newValue)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.peek()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.poll()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPoll()",
                    "final void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueColdProducerFields<E>.soProducerLimit(long newValue)",
                    "final void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields<E>.soProducerIndex(long newValue)"
                ]
            },
            "d4cba97c898c048de9d06a436ad34aa725858f9d": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "final long org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueColdProducerFields<E>.lvProducerLimit()",
                    "final void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueConsumerFields<E>.soConsumerIndex(long newValue)",
                    "public final long org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueConsumerFields<E>.lvConsumerIndex()",
                    "public final long org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields<E>.lvProducerIndex()",
                    "final boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueColdProducerFields<E>.casProducerLimit(long expect, long newValue)",
                    "final boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields<E>.casProducerIndex(long expect, long newValue)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.peek()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.poll()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPoll()",
                    "final void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueColdProducerFields<E>.soProducerLimit(long newValue)",
                    "final void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueueProducerFields<E>.soProducerIndex(long newValue)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "dd8c925a8ffc867457912386f674dbb5d74c116b",
        "previous_commit": "6f47ab721f9698bddfbd595e67aa5d46cbe9fd8d",
        "date": 1404815308,
        "releases": {
            "previous": "dd8c925a8ffc867457912386f674dbb5d74c116b",
            "next": "dd8c925a8ffc867457912386f674dbb5d74c116b"
        },
        "commit_message": "fix poll() to spec and size()",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "dd8c925a8ffc867457912386f674dbb5d74c116b": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue7.java": [
                    "public E org.jctools.queues.MpscLinkedQueue7<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue8.java": [
                    "public E org.jctools.queues.MpscLinkedQueue8<E>.peek()",
                    "public E org.jctools.queues.MpscLinkedQueue8<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "protected final boolean org.jctools.queues.SpmcArrayQueueConsumerField<E>.casHead(long expect, long newValue)",
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.poll()",
                    "public int org.jctools.queues.SpmcArrayQueue<E>.size()",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()",
                    "protected final void org.jctools.queues.SpmcArrayQueueProducerField<E>.soTail(long v)"
                ]
            },
            "6f47ab721f9698bddfbd595e67aa5d46cbe9fd8d": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue7.java": [
                    "public E org.jctools.queues.MpscLinkedQueue7<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue8.java": [
                    "public E org.jctools.queues.MpscLinkedQueue8<E>.peek()",
                    "public E org.jctools.queues.MpscLinkedQueue8<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.poll()",
                    "protected final boolean org.jctools.queues.SpmcArrayQueueHeadField<E>.casHead(long expect, long newValue)",
                    "protected final void org.jctools.queues.SpmcArrayQueueTailField<E>.soTail(long v)",
                    "public int org.jctools.queues.SpmcArrayQueue<E>.size()",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "15e1f6a8629971693ed2fb217897d350848c5ff9",
        "previous_commit": "f66531ff8a8797cb703bfe57321cdeac9aabee82",
        "date": 1502730151,
        "releases": {
            "previous": "15e1f6a8629971693ed2fb217897d350848c5ff9",
            "next": "15e1f6a8629971693ed2fb217897d350848c5ff9"
        },
        "commit_message": "Linked array queues: Implemented code generator\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "15e1f6a8629971693ed2fb217897d350848c5ff9": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.processSpecialNodeTypes(NodeWithType<?, Type> node, String name)",
                    "private static String org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.fieldUpdaterFieldName(String fieldName)",
                    "private static String org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.translateQueueName(String originalQueueName)",
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.organiseImports(CompilationUnit cu)",
                    "private static MethodCallExpr org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.newAtomicLongFieldUpdater(String className, String variableName)",
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.processSpecialNodeTypes(ObjectCreationExpr node)",
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.patchAtomicFieldUpdaterAccessorMethods(ClassOrInterfaceDeclaration n)",
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.main(String[] args)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s)",
                    "public void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscUnboundedAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscGrowableAtomicArrayQueue.java": [
                    "private void org.jctools.queues.atomic.SpscGrowableAtomicArrayQueue<E>.adjustLookAheadStep(int capacity)"
                ]
            },
            "f66531ff8a8797cb703bfe57321cdeac9aabee82": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.processSpecialNodeTypes(NodeWithType<?, Type> node, String name)",
                    "private static String org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.fieldUpdaterFieldName(String fieldName)",
                    "private static String org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.translateQueueName(String originalQueueName)",
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.organiseImports(CompilationUnit cu)",
                    "private static MethodCallExpr org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.newAtomicLongFieldUpdater(String className, String variableName)",
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.processSpecialNodeTypes(ObjectCreationExpr node)",
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.patchAtomicFieldUpdaterAccessorMethods(ClassOrInterfaceDeclaration n)",
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.main(String[] args)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s)",
                    "public void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill( Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscUnboundedAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscGrowableAtomicArrayQueue.java": [
                    "private void org.jctools.queues.atomic.SpscGrowableAtomicArrayQueue<E>.adjustLookAheadStep(int capacity)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "4a8a432f4d27f3235c54b44b2ee58572612199ee",
        "previous_commit": "9183995d3d1619753b61bf676046b97bb20998aa",
        "date": 1452842863,
        "releases": {
            "previous": "4a8a432f4d27f3235c54b44b2ee58572612199ee",
            "next": "4a8a432f4d27f3235c54b44b2ee58572612199ee"
        },
        "commit_message": "Change compare order to improve inlined choice of eq",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "4a8a432f4d27f3235c54b44b2ee58572612199ee": {
                "jctools-experimental/src/main/java/org/jctools/sets/OpenHashSet.java": [
                    "private boolean org.jctools.sets.OpenHashSet<E>.removeSlowPath(Object val, final E[] buffer, final int mask, final int hashCode, final int hash)",
                    "public boolean org.jctools.sets.OpenHashSet<E>.add(E newVal)",
                    "public boolean org.jctools.sets.OpenHashSet<E>.remove(Object val)",
                    "private boolean org.jctools.sets.OpenHashSet<E>.containsSlowPath(final E[] buffer, final int mask, final int hash, Object needle)",
                    "private boolean org.jctools.sets.OpenHashSet<E>.addSlowPath(E[] buffer, int mask, E newVal, int hash)",
                    "public boolean org.jctools.sets.OpenHashSet<E>.contains(Object needle)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.remove(Object val)",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.add(E newVal)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.containsSlowPath(final E[] buffer, final long mask, final int hash, Object needle)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.addSlowPath(E[] buffer, long mask, E newVal, int hash)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.removeSlowPath(Object val, final E[] buffer, final long mask, final int hashCode, final int hash)",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.contains(Object needle)"
                ]
            },
            "9183995d3d1619753b61bf676046b97bb20998aa": {
                "jctools-experimental/src/main/java/org/jctools/sets/OpenHashSet.java": [
                    "private boolean org.jctools.sets.OpenHashSet<E>.removeSlowPath(Object val, final E[] buffer, final int mask, final int hashCode, final int hash)",
                    "public boolean org.jctools.sets.OpenHashSet<E>.add(E newVal)",
                    "public boolean org.jctools.sets.OpenHashSet<E>.remove(Object val)",
                    "private boolean org.jctools.sets.OpenHashSet<E>.containsSlowPath(final E[] buffer, final int mask, final int hash, Object needle)",
                    "private boolean org.jctools.sets.OpenHashSet<E>.addSlowPath(E[] buffer, int mask, E newVal, int hash)",
                    "public boolean org.jctools.sets.OpenHashSet<E>.contains(Object needle)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.remove(Object val)",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.add(E newVal)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.containsSlowPath(final E[] buffer, final long mask, final int hash, Object needle)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.addSlowPath(E[] buffer, long mask, E newVal, int hash)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.removeSlowPath(Object val, final E[] buffer, final long mask, final int hashCode, final int hash)",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.contains(Object needle)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "0f52aa18814166b2c2100750444f9b8f3f7b3b4c",
        "previous_commit": "6966302c5657b22400dbebe9e54019f739eca03e",
        "date": 1661355754,
        "releases": {
            "previous": "0f52aa18814166b2c2100750444f9b8f3f7b3b4c",
            "next": "0f52aa18814166b2c2100750444f9b8f3f7b3b4c"
        },
        "commit_message": "Simplify queue gen code\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "0f52aa18814166b2c2100750444f9b8f3f7b3b4c": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "private void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.patchAtomicFieldUpdaterAccessorMethods(ClassOrInterfaceDeclaration n)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ObjectCreationExpr n, Void arg)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ConstructorDeclaration n, Void arg)",
                    "private void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.patchAtomicFieldUpdaterAccessorMethods(ClassOrInterfaceDeclaration n)",
                    "private FieldDeclaration org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.declareRefFieldUpdater(String className, String variableName)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(MethodDeclaration n, Void arg)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicQueueGenerator.java": [
                    "protected void org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.removeStaticFieldsAndInitialisers(ClassOrInterfaceDeclaration node)",
                    "protected void org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.organiseImports(CompilationUnit cu)",
                    "protected FieldDeclaration org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.declareLongFieldUpdater(String className, String variableName)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "private void org.jctools.queues.SpscGrowableArrayQueue<E>.adjustLookAheadStep(int capacity)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscGrowableAtomicArrayQueue.java": [
                    "private void org.jctools.queues.atomic.SpscGrowableAtomicArrayQueue<E>.adjustLookAheadStep(int capacity)"
                ]
            },
            "6966302c5657b22400dbebe9e54019f739eca03e": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "private void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.patchAtomicFieldUpdaterAccessorMethods(ClassOrInterfaceDeclaration n)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ObjectCreationExpr n, Void arg)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ConstructorDeclaration n, Void arg)",
                    "private void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.patchAtomicFieldUpdaterAccessorMethods(ClassOrInterfaceDeclaration n)",
                    "private FieldDeclaration org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.declareRefFieldUpdater(String className, String variableName)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(MethodDeclaration n, Void arg)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicQueueGenerator.java": [
                    "protected void org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.removeStaticFieldsAndInitialisers(ClassOrInterfaceDeclaration node)",
                    "protected FieldDeclaration org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.declareLongFieldUpdater(String className, String variableName)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "private void org.jctools.queues.SpscGrowableArrayQueue<E>.adjustLookAheadStep(int capacity)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscGrowableAtomicArrayQueue.java": [
                    "private void org.jctools.queues.atomic.SpscGrowableAtomicArrayQueue<E>.adjustLookAheadStep(int capacity)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "2ac1a663b3a378225ea1269e25b6383751954c4c",
        "previous_commit": "9915e40cd21d45934a84f1ab88781edcdf4246a8",
        "date": 1520613644,
        "releases": {
            "previous": "2ac1a663b3a378225ea1269e25b6383751954c4c",
            "next": "2ac1a663b3a378225ea1269e25b6383751954c4c"
        },
        "commit_message": "Refactor fieldOffset calc to a new method and cleanup user code\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "2ac1a663b3a378225ea1269e25b6383751954c4c": {
                "jctools-channels/src/main/java/org/jctools/util/UnsafeDirectByteBuffer.java": [
                    "public static long org.jctools.util.UnsafeDirectByteBuffer.getAddress(ByteBuffer buffy)"
                ],
                "jctools-experimental/src/main/java/org/jctools/counters/FixedSizeStripedLongCounter.java": [
                    "private static long org.jctools.counters.FixedSizeStripedLongCounter.getProbeOffset()"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/InlinedCountersSpscConcurrentArrayQueue.java": [
                    "private void org.jctools.queues.InlinedCountersSpscConcurrentArrayQueue<E>.headLazySet(long v)",
                    "public E org.jctools.queues.InlinedCountersSpscConcurrentArrayQueue<E>.poll()",
                    "private E org.jctools.queues.InlinedCountersSpscConcurrentArrayQueue<E>.getElement(long index)",
                    "private void org.jctools.queues.InlinedCountersSpscConcurrentArrayQueue<E>.tailLazySet(long v)",
                    "public boolean org.jctools.queues.InlinedCountersSpscConcurrentArrayQueue<E>.offer(final E e)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "private E[] org.jctools.sets.SingleWriterHashSet<E>.lvBuffer()",
                    "public int org.jctools.sets.SingleWriterHashSet<E>.size()",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.compactAndRemove(final E[] buffer, final long mask, int removeHashIndex)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.soBuffer(final E[] buffer)",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.contains(Object needle)"
                ]
            },
            "9915e40cd21d45934a84f1ab88781edcdf4246a8": {
                "jctools-channels/src/main/java/org/jctools/util/UnsafeDirectByteBuffer.java": [
                    "public static long org.jctools.util.UnsafeDirectByteBuffer.getAddress(ByteBuffer buffy)"
                ],
                "jctools-experimental/src/main/java/org/jctools/counters/FixedSizeStripedLongCounter.java": [
                    "private static long org.jctools.counters.FixedSizeStripedLongCounter.getProbeOffset()"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/InlinedCountersSpscConcurrentArrayQueue.java": [
                    "private void org.jctools.queues.InlinedCountersSpscConcurrentArrayQueue<E>.headLazySet(long v)",
                    "public E org.jctools.queues.InlinedCountersSpscConcurrentArrayQueue<E>.poll()",
                    "private E org.jctools.queues.InlinedCountersSpscConcurrentArrayQueue<E>.getElement(long index)",
                    "private void org.jctools.queues.InlinedCountersSpscConcurrentArrayQueue<E>.tailLazySet(long v)",
                    "public boolean org.jctools.queues.InlinedCountersSpscConcurrentArrayQueue<E>.offer(final E e)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "private E[] org.jctools.sets.SingleWriterHashSet<E>.lvBuffer()",
                    "public int org.jctools.sets.SingleWriterHashSet<E>.size()",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.compactAndRemove(final E[] buffer, final long mask, int removeHashIndex)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.soBuffer(final E[] buffer)",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.contains(Object needle)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "497e922816298429f9b9d66f095f4536671a2c9e",
        "previous_commit": "77c62209bd19adc68a702c6d41a7cc3e74de24be",
        "date": 1396127647,
        "releases": {
            "previous": "497e922816298429f9b9d66f095f4536671a2c9e",
            "next": "497e922816298429f9b9d66f095f4536671a2c9e"
        },
        "commit_message": "Move MPSC/SPMC to use new method. Cleanup some leftovers in MPMC.",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "497e922816298429f9b9d66f095f4536671a2c9e": {
                "jaq-inabox/src/main/java/io/jaq/mpsc/MpscConcurrentQueue.java": [
                    "public boolean io.jaq.mpsc.MpscConcurrentQueue<E>.contains(final Object o)",
                    "public int io.jaq.mpsc.MpscConcurrentQueue<E>.offerStatus(final E e)",
                    "public E io.jaq.mpsc.MpscConcurrentQueue<E>.poll()",
                    "public boolean io.jaq.mpsc.MpscConcurrentQueue<E>.offer(final E e)",
                    "public E io.jaq.mpsc.MpscConcurrentQueue<E>.peek()",
                    "public int io.jaq.mpsc.MpscConcurrentQueue<E>.size()"
                ],
                "jaq-inabox/src/main/java/io/jaq/spmc/SpmcConcurrentQueue.java": [
                    "public E io.jaq.spmc.SpmcConcurrentQueue<E>.poll()",
                    "public E io.jaq.spmc.SpmcConcurrentQueue<E>.peek()",
                    "public boolean io.jaq.spmc.SpmcConcurrentQueue<E>.contains(final Object o)",
                    "public int io.jaq.spmc.SpmcConcurrentQueue<E>.size()",
                    "public boolean io.jaq.spmc.SpmcConcurrentQueue<E>.isEmpty()",
                    "public boolean io.jaq.spmc.SpmcConcurrentQueue<E>.offer(final E e)"
                ]
            },
            "77c62209bd19adc68a702c6d41a7cc3e74de24be": {
                "jaq-inabox/src/main/java/io/jaq/mpsc/MpscConcurrentQueue.java": [
                    "public boolean io.jaq.mpsc.MpscConcurrentQueue<E>.contains(final Object o)",
                    "public int io.jaq.mpsc.MpscConcurrentQueue<E>.offerStatus(final E e)",
                    "public E io.jaq.mpsc.MpscConcurrentQueue<E>.poll()",
                    "public boolean io.jaq.mpsc.MpscConcurrentQueue<E>.offer(final E e)",
                    "public E io.jaq.mpsc.MpscConcurrentQueue<E>.peek()",
                    "public int io.jaq.mpsc.MpscConcurrentQueue<E>.size()"
                ],
                "jaq-inabox/src/main/java/io/jaq/spmc/SpmcConcurrentQueue.java": [
                    "public E io.jaq.spmc.SpmcConcurrentQueue<E>.poll()",
                    "public E io.jaq.spmc.SpmcConcurrentQueue<E>.peek()",
                    "public boolean io.jaq.spmc.SpmcConcurrentQueue<E>.contains(final Object o)",
                    "public int io.jaq.spmc.SpmcConcurrentQueue<E>.size()",
                    "public boolean io.jaq.spmc.SpmcConcurrentQueue<E>.isEmpty()",
                    "public boolean io.jaq.spmc.SpmcConcurrentQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "8f397c835ae961d549da705ff9858d91c35dfd3f",
        "previous_commit": "b1861fc027bd1fddfdc793e321517979fd732295",
        "date": 1590657047,
        "releases": {
            "previous": "8f397c835ae961d549da705ff9858d91c35dfd3f",
            "next": "8f397c835ae961d549da705ff9858d91c35dfd3f"
        },
        "commit_message": "Fix broken build and update generated sources\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "8f397c835ae961d549da705ff9858d91c35dfd3f": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedOffer(E e)",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.peek()",
                    "private int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drainOneByOne(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public int org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public int org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            },
            "b1861fc027bd1fddfdc793e321517979fd732295": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedOffer(E e)",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.peek()",
                    "private int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drainOneByOne(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public int org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public int org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "cf81c96b3fcfaa3f3e6efc5083b31d1684579219",
        "previous_commit": "e9c3f8ba1efb04abf724c52057fde034bfdff6ab",
        "date": 1457260269,
        "releases": {
            "previous": "cf81c96b3fcfaa3f3e6efc5083b31d1684579219",
            "next": "cf81c96b3fcfaa3f3e6efc5083b31d1684579219"
        },
        "commit_message": "Use ordered store for producer limit. Use p/cIndex everywhere.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "cf81c96b3fcfaa3f3e6efc5083b31d1684579219": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public final int org.jctools.queues.MpscArrayQueue<E>.failFastOffer(final E e)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPoll()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.size()",
                    "public void org.jctools.queues.MpscArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPeek()",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offerIfBelowTheshold(final E e, int threshold)"
                ]
            },
            "e9c3f8ba1efb04abf724c52057fde034bfdff6ab": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public final int org.jctools.queues.MpscArrayQueue<E>.failFastOffer(final E e)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPoll()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.size()",
                    "public void org.jctools.queues.MpscArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPeek()",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offerIfBelowTheshold(final E e, int threshold)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "4b7d2acd4bd499305b4ff4c3efdd4eb3e661d952",
        "previous_commit": "5c1b88b64029a9369c8849c94396111bfcc45041",
        "date": 1707896775,
        "releases": {
            "previous": "4b7d2acd4bd499305b4ff4c3efdd4eb3e661d952",
            "next": "4b7d2acd4bd499305b4ff4c3efdd4eb3e661d952"
        },
        "commit_message": "Adding Atomic Unpadded queues\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "4b7d2acd4bd499305b4ff4c3efdd4eb3e661d952": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.main(String[] args)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.main(String[] args)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ConstructorDeclaration n, Void arg)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicQueueGenerator.java": [
                    "protected void org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.replaceParentClassesForAtomics(ClassOrInterfaceDeclaration n)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.organiseImports(CompilationUnit cu)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.visit(PackageDeclaration n, Void arg)",
                    "public String org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.translateQueueName(String qName)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/unpadded/JavaParsingUnpaddedQueueGenerator.java": [
                    "public static void org.jctools.queues.unpadded.JavaParsingUnpaddedQueueGenerator.main(String[] args)",
                    "public void org.jctools.queues.unpadded.JavaParsingUnpaddedQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)"
                ]
            },
            "5c1b88b64029a9369c8849c94396111bfcc45041": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.main(String[] args)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.main(String[] args)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ConstructorDeclaration n, Void arg)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicQueueGenerator.java": [
                    "protected void org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.replaceParentClassesForAtomics(ClassOrInterfaceDeclaration n)",
                    "protected String org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.translateQueueName(String qName)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.visit(PackageDeclaration n, Void arg)",
                    "protected void org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.organiseImports(CompilationUnit cu)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/unpadded/JavaParsingUnpaddedQueueGenerator.java": [
                    "public static void org.jctools.queues.unpadded.JavaParsingUnpaddedQueueGenerator.main(String[] args)",
                    "public void org.jctools.queues.unpadded.JavaParsingUnpaddedQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "3aad09e2b9f90b2fe4543ffed424376d221b08c0",
        "previous_commit": "523c347255d25ac90ef3bfd75ded3f4596e2e5c8",
        "date": 1431992479,
        "releases": {
            "previous": "3aad09e2b9f90b2fe4543ffed424376d221b08c0",
            "next": "3aad09e2b9f90b2fe4543ffed424376d221b08c0"
        },
        "commit_message": "batch interface corrections and limit to pre-defined batch",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "3aad09e2b9f90b2fe4543ffed424376d221b08c0": {
                "jctools-experimental/src/main/java/org/jctools/queues/alt/ConcurrentQueueFactory.java": [
                    "public int org.jctools.queues.alt.ConcurrentQueueFactory.produce(ProducerFunction<E> producer, int batchSize)",
                    "public int org.jctools.queues.alt.ConcurrentQueueFactory.consume(ConsumerFunction<E> consumer, int batchSize)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/alt/MpmcArrayConcurrentQueue.java": [
                    "public int org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.produce(ProducerFunction<E> producer, int batchSize)",
                    "public E org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.poll()",
                    "public boolean org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.offer(final E e)",
                    "public int org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.consume(ConsumerFunction<E> consumer, int batchSize)",
                    "public boolean org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.weakOffer(E e)",
                    "public E org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.weakPoll()",
                    "private E org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.weakPoll(final long[] sBuffer, E[] eBuffer, final long mask)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/alt/SpscArrayConcurrentQueue.java": [
                    "public int org.jctools.queues.alt.Producer<E>.produce(ProducerFunction<E> p, int batchSize)",
                    "public boolean org.jctools.queues.alt.Producer<E>.offer(final E e)"
                ]
            },
            "523c347255d25ac90ef3bfd75ded3f4596e2e5c8": {
                "jctools-experimental/src/main/java/org/jctools/queues/alt/ConcurrentQueueFactory.java": [
                    "public int org.jctools.queues.alt.ConcurrentQueueFactory.produce(ProducerFunction<E> producer, int batchSize)",
                    "public int org.jctools.queues.alt.ConcurrentQueueFactory.consume(ConsumerFunction<E> consumer, int batchSize)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/alt/MpmcArrayConcurrentQueue.java": [
                    "public int org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.produce(ProducerFunction<E> producer, int batchSize)",
                    "public E org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.poll()",
                    "public boolean org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.offer(final E e)",
                    "public int org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.consume(ConsumerFunction<E> consumer, int batchSize)",
                    "public boolean org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.weakOffer(E e)",
                    "public E org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.weakPoll()",
                    "private E org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.weakPoll(final long[] sBuffer, final long mask)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/alt/SpscArrayConcurrentQueue.java": [
                    "public int org.jctools.queues.alt.Producer<E>.produce(ProducerFunction<E> p, int batchSize)",
                    "public boolean org.jctools.queues.alt.Producer<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b8311b2f818e40cd3e2efa6686169ec7d4ee7dac",
        "previous_commit": "214133a2c7204426acc9fbb6f1242eaf3785659e",
        "date": 1558886357,
        "releases": {
            "previous": "b8311b2f818e40cd3e2efa6686169ec7d4ee7dac",
            "next": "b8311b2f818e40cd3e2efa6686169ec7d4ee7dac"
        },
        "commit_message": "Update to latest dependencies versions\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "b8311b2f818e40cd3e2efa6686169ec7d4ee7dac": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "private void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.patchAtomicFieldUpdaterAccessorMethods(ClassOrInterfaceDeclaration n)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "private void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.patchAtomicFieldUpdaterAccessorMethods(ClassOrInterfaceDeclaration n)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)",
                    "private FieldDeclaration org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.declareRefFieldUpdater(String className, String variableName)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ConstructorDeclaration n, Void arg)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicQueueGenerator.java": [
                    "protected void org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.removeStaticFieldsAndInitialisers(ClassOrInterfaceDeclaration node)",
                    "protected FieldDeclaration org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.declareLongFieldUpdater(String className, String variableName)",
                    "static void org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.main(Class<? extends JavaParsingAtomicQueueGenerator> generatorClass, String[] args)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/TraceVisitor.java": [
                    "public static void org.jctools.queues.atomic.TraceVisitor.main(String[] args)"
                ]
            },
            "214133a2c7204426acc9fbb6f1242eaf3785659e": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "private void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.patchAtomicFieldUpdaterAccessorMethods(ClassOrInterfaceDeclaration n)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "private void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.patchAtomicFieldUpdaterAccessorMethods(ClassOrInterfaceDeclaration n)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)",
                    "private FieldDeclaration org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.declareRefFieldUpdater(String className, String variableName)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ConstructorDeclaration n, Void arg)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicQueueGenerator.java": [
                    "protected void org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.removeStaticFieldsAndInitialisers(ClassOrInterfaceDeclaration node)",
                    "protected FieldDeclaration org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.declareLongFieldUpdater(String className, String variableName)",
                    "static void org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.main(Class<? extends JavaParsingAtomicQueueGenerator> generatorClass, String[] args)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/TraceVisitor.java": [
                    "public static void org.jctools.queues.atomic.TraceVisitor.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "138657a669e68ed19ffc9d4448bee6a4033852cd",
        "previous_commit": "133a19bd09cdc06184cf831511a6909af27b67f4",
        "date": 1480035856,
        "releases": {
            "previous": "138657a669e68ed19ffc9d4448bee6a4033852cd",
            "next": "138657a669e68ed19ffc9d4448bee6a4033852cd"
        },
        "commit_message": "Added support for references in the generated code\n\nAdded support for varargs\n\nCheckcast is needed for non-object types and varargs (by virtue of being\narrays), I've updated tests to use proper user types\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "138657a669e68ed19ffc9d4448bee6a4033852cd": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "private static <E> ProxyChannel<E> org.jctools.channels.proxy.ProxyChannelFactory.instantiate(Class<?> proxy, int capacity, int arrayMessageSize)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProcess(ClassVisitor classVisitor, List<Method> methods, Class<?> iFace, String generatedName)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.writeRelease(MethodVisitor methodVisitor, int wOffset, int type)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.writeAcquire(MethodVisitor methodVisitor)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.loadWOffset(MethodVisitor methodVisitor, Class<?> parameterType, int baseOffset, long wOffsetDelta)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.readRelease(MethodVisitor methodVisitor, int wOffset)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.readAcquire(MethodVisitor methodVisitor)",
                    "static <E> ProxyChannel<E> org.jctools.channels.proxy.ProxyChannelFactory.createSpscProxy(int capacity, Class<E> iFace)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementConstructor(ClassVisitor classVisitor)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementUserMethod(Method method, ClassVisitor classVisitor, int type)"
                ]
            },
            "133a19bd09cdc06184cf831511a6909af27b67f4": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProcess(ClassVisitor classVisitor, List<Method> methods, Class<?> iFace, String generatedName)",
                    "private static <E> ProxyChannel<E> org.jctools.channels.proxy.ProxyChannelFactory.instantiate(Class<?> proxy, int capacity)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.writeRelease(MethodVisitor methodVisitor, int wOffset, int type)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.writeAcquire(MethodVisitor methodVisitor)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.loadWOffset(MethodVisitor methodVisitor, Class<?> parameterType, int baseOffset, long wOffsetDelta)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.readRelease(MethodVisitor methodVisitor, int wOffset)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.readAcquire(MethodVisitor methodVisitor)",
                    "static <E> ProxyChannel<E> org.jctools.channels.proxy.ProxyChannelFactory.createSpscProxy(int capacity, Class<E> iFace)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementConstructor(ClassVisitor classVisitor)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementUserMethod(Method method, ClassVisitor classVisitor, int type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "79087f20a538448f1c6382e36b9ebf717a213616",
        "previous_commit": "3f1775de6dd286a325721b5f284690ab888f7548",
        "date": 1423246565,
        "releases": {
            "previous": "79087f20a538448f1c6382e36b9ebf717a213616",
            "next": "79087f20a538448f1c6382e36b9ebf717a213616"
        },
        "commit_message": "minimize redundant loads of mask field",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "79087f20a538448f1c6382e36b9ebf717a213616": {
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentSequencedCircularArrayQueue.java": [
                    "protected final long org.jctools.queues.ConcurrentSequencedCircularArrayQueue<E>.calcSequenceOffset(long index)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public int org.jctools.queues.MpscArrayQueue<E>.weakOffer(final E e)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)"
                ]
            },
            "3f1775de6dd286a325721b5f284690ab888f7548": {
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentSequencedCircularArrayQueue.java": [
                    "protected final long org.jctools.queues.ConcurrentSequencedCircularArrayQueue<E>.calcSequenceOffset(long index)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public int org.jctools.queues.MpscArrayQueue<E>.weakOffer(final E e)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "a347534f75ccd827ce2864c2941adb25ea824daf",
        "previous_commit": "c84883618c83f90590f17cddea3c832ed39a928a",
        "date": 1506594314,
        "releases": {
            "previous": "a347534f75ccd827ce2864c2941adb25ea824daf",
            "next": "a347534f75ccd827ce2864c2941adb25ea824daf"
        },
        "commit_message": "Style, comments and refactorings\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "a347534f75ccd827ce2864c2941adb25ea824daf": {
                "jctools-core/src/main/java/org/jctools/queues/MpscRelaxedArrayQueue.java": [
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.relaxedPeek()",
                    "public int org.jctools.queues.MpscRelaxedArrayQueue<E>.capacity()",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpscRelaxedArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public void org.jctools.queues.MpscRelaxedArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpscRelaxedArrayQueue<E>.size()",
                    "public int org.jctools.queues.MpscRelaxedArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            },
            "c84883618c83f90590f17cddea3c832ed39a928a": {
                "jctools-core/src/main/java/org/jctools/queues/MpscRelaxedArrayQueue.java": [
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.relaxedPeek()",
                    "public int org.jctools.queues.MpscRelaxedArrayQueue<E>.capacity()",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscRelaxedArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpscRelaxedArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public void org.jctools.queues.MpscRelaxedArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpscRelaxedArrayQueue<E>.size()",
                    "public int org.jctools.queues.MpscRelaxedArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "a4455488352d5dd1dfd8eb72af82a128ceff30ce",
        "previous_commit": "fa92629241f4e53a550a6d32f3e5bfc97d0062d1",
        "date": 1503299672,
        "releases": {
            "previous": "a4455488352d5dd1dfd8eb72af82a128ceff30ce",
            "next": "a4455488352d5dd1dfd8eb72af82a128ceff30ce"
        },
        "commit_message": "MpscLinked formatting, code reordering and refactoring to minimize diff\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "a4455488352d5dd1dfd8eb72af82a128ceff30ce": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public final boolean org.jctools.queues.MpscLinkedQueue<E>.remove(Object o)",
                    "private LinkedQueueNode<E> org.jctools.queues.MpscLinkedQueue<E>.getNextConsumerNode(LinkedQueueNode<E> currConsumerNode)",
                    "public int org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, int limit)",
                    "public final E org.jctools.queues.MpscLinkedQueue<E>.peek()",
                    "public final E org.jctools.queues.MpscLinkedQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public final E org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.poll()",
                    "public final E org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.peek()",
                    "private LinkedQueueAtomicNode<E> org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.getNextConsumerNode(LinkedQueueAtomicNode<E> currConsumerNode)",
                    "public final boolean org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.remove(Object o)"
                ]
            },
            "fa92629241f4e53a550a6d32f3e5bfc97d0062d1": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public final boolean org.jctools.queues.MpscLinkedQueue<E>.remove(Object o)",
                    "private LinkedQueueNode<E> org.jctools.queues.MpscLinkedQueue<E>.getNextConsumerNode(LinkedQueueNode<E> currConsumerNode)",
                    "public int org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, int limit)",
                    "public final E org.jctools.queues.MpscLinkedQueue<E>.peek()",
                    "public final E org.jctools.queues.MpscLinkedQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public final E org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.poll()",
                    "public final E org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.peek()",
                    "private LinkedQueueAtomicNode<E> org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.getNextConsumerNode(LinkedQueueAtomicNode<E> currConsumerNode)",
                    "public final boolean org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.remove(Object o)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b8ed35878092b9cbef6fb53ac8e4bbddfbb701f4",
        "previous_commit": "1a4d9af3aee3cec414b5ced5880e69bb3e0b732e",
        "date": 1431827275,
        "releases": {
            "previous": "b8ed35878092b9cbef6fb53ac8e4bbddfbb701f4",
            "next": "b8ed35878092b9cbef6fb53ac8e4bbddfbb701f4"
        },
        "commit_message": "Shaking the alternative implementations around and trying out a batch\nconsume/produce interface.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "b8ed35878092b9cbef6fb53ac8e4bbddfbb701f4": {
                "jctools-experimental/src/main/java/org/jctools/queues/alt/ConcurrentQueueFactory.java": [
                    "public static <E> ConcurrentQueue<E> org.jctools.queues.alt.ConcurrentQueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/alt/MpmcArrayConcurrentQueue.java": [
                    "public E org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.peek()",
                    "public E org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.poll()",
                    "public boolean org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.offer(final E e)",
                    "public int org.jctools.queues.alt.MpmcArrayConcurrentQueue<E>.size()"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/alt/SpscArrayConcurrentQueue.java": [
                    "public int org.jctools.queues.alt.SpscArrayConcurrentQueue<E>.size()",
                    "public E org.jctools.queues.alt.Consumer<E>.poll()",
                    "public boolean org.jctools.queues.alt.Producer<E>.offer(final E e)",
                    "long org.jctools.queues.alt.Consumer<E>.getHeadForSize()"
                ]
            },
            "1a4d9af3aee3cec414b5ced5880e69bb3e0b732e": {
                "jctools-experimental/src/main/java/org/jctools/queues/alt/ConcurrentQueueFactory.java": [
                    "public static <E> ConcurrentQueue<E> org.jctools.queues.alt.ConcurrentQueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/alt/MpmcArrayConcurrentQueue.java": [
                    "public E org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.peek()",
                    "public E org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.poll()",
                    "public boolean org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.offer(final E e)",
                    "public int org.jctools.queues.alt.MpmcArrayConcurrentQueue<E>.size()"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/alt/SpscArrayConcurrentQueue.java": [
                    "public int org.jctools.queues.alt.SpscArrayConcurrentQueue<E>.size()",
                    "public E org.jctools.queues.alt.Consumer<E>.poll()",
                    "public boolean org.jctools.queues.alt.Producer<E>.offer(final E e)",
                    "long org.jctools.queues.alt.Consumer<E>.getHeadForSize()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "6f88bf5c20ab527d304544cc48fde0b280449b59",
        "previous_commit": "78965db4efd244c428cea9825527f4ab8101ab00",
        "date": 1573050598,
        "releases": {
            "previous": "6f88bf5c20ab527d304544cc48fde0b280449b59",
            "next": "6f88bf5c20ab527d304544cc48fde0b280449b59"
        },
        "commit_message": "Standardize on `soElement` for nulling. Fix #252\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "6f88bf5c20ab527d304544cc48fde0b280449b59": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public void org.jctools.queues.MpscArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPoll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.drain(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.relaxedOffer(E e)"
                ]
            },
            "78965db4efd244c428cea9825527f4ab8101ab00": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public void org.jctools.queues.MpscArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPoll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.drain(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.relaxedOffer(E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "eda5891c6832f379b7d076ecffe9be2338e63caf",
        "previous_commit": "1b62c5ce1e224c685553b6652b7a1508b3d36402",
        "date": 1483008895,
        "releases": {
            "previous": "eda5891c6832f379b7d076ecffe9be2338e63caf",
            "next": "eda5891c6832f379b7d076ecffe9be2338e63caf"
        },
        "commit_message": "Patch by @cliffclick for issue #151:\nCommit comments:\n     Fix NBHM counting bug\n\n     Bring JCTools NBHM in alignment with h2o-3/h2o-core NBHM.\n     Fixes counting bug.\n     Improved resize heurestic.  Optimized toArray.\n     Fixes some comment spellings; remove dead prints.\n     Bring JCTools NBHML in alignment with JCTools NBHM.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "eda5891c6832f379b7d076ecffe9be2338e63caf": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "private Object org.jctools.maps.NonBlockingHashMapLong<TypeV>.putIfMatch( final long key, final Object putval, final Object expVal )",
                    "private final boolean org.jctools.maps.NonBlockingHashMapLong<TypeV>.tableFull( int reprobe_cnt, int len )",
                    "private final CHM org.jctools.maps.NonBlockingHashMapLong<TypeV>.resize()",
                    "private final void org.jctools.maps.NonBlockingHashMapLong<TypeV>.help_copy_impl( final boolean copy_all )",
                    "private static long org.jctools.maps.NonBlockingHashMapLong<TypeV>.rawIndex(final long[] ary, final int idx)",
                    "private boolean org.jctools.maps.NonBlockingHashMapLong<TypeV>.copy_slot( int idx )",
                    "private final void org.jctools.maps.NonBlockingHashMapLong<TypeV>.copy_check_and_promote( int workdone )",
                    "private static long org.jctools.maps.NonBlockingHashMapLong<TypeV>.rawIndex(final Object[] ary, final int idx)",
                    "private static int org.jctools.maps.NonBlockingHashMapLong<TypeV>.reprobe_limit( int len )"
                ]
            },
            "1b62c5ce1e224c685553b6652b7a1508b3d36402": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "private Object org.jctools.maps.NonBlockingHashMapLong<TypeV>.putIfMatch( final long key, final Object putval, final Object expVal )",
                    "private void org.jctools.maps.NonBlockingHashMapLong<TypeV>.help_copy_impl( final boolean copy_all )",
                    "private boolean org.jctools.maps.NonBlockingHashMapLong<TypeV>.tableFull( int reprobe_cnt, int len )",
                    "private static long org.jctools.maps.NonBlockingHashMapLong<TypeV>.rawIndex(final long[] ary, final int idx)",
                    "private boolean org.jctools.maps.NonBlockingHashMapLong<TypeV>.copy_slot( int idx )",
                    "private static long org.jctools.maps.NonBlockingHashMapLong<TypeV>.rawIndex(final Object[] ary, final int idx)",
                    "private CHM org.jctools.maps.NonBlockingHashMapLong<TypeV>.resize()",
                    "private void org.jctools.maps.NonBlockingHashMapLong<TypeV>.copy_check_and_promote( int workdone )",
                    "private static int org.jctools.maps.NonBlockingHashMapLong<TypeV>.reprobe_limit( int len )"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "6e2a4860fe3d6148a85ff592a4a4e47cf0b7088d",
        "previous_commit": "466822b7a9d0e41d3e2c315a7b775f04c36e432c",
        "date": 1641382660,
        "releases": {
            "previous": "6e2a4860fe3d6148a85ff592a4a4e47cf0b7088d",
            "next": "6e2a4860fe3d6148a85ff592a4a4e47cf0b7088d"
        },
        "commit_message": "Fix #355 by adhering to `size` semantic for queue emptiness\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "6e2a4860fe3d6148a85ff592a4a4e47cf0b7088d": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.BaseMpscLinkedArrayQueue<E>.isEmpty()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferPeek(AtomicReferenceArray<E> nextBuffer, long cIndex)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.peek()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.poll()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPoll()",
                    "public boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.isEmpty()"
                ]
            },
            "466822b7a9d0e41d3e2c315a7b775f04c36e432c": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.BaseMpscLinkedArrayQueue<E>.isEmpty()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.peek()",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferPeek(AtomicReferenceArray<E> nextBuffer, long index)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.poll()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.relaxedPoll()",
                    "public boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.isEmpty()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "cff1522ebc8e91fcf31a39b8509b7b2fd7d064c7",
        "previous_commit": "f2213bd869e89b9ccdd2b3e1dd4e4a1f5fb650de",
        "date": 1577176942,
        "releases": {
            "previous": "cff1522ebc8e91fcf31a39b8509b7b2fd7d064c7",
            "next": "cff1522ebc8e91fcf31a39b8509b7b2fd7d064c7"
        },
        "commit_message": "Refactoring, adding doc, reading through tweaks\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "cff1522ebc8e91fcf31a39b8509b7b2fd7d064c7": {
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.offer(E e)",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPeek()",
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.drain(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddChunk.java": [
                    "E org.jctools.queues.MpscUnboundedXaddChunk<E>.lvElement(int index)",
                    "void org.jctools.queues.MpscUnboundedXaddChunk<E>.soElement(int index, E e)"
                ]
            },
            "f2213bd869e89b9ccdd2b3e1dd4e4a1f5fb650de": {
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.offer(E e)",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPeek()",
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.drain(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddChunk.java": [
                    "E org.jctools.queues.MpscUnboundedXaddChunk<E>.lvElement(int index)",
                    "void org.jctools.queues.MpscUnboundedXaddChunk<E>.soElement(int index, E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "4752a372e993b6ff93db23c4ecfa1a3288b80298",
        "previous_commit": "aa9db72892923977fee046f1a1735feeb65228d5",
        "date": 1396016468,
        "releases": {
            "previous": "4752a372e993b6ff93db23c4ecfa1a3288b80298",
            "next": "4752a372e993b6ff93db23c4ecfa1a3288b80298"
        },
        "commit_message": "Grrr... caught out by wishful concurrency... all better now and\nperformance didn't suffer much for it",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "4752a372e993b6ff93db23c4ecfa1a3288b80298": {
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueue.java": [
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.offer(final E e)",
                    "public int io.jaq.mpmc.MpmcConcurrentQueue<E>.size()",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.peek()",
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.contains(final Object o)",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.poll()"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueueCq.java": [
                    "public E io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.poll()",
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.offer(final E e)",
                    "public E io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.peek()",
                    "public int io.jaq.mpmc.MpmcConcurrentQueueCq<E>.size()"
                ]
            },
            "aa9db72892923977fee046f1a1735feeb65228d5": {
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueue.java": [
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.offer(final E e)",
                    "public int io.jaq.mpmc.MpmcConcurrentQueue<E>.size()",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.peek()",
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.contains(final Object o)",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.poll()"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueueCq.java": [
                    "public E io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.poll()",
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.offer(final E e)",
                    "public E io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.peek()",
                    "public int io.jaq.mpmc.MpmcConcurrentQueueCq<E>.size()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "65ec59c8f818f9904e5489b0c16063e6ed9fb72b",
        "previous_commit": "58d8c95b89cab0794a32f508d63ed611f6c2dd08",
        "date": 1574073767,
        "releases": {
            "previous": "65ec59c8f818f9904e5489b0c16063e6ed9fb72b",
            "next": "65ec59c8f818f9904e5489b0c16063e6ed9fb72b"
        },
        "commit_message": "Add fill test for unbounded case and some standard way to implement\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "65ec59c8f818f9904e5489b0c16063e6ed9fb72b": {
                "jctools-core/src/main/java/org/jctools/queues/MessagePassingQueueUtil.java": [
                    "public static <E> int org.jctools.queues.MessagePassingQueueUtil.fillBounded(MessagePassingQueue<E> q, Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public int org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public int org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedArrayQueue.java": [
                    "public int org.jctools.queues.MpscUnboundedArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public int org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public int org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscUnboundedAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public int org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s)"
                ]
            },
            "58d8c95b89cab0794a32f508d63ed611f6c2dd08": {
                "jctools-core/src/main/java/org/jctools/queues/MessagePassingQueueUtil.java": [
                    "public static <E> int org.jctools.queues.MessagePassingQueueUtil.fillBounded(MessagePassingQueue<E> q, Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public int org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public int org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedArrayQueue.java": [
                    "public int org.jctools.queues.MpscUnboundedArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public int org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public int org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscUnboundedAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue<E>.fill(Supplier<E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public int org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "73df853335d9020f03c9ef1db7ad1ad263e4a19f",
        "previous_commit": "f25796aff1fc38f898c284cfcd79a1701ec9a047",
        "date": 1396448385,
        "releases": {
            "previous": "73df853335d9020f03c9ef1db7ad1ad263e4a19f",
            "next": "73df853335d9020f03c9ef1db7ad1ad263e4a19f"
        },
        "commit_message": "Revert back to using counters, null check method on M side results in\nwrap around bug.",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "73df853335d9020f03c9ef1db7ad1ad263e4a19f": {
                "jaq-inabox/src/main/java/io/jaq/mpsc/MpscConcurrentQueue.java": [
                    "protected final long io.jaq.mpsc.MpscConcurrentQueueHeadField<E>.lvHead()",
                    "public boolean io.jaq.mpsc.MpscConcurrentQueue<E>.offer(final E e)",
                    "public int io.jaq.mpsc.MpscConcurrentQueue<E>.offerStatus(final E e)",
                    "public E io.jaq.mpsc.MpscConcurrentQueue<E>.poll()"
                ],
                "jaq-inabox/src/main/java/io/jaq/spmc/SpmcConcurrentQueue.java": [
                    "protected final long io.jaq.spmc.SpmcConcurrentArrayQueueTailField<E>.lvTail()",
                    "public E io.jaq.spmc.SpmcConcurrentQueue<E>.poll()",
                    "public boolean io.jaq.spmc.SpmcConcurrentQueue<E>.offer(final E e)",
                    "protected final long io.jaq.spmc.SpmcConcurrentArrayQueueHeadField<E>.lvHead()"
                ]
            },
            "f25796aff1fc38f898c284cfcd79a1701ec9a047": {
                "jaq-inabox/src/main/java/io/jaq/mpsc/MpscConcurrentQueue.java": [
                    "protected final long io.jaq.mpsc.MpscConcurrentQueueHeadField<E>.lvHead()",
                    "public boolean io.jaq.mpsc.MpscConcurrentQueue<E>.offer(final E e)",
                    "public int io.jaq.mpsc.MpscConcurrentQueue<E>.offerStatus(final E e)",
                    "public E io.jaq.mpsc.MpscConcurrentQueue<E>.poll()"
                ],
                "jaq-inabox/src/main/java/io/jaq/spmc/SpmcConcurrentQueue.java": [
                    "private long io.jaq.spmc.SpmcConcurrentQueue<E>.lvTail()",
                    "private long io.jaq.spmc.SpmcConcurrentQueue<E>.lvHead()",
                    "public E io.jaq.spmc.SpmcConcurrentQueue<E>.poll()",
                    "public boolean io.jaq.spmc.SpmcConcurrentQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "c4221ded0d6a6719307e3a4a2706408337376d3d",
        "previous_commit": "5e411c842cc861adb550525d07d30228ee429fd9",
        "date": 1440707521,
        "releases": {
            "previous": "c4221ded0d6a6719307e3a4a2706408337376d3d",
            "next": "c4221ded0d6a6719307e3a4a2706408337376d3d"
        },
        "commit_message": "Follow convention of setting counter after inserting/removing element",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "c4221ded0d6a6719307e3a4a2706408337376d3d": {
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public void org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public void org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public int org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s)",
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()",
                    "public int org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c)",
                    "public int org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public int org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)"
                ]
            },
            "5e411c842cc861adb550525d07d30228ee429fd9": {
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public void org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)",
                    "public void org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final WaitStrategy w, final ExitCondition e)",
                    "public int org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s)",
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()",
                    "public int org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c)",
                    "public int org.jctools.queues.SpscArrayQueue<E>.fill(final Supplier<E> s, final int limit)",
                    "public int org.jctools.queues.SpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "982b7675edb74c5b61ace5c1161d39363e68e950",
        "previous_commit": "88e1e25f9519b250258c7e5ada30935975ab2d10",
        "date": 1409819327,
        "releases": {
            "previous": "982b7675edb74c5b61ace5c1161d39363e68e950",
            "next": "982b7675edb74c5b61ace5c1161d39363e68e950"
        },
        "commit_message": "Commit to the Queue interface guarantees:\nQ.poll() == null iff Q.isEmpty()\nQ.offer(e) == false iff Q.size() == capacity",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "982b7675edb74c5b61ace5c1161d39363e68e950": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)"
                ]
            },
            "88e1e25f9519b250258c7e5ada30935975ab2d10": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "ea37d2a6900d78f34dbde59e9d246f670f2acedd",
        "previous_commit": "5fd57720bf19fcd8d93a91c6281f8c41d5ee6b00",
        "date": 1590162515,
        "releases": {
            "previous": "ea37d2a6900d78f34dbde59e9d246f670f2acedd",
            "next": "ea37d2a6900d78f34dbde59e9d246f670f2acedd"
        },
        "commit_message": "Fix `peek`/`relaxedPeek` race with `poll`/`offer` in MC queues\n\nPartial fix to #296, needs more tests added\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "ea37d2a6900d78f34dbde59e9d246f670f2acedd": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.peek()",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPeek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public E org.jctools.queues.SpmcArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.peek()"
                ]
            },
            "5fd57720bf19fcd8d93a91c6281f8c41d5ee6b00": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.peek()",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPeek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public E org.jctools.queues.SpmcArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b6e45c6b71abeba014fc004666868f683cf70235",
        "previous_commit": "d9dfad1154d0a48c453f2d37504b076293d25122",
        "date": 1590495916,
        "releases": {
            "previous": "b6e45c6b71abeba014fc004666868f683cf70235",
            "next": "b6e45c6b71abeba014fc004666868f683cf70235"
        },
        "commit_message": "remove redundant store fence\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "b6e45c6b71abeba014fc004666868f683cf70235": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPoll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public int org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public int org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            },
            "d9dfad1154d0a48c453f2d37504b076293d25122": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPoll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public int org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public int org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "9ae61922ace97923fc6848056295b660a073f65d",
        "previous_commit": "13cb48aef43e92805d17692bd22b5262af11dcf6",
        "date": 1577701327,
        "releases": {
            "previous": "9ae61922ace97923fc6848056295b660a073f65d",
            "next": "9ae61922ace97923fc6848056295b660a073f65d"
        },
        "commit_message": "Refactoring\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "9ae61922ace97923fc6848056295b660a073f65d": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPeek()",
                    "final void org.jctools.queues.MpmcUnboundedXaddArrayQueueConsumerFields<E>.soConsumerBuffer(MpmcUnboundedXaddChunk<E> newValue)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.offer(E e)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()"
                ]
            },
            "13cb48aef43e92805d17692bd22b5262af11dcf6": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPeek()",
                    "final void org.jctools.queues.MpmcUnboundedXaddArrayQueueConsumerFields<E>.soConsumerBuffer(MpmcUnboundedXaddChunk<E> newValue)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.offer(E e)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "937fc0a45b65624e9a5f444b5a7358de152eddfb",
        "previous_commit": "84b61fae4326147b32c537d8c4df81c1a091ef67",
        "date": 1548938640,
        "releases": {
            "previous": "937fc0a45b65624e9a5f444b5a7358de152eddfb",
            "next": "937fc0a45b65624e9a5f444b5a7358de152eddfb"
        },
        "commit_message": "Resolve bugs and cleanup\n\n- isEmpty bug\n- unpark loop bugs\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "937fc0a45b65624e9a5f444b5a7358de152eddfb": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s, int batchSize)",
                    "public final boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.isEmpty()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.take()",
                    "public boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.poll()"
                ]
            },
            "84b61fae4326147b32c537d8c4df81c1a091ef67": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.peek()",
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s, int batchSize)",
                    "public final boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.isEmpty()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.take()",
                    "public boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "c77c100b1e0549bf83f5d55b9df6eb0667b76b73",
        "previous_commit": "c9aec4cc96ce482b7b5a0a4a607c5132579ebca5",
        "date": 1461270963,
        "releases": {
            "previous": "c77c100b1e0549bf83f5d55b9df6eb0667b76b73",
            "next": "c77c100b1e0549bf83f5d55b9df6eb0667b76b73"
        },
        "commit_message": "Remove duplicated methods.\n\nStatic imports of utility methods from UnsafeRefArrayAccess and\nCircularArrayOffsetCalculator.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "c77c100b1e0549bf83f5d55b9df6eb0667b76b73": {
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "public final E org.jctools.queues.SpscUnboundedArrayQueue<E>.poll()",
                    "private E org.jctools.queues.SpscUnboundedArrayQueue<E>.newBufferPoll(E[] buffer, final long index, final long mask)",
                    "public final E org.jctools.queues.SpscUnboundedArrayQueue<E>.peek()",
                    "private E[] org.jctools.queues.SpscUnboundedArrayQueue<E>.lvNext(E[] curr)",
                    "public final boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offer(final E e)",
                    "private E org.jctools.queues.SpscUnboundedArrayQueue<E>.newBufferPeek(E[] nextBuffer, final long index, final long mask)",
                    "private void org.jctools.queues.SpscUnboundedArrayQueue<E>.soNext(E[] curr, E[] next)"
                ]
            },
            "c9aec4cc96ce482b7b5a0a4a607c5132579ebca5": {
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "public final E org.jctools.queues.SpscUnboundedArrayQueue<E>.poll()",
                    "private E org.jctools.queues.SpscUnboundedArrayQueue<E>.newBufferPoll(E[] buffer, final long index, final long mask)",
                    "public final E org.jctools.queues.SpscUnboundedArrayQueue<E>.peek()",
                    "private E[] org.jctools.queues.SpscUnboundedArrayQueue<E>.lvNext(E[] curr)",
                    "public final boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offer(final E e)",
                    "private E org.jctools.queues.SpscUnboundedArrayQueue<E>.newBufferPeek(E[] nextBuffer, final long index, final long mask)",
                    "private void org.jctools.queues.SpscUnboundedArrayQueue<E>.soNext(E[] curr, E[] next)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "cdc668ace1bfbef027016a3cf1fe5f28c125c99a",
        "previous_commit": "fe0b71f449748cb50ce7363451c0e0a1e0fa2da5",
        "date": 1502452170,
        "releases": {
            "previous": "cdc668ace1bfbef027016a3cf1fe5f28c125c99a",
            "next": "cdc668ace1bfbef027016a3cf1fe5f28c125c99a"
        },
        "commit_message": "Code generator that takes in a raw Java source file from the ArrayQueue\nproject and transforms it into output source code that will use the\nbuiltin AtomicFieldUpdater's instead of unsafe.\n\nThis works for the major 4 variants, SPSC, SPMC, MPSC and MPMC.\n\nThe code is generated on each rebuild\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "cdc668ace1bfbef027016a3cf1fe5f28c125c99a": {
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public int org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.peek()",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.poll()"
                ]
            },
            "fe0b71f449748cb50ce7363451c0e0a1e0fa2da5": {
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public int org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.peek()",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "f952087977937ef6b40851ce99523f311ef4eb36",
        "previous_commit": "79bf942952281f7ab459e1dfa88bf872666ac281",
        "date": 1502726779,
        "releases": {
            "previous": "f952087977937ef6b40851ce99523f311ef4eb36",
            "next": "f952087977937ef6b40851ce99523f311ef4eb36"
        },
        "commit_message": "Linked queues: Swap the AtomicReference for AtomicReferenceFieldUpdaters\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "f952087977937ef6b40851ce99523f311ef4eb36": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseLinkedAtomicQueue.java": [
                    "protected final LinkedQueueAtomicNode<E> org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.lpProducerNode()",
                    "protected final LinkedQueueAtomicNode<E> org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.lvProducerNode()",
                    "protected final LinkedQueueAtomicNode<E> org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.xchgProducerNode(LinkedQueueAtomicNode<E> node)",
                    "protected final void org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.spProducerNode(LinkedQueueAtomicNode<E> node)",
                    "protected final void org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.spConsumerNode(LinkedQueueAtomicNode<E> node)",
                    "protected final LinkedQueueAtomicNode<E> org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.lvConsumerNode()",
                    "protected final LinkedQueueAtomicNode<E> org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.lpConsumerNode()"
                ]
            },
            "79bf942952281f7ab459e1dfa88bf872666ac281": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseLinkedAtomicQueue.java": [
                    "protected final LinkedQueueAtomicNode<E> org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.lpProducerNode()",
                    "protected final LinkedQueueAtomicNode<E> org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.lvProducerNode()",
                    "protected final LinkedQueueAtomicNode<E> org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.xchgProducerNode(LinkedQueueAtomicNode<E> node)",
                    "protected final void org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.spProducerNode(LinkedQueueAtomicNode<E> node)",
                    "protected final void org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.spConsumerNode(LinkedQueueAtomicNode<E> node)",
                    "protected final LinkedQueueAtomicNode<E> org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.lvConsumerNode()",
                    "protected final LinkedQueueAtomicNode<E> org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.lpConsumerNode()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "4fdccbd7b18aeabaf783247d214c971a5262dd4a",
        "previous_commit": "acf6b4a303a048b9382a77d97d273bad1dc473a2",
        "date": 1419201656,
        "releases": {
            "previous": "4fdccbd7b18aeabaf783247d214c971a5262dd4a",
            "next": "4fdccbd7b18aeabaf783247d214c971a5262dd4a"
        },
        "commit_message": "start rewrite of mapping code to use templates, rather than bytecode generation\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "4fdccbd7b18aeabaf783247d214c971a5262dd4a": {
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/Mapper.java": [
                    "private Class<?>[] org.jctools.channels.mapping.Mapper<S>.getTypes(Object... args)"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannel.java": [
                    "private SpscChannelProducer<E> org.jctools.channels.spsc.SpscChannel<E>.newProducer(final Class<E> type, final Object... args)",
                    "private SpscChannelConsumer<E> org.jctools.channels.spsc.SpscChannel<E>.newConsumer(Object... args)"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readRelease(long offset)"
                ],
                "jctools-experimental/src/main/java/org/jctools/util/CompilationResult.java": [
                    "public String org.jctools.util.CompilationResult.toString()",
                    "public boolean org.jctools.util.CompilationResult.isSuccessful()"
                ],
                "jctools-experimental/src/main/java/org/jctools/util/Template.java": [
                    "private void org.jctools.util.Template.render(Object obj, StringBuilder result, boolean last)"
                ]
            },
            "acf6b4a303a048b9382a77d97d273bad1dc473a2": {
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/Mapper.java": [
                    "private Class<?>[] org.jctools.channels.mapping.Mapper<S>.getTypes(Object... args)"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannel.java": [
                    "private SpscChannelProducer<E> org.jctools.channels.spsc.SpscChannel<E>.newProducer(final Class<E> type, final Object... args)",
                    "private SpscChannelConsumer<E> org.jctools.channels.spsc.SpscChannel<E>.newConsumer(Object... args)"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readRelease(long offset)"
                ],
                "jctools-experimental/src/main/java/org/jctools/util/CompilationResult.java": [
                    "public String org.jctools.util.CompilationResult.toString()",
                    "public boolean org.jctools.util.CompilationResult.isSuccessful()"
                ],
                "jctools-experimental/src/main/java/org/jctools/util/Template.java": [
                    "private void org.jctools.util.Template.render(Object obj, StringBuilder result, boolean last)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "8845d49ff239d584ea7ed7de31b422229ccc325b",
        "previous_commit": "8735229bb3a7346e446db21454904050dc84bea5",
        "date": 1456580792,
        "releases": {
            "previous": "8845d49ff239d584ea7ed7de31b422229ccc325b",
            "next": "8845d49ff239d584ea7ed7de31b422229ccc325b"
        },
        "commit_message": "MpscGrowable implements MessagePassingQueue, drain/fill left unoptimized",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "8845d49ff239d584ea7ed7de31b422229ccc325b": {
                "jctools-experimental/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "private long org.jctools.queues.MpscGrowableArrayQueue<E>.newBufferAndOffset(E[] nextBuffer, final long index)",
                    "public E org.jctools.queues.MpscGrowableArrayQueue<E>.peek()",
                    "private void org.jctools.queues.MpscGrowableArrayQueue<E>.resize(long currentProducerIndex, E[] buffer, long mask, final E e)",
                    "public boolean org.jctools.queues.MpscGrowableArrayQueue<E>.offer(final E e)",
                    "private long org.jctools.queues.MpscGrowableArrayQueue<E>.nextArrayOffset(final long mask)",
                    "public E org.jctools.queues.MpscGrowableArrayQueue<E>.poll()",
                    "private E org.jctools.queues.MpscGrowableArrayQueue<E>.newBufferPoll(E[] nextBuffer, final long index)"
                ]
            },
            "8735229bb3a7346e446db21454904050dc84bea5": {
                "jctools-experimental/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "private long org.jctools.queues.MpscGrowableArrayQueue<E>.newBufferAndOffset(E[] nextBuffer, final long index)",
                    "public final E org.jctools.queues.MpscGrowableArrayQueue<E>.peek()",
                    "private void org.jctools.queues.MpscGrowableArrayQueue<E>.resize(long currentProducerIndex, E[] buffer, long mask, final E e)",
                    "public boolean org.jctools.queues.MpscGrowableArrayQueue<E>.offer(final E e)",
                    "private long org.jctools.queues.MpscGrowableArrayQueue<E>.nextArrayOffset(final long mask)",
                    "public final E org.jctools.queues.MpscGrowableArrayQueue<E>.poll()",
                    "private E org.jctools.queues.MpscGrowableArrayQueue<E>.newBufferPoll(E[] nextBuffer, final long index)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "8f5c9aebec9ee1cc2b7c6dbcc4bac22370593a55",
        "previous_commit": "26693ce05d5ecfa04e7ec3d7d4f4144ccc7a944c",
        "date": 1502726779,
        "releases": {
            "previous": "8f5c9aebec9ee1cc2b7c6dbcc4bac22370593a55",
            "next": "8f5c9aebec9ee1cc2b7c6dbcc4bac22370593a55"
        },
        "commit_message": "Linked queues: Refactoring node construction and variable names\n\nConstruction of a new LinkedQueueNode or new LinkedQueueAtomicNode is done in the base class\n\nSome parameter variable names homogenized\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "8f5c9aebec9ee1cc2b7c6dbcc4bac22370593a55": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public final boolean org.jctools.queues.MpscLinkedQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public boolean org.jctools.queues.SpscLinkedQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public final boolean org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public boolean org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.offer(final E e)"
                ]
            },
            "26693ce05d5ecfa04e7ec3d7d4f4144ccc7a944c": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public final boolean org.jctools.queues.MpscLinkedQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public boolean org.jctools.queues.SpscLinkedQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public final boolean org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public boolean org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "6f47ab721f9698bddfbd595e67aa5d46cbe9fd8d",
        "previous_commit": "d3881f1f244568800fcae7f61eed7acefe612885",
        "date": 1404498652,
        "releases": {
            "previous": "6f47ab721f9698bddfbd595e67aa5d46cbe9fd8d",
            "next": "6f47ab721f9698bddfbd595e67aa5d46cbe9fd8d"
        },
        "commit_message": "nit picking with the Queue poll contract:\n- poll() == null iff queue is empty\n- peek() == null iff queue is empty\nThis is expected from Queue interface.\nAlso size() is Integer.MAX if there are more than Integer.MAX elements\nin queue.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "6f47ab721f9698bddfbd595e67aa5d46cbe9fd8d": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue7.java": [
                    "public E org.jctools.queues.MpscLinkedQueue7<E>.poll()",
                    "public E org.jctools.queues.MpscLinkedQueue7<E>.peek()",
                    "public int org.jctools.queues.MpscLinkedQueue7<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue8.java": [
                    "public E org.jctools.queues.MpscLinkedQueue8<E>.peek()",
                    "public E org.jctools.queues.MpscLinkedQueue8<E>.poll()",
                    "public int org.jctools.queues.MpscLinkedQueue8<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public int org.jctools.queues.SpscLinkedQueue<E>.size()"
                ]
            },
            "d3881f1f244568800fcae7f61eed7acefe612885": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue7.java": [
                    "public E org.jctools.queues.MpscLinkedQueue7<E>.poll()",
                    "public E org.jctools.queues.MpscLinkedQueue7<E>.peek()",
                    "public int org.jctools.queues.MpscLinkedQueue7<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue8.java": [
                    "public E org.jctools.queues.MpscLinkedQueue8<E>.peek()",
                    "public E org.jctools.queues.MpscLinkedQueue8<E>.poll()",
                    "public int org.jctools.queues.MpscLinkedQueue8<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public int org.jctools.queues.SpscLinkedQueue<E>.size()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "bdc44ee507f1b43a838c74f3d842d8f3cc2f1662",
        "previous_commit": "2668b1d7ff2f24a035d0068ceccf46af1b722781",
        "date": 1502187689,
        "releases": {
            "previous": "bdc44ee507f1b43a838c74f3d842d8f3cc2f1662",
            "next": "bdc44ee507f1b43a838c74f3d842d8f3cc2f1662"
        },
        "commit_message": "Swap the AtomicLong's for a couple AtomicLongFieldUpdaters\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "bdc44ee507f1b43a838c74f3d842d8f3cc2f1662": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "private void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.soProducerIndex(long newIndex)",
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.peek()",
                    "private void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.soConsumerIndex(long newIndex)",
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.offer(final E e)",
                    "public long org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.lvProducerIndex()",
                    "public long org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.lvConsumerIndex()"
                ]
            },
            "2668b1d7ff2f24a035d0068ceccf46af1b722781": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "private void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.soProducerIndex(long newIndex)",
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.peek()",
                    "private void org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.soConsumerIndex(long newIndex)",
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.offer(final E e)",
                    "public long org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.lvProducerIndex()",
                    "public long org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.lvConsumerIndex()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "6ffb07956b3785b88bf86e90bfa59fef58962bd4",
        "previous_commit": "9ae61922ace97923fc6848056295b660a073f65d",
        "date": 1577715497,
        "releases": {
            "previous": "6ffb07956b3785b88bf86e90bfa59fef58962bd4",
            "next": "6ffb07956b3785b88bf86e90bfa59fef58962bd4"
        },
        "commit_message": "Reduce code duplication in xadd code\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "6ffb07956b3785b88bf86e90bfa59fef58962bd4": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "private E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.linkNextConsumerChunkAndPoll( MpmcUnboundedXaddChunk<E> cChunk, MpmcUnboundedXaddChunk<E> next, long expectedChunkIndex)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPoll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.peek()",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPeek()",
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.drain(Consumer<E> c, int limit)"
                ]
            },
            "9ae61922ace97923fc6848056295b660a073f65d": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "private E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.linkNextConsumerChunkAndPoll( MpmcUnboundedXaddChunk<E> cChunk, MpmcUnboundedXaddChunk<E> next, long expectedChunkIndex)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPoll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.peek()",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPeek()",
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.drain(Consumer<E> c, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "01b2690dd6d191b24245e7591f82c3d96f623c42",
        "previous_commit": "622c0b331e5ed25f4cce85ae829e3d6e92c0e6cd",
        "date": 1460388608,
        "releases": {
            "previous": "01b2690dd6d191b24245e7591f82c3d96f623c42",
            "next": "01b2690dd6d191b24245e7591f82c3d96f623c42"
        },
        "commit_message": "Use UnsafeAccess instead of UnsafeUtile",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "01b2690dd6d191b24245e7591f82c3d96f623c42": {
                "jctools-experimental/src/main/java/org/jctools/maps/ConcurrentAutoTable.java": [
                    "private static boolean org.jctools.maps.ConcurrentAutoTable.CAS( long[] A, int idx, long old, long nnn )"
                ],
                "jctools-experimental/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "private boolean org.jctools.maps.NonBlockingHashMapLong<TypeV>.CAS_key( int idx, long old, long key )",
                    "private boolean org.jctools.maps.NonBlockingHashMapLong<TypeV>.CAS_val( int idx, Object old, Object val )",
                    "private final boolean org.jctools.maps.NonBlockingHashMapLong<TypeV>.CAS( final long offset, final Object old, final Object nnn )"
                ],
                "jctools-experimental/src/main/java/org/jctools/maps/NonBlockingSetInt.java": [
                    "private final boolean org.jctools.maps.NonBlockingSetInt.CAS_new( NBSI nnn )",
                    "private final boolean org.jctools.maps.NonBlockingSetInt.CAS( int idx, long old, long nnn )",
                    "private final boolean org.jctools.maps.NonBlockingSetInt.CAS_nbsi( NBSI old, NBSI nnn )"
                ]
            },
            "622c0b331e5ed25f4cce85ae829e3d6e92c0e6cd": {
                "jctools-experimental/src/main/java/org/jctools/maps/ConcurrentAutoTable.java": [
                    "private static boolean org.jctools.maps.ConcurrentAutoTable.CAS( long[] A, int idx, long old, long nnn )"
                ],
                "jctools-experimental/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "private boolean org.jctools.maps.NonBlockingHashMapLong<TypeV>.CAS_key( int idx, long old, long key )",
                    "private boolean org.jctools.maps.NonBlockingHashMapLong<TypeV>.CAS_val( int idx, Object old, Object val )",
                    "private final boolean org.jctools.maps.NonBlockingHashMapLong<TypeV>.CAS( final long offset, final Object old, final Object nnn )"
                ],
                "jctools-experimental/src/main/java/org/jctools/maps/NonBlockingSetInt.java": [
                    "private final boolean org.jctools.maps.NonBlockingSetInt.CAS_new( NBSI nnn )",
                    "private final boolean org.jctools.maps.NonBlockingSetInt.CAS( int idx, long old, long nnn )",
                    "private final boolean org.jctools.maps.NonBlockingSetInt.CAS_nbsi( NBSI old, NBSI nnn )"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "13d8ba9a5196b1a8dd867dc992a83edc05d868fb",
        "previous_commit": "cb02f12736dc7ecb9219087613f69bb0c817e857",
        "date": 1468825913,
        "releases": {
            "previous": "13d8ba9a5196b1a8dd867dc992a83edc05d868fb",
            "next": "13d8ba9a5196b1a8dd867dc992a83edc05d868fb"
        },
        "commit_message": "Switch to System.identityHashCode in IOHS, cleanup dead param.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "13d8ba9a5196b1a8dd867dc992a83edc05d868fb": {
                "jctools-experimental/src/main/java/org/jctools/sets/IdentityOpenHashSet.java": [
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.add(E newVal)",
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.remove(Object val)",
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.compactAndRemove(final E[] buffer, final int mask, int removeHashIndex)",
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.contains(Object needle)",
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.addForResize(final E[] buffer, final int mask, E newVal)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/OpenHashSet.java": [
                    "private void org.jctools.sets.OpenHashSet<E>.compactAndRemove(final E[] buffer, final int mask, int removeHashIndex)",
                    "public boolean org.jctools.sets.OpenHashSet<E>.remove(Object val)"
                ]
            },
            "cb02f12736dc7ecb9219087613f69bb0c817e857": {
                "jctools-experimental/src/main/java/org/jctools/sets/IdentityOpenHashSet.java": [
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.add(E newVal)",
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.remove(Object val)",
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.compactAndRemove(final E[] buffer, final int mask, int removeHashIndex)",
                    "public boolean org.jctools.sets.IdentityOpenHashSet<E>.contains(Object needle)",
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.addForResize(final E[] buffer, final int mask, E newVal)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/OpenHashSet.java": [
                    "private void org.jctools.sets.OpenHashSet<E>.compactAndRemove(final E[] buffer, final int mask, int removeHashIndex)",
                    "public boolean org.jctools.sets.OpenHashSet<E>.remove(Object val)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "03dfd5dbadbc488062514e1287786a6db715b827",
        "previous_commit": "2899cc863626dee83e9c63030141a76262a15c46",
        "date": 1440192754,
        "releases": {
            "previous": "03dfd5dbadbc488062514e1287786a6db715b827",
            "next": "03dfd5dbadbc488062514e1287786a6db715b827"
        },
        "commit_message": "Adding relaxedOffer/Poll/Peek support to bounded queues",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "03dfd5dbadbc488062514e1287786a6db715b827": {
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public E org.jctools.queues.MpscCompoundQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.MpscCompoundQueue<E>.relaxedPoll()",
                    "public boolean org.jctools.queues.MpscCompoundQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public E org.jctools.queues.FFBuffer<E>.peek()"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/MpscSequencedArrayQueue.java": [
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.peek()"
                ]
            },
            "2899cc863626dee83e9c63030141a76262a15c46": {
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public E org.jctools.queues.MpscCompoundQueue<E>.poll()",
                    "public boolean org.jctools.queues.MpscCompoundQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public E org.jctools.queues.FFBuffer<E>.peek()"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/MpscSequencedArrayQueue.java": [
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "58a2faf6b11c4ea00ec653839829b5b47beaf6d6",
        "previous_commit": "bcd275f10cd760f764d76d9e7b853425daa08e48",
        "date": 1621527353,
        "releases": {
            "previous": "58a2faf6b11c4ea00ec653839829b5b47beaf6d6",
            "next": "58a2faf6b11c4ea00ec653839829b5b47beaf6d6"
        },
        "commit_message": "Rework `size` utility to reduce code duplication\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "58a2faf6b11c4ea00ec653839829b5b47beaf6d6": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public final int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "public int org.jctools.queues.ConcurrentCircularArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public final int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/AtomicReferenceArrayQueue.java": [
                    "public final int org.jctools.queues.atomic.AtomicReferenceArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "public final int org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.size()"
                ]
            },
            "bcd275f10cd760f764d76d9e7b853425daa08e48": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public final int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "public int org.jctools.queues.ConcurrentCircularArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public final int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/AtomicReferenceArrayQueue.java": [
                    "public final int org.jctools.queues.atomic.AtomicReferenceArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "public final int org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.size()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "988030970703e56f29924855a367bd0a603a002e",
        "previous_commit": "c1ed7f4042fa93104f5fe6b89ba9cdae0508fa0c",
        "date": 1503304758,
        "releases": {
            "previous": "988030970703e56f29924855a367bd0a603a002e",
            "next": "988030970703e56f29924855a367bd0a603a002e"
        },
        "commit_message": "Auto-formtting queues\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "988030970703e56f29924855a367bd0a603a002e": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public int org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public int org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public int org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public int org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            },
            "c1ed7f4042fa93104f5fe6b89ba9cdae0508fa0c": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public int org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public int org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public int org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public int org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d60366d5cdef9091f7dfacb6713fb7fc2b153516",
        "previous_commit": "51b9c52b239fb6fe67cf1b18badc7fcad405b120",
        "date": 1456582394,
        "releases": {
            "previous": "d60366d5cdef9091f7dfacb6713fb7fc2b153516",
            "next": "d60366d5cdef9091f7dfacb6713fb7fc2b153516"
        },
        "commit_message": "MPMC drain fill need soElement, switching to ordered element store\neverywhere",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d60366d5cdef9091f7dfacb6713fb7fc2b153516": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.relaxedOffer(E e)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPoll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ]
            },
            "51b9c52b239fb6fe67cf1b18badc7fcad405b120": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.relaxedOffer(E e)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.relaxedPoll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b92836699ccd0e70007c1b98dd99559959bb5582",
        "previous_commit": "4cd6cb0d0b718f8d6effbb9c2b94ae999bdf210c",
        "date": 1457023764,
        "releases": {
            "previous": "b92836699ccd0e70007c1b98dd99559959bb5582",
            "next": "b92836699ccd0e70007c1b98dd99559959bb5582"
        },
        "commit_message": "Remove some ideaj warnings\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "b92836699ccd0e70007c1b98dd99559959bb5582": {
                "jctools-core/src/main/java/org/cliffc/high_scale_lib/ConcurrentAutoTable.java": [
                    "public void org.cliffc.high_scale_lib.ConcurrentAutoTable.set( long x )",
                    "public long org.cliffc.high_scale_lib.ConcurrentAutoTable.add_if( long x, int hash, ConcurrentAutoTable master )",
                    "public long org.cliffc.high_scale_lib.ConcurrentAutoTable.sum( )"
                ],
                "jctools-core/src/main/java/org/cliffc/high_scale_lib/NonBlockingHashMapLong.java": [
                    "private void org.cliffc.high_scale_lib.NonBlockingHashMapLong<TypeV>.initialize( final int initial_sz )",
                    "private Object org.cliffc.high_scale_lib.NonBlockingHashMapLong<TypeV>.putIfMatch( final long key, final Object putval, final Object expVal )",
                    "private CHM org.cliffc.high_scale_lib.NonBlockingHashMapLong<TypeV>.resize()"
                ]
            },
            "4cd6cb0d0b718f8d6effbb9c2b94ae999bdf210c": {
                "jctools-core/src/main/java/org/cliffc/high_scale_lib/ConcurrentAutoTable.java": [
                    "public void org.cliffc.high_scale_lib.ConcurrentAutoTable.set( long x )",
                    "public long org.cliffc.high_scale_lib.ConcurrentAutoTable.add_if( long x, int hash, ConcurrentAutoTable master )",
                    "public long org.cliffc.high_scale_lib.ConcurrentAutoTable.sum( )"
                ],
                "jctools-core/src/main/java/org/cliffc/high_scale_lib/NonBlockingHashMapLong.java": [
                    "private final void org.cliffc.high_scale_lib.NonBlockingHashMapLong<TypeV>.initialize( final int initial_sz )",
                    "private final Object org.cliffc.high_scale_lib.NonBlockingHashMapLong<TypeV>.putIfMatch( final long key, final Object putval, final Object expVal )",
                    "private final CHM org.cliffc.high_scale_lib.NonBlockingHashMapLong<TypeV>.resize()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "0860097b7d63fc7c16370548b36db69ecd6125ea",
        "previous_commit": "618dc8b99b4c5eb645ac8ec764f1f30c88c66951",
        "date": 1576922425,
        "releases": {
            "previous": "0860097b7d63fc7c16370548b36db69ecd6125ea",
            "next": "0860097b7d63fc7c16370548b36db69ecd6125ea"
        },
        "commit_message": "Fix #277 Improve BaseMpscLinkedArrayQueue iterator\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "0860097b7d63fc7c16370548b36db69ecd6125ea": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "private void org.jctools.queues.BaseMpscLinkedArrayQueue<E>.setBuffer(E[] buffer)",
                    "public Iterator<E> org.jctools.queues.BaseMpscLinkedArrayQueue<E>.iterator()",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.getNext()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.next()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "private void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.setBuffer(AtomicReferenceArray<E> buffer)",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.getNext()"
                ]
            },
            "618dc8b99b4c5eb645ac8ec764f1f30c88c66951": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "private void org.jctools.queues.BaseMpscLinkedArrayQueue<E>.setBuffer(E[] buffer)",
                    "public Iterator<E> org.jctools.queues.BaseMpscLinkedArrayQueue<E>.iterator()",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.getNext()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.next()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "private void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.setBuffer(AtomicReferenceArray<E> buffer)",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.getNext()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "8196da37f7c84a1f166f170420803c820c03515a",
        "previous_commit": "c0b570d31a4a60cb2b538f86106207f626c4b30c",
        "date": 1596115372,
        "releases": {
            "previous": "8196da37f7c84a1f166f170420803c820c03515a",
            "next": "8196da37f7c84a1f166f170420803c820c03515a"
        },
        "commit_message": "MpscBlockingConsumerArrayQueue poll with timeout fix (#316)\n\nMpscBlockingConsumerArrayQueue poll with timeout fix\r\n\r\nPreviously the following sequence was possible:\r\n```\r\n  Consumer                            Provider\r\n\r\n  poll(timeout)\r\n                                      offerAndWakeup()\r\n  time out\r\n                                      soRefElement(, offset,)\r\n  consume from offset\r\n  offset -> offset'\r\n  poll()\r\n                                      soBlocked(null)\r\n                                      unpark(consumerThread)\r\n  // Spin for ever\r\n  spinWaitForElement(, offset')\r\n```\r\nIssue resolved by more strictly enforcing consumer invariants when exiting the parked state.\r\n\r\nCo-authored-by: nickhill <nickhill@us.ibm.com>\r\nCo-authored-by: Nitsan <nwakart@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "8196da37f7c84a1f166f170420803c820c03515a": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.peek()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.take()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.poll(long timeout, TimeUnit unit)",
                    "private void org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.wakeupConsumer()",
                    "private boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.offerAndWakeup(E[] buffer, long mask, long pIndex, E e)"
                ]
            },
            "c0b570d31a4a60cb2b538f86106207f626c4b30c": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.peek()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.take()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.poll(long timeout, TimeUnit unit)",
                    "private void org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.wakeupConsumer()",
                    "private boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.offerAndWakeup(E[] buffer, long mask, long pIndex, E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "79bf942952281f7ab459e1dfa88bf872666ac281",
        "previous_commit": "4c7c9142f0a4fa93e0a6db6cb846509707d6aa52",
        "date": 1502726778,
        "releases": {
            "previous": "79bf942952281f7ab459e1dfa88bf872666ac281",
            "next": "79bf942952281f7ab459e1dfa88bf872666ac281"
        },
        "commit_message": "Linked queues: Homogenize unsafe and atomic implementations\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "79bf942952281f7ab459e1dfa88bf872666ac281": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "public E org.jctools.queues.BaseLinkedQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.BaseLinkedQueue<E>.relaxedPoll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public final E org.jctools.queues.MpscLinkedQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public boolean org.jctools.queues.SpscLinkedQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public E org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.poll()",
                    "public E org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.peek()"
                ]
            },
            "4c7c9142f0a4fa93e0a6db6cb846509707d6aa52": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "public E org.jctools.queues.BaseLinkedQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.BaseLinkedQueue<E>.relaxedPoll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public final E org.jctools.queues.MpscLinkedQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public boolean org.jctools.queues.SpscLinkedQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public E org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.poll()",
                    "public E org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "bf55e2cbe5c846a9f5e1978c8faed36ba2e7dbef",
        "previous_commit": "b99ede80d40d5c34360c085437dc6e55e2fc79dd",
        "date": 1462026170,
        "releases": {
            "previous": "bf55e2cbe5c846a9f5e1978c8faed36ba2e7dbef",
            "next": "bf55e2cbe5c846a9f5e1978c8faed36ba2e7dbef"
        },
        "commit_message": "Rename producerLookAhead to producerLimit, cleanup next array access ",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "bf55e2cbe5c846a9f5e1978c8faed36ba2e7dbef": {
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.BaseSpscLinkedArrayQueue<E>.offer(final E e)",
                    "protected final E[] org.jctools.queues.BaseSpscLinkedArrayQueue<E>.lvNext(E[] curr)",
                    "protected final void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.soNext(E[] curr, E[] next)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "protected boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath(final E[] buffer, final long mask, final E e, final long index, final long offset)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "protected boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offerColdPath(final E[] buffer, final long mask, final E e, final long index, final long offset)",
                    "private void org.jctools.queues.SpscUnboundedArrayQueue<E>.linkNewBuffer(final E[] oldBuffer, final long currIndex, final long offset, final E e, final long mask)"
                ]
            },
            "b99ede80d40d5c34360c085437dc6e55e2fc79dd": {
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.BaseSpscLinkedArrayQueue<E>.offer(final E e)",
                    "protected final E[] org.jctools.queues.BaseSpscLinkedArrayQueue<E>.lvNext(E[] curr)",
                    "protected final void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.soNext(E[] curr, E[] next)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "protected boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath(final E[] buffer, final long mask, final E e, final long index, final long offset)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "protected boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offerColdPath(final E[] buffer, final long mask, final E e, final long index, final long offset)",
                    "private void org.jctools.queues.SpscUnboundedArrayQueue<E>.linkNewBuffer(final E[] oldBuffer, final long currIndex, final long offset, final E e, final long mask)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "2bd0ad34b546e7bc93aa7b439f6d0fcc941a7d5e",
        "previous_commit": "c4221ded0d6a6719307e3a4a2706408337376d3d",
        "date": 1440707592,
        "releases": {
            "previous": "2bd0ad34b546e7bc93aa7b439f6d0fcc941a7d5e",
            "next": "2bd0ad34b546e7bc93aa7b439f6d0fcc941a7d5e"
        },
        "commit_message": "Implement specialized drain/fill methods for MPSC array queue",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "2bd0ad34b546e7bc93aa7b439f6d0fcc941a7d5e": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "protected final long org.jctools.queues.MpscArrayQueueConsumerField<E>.lvConsumerIndex()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(Consumer<E> c)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPoll()",
                    "public void org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ]
            },
            "c4221ded0d6a6719307e3a4a2706408337376d3d": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "protected final long org.jctools.queues.MpscArrayQueueConsumerField<E>.lvConsumerIndex()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(Consumer<E> c)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPoll()",
                    "public void org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b930e2b6e4d8af0d22c7648b9353447ce70e7ed4",
        "previous_commit": "3a911b4a4ceebb4968ba2bda01d030e0bff8b3e2",
        "date": 1451386284,
        "releases": {
            "previous": "b930e2b6e4d8af0d22c7648b9353447ce70e7ed4",
            "next": "b930e2b6e4d8af0d22c7648b9353447ce70e7ed4"
        },
        "commit_message": "Growable MPSC - working version after some preliminary testing",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "b930e2b6e4d8af0d22c7648b9353447ce70e7ed4": {
                "jctools-experimental/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "public boolean org.jctools.queues.MpscGrowableArrayQueue<E>.offer(final E e)",
                    "public final int org.jctools.queues.MpscGrowableArrayQueue<E>.size()",
                    "private long org.jctools.queues.MpscGrowableArrayQueue<E>.nextArrayOffset(final long mask)",
                    "private E org.jctools.queues.MpscGrowableArrayQueue<E>.newBufferPeek(E[] nextBuffer, final long index)",
                    "public final E org.jctools.queues.MpscGrowableArrayQueue<E>.poll()",
                    "private E org.jctools.queues.MpscGrowableArrayQueue<E>.newBufferPoll(E[] nextBuffer, final long index)"
                ]
            },
            "3a911b4a4ceebb4968ba2bda01d030e0bff8b3e2": {
                "jctools-experimental/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "public boolean org.jctools.queues.MpscGrowableArrayQueue<E>.offer(final E e)",
                    "public final int org.jctools.queues.MpscGrowableArrayQueue<E>.size()",
                    "private long org.jctools.queues.MpscGrowableArrayQueue<E>.nextArrayOffset(final long mask)",
                    "private E org.jctools.queues.MpscGrowableArrayQueue<E>.newBufferPeek(E[] nextBuffer, final long index)",
                    "public final E org.jctools.queues.MpscGrowableArrayQueue<E>.poll()",
                    "private E org.jctools.queues.MpscGrowableArrayQueue<E>.newBufferPoll(E[] nextBuffer, final long index)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "bfb10f044e17c8035b884fe29ad409daaaf74911",
        "previous_commit": "8f5c9aebec9ee1cc2b7c6dbcc4bac22370593a55",
        "date": 1502727549,
        "releases": {
            "previous": "bfb10f044e17c8035b884fe29ad409daaaf74911",
            "next": "bfb10f044e17c8035b884fe29ad409daaaf74911"
        },
        "commit_message": "Array queues: Implement MessagePassingQueue for atomics\n\nExposed static methods like lvElement on AtomicReferenceArray to mimick UnsafeRefArrayAccess methods\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "bfb10f044e17c8035b884fe29ad409daaaf74911": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.patchAtomicFieldUpdaterAccessorMethods(ClassOrInterfaceDeclaration n)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)",
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.main(String[] args)",
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.processSpecialNodeTypes(NodeWithType<?, Type> node, String name)",
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.organiseImports(CompilationUnit cu)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.relaxedOffer(E e)"
                ]
            },
            "8f5c9aebec9ee1cc2b7c6dbcc4bac22370593a55": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.patchAtomicFieldUpdaterAccessorMethods(ClassOrInterfaceDeclaration n)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)",
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.main(String[] args)",
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.processSpecialNodeTypes(NodeWithType<?, Type> node, String name)",
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.organiseImports(CompilationUnit cu)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.relaxedOffer(E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "2f44fd1dba0d262ef77adbf173a55533141d0e4f",
        "previous_commit": "44c436250b18754ed16d30712f9ccdf7ca71d881",
        "date": 1404243005,
        "releases": {
            "previous": "2f44fd1dba0d262ef77adbf173a55533141d0e4f",
            "next": "2f44fd1dba0d262ef77adbf173a55533141d0e4f"
        },
        "commit_message": "Correct semantics of poll/peed for Mpsc as they require consistency with\nsize.\nWeaken barriers on node value as they were not required.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "2f44fd1dba0d262ef77adbf173a55533141d0e4f": {
                "jctools-core/src/main/java/org/jctools/queues/LinkedQueueNode.java": [
                    "public E org.jctools.queues.LinkedQueueNode<E>.evacuateValue()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue7.java": [
                    "public E org.jctools.queues.MpscLinkedQueue7<E>.poll()",
                    "public E org.jctools.queues.MpscLinkedQueue7<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue8.java": [
                    "public E org.jctools.queues.MpscLinkedQueue8<E>.peek()",
                    "public E org.jctools.queues.MpscLinkedQueue8<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public E org.jctools.queues.SpscLinkedQueue<E>.peek()"
                ]
            },
            "44c436250b18754ed16d30712f9ccdf7ca71d881": {
                "jctools-core/src/main/java/org/jctools/queues/LinkedQueueNode.java": [
                    "public E org.jctools.queues.LinkedQueueNode<E>.evacuateValue()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue7.java": [
                    "public E org.jctools.queues.MpscLinkedQueue7<E>.poll()",
                    "public E org.jctools.queues.MpscLinkedQueue7<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue8.java": [
                    "public E org.jctools.queues.MpscLinkedQueue8<E>.peek()",
                    "public E org.jctools.queues.MpscLinkedQueue8<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public E org.jctools.queues.SpscLinkedQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "1cef2cd67718781c437dac7488ec2be1d68d3b95",
        "previous_commit": "784d66dd7988629ff5cfe43a8ca6768ab0e81def",
        "date": 1419531416,
        "releases": {
            "previous": "1cef2cd67718781c437dac7488ec2be1d68d3b95",
            "next": "1cef2cd67718781c437dac7488ec2be1d68d3b95"
        },
        "commit_message": "remove capacity field",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "1cef2cd67718781c437dac7488ec2be1d68d3b95": {
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "protected final long org.jctools.queues.ConcurrentCircularArrayQueue<E>.calcElementOffset(long index)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public int org.jctools.queues.MpscArrayQueue<E>.weakOffer(final E e)",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)"
                ]
            },
            "784d66dd7988629ff5cfe43a8ca6768ab0e81def": {
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "protected final long org.jctools.queues.ConcurrentCircularArrayQueue<E>.calcElementOffset(long index)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public int org.jctools.queues.MpscArrayQueue<E>.weakOffer(final E e)",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "4a92bdf4130b7aff0855d810d50899b89d0e5078",
        "previous_commit": "fb57af84310403b71141f72316d4cbdad5de191a",
        "date": 1395845917,
        "releases": {
            "previous": "4a92bdf4130b7aff0855d810d50899b89d0e5078",
            "next": "4a92bdf4130b7aff0855d810d50899b89d0e5078"
        },
        "commit_message": "Abstract some common code into ConcurrentRingBuffer\nAdd direct CQ implementation for SPSC/MPMC\nUpdate to use latest JMH",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "4a92bdf4130b7aff0855d810d50899b89d0e5078": {
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueue.java": [
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.offer(final E e)"
                ],
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatchCq.java": [
                    "public boolean io.jaq.spsc.FFBufferWithOfferBatchCq<E>.offer(final E e)",
                    "public ConcurrentQueueConsumer<E> io.jaq.spsc.FFBufferWithOfferBatchCq<E>.consumer()",
                    "public E io.jaq.spsc.FFBufferWithOfferBatchCq<E>.peek()",
                    "public E io.jaq.spsc.FFBufferWithOfferBatchCq<E>.poll()",
                    "public ConcurrentQueueProducer<E> io.jaq.spsc.FFBufferWithOfferBatchCq<E>.producer()"
                ]
            },
            "fb57af84310403b71141f72316d4cbdad5de191a": {
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueue.java": [
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.offer(final E e)"
                ],
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatchCq.java": [
                    "public boolean io.jaq.spsc.FFBufferWithOfferBatchCq<E>.offer(final E e)",
                    "public ConcurrentQueueConsumer<E> io.jaq.spsc.FFBufferWithOfferBatchCq<E>.consumer()",
                    "public E io.jaq.spsc.FFBufferWithOfferBatchCq<E>.peek()",
                    "public E io.jaq.spsc.FFBufferWithOfferBatchCq<E>.poll()",
                    "public ConcurrentQueueProducer<E> io.jaq.spsc.FFBufferWithOfferBatchCq<E>.producer()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "edaa8503b040b48e0f5d92eb4129813993e3ca13",
        "previous_commit": "c575f79375531a6bc7bbe49548e5828e13c93882",
        "date": 1445082990,
        "releases": {
            "previous": "edaa8503b040b48e0f5d92eb4129813993e3ca13",
            "next": "edaa8503b040b48e0f5d92eb4129813993e3ca13"
        },
        "commit_message": "Use a plain load for poll(), use a method for plain load to improve\nreadability.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "edaa8503b040b48e0f5d92eb4129813993e3ca13": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPoll()",
                    "public void org.jctools.queues.MpscArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()",
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPeek()"
                ]
            },
            "c575f79375531a6bc7bbe49548e5828e13c93882": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPoll()",
                    "public void org.jctools.queues.MpscArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()",
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscArrayQueue<E>.relaxedPeek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "9fa7efe57a3e5824f4731b0adc03bc0f7db40581",
        "previous_commit": "993a109eafffd25a15c05b6c24899dc34d01a948",
        "date": 1457534168,
        "releases": {
            "previous": "9fa7efe57a3e5824f4731b0adc03bc0f7db40581",
            "next": "9fa7efe57a3e5824f4731b0adc03bc0f7db40581"
        },
        "commit_message": "Found issue: broken fill methods(known broken at this stage, will fix)",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "9fa7efe57a3e5824f4731b0adc03bc0f7db40581": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "public E org.jctools.queues.MpscChunkedArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.MpscChunkedArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscChunkedArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpscChunkedArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.MpscChunkedArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public boolean org.jctools.queues.MpscChunkedArrayQueue<E>.offer(final E e)"
                ]
            },
            "993a109eafffd25a15c05b6c24899dc34d01a948": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "public E org.jctools.queues.MpscChunkedArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.MpscChunkedArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscChunkedArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpscChunkedArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public void org.jctools.queues.MpscChunkedArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public boolean org.jctools.queues.MpscChunkedArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "594acb850d47ab0d8745ee8b80d1b4902932344b",
        "previous_commit": "fbeabd5eb395778f3ae35f34e06d5fae7049c811",
        "date": 1502203177,
        "releases": {
            "previous": "594acb850d47ab0d8745ee8b80d1b4902932344b",
            "next": "594acb850d47ab0d8745ee8b80d1b4902932344b"
        },
        "commit_message": "Replaced AtomicLong's with field updaters\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "594acb850d47ab0d8745ee8b80d1b4902932344b": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "protected final long org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.lvProducerLimit()",
                    "public final long org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.lvConsumerIndex()",
                    "protected void org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.soConsumerIndex(long l)",
                    "protected final boolean org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.casProducerIndex(long expect, long newValue)",
                    "protected final void org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.soProducerLimit(long v)",
                    "public final long org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.lvProducerIndex()"
                ]
            },
            "fbeabd5eb395778f3ae35f34e06d5fae7049c811": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "protected final long org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.lvProducerLimit()",
                    "public final long org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.lvConsumerIndex()",
                    "protected void org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.soConsumerIndex(long l)",
                    "protected final boolean org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.casProducerIndex(long expect, long newValue)",
                    "protected final void org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.soProducerLimit(long v)",
                    "public final long org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.lvProducerIndex()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "aeb48264c489cfc76014870456e1cb3a0742a657",
        "previous_commit": "b0a6b436b746b5fff14454ca255839e860ee691f",
        "date": 1395355053,
        "releases": {
            "previous": "aeb48264c489cfc76014870456e1cb3a0742a657",
            "next": "aeb48264c489cfc76014870456e1cb3a0742a657"
        },
        "commit_message": "Remove batch methods from CQ interfaces until design is better thought\nout.\nMove less performant SPSC variants to benchmarks for comparison.\nFactory now serves SPSC/MPSC/SPMC/MPMC flavours\nCommit buffer localisation optimisation.\nParametrize test to cover more implementations for sanity test.",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "aeb48264c489cfc76014870456e1cb3a0742a657": {
                "jaq-inabox/src/main/java/io/jaq/ConcurrentQueueFactory.java": [
                    "public static <E> ConcurrentQueue<E> io.jaq.ConcurrentQueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpsc/MpscOnSpscQueue.java": [
                    "protected Queue<E> io.jaq.mpsc.MpscOnSpscFields<E>.initialValue()"
                ],
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatch.java": [
                    "public boolean io.jaq.spsc.FFBufferWithOfferBatch<E>.offer(final E e)",
                    "public E io.jaq.spsc.FFBufferWithOfferBatch<E>.poll()"
                ],
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatchCq.java": [
                    "public E io.jaq.spsc.FFBufferWithOfferBatchCq<E>.poll()",
                    "public boolean io.jaq.spsc.FFBufferWithOfferBatchCq<E>.offer(final E e)"
                ]
            },
            "b0a6b436b746b5fff14454ca255839e860ee691f": {
                "jaq-inabox/src/main/java/io/jaq/ConcurrentQueueFactory.java": [
                    "public static <E> ConcurrentQueue<E> io.jaq.ConcurrentQueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpsc/MpscOnSpscQueue.java": [
                    "protected Queue<E> io.jaq.mpsc.MpscOnSpscFields<E>.initialValue()"
                ],
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatch.java": [
                    "public boolean io.jaq.spsc.FFBufferWithOfferBatch<E>.offer(final E e)",
                    "public E io.jaq.spsc.FFBufferWithOfferBatch<E>.poll()"
                ],
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatchCq.java": [
                    "public E io.jaq.spsc.FFBufferWithOfferBatchCq<E>.poll()",
                    "public boolean io.jaq.spsc.FFBufferWithOfferBatchCq<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "410a03b8be403dde0cfe7da53b16d215f7bdff95",
        "previous_commit": "a0037dbc65d2fd8781e615750a78a0c803e001e7",
        "date": 1403205348,
        "releases": {
            "previous": "410a03b8be403dde0cfe7da53b16d215f7bdff95",
            "next": "410a03b8be403dde0cfe7da53b16d215f7bdff95"
        },
        "commit_message": "Fix peek, add documentation to MPSC linked.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "410a03b8be403dde0cfe7da53b16d215f7bdff95": {
                "jctools-core/src/main/java/org/jctools/queues/LinkedQueueNode.java": [
                    "public E org.jctools.queues.LinkedQueueNode<E>.lvValue()",
                    "public LinkedQueueNode<E> org.jctools.queues.LinkedQueueNode<E>.lvNext()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public E org.jctools.queues.MpscLinkedQueue<E>.poll()",
                    "public E org.jctools.queues.MpscLinkedQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public E org.jctools.queues.SpscLinkedQueue<E>.peek()",
                    "public E org.jctools.queues.SpscLinkedQueue<E>.poll()"
                ]
            },
            "a0037dbc65d2fd8781e615750a78a0c803e001e7": {
                "jctools-core/src/main/java/org/jctools/queues/LinkedQueueNode.java": [
                    "public E org.jctools.queues.LinkedQueueNode<E>.lvValue()",
                    "public LinkedQueueNode<E> org.jctools.queues.LinkedQueueNode<E>.lvNext()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public E org.jctools.queues.MpscLinkedQueue<E>.poll()",
                    "public E org.jctools.queues.MpscLinkedQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public E org.jctools.queues.SpscLinkedQueue<E>.peek()",
                    "public E org.jctools.queues.SpscLinkedQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d19c984bfb88defb067edf3de4b08f3ee657e94c",
        "previous_commit": "40b09c9f69ffd2cd9d6f8e4d5ce32e9f84fcaedd",
        "date": 1502203176,
        "releases": {
            "previous": "d19c984bfb88defb067edf3de4b08f3ee657e94c",
            "next": "d19c984bfb88defb067edf3de4b08f3ee657e94c"
        },
        "commit_message": "SpmcArrayQueue\n- static imports\nSpmcAtomicArrayQueue:\n- Implement IndexedQueue to use IndexedQueueSizeUtil.size/isEmpty and\n  thus these method code blocks go away\n- Renamed some methods and variables to match their names in\n  SpmcArrayQueue\n- Fixed suboptimal behaviour in poll() where the currProducerIndexCache\n  wasn't updated\n- Added removeElement util method to match SpmcArrayQueue\n- peek() uses different lvElement overload to be more similar to\n  SpmcArrayQueue\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d19c984bfb88defb067edf3de4b08f3ee657e94c": {
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.isEmpty()",
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.size()",
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.offer(final E e)"
                ]
            },
            "40b09c9f69ffd2cd9d6f8e4d5ce32e9f84fcaedd": {
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.SpmcArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.isEmpty()",
                    "public int org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.size()",
                    "public E org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "13fdb7ba9106d80e00f5b832b823c5fa257cc573",
        "previous_commit": "1cef2cd67718781c437dac7488ec2be1d68d3b95",
        "date": 1419766578,
        "releases": {
            "previous": "13fdb7ba9106d80e00f5b832b823c5fa257cc573",
            "next": "13fdb7ba9106d80e00f5b832b823c5fa257cc573"
        },
        "commit_message": "a second iteration of the growable spsc",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "13fdb7ba9106d80e00f5b832b823c5fa257cc573": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "public final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offer(final E e)",
                    "private E org.jctools.queues.SpscGrowableArrayQueue<E>.newBufferPoll(E[] nextBuffer, final long index)",
                    "private static final <E> Object org.jctools.queues.SpscGrowableArrayQueue<E>.lvElement(E[] buffer, long offset)",
                    "private E org.jctools.queues.SpscGrowableArrayQueue<E>.newBufferPeek(E[] nextBuffer, final long index)",
                    "public final E org.jctools.queues.SpscGrowableArrayQueue<E>.peek()",
                    "public final E org.jctools.queues.SpscGrowableArrayQueue<E>.poll()"
                ]
            },
            "1cef2cd67718781c437dac7488ec2be1d68d3b95": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "private static final <E> E org.jctools.queues.SpscGrowableArrayQueue<E>.lvElement(E[] buffer, long offset)",
                    "public boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscGrowableArrayQueue<E>.peek()",
                    "private E org.jctools.queues.SpscGrowableArrayQueue<E>.newBufferPoll(E[] nextBuffer, final long index)",
                    "public E org.jctools.queues.SpscGrowableArrayQueue<E>.poll()",
                    "private E org.jctools.queues.SpscGrowableArrayQueue<E>.newBufferPeek(E[] nextBuffer, final long index)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "52d4e78a1ad2e64daa36de0ef1995140584d45b0",
        "previous_commit": "d19c984bfb88defb067edf3de4b08f3ee657e94c",
        "date": 1502203176,
        "releases": {
            "previous": "52d4e78a1ad2e64daa36de0ef1995140584d45b0",
            "next": "52d4e78a1ad2e64daa36de0ef1995140584d45b0"
        },
        "commit_message": "Removed Atomics with field updaters\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "52d4e78a1ad2e64daa36de0ef1995140584d45b0": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "protected final long org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.lvProducerIndexCache()",
                    "protected final void org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.soProducerIndex(long v)",
                    "protected final boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.casHead(long expect, long newValue)",
                    "protected final void org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.svProducerIndexCache(long v)",
                    "public final long org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.lvConsumerIndex()",
                    "public final long org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.lvProducerIndex()"
                ]
            },
            "d19c984bfb88defb067edf3de4b08f3ee657e94c": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "protected final long org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.lvProducerIndexCache()",
                    "protected final void org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.soProducerIndex(long v)",
                    "protected final boolean org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.casHead(long expect, long newValue)",
                    "protected final void org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.svProducerIndexCache(long v)",
                    "public final long org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.lvConsumerIndex()",
                    "public final long org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.lvProducerIndex()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "c8a32a1d33600ad48b23853cc87aa641d3eaba53",
        "previous_commit": "c344a06426a9a7e65548ae41475a188593d84922",
        "date": 1506512941,
        "releases": {
            "previous": "c8a32a1d33600ad48b23853cc87aa641d3eaba53",
            "next": "c8a32a1d33600ad48b23853cc87aa641d3eaba53"
        },
        "commit_message": "Formatting and style changes\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "c8a32a1d33600ad48b23853cc87aa641d3eaba53": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.offer(final E e)",
                    "private int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferAndOffset(AtomicReferenceArray<E> nextBuffer, long index)",
                    "public void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.peek()",
                    "private int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.offerSlowPath(long mask, long pIndex, long producerLimit)",
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ]
            },
            "c344a06426a9a7e65548ae41475a188593d84922": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.offer(final E e)",
                    "private int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferAndOffset(AtomicReferenceArray<E> nextBuffer, long index)",
                    "public void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.peek()",
                    "private int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.offerSlowPath(long mask, long pIndex, long producerLimit)",
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "bfba108c160adfdf80b168c3afba5a14baa9e195",
        "previous_commit": "b9f95f7293f456cc35f19a0e71d8a839347d0ff3",
        "date": 1440683542,
        "releases": {
            "previous": "bfba108c160adfdf80b168c3afba5a14baa9e195",
            "next": "bfba108c160adfdf80b168c3afba5a14baa9e195"
        },
        "commit_message": "Expand MPQ to support drain/fill methods(MPMC/MPSC array q not done).",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "bfba108c160adfdf80b168c3afba5a14baa9e195": {
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "protected final long org.jctools.queues.SpmcArrayQueueProducerField<E>.lvProducerIndex()",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/alt/MpmcArrayConcurrentQueue.java": [
                    "private boolean org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.weakOffer(final long[] sBuffer, final E[] eBuffer, final long mask, E e)"
                ]
            },
            "b9f95f7293f456cc35f19a0e71d8a839347d0ff3": {
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "protected final long org.jctools.queues.SpmcArrayQueueProducerField<E>.lvProducerIndex()",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.peek()",
                    "public E org.jctools.queues.SpmcArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/alt/MpmcArrayConcurrentQueue.java": [
                    "private boolean org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.weakOffer(final long[] sBuffer, final E[] eBuffer, final long mask, E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "7ddcf61ccceb67e333c9c3cc75bbb4d659adc785",
        "previous_commit": "eed855a6a4fe12b70a65ce601285277576d465e8",
        "date": 1502727549,
        "releases": {
            "previous": "7ddcf61ccceb67e333c9c3cc75bbb4d659adc785",
            "next": "7ddcf61ccceb67e333c9c3cc75bbb4d659adc785"
        },
        "commit_message": "SPSC variant: Refactored BaseSpscLinkedArrayQueue to be similiar to the unsafe variant\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "7ddcf61ccceb67e333c9c3cc75bbb4d659adc785": {
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "private long org.jctools.queues.BaseSpscLinkedArrayQueue<E>.nextArrayOffset(E[] curr)",
                    "protected final E[] org.jctools.queues.BaseSpscLinkedArrayQueue<E>.lvNextArrayAndUnlink(E[] curr)",
                    "protected final void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.soNext(E[] curr, E[] next)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "private int org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.nextArrayOffset(AtomicReferenceArray<E> curr)",
                    "protected final void org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.soNext(AtomicReferenceArray<E> curr, AtomicReferenceArray<E> next)"
                ]
            },
            "eed855a6a4fe12b70a65ce601285277576d465e8": {
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "private long org.jctools.queues.BaseSpscLinkedArrayQueue<E>.nextArrayOffset(E[] curr)",
                    "protected final E[] org.jctools.queues.BaseSpscLinkedArrayQueue<E>.lvNextArrayAndUnlink(E[] curr)",
                    "protected final void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.soNext(E[] curr, E[] next)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "private int org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.nextArrayOffset(AtomicReferenceArray<E> curr)",
                    "protected final void org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.soNext(AtomicReferenceArray<E> curr, AtomicReferenceArray<E> next)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "6acb2a1011cacc4b8b379069888cc7395aa68a80",
        "previous_commit": "d46dc3f5ceea5c1243a345fbe869654e74b9f886",
        "date": 1478612144,
        "releases": {
            "previous": "6acb2a1011cacc4b8b379069888cc7395aa68a80",
            "next": "6acb2a1011cacc4b8b379069888cc7395aa68a80"
        },
        "commit_message": "refactoring the intrusive queue some more...\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "6acb2a1011cacc4b8b379069888cc7395aa68a80": {
                "jctools-core/src/main/java/org/jctools/queues/intrusive/MpscIntrusiveLinkedQueue.java": [
                    "public void org.jctools.queues.intrusive.MpscIntrusiveLinkedQueue.clear()",
                    "public int org.jctools.queues.intrusive.MpscIntrusiveLinkedQueue.size()",
                    "private Node org.jctools.queues.intrusive.MpscIntrusiveLinkedQueue.xchgHead(Node node)",
                    "public Node org.jctools.queues.intrusive.MpscIntrusiveLinkedQueue.poll()",
                    "public Node org.jctools.queues.intrusive.MpscIntrusiveLinkedQueue.peek()"
                ]
            },
            "d46dc3f5ceea5c1243a345fbe869654e74b9f886": {
                "jctools-core/src/main/java/org/jctools/queues/intrusive/MpscIntrusiveLinkedQueue.java": [
                    "public void org.jctools.queues.intrusive.MpscIntrusiveLinkedQueue.clear()",
                    "public int org.jctools.queues.intrusive.MpscIntrusiveLinkedQueue.size()",
                    "private Node org.jctools.queues.intrusive.MpscIntrusiveLinkedQueue.xchgHead(Node node)",
                    "public Node org.jctools.queues.intrusive.MpscIntrusiveLinkedQueue.poll()",
                    "public Node org.jctools.queues.intrusive.MpscIntrusiveLinkedQueue.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "466822b7a9d0e41d3e2c315a7b775f04c36e432c",
        "previous_commit": "29e455969bca5443e24b7a46bf93dfca2c401f3b",
        "date": 1641382640,
        "releases": {
            "previous": "466822b7a9d0e41d3e2c315a7b775f04c36e432c",
            "next": "466822b7a9d0e41d3e2c315a7b775f04c36e432c"
        },
        "commit_message": "Rename `index` to `cIndex` where appropriate\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "466822b7a9d0e41d3e2c315a7b775f04c36e432c": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.poll()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.relaxedPeek()",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferPeek(E[] nextBuffer, long cIndex)",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.peek()"
                ]
            },
            "29e455969bca5443e24b7a46bf93dfca2c401f3b": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.poll()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.peek()",
                    "private E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferPeek(E[] nextBuffer, long index)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "061fce09f4728f1de993303683228d61774b283f",
        "previous_commit": "cb6cb004802b0c1240c0dd3f78dae7330b0ed2c1",
        "date": 1548938722,
        "releases": {
            "previous": "061fce09f4728f1de993303683228d61774b283f",
            "next": "061fce09f4728f1de993303683228d61774b283f"
        },
        "commit_message": "Code tidyup\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "061fce09f4728f1de993303683228d61774b283f": {
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public E org.jctools.queues.FFBuffer<E>.peek()",
                    "public boolean org.jctools.queues.FFBuffer<E>.offer(final E e)",
                    "public final long org.jctools.queues.FFBuffer<E>.lvProducerIndex()",
                    "public final long org.jctools.queues.FFBuffer<E>.lvConsumerIndex()",
                    "public E org.jctools.queues.FFBuffer<E>.poll()"
                ]
            },
            "cb6cb004802b0c1240c0dd3f78dae7330b0ed2c1": {
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public E org.jctools.queues.FFBuffer<E>.peek()",
                    "public boolean org.jctools.queues.FFBuffer<E>.offer(final E e)",
                    "public final long org.jctools.queues.FFBuffer<E>.lvProducerIndex()",
                    "public final long org.jctools.queues.FFBuffer<E>.lvConsumerIndex()",
                    "public E org.jctools.queues.FFBuffer<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b4d2b7ab5ea74d5d0c5ee03db021eb639f7c73d0",
        "previous_commit": "4a8a432f4d27f3235c54b44b2ee58572612199ee",
        "date": 1455197115,
        "releases": {
            "previous": "b4d2b7ab5ea74d5d0c5ee03db021eb639f7c73d0",
            "next": "b4d2b7ab5ea74d5d0c5ee03db021eb639f7c73d0"
        },
        "commit_message": "Fix newBufferPoll bug. Some code refactoring + formatting",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "b4d2b7ab5ea74d5d0c5ee03db021eb639f7c73d0": {
                "jctools-experimental/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "public final E org.jctools.queues.MpscGrowableArrayQueue<E>.peek()",
                    "private void org.jctools.queues.MpscGrowableArrayQueue<E>.resize(long currentProducerIndex, E[] buffer, long mask, final E e)",
                    "public boolean org.jctools.queues.MpscGrowableArrayQueue<E>.offer(final E e)",
                    "public final E org.jctools.queues.MpscGrowableArrayQueue<E>.poll()",
                    "private E org.jctools.queues.MpscGrowableArrayQueue<E>.newBufferPoll(E[] nextBuffer, final long index)"
                ]
            },
            "4a8a432f4d27f3235c54b44b2ee58572612199ee": {
                "jctools-experimental/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "public final E org.jctools.queues.MpscGrowableArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscGrowableArrayQueue<E>.offer(final E e)",
                    "private boolean org.jctools.queues.MpscGrowableArrayQueue<E>.resize(long currentProducerIndex, E[] buffer, long mask, final E e)",
                    "public final E org.jctools.queues.MpscGrowableArrayQueue<E>.poll()",
                    "private E org.jctools.queues.MpscGrowableArrayQueue<E>.newBufferPoll(E[] nextBuffer, final long index)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "66e6cbc9b88e1440a597c803b7df9bd1d60219f6",
        "previous_commit": "77a481cbebaa4ae02bfd9e8312be4b5259cb3c62",
        "date": 1617087006,
        "releases": {
            "previous": "66e6cbc9b88e1440a597c803b7df9bd1d60219f6",
            "next": "66e6cbc9b88e1440a597c803b7df9bd1d60219f6"
        },
        "commit_message": "Fix table-size long math on very large tables.\n\nFix reprobe rate for pathological keys.\nFix rare mis-count during table-promotion counting\nAllow a fast not-atomic size-preserving clear, for rapid recycling of large tables.\nRemove some IDE warnings.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "66e6cbc9b88e1440a597c803b7df9bd1d60219f6": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "private Object org.jctools.maps.NonBlockingHashMapLong<TypeV>.putIfMatch( final long key, final Object putval, final Object expVal )",
                    "private void org.jctools.maps.NonBlockingHashMapLong<TypeV>.help_copy_impl( final boolean copy_all )",
                    "private Object org.jctools.maps.NonBlockingHashMapLong<TypeV>.get_impl( final long key )",
                    "private boolean org.jctools.maps.NonBlockingHashMapLong<TypeV>.copy_slot( int idx )",
                    "private void org.jctools.maps.NonBlockingHashMapLong<TypeV>.copy_check_and_promote( int workdone )"
                ]
            },
            "77a481cbebaa4ae02bfd9e8312be4b5259cb3c62": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "private Object org.jctools.maps.NonBlockingHashMapLong<TypeV>.putIfMatch( final long key, final Object putval, final Object expVal )",
                    "private Object org.jctools.maps.NonBlockingHashMapLong<TypeV>.get_impl( final long key )",
                    "private final void org.jctools.maps.NonBlockingHashMapLong<TypeV>.help_copy_impl( final boolean copy_all )",
                    "private boolean org.jctools.maps.NonBlockingHashMapLong<TypeV>.copy_slot( int idx )",
                    "private final void org.jctools.maps.NonBlockingHashMapLong<TypeV>.copy_check_and_promote( int workdone )"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "ec7bf348961485f3534ed63371042b2080f68750",
        "previous_commit": "1b62c5ce1e224c685553b6652b7a1508b3d36402",
        "date": 1482498220,
        "releases": {
            "previous": "ec7bf348961485f3534ed63371042b2080f68750",
            "next": "ec7bf348961485f3534ed63371042b2080f68750"
        },
        "commit_message": "MPSC/user custom channel + primitives only support.\n\nSupport for user specified back end data structures for the proxy byte\ncode generation factory. Users need only to specify a ProxyChannelRingBuffer\nimplementation. The protocol is to acquire/release for both loads and\nstores. Within these borders plain stores and plain loads are performed.\n\nOnly subtle and implicit part of the API is that implementors of\nProxyChannelRingBuffer must provide the constructor (int capacity, int\nmessageSize, int referenceMessageSize).\n\nThis change supports the existing MPSC channel which I've added reference\nsupport to. I've consolidated reference function from the class\nOffHeapFixedMessageSizeWithReferenceSupportRingBuffer into the basic\nclass OffHeapFixedMessageSizeRingBuffer. When referenceMessageSize = 0\nthen the backing array will not be instantiated and nor will the reference\nmethods be supported. This is expressed as asserts rather than throwing an\nexception with the expectation the lack of branch would perform better in\nwell behaved usage scenarios and NPE in others.\n\nExtracted out the wait strategy to the org.jctools.channels package.\nModified how the wait strategy works as a field of the generated proxy\nclass and use a static util method on the factory for it's implementation,\nthus letting the backend channels omit implementation.\n\nAdded to and heavily refactored tests to try to better separate and\nexpress test intent.\n\nRenamed arrayMessageSize to referenceMessageSize and messageSize to\nprimitiveMessageSize to create a consistent and easy to understand\ndistinction.\n\nMoved the impl of ProxyChannelRingBuffer up to the top of\nOffHeapFixedSizeRingBuffer. This may arguably be semantically ambiguous\nbut it seemed like the easiest thing to do. I am open to discussion of\nremoving the ProxyChannelRingBuffer interface and specifying it's API via\nOffHeapFixedSizeRingBuffer with protected methods instead.\n\nAdded noddy MPSC just to give me an initial idea but it's not well thought\nout. I plan to revisit both SPSC and MPSC benchmarks in order to compare\nthem to alternate solutions such as the disruptr, etc.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "ec7bf348961485f3534ed63371042b2080f68750": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.getReference(MethodVisitor methodVisitor, Class<?> parameterType, int localIndexOfArrayReferenceBaseIndex, int arrayReferenceBaseIndexDelta, Class<? extends ProxyChannelRingBuffer> backendType)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementUserMethod(Method method, ClassVisitor classVisitor, int type, String generatedName, Class<? extends ProxyChannelRingBuffer> backendType)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProcess(ClassVisitor classVisitor, Class<? extends ProxyChannelRingBuffer> backendType, List<Method> methods, Class<?> iFace, String generatedName)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.putReference(MethodVisitor methodVisitor, Class<?> parameterType, int localIndexOfArrayReferenceBaseIndex, int arrayReferenceBaseIndexDelta, int varOffset, Class<? extends ProxyChannelRingBuffer> backendType)",
                    "public static <E> ProxyChannel<E> org.jctools.channels.proxy.ProxyChannelFactory.createSpscProxy(int capacity, Class<E> iFace, WaitStrategy waitStrategy)"
                ]
            },
            "1b62c5ce1e224c685553b6652b7a1508b3d36402": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.putReference(MethodVisitor methodVisitor, Class<?> parameterType, int localIndexOfArrayReferenceBaseIndex, int arrayReferenceBaseIndexDelta, int varOffset)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProcess(ClassVisitor classVisitor, List<Method> methods, Class<?> iFace, String generatedName)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.getReference(MethodVisitor methodVisitor, Class<?> parameterType, int localIndexOfArrayReferenceBaseIndex, int arrayReferenceBaseIndexDelta)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementUserMethod(Method method, ClassVisitor classVisitor, int type)",
                    "public static <E> ProxyChannel<E> org.jctools.channels.proxy.ProxyChannelFactory.createSpscProxy(int capacity, Class<E> iFace, WaitStrategy waitStrategy)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "13cb48aef43e92805d17692bd22b5262af11dcf6",
        "previous_commit": "36c352b987e678da251d5fda6ed2038ab377dd27",
        "date": 1577700973,
        "releases": {
            "previous": "13cb48aef43e92805d17692bd22b5262af11dcf6",
            "next": "13cb48aef43e92805d17692bd22b5262af11dcf6"
        },
        "commit_message": "Improved naming, make relaxedPoll more relaxed\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "13cb48aef43e92805d17692bd22b5262af11dcf6": {
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.offer(E e)",
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.drain(Consumer<E> c, int limit)"
                ]
            },
            "36c352b987e678da251d5fda6ed2038ab377dd27": {
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.offer(E e)",
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.drain(Consumer<E> c, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "220f423fb8283288d80a0389d2958468e5ae9d48",
        "previous_commit": "21fc54e83822748620b54ba71c31897296a5b46a",
        "date": 1403181680,
        "releases": {
            "previous": "220f423fb8283288d80a0389d2958468e5ae9d48",
            "next": "220f423fb8283288d80a0389d2958468e5ae9d48"
        },
        "commit_message": "Updated documentation and naming conventions",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "220f423fb8283288d80a0389d2958468e5ae9d48": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public int org.jctools.queues.MpscArrayQueue<E>.size()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.tryOffer(final E e)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()"
                ]
            },
            "21fc54e83822748620b54ba71c31897296a5b46a": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public int org.jctools.queues.MpscArrayQueue<E>.size()",
                    "public int org.jctools.queues.MpscArrayQueue<E>.tryOffer(final E e)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.MpscArrayQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "efcb60756ad75ef70e8e9ae603cf7c65cd46423d",
        "previous_commit": "72c55e5bee5ed05e47c5f997f8d4bc9d736659d1",
        "date": 1527252207,
        "releases": {
            "previous": "efcb60756ad75ef70e8e9ae603cf7c65cd46423d",
            "next": "efcb60756ad75ef70e8e9ae603cf7c65cd46423d"
        },
        "commit_message": "Implement batching methods on MpmcArrayQueue\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "efcb60756ad75ef70e8e9ae603cf7c65cd46423d": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.processSpecialNodeTypes(NodeWithType<?, Type> node, String name)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            },
            "72c55e5bee5ed05e47c5f997f8d4bc9d736659d1": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.processSpecialNodeTypes(NodeWithType<?, Type> node, String name)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public int org.jctools.queues.MpmcArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.drain(Consumer<E> c, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "f25796aff1fc38f898c284cfcd79a1701ec9a047",
        "previous_commit": "497e922816298429f9b9d66f095f4536671a2c9e",
        "date": 1396363575,
        "releases": {
            "previous": "f25796aff1fc38f898c284cfcd79a1701ec9a047",
            "next": "f25796aff1fc38f898c284cfcd79a1701ec9a047"
        },
        "commit_message": "Fixed MPMC with counters",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "f25796aff1fc38f898c284cfcd79a1701ec9a047": {
                "jaq-inabox/src/main/java/io/jaq/common/ConcurrentRingBuffer.java": [
                    "protected final long io.jaq.common.ConcurrentRingBuffer<E>.calcOffset(long index)"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueue.java": [
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.offer(final E e)",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.poll()"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueueCq.java": [
                    "public E io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.poll()",
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.offer(final E e)"
                ]
            },
            "497e922816298429f9b9d66f095f4536671a2c9e": {
                "jaq-inabox/src/main/java/io/jaq/common/ConcurrentRingBuffer.java": [
                    "protected final long io.jaq.common.ConcurrentRingBuffer<E>.calcOffset(long index)"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueue.java": [
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.offer(final E e)",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.poll()"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueueCq.java": [
                    "public E io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.poll()",
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "8f268d5293dc4701f9637ff393bdce110b2c0603",
        "previous_commit": "5dc705baad06d6149a03db70241324d941cf7231",
        "date": 1596708819,
        "releases": {
            "previous": "8f268d5293dc4701f9637ff393bdce110b2c0603",
            "next": "8f268d5293dc4701f9637ff393bdce110b2c0603"
        },
        "commit_message": "Refactor MpscBlocking::offerBelow + bug fix + tests\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "8f268d5293dc4701f9637ff393bdce110b2c0603": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "private boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.recalculateProducerLimit(long mask, long pIndex, long producerLimit)",
                    "public boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.offerIfBelowThreshold(final E e, int threshold)",
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.relaxedPeek()"
                ]
            },
            "5dc705baad06d6149a03db70241324d941cf7231": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "private boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.recalculateProducerLimit(long mask, long pIndex, long producerLimit)",
                    "public boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.offerIfBelowThreshold(final E e, int threshold)",
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.relaxedPeek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "a929ab51edd0820bd2864db03d9f90eaaf326c0c",
        "previous_commit": "a158e5bb43e908259ecb2665ed75c2ab2c8a81c1",
        "date": 1398696402,
        "releases": {
            "previous": "a929ab51edd0820bd2864db03d9f90eaaf326c0c",
            "next": "a929ab51edd0820bd2864db03d9f90eaaf326c0c"
        },
        "commit_message": "Use base class throughout. More closely match FFB and FFBWBO",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "a929ab51edd0820bd2864db03d9f90eaaf326c0c": {
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatch.java": [
                    "private E io.jaq.spsc.FFBufferWithOfferBatch<E>.getElement(long index)",
                    "public boolean io.jaq.spsc.FFBufferWithOfferBatch<E>.offer(final E e)",
                    "public E io.jaq.spsc.FFBufferWithOfferBatch<E>.poll()"
                ],
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatchCq.java": [
                    "public E io.jaq.spsc.FFBufferWithOfferBatchCq<E>.poll()",
                    "public boolean io.jaq.spsc.FFBufferWithOfferBatchCq<E>.offer(final E e)"
                ]
            },
            "a158e5bb43e908259ecb2665ed75c2ab2c8a81c1": {
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatch.java": [
                    "private E io.jaq.spsc.FFBufferWithOfferBatch<E>.getElement(long index)",
                    "public boolean io.jaq.spsc.FFBufferWithOfferBatch<E>.offer(final E e)",
                    "public E io.jaq.spsc.FFBufferWithOfferBatch<E>.poll()"
                ],
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatchCq.java": [
                    "public E io.jaq.spsc.FFBufferWithOfferBatchCq<E>.poll()",
                    "public boolean io.jaq.spsc.FFBufferWithOfferBatchCq<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "14250a5699d7cd58998d49faf818a86011dc1c75",
        "previous_commit": "0860097b7d63fc7c16370548b36db69ecd6125ea",
        "date": 1576922639,
        "releases": {
            "previous": "14250a5699d7cd58998d49faf818a86011dc1c75",
            "next": "14250a5699d7cd58998d49faf818a86011dc1c75"
        },
        "commit_message": "wait-free relaxedPoll for mpmc xadd q (#276)\n\n* wait-free relaxedPollPeek for mpmc xadd q\r\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "14250a5699d7cd58998d49faf818a86011dc1c75": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPeek()",
                    "private E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.rotateConsumerBuffer(AtomicChunk<E> consumerBuffer, AtomicChunk<E> next, int consumerOffset, long expectedChunkIndex)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.peek()",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()"
                ]
            },
            "0860097b7d63fc7c16370548b36db69ecd6125ea": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPeek()",
                    "private E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.rotateConsumerBuffer(AtomicChunk<E> consumerBuffer, AtomicChunk<E> next, int consumerOffset, long expectedChunkIndex)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.peek()",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "096c22ff231cfaff24f441155a16bd5b84bdd1bb",
        "previous_commit": "2a30aa3ecd2bb50fc866b78668b633bb7a0d62ab",
        "date": 1419785731,
        "releases": {
            "previous": "096c22ff231cfaff24f441155a16bd5b84bdd1bb",
            "next": "096c22ff231cfaff24f441155a16bd5b84bdd1bb"
        },
        "commit_message": "fixup:\n- holder for next buffer\n- use correct offset for full check",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "096c22ff231cfaff24f441155a16bd5b84bdd1bb": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "public final E org.jctools.queues.SpscGrowableArrayQueue<E>.poll()",
                    "public final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offer(final E e)",
                    "private void org.jctools.queues.SpscGrowableArrayQueue<E>.resize(final E[] old, final long currIndex, final long offset, final int maxCapacity, final E e)",
                    "public final E org.jctools.queues.SpscGrowableArrayQueue<E>.peek()"
                ]
            },
            "2a30aa3ecd2bb50fc866b78668b633bb7a0d62ab": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "public final E org.jctools.queues.SpscGrowableArrayQueue<E>.poll()",
                    "public final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offer(final E e)",
                    "private void org.jctools.queues.SpscGrowableArrayQueue<E>.resize(final E[] old, final long currIndex, final long offset, final int maxCapacity, final E e)",
                    "public final E org.jctools.queues.SpscGrowableArrayQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "cf35ee35b2c66f2f72db8bf604fc650141f9b6df",
        "previous_commit": "264e669a8dd125e922a0fb6e08f31c42f7d07e53",
        "date": 1577970880,
        "releases": {
            "previous": "cf35ee35b2c66f2f72db8bf604fc650141f9b6df",
            "next": "cf35ee35b2c66f2f72db8bf604fc650141f9b6df"
        },
        "commit_message": "mpmc xadd q poll wasn't handling correctly chunkSize = 1 pooled case (#281)\n\nQueueSanityTest::testSize with chunkSize = 1 and 1 recycled chunks was\r\nfailing with a blocked poll because it wasn't handling ccChunkIndex ==\r\nciChunkIndex as an isFirstElementOfNextChunk case",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "cf35ee35b2c66f2f72db8bf604fc650141f9b6df": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "private E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.linkNextConsumerChunkAndPoll( MpmcUnboundedXaddChunk<E> cChunk, MpmcUnboundedXaddChunk<E> next, long expectedChunkIndex)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddChunk.java": [
                    "void org.jctools.queues.MpmcUnboundedXaddChunk<E>.soSequence(int index, long e)",
                    "long org.jctools.queues.MpmcUnboundedXaddChunk<E>.lvSequence(int index)"
                ]
            },
            "264e669a8dd125e922a0fb6e08f31c42f7d07e53": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "private E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.linkNextConsumerChunkAndPoll( MpmcUnboundedXaddChunk<E> cChunk, MpmcUnboundedXaddChunk<E> next, long expectedChunkIndex)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddChunk.java": [
                    "void org.jctools.queues.MpmcUnboundedXaddChunk<E>.soSequence(int index, long e)",
                    "long org.jctools.queues.MpmcUnboundedXaddChunk<E>.lvSequence(int index)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "33c7774322d46a8d62ba755e2afe645617f03b15",
        "previous_commit": "79bdab95b2e44b9a746727b1fa5cb0749bebf56f",
        "date": 1457197565,
        "releases": {
            "previous": "33c7774322d46a8d62ba755e2afe645617f03b15",
            "next": "33c7774322d46a8d62ba755e2afe645617f03b15"
        },
        "commit_message": "Refactored away consumerIndexCache and replaced it with producerLimit.\n\nThis pattern is more akin to the producerLookAhead in the SpscArrayQueue.\nIt affords us some opportunity to remove some calculations from the hot\npaths when batch processing elements.\n\nSadly the offerIfBelowThreshold is a counter intuitive method. Refactoring\nit is difficult without changing the semantics. I'd suggest the semantics\nof this method given the javdoc & test cases are rather confusing and\nperhaps the semantics need reviewing. For backwards compatibility I've\npreserved the existing semantics.\n\nRemoved redundant imports that are pulled in through inheritence.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "33c7774322d46a8d62ba755e2afe645617f03b15": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public final int org.jctools.queues.MpscArrayQueue<E>.failFastOffer(final E e)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offerIfBelowTheshold(final E e, int threshold)"
                ]
            },
            "79bdab95b2e44b9a746727b1fa5cb0749bebf56f": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public final int org.jctools.queues.MpscArrayQueue<E>.failFastOffer(final E e)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offer(final E e)",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offerIfBelowTheshold(final E e, int threshold)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "a0037dbc65d2fd8781e615750a78a0c803e001e7",
        "previous_commit": "c3d2454676ae8ddd10dc0559e8a7d98fda4f8c18",
        "date": 1403202842,
        "releases": {
            "previous": "a0037dbc65d2fd8781e615750a78a0c803e001e7",
            "next": "a0037dbc65d2fd8781e615750a78a0c803e001e7"
        },
        "commit_message": "Correct construction and cleanup naming in SpscLinked",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "a0037dbc65d2fd8781e615750a78a0c803e001e7": {
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public int org.jctools.queues.SpscLinkedQueue<E>.size()",
                    "public E org.jctools.queues.SpscLinkedQueue<E>.peek()",
                    "public boolean org.jctools.queues.SpscLinkedQueue<E>.offer(E e)",
                    "public E org.jctools.queues.SpscLinkedQueue<E>.poll()"
                ]
            },
            "c3d2454676ae8ddd10dc0559e8a7d98fda4f8c18": {
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public int org.jctools.queues.SpscLinkedQueue<E>.size()",
                    "public E org.jctools.queues.SpscLinkedQueue<E>.peek()",
                    "public boolean org.jctools.queues.SpscLinkedQueue<E>.offer(E e)",
                    "public E org.jctools.queues.SpscLinkedQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "77c62209bd19adc68a702c6d41a7cc3e74de24be",
        "previous_commit": "dfc88034bc1d460b8c2b3980029d68dafb100e4e",
        "date": 1396113598,
        "releases": {
            "previous": "77c62209bd19adc68a702c6d41a7cc3e74de24be",
            "next": "77c62209bd19adc68a702c6d41a7cc3e74de24be"
        },
        "commit_message": "re-implement the 1024cores way",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "77c62209bd19adc68a702c6d41a7cc3e74de24be": {
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueue.java": [
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.offer(final E e)",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.poll()"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueueCq.java": [
                    "public E io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.poll()",
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.offer(final E e)"
                ]
            },
            "dfc88034bc1d460b8c2b3980029d68dafb100e4e": {
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueue.java": [
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.offer(final E e)",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.poll()"
                ],
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueueCq.java": [
                    "public E io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.poll()",
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueueCqColdFields<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "a1146c2fa3a1ca8de1c1d0378c71be04995b016a",
        "previous_commit": "1e638a69c264bdc65704139dbdcdbb7f7dc7a8a2",
        "date": 1547738973,
        "releases": {
            "previous": "a1146c2fa3a1ca8de1c1d0378c71be04995b016a",
            "next": "a1146c2fa3a1ca8de1c1d0378c71be04995b016a"
        },
        "commit_message": "Issue-228: Add unorderedSnapshot method to MpscArrayQueue and BaseMpscLinkedArrayQueue\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "a1146c2fa3a1ca8de1c1d0378c71be04995b016a": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "private long org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferAndOffset(E[] nextBuffer, long index)",
                    "private E[] org.jctools.queues.BaseMpscLinkedArrayQueue<E>.getNextBuffer(final E[] buffer, final long mask)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "private AtomicReferenceArray<E> org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.getNextBuffer(final AtomicReferenceArray<E> buffer, final long mask)",
                    "private int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferAndOffset(AtomicReferenceArray<E> nextBuffer, long index)"
                ]
            },
            "1e638a69c264bdc65704139dbdcdbb7f7dc7a8a2": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "private long org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferAndOffset(E[] nextBuffer, long index)",
                    "private E[] org.jctools.queues.BaseMpscLinkedArrayQueue<E>.getNextBuffer(final E[] buffer, final long mask)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "private AtomicReferenceArray<E> org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.getNextBuffer(final AtomicReferenceArray<E> buffer, final long mask)",
                    "private int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.newBufferAndOffset(AtomicReferenceArray<E> nextBuffer, long index)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "02156821949fe2476ddadb865c7b96e1ec0ebcaa",
        "previous_commit": "8541ae5106e6239f36e871c383b0afa5837dbdd3",
        "date": 1500904849,
        "releases": {
            "previous": "02156821949fe2476ddadb865c7b96e1ec0ebcaa",
            "next": "02156821949fe2476ddadb865c7b96e1ec0ebcaa"
        },
        "commit_message": "Reduce code duplication in SPSC linked array queues\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "02156821949fe2476ddadb865c7b96e1ec0ebcaa": {
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.BaseSpscLinkedArrayQueue<E>.offer(E e)",
                    "public int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscChunkedArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscChunkedArrayQueue<E>.offerColdPath(E[] buffer, long mask, long pIndex, long offset, E v, Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offerColdPath(E[] buffer, long mask, long pIndex, long offset, E v, Supplier<? extends E> s)"
                ]
            },
            "8541ae5106e6239f36e871c383b0afa5837dbdd3": {
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.BaseSpscLinkedArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscChunkedArrayQueue.java": [
                    "protected final boolean org.jctools.queues.SpscChunkedArrayQueue<E>.offerColdPath(E[] buffer, long mask, Supplier<? extends E> s, long pIndex, long offset)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "protected final boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offerColdPath(E[] buffer, long mask, Supplier<? extends E> s, long pIndex, long offset)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "44c436250b18754ed16d30712f9ccdf7ca71d881",
        "previous_commit": "1cb30f81e751f02009879568127cb2dd000f1fba",
        "date": 1404230788,
        "releases": {
            "previous": "44c436250b18754ed16d30712f9ccdf7ca71d881",
            "next": "44c436250b18754ed16d30712f9ccdf7ca71d881"
        },
        "commit_message": "javadoc",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "44c436250b18754ed16d30712f9ccdf7ca71d881": {
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "protected final void org.jctools.queues.ConcurrentCircularArrayQueue<E>.spElement(long offset, E e)",
                    "protected final void org.jctools.queues.ConcurrentCircularArrayQueue<E>.soElement(long offset, E e)",
                    "protected final E org.jctools.queues.ConcurrentCircularArrayQueue<E>.lpElement(long offset)",
                    "protected final E org.jctools.queues.ConcurrentCircularArrayQueue<E>.lvElement(long offset)"
                ]
            },
            "1cb30f81e751f02009879568127cb2dd000f1fba": {
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "protected final void org.jctools.queues.ConcurrentCircularArrayQueue<E>.spElement(long offset, E e)",
                    "protected final void org.jctools.queues.ConcurrentCircularArrayQueue<E>.soElement(long offset, E e)",
                    "protected final E org.jctools.queues.ConcurrentCircularArrayQueue<E>.lpElement(long offset)",
                    "protected final E org.jctools.queues.ConcurrentCircularArrayQueue<E>.lvElement(long offset)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "32603abda583b41d4e1c6676a4784c05f725a42c",
        "previous_commit": "a9610d18b50c1262f6630d68dff7122e0257a614",
        "date": 1577717390,
        "releases": {
            "previous": "32603abda583b41d4e1c6676a4784c05f725a42c",
            "next": "32603abda583b41d4e1c6676a4784c05f725a42c"
        },
        "commit_message": "Fix broken interaction with moveToNextConsumerChunk\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "32603abda583b41d4e1c6676a4784c05f725a42c": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "private E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.linkNextConsumerChunkAndPoll( MpmcUnboundedXaddChunk<E> cChunk, MpmcUnboundedXaddChunk<E> next, long expectedChunkIndex)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPoll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.drain(Consumer<E> c, int limit)"
                ]
            },
            "a9610d18b50c1262f6630d68dff7122e0257a614": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "private E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.linkNextConsumerChunkAndPoll( MpmcUnboundedXaddChunk<E> cChunk, MpmcUnboundedXaddChunk<E> next, long expectedChunkIndex)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPoll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPoll()",
                    "public int org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.drain(Consumer<E> c, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "15979144e06a5a812e72d010f854f078d1302304",
        "previous_commit": "1e638a69c264bdc65704139dbdcdbb7f7dc7a8a2",
        "date": 1547409982,
        "releases": {
            "previous": "15979144e06a5a812e72d010f854f078d1302304",
            "next": "15979144e06a5a812e72d010f854f078d1302304"
        },
        "commit_message": "Improved ParkTakeStrategy\n\nIt includes 2 improvements for park take strategies:\n- single-consumer: uses field updater to avoid AtomicReference instance\n- multi-consumer: uses intrinsic locks to avoid garbage on contention\nand avoided locking while checking waiting threads\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "15979144e06a5a812e72d010f854f078d1302304": {
                "jctools-experimental/src/main/java/org/jctools/queues/blocking/McParkTakeStrategy.java": [
                    "public void org.jctools.queues.blocking.McParkTakeStrategy<E>.signal()",
                    "public E org.jctools.queues.blocking.McParkTakeStrategy<E>.waitPoll(Queue<E> q)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/blocking/ScParkTakeStrategy.java": [
                    "public E org.jctools.queues.blocking.ScParkTakeStrategy<E>.waitPoll(Queue<E> q)",
                    "public void org.jctools.queues.blocking.ScParkTakeStrategy<E>.signal()"
                ]
            },
            "1e638a69c264bdc65704139dbdcdbb7f7dc7a8a2": {
                "jctools-experimental/src/main/java/org/jctools/queues/blocking/McParkTakeStrategy.java": [
                    "public void org.jctools.queues.blocking.McParkTakeStrategy<E>.signal()",
                    "public E org.jctools.queues.blocking.McParkTakeStrategy<E>.waitPoll(Queue<E> q)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/blocking/ScParkTakeStrategy.java": [
                    "public E org.jctools.queues.blocking.ScParkTakeStrategy<E>.waitPoll(Queue<E> q)",
                    "public void org.jctools.queues.blocking.ScParkTakeStrategy<E>.signal()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "85024d8827f72111ed5c72058b4dd45413a80eb9",
        "previous_commit": "138657a669e68ed19ffc9d4448bee6a4033852cd",
        "date": 1480035856,
        "releases": {
            "previous": "85024d8827f72111ed5c72058b4dd45413a80eb9",
            "next": "85024d8827f72111ed5c72058b4dd45413a80eb9"
        },
        "commit_message": "Added WaitStrategy in\n\nFixed bug in findExisting where it would never find the class due to using\nthe internal type name rather than the dotted class name\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "85024d8827f72111ed5c72058b4dd45413a80eb9": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementConstructor(ClassVisitor classVisitor)",
                    "private static Class<?> org.jctools.channels.proxy.ProxyChannelFactory.findExisting(String generatedName, Class<?> iFace)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementUserMethod(Method method, ClassVisitor classVisitor, int type)",
                    "public static <E> ProxyChannel<E> org.jctools.channels.proxy.ProxyChannelFactory.createSpscProxy(int capacity, Class<E> iFace, WaitStrategy waitStrategy)"
                ]
            },
            "138657a669e68ed19ffc9d4448bee6a4033852cd": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "static <E> ProxyChannel<E> org.jctools.channels.proxy.ProxyChannelFactory.createSpscProxy(int capacity, Class<E> iFace)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementUserMethod(Method method, ClassVisitor classVisitor, int type)",
                    "private static Class<?> org.jctools.channels.proxy.ProxyChannelFactory.findExisting(String generatedName, Class<?> iFace)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementConstructor(ClassVisitor classVisitor)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "60ba022d6830b483fdb7e79f54af2e51a8b918f2",
        "previous_commit": "13175e5e0af33c6625cf94d47b821c3648ac9e52",
        "date": 1502207030,
        "releases": {
            "previous": "60ba022d6830b483fdb7e79f54af2e51a8b918f2",
            "next": "60ba022d6830b483fdb7e79f54af2e51a8b918f2"
        },
        "commit_message": "Replaced atomics with field updaters in MpmcAtomicArrayQueue\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "60ba022d6830b483fdb7e79f54af2e51a8b918f2": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public final long org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.lvProducerIndex()",
                    "protected final boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.casConsumerIndex(long expect, long newValue)",
                    "public final long org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.lvConsumerIndex()",
                    "protected final boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.casProducerIndex(long expect, long newValue)"
                ]
            },
            "13175e5e0af33c6625cf94d47b821c3648ac9e52": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public final long org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.lvProducerIndex()",
                    "protected final boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.casConsumerIndex(long expect, long newValue)",
                    "public final long org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.lvConsumerIndex()",
                    "protected final boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.casProducerIndex(long expect, long newValue)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d8d9a4c07fcccce1c8be846d67237851d6bfa777",
        "previous_commit": "4fdccbd7b18aeabaf783247d214c971a5262dd4a",
        "date": 1419204114,
        "releases": {
            "previous": "d8d9a4c07fcccce1c8be846d67237851d6bfa777",
            "next": "d8d9a4c07fcccce1c8be846d67237851d6bfa777"
        },
        "commit_message": "make templates work\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d8d9a4c07fcccce1c8be846d67237851d6bfa777": {
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/ClassViewModel.java": [
                    "public List<Variable> org.jctools.channels.mapping.ClassViewModel.fields()",
                    "public List<Variable> org.jctools.channels.mapping.ClassViewModel.constructorParams()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannel.java": [
                    "private SpscChannelProducer<E> org.jctools.channels.spsc.SpscChannel<E>.newProducer(final Class<E> type, final Object... args)",
                    "private SpscChannelConsumer<E> org.jctools.channels.spsc.SpscChannel<E>.newConsumer(Object... args)"
                ]
            },
            "4fdccbd7b18aeabaf783247d214c971a5262dd4a": {
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/ClassViewModel.java": [
                    "public List<Variable> org.jctools.channels.mapping.ClassViewModel.fields()",
                    "public List<Variable> org.jctools.channels.mapping.ClassViewModel.constructorParams()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannel.java": [
                    "private SpscChannelProducer<E> org.jctools.channels.spsc.SpscChannel<E>.newProducer(final Class<E> type, final Object... args)",
                    "private SpscChannelConsumer<E> org.jctools.channels.spsc.SpscChannel<E>.newConsumer(Object... args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "40bfd7dc94f30cca3d0abad0f4e88d17438e9a0f",
        "previous_commit": "f921e1ca461b63e0b3c39f5d2d63f9010c70d22d",
        "date": 1457618834,
        "releases": {
            "previous": "40bfd7dc94f30cca3d0abad0f4e88d17438e9a0f",
            "next": "40bfd7dc94f30cca3d0abad0f4e88d17438e9a0f"
        },
        "commit_message": "Fix GC 'nepotism' issue where promoted nodes can prevent young nodes GC.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "40bfd7dc94f30cca3d0abad0f4e88d17438e9a0f": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "public final int org.jctools.queues.BaseLinkedQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public final E org.jctools.queues.MpscLinkedQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public E org.jctools.queues.SpscLinkedQueue<E>.peek()",
                    "public E org.jctools.queues.SpscLinkedQueue<E>.poll()"
                ]
            },
            "f921e1ca461b63e0b3c39f5d2d63f9010c70d22d": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "public final int org.jctools.queues.BaseLinkedQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public final E org.jctools.queues.MpscLinkedQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public E org.jctools.queues.SpscLinkedQueue<E>.peek()",
                    "public E org.jctools.queues.SpscLinkedQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "4f2d408e15838f3d7bcc1bc9c008a111f954ec2b",
        "previous_commit": "de333f956302393ecd1bb978ec5ee81e26c49034",
        "date": 1385627986,
        "releases": {
            "previous": "4f2d408e15838f3d7bcc1bc9c008a111f954ec2b",
            "next": "4f2d408e15838f3d7bcc1bc9c008a111f954ec2b"
        },
        "commit_message": "Throw in MPSC impls, but not integrated to factory.\nAdded queue sanity check.\nSome maven cleanup.\n",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "4f2d408e15838f3d7bcc1bc9c008a111f954ec2b": {
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatch.java": [
                    "public E io.jaq.spsc.FFBufferWithOfferBatch<E>.peek()",
                    "public boolean io.jaq.spsc.FFBufferWithOfferBatch<E>.contains(final Object o)",
                    "public boolean io.jaq.spsc.FFBufferWithOfferBatch<E>.isEmpty()",
                    "public int io.jaq.spsc.FFBufferWithOfferBatch<E>.size()"
                ]
            },
            "de333f956302393ecd1bb978ec5ee81e26c49034": {
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatch.java": [
                    "public E io.jaq.spsc.FFBufferWithOfferBatch<E>.peek()",
                    "public boolean io.jaq.spsc.FFBufferWithOfferBatch<E>.contains(final Object o)",
                    "public boolean io.jaq.spsc.FFBufferWithOfferBatch<E>.isEmpty()",
                    "public int io.jaq.spsc.FFBufferWithOfferBatch<E>.size()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "cb19e3d7721c3e788566ebfa1a9388554b11160c",
        "previous_commit": "410a03b8be403dde0cfe7da53b16d215f7bdff95",
        "date": 1403206614,
        "releases": {
            "previous": "cb19e3d7721c3e788566ebfa1a9388554b11160c",
            "next": "cb19e3d7721c3e788566ebfa1a9388554b11160c"
        },
        "commit_message": "Better docs, cleaner code.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "cb19e3d7721c3e788566ebfa1a9388554b11160c": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public E org.jctools.queues.MpscLinkedQueue<E>.poll()",
                    "public E org.jctools.queues.MpscLinkedQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public E org.jctools.queues.SpscLinkedQueue<E>.peek()",
                    "public E org.jctools.queues.SpscLinkedQueue<E>.poll()"
                ]
            },
            "410a03b8be403dde0cfe7da53b16d215f7bdff95": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public E org.jctools.queues.MpscLinkedQueue<E>.poll()",
                    "public E org.jctools.queues.MpscLinkedQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public E org.jctools.queues.SpscLinkedQueue<E>.peek()",
                    "public E org.jctools.queues.SpscLinkedQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "3322e9fd6488da35db4f39eae4af4a0cb17db4b5",
        "previous_commit": "671c0a8163ed2a2126ce0be63aa48f067e6486cc",
        "date": 1572989282,
        "releases": {
            "previous": "3322e9fd6488da35db4f39eae4af4a0cb17db4b5",
            "next": "3322e9fd6488da35db4f39eae4af4a0cb17db4b5"
        },
        "commit_message": "Save producerIndex load while polling a pooled chunk on mpmc xadd q\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "3322e9fd6488da35db4f39eae4af4a0cb17db4b5": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "private E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.rotateConsumerBuffer(AtomicChunk<E> consumerBuffer, AtomicChunk<E> next, int consumerOffset, long expectedChunkIndex)",
                    "private AtomicChunk<E> org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.appendNextChunks(AtomicChunk<E> producerBuffer, long chunkIndex, int chunkSize, long chunks)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.peek()"
                ]
            },
            "671c0a8163ed2a2126ce0be63aa48f067e6486cc": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "private E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.rotateConsumerBuffer(AtomicChunk<E> consumerBuffer, AtomicChunk<E> next, int consumerOffset, long expectedChunkIndex)",
                    "private AtomicChunk<E> org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.appendNextChunks(AtomicChunk<E> producerBuffer, long chunkIndex, int chunkSize, long chunks)",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "fbeabd5eb395778f3ae35f34e06d5fae7049c811",
        "previous_commit": "3ab9105d3225442f1747cdecd860c8e78361a11c",
        "date": 1502203177,
        "releases": {
            "previous": "fbeabd5eb395778f3ae35f34e06d5fae7049c811",
            "next": "fbeabd5eb395778f3ae35f34e06d5fae7049c811"
        },
        "commit_message": "Refactored MpscAtomicArrayQueue to be both inline with the\nMpscArrayQueue and to port over work started in PR #90\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "fbeabd5eb395778f3ae35f34e06d5fae7049c811": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public final int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.weakOffer(final E e)",
                    "public boolean org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.peek()",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.poll()"
                ]
            },
            "3ab9105d3225442f1747cdecd860c8e78361a11c": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public final int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.weakOffer(final E e)",
                    "public boolean org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.peek()",
                    "public E org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "784d66dd7988629ff5cfe43a8ca6768ab0e81def",
        "previous_commit": "78caa0c79782dd232fc5b6bdd365f87618793667",
        "date": 1419528292,
        "releases": {
            "previous": "784d66dd7988629ff5cfe43a8ca6768ab0e81def",
            "next": "784d66dd7988629ff5cfe43a8ca6768ab0e81def"
        },
        "commit_message": "removal of capacity field",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "784d66dd7988629ff5cfe43a8ca6768ab0e81def": {
                "jctools-experimental/src/main/java/org/jctools/queues/alt/MpmcArrayConcurrentQueue.java": [
                    "public int org.jctools.queues.alt.MpmcArrayConcurrentQueue<E>.capacity()",
                    "public E org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.poll()"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/alt/SpscArrayConcurrentQueue.java": [
                    "public boolean org.jctools.queues.alt.Producer<E>.offer(final E e)",
                    "public int org.jctools.queues.alt.SpscArrayConcurrentQueue<E>.capacity()"
                ]
            },
            "78caa0c79782dd232fc5b6bdd365f87618793667": {
                "jctools-experimental/src/main/java/org/jctools/queues/alt/MpmcArrayConcurrentQueue.java": [
                    "public int org.jctools.queues.alt.MpmcArrayConcurrentQueue<E>.capacity()",
                    "public E org.jctools.queues.alt.MpmcArrayConcurrentQueueColdFields<E>.poll()"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/alt/SpscArrayConcurrentQueue.java": [
                    "public boolean org.jctools.queues.alt.Producer<E>.offer(final E e)",
                    "public int org.jctools.queues.alt.SpscArrayConcurrentQueue<E>.capacity()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "36c352b987e678da251d5fda6ed2038ab377dd27",
        "previous_commit": "2b35474e598af6bd1195d6519b667fee10d7394c",
        "date": 1577690722,
        "releases": {
            "previous": "36c352b987e678da251d5fda6ed2038ab377dd27",
            "next": "36c352b987e678da251d5fda6ed2038ab377dd27"
        },
        "commit_message": "Add license\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "36c352b987e678da251d5fda6ed2038ab377dd27": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddChunk.java": [
                    "void org.jctools.queues.MpmcUnboundedXaddChunk<E>.soSequence(int index, long e)",
                    "long org.jctools.queues.MpmcUnboundedXaddChunk<E>.lvSequence(int index)",
                    "void org.jctools.queues.MpmcUnboundedXaddChunk<E>.soElement(int index, E e)",
                    "E org.jctools.queues.MpmcUnboundedXaddChunk<E>.lvElement(int index)"
                ]
            },
            "2b35474e598af6bd1195d6519b667fee10d7394c": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddChunk.java": [
                    "void org.jctools.queues.MpmcUnboundedXaddChunk<E>.soSequence(int index, long e)",
                    "long org.jctools.queues.MpmcUnboundedXaddChunk<E>.lvSequence(int index)",
                    "void org.jctools.queues.MpmcUnboundedXaddChunk<E>.soElement(int index, E e)",
                    "E org.jctools.queues.MpmcUnboundedXaddChunk<E>.lvElement(int index)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "ea6ac4c4b7ab05fd7839edc9d8100e2412b0718c",
        "previous_commit": "7f78a25f40740df12def944faa67b318e6f5e8f2",
        "date": 1429283607,
        "releases": {
            "previous": "ea6ac4c4b7ab05fd7839edc9d8100e2412b0718c",
            "next": "ea6ac4c4b7ab05fd7839edc9d8100e2412b0718c"
        },
        "commit_message": "Add MpscOffheapBuffer.\nChange acq/rel semantics slightly. Acq. increments the counter, so MUST\nbe paired with a release.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "ea6ac4c4b7ab05fd7839edc9d8100e2412b0718c": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "protected final long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeAcquire()",
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readRelease(long offset)",
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeRelease(long offset)",
                    "protected final long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readAcquire()"
                ]
            },
            "7f78a25f40740df12def944faa67b318e6f5e8f2": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "protected final long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeAcquire()",
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readRelease(long offset)",
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeRelease(long offset)",
                    "protected final long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readAcquire()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "618dc8b99b4c5eb645ac8ec764f1f30c88c66951",
        "previous_commit": "d8e0e1c597d308f4bbc41cdd1d8682c7633da751",
        "date": 1576864059,
        "releases": {
            "previous": "618dc8b99b4c5eb645ac8ec764f1f30c88c66951",
            "next": "618dc8b99b4c5eb645ac8ec764f1f30c88c66951"
        },
        "commit_message": "Iterators implementations should not rely on default methods\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "618dc8b99b4c5eb645ac8ec764f1f30c88c66951": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "private void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.setBuffer(AtomicReferenceArray<E> buffer)",
                    "public Iterator<E> org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.iterator()",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.getNext()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.next()"
                ]
            },
            "d8e0e1c597d308f4bbc41cdd1d8682c7633da751": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "private void org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.setBuffer(AtomicReferenceArray<E> buffer)",
                    "public Iterator<E> org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.iterator()",
                    "private E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.getNext()",
                    "public E org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.next()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "c50018c867fe763e892f0a6d79507e9291d87d2f",
        "previous_commit": "c1d55e7810b2fccec0312f3b9b6cdfd6de897e1d",
        "date": 1403813425,
        "releases": {
            "previous": "c50018c867fe763e892f0a6d79507e9291d87d2f",
            "next": "c50018c867fe763e892f0a6d79507e9291d87d2f"
        },
        "commit_message": "Add javadoc.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "c50018c867fe763e892f0a6d79507e9291d87d2f": {
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public int org.jctools.queues.SpscArrayQueue<E>.size()",
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()",
                    "public E org.jctools.queues.SpscArrayQueue<E>.peek()"
                ]
            },
            "c1d55e7810b2fccec0312f3b9b6cdfd6de897e1d": {
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public int org.jctools.queues.SpscArrayQueue<E>.size()",
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()",
                    "public E org.jctools.queues.SpscArrayQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "a1afb8cffdd82f488d219a265954e638bb698eff",
        "previous_commit": "7c846f1feaf41268bfe192cfe0ef56874a21b90e",
        "date": 1459598074,
        "releases": {
            "previous": "a1afb8cffdd82f488d219a265954e638bb698eff",
            "next": "a1afb8cffdd82f488d219a265954e638bb698eff"
        },
        "commit_message": "Refactor base class to simplify element offset arithmetics.\n\nAlso add post fields pad",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "a1afb8cffdd82f488d219a265954e638bb698eff": {
                "jctools-experimental/src/main/java/org/jctools/counters/FixedSizeStripedLongCounter.java": [
                    "private int org.jctools.counters.FixedSizeStripedLongCounter.index()",
                    "public void org.jctools.counters.FixedSizeStripedLongCounter.inc(long delta)",
                    "public long org.jctools.counters.FixedSizeStripedLongCounter.get()",
                    "public long org.jctools.counters.FixedSizeStripedLongCounter.getAndReset()"
                ]
            },
            "7c846f1feaf41268bfe192cfe0ef56874a21b90e": {
                "jctools-experimental/src/main/java/org/jctools/counters/FixedSizeStripedLongCounter.java": [
                    "private int org.jctools.counters.FixedSizeStripedLongCounter.index()",
                    "public void org.jctools.counters.FixedSizeStripedLongCounter.inc(long delta)",
                    "public long org.jctools.counters.FixedSizeStripedLongCounter.get()",
                    "public long org.jctools.counters.FixedSizeStripedLongCounter.getAndReset()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "cc829df78ccf73055f945725d4980f6f2a615b80",
        "previous_commit": "10bdea2b2a18c7cc2d407cdeac7b9e9e5bd4f3b5",
        "date": 1423246872,
        "releases": {
            "previous": "cc829df78ccf73055f945725d4980f6f2a615b80",
            "next": "cc829df78ccf73055f945725d4980f6f2a615b80"
        },
        "commit_message": "Formatting and clarity",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "cc829df78ccf73055f945725d4980f6f2a615b80": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "protected final long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeAcquire()",
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readRelease(long offset)",
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeRelease(long offset)",
                    "protected final long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readAcquire()"
                ]
            },
            "10bdea2b2a18c7cc2d407cdeac7b9e9e5bd4f3b5": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "protected final long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeAcquire()",
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readRelease(long offset)",
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeRelease(long offset)",
                    "protected final long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readAcquire()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "146ad909de46ddc035e993dd4eadc4f4a6aea703",
        "previous_commit": "03dfd5dbadbc488062514e1287786a6db715b827",
        "date": 1440192850,
        "releases": {
            "previous": "146ad909de46ddc035e993dd4eadc4f4a6aea703",
            "next": "146ad909de46ddc035e993dd4eadc4f4a6aea703"
        },
        "commit_message": "Not stable",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "146ad909de46ddc035e993dd4eadc4f4a6aea703": {
                "jctools-experimental/src/main/java/org/jctools/queues/MpscOnSpscQueue.java": [
                    "public int org.jctools.queues.MpscOnSpscQueue<E>.size()",
                    "public E org.jctools.queues.MpscOnSpscQueue<E>.poll()",
                    "protected Queue<E> org.jctools.queues.MpscOnSpscFields<E>.initialValue()",
                    "public boolean org.jctools.queues.MpscOnSpscQueue<E>.isEmpty()"
                ]
            },
            "03dfd5dbadbc488062514e1287786a6db715b827": {
                "jctools-experimental/src/main/java/org/jctools/queues/MpscOnSpscQueue.java": [
                    "public int org.jctools.queues.MpscOnSpscQueue<E>.size()",
                    "public E org.jctools.queues.MpscOnSpscQueue<E>.poll()",
                    "protected Queue<E> org.jctools.queues.MpscOnSpscFields<E>.initialValue()",
                    "public boolean org.jctools.queues.MpscOnSpscQueue<E>.isEmpty()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b80dd312a90c9234923b2f9baec03b3f20b3aec9",
        "previous_commit": "aeeffff7815c97fd5d57dfdaaea1a6eaba2e15dd",
        "date": 1560409459,
        "releases": {
            "previous": "b80dd312a90c9234923b2f9baec03b3f20b3aec9",
            "next": "b80dd312a90c9234923b2f9baec03b3f20b3aec9"
        },
        "commit_message": "Added configurable number of pooled & preallocated chunks\nfor MpscProgressiveChunkedQueue\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "b80dd312a90c9234923b2f9baec03b3f20b3aec9": {
                "jctools-core/src/main/java/org/jctools/queues/MpscProgressiveChunkedQueue.java": [
                    "private AtomicChunk<E> org.jctools.queues.MpscProgressiveChunkedQueue<E>.relaxedPollNextBuffer(AtomicChunk<E> consumerBuffer)",
                    "private AtomicChunk<E> org.jctools.queues.MpscProgressiveChunkedQueue<E>.appendNextChunk(AtomicChunk<E> producerBuffer, long chunkIndex, int chunkSize)",
                    "private AtomicChunk<E> org.jctools.queues.MpscProgressiveChunkedQueue<E>.pollNextBuffer(AtomicChunk<E> consumerBuffer, long consumerIndex)"
                ]
            },
            "aeeffff7815c97fd5d57dfdaaea1a6eaba2e15dd": {
                "jctools-core/src/main/java/org/jctools/queues/MpscProgressiveChunkedQueue.java": [
                    "private AtomicChunk<E> org.jctools.queues.MpscProgressiveChunkedQueue<E>.relaxedPollNextBuffer(AtomicChunk<E> consumerBuffer)",
                    "private AtomicChunk<E> org.jctools.queues.MpscProgressiveChunkedQueue<E>.appendNextChunk(AtomicChunk<E> producerBuffer, long chunkIndex, int chunkSize)",
                    "private AtomicChunk<E> org.jctools.queues.MpscProgressiveChunkedQueue<E>.pollNextBuffer(AtomicChunk<E> consumerBuffer, long consumerIndex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "3472958a158560b9bb5016939730352c5a5d3b83",
        "previous_commit": "17956e94ccb588fb899cc9440567de976a91dd1b",
        "date": 1401306012,
        "releases": {
            "previous": "3472958a158560b9bb5016939730352c5a5d3b83",
            "next": "3472958a158560b9bb5016939730352c5a5d3b83"
        },
        "commit_message": "Some cleanup, improving compound queue",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "3472958a158560b9bb5016939730352c5a5d3b83": {
                "jaq-inabox/src/main/java/io/jaq/mpsc/MpscCompoundQueue.java": [
                    "public int io.jaq.mpsc.MpscCompoundQueue<E>.capacity()",
                    "public E io.jaq.mpsc.MpscCompoundQueue<E>.poll()",
                    "public boolean io.jaq.mpsc.MpscCompoundQueue<E>.offer(final E e)"
                ]
            },
            "17956e94ccb588fb899cc9440567de976a91dd1b": {
                "jaq-inabox/src/main/java/io/jaq/mpsc/MpscCompoundQueue.java": [
                    "public int io.jaq.mpsc.MpscCompoundQueue<E>.capacity()",
                    "public E io.jaq.mpsc.MpscCompoundQueue<E>.poll()",
                    "public boolean io.jaq.mpsc.MpscCompoundQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "6d4cd1e811f22b3a05fdac206cc54cf8616042e8",
        "previous_commit": "5033e7f4df1e064521aa0c067e201c73d965e89b",
        "date": 1551895921,
        "releases": {
            "previous": "6d4cd1e811f22b3a05fdac206cc54cf8616042e8",
            "next": "6d4cd1e811f22b3a05fdac206cc54cf8616042e8"
        },
        "commit_message": "Polish -- DRY refactor of the two generators via a generator base class.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "6d4cd1e811f22b3a05fdac206cc54cf8616042e8": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.main(String[] args)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.main(String[] args)"
                ]
            },
            "5033e7f4df1e064521aa0c067e201c73d965e89b": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.main(String[] args)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "93fd1e8efd10708093fbe4d92391949114350167",
        "previous_commit": "901418b9134d78cdeba8e4cf864a4b7384a7e183",
        "date": 1423152770,
        "releases": {
            "previous": "93fd1e8efd10708093fbe4d92391949114350167",
            "next": "93fd1e8efd10708093fbe4d92391949114350167"
        },
        "commit_message": "Add queue capacity test\nFix Growable SPSC size bug and further issues found while testing\nFail clearly when attempting to under size MPMC and compound MPSC",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "93fd1e8efd10708093fbe4d92391949114350167": {
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public E org.jctools.queues.MpscCompoundQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "private boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerWhileWaitingForConsumerOnLastBuffer(final E[] buffer, final E e, final long index, final long mask, final long offset, final int lookAheadStep)",
                    "public final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offer(final E e)"
                ]
            },
            "901418b9134d78cdeba8e4cf864a4b7384a7e183": {
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public E org.jctools.queues.MpscCompoundQueue<E>.peek()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "private boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerWhileWaitingForConsumerOnLastBuffer(final E[] buffer, final E e, final long index, final long mask, final long offset, final int lookAheadStep)",
                    "public final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "06c7cd366b35e931992259a294b2e8cd09294402",
        "previous_commit": "a6081182afe917651c71a948ab25139b7bd102ba",
        "date": 1465816861,
        "releases": {
            "previous": "06c7cd366b35e931992259a294b2e8cd09294402",
            "next": "06c7cd366b35e931992259a294b2e8cd09294402"
        },
        "commit_message": "Update index after element is visible in buffer (Fix #119)",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "06c7cd366b35e931992259a294b2e8cd09294402": {
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "protected final void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.writeToQueue(final E[] buffer, final E e, final long index, final long offset)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "protected boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath(final E[] buffer, final long mask, final E e, final long index, final long offset)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "private void org.jctools.queues.SpscUnboundedArrayQueue<E>.linkNewBuffer(final E[] oldBuffer, final long currIndex, final long offset, final E e, final long mask)"
                ]
            },
            "a6081182afe917651c71a948ab25139b7bd102ba": {
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "protected final void org.jctools.queues.BaseSpscLinkedArrayQueue<E>.writeToQueue(final E[] buffer, final E e, final long index, final long offset)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "protected boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath(final E[] buffer, final long mask, final E e, final long index, final long offset)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "private void org.jctools.queues.SpscUnboundedArrayQueue<E>.linkNewBuffer(final E[] oldBuffer, final long currIndex, final long offset, final E e, final long mask)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "0cd55b1863b845cbbb21ce2a6cf3dacc40a3f15d",
        "previous_commit": "11176297bb2a1eaf51661b3abcd8da858ba5a66c",
        "date": 1468782321,
        "releases": {
            "previous": "0cd55b1863b845cbbb21ce2a6cf3dacc40a3f15d",
            "next": "0cd55b1863b845cbbb21ce2a6cf3dacc40a3f15d"
        },
        "commit_message": "Simplified linked array implementations, added a chunked variant",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "0cd55b1863b845cbbb21ce2a6cf3dacc40a3f15d": {
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.BaseSpscLinkedArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "protected boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offerColdPath(final E[] buffer, final long mask, final E e, final long index, final long offset)",
                    "private void org.jctools.queues.SpscUnboundedArrayQueue<E>.linkNewBuffer(final E[] oldBuffer, final long currIndex, final long offset, final E e, final long mask)"
                ]
            },
            "11176297bb2a1eaf51661b3abcd8da858ba5a66c": {
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.BaseSpscLinkedArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "protected boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offerColdPath(final E[] buffer, final long mask, final E e, final long index, final long offset)",
                    "private void org.jctools.queues.SpscUnboundedArrayQueue<E>.linkNewBuffer(final E[] oldBuffer, final long currIndex, final long offset, final E e, final long mask)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "5279f373a120d3d504d4ea5fad8e1547132b5e96",
        "previous_commit": "72ad973654f6e0f0029e430bcf0572dd71d94588",
        "date": 1503414209,
        "releases": {
            "previous": "5279f373a120d3d504d4ea5fad8e1547132b5e96",
            "next": "5279f373a120d3d504d4ea5fad8e1547132b5e96"
        },
        "commit_message": "Fixed bug whereby with multiproducers (or in the future, MC) you could\nread a reference before it was written. This is due to writeAcquire()\nadvancing the producerIndex (or readAcquire advancing the\nconsumerIndex in the MC) case.\n\nWhen the producerReferenceArrayIndex() (or consumerReferenceArrayIndex)\nmethod is called it reads the current producerIndex. Clearly sometimes\nthis will have changed between writeAcquire and\nproducerReferenceArrayIndex calls. Thus P0 who won the writeAcquire,\ncould end up skipping over it's ref array slot and competing on the\nsame slot as P1.\n\nThe result is nulls in some slots and incorrect values in others.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "5279f373a120d3d504d4ea5fad8e1547132b5e96": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementUserMethod(Method method, ClassVisitor classVisitor, int type, String generatedName, Class<? extends ProxyChannelRingBuffer> backendType)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementUserMethods(ClassWriter classWriter, List<Method> relevantMethods, String generatedName, Class<?extends ProxyChannelRingBuffer> backendType)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProcess(ClassVisitor classVisitor, Class<? extends ProxyChannelRingBuffer> backendType, List<Method> methods, Class<?> iFace, String generatedName)"
                ]
            },
            "72ad973654f6e0f0029e430bcf0572dd71d94588": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementUserMethod(Method method, ClassVisitor classVisitor, int type, String generatedName, Class<? extends ProxyChannelRingBuffer> backendType)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementUserMethods(ClassWriter classWriter, List<Method> relevantMethods, String generatedName, Class<?extends ProxyChannelRingBuffer> backendType)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProcess(ClassVisitor classVisitor, Class<? extends ProxyChannelRingBuffer> backendType, List<Method> methods, Class<?> iFace, String generatedName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "fac2ec8dd57e793538002792d1aeeb6fa9f406cf",
        "previous_commit": "84beabc9cc5ed4e1e7b51afac13eb57c4db2e2fe",
        "date": 1388501973,
        "releases": {
            "previous": "fac2ec8dd57e793538002792d1aeeb6fa9f406cf",
            "next": "fac2ec8dd57e793538002792d1aeeb6fa9f406cf"
        },
        "commit_message": "Fully re-factored producer class.",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "fac2ec8dd57e793538002792d1aeeb6fa9f406cf": {
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatchCq.java": [
                    "public ConcurrentQueueConsumer<E> io.jaq.spsc.FFBufferWithOfferBatchCq<E>.consumer()",
                    "public int io.jaq.spsc.FFBufferWithOfferBatchCq<E>.size()",
                    "public ConcurrentQueueProducer<E> io.jaq.spsc.FFBufferWithOfferBatchCq<E>.producer()"
                ]
            },
            "84beabc9cc5ed4e1e7b51afac13eb57c4db2e2fe": {
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatchCq.java": [
                    "public ConcurrentQueueConsumer<E> io.jaq.spsc.FFBufferWithOfferBatchCq<E>.consumer()",
                    "public int io.jaq.spsc.FFBufferWithOfferBatchCq<E>.size()",
                    "public ConcurrentQueueProducer<E> io.jaq.spsc.FFBufferWithOfferBatchCq<E>.producer()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "e8bf97017862797adaf9548385eb6e1978599923",
        "previous_commit": "31e30dae1fe5246ecfea09515844157388daa036",
        "date": 1407255328,
        "releases": {
            "previous": "e8bf97017862797adaf9548385eb6e1978599923",
            "next": "e8bf97017862797adaf9548385eb6e1978599923"
        },
        "commit_message": "clarify capacity situation, fix #25\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "e8bf97017862797adaf9548385eb6e1978599923": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannel.java": [
                    "public ChannelConsumer org.jctools.channels.spsc.SpscChannel<E>.consumer(ChannelReceiver<E> receiver)",
                    "private void org.jctools.channels.spsc.SpscChannel<E>.checkSufficientCapacity()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannelProducer.java": [
                    "public final boolean org.jctools.channels.spsc.SpscChannelProducer<E>.commit()"
                ]
            },
            "31e30dae1fe5246ecfea09515844157388daa036": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannel.java": [
                    "public ChannelConsumer org.jctools.channels.spsc.SpscChannel<E>.consumer(ChannelReceiver<E> receiver)",
                    "private void org.jctools.channels.spsc.SpscChannel<E>.checkSufficientCapacity()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannelProducer.java": [
                    "public final boolean org.jctools.channels.spsc.SpscChannelProducer<E>.commit()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "40ff3810d87e2aff32b0a8a7728a7fbe901bc42e",
        "previous_commit": "7c6943c5766bf762df1decff4f62a3437423b274",
        "date": 1477244283,
        "releases": {
            "previous": "40ff3810d87e2aff32b0a8a7728a7fbe901bc42e",
            "next": "40ff3810d87e2aff32b0a8a7728a7fbe901bc42e"
        },
        "commit_message": "Minor touches or review",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "40ff3810d87e2aff32b0a8a7728a7fbe901bc42e": {
                "jctools-core/src/main/java/org/jctools/queues/SpscChunkedArrayQueue.java": [
                    "protected final boolean org.jctools.queues.SpscChunkedArrayQueue<E>.offerColdPath(E[] buffer, long mask, E e, long pIndex, long offset)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "protected final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath(final E[] buffer, final long mask, final E e, final long index, final long offset)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "protected boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offerColdPath(E[] buffer, long mask, E e, long pIndex, long offset)"
                ]
            },
            "7c6943c5766bf762df1decff4f62a3437423b274": {
                "jctools-core/src/main/java/org/jctools/queues/SpscChunkedArrayQueue.java": [
                    "protected final boolean org.jctools.queues.SpscChunkedArrayQueue<E>.offerColdPath(E[] buffer, long mask, E e, long pIndex, long offset)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "protected final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath(final E[] buffer, final long mask, final E e, final long index, final long offset)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "protected boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offerColdPath(E[] buffer, long mask, E e, long pIndex, long offset)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "f57d1e4261da9d08423cd3f257900b958492f06e",
        "previous_commit": "bc661eeddb6742bea85e473db535af54bc29bbab",
        "date": 1506370562,
        "releases": {
            "previous": "f57d1e4261da9d08423cd3f257900b958492f06e",
            "next": "f57d1e4261da9d08423cd3f257900b958492f06e"
        },
        "commit_message": "Clear some style warnings.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "f57d1e4261da9d08423cd3f257900b958492f06e": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.peek()",
                    "private long org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferAndOffset(E[] nextBuffer, long index)",
                    "public void org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill( Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ]
            },
            "bc661eeddb6742bea85e473db535af54bc29bbab": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.peek()",
                    "private long org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferAndOffset(E[] nextBuffer, long index)",
                    "public void org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill( Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "610ffc295154b07f824d4147bb09176c35fc3582",
        "previous_commit": "94ac31370e5889501806e5410b7814c4d6b1aebe",
        "date": 1465820138,
        "releases": {
            "previous": "610ffc295154b07f824d4147bb09176c35fc3582",
            "next": "610ffc295154b07f824d4147bb09176c35fc3582"
        },
        "commit_message": "Fix isEmpty/poll issue for atomics",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "610ffc295154b07f824d4147bb09176c35fc3582": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.offer(E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscUnboundedAtomicArrayQueue.java": [
                    "private boolean org.jctools.queues.atomic.SpscUnboundedAtomicArrayQueue<E>.writeToQueue(final AtomicReferenceArray<Object> buffer, final E e, final long index, final int offset)",
                    "private void org.jctools.queues.atomic.SpscUnboundedAtomicArrayQueue<E>.resize(final AtomicReferenceArray<Object> oldBuffer, final long currIndex, final int offset, final E e, final long mask)"
                ]
            },
            "94ac31370e5889501806e5410b7814c4d6b1aebe": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.offer(E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscUnboundedAtomicArrayQueue.java": [
                    "private boolean org.jctools.queues.atomic.SpscUnboundedAtomicArrayQueue<E>.writeToQueue(final AtomicReferenceArray<Object> buffer, final E e, final long index, final int offset)",
                    "private void org.jctools.queues.atomic.SpscUnboundedAtomicArrayQueue<E>.resize(final AtomicReferenceArray<Object> oldBuffer, final long currIndex, final int offset, final E e, final long mask)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "55f33dbe4d90e8893bf78a692470bd29804fb370",
        "previous_commit": "3e1afaa5059a7b86d8729c897c4e24ea3b650d55",
        "date": 1429263214,
        "releases": {
            "previous": "55f33dbe4d90e8893bf78a692470bd29804fb370",
            "next": "55f33dbe4d90e8893bf78a692470bd29804fb370"
        },
        "commit_message": "Make CACHE_LINE_SIZE configurable, derive BUFFER_PAD from\nCACHE_LINE_SIZE.\nFixes #38",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "55f33dbe4d90e8893bf78a692470bd29804fb370": {
                "jctools-experimental/src/main/java/org/jctools/queues/SpscOffHeapIntQueue.java": [
                    "public static int org.jctools.queues.SpscOffHeapIntQueue.getRequiredBufferSize(final int capacity)"
                ],
                "jctools-experimental/src/main/java/org/jctools/util/UnsafeDirectByteBuffer.java": [
                    "public static boolean org.jctools.util.UnsafeDirectByteBuffer.isPageAligned(long address)",
                    "public static boolean org.jctools.util.UnsafeDirectByteBuffer.isCacheAligned(long address)"
                ]
            },
            "3e1afaa5059a7b86d8729c897c4e24ea3b650d55": {
                "jctools-experimental/src/main/java/org/jctools/queues/SpscOffHeapIntQueue.java": [
                    "public static int org.jctools.queues.SpscOffHeapIntQueue.getRequiredBufferSize(final int capacity)"
                ],
                "jctools-experimental/src/main/java/org/jctools/util/UnsafeDirectByteBuffer.java": [
                    "public static boolean org.jctools.util.UnsafeDirectByteBuffer.isPageAligned(long address)",
                    "public static boolean org.jctools.util.UnsafeDirectByteBuffer.isCacheAligned(long address)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "822b69a919169609298cfb5d1f965332915200a5",
        "previous_commit": "5a8ffd69777f74e46a70a683465e19f7ca70abb0",
        "date": 1407253262,
        "releases": {
            "previous": "822b69a919169609298cfb5d1f965332915200a5",
            "next": "822b69a919169609298cfb5d1f965332915200a5"
        },
        "commit_message": "fix compile errors introduced by -source 1.6\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "822b69a919169609298cfb5d1f965332915200a5": {
                "jctools-core/src/main/java/org/jctools/queues/QueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.QueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/Mapper.java": [
                    "private <I> I org.jctools.channels.mapping.Mapper<S>.newFlyweight(Class<I> type, Customisation customisation, Object[] args)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/alt/ConcurrentQueueFactory.java": [
                    "public static <E> ConcurrentQueue<E> org.jctools.queues.alt.ConcurrentQueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            },
            "5a8ffd69777f74e46a70a683465e19f7ca70abb0": {
                "jctools-core/src/main/java/org/jctools/queues/QueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.QueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/Mapper.java": [
                    "private <I> I org.jctools.channels.mapping.Mapper<S>.newFlyweight(Class<I> type, Customisation customisation, Object[] args)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/alt/ConcurrentQueueFactory.java": [
                    "public static <E> ConcurrentQueue<E> org.jctools.queues.alt.ConcurrentQueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "4f6f37fc436896595a34072e8fc95f7583cbce24",
        "previous_commit": "aae85efcb0eee1f8c571ef4d2c9cc5f7f51e994f",
        "date": 1494064963,
        "releases": {
            "previous": "4f6f37fc436896595a34072e8fc95f7583cbce24",
            "next": "4f6f37fc436896595a34072e8fc95f7583cbce24"
        },
        "commit_message": "Implemented a consistent range handling approach\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "4f6f37fc436896595a34072e8fc95f7583cbce24": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "private void org.jctools.maps.NonBlockingHashMapLong<TypeV>.initialize( final int initial_sz )"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "private void org.jctools.queues.BaseMpscLinkedArrayQueue<E>.resize(long oldMask, E[] oldBuffer, long pIndex, final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "protected int org.jctools.queues.MpscGrowableArrayQueue<E>.getNextBufferSize(E[] buffer)"
                ]
            },
            "aae85efcb0eee1f8c571ef4d2c9cc5f7f51e994f": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "private void org.jctools.maps.NonBlockingHashMapLong<TypeV>.initialize( final int initial_sz )"
                ],
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "private void org.jctools.queues.BaseMpscLinkedArrayQueue<E>.resize(long oldMask, E[] oldBuffer, long pIndex, final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "protected int org.jctools.queues.MpscGrowableArrayQueue<E>.getNextBufferSize(E[] buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "1db8d2a56dbe66af5a637a09d6af6363775016d6",
        "previous_commit": "330b16178fea45223693936a52d686a8ae4585c8",
        "date": 1469194222,
        "releases": {
            "previous": "1db8d2a56dbe66af5a637a09d6af6363775016d6",
            "next": "1db8d2a56dbe66af5a637a09d6af6363775016d6"
        },
        "commit_message": "Fallout from size refactor",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "1db8d2a56dbe66af5a637a09d6af6363775016d6": {
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public E org.jctools.queues.FFBuffer<E>.poll()",
                    "public E org.jctools.queues.FFBuffer<E>.peek()",
                    "public boolean org.jctools.queues.FFBuffer<E>.offer(final E e)"
                ]
            },
            "330b16178fea45223693936a52d686a8ae4585c8": {
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public E org.jctools.queues.FFBuffer<E>.poll()",
                    "public E org.jctools.queues.FFBuffer<E>.peek()",
                    "public boolean org.jctools.queues.FFBuffer<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "de333f956302393ecd1bb978ec5ee81e26c49034",
        "previous_commit": "249364ec9961ac54760dce77a07b6d6a2922fda1",
        "date": 1385566854,
        "releases": {
            "previous": "de333f956302393ecd1bb978ec5ee81e26c49034",
            "next": "de333f956302393ecd1bb978ec5ee81e26c49034"
        },
        "commit_message": "More detail to interfaces, batch consume/produce added.",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "de333f956302393ecd1bb978ec5ee81e26c49034": {
                "jaq-inabox/src/main/java/io/jaq/QueueFactory.java": [
                    "public static <E> AQueue<E> io.jaq.QueueFactory.newQueue(QueueSpec qs)"
                ],
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatch.java": [
                    "public E io.jaq.spsc.FFBufferWithOfferBatch<E>.peek()",
                    "public void io.jaq.spsc.FFBufferWithOfferBatch<E>.clear()"
                ]
            },
            "249364ec9961ac54760dce77a07b6d6a2922fda1": {
                "jaq-inabox/src/main/java/io/jaq/QueueFactory.java": [
                    "public static <E> AQueue<E> io.jaq.QueueFactory.newQueue(QueueSpec qs)"
                ],
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatch.java": [
                    "public E io.jaq.spsc.FFBufferWithOfferBatch<E>.peek()",
                    "public void io.jaq.spsc.FFBufferWithOfferBatch<E>.clear()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "511665c89ce7c2729b0dcfeeb2183908e87e417f",
        "previous_commit": "65aeac768ad2ededc027414d395e5a5fa0ce7f01",
        "date": 1506352593,
        "releases": {
            "previous": "511665c89ce7c2729b0dcfeeb2183908e87e417f",
            "next": "511665c89ce7c2729b0dcfeeb2183908e87e417f"
        },
        "commit_message": "Fix a bug in MpscLinkedArray fill, exposed by increased concurrency in\ntest.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "511665c89ce7c2729b0dcfeeb2183908e87e417f": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "private int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.offerSlowPath(long mask, long pIndex, long producerLimit)",
                    "public boolean org.jctools.queues.BaseMpscLinkedArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ]
            },
            "65aeac768ad2ededc027414d395e5a5fa0ce7f01": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "private int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.offerSlowPath(long mask, long pIndex, long producerLimit)",
                    "public boolean org.jctools.queues.BaseMpscLinkedArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "9315ceb5d27c7323a7adaf02602c24d90c523ffc",
        "previous_commit": "7783fe20c754315121ddef2c23105a0b5db88373",
        "date": 1404401890,
        "releases": {
            "previous": "9315ceb5d27c7323a7adaf02602c24d90c523ffc",
            "next": "9315ceb5d27c7323a7adaf02602c24d90c523ffc"
        },
        "commit_message": "Make OFFER_BATCH_SIZE a field and determine by capacity and bound by\nMAX to give better ergonomics and allow smaller queues.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "9315ceb5d27c7323a7adaf02602c24d90c523ffc": {
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public int org.jctools.queues.SpscArrayQueue<E>.size()",
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()"
                ]
            },
            "7783fe20c754315121ddef2c23105a0b5db88373": {
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public int org.jctools.queues.SpscArrayQueue<E>.size()",
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "c048acc8169650fc624c2e9c94ffcce822c11c22",
        "previous_commit": "840a757322db3412574757e677aec9c9fb637d8e",
        "date": 1478620580,
        "releases": {
            "previous": "c048acc8169650fc624c2e9c94ffcce822c11c22",
            "next": "c048acc8169650fc624c2e9c94ffcce822c11c22"
        },
        "commit_message": "Fixing up size, prevent nepotism through dequed elements.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "c048acc8169650fc624c2e9c94ffcce822c11c22": {
                "jctools-experimental/src/main/java/org/jctools/queues/intrusive/MpscIntrusiveLinkedQueue.java": [
                    "public int org.jctools.queues.intrusive.MpscIntrusiveLinkedQueue.size()",
                    "public Node org.jctools.queues.intrusive.MpscIntrusiveLinkedQueue.poll()",
                    "public boolean org.jctools.queues.intrusive.MpscIntrusiveLinkedQueue.offer(Node node)"
                ]
            },
            "840a757322db3412574757e677aec9c9fb637d8e": {
                "jctools-experimental/src/main/java/org/jctools/queues/intrusive/MpscIntrusiveLinkedQueue.java": [
                    "public int org.jctools.queues.intrusive.MpscIntrusiveLinkedQueue.size()",
                    "public Node org.jctools.queues.intrusive.MpscIntrusiveLinkedQueue.poll()",
                    "public boolean org.jctools.queues.intrusive.MpscIntrusiveLinkedQueue.offer(Node node)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b64dfecff7fe721d6e6aa61ce2c2e49635f88cb3",
        "previous_commit": "98938479bacd27f4a23f2f3444a75b69a9055ac3",
        "date": 1614755154,
        "releases": {
            "previous": "b64dfecff7fe721d6e6aa61ce2c2e49635f88cb3",
            "next": "b64dfecff7fe721d6e6aa61ce2c2e49635f88cb3"
        },
        "commit_message": "Remove race: only the consumer writes to blocked.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "b64dfecff7fe721d6e6aa61ce2c2e49635f88cb3": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "private E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.parkUntilNext(E[] buffer, long cIndex, long offset, long timeoutNs)",
                    "private void org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.wakeupConsumer()",
                    "private boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.offerAndWakeup(E[] buffer, long mask, long pIndex, E e)"
                ]
            },
            "98938479bacd27f4a23f2f3444a75b69a9055ac3": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "private E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.parkUntilNext(E[] buffer, long cIndex, long offset, long timeoutNs)",
                    "private void org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.wakeupConsumer()",
                    "private boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.offerAndWakeup(E[] buffer, long mask, long pIndex, E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "13175e5e0af33c6625cf94d47b821c3648ac9e52",
        "previous_commit": "f537eda1ba8fb2a14ee1f8ec2e5e86cc0dc1623e",
        "date": 1502207030,
        "releases": {
            "previous": "13175e5e0af33c6625cf94d47b821c3648ac9e52",
            "next": "13175e5e0af33c6625cf94d47b821c3648ac9e52"
        },
        "commit_message": "Refactored methods to look like those in MpmcArrayQueue\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "13175e5e0af33c6625cf94d47b821c3648ac9e52": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.poll()"
                ]
            },
            "f537eda1ba8fb2a14ee1f8ec2e5e86cc0dc1623e": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.peek()",
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "891da941d0ad8236088fed18d8f83299f5c9bdcf",
        "previous_commit": "13d8ba9a5196b1a8dd867dc992a83edc05d868fb",
        "date": 1468826075,
        "releases": {
            "previous": "891da941d0ad8236088fed18d8f83299f5c9bdcf",
            "next": "891da941d0ad8236088fed18d8f83299f5c9bdcf"
        },
        "commit_message": "Fix issue in SWHS remove, resulting in hung builds\n\nImprove test to randomize ops for a set period rather than a count.\nRemove dead param.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "891da941d0ad8236088fed18d8f83299f5c9bdcf": {
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.remove(Object val)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.removeSlowPath(Object val, E[] buffer, long mask, int hash)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.compactAndRemove(final E[] buffer, final long mask, int removeHashIndex)"
                ]
            },
            "13d8ba9a5196b1a8dd867dc992a83edc05d868fb": {
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.removeSlowPath(Object val, E[] buffer, long mask, int hashCode, int hash)",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.remove(Object val)",
                    "private void org.jctools.sets.SingleWriterHashSet<E>.compactAndRemove(final E[] buffer, final long mask, int removeHashIndex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "8e90292a442406bd1f420e3b9eda3b017f29befd",
        "previous_commit": "f521002f5c4efe97c48ab80769379a065e94853c",
        "date": 1516540812,
        "releases": {
            "previous": "8e90292a442406bd1f420e3b9eda3b017f29befd",
            "next": "8e90292a442406bd1f420e3b9eda3b017f29befd"
        },
        "commit_message": "Clean up, naming and formatting\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "8e90292a442406bd1f420e3b9eda3b017f29befd": {
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public E org.jctools.queues.FFBuffer<E>.poll()",
                    "public boolean org.jctools.queues.FFBuffer<E>.offer(final E e)",
                    "public void org.jctools.queues.FFBuffer<E>.fill( Supplier<E> s, WaitStrategy wait, ExitCondition exit)"
                ]
            },
            "f521002f5c4efe97c48ab80769379a065e94853c": {
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public E org.jctools.queues.FFBuffer<E>.poll()",
                    "public void org.jctools.queues.FFBuffer<E>.fill(Supplier<E> s, WaitStrategy wait, ExitCondition exit)",
                    "public boolean org.jctools.queues.FFBuffer<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "48adfd10c2ba72d813608fb80d73b5dc53c698b6",
        "previous_commit": "a1146c2fa3a1ca8de1c1d0378c71be04995b016a",
        "date": 1547830689,
        "releases": {
            "previous": "48adfd10c2ba72d813608fb80d73b5dc53c698b6",
            "next": "48adfd10c2ba72d813608fb80d73b5dc53c698b6"
        },
        "commit_message": "Iterator for MpscArrayQueue and MpscUnboundedArrayQueue\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "48adfd10c2ba72d813608fb80d73b5dc53c698b6": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public Iterator<E> org.jctools.queues.BaseMpscLinkedArrayQueue<E>.iterator()",
                    "private long org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferAndOffset(E[] nextBuffer, long index)",
                    "private E[] org.jctools.queues.BaseMpscLinkedArrayQueue<E>.getNextBuffer(final E[] buffer, final long mask)"
                ]
            },
            "a1146c2fa3a1ca8de1c1d0378c71be04995b016a": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public final Iterator<E> org.jctools.queues.BaseMpscLinkedArrayQueue<E>.iterator()",
                    "private long org.jctools.queues.BaseMpscLinkedArrayQueue<E>.newBufferAndOffset(E[] nextBuffer, long index)",
                    "private E[] org.jctools.queues.BaseMpscLinkedArrayQueue<E>.getNextBuffer(final E[] buffer, final long mask)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d052716b4c9cdd248fe8a70ccb9900169f7e29ba",
        "previous_commit": "40bfd7dc94f30cca3d0abad0f4e88d17438e9a0f",
        "date": 1457620396,
        "releases": {
            "previous": "d052716b4c9cdd248fe8a70ccb9900169f7e29ba",
            "next": "d052716b4c9cdd248fe8a70ccb9900169f7e29ba"
        },
        "commit_message": "Fix GC 'nepotism' issue for atomic linked queues.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d052716b4c9cdd248fe8a70ccb9900169f7e29ba": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseLinkedAtomicQueue.java": [
                    "public final int org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public final E org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public E org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.poll()"
                ]
            },
            "40bfd7dc94f30cca3d0abad0f4e88d17438e9a0f": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseLinkedAtomicQueue.java": [
                    "public final int org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public final E org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscLinkedAtomicQueue.java": [
                    "public E org.jctools.queues.atomic.SpscLinkedAtomicQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "a65111b8ba607d1f0513899d18f18501fa59fa84",
        "previous_commit": "edb8c5124b9e910979f3a417ce5294186c62afda",
        "date": 1460964571,
        "releases": {
            "previous": "a65111b8ba607d1f0513899d18f18501fa59fa84",
            "next": "a65111b8ba607d1f0513899d18f18501fa59fa84"
        },
        "commit_message": "Refactor resize/slowOffer to eliminate code duplication\n\nAlso, correct producerLimit spelling.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "a65111b8ba607d1f0513899d18f18501fa59fa84": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "private long org.jctools.queues.MpscChunkedArrayQueue<E>.lvProducerLimit()",
                    "public boolean org.jctools.queues.MpscChunkedArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.MpscChunkedArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ]
            },
            "edb8c5124b9e910979f3a417ce5294186c62afda": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "private long org.jctools.queues.MpscChunkedArrayQueue<E>.lvProducerLimit()",
                    "public boolean org.jctools.queues.MpscChunkedArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.MpscChunkedArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "705b70960037b045a1534fdaaf71c964992215a4",
        "previous_commit": "4c7c9142f0a4fa93e0a6db6cb846509707d6aa52",
        "date": 1502981051,
        "releases": {
            "previous": "705b70960037b045a1534fdaaf71c964992215a4",
            "next": "705b70960037b045a1534fdaaf71c964992215a4"
        },
        "commit_message": "Split JvmInfo into unsafe and portable components.\n\nMany classes access how many CPUs on a system which sadly also results in a call to unsafe which is not suitable for Android users.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "705b70960037b045a1534fdaaf71c964992215a4": {
                "jctools-experimental/src/main/java/org/jctools/queues/SpscOffHeapIntQueue.java": [
                    "public static int org.jctools.queues.SpscOffHeapIntQueue.getRequiredBufferSize(final int capacity)"
                ],
                "jctools-experimental/src/main/java/org/jctools/util/UnsafeDirectByteBuffer.java": [
                    "public static boolean org.jctools.util.UnsafeDirectByteBuffer.isPageAligned(long address)",
                    "public static boolean org.jctools.util.UnsafeDirectByteBuffer.isCacheAligned(long address)"
                ]
            },
            "4c7c9142f0a4fa93e0a6db6cb846509707d6aa52": {
                "jctools-experimental/src/main/java/org/jctools/queues/SpscOffHeapIntQueue.java": [
                    "public static int org.jctools.queues.SpscOffHeapIntQueue.getRequiredBufferSize(final int capacity)"
                ],
                "jctools-experimental/src/main/java/org/jctools/util/UnsafeDirectByteBuffer.java": [
                    "public static boolean org.jctools.util.UnsafeDirectByteBuffer.isPageAligned(long address)",
                    "public static boolean org.jctools.util.UnsafeDirectByteBuffer.isCacheAligned(long address)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b0f1295ffae344c9dc1aee54df6351a051e47739",
        "previous_commit": "9def52951541af24751964bb0cb4f611f50bdca4",
        "date": 1480035856,
        "releases": {
            "previous": "b0f1295ffae344c9dc1aee54df6351a051e47739",
            "next": "b0f1295ffae344c9dc1aee54df6351a051e47739"
        },
        "commit_message": "Added utility method to generate the bridge methods.\n\nThese are required by methods using generics.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "b0f1295ffae344c9dc1aee54df6351a051e47739": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProcess(ClassVisitor classVisitor, List<Method> methods, Class<?> iFace, String generatedName)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProxyInstance(ClassVisitor classVisitor, Class<?> iFace, String generatedName)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProxy(ClassVisitor classVisitor, Class<?> iFace, String generatedName)"
                ]
            },
            "9def52951541af24751964bb0cb4f611f50bdca4": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProcess(ClassVisitor classVisitor, List<Method> methods, Class<?> iFace, String generatedName)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProxyInstance(ClassVisitor classVisitor, Class<?> iFace, String generatedName)",
                    "private static void org.jctools.channels.proxy.ProxyChannelFactory.implementProxy(ClassVisitor classVisitor, Class<?> iFace, String generatedName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "676291a623038a067ff68866468dd5e9ab5a8b92",
        "previous_commit": "2d5a2d9d5ce565d54cce71e289ca92baf645b9b0",
        "date": 1403439227,
        "releases": {
            "previous": "676291a623038a067ff68866468dd5e9ab5a8b92",
            "next": "676291a623038a067ff68866468dd5e9ab5a8b92"
        },
        "commit_message": "Javadoc and code clarity changes.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "676291a623038a067ff68866468dd5e9ab5a8b92": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.size()",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ]
            },
            "2d5a2d9d5ce565d54cce71e289ca92baf645b9b0": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpmcArrayQueue<E>.size()",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "193b96724204402f206a07734c590a598d525158",
        "previous_commit": "8f4db8f47accab31b77b8c193b05af0af0bbdd3f",
        "date": 1469185984,
        "releases": {
            "previous": "193b96724204402f206a07734c590a598d525158",
            "next": "193b96724204402f206a07734c590a598d525158"
        },
        "commit_message": "minimize code duplication in linked array implementation",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "193b96724204402f206a07734c590a598d525158": {
                "jctools-core/src/main/java/org/jctools/queues/SpscChunkedArrayQueue.java": [
                    "protected void org.jctools.queues.SpscChunkedArrayQueue<E>.linkNewBuffer(final E[] oldBuffer, final long currIndex, final long offset, final E e, final long mask)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "protected void org.jctools.queues.SpscGrowableArrayQueue<E>.linkNewBuffer(final E[] oldBuffer, final long currIndex, final long offset, final E e, final long mask)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "protected void org.jctools.queues.SpscUnboundedArrayQueue<E>.linkNewBuffer(final E[] oldBuffer, final long currIndex, final long offset, final E e, final long mask)"
                ]
            },
            "8f4db8f47accab31b77b8c193b05af0af0bbdd3f": {
                "jctools-core/src/main/java/org/jctools/queues/SpscChunkedArrayQueue.java": [
                    "private void org.jctools.queues.SpscChunkedArrayQueue<E>.linkNewBuffer(final E[] oldBuffer, final long currIndex, final long offset, final E e, final long mask)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "private void org.jctools.queues.SpscGrowableArrayQueue<E>.linkNewBuffer(final E[] oldBuffer, final long currIndex, final long offset, final E e, final long mask)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "private void org.jctools.queues.SpscUnboundedArrayQueue<E>.linkNewBuffer(final E[] oldBuffer, final long currIndex, final long offset, final E e, final long mask)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "9a44566e30a4b1a81a7dde714bcf9c3fff0abb48",
        "previous_commit": "edf62ba9c02d4f071fbb9159594afad961e7fa1f",
        "date": 1409836265,
        "releases": {
            "previous": "9a44566e30a4b1a81a7dde714bcf9c3fff0abb48",
            "next": "9a44566e30a4b1a81a7dde714bcf9c3fff0abb48"
        },
        "commit_message": "reafctoring around indicator usage, in prep for using 4 byte indicators",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "9a44566e30a4b1a81a7dde714bcf9c3fff0abb48": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "public static int org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.getRequiredBufferSize(final int capacity, final int messageSize)",
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readRelease(long offset)",
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeRelease(long offset)"
                ]
            },
            "edf62ba9c02d4f071fbb9159594afad961e7fa1f": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "public static int org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.getRequiredBufferSize(final int capacity, final int messageSize)",
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.readRelease(long offset)",
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeRelease(long offset)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "eed855a6a4fe12b70a65ce601285277576d465e8",
        "previous_commit": "fa08efe955eb3a75b45e5f386eb5646d031aa508",
        "date": 1502727549,
        "releases": {
            "previous": "eed855a6a4fe12b70a65ce601285277576d465e8",
            "next": "eed855a6a4fe12b70a65ce601285277576d465e8"
        },
        "commit_message": "Linked queues: Implement the MessagePassingQueue methods\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "eed855a6a4fe12b70a65ce601285277576d465e8": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.organiseImports(CompilationUnit cu)",
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.replaceParentClassesForAtomics(NodeList<ClassOrInterfaceType> types)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)"
                ]
            },
            "fa08efe955eb3a75b45e5f386eb5646d031aa508": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.organiseImports(CompilationUnit cu)",
                    "private static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.replaceParentClassesForAtomics(NodeList<ClassOrInterfaceType> types)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "fbd6bfab1a036d57f5db4a7659f23764c2d7c08a",
        "previous_commit": "0f39a2d4a1f8beeb474844ae9d9e1533c51dea81",
        "date": 1423148801,
        "releases": {
            "previous": "fbd6bfab1a036d57f5db4a7659f23764c2d7c08a",
            "next": "fbd6bfab1a036d57f5db4a7659f23764c2d7c08a"
        },
        "commit_message": "change marker size to 4 bytes(int) to ensure store ordering",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "fbd6bfab1a036d57f5db4a7659f23764c2d7c08a": {
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/ClassViewModel.java": [
                    "public List<Variable> org.jctools.channels.mapping.ClassViewModel.fields()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "private void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.nullIndicator(final long offset)",
                    "private void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeIndicator(long offset)"
                ]
            },
            "0f39a2d4a1f8beeb474844ae9d9e1533c51dea81": {
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/ClassViewModel.java": [
                    "public List<Variable> org.jctools.channels.mapping.ClassViewModel.fields()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "private void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.nullIndicator(final long offset)",
                    "private void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeIndicator(long offset)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "16042ddd06557b3acbb2a869d8df833f4ed7b4fd",
        "previous_commit": "aeb48264c489cfc76014870456e1cb3a0742a657",
        "date": 1395838801,
        "releases": {
            "previous": "16042ddd06557b3acbb2a869d8df833f4ed7b4fd",
            "next": "16042ddd06557b3acbb2a869d8df833f4ed7b4fd"
        },
        "commit_message": "Fix MPMC issues",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "16042ddd06557b3acbb2a869d8df833f4ed7b4fd": {
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueue.java": [
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.offer(final E e)",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.poll()",
                    "public int io.jaq.mpmc.MpmcConcurrentQueue<E>.offerStatus(final E e)"
                ]
            },
            "aeb48264c489cfc76014870456e1cb3a0742a657": {
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueue.java": [
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueue<E>.offer(final E e)",
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.poll()",
                    "public int io.jaq.mpmc.MpmcConcurrentQueue<E>.offerStatus(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "c9aec4cc96ce482b7b5a0a4a607c5132579ebca5",
        "previous_commit": "a1732f5295c18e1931ffb7c97b046a79ac26392e",
        "date": 1461270963,
        "releases": {
            "previous": "c9aec4cc96ce482b7b5a0a4a607c5132579ebca5",
            "next": "c9aec4cc96ce482b7b5a0a4a607c5132579ebca5"
        },
        "commit_message": "Extract AbstractSpscLinkedArrayQueue base class.\n\nFactor out SpscGrowableArrayQueue and SpscUnboundedArrayQueue shared code.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "c9aec4cc96ce482b7b5a0a4a607c5132579ebca5": {
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "public final E org.jctools.queues.SpscUnboundedArrayQueue<E>.poll()",
                    "public final E org.jctools.queues.SpscUnboundedArrayQueue<E>.peek()",
                    "private void org.jctools.queues.SpscUnboundedArrayQueue<E>.linkNewBuffer(final E[] oldBuffer, final long currIndex, final long offset, final E e, final long mask)"
                ]
            },
            "a1732f5295c18e1931ffb7c97b046a79ac26392e": {
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "public final E org.jctools.queues.SpscUnboundedArrayQueue<E>.poll()",
                    "public final E org.jctools.queues.SpscUnboundedArrayQueue<E>.peek()",
                    "private void org.jctools.queues.SpscUnboundedArrayQueue<E>.linkNewBuffer(final E[] oldBuffer, final long currIndex, final long offset, final E e, final long mask)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b1861fc027bd1fddfdc793e321517979fd732295",
        "previous_commit": "b6e45c6b71abeba014fc004666868f683cf70235",
        "date": 1590495916,
        "releases": {
            "previous": "b1861fc027bd1fddfdc793e321517979fd732295",
            "next": "b1861fc027bd1fddfdc793e321517979fd732295"
        },
        "commit_message": "remove redundant store fence\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "b1861fc027bd1fddfdc793e321517979fd732295": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.relaxedOffer(E e)",
                    "private int org.jctools.queues.MpmcArrayQueue<E>.drainOneByOne(Consumer<E> c, int limit)",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ]
            },
            "b6e45c6b71abeba014fc004666868f683cf70235": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.relaxedOffer(E e)",
                    "private int org.jctools.queues.MpmcArrayQueue<E>.drainOneByOne(Consumer<E> c, int limit)",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "dbd85948312124ec9696ae7d7fcfab93504f6637",
        "previous_commit": "d52ce999eee17baeb6e0bbc1d56d7d736a0beb30",
        "date": 1606299440,
        "releases": {
            "previous": "dbd85948312124ec9696ae7d7fcfab93504f6637",
            "next": "dbd85948312124ec9696ae7d7fcfab93504f6637"
        },
        "commit_message": "Xadd queues consumers can help producers\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "dbd85948312124ec9696ae7d7fcfab93504f6637": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "private MpscUnboundedXaddChunk<E> org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.spinForNextIfNotEmpty(MpscUnboundedXaddChunk<E> cChunk, long cIndex)"
                ]
            },
            "d52ce999eee17baeb6e0bbc1d56d7d736a0beb30": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "private MpscUnboundedXaddChunk<E> org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.spinForNextIfNotEmpty(MpscUnboundedXaddChunk<E> cChunk, long cIndex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "710bc7ed35ee00cb260f9a5b933869ecdad8ebcd",
        "previous_commit": "cff1522ebc8e91fcf31a39b8509b7b2fd7d064c7",
        "date": 1577281505,
        "releases": {
            "previous": "710bc7ed35ee00cb260f9a5b933869ecdad8ebcd",
            "next": "710bc7ed35ee00cb260f9a5b933869ecdad8ebcd"
        },
        "commit_message": "Incremented the tests on the mpsc xadd q + fixed comment (#278)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "710bc7ed35ee00cb260f9a5b933869ecdad8ebcd": {
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "final MpscUnboundedXaddChunk<E> org.jctools.queues.MpscUnboundedXaddArrayQueueProducerBuffer<E>.lvProducerChunk()",
                    "private MpscUnboundedXaddChunk<E> org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.appendNextChunks( MpscUnboundedXaddChunk<E> currentChunk, long currentChunkIndex, long chunksToAppend)"
                ]
            },
            "cff1522ebc8e91fcf31a39b8509b7b2fd7d064c7": {
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "final MpscUnboundedXaddChunk<E> org.jctools.queues.MpscUnboundedXaddArrayQueueProducerBuffer<E>.lvProducerChunk()",
                    "private MpscUnboundedXaddChunk<E> org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.appendNextChunks( MpscUnboundedXaddChunk<E> currentChunk, long currentChunkIndex, long chunksToAppend)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "27f593cbc6840db1151ef506e42ace6cffa9bfce",
        "previous_commit": "bf55e2cbe5c846a9f5e1978c8faed36ba2e7dbef",
        "date": 1462026241,
        "releases": {
            "previous": "27f593cbc6840db1151ef506e42ace6cffa9bfce",
            "next": "27f593cbc6840db1151ef506e42ace6cffa9bfce"
        },
        "commit_message": "rename lookAhead to limit",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "27f593cbc6840db1151ef506e42ace6cffa9bfce": {
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "private boolean org.jctools.queues.SpscArrayQueue<E>.offerSlowPath(final E[] buffer, final long mask, final long producerIndex)"
                ]
            },
            "bf55e2cbe5c846a9f5e1978c8faed36ba2e7dbef": {
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "private boolean org.jctools.queues.SpscArrayQueue<E>.offerSlowPath(final E[] buffer, final long mask, final long producerIndex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "78ecf5a40773d0f2b31e93fa537cc18f1ff0deea",
        "previous_commit": "b178dfd83bb56164c8ffa03c255c69151bd05faf",
        "date": 1575724956,
        "releases": {
            "previous": "78ecf5a40773d0f2b31e93fa537cc18f1ff0deea",
            "next": "78ecf5a40773d0f2b31e93fa537cc18f1ff0deea"
        },
        "commit_message": "Clarify javadoc for linked queue\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "78ecf5a40773d0f2b31e93fa537cc18f1ff0deea": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public E org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.poll()",
                    "public E org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.peek()"
                ]
            },
            "b178dfd83bb56164c8ffa03c255c69151bd05faf": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscLinkedAtomicQueue.java": [
                    "public E org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.poll()",
                    "public E org.jctools.queues.atomic.MpscLinkedAtomicQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "56b5e58b07266bea077ab5aa2c6e6268696b4784",
        "previous_commit": "27cf933a265ff42065a6164fe46e2fec45359944",
        "date": 1495698805,
        "releases": {
            "previous": "56b5e58b07266bea077ab5aa2c6e6268696b4784",
            "next": "56b5e58b07266bea077ab5aa2c6e6268696b4784"
        },
        "commit_message": "Fix erronous queue full detection in the face of stuck consumer. Fix #179.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "56b5e58b07266bea077ab5aa2c6e6268696b4784": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ]
            },
            "27cf933a265ff42065a6164fe46e2fec45359944": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()",
                    "public boolean org.jctools.queues.MpmcArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "636795114f61e5f0489b6ff52fb332f2f92b5d39",
        "previous_commit": "15d944c72be21d546d1f71594587043b808a33f6",
        "date": 1573041939,
        "releases": {
            "previous": "636795114f61e5f0489b6ff52fb332f2f92b5d39",
            "next": "636795114f61e5f0489b6ff52fb332f2f92b5d39"
        },
        "commit_message": "Fix LGTM warning, potential int overflow bug\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "636795114f61e5f0489b6ff52fb332f2f92b5d39": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            },
            "15d944c72be21d546d1f71594587043b808a33f6": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "6ab979d60d6778cc5da31f9aeba5a15df2c53885",
        "previous_commit": "ebbd07bdbe8155218f0d2a696de1ebe96d1f44f3",
        "date": 1504102310,
        "releases": {
            "previous": "6ab979d60d6778cc5da31f9aeba5a15df2c53885",
            "next": "6ab979d60d6778cc5da31f9aeba5a15df2c53885"
        },
        "commit_message": "Fix a bug in MpscCompoundQ relaxedOffer (Fix #194)\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "6ab979d60d6778cc5da31f9aeba5a15df2c53885": {
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public boolean org.jctools.queues.MpscCompoundQueue<E>.relaxedOffer(E e)",
                    "public boolean org.jctools.queues.MpscCompoundQueue<E>.offer(final E e)"
                ]
            },
            "ebbd07bdbe8155218f0d2a696de1ebe96d1f44f3": {
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public boolean org.jctools.queues.MpscCompoundQueue<E>.relaxedOffer(E e)",
                    "public boolean org.jctools.queues.MpscCompoundQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "6ce23ada59e12c5bc93aeb5207d895a2647227c6",
        "previous_commit": "2e384158a874c5d312933d7f54ba67b0f56d98b4",
        "date": 1528967552,
        "releases": {
            "previous": "6ce23ada59e12c5bc93aeb5207d895a2647227c6",
            "next": "6ce23ada59e12c5bc93aeb5207d895a2647227c6"
        },
        "commit_message": "Generated version update\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "6ce23ada59e12c5bc93aeb5207d895a2647227c6": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            },
            "2e384158a874c5d312933d7f54ba67b0f56d98b4": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.drain(Consumer<E> c, int limit)",
                    "public int org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "f5ddd6577e77c6cf42d74fe5b79e625561ce8160",
        "previous_commit": "19cbaae4501c310ce3afb1a7443187e244888310",
        "date": 1572102825,
        "releases": {
            "previous": "f5ddd6577e77c6cf42d74fe5b79e625561ce8160",
            "next": "f5ddd6577e77c6cf42d74fe5b79e625561ce8160"
        },
        "commit_message": "Fixes #266 Improve xad qs producer buffer rotation\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "f5ddd6577e77c6cf42d74fe5b79e625561ce8160": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "private AtomicChunk<E> org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.appendNextChunk(AtomicChunk<E> producerBuffer, long chunkIndex, int chunkSize)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "private AtomicChunk<E> org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.appendNextChunk(AtomicChunk<E> producerBuffer, long chunkIndex, int chunkSize)"
                ]
            },
            "19cbaae4501c310ce3afb1a7443187e244888310": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "private AtomicChunk<E> org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.appendNextChunk(AtomicChunk<E> producerBuffer, long chunkIndex, int chunkSize)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "private AtomicChunk<E> org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.appendNextChunk(AtomicChunk<E> producerBuffer, long chunkIndex, int chunkSize)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "fa08efe955eb3a75b45e5f386eb5646d031aa508",
        "previous_commit": "bfb10f044e17c8035b884fe29ad409daaaf74911",
        "date": 1502727549,
        "releases": {
            "previous": "fa08efe955eb3a75b45e5f386eb5646d031aa508",
            "next": "fa08efe955eb3a75b45e5f386eb5646d031aa508"
        },
        "commit_message": "Linked queues: Implemented code generator\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "fa08efe955eb3a75b45e5f386eb5646d031aa508": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseLinkedAtomicQueue.java": [
                    "protected final LinkedQueueAtomicNode<E> org.jctools.queues.atomic.BaseLinkedAtomicQueueConsumerNodeRef<E>.lpConsumerNode()",
                    "protected final LinkedQueueAtomicNode<E> org.jctools.queues.atomic.BaseLinkedAtomicQueueProducerNodeRef<E>.lpProducerNode()"
                ]
            },
            "bfb10f044e17c8035b884fe29ad409daaaf74911": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseLinkedAtomicQueue.java": [
                    "protected final LinkedQueueAtomicNode<E> org.jctools.queues.atomic.BaseLinkedAtomicQueueConsumerNodeRef<E>.lpConsumerNode()",
                    "protected final LinkedQueueAtomicNode<E> org.jctools.queues.atomic.BaseLinkedAtomicQueueProducerNodeRef<E>.lpProducerNode()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "e383012c506a11cdebb0666b966348f26a4864f1",
        "previous_commit": "cc79ae378b91d7d373eac5ee58baa1dcf5254a86",
        "date": 1401801763,
        "releases": {
            "previous": "e383012c506a11cdebb0666b966348f26a4864f1",
            "next": "e383012c506a11cdebb0666b966348f26a4864f1"
        },
        "commit_message": "Further renaming.\nCleaner split of Queue vs. ConcurrentQueue implementations.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "e383012c506a11cdebb0666b966348f26a4864f1": {
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public int org.jctools.queues.MpscCompoundQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/alt/ConcurrentQueueFactory.java": [
                    "public static <E> ConcurrentQueue<E> org.jctools.queues.alt.ConcurrentQueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            },
            "cc79ae378b91d7d373eac5ee58baa1dcf5254a86": {
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public int org.jctools.queues.MpscCompoundQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/alt/ConcurrentQueueFactory.java": [
                    "public static <E> ConcurrentQueue<E> org.jctools.queues.alt.ConcurrentQueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d960881dd9bc273cfe2d685b90409d08b0f1c20e",
        "previous_commit": "394f149def797a90a53b056abadd02884f3077b9",
        "date": 1457260375,
        "releases": {
            "previous": "d960881dd9bc273cfe2d685b90409d08b0f1c20e",
            "next": "d960881dd9bc273cfe2d685b90409d08b0f1c20e"
        },
        "commit_message": "Remove NPE error string",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d960881dd9bc273cfe2d685b90409d08b0f1c20e": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public final int org.jctools.queues.MpscArrayQueue<E>.failFastOffer(final E e)",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offerIfBelowTheshold(final E e, int threshold)"
                ]
            },
            "394f149def797a90a53b056abadd02884f3077b9": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public final int org.jctools.queues.MpscArrayQueue<E>.failFastOffer(final E e)",
                    "public boolean org.jctools.queues.MpscArrayQueue<E>.offerIfBelowTheshold(final E e, int threshold)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "bbe02aa58fcba15198de1ff5f5a3add656372b9a",
        "previous_commit": "4c26d4e29b6b8c9f3d0c7bbcba59c1066df5f730",
        "date": 1506872320,
        "releases": {
            "previous": "bbe02aa58fcba15198de1ff5f5a3add656372b9a",
            "next": "bbe02aa58fcba15198de1ff5f5a3add656372b9a"
        },
        "commit_message": "Introduce modCount to SingleWriterHashSet and make contains lock-free to avoid races during removals\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "bbe02aa58fcba15198de1ff5f5a3add656372b9a": {
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "private void org.jctools.sets.SingleWriterHashSet<E>.compactAndRemove(final E[] buffer, final long mask, int removeHashIndex)",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.contains(Object needle)"
                ]
            },
            "4c26d4e29b6b8c9f3d0c7bbcba59c1066df5f730": {
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "private void org.jctools.sets.SingleWriterHashSet<E>.compactAndRemove(final E[] buffer, final long mask, int removeHashIndex)",
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.contains(Object needle)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "ec0f7b287bcc0609fd4201584fa495e92ccc6dc6",
        "previous_commit": "94f93eda72f6e409e081fc365702b6fdacbb8deb",
        "date": 1480035856,
        "releases": {
            "previous": "ec0f7b287bcc0609fd4201584fa495e92ccc6dc6",
            "next": "ec0f7b287bcc0609fd4201584fa495e92ccc6dc6"
        },
        "commit_message": "Calculate the size required for primitive args\n\narrayMessageSize (renamed to referenceMessageSize) this and the primitive\nmessage size is set it directly within the generated ctor\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "ec0f7b287bcc0609fd4201584fa495e92ccc6dc6": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "private static <E> ProxyChannel<E> org.jctools.channels.proxy.ProxyChannelFactory.instantiate(Class<?> proxy, int capacity, WaitStrategy waitStrategy)",
                    "public static <E> ProxyChannel<E> org.jctools.channels.proxy.ProxyChannelFactory.createSpscProxy(int capacity, Class<E> iFace, WaitStrategy waitStrategy)"
                ]
            },
            "94f93eda72f6e409e081fc365702b6fdacbb8deb": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "private static <E> ProxyChannel<E> org.jctools.channels.proxy.ProxyChannelFactory.instantiate(Class<?> proxy, int capacity, int arrayMessageSize, WaitStrategy waitStrategy)",
                    "public static <E> ProxyChannel<E> org.jctools.channels.proxy.ProxyChannelFactory.createSpscProxy(int capacity, Class<E> iFace, WaitStrategy waitStrategy)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "0f39a2d4a1f8beeb474844ae9d9e1533c51dea81",
        "previous_commit": "2bba51d6ab575bbe90b31fb66437fc7793f6d7c5",
        "date": 1421072017,
        "releases": {
            "previous": "0f39a2d4a1f8beeb474844ae9d9e1533c51dea81",
            "next": "0f39a2d4a1f8beeb474844ae9d9e1533c51dea81"
        },
        "commit_message": "Fix size() bug for 32 platforms and form strict acquire/release\nrelationships for indices",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "0f39a2d4a1f8beeb474844ae9d9e1533c51dea81": {
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()"
                ]
            },
            "2bba51d6ab575bbe90b31fb66437fc7793f6d7c5": {
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)",
                    "public E org.jctools.queues.SpscArrayQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "8bd126002e699328be122f68906c3e90296609d9",
        "previous_commit": "7c427d89576e2b59b43f7dd50a13a2488f732794",
        "date": 1390737706,
        "releases": {
            "previous": "8bd126002e699328be122f68906c3e90296609d9",
            "next": "8bd126002e699328be122f68906c3e90296609d9"
        },
        "commit_message": "32bits mask is faster\n\nThanks Martin Thompson\n",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "8bd126002e699328be122f68906c3e90296609d9": {
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBuffer.java": [
                    "private long io.jaq.spsc.FFBuffer<E>.offset(long index)"
                ],
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatch.java": [
                    "private long io.jaq.spsc.FFBufferWithOfferBatch<E>.offset(long index)"
                ]
            },
            "7c427d89576e2b59b43f7dd50a13a2488f732794": {
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBuffer.java": [
                    "private long io.jaq.spsc.FFBuffer<E>.offset(long index)"
                ],
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatch.java": [
                    "private long io.jaq.spsc.FFBufferWithOfferBatch<E>.offset(long index)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "a0bc1031d0f9709a5255c967eba1e4890bd72940",
        "previous_commit": "19cbaae4501c310ce3afb1a7443187e244888310",
        "date": 1572270438,
        "releases": {
            "previous": "a0bc1031d0f9709a5255c967eba1e4890bd72940",
            "next": "a0bc1031d0f9709a5255c967eba1e4890bd72940"
        },
        "commit_message": "Improved handling of in-progress consumer buffer rotation and simplified peek of mpmc xadd q\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "a0bc1031d0f9709a5255c967eba1e4890bd72940": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.peek()"
                ]
            },
            "19cbaae4501c310ce3afb1a7443187e244888310": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "3c94b8ccb78e040b9c2a33a04f7dee01286d1658",
        "previous_commit": "14ce5a50b7e08816f24bc69c75288587332871e6",
        "date": 1457883268,
        "releases": {
            "previous": "3c94b8ccb78e040b9c2a33a04f7dee01286d1658",
            "next": "3c94b8ccb78e040b9c2a33a04f7dee01286d1658"
        },
        "commit_message": "Don't reload cells field in FixedSizeStripedLongCounterV6\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "3c94b8ccb78e040b9c2a33a04f7dee01286d1658": {
                "jctools-experimental/src/main/java/org/jctools/counters/FixedSizeStripedLongCounterV6.java": [
                    "protected void org.jctools.counters.FixedSizeStripedLongCounterV6.inc(long offset, long delta)",
                    "protected long org.jctools.counters.FixedSizeStripedLongCounterV6.getAndReset(long offset)"
                ]
            },
            "14ce5a50b7e08816f24bc69c75288587332871e6": {
                "jctools-experimental/src/main/java/org/jctools/counters/FixedSizeStripedLongCounterV6.java": [
                    "protected void org.jctools.counters.FixedSizeStripedLongCounterV6.inc(long offset, long delta)",
                    "protected long org.jctools.counters.FixedSizeStripedLongCounterV6.getAndReset(long offset)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "688bd2a470ac874584c323c940c5eca6e832ad32",
        "previous_commit": "86de5a075afcda29d921ae0836557bd405595d9b",
        "date": 1477245473,
        "releases": {
            "previous": "688bd2a470ac874584c323c940c5eca6e832ad32",
            "next": "688bd2a470ac874584c323c940c5eca6e832ad32"
        },
        "commit_message": "Improve doc and remove redundant method param.\n\nBased on review from bug #134",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "688bd2a470ac874584c323c940c5eca6e832ad32": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.BaseMpscLinkedArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ]
            },
            "86de5a075afcda29d921ae0836557bd405595d9b": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.BaseMpscLinkedArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "accf557875181f9c0621705c57193a20815a601a",
        "previous_commit": "7701391b9172e14aa7d078ea46cdc670060b30dc",
        "date": 1406673738,
        "releases": {
            "previous": "accf557875181f9c0621705c57193a20815a601a",
            "next": "accf557875181f9c0621705c57193a20815a601a"
        },
        "commit_message": "implement an SPSC channel\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "accf557875181f9c0621705c57193a20815a601a": {
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/BytecodeGenerator.java": [
                    "public Class<E> org.jctools.channels.mapping.BytecodeGenerator<E>.generate()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/TypeInspector.java": [
                    "public int org.jctools.channels.mapping.TypeInspector.getSizeInBytes()"
                ]
            },
            "7701391b9172e14aa7d078ea46cdc670060b30dc": {
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/BytecodeGenerator.java": [
                    "public Class<E> org.jctools.channels.mapping.BytecodeGenerator<E>.generate()"
                ],
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/TypeInspector.java": [
                    "public int org.jctools.channels.mapping.TypeInspector.getSizeInBytes()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "534d30d8681c96c5fa9c30de3b4d27776d561d95",
        "previous_commit": "f719c22cf5f9a1f1e4654bd329aa2dc661cdbd95",
        "date": 1477643873,
        "releases": {
            "previous": "534d30d8681c96c5fa9c30de3b4d27776d561d95",
            "next": "534d30d8681c96c5fa9c30de3b4d27776d561d95"
        },
        "commit_message": "Remove SparsePadded offset calc.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "534d30d8681c96c5fa9c30de3b4d27776d561d95": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "private void org.jctools.queues.BaseMpscLinkedArrayQueue<E>.resize(long oldMask, E[] oldBuffer, long pIndex, final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "protected static long org.jctools.queues.ConcurrentCircularArrayQueue<E>.calcElementOffset(long index, long mask)"
                ]
            },
            "f719c22cf5f9a1f1e4654bd329aa2dc661cdbd95": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "private void org.jctools.queues.BaseMpscLinkedArrayQueue<E>.resize(long oldMask, E[] oldBuffer, long pIndex, final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "protected static long org.jctools.queues.ConcurrentCircularArrayQueue<E>.calcElementOffset(long index, long mask)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "7e58c9f6ce11e3e7dde1430f1929ce05caadeed3",
        "previous_commit": "f57d1e4261da9d08423cd3f257900b958492f06e",
        "date": 1506372154,
        "releases": {
            "previous": "7e58c9f6ce11e3e7dde1430f1929ce05caadeed3",
            "next": "7e58c9f6ce11e3e7dde1430f1929ce05caadeed3"
        },
        "commit_message": "Implement fill methods for compound queue, expand testing, fix #197\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "7e58c9f6ce11e3e7dde1430f1929ce05caadeed3": {
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public int org.jctools.queues.MpscCompoundQueue<E>.fill(Supplier<E> s, int limit)",
                    "public int org.jctools.queues.MpscCompoundQueue<E>.fill(Supplier<E> s)"
                ]
            },
            "f57d1e4261da9d08423cd3f257900b958492f06e": {
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public int org.jctools.queues.MpscCompoundQueue<E>.fill(Supplier<E> s, int limit)",
                    "public int org.jctools.queues.MpscCompoundQueue<E>.fill(Supplier<E> s)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d64b9b44ab2cc710a8028ede33c575aa00f3a356",
        "previous_commit": "1e638a69c264bdc65704139dbdcdbb7f7dc7a8a2",
        "date": 1554282235,
        "releases": {
            "previous": "d64b9b44ab2cc710a8028ede33c575aa00f3a356",
            "next": "d64b9b44ab2cc710a8028ede33c575aa00f3a356"
        },
        "commit_message": "Protect the producer index in case of OutOfMemoryError\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d64b9b44ab2cc710a8028ede33c575aa00f3a356": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.BaseMpscLinkedArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ]
            },
            "1e638a69c264bdc65704139dbdcdbb7f7dc7a8a2": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.BaseMpscLinkedArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "05a6199411731a6e7003827d311bdd031d831dd1",
        "previous_commit": "32a19b72cb649a95225a662bdafa6d9d32503493",
        "date": 1510822368,
        "releases": {
            "previous": "05a6199411731a6e7003827d311bdd031d831dd1",
            "next": "05a6199411731a6e7003827d311bdd031d831dd1"
        },
        "commit_message": "Fixed producer's claim on a blocked relaxed q\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "05a6199411731a6e7003827d311bdd031d831dd1": {
                "jctools-core/src/main/java/org/jctools/queues/MpscRelaxedArrayQueue.java": [
                    "public int org.jctools.queues.MpscRelaxedArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpscRelaxedArrayQueue<E>.offer(final E e)"
                ]
            },
            "32a19b72cb649a95225a662bdafa6d9d32503493": {
                "jctools-core/src/main/java/org/jctools/queues/MpscRelaxedArrayQueue.java": [
                    "public int org.jctools.queues.MpscRelaxedArrayQueue<E>.fill(Supplier<E> s, int limit)",
                    "public boolean org.jctools.queues.MpscRelaxedArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "cd67ce1cc431d25ac6d1dc7d4e1f6cd68b25a739",
        "previous_commit": "0100ba795769079dae0605c8751a014163fb27f7",
        "date": 1502728163,
        "releases": {
            "previous": "cd67ce1cc431d25ac6d1dc7d4e1f6cd68b25a739",
            "next": "cd67ce1cc431d25ac6d1dc7d4e1f6cd68b25a739"
        },
        "commit_message": "Mpsc growable array queues homogenized\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "cd67ce1cc431d25ac6d1dc7d4e1f6cd68b25a739": {
                "jctools-core/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "protected int org.jctools.queues.MpscGrowableArrayQueue<E>.getNextBufferSize(E[] buffer)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscGrowableAtomicArrayQueue.java": [
                    "protected int org.jctools.queues.atomic.MpscGrowableAtomicArrayQueue<E>.getNextBufferSize(AtomicReferenceArray<E> buffer)"
                ]
            },
            "0100ba795769079dae0605c8751a014163fb27f7": {
                "jctools-core/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "protected int org.jctools.queues.MpscGrowableArrayQueue<E>.getNextBufferSize(E[] buffer)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscGrowableAtomicArrayQueue.java": [
                    "protected int org.jctools.queues.atomic.MpscGrowableAtomicArrayQueue<E>.getNextBufferSize(AtomicReferenceArray<E> buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d20e0005c2f730fc38dfebd1ab7498add66e207a",
        "previous_commit": "23432e5e22901348a5b251f9a620cf44a2253673",
        "date": 1551674868,
        "releases": {
            "previous": "d20e0005c2f730fc38dfebd1ab7498add66e207a",
            "next": "d20e0005c2f730fc38dfebd1ab7498add66e207a"
        },
        "commit_message": "Polish - close file writer with try-with-resource and polish the file name construction.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d20e0005c2f730fc38dfebd1ab7498add66e207a": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.main(String[] args)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.main(String[] args)"
                ]
            },
            "23432e5e22901348a5b251f9a620cf44a2253673": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.main(String[] args)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "63b63e8ee02d55dd7ea12bfbe14df05d8ddf4d18",
        "previous_commit": "3308baba43934cf24e27ef61818a6abf6037a9a7",
        "date": 1443435367,
        "releases": {
            "previous": "63b63e8ee02d55dd7ea12bfbe14df05d8ddf4d18",
            "next": "63b63e8ee02d55dd7ea12bfbe14df05d8ddf4d18"
        },
        "commit_message": "SpscUnboundedQueue leaves 1 slot null just before growing.\n\nIn the following program, the queue allocates a new array even though\nthere is 1 slot available:\n\n```java\nSpscUnboundedArrayQueue<Integer> q = new SpscUnboundedArrayQueue<>(256);\n\nfor (int i = 0; i < 254; i++) {\n    q.offer(i);\n}\n\nSystem.out.println();\n\nq.offer(254);\n\nSystem.out.println();\n```\n\nClearly, the queue has room for 255 elements before it has to to grow.\nMight not be much of an issue but for small queue sizes (minimum of 8\nthat the lookahead allows) is a relatively significant lost.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "63b63e8ee02d55dd7ea12bfbe14df05d8ddf4d18": {
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "public final boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscUnboundedAtomicArrayQueue.java": [
                    "public final boolean org.jctools.queues.atomic.SpscUnboundedAtomicArrayQueue<E>.offer(final E e)"
                ]
            },
            "3308baba43934cf24e27ef61818a6abf6037a9a7": {
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "public final boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscUnboundedAtomicArrayQueue.java": [
                    "public final boolean org.jctools.queues.atomic.SpscUnboundedAtomicArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "5dc705baad06d6149a03db70241324d941cf7231",
        "previous_commit": "3baf7bdfd5e464d3291f670291754b0c0fd439d4",
        "date": 1596708692,
        "releases": {
            "previous": "5dc705baad06d6149a03db70241324d941cf7231",
            "next": "5dc705baad06d6149a03db70241324d941cf7231"
        },
        "commit_message": "MpscBlockingConsumerArrayQueue.offerIfBelowThreshold() is added\n\nneeds further testing, will be added shortly",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "5dc705baad06d6149a03db70241324d941cf7231": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "private boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.recalculateProducerLimit(long mask, long pIndex, long producerLimit)",
                    "private boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.recalculateProducerLimit(long mask, long pIndex, long producerLimit, long cIndex)"
                ]
            },
            "3baf7bdfd5e464d3291f670291754b0c0fd439d4": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "private boolean org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.recalculateProducerLimit(long mask, long pIndex, long producerLimit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "05a8b6ab1428d380ec0e9543449708f2071e0543",
        "previous_commit": "f71d38d3753dbc76658b3b7941bc01a0ee1fb681",
        "date": 1458063979,
        "releases": {
            "previous": "05a8b6ab1428d380ec0e9543449708f2071e0543",
            "next": "05a8b6ab1428d380ec0e9543449708f2071e0543"
        },
        "commit_message": "SpscUnboundedArrayQueue prevent extended retention bw old and new gen\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "05a8b6ab1428d380ec0e9543449708f2071e0543": {
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "public final E org.jctools.queues.SpscUnboundedArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscUnboundedAtomicArrayQueue.java": [
                    "public final E org.jctools.queues.atomic.SpscUnboundedAtomicArrayQueue<E>.poll()"
                ]
            },
            "f71d38d3753dbc76658b3b7941bc01a0ee1fb681": {
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "public final E org.jctools.queues.SpscUnboundedArrayQueue<E>.poll()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscUnboundedAtomicArrayQueue.java": [
                    "public final E org.jctools.queues.atomic.SpscUnboundedAtomicArrayQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "5ac645be49d7712bb64682dd7330bd5f16526ece",
        "previous_commit": "af3c1bec8f9a17d7cb0ea05b27be8ea72158d21b",
        "date": 1431994757,
        "releases": {
            "previous": "5ac645be49d7712bb64682dd7330bd5f16526ece",
            "next": "5ac645be49d7712bb64682dd7330bd5f16526ece"
        },
        "commit_message": "Make capacity a parameter to the constructor rather than a baked in\nString.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "5ac645be49d7712bb64682dd7330bd5f16526ece": {
                "jctools-experimental/src/main/java/org/jctools/queues/blocking/BlockingQueueFactory.java": [
                    "private static <E> BlockingQueue<E> org.jctools.queues.blocking.BlockingQueueFactory.getBlockingQueueFrom(Class<? extends Queue> queueClass, Class<? extends TakeStrategy> takeStrat, Class<? extends PutStrategy> putStrat, int capacity)",
                    "public static <E> BlockingQueue<E> org.jctools.queues.blocking.BlockingQueueFactory.newBlockingQueue(ConcurrentQueueSpec qs, Class<? extends TakeStrategy> takeStratClass, Class<? extends PutStrategy> putStratClass)"
                ]
            },
            "af3c1bec8f9a17d7cb0ea05b27be8ea72158d21b": {
                "jctools-experimental/src/main/java/org/jctools/queues/blocking/BlockingQueueFactory.java": [
                    "private static <E> BlockingQueue<E> org.jctools.queues.blocking.BlockingQueueFactory.getBlockingQueueFrom(Class<? extends Queue> queueClass, Class<? extends TakeStrategy> takeStrat, Class<? extends PutStrategy> putStrat, int capacity)",
                    "public static <E> BlockingQueue<E> org.jctools.queues.blocking.BlockingQueueFactory.newBlockingQueue(ConcurrentQueueSpec qs, Class<? extends TakeStrategy> takeStratClass, Class<? extends PutStrategy> putStratClass)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "388944383fc2bc6f3e6a613f62cc28a7070d0203",
        "previous_commit": "59bdf775ff87832653535b383145115a73e3ee9b",
        "date": 1648103616,
        "releases": {
            "previous": "388944383fc2bc6f3e6a613f62cc28a7070d0203",
            "next": "388944383fc2bc6f3e6a613f62cc28a7070d0203"
        },
        "commit_message": "Use the ImportDeclaration(String, boolean, boolean) constructor\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "388944383fc2bc6f3e6a613f62cc28a7070d0203": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicQueueGenerator.java": [
                    "protected ImportDeclaration org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.importDeclaration(String name)",
                    "ImportDeclaration org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.staticImportDeclaration(String name)"
                ]
            },
            "59bdf775ff87832653535b383145115a73e3ee9b": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicQueueGenerator.java": [
                    "protected ImportDeclaration org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.importDeclaration(String name)",
                    "ImportDeclaration org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.staticImportDeclaration(String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "3ab9105d3225442f1747cdecd860c8e78361a11c",
        "previous_commit": "430a5309c320059f6527fb0e155d8cdb443fc8da",
        "date": 1502203177,
        "releases": {
            "previous": "3ab9105d3225442f1747cdecd860c8e78361a11c",
            "next": "3ab9105d3225442f1747cdecd860c8e78361a11c"
        },
        "commit_message": "Refactored to use the IndexedQueueSizeUtil\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "3ab9105d3225442f1747cdecd860c8e78361a11c": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.size()",
                    "public boolean org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.isEmpty()"
                ]
            },
            "430a5309c320059f6527fb0e155d8cdb443fc8da": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.size()",
                    "public boolean org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.isEmpty()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "7fd0e03104529604fadb64b9fe056d4435643868",
        "previous_commit": "7593bb014a43697af85decddf64d7cdc7a07fb72",
        "date": 1456590521,
        "releases": {
            "previous": "7fd0e03104529604fadb64b9fe056d4435643868",
            "next": "7fd0e03104529604fadb64b9fe056d4435643868"
        },
        "commit_message": "Prevent premature buffer resize",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "7fd0e03104529604fadb64b9fe056d4435643868": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "public boolean org.jctools.queues.MpscChunkedArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "public boolean org.jctools.queues.MpscGrowableArrayQueue<E>.offer(final E e)"
                ]
            },
            "7593bb014a43697af85decddf64d7cdc7a07fb72": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "public boolean org.jctools.queues.MpscChunkedArrayQueue<E>.offer(final E e)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "public boolean org.jctools.queues.MpscGrowableArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "c3d2454676ae8ddd10dc0559e8a7d98fda4f8c18",
        "previous_commit": "220f423fb8283288d80a0389d2958468e5ae9d48",
        "date": 1403202588,
        "releases": {
            "previous": "c3d2454676ae8ddd10dc0559e8a7d98fda4f8c18",
            "next": "c3d2454676ae8ddd10dc0559e8a7d98fda4f8c18"
        },
        "commit_message": "Add an unbounded MPSC implementation and trim the linked queue\ninfrastructure to match.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "c3d2454676ae8ddd10dc0559e8a7d98fda4f8c18": {
                "jctools-core/src/main/java/org/jctools/queues/QueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.QueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public boolean org.jctools.queues.SpscLinkedQueue<E>.offer(E e)"
                ]
            },
            "220f423fb8283288d80a0389d2958468e5ae9d48": {
                "jctools-core/src/main/java/org/jctools/queues/QueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.QueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public boolean org.jctools.queues.SpscLinkedQueue<E>.offer(E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "6a87c82d3f8665eaf9ce27a57b457e1db7de40ca",
        "previous_commit": "e671fad0d4e82987d270210c902431a62deba167",
        "date": 1457196720,
        "releases": {
            "previous": "6a87c82d3f8665eaf9ce27a57b457e1db7de40ca",
            "next": "6a87c82d3f8665eaf9ce27a57b457e1db7de40ca"
        },
        "commit_message": "Simplified producer limit handling for MPSC chunked, split tests",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "6a87c82d3f8665eaf9ce27a57b457e1db7de40ca": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "private void org.jctools.queues.MpscChunkedArrayQueue<E>.resize(long currentProducerIndex, E[] buffer, long mask, E e, long currentConsumerIndex)",
                    "public boolean org.jctools.queues.MpscChunkedArrayQueue<E>.offer(final E e)"
                ]
            },
            "e671fad0d4e82987d270210c902431a62deba167": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "private void org.jctools.queues.MpscChunkedArrayQueue<E>.resize(long currentProducerIndex, E[] buffer, long mask, E e, long currentConsumerIndex)",
                    "public boolean org.jctools.queues.MpscChunkedArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "53b3105054f598509bedfd6923f95a7ec99aa7e1",
        "previous_commit": "7ed346282598c66b07558005ecbac07d094ba81b",
        "date": 1536398210,
        "releases": {
            "previous": "53b3105054f598509bedfd6923f95a7ec99aa7e1",
            "next": "53b3105054f598509bedfd6923f95a7ec99aa7e1"
        },
        "commit_message": "Fixes #216: Size of SpscGrowableArrayQueue can exceeds max capacity\n\nAdjust producer limit in order to allow one more element to be added\nin place of the unneeded JUMP when the max capacity producer buffer\nhas been allocated\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "53b3105054f598509bedfd6923f95a7ec99aa7e1": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath( final E[] buffer, final long mask, final long index, final long offset, final E v, final Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscGrowableAtomicArrayQueue.java": [
                    "final boolean org.jctools.queues.atomic.SpscGrowableAtomicArrayQueue<E>.offerColdPath(final AtomicReferenceArray<E> buffer, final long mask, final long index, final int offset, final E v, final Supplier<? extends E> s)"
                ]
            },
            "7ed346282598c66b07558005ecbac07d094ba81b": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath( final E[] buffer, final long mask, final long index, final long offset, final E v, final Supplier<? extends E> s)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscGrowableAtomicArrayQueue.java": [
                    "final boolean org.jctools.queues.atomic.SpscGrowableAtomicArrayQueue<E>.offerColdPath(final AtomicReferenceArray<E> buffer, final long mask, final long index, final int offset, final E v, final Supplier<? extends E> s)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "15b12a18b8d129dbe57588ecc4dd032f4ab157d4",
        "previous_commit": "65ec59c8f818f9904e5489b0c16063e6ed9fb72b",
        "date": 1574317537,
        "releases": {
            "previous": "15b12a18b8d129dbe57588ecc4dd032f4ab157d4",
            "next": "15b12a18b8d129dbe57588ecc4dd032f4ab157d4"
        },
        "commit_message": "Clarify javadoc for linked queue, touch up MPQ javadoc\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "15b12a18b8d129dbe57588ecc4dd032f4ab157d4": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public E org.jctools.queues.MpscLinkedQueue<E>.poll()",
                    "public E org.jctools.queues.MpscLinkedQueue<E>.peek()"
                ]
            },
            "65ec59c8f818f9904e5489b0c16063e6ed9fb72b": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public E org.jctools.queues.MpscLinkedQueue<E>.poll()",
                    "public E org.jctools.queues.MpscLinkedQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d81b8df5fefaccf7ac8243c25d747f2f47b73b43",
        "previous_commit": "eb7128ea51952bba3686434eb4a8a6b8363aa608",
        "date": 1457275565,
        "releases": {
            "previous": "d81b8df5fefaccf7ac8243c25d747f2f47b73b43",
            "next": "d81b8df5fefaccf7ac8243c25d747f2f47b73b43"
        },
        "commit_message": "Testing out a theory that issue is in relaxed poll/peek methods",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d81b8df5fefaccf7ac8243c25d747f2f47b73b43": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "public E org.jctools.queues.MpscChunkedArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscChunkedArrayQueue<E>.relaxedPeek()"
                ]
            },
            "eb7128ea51952bba3686434eb4a8a6b8363aa608": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "public E org.jctools.queues.MpscChunkedArrayQueue<E>.relaxedPoll()",
                    "public E org.jctools.queues.MpscChunkedArrayQueue<E>.relaxedPeek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "330b16178fea45223693936a52d686a8ae4585c8",
        "previous_commit": "d0d6dbf5dda1d83c8a4a3cd651f7716bd90901a9",
        "date": 1469193899,
        "releases": {
            "previous": "330b16178fea45223693936a52d686a8ae4585c8",
            "next": "330b16178fea45223693936a52d686a8ae4585c8"
        },
        "commit_message": "Refactor size into a utility class",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "330b16178fea45223693936a52d686a8ae4585c8": {
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public final int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "public final int org.jctools.queues.MpscChunkedArrayQueue<E>.size()"
                ]
            },
            "d0d6dbf5dda1d83c8a4a3cd651f7716bd90901a9": {
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "public int org.jctools.queues.BaseSpscLinkedArrayQueue<E>.size()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "public final int org.jctools.queues.MpscChunkedArrayQueue<E>.size()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "f66531ff8a8797cb703bfe57321cdeac9aabee82",
        "previous_commit": "cd67ce1cc431d25ac6d1dc7d4e1f6cd68b25a739",
        "date": 1502728164,
        "releases": {
            "previous": "f66531ff8a8797cb703bfe57321cdeac9aabee82",
            "next": "f66531ff8a8797cb703bfe57321cdeac9aabee82"
        },
        "commit_message": "Mpsc unbounded array queues homogenized\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "f66531ff8a8797cb703bfe57321cdeac9aabee82": {
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedArrayQueue.java": [
                    "protected int org.jctools.queues.MpscUnboundedArrayQueue<E>.getNextBufferSize(E[] buffer)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscUnboundedAtomicArrayQueue.java": [
                    "protected int org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue<E>.getNextBufferSize(AtomicReferenceArray<E> buffer)"
                ]
            },
            "cd67ce1cc431d25ac6d1dc7d4e1f6cd68b25a739": {
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedArrayQueue.java": [
                    "protected int org.jctools.queues.MpscUnboundedArrayQueue<E>.getNextBufferSize(E[] buffer)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscUnboundedAtomicArrayQueue.java": [
                    "protected int org.jctools.queues.atomic.MpscUnboundedAtomicArrayQueue<E>.getNextBufferSize(AtomicReferenceArray<E> buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "e0bec26bba5c5899cc57fd4c54a40eab6aab016f",
        "previous_commit": "f5ddd6577e77c6cf42d74fe5b79e625561ce8160",
        "date": 1572102863,
        "releases": {
            "previous": "e0bec26bba5c5899cc57fd4c54a40eab6aab016f",
            "next": "e0bec26bba5c5899cc57fd4c54a40eab6aab016f"
        },
        "commit_message": "Fixes #268 xadd qs could append chunks in batch\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "e0bec26bba5c5899cc57fd4c54a40eab6aab016f": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "private AtomicChunk<E> org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.producerBufferOf(AtomicChunk<E> producerBuffer, long expectedChunkIndex)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "private AtomicChunk<E> org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.producerBufferOf(AtomicChunk<E> producerBuffer, long expectedChunkIndex)"
                ]
            },
            "f5ddd6577e77c6cf42d74fe5b79e625561ce8160": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "private AtomicChunk<E> org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.producerBufferOf(AtomicChunk<E> producerBuffer, long expectedChunkIndex)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "private AtomicChunk<E> org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.producerBufferOf(AtomicChunk<E> producerBuffer, long expectedChunkIndex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "27a554a1e65725ef89b82d29fbafe46d2954b6fc",
        "previous_commit": "d4d160420d06ed16fb209dac0786aff55172dc34",
        "date": 1457808406,
        "releases": {
            "previous": "27a554a1e65725ef89b82d29fbafe46d2954b6fc",
            "next": "27a554a1e65725ef89b82d29fbafe46d2954b6fc"
        },
        "commit_message": "Use lp/spProducer node instead of direct. Optimize fill like MPSC.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "27a554a1e65725ef89b82d29fbafe46d2954b6fc": {
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public boolean org.jctools.queues.SpscLinkedQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            },
            "d4d160420d06ed16fb209dac0786aff55172dc34": {
                "jctools-core/src/main/java/org/jctools/queues/SpscLinkedQueue.java": [
                    "public boolean org.jctools.queues.SpscLinkedQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.SpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "03ed26e269e6a8a7a1c508475d417d1d85dabed3",
        "previous_commit": "74d52731d9979a13eac5220d64d34f45b8a67d56",
        "date": 1503505095,
        "releases": {
            "previous": "03ed26e269e6a8a7a1c508475d417d1d85dabed3",
            "next": "03ed26e269e6a8a7a1c508475d417d1d85dabed3"
        },
        "commit_message": "MpscLinkedAtomicQueue API breakage\n\nMotivation:\n4e68fd268b6d936c6e73aacb1badaa48586d539f introduced a new code generation utility. However this commit removed the public constructor for MpscLinkedAtomicQueue because MpscLinkedQueue has a static factory method and a protected constructor.\n\nModifications:\n- Restore the public constructor in MpscLinkedAtomicQueue\n\nResult:\nOriginal API restored for MpscLinkedAtomicQueue.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "03ed26e269e6a8a7a1c508475d417d1d85dabed3": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ConstructorDeclaration n, Void arg)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)"
                ]
            },
            "74d52731d9979a13eac5220d64d34f45b8a67d56": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ConstructorDeclaration n, Void arg)",
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "9db418cd41a08cb3b691e5bb363431d81a76bd3c",
        "previous_commit": "23432e5e22901348a5b251f9a620cf44a2253673",
        "date": 1551620918,
        "releases": {
            "previous": "9db418cd41a08cb3b691e5bb363431d81a76bd3c",
            "next": "9db418cd41a08cb3b691e5bb363431d81a76bd3c"
        },
        "commit_message": "Don't mark generated linked atomic queues as final\n\nReported in #208, fixed but subsequent regressed as fix edited generated\nsource. This change should fix it permanently.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "9db418cd41a08cb3b691e5bb363431d81a76bd3c": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.main(String[] args)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)"
                ]
            },
            "23432e5e22901348a5b251f9a620cf44a2253673": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "public static void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.main(String[] args)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "public void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.visit(ClassOrInterfaceDeclaration node, Void arg)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "73da0d72fe1fd9101a8ba429dce8d74f44b0d37a",
        "previous_commit": "0c7186b95f2af6d8770d04c9e8f1dadc6a8687f6",
        "date": 1409822610,
        "releases": {
            "previous": "73da0d72fe1fd9101a8ba429dce8d74f44b0d37a",
            "next": "73da0d72fe1fd9101a8ba429dce8d74f44b0d37a"
        },
        "commit_message": "remove redundant field loads from poll/peek",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "73da0d72fe1fd9101a8ba429dce8d74f44b0d37a": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public final E org.jctools.queues.MpscLinkedQueue<E>.peek()",
                    "public final E org.jctools.queues.MpscLinkedQueue<E>.poll()"
                ]
            },
            "0c7186b95f2af6d8770d04c9e8f1dadc6a8687f6": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public final E org.jctools.queues.MpscLinkedQueue<E>.peek()",
                    "public final E org.jctools.queues.MpscLinkedQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "88ca9a51ccc32e7949451c4ebe2149dcc395cf28",
        "previous_commit": "c209c08ffed574ed21511d4cada05b49aeeb6404",
        "date": 1573027610,
        "releases": {
            "previous": "88ca9a51ccc32e7949451c4ebe2149dcc395cf28",
            "next": "88ca9a51ccc32e7949451c4ebe2149dcc395cf28"
        },
        "commit_message": "Correct Modifier usage, delete empty javadoc\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "88ca9a51ccc32e7949451c4ebe2149dcc395cf28": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "private void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.patchAtomicFieldUpdaterAccessorMethods(ClassOrInterfaceDeclaration n)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "private void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.patchAtomicFieldUpdaterAccessorMethods(ClassOrInterfaceDeclaration n)"
                ]
            },
            "c209c08ffed574ed21511d4cada05b49aeeb6404": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "private void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.patchAtomicFieldUpdaterAccessorMethods(ClassOrInterfaceDeclaration n)"
                ],
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicLinkedQueueGenerator.java": [
                    "private void org.jctools.queues.atomic.JavaParsingAtomicLinkedQueueGenerator.patchAtomicFieldUpdaterAccessorMethods(ClassOrInterfaceDeclaration n)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "0100ba795769079dae0605c8751a014163fb27f7",
        "previous_commit": "602dcfc1cf6992caafc3e70f0c254d7397e346f7",
        "date": 1502728163,
        "releases": {
            "previous": "0100ba795769079dae0605c8751a014163fb27f7",
            "next": "0100ba795769079dae0605c8751a014163fb27f7"
        },
        "commit_message": "Mpsc chunked array queues homogenized\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "0100ba795769079dae0605c8751a014163fb27f7": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "protected int org.jctools.queues.MpscChunkedArrayQueue<E>.getNextBufferSize(E[] buffer)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscChunkedAtomicArrayQueue.java": [
                    "protected int org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue<E>.getNextBufferSize(AtomicReferenceArray<E> buffer)"
                ]
            },
            "602dcfc1cf6992caafc3e70f0c254d7397e346f7": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "protected int org.jctools.queues.MpscChunkedArrayQueue<E>.getNextBufferSize(E[] buffer)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscChunkedAtomicArrayQueue.java": [
                    "protected int org.jctools.queues.atomic.MpscChunkedAtomicArrayQueue<E>.getNextBufferSize(AtomicReferenceArray<E> buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "86de5a075afcda29d921ae0836557bd405595d9b",
        "previous_commit": "40ff3810d87e2aff32b0a8a7728a7fbe901bc42e",
        "date": 1477244316,
        "releases": {
            "previous": "86de5a075afcda29d921ae0836557bd405595d9b",
            "next": "86de5a075afcda29d921ae0836557bd405595d9b"
        },
        "commit_message": "Add licence, minor touches on review",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "86de5a075afcda29d921ae0836557bd405595d9b": {
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "private E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.newBufferPeek(E[] buffer, final long index)",
                    "private E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.newBufferPoll(E[] buffer, final long index)"
                ]
            },
            "40ff3810d87e2aff32b0a8a7728a7fbe901bc42e": {
                "jctools-core/src/main/java/org/jctools/queues/BaseSpscLinkedArrayQueue.java": [
                    "private E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.newBufferPeek(E[] buffer, final long index)",
                    "private E org.jctools.queues.BaseSpscLinkedArrayQueue<E>.newBufferPoll(E[] buffer, final long index)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "268cc9c0ec61c4a49bcb57849963fb7f75eb0914",
        "previous_commit": "4c7c9142f0a4fa93e0a6db6cb846509707d6aa52",
        "date": 1503135874,
        "releases": {
            "previous": "268cc9c0ec61c4a49bcb57849963fb7f75eb0914",
            "next": "268cc9c0ec61c4a49bcb57849963fb7f75eb0914"
        },
        "commit_message": "Remove isEmpty check in clear(), queues obey poll contract for a while now\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "268cc9c0ec61c4a49bcb57849963fb7f75eb0914": {
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "public void org.jctools.queues.ConcurrentCircularArrayQueue<E>.clear()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/AtomicReferenceArrayQueue.java": [
                    "public void org.jctools.queues.atomic.AtomicReferenceArrayQueue<E>.clear()"
                ]
            },
            "4c7c9142f0a4fa93e0a6db6cb846509707d6aa52": {
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "public void org.jctools.queues.ConcurrentCircularArrayQueue<E>.clear()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/AtomicReferenceArrayQueue.java": [
                    "public void org.jctools.queues.atomic.AtomicReferenceArrayQueue<E>.clear()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "615c6583174a1a9a8928b6ed0efa8f2e1a1b6798",
        "previous_commit": "76cac16452fa3c2f4ae7eae9b86cd0138896c9e2",
        "date": 1451551831,
        "releases": {
            "previous": "615c6583174a1a9a8928b6ed0efa8f2e1a1b6798",
            "next": "615c6583174a1a9a8928b6ed0efa8f2e1a1b6798"
        },
        "commit_message": "decrmenet size before element ordered store",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "615c6583174a1a9a8928b6ed0efa8f2e1a1b6798": {
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.remove(Object val)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.removeSlowPath(Object val, final E[] buffer, final long mask, final int hashCode, final int hash)"
                ]
            },
            "76cac16452fa3c2f4ae7eae9b86cd0138896c9e2": {
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "public boolean org.jctools.sets.SingleWriterHashSet<E>.remove(Object val)",
                    "private boolean org.jctools.sets.SingleWriterHashSet<E>.removeSlowPath(Object val, final E[] buffer, final long mask, final int hashCode, final int hash)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "57a7a0bdba1d913dbbb189ab72017b66d80d8cfb",
        "previous_commit": "1ec9a26f3530cce515c8a8d3eaa32ef68b830de6",
        "date": 1482083766,
        "releases": {
            "previous": "57a7a0bdba1d913dbbb189ab72017b66d80d8cfb",
            "next": "57a7a0bdba1d913dbbb189ab72017b66d80d8cfb"
        },
        "commit_message": "Replaced ordered release of message slot with a plain one.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "57a7a0bdba1d913dbbb189ab72017b66d80d8cfb": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public void org.jctools.queues.MpscArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)"
                ]
            },
            "1ec9a26f3530cce515c8a8d3eaa32ef68b830de6": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public void org.jctools.queues.MpscArrayQueue<E>.drain(Consumer<E> c, WaitStrategy w, ExitCondition exit)",
                    "public int org.jctools.queues.MpscArrayQueue<E>.drain(final Consumer<E> c, final int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "214133a2c7204426acc9fbb6f1242eaf3785659e",
        "previous_commit": "9250fe316ec84209cbba0a41682f341256df781e",
        "date": 1558884237,
        "releases": {
            "previous": "214133a2c7204426acc9fbb6f1242eaf3785659e",
            "next": "214133a2c7204426acc9fbb6f1242eaf3785659e"
        },
        "commit_message": "Generalize iterator support to all array backed impls\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "214133a2c7204426acc9fbb6f1242eaf3785659e": {
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "public final Iterator<E> org.jctools.queues.ConcurrentCircularArrayQueue<E>.iterator()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/AtomicReferenceArrayQueue.java": [
                    "public final Iterator<E> org.jctools.queues.atomic.AtomicReferenceArrayQueue<E>.iterator()"
                ]
            },
            "9250fe316ec84209cbba0a41682f341256df781e": {
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "public Iterator<E> org.jctools.queues.ConcurrentCircularArrayQueue<E>.iterator()"
                ],
                "jctools-core/src/main/java/org/jctools/queues/atomic/AtomicReferenceArrayQueue.java": [
                    "public Iterator<E> org.jctools.queues.atomic.AtomicReferenceArrayQueue<E>.iterator()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "fb57af84310403b71141f72316d4cbdad5de191a",
        "previous_commit": "16042ddd06557b3acbb2a869d8df833f4ed7b4fd",
        "date": 1395841988,
        "releases": {
            "previous": "fb57af84310403b71141f72316d4cbdad5de191a",
            "next": "fb57af84310403b71141f72316d4cbdad5de191a"
        },
        "commit_message": "Localized buffer field read.",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "fb57af84310403b71141f72316d4cbdad5de191a": {
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueue.java": [
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.poll()",
                    "public int io.jaq.mpmc.MpmcConcurrentQueue<E>.offerStatus(final E e)"
                ]
            },
            "16042ddd06557b3acbb2a869d8df833f4ed7b4fd": {
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueue.java": [
                    "public E io.jaq.mpmc.MpmcConcurrentQueue<E>.poll()",
                    "public int io.jaq.mpmc.MpmcConcurrentQueue<E>.offerStatus(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "9183995d3d1619753b61bf676046b97bb20998aa",
        "previous_commit": "4db7bd71c4a70093eeafc4545668a7d227d940d0",
        "date": 1451570834,
        "releases": {
            "previous": "9183995d3d1619753b61bf676046b97bb20998aa",
            "next": "9183995d3d1619753b61bf676046b97bb20998aa"
        },
        "commit_message": "Organize imports and shit",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "9183995d3d1619753b61bf676046b97bb20998aa": {
                "jctools-experimental/src/main/java/org/jctools/sets/IdentityOpenHashSet.java": [
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.compactAndRemove(final E[] buffer, final int mask, int removeHashIndex)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/OpenHashSet.java": [
                    "private void org.jctools.sets.OpenHashSet<E>.compactAndRemove(final E[] buffer, final int mask, int removeHashIndex)"
                ]
            },
            "4db7bd71c4a70093eeafc4545668a7d227d940d0": {
                "jctools-experimental/src/main/java/org/jctools/sets/IdentityOpenHashSet.java": [
                    "private void org.jctools.sets.IdentityOpenHashSet<E>.compactAndRemove(final E[] buffer, final int mask, int removeHashIndex)"
                ],
                "jctools-experimental/src/main/java/org/jctools/sets/OpenHashSet.java": [
                    "private void org.jctools.sets.OpenHashSet<E>.compactAndRemove(final E[] buffer, final int mask, int removeHashIndex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "c9550f66d88fce7daf8d012a2c1606a1b51d80a5",
        "previous_commit": "df93e1087d850dfe4e1e07a6473adcdfb95a9ea7",
        "date": 1390826411,
        "releases": {
            "previous": "c9550f66d88fce7daf8d012a2c1606a1b51d80a5",
            "next": "c9550f66d88fce7daf8d012a2c1606a1b51d80a5"
        },
        "commit_message": "revert 32 bit change, turns out to make it worse",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "c9550f66d88fce7daf8d012a2c1606a1b51d80a5": {
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBuffer.java": [
                    "private long io.jaq.spsc.FFBuffer<E>.offset(long index)"
                ],
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatch.java": [
                    "private long io.jaq.spsc.FFBufferWithOfferBatch<E>.offset(long index)"
                ]
            },
            "df93e1087d850dfe4e1e07a6473adcdfb95a9ea7": {
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBuffer.java": [
                    "private long io.jaq.spsc.FFBuffer<E>.offset(long index)"
                ],
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatch.java": [
                    "private long io.jaq.spsc.FFBufferWithOfferBatch<E>.offset(long index)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "3baf7bdfd5e464d3291f670291754b0c0fd439d4",
        "previous_commit": "8196da37f7c84a1f166f170420803c820c03515a",
        "date": 1596708600,
        "releases": {
            "previous": "3baf7bdfd5e464d3291f670291754b0c0fd439d4",
            "next": "3baf7bdfd5e464d3291f670291754b0c0fd439d4"
        },
        "commit_message": "Fixes #310: MpmcUnboundedXaddArrayQueue#peek/relaxedPeek can load \"future\" elements\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "3baf7bdfd5e464d3291f670291754b0c0fd439d4": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.peek()"
                ]
            },
            "8196da37f7c84a1f166f170420803c820c03515a": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPeek()",
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "755f57e7c57eb3261697c4e012ed7b13e34a49d9",
        "previous_commit": "108313878beace7d397e4d5cb00d0b349be358cb",
        "date": 1404124987,
        "releases": {
            "previous": "755f57e7c57eb3261697c4e012ed7b13e34a49d9",
            "next": "755f57e7c57eb3261697c4e012ed7b13e34a49d9"
        },
        "commit_message": "Move alternative interfaces into experimental until better thought out.\nRemove Growth from spec and use capacity 0 as unbounded.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "755f57e7c57eb3261697c4e012ed7b13e34a49d9": {
                "jctools-core/src/main/java/org/jctools/queues/QueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.QueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public int org.jctools.queues.SpscArrayQueue<E>.size()"
                ]
            },
            "108313878beace7d397e4d5cb00d0b349be358cb": {
                "jctools-core/src/main/java/org/jctools/queues/QueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.QueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public int org.jctools.queues.SpscArrayQueue<E>.size()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "0790a2b2dd04e7efd058b7863f8b5a1c18a0ca72",
        "previous_commit": "14250a5699d7cd58998d49faf818a86011dc1c75",
        "date": 1577083729,
        "releases": {
            "previous": "0790a2b2dd04e7efd058b7863f8b5a1c18a0ca72",
            "next": "0790a2b2dd04e7efd058b7863f8b5a1c18a0ca72"
        },
        "commit_message": "Refactor for clarity and split out an XADD qualification\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "0790a2b2dd04e7efd058b7863f8b5a1c18a0ca72": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "private LinkedQueueNode<E> org.jctools.queues.MpscLinkedQueue<E>.xchgProducerNode(LinkedQueueNode<E> newVal)"
                ],
                "jctools-experimental/src/main/java/org/jctools/counters/CountersFactory.java": [
                    "public static FixedSizeStripedLongCounter org.jctools.counters.CountersFactory.createFixedSizeStripedCounter(int stripesCount)"
                ]
            },
            "14250a5699d7cd58998d49faf818a86011dc1c75": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "private LinkedQueueNode<E> org.jctools.queues.MpscLinkedQueue<E>.xchgProducerNode(LinkedQueueNode<E> newVal)"
                ],
                "jctools-experimental/src/main/java/org/jctools/counters/CountersFactory.java": [
                    "public static FixedSizeStripedLongCounter org.jctools.counters.CountersFactory.createFixedSizeStripedCounter(int stripesCount)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "0f39ec0f090844e8441e80b2dc8a15dddd1ab5b9",
        "previous_commit": "d052716b4c9cdd248fe8a70ccb9900169f7e29ba",
        "date": 1457620802,
        "releases": {
            "previous": "0f39ec0f090844e8441e80b2dc8a15dddd1ab5b9",
            "next": "0f39ec0f090844e8441e80b2dc8a15dddd1ab5b9"
        },
        "commit_message": "null out forward pointer to next buffer",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "0f39ec0f090844e8441e80b2dc8a15dddd1ab5b9": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "private E[] org.jctools.queues.SpscGrowableArrayQueue<E>.getNextBuffer(final E[] buffer, final long mask)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "private E[] org.jctools.queues.SpscUnboundedArrayQueue<E>.lvNext(E[] curr)"
                ]
            },
            "d052716b4c9cdd248fe8a70ccb9900169f7e29ba": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "private E[] org.jctools.queues.SpscGrowableArrayQueue<E>.getNextBuffer(final E[] buffer, final long mask)"
                ],
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "private E[] org.jctools.queues.SpscUnboundedArrayQueue<E>.lvNext(E[] curr)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b0389223dcedc791b21069bd0bdce940b79f42db",
        "previous_commit": "671c0a8163ed2a2126ce0be63aa48f067e6486cc",
        "date": 1573027610,
        "releases": {
            "previous": "b0389223dcedc791b21069bd0bdce940b79f42db",
            "next": "b0389223dcedc791b21069bd0bdce940b79f42db"
        },
        "commit_message": "Cleaner resolution of MpscLinkedQueue + bump new major version\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "b0389223dcedc791b21069bd0bdce940b79f42db": {
                "jctools-core/src/main/java/org/jctools/queues/QueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.QueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/blocking/BlockingQueueFactory.java": [
                    "public static <E> BlockingQueue<E> org.jctools.queues.blocking.BlockingQueueFactory.newBlockingQueue(ConcurrentQueueSpec qs, Class<? extends TakeStrategy> takeStratClass, Class<? extends PutStrategy> putStratClass)"
                ]
            },
            "671c0a8163ed2a2126ce0be63aa48f067e6486cc": {
                "jctools-core/src/main/java/org/jctools/queues/QueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.QueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ],
                "jctools-experimental/src/main/java/org/jctools/queues/blocking/BlockingQueueFactory.java": [
                    "public static <E> BlockingQueue<E> org.jctools.queues.blocking.BlockingQueueFactory.newBlockingQueue(ConcurrentQueueSpec qs, Class<? extends TakeStrategy> takeStratClass, Class<? extends PutStrategy> putStratClass)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "48e66a8622368579e78525bdfa454a462bc09f52",
        "previous_commit": "27a554a1e65725ef89b82d29fbafe46d2954b6fc",
        "date": 1457985220,
        "releases": {
            "previous": "48e66a8622368579e78525bdfa454a462bc09f52",
            "next": "48e66a8622368579e78525bdfa454a462bc09f52"
        },
        "commit_message": "implement fill, prevent GC nepotism of linked arrays",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "48e66a8622368579e78525bdfa454a462bc09f52": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "private E[] org.jctools.queues.MpscChunkedArrayQueue<E>.getNextBuffer(final E[] buffer, final long mask)",
                    "public void org.jctools.queues.MpscChunkedArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ]
            },
            "27a554a1e65725ef89b82d29fbafe46d2954b6fc": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "private E[] org.jctools.queues.MpscChunkedArrayQueue<E>.getNextBuffer(final E[] buffer, final long mask)",
                    "public void org.jctools.queues.MpscChunkedArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "eb7128ea51952bba3686434eb4a8a6b8363aa608",
        "previous_commit": "d960881dd9bc273cfe2d685b90409d08b0f1c20e",
        "date": 1457274538,
        "releases": {
            "previous": "eb7128ea51952bba3686434eb4a8a6b8363aa608",
            "next": "eb7128ea51952bba3686434eb4a8a6b8363aa608"
        },
        "commit_message": "Let chunked cover Growable funtionality, disabling Mpq tests.\n\nChunked queue is still buggy it seems, working through the kinks.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "eb7128ea51952bba3686434eb4a8a6b8363aa608": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "private long org.jctools.queues.MpscChunkedArrayQueue<E>.newBufferAndOffset(E[] nextBuffer, final long index)",
                    "public boolean org.jctools.queues.MpscChunkedArrayQueue<E>.offer(final E e)"
                ]
            },
            "d960881dd9bc273cfe2d685b90409d08b0f1c20e": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "private long org.jctools.queues.MpscChunkedArrayQueue<E>.newBufferAndOffset(E[] nextBuffer, final long index)",
                    "public boolean org.jctools.queues.MpscChunkedArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b617919e68032633abf10abcfa1348bbecde05a6",
        "previous_commit": "9f745a0917ad750c9b3ad1a3d019d1d94bd19af1",
        "date": 1554629565,
        "releases": {
            "previous": "b617919e68032633abf10abcfa1348bbecde05a6",
            "next": "b617919e68032633abf10abcfa1348bbecde05a6"
        },
        "commit_message": "Protect the producer index in case of OutOfMemoryError (atomic q)\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "b617919e68032633abf10abcfa1348bbecde05a6": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ]
            },
            "9f745a0917ad750c9b3ad1a3d019d1d94bd19af1": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseMpscLinkedAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.offer(final E e)",
                    "public int org.jctools.queues.atomic.BaseMpscLinkedAtomicArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "3929b870026c85af020208bd878f408d37258234",
        "previous_commit": "13fdb7ba9106d80e00f5b832b823c5fa257cc573",
        "date": 1419766644,
        "releases": {
            "previous": "3929b870026c85af020208bd878f408d37258234",
            "next": "3929b870026c85af020208bd878f408d37258234"
        },
        "commit_message": "sparse.shift defaults to 0 everywhere",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "3929b870026c85af020208bd878f408d37258234": {
                "jctools-experimental/src/main/java/org/jctools/queues/MpscSequencedArrayQueue.java": [
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpscSequencedArrayQueue<E>.size()"
                ]
            },
            "13fdb7ba9106d80e00f5b832b823c5fa257cc573": {
                "jctools-experimental/src/main/java/org/jctools/queues/MpscSequencedArrayQueue.java": [
                    "public E org.jctools.queues.MpscSequencedArrayQueue<E>.poll()",
                    "public int org.jctools.queues.MpscSequencedArrayQueue<E>.size()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d55a7e4a8ce0eaa1b735e27ca0ef32508731032b",
        "previous_commit": "d9ecfcac2f93394dfebb1cba0a3e1ba4ddf78c8c",
        "date": 1496603781,
        "releases": {
            "previous": "d55a7e4a8ce0eaa1b735e27ca0ef32508731032b",
            "next": "d55a7e4a8ce0eaa1b735e27ca0ef32508731032b"
        },
        "commit_message": "Add guava-testlib to core, add tests to NonBlockingHashMap, fix issue with NPE in entry set\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d55a7e4a8ce0eaa1b735e27ca0ef32508731032b": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "public boolean org.jctools.maps.NonBlockingHashMapLong<TypeV>.contains(final Object o)",
                    "public Set<Map.Entry<Long,TypeV>> org.jctools.maps.NonBlockingHashMapLong<TypeV>.entrySet()"
                ]
            },
            "d9ecfcac2f93394dfebb1cba0a3e1ba4ddf78c8c": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "public boolean org.jctools.maps.NonBlockingHashMapLong<TypeV>.contains(final Object o)",
                    "public Set<Map.Entry<Long,TypeV>> org.jctools.maps.NonBlockingHashMapLong<TypeV>.entrySet()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "aeeffff7815c97fd5d57dfdaaea1a6eaba2e15dd",
        "previous_commit": "1475be5e072677ecb657bd80649025a00fdf43bd",
        "date": 1559050835,
        "releases": {
            "previous": "aeeffff7815c97fd5d57dfdaaea1a6eaba2e15dd",
            "next": "aeeffff7815c97fd5d57dfdaaea1a6eaba2e15dd"
        },
        "commit_message": "Fix #244 for the long map version. Fix issue for other replace case\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "aeeffff7815c97fd5d57dfdaaea1a6eaba2e15dd": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "private Object org.jctools.maps.NonBlockingHashMapLong<TypeV>.putIfMatch( final long key, final Object putval, final Object expVal )"
                ]
            },
            "1475be5e072677ecb657bd80649025a00fdf43bd": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "private Object org.jctools.maps.NonBlockingHashMapLong<TypeV>.putIfMatch( final long key, final Object putval, final Object expVal )"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "7701391b9172e14aa7d078ea46cdc670060b30dc",
        "previous_commit": "2a8bc99719eae71fb0885e4159156d79b4277108",
        "date": 1406663946,
        "releases": {
            "previous": "7701391b9172e14aa7d078ea46cdc670060b30dc",
            "next": "7701391b9172e14aa7d078ea46cdc670060b30dc"
        },
        "commit_message": "split out and rename receiver interface and cleanup formatting\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "7701391b9172e14aa7d078ea46cdc670060b30dc": {
                "jctools-experimental/src/main/java/org/jctools/queues/SpscOffHeapIntQueue.java": [
                    "public int org.jctools.queues.SpscOffHeapIntQueue.peekInt()"
                ]
            },
            "2a8bc99719eae71fb0885e4159156d79b4277108": {
                "jctools-experimental/src/main/java/org/jctools/queues/SpscOffHeapIntQueue.java": [
                    "public int org.jctools.queues.SpscOffHeapIntQueue.peekInt()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "27f6e8cfa29f06dc0f68a62965422fba38348527",
        "previous_commit": "688bd2a470ac874584c323c940c5eca6e832ad32",
        "date": 1477248518,
        "releases": {
            "previous": "27f6e8cfa29f06dc0f68a62965422fba38348527",
            "next": "27f6e8cfa29f06dc0f68a62965422fba38348527"
        },
        "commit_message": "Fix #135",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "27f6e8cfa29f06dc0f68a62965422fba38348527": {
                "jctools-core/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "protected int org.jctools.queues.MpscGrowableArrayQueue<E>.getNextBufferSize(E[] buffer)"
                ]
            },
            "688bd2a470ac874584c323c940c5eca6e832ad32": {
                "jctools-core/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "protected int org.jctools.queues.MpscGrowableArrayQueue<E>.getNextBufferSize(E[] buffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "2e0a935dcb30db562b17b631d35784068d92f1b7",
        "previous_commit": "8aefeaab0d0f415a92ca81aed1b3b62281f5abd4",
        "date": 1435934171,
        "releases": {
            "previous": "2e0a935dcb30db562b17b631d35784068d92f1b7",
            "next": "2e0a935dcb30db562b17b631d35784068d92f1b7"
        },
        "commit_message": "correct getRequiredSize to reflect message aligment",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "2e0a935dcb30db562b17b631d35784068d92f1b7": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "public static int org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.getRequiredBufferSize(final int capacity, final int messageSize)"
                ]
            },
            "8aefeaab0d0f415a92ca81aed1b3b62281f5abd4": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "public static int org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.getRequiredBufferSize(final int capacity, final int messageSize)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "7158447331c16f466c0fd5929bd9f1a4b41f4394",
        "previous_commit": "93fd1e8efd10708093fbe4d92391949114350167",
        "date": 1423166043,
        "releases": {
            "previous": "7158447331c16f466c0fd5929bd9f1a4b41f4394",
            "next": "7158447331c16f466c0fd5929bd9f1a4b41f4394"
        },
        "commit_message": "fix test to account for marker being 4 bytes\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "7158447331c16f466c0fd5929bd9f1a4b41f4394": {
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/Mapper.java": [
                    "public int org.jctools.channels.mapping.Mapper<S>.getSizeInBytes()"
                ]
            },
            "93fd1e8efd10708093fbe4d92391949114350167": {
                "jctools-experimental/src/main/java/org/jctools/channels/mapping/Mapper.java": [
                    "public int org.jctools.channels.mapping.Mapper<S>.getSizeInBytes()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "9ba3c461e79e511c88efeb1785438402b6b3f25a",
        "previous_commit": "a58782751fcda9a80a395c2874df7c4c021253ba",
        "date": 1429108678,
        "releases": {
            "previous": "9ba3c461e79e511c88efeb1785438402b6b3f25a",
            "next": "9ba3c461e79e511c88efeb1785438402b6b3f25a"
        },
        "commit_message": "fixes #58.\nNow chases nodes all the way from consumer node to producer node.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "9ba3c461e79e511c88efeb1785438402b6b3f25a": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "public final int org.jctools.queues.BaseLinkedQueue<E>.size()"
                ]
            },
            "a58782751fcda9a80a395c2874df7c4c021253ba": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "public final int org.jctools.queues.BaseLinkedQueue<E>.size()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "9f8bbc050a9e348739635612d4f956165a983a35",
        "previous_commit": "4dd6a42be66628bc3646bc5cc59b9feb8d83e927",
        "date": 1386235490,
        "releases": {
            "previous": "9f8bbc050a9e348739635612d4f956165a983a35",
            "next": "9f8bbc050a9e348739635612d4f956165a983a35"
        },
        "commit_message": "Better defaults for batch sizing",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "9f8bbc050a9e348739635612d4f956165a983a35": {
                "jaq-inabox/src/main/java/io/jaq/spsc/BQueue.java": [
                    "boolean io.jaq.spsc.BQueue<E>.backtrackPoll()"
                ]
            },
            "4dd6a42be66628bc3646bc5cc59b9feb8d83e927": {
                "jaq-inabox/src/main/java/io/jaq/spsc/BQueue.java": [
                    "boolean io.jaq.spsc.BQueue<E>.backtrackPoll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "3a911b4a4ceebb4968ba2bda01d030e0bff8b3e2",
        "previous_commit": "78f5df48580bd858dde9cd9bb6a47a4186d27e72",
        "date": 1451231960,
        "releases": {
            "previous": "3a911b4a4ceebb4968ba2bda01d030e0bff8b3e2",
            "next": "3a911b4a4ceebb4968ba2bda01d030e0bff8b3e2"
        },
        "commit_message": "Move reference array constants to util class.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "3a911b4a4ceebb4968ba2bda01d030e0bff8b3e2": {
                "jctools-core/src/main/java/org/jctools/queues/PaddedCircularArrayOffsetCalculator.java": [
                    "protected static long org.jctools.queues.PaddedCircularArrayOffsetCalculator.calcElementOffset(long index, long mask)"
                ]
            },
            "78f5df48580bd858dde9cd9bb6a47a4186d27e72": {
                "jctools-core/src/main/java/org/jctools/queues/PaddedCircularArrayOffsetCalculator.java": [
                    "protected static long org.jctools.queues.PaddedCircularArrayOffsetCalculator.calcElementOffset(long index, long mask)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "16415766ddfaa183c01b5bc3d6e6c438b567c391",
        "previous_commit": "52d4e78a1ad2e64daa36de0ef1995140584d45b0",
        "date": 1502203176,
        "releases": {
            "previous": "16415766ddfaa183c01b5bc3d6e6c438b567c391",
            "next": "16415766ddfaa183c01b5bc3d6e6c438b567c391"
        },
        "commit_message": "Padded SpmcAtomicArrayQueue fields\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "16415766ddfaa183c01b5bc3d6e6c438b567c391": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "protected final void org.jctools.queues.atomic.SpmcAtomicArrayQueueProducerIndexCacheField<E>.svProducerIndexCache(long v)"
                ]
            },
            "52d4e78a1ad2e64daa36de0ef1995140584d45b0": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpmcAtomicArrayQueue.java": [
                    "protected final void org.jctools.queues.atomic.SpmcAtomicArrayQueue<E>.svProducerIndexCache(long v)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "4c6c15d35cd08c2d5536c1c482dae82879af7894",
        "previous_commit": "c77c100b1e0549bf83f5d55b9df6eb0667b76b73",
        "date": 1462024225,
        "releases": {
            "previous": "4c6c15d35cd08c2d5536c1c482dae82879af7894",
            "next": "4c6c15d35cd08c2d5536c1c482dae82879af7894"
        },
        "commit_message": "Continued cleanup actions\n\nPull up common poll/peek/offer methods\nSplit out test\nRan benchmarks show marked improvement.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "4c6c15d35cd08c2d5536c1c482dae82879af7894": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "private long org.jctools.queues.SpscGrowableArrayQueue<E>.nextArrayOffset(final long mask)"
                ]
            },
            "c77c100b1e0549bf83f5d55b9df6eb0667b76b73": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "private long org.jctools.queues.SpscGrowableArrayQueue<E>.nextArrayOffset(final long mask)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "43e1db72263d562f74a3f0b094a79aee71b1e355",
        "previous_commit": "9755432ff729bfa9a0e77aac12eee778f0d5a47c",
        "date": 1406813161,
        "releases": {
            "previous": "43e1db72263d562f74a3f0b094a79aee71b1e355",
            "next": "43e1db72263d562f74a3f0b094a79aee71b1e355"
        },
        "commit_message": "add some doc and minor cleanup",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "43e1db72263d562f74a3f0b094a79aee71b1e355": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "private long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.offsetForIndex(final long currentHead)"
                ]
            },
            "9755432ff729bfa9a0e77aac12eee778f0d5a47c": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "private long org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.offsetForIndex(final long currentHead)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "738b440127b5c9ea722357ab2b3859019e5784c2",
        "previous_commit": "fa2e32554ae52ddedbf5ddd10555715422a11f47",
        "date": 1406721963,
        "releases": {
            "previous": "738b440127b5c9ea722357ab2b3859019e5784c2",
            "next": "738b440127b5c9ea722357ab2b3859019e5784c2"
        },
        "commit_message": "format and extract constant\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "738b440127b5c9ea722357ab2b3859019e5784c2": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeRelease(long offset)"
                ]
            },
            "fa2e32554ae52ddedbf5ddd10555715422a11f47": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "protected final void org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.writeRelease(long offset)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "40b09c9f69ffd2cd9d6f8e4d5ce32e9f84fcaedd",
        "previous_commit": "aafc977c9d102a14a6a2707026ba06ea4464793d",
        "date": 1502187689,
        "releases": {
            "previous": "40b09c9f69ffd2cd9d6f8e4d5ce32e9f84fcaedd",
            "next": "40b09c9f69ffd2cd9d6f8e4d5ce32e9f84fcaedd"
        },
        "commit_message": "Final on method args to be consistent with SpscArrayQueue and other\nmethods\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "40b09c9f69ffd2cd9d6f8e4d5ce32e9f84fcaedd": {
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public E org.jctools.queues.SpscArrayQueue<E>.peek()"
                ]
            },
            "aafc977c9d102a14a6a2707026ba06ea4464793d": {
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public E org.jctools.queues.SpscArrayQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d3ffae4c0d253922aec8ed407794f8a705b4ea5b",
        "previous_commit": "3539dfae62b2a7b0bc60966eefd507dc3eb5d059",
        "date": 1614793579,
        "releases": {
            "previous": "d3ffae4c0d253922aec8ed407794f8a705b4ea5b",
            "next": "d3ffae4c0d253922aec8ed407794f8a705b4ea5b"
        },
        "commit_message": "Fix #339 `fill` wakeup spin\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d3ffae4c0d253922aec8ed407794f8a705b4ea5b": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            },
            "3539dfae62b2a7b0bc60966eefd507dc3eb5d059": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d64cdc16c3ebaf4692c5d376bd0852fe262e28bc",
        "previous_commit": "2e0a935dcb30db562b17b631d35784068d92f1b7",
        "date": 1435938685,
        "releases": {
            "previous": "d64cdc16c3ebaf4692c5d376bd0852fe262e28bc",
            "next": "d64cdc16c3ebaf4692c5d376bd0852fe262e28bc"
        },
        "commit_message": "reduce code duplication between Spsc/Mpsc channel code. Fixed #71.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d64cdc16c3ebaf4692c5d376bd0852fe262e28bc": {
                "jctools-experimental/src/main/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBuffer.java": [
                    "protected final long org.jctools.channels.mpsc.MpscOffHeapFixedSizeRingBuffer.writeAcquire()"
                ]
            },
            "2e0a935dcb30db562b17b631d35784068d92f1b7": {
                "jctools-experimental/src/main/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBuffer.java": [
                    "protected final long org.jctools.channels.mpsc.MpscOffHeapFixedSizeRingBuffer.writeAcquire()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b467d291e700845c0d03bbd57fcf1e6db85201c9",
        "previous_commit": "7e4eb241e0e5e6f59a32c78cde953cecebeff14c",
        "date": 1573041825,
        "releases": {
            "previous": "b467d291e700845c0d03bbd57fcf1e6db85201c9",
            "next": "b467d291e700845c0d03bbd57fcf1e6db85201c9"
        },
        "commit_message": "Fix LGTM warning, potential int overflow bug\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "b467d291e700845c0d03bbd57fcf1e6db85201c9": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingSetInt.java": [
                    "private static long org.jctools.maps.NonBlockingSetInt.rawIndex(final long[] ary, final int idx)"
                ]
            },
            "7e4eb241e0e5e6f59a32c78cde953cecebeff14c": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingSetInt.java": [
                    "private static long org.jctools.maps.NonBlockingSetInt.rawIndex(final long[] ary, final int idx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "a55b32e932fef02a07fd9aaef7f853348982b1d5",
        "previous_commit": "2cf0e663414192271195b6a22ec8733b49fa2362",
        "date": 1440709455,
        "releases": {
            "previous": "a55b32e932fef02a07fd9aaef7f853348982b1d5",
            "next": "a55b32e932fef02a07fd9aaef7f853348982b1d5"
        },
        "commit_message": "Fix bug in MPSC fill",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "a55b32e932fef02a07fd9aaef7f853348982b1d5": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s)"
                ]
            },
            "2cf0e663414192271195b6a22ec8733b49fa2362": {
                "jctools-core/src/main/java/org/jctools/queues/MpscArrayQueue.java": [
                    "public int org.jctools.queues.MpscArrayQueue<E>.fill(Supplier<E> s)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "15d944c72be21d546d1f71594587043b808a33f6",
        "previous_commit": "b467d291e700845c0d03bbd57fcf1e6db85201c9",
        "date": 1573041861,
        "releases": {
            "previous": "15d944c72be21d546d1f71594587043b808a33f6",
            "next": "15d944c72be21d546d1f71594587043b808a33f6"
        },
        "commit_message": "Fix LGTM warning, potential int overflow bug\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "15d944c72be21d546d1f71594587043b808a33f6": {
                "jctools-core/src/main/java/org/jctools/maps/ConcurrentAutoTable.java": [
                    "private static long org.jctools.maps.ConcurrentAutoTable.rawIndex(long[] ary, int i)"
                ]
            },
            "b467d291e700845c0d03bbd57fcf1e6db85201c9": {
                "jctools-core/src/main/java/org/jctools/maps/ConcurrentAutoTable.java": [
                    "private static long org.jctools.maps.ConcurrentAutoTable.rawIndex(long[] ary, int i)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d07d4a729f9b733934b2ee5cc81207edccd927d9",
        "previous_commit": "7c427d89576e2b59b43f7dd50a13a2488f732794",
        "date": 1390761456,
        "releases": {
            "previous": "d07d4a729f9b733934b2ee5cc81207edccd927d9",
            "next": "d07d4a729f9b733934b2ee5cc81207edccd927d9"
        },
        "commit_message": "minor changes to CQProducer interface(work in progress)",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d07d4a729f9b733934b2ee5cc81207edccd927d9": {
                "jaq-inabox/src/main/java/io/jaq/ConcurrentQueueFactory.java": [
                    "public static <E> ConcurrentQueue<E> io.jaq.ConcurrentQueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            },
            "7c427d89576e2b59b43f7dd50a13a2488f732794": {
                "jaq-inabox/src/main/java/io/jaq/ConcurrentQueueFactory.java": [
                    "public static <E> ConcurrentQueue<E> io.jaq.ConcurrentQueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "03ea92350d494868bdb714dbd08106cad62379d6",
        "previous_commit": "88ca9a51ccc32e7949451c4ebe2149dcc395cf28",
        "date": 1573032491,
        "releases": {
            "previous": "03ea92350d494868bdb714dbd08106cad62379d6",
            "next": "03ea92350d494868bdb714dbd08106cad62379d6"
        },
        "commit_message": "mpsc xadd q relaxedPeek cannot assume element presence\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "03ea92350d494868bdb714dbd08106cad62379d6": {
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPeek()"
                ]
            },
            "88ca9a51ccc32e7949451c4ebe2149dcc395cf28": {
                "jctools-core/src/main/java/org/jctools/queues/MpscUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpscUnboundedXaddArrayQueue<E>.relaxedPeek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "28913526283e4ae32f954a59e08bd8b85265ac78",
        "previous_commit": "ea37d2a6900d78f34dbde59e9d246f670f2acedd",
        "date": 1590327128,
        "releases": {
            "previous": "28913526283e4ae32f954a59e08bd8b85265ac78",
            "next": "28913526283e4ae32f954a59e08bd8b85265ac78"
        },
        "commit_message": "Fix inconsistent size of FF based queues causing potential `size()` > `capacity()`\n\nFix #297\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "28913526283e4ae32f954a59e08bd8b85265ac78": {
                "jctools-core/src/main/java/org/jctools/queues/IndexedQueueSizeUtil.java": [
                    "public static int org.jctools.queues.IndexedQueueSizeUtil.size(IndexedQueue iq)"
                ]
            },
            "ea37d2a6900d78f34dbde59e9d246f670f2acedd": {
                "jctools-core/src/main/java/org/jctools/queues/IndexedQueueSizeUtil.java": [
                    "public static int org.jctools.queues.IndexedQueueSizeUtil.size(IndexedQueue iq)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "2837f083f1eaa21c513d70ab28f714bbbca01e7c",
        "previous_commit": "aeeffff7815c97fd5d57dfdaaea1a6eaba2e15dd",
        "date": 1560288108,
        "releases": {
            "previous": "2837f083f1eaa21c513d70ab28f714bbbca01e7c",
            "next": "2837f083f1eaa21c513d70ab28f714bbbca01e7c"
        },
        "commit_message": "MpscBlockingConsumerArrayQueue interruption fixes\n\nAfter consumer is interrupted in take() method:\n- Ensure queue reverts to original non-blocked state (revert producer\nindex and blocking field) - otherwise for example a subsequent `poll()`\nwill spin indefinitely\n- Clear interrupt flag (consistent with equivalent j.u.c. behaviour)\n\nExtended unit tests to cover the above",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "2837f083f1eaa21c513d70ab28f714bbbca01e7c": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.take()"
                ]
            },
            "aeeffff7815c97fd5d57dfdaaea1a6eaba2e15dd": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.take()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "74477eaa00d1c9efe693bd86b705f3ee5aa57b67",
        "previous_commit": "a38a62ee52d75b912ee7a36989030f9601b7234a",
        "date": 1406748544,
        "releases": {
            "previous": "74477eaa00d1c9efe693bd86b705f3ee5aa57b67",
            "next": "74477eaa00d1c9efe693bd86b705f3ee5aa57b67"
        },
        "commit_message": "do more bytecode generation to specialise a couple of method invocations\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "74477eaa00d1c9efe693bd86b705f3ee5aa57b67": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannel.java": [
                    "public ChannelConsumer org.jctools.channels.spsc.SpscChannel<E>.consumer(ChannelReceiver<E> receiver)"
                ]
            },
            "a38a62ee52d75b912ee7a36989030f9601b7234a": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannel.java": [
                    "public ChannelConsumer org.jctools.channels.spsc.SpscChannel<E>.consumer(ChannelReceiver<E> receiver)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "f9a09d8f2140939e7cd89417f68d6c048e664b38",
        "previous_commit": "7ed5d31be4cd32175aa1e88e6c5406451079672e",
        "date": 1573041753,
        "releases": {
            "previous": "f9a09d8f2140939e7cd89417f68d6c048e664b38",
            "next": "f9a09d8f2140939e7cd89417f68d6c048e664b38"
        },
        "commit_message": "Fix LGTM warning, and buffer sizing overflow bug (in experimental code)\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "f9a09d8f2140939e7cd89417f68d6c048e664b38": {
                "jctools-experimental/src/main/java/org/jctools/queues/SpscOffHeapIntQueue.java": [
                    "public static int org.jctools.queues.SpscOffHeapIntQueue.getRequiredBufferSize(final int capacity)"
                ]
            },
            "7ed5d31be4cd32175aa1e88e6c5406451079672e": {
                "jctools-experimental/src/main/java/org/jctools/queues/SpscOffHeapIntQueue.java": [
                    "public static int org.jctools.queues.SpscOffHeapIntQueue.getRequiredBufferSize(final int capacity)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "8d447a5818323062feeef142bb47f90409f05181",
        "previous_commit": "3813555870bd0413f6673fb4f71377623008d00c",
        "date": 1397911749,
        "releases": {
            "previous": "8d447a5818323062feeef142bb47f90409f05181",
            "next": "8d447a5818323062feeef142bb47f90409f05181"
        },
        "commit_message": "SPSC Unbounded linked queue",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "8d447a5818323062feeef142bb47f90409f05181": {
                "jaq-inabox/src/main/java/io/jaq/ConcurrentQueueFactory.java": [
                    "public static <E> ConcurrentQueue<E> io.jaq.ConcurrentQueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            },
            "3813555870bd0413f6673fb4f71377623008d00c": {
                "jaq-inabox/src/main/java/io/jaq/ConcurrentQueueFactory.java": [
                    "public static <E> ConcurrentQueue<E> io.jaq.ConcurrentQueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "36a108edc90366e848c7bf05a6022c9822ac2997",
        "previous_commit": "6f301124ecf070b47ec3213db397a994a9730135",
        "date": 1502727549,
        "releases": {
            "previous": "36a108edc90366e848c7bf05a6022c9822ac2997",
            "next": "36a108edc90366e848c7bf05a6022c9822ac2997"
        },
        "commit_message": "SPSC: Changed method signature of offerColdPath to be consistent with unsafe\nvariant\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "36a108edc90366e848c7bf05a6022c9822ac2997": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.offer(final E e)"
                ]
            },
            "6f301124ecf070b47ec3213db397a994a9730135": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseSpscLinkedAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.BaseSpscLinkedAtomicArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "2bba51d6ab575bbe90b31fb66437fc7793f6d7c5",
        "previous_commit": "06c45d8dd5ecbc518914ab4ff453b931c0fb367a",
        "date": 1420492452,
        "releases": {
            "previous": "2bba51d6ab575bbe90b31fb66437fc7793f6d7c5",
            "next": "2bba51d6ab575bbe90b31fb66437fc7793f6d7c5"
        },
        "commit_message": "Fix a bug in offer method.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "2bba51d6ab575bbe90b31fb66437fc7793f6d7c5": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "public final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offer(final E e)"
                ]
            },
            "06c45d8dd5ecbc518914ab4ff453b931c0fb367a": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "public final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "57c692dd5e6ff255cc9f4d3aae25a8f27491e755",
        "previous_commit": "d9ecfcac2f93394dfebb1cba0a3e1ba4ddf78c8c",
        "date": 1492966535,
        "releases": {
            "previous": "57c692dd5e6ff255cc9f4d3aae25a8f27491e755",
            "next": "57c692dd5e6ff255cc9f4d3aae25a8f27491e755"
        },
        "commit_message": "Add guava-testlib dependency to experimental package, add coverage test to SingleWriterHashSet, fix Iterator#remove contract issue\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "57c692dd5e6ff255cc9f4d3aae25a8f27491e755": {
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "public void org.jctools.sets.SingleWriterHashSet<E>.remove()"
                ]
            },
            "d9ecfcac2f93394dfebb1cba0a3e1ba4ddf78c8c": {
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "public void org.jctools.sets.SingleWriterHashSet<E>.remove()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "5fa405bf335e54c0dbc3f994a65d6499bded0cc6",
        "previous_commit": "9a44566e30a4b1a81a7dde714bcf9c3fff0abb48",
        "date": 1409836752,
        "releases": {
            "previous": "5fa405bf335e54c0dbc3f994a65d6499bded0cc6",
            "next": "5fa405bf335e54c0dbc3f994a65d6499bded0cc6"
        },
        "commit_message": "Fix hung tests, reversed condition",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "5fa405bf335e54c0dbc3f994a65d6499bded0cc6": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public final E org.jctools.queues.MpscLinkedQueue<E>.peek()"
                ]
            },
            "9a44566e30a4b1a81a7dde714bcf9c3fff0abb48": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public final E org.jctools.queues.MpscLinkedQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "5d60bdb2f886c1b99179d809184c4290c6c6c48e",
        "previous_commit": "82d2dfdb1703f40731a749ffabca11bcb108e855",
        "date": 1423304712,
        "releases": {
            "previous": "5d60bdb2f886c1b99179d809184c4290c6c6c48e",
            "next": "5d60bdb2f886c1b99179d809184c4290c6c6c48e"
        },
        "commit_message": "<face palm> refactoring error, must run tests before commit",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "5d60bdb2f886c1b99179d809184c4290c6c6c48e": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "private boolean org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.isMessageReady(long offset)"
                ]
            },
            "82d2dfdb1703f40731a749ffabca11bcb108e855": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscOffHeapFixedSizeRingBuffer.java": [
                    "private boolean org.jctools.channels.spsc.SpscOffHeapFixedSizeRingBuffer.isMessageReady(long offset)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "7783fe20c754315121ddef2c23105a0b5db88373",
        "previous_commit": "054b242035f7d62ef6739ce2d79b32db1dcf9188",
        "date": 1404400959,
        "releases": {
            "previous": "7783fe20c754315121ddef2c23105a0b5db88373",
            "next": "7783fe20c754315121ddef2c23105a0b5db88373"
        },
        "commit_message": "C&P is a PITA",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "7783fe20c754315121ddef2c23105a0b5db88373": {
                "jctools-core/src/main/java/org/jctools/queues/QueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.QueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            },
            "054b242035f7d62ef6739ce2d79b32db1dcf9188": {
                "jctools-core/src/main/java/org/jctools/queues/QueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.QueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "a70a5def5d6be55840564802402f623047946e79",
        "previous_commit": "02156821949fe2476ddadb865c7b96e1ec0ebcaa",
        "date": 1500907521,
        "releases": {
            "previous": "a70a5def5d6be55840564802402f623047946e79",
            "next": "a70a5def5d6be55840564802402f623047946e79"
        },
        "commit_message": "Fix bug in refactoring\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "a70a5def5d6be55840564802402f623047946e79": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath( E[] buffer, long mask, long index, long offset, E v, Supplier<? extends E> s)"
                ]
            },
            "02156821949fe2476ddadb865c7b96e1ec0ebcaa": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath( E[] buffer, long mask, long index, long offset, E v, Supplier<? extends E> s)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "194c8f31b3a44f35614a7d1dbc46c79893b6e2f0",
        "previous_commit": "9ba3c461e79e511c88efeb1785438402b6b3f25a",
        "date": 1429108770,
        "releases": {
            "previous": "194c8f31b3a44f35614a7d1dbc46c79893b6e2f0",
            "next": "194c8f31b3a44f35614a7d1dbc46c79893b6e2f0"
        },
        "commit_message": "Limit the scope of size() to the consumerNode/producer node at time of\nrequest as opposed to chasing the producer threads.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "194c8f31b3a44f35614a7d1dbc46c79893b6e2f0": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "public final int org.jctools.queues.BaseLinkedQueue<E>.size()"
                ]
            },
            "9ba3c461e79e511c88efeb1785438402b6b3f25a": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "public final int org.jctools.queues.BaseLinkedQueue<E>.size()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "72c3d2ba029fd5d54cb51c3be892a442e25d5acc",
        "previous_commit": "b36ee2a19c29fd6e8bed9f41cc082ceca2f4f59b",
        "date": 1560447989,
        "releases": {
            "previous": "72c3d2ba029fd5d54cb51c3be892a442e25d5acc",
            "next": "72c3d2ba029fd5d54cb51c3be892a442e25d5acc"
        },
        "commit_message": "Refine handling of timeout arguments",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "72c3d2ba029fd5d54cb51c3be892a442e25d5acc": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.poll(long timeout, TimeUnit unit)"
                ]
            },
            "b36ee2a19c29fd6e8bed9f41cc082ceca2f4f59b": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.poll(long timeout, TimeUnit unit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "173423c1ddb3a072566597386121f3684cb2c9b7",
        "previous_commit": "4b7d2acd4bd499305b4ff4c3efdd4eb3e661d952",
        "date": 1707896775,
        "releases": {
            "previous": "173423c1ddb3a072566597386121f3684cb2c9b7",
            "next": "173423c1ddb3a072566597386121f3684cb2c9b7"
        },
        "commit_message": "Addressing Nitsan's comment\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "173423c1ddb3a072566597386121f3684cb2c9b7": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicQueueGenerator.java": [
                    "public void org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.organiseImports(CompilationUnit cu)"
                ]
            },
            "4b7d2acd4bd499305b4ff4c3efdd4eb3e661d952": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicQueueGenerator.java": [
                    "public void org.jctools.queues.atomic.JavaParsingAtomicQueueGenerator.organiseImports(CompilationUnit cu)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b30036626a4ac432a8a64f714323e9708c933b76",
        "previous_commit": "12b19a5a70f8c4badd119f011ed02de9b7e591a9",
        "date": 1419191588,
        "releases": {
            "previous": "b30036626a4ac432a8a64f714323e9708c933b76",
            "next": "b30036626a4ac432a8a64f714323e9708c933b76"
        },
        "commit_message": "clean up public API to expose less implementation details\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "b30036626a4ac432a8a64f714323e9708c933b76": {
                "jctools-experimental/src/main/java/org/jctools/util/SimpleCompiler.java": [
                    "public CompilationResult org.jctools.util.SimpleCompiler.compile(final List<StringWrappingJavaFile> javaFiles)"
                ]
            },
            "12b19a5a70f8c4badd119f011ed02de9b7e591a9": {
                "jctools-experimental/src/main/java/org/jctools/util/SimpleCompiler.java": [
                    "public CompilationResult org.jctools.util.SimpleCompiler.compile( final List<StringWrappingJavaFile> javaFiles)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "15604e6739ed358b87482d989b71934c840e1686",
        "previous_commit": "fac2ec8dd57e793538002792d1aeeb6fa9f406cf",
        "date": 1388577116,
        "releases": {
            "previous": "15604e6739ed358b87482d989b71934c840e1686",
            "next": "15604e6739ed358b87482d989b71934c840e1686"
        },
        "commit_message": "Formatting",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "15604e6739ed358b87482d989b71934c840e1686": {
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatchCq.java": [
                    "public E io.jaq.spsc.FFBufferWithOfferBatchCq<E>.peek()"
                ]
            },
            "fac2ec8dd57e793538002792d1aeeb6fa9f406cf": {
                "jaq-inabox/src/main/java/io/jaq/spsc/FFBufferWithOfferBatchCq.java": [
                    "public E io.jaq.spsc.FFBufferWithOfferBatchCq<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "0c0a78ac8ebd14ca3cdc4e14cdc184bf2914dc98",
        "previous_commit": "62659754d0fab65f21a47429805b9cfb58a2032b",
        "date": 1502187671,
        "releases": {
            "previous": "0c0a78ac8ebd14ca3cdc4e14cdc184bf2914dc98",
            "next": "0c0a78ac8ebd14ca3cdc4e14cdc184bf2914dc98"
        },
        "commit_message": "SpscAtomicArrayQueue size() method now uses IndexedQueueSizeUtil, which\nis the same core logic but with extra wrap-around checks and this\nmirrors the SpscArrayQueue better.\n\nAs a consequence lvConsumerIndex and lvProducerIndex are now public\nmethods.\n\nReordered method declarations to match the ordering of SpscArrayQueue.\n\nRemoved unused imports.\n\n3 methods at the end, size(), currentProducerIndex() and\ncurrentConsumerIndex() are undeclared in SpscArrayQueue because they are\ninherited from ConcurrentCircularArrayQueue.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "0c0a78ac8ebd14ca3cdc4e14cdc184bf2914dc98": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.size()"
                ]
            },
            "62659754d0fab65f21a47429805b9cfb58a2032b": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.size()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "62659754d0fab65f21a47429805b9cfb58a2032b",
        "previous_commit": "2fce44a63bb5a6a7af8be26f5e87df849e9988de",
        "date": 1502187671,
        "releases": {
            "previous": "62659754d0fab65f21a47429805b9cfb58a2032b",
            "next": "62659754d0fab65f21a47429805b9cfb58a2032b"
        },
        "commit_message": "Refactored peek() method to be more similar to SpscArrayQueue (albeit\ntechnically it's a redundant change)\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "62659754d0fab65f21a47429805b9cfb58a2032b": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.peek()"
                ]
            },
            "2fce44a63bb5a6a7af8be26f5e87df849e9988de": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "0ef3df124c06efd365de4a1fa20a0bd74b85d9d0",
        "previous_commit": "f9028a366b72cb7f8cd26054f5bb14061cd6b49d",
        "date": 1480035856,
        "releases": {
            "previous": "0ef3df124c06efd365de4a1fa20a0bd74b85d9d0",
            "next": "0ef3df124c06efd365de4a1fa20a0bd74b85d9d0"
        },
        "commit_message": "Refactoring the createSpscProxy method to pull out small routines\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "0ef3df124c06efd365de4a1fa20a0bd74b85d9d0": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "public static <E> ProxyChannel<E> org.jctools.channels.proxy.ProxyChannelFactory.createSpscProxy(int capacity, Class<E> iFace, WaitStrategy waitStrategy)"
                ]
            },
            "f9028a366b72cb7f8cd26054f5bb14061cd6b49d": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "public static <E> ProxyChannel<E> org.jctools.channels.proxy.ProxyChannelFactory.createSpscProxy(int capacity, Class<E> iFace, WaitStrategy waitStrategy)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d5e3af9f69127dab44dd92bff60ec897c10471e3",
        "previous_commit": "4f02323244c0e9cea90161781e3caa9e57df362f",
        "date": 1614263472,
        "releases": {
            "previous": "d5e3af9f69127dab44dd92bff60ec897c10471e3",
            "next": "d5e3af9f69127dab44dd92bff60ec897c10471e3"
        },
        "commit_message": "NBHM/Long/Identity keySet/values/entrySet iterator.remove fixes\n\nFix #334 : NBHMLong iterators do not remove NO_KEY\nFix #335 : NBHM/Long/Identity keySet() iterator only removes keys if values have not changed\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d5e3af9f69127dab44dd92bff60ec897c10471e3": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "public void org.jctools.maps.NonBlockingHashMapLong<TypeV>.remove()"
                ]
            },
            "4f02323244c0e9cea90161781e3caa9e57df362f": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "public void org.jctools.maps.NonBlockingHashMapLong<TypeV>.remove()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "179309f915f799be2e6eff087b12e65429e0724b",
        "previous_commit": "73df853335d9020f03c9ef1db7ad1ad263e4a19f",
        "date": 1397404885,
        "releases": {
            "previous": "179309f915f799be2e6eff087b12e65429e0724b",
            "next": "179309f915f799be2e6eff087b12e65429e0724b"
        },
        "commit_message": "Add size method for mpsc compound",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "179309f915f799be2e6eff087b12e65429e0724b": {
                "jaq-inabox/src/main/java/io/jaq/mpsc/MpscCompoundQueue.java": [
                    "public int io.jaq.mpsc.MpscCompoundQueue<E>.size()"
                ]
            },
            "73df853335d9020f03c9ef1db7ad1ad263e4a19f": {
                "jaq-inabox/src/main/java/io/jaq/mpsc/MpscCompoundQueue.java": [
                    "public int io.jaq.mpsc.MpscCompoundQueue<E>.size()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "c6836e8c9da17455a351b335c323ff697b4d832a",
        "previous_commit": "cf35ee35b2c66f2f72db8bf604fc650141f9b6df",
        "date": 1578047793,
        "releases": {
            "previous": "c6836e8c9da17455a351b335c323ff697b4d832a",
            "next": "c6836e8c9da17455a351b335c323ff697b4d832a"
        },
        "commit_message": "mpmc xadd q poll docs + clearing up names (#282)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "c6836e8c9da17455a351b335c323ff697b4d832a": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()"
                ]
            },
            "cf35ee35b2c66f2f72db8bf604fc650141f9b6df": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d699ec5e4e8d5c9e47234d26d9321c9aeb29cfe7",
        "previous_commit": "67ea0270ac81d66ea92e4ab0b9a7b15440972348",
        "date": 1439208315,
        "releases": {
            "previous": "d699ec5e4e8d5c9e47234d26d9321c9aeb29cfe7",
            "next": "d699ec5e4e8d5c9e47234d26d9321c9aeb29cfe7"
        },
        "commit_message": "Test producer index changed as indicator for trying to grab new index",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d699ec5e4e8d5c9e47234d26d9321c9aeb29cfe7": {
                "jctools-experimental/src/main/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBuffer.java": [
                    "protected final long org.jctools.channels.mpsc.MpscOffHeapFixedSizeRingBuffer.writeAcquire()"
                ]
            },
            "67ea0270ac81d66ea92e4ab0b9a7b15440972348": {
                "jctools-experimental/src/main/java/org/jctools/channels/mpsc/MpscOffHeapFixedSizeRingBuffer.java": [
                    "protected final long org.jctools.channels.mpsc.MpscOffHeapFixedSizeRingBuffer.writeAcquire()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "db96e947c022701e70ea658e875f19f91c1d8899",
        "previous_commit": "685ec8f883f6dddcee5b2febdb707ea4ef47407b",
        "date": 1429113466,
        "releases": {
            "previous": "db96e947c022701e70ea658e875f19f91c1d8899",
            "next": "db96e947c022701e70ea658e875f19f91c1d8899"
        },
        "commit_message": "Use load method",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "db96e947c022701e70ea658e875f19f91c1d8899": {
                "jctools-core/src/main/java/org/jctools/queues/LinkedQueueNode.java": [
                    "public E org.jctools.queues.LinkedQueueNode<E>.getAndNullValue()"
                ]
            },
            "685ec8f883f6dddcee5b2febdb707ea4ef47407b": {
                "jctools-core/src/main/java/org/jctools/queues/LinkedQueueNode.java": [
                    "public E org.jctools.queues.LinkedQueueNode<E>.getAndNullValue()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "f04cbd4e4cee9f29ffa15d841fd64e0ab8ac09a7",
        "previous_commit": "b5b8cdd99020589c4519c509786ffe6e60a4d674",
        "date": 1469197846,
        "releases": {
            "previous": "f04cbd4e4cee9f29ffa15d841fd64e0ab8ac09a7",
            "next": "f04cbd4e4cee9f29ffa15d841fd64e0ab8ac09a7"
        },
        "commit_message": "Revert size refactor for MPMC chunked",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "f04cbd4e4cee9f29ffa15d841fd64e0ab8ac09a7": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "public final int org.jctools.queues.MpscChunkedArrayQueue<E>.size()"
                ]
            },
            "b5b8cdd99020589c4519c509786ffe6e60a4d674": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "public final int org.jctools.queues.MpscChunkedArrayQueue<E>.size()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "559ddf7bc32671c04ad7cf8eef99ecccca2dac12",
        "previous_commit": "a0f522364851efef1eb3e2a386dbfc010ca679ab",
        "date": 1499800556,
        "releases": {
            "previous": "559ddf7bc32671c04ad7cf8eef99ecccca2dac12",
            "next": "559ddf7bc32671c04ad7cf8eef99ecccca2dac12"
        },
        "commit_message": "Add support for a default implementation of MessagePassingQueue for BaseSpscLinkedArrayQueue (and children).\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "559ddf7bc32671c04ad7cf8eef99ecccca2dac12": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "protected final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath(final E[] buffer, final long mask, final Supplier<? extends E> e, final long index, final long offset)"
                ]
            },
            "a0f522364851efef1eb3e2a386dbfc010ca679ab": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "protected final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath(final E[] buffer, final long mask, final E e, final long index, final long offset)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "8541ae5106e6239f36e871c383b0afa5837dbdd3",
        "previous_commit": "9aaf7ee79773864a7a64c0bfd2a780ce70a23d34",
        "date": 1500904493,
        "releases": {
            "previous": "8541ae5106e6239f36e871c383b0afa5837dbdd3",
            "next": "8541ae5106e6239f36e871c383b0afa5837dbdd3"
        },
        "commit_message": "Formatting and javadoc\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "8541ae5106e6239f36e871c383b0afa5837dbdd3": {
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "public void org.jctools.queues.ConcurrentCircularArrayQueue<E>.clear()"
                ]
            },
            "9aaf7ee79773864a7a64c0bfd2a780ce70a23d34": {
                "jctools-core/src/main/java/org/jctools/queues/ConcurrentCircularArrayQueue.java": [
                    "public void org.jctools.queues.ConcurrentCircularArrayQueue<E>.clear()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "76cac16452fa3c2f4ae7eae9b86cd0138896c9e2",
        "previous_commit": "03df0a555ac7a7429c1a8f41294b079d0b4ac7c7",
        "date": 1451551425,
        "releases": {
            "previous": "76cac16452fa3c2f4ae7eae9b86cd0138896c9e2",
            "next": "76cac16452fa3c2f4ae7eae9b86cd0138896c9e2"
        },
        "commit_message": "size() should volatile read the size field",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "76cac16452fa3c2f4ae7eae9b86cd0138896c9e2": {
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "public int org.jctools.sets.SingleWriterHashSet<E>.size()"
                ]
            },
            "03df0a555ac7a7429c1a8f41294b079d0b4ac7c7": {
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "public int org.jctools.sets.SingleWriterHashSet<E>.size()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "916559749f554b2423fc19c44badf911d811ad83",
        "previous_commit": "b13f0637c2f1796df9e4ee6b14bb0f4102202a15",
        "date": 1430134937,
        "releases": {
            "previous": "916559749f554b2423fc19c44badf911d811ad83",
            "next": "916559749f554b2423fc19c44badf911d811ad83"
        },
        "commit_message": "Remove ref. to MpscCompoundQueue which is Unsafe based",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "916559749f554b2423fc19c44badf911d811ad83": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/AtomicQueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.atomic.AtomicQueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            },
            "b13f0637c2f1796df9e4ee6b14bb0f4102202a15": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/AtomicQueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.atomic.AtomicQueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "3213f219f5184c5bda127086a35329d34db3e1e4",
        "previous_commit": "36a108edc90366e848c7bf05a6022c9822ac2997",
        "date": 1502727549,
        "releases": {
            "previous": "3213f219f5184c5bda127086a35329d34db3e1e4",
            "next": "3213f219f5184c5bda127086a35329d34db3e1e4"
        },
        "commit_message": "Spsc Growable queues homogenized\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "3213f219f5184c5bda127086a35329d34db3e1e4": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath( final E[] buffer, final long mask, final long index, final long offset, final E v, final Supplier<? extends E> s)"
                ]
            },
            "36a108edc90366e848c7bf05a6022c9822ac2997": {
                "jctools-core/src/main/java/org/jctools/queues/SpscGrowableArrayQueue.java": [
                    "final boolean org.jctools.queues.SpscGrowableArrayQueue<E>.offerColdPath( E[] buffer, long mask, long index, long offset, E v, Supplier<? extends E> s)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "dd4fd2273241a134f8544ebc1337e95c5797179c",
        "previous_commit": "eda5891c6832f379b7d076ecffe9be2338e63caf",
        "date": 1483009339,
        "releases": {
            "previous": "dd4fd2273241a134f8544ebc1337e95c5797179c",
            "next": "dd4fd2273241a134f8544ebc1337e95c5797179c"
        },
        "commit_message": "Fixes compilation error\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "dd4fd2273241a134f8544ebc1337e95c5797179c": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "private final CHM org.jctools.maps.NonBlockingHashMapLong<TypeV>.resize()"
                ]
            },
            "eda5891c6832f379b7d076ecffe9be2338e63caf": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "private final CHM org.jctools.maps.NonBlockingHashMapLong<TypeV>.resize()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d07783a2d69d96fb26069715e747748d38c5efe3",
        "previous_commit": "df2ca51f439ffa8d5f45a0cf389af34a534ed023",
        "date": 1574070949,
        "releases": {
            "previous": "d07783a2d69d96fb26069715e747748d38c5efe3",
            "next": "d07783a2d69d96fb26069715e747748d38c5efe3"
        },
        "commit_message": "Add MPQUtil import\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d07783a2d69d96fb26069715e747748d38c5efe3": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.organiseImports(CompilationUnit cu)"
                ]
            },
            "df2ca51f439ffa8d5f45a0cf389af34a534ed023": {
                "jctools-build/src/main/java/org/jctools/queues/atomic/JavaParsingAtomicArrayQueueGenerator.java": [
                    "void org.jctools.queues.atomic.JavaParsingAtomicArrayQueueGenerator.organiseImports(CompilationUnit cu)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b36ee2a19c29fd6e8bed9f41cc082ceca2f4f59b",
        "previous_commit": "aeeffff7815c97fd5d57dfdaaea1a6eaba2e15dd",
        "date": 1560289140,
        "releases": {
            "previous": "b36ee2a19c29fd6e8bed9f41cc082ceca2f4f59b",
            "next": "b36ee2a19c29fd6e8bed9f41cc082ceca2f4f59b"
        },
        "commit_message": "Add MpscBlockingConsumerArrayQueue::poll(long, TimeUnit) method\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "b36ee2a19c29fd6e8bed9f41cc082ceca2f4f59b": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.take()"
                ]
            },
            "aeeffff7815c97fd5d57dfdaaea1a6eaba2e15dd": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.take()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "834cf71ccbe137d12472b3214d151cbc8e3f4de2",
        "previous_commit": "a347534f75ccd827ce2864c2941adb25ea824daf",
        "date": 1506603962,
        "releases": {
            "previous": "834cf71ccbe137d12472b3214d151cbc8e3f4de2",
            "next": "834cf71ccbe137d12472b3214d151cbc8e3f4de2"
        },
        "commit_message": "Unbreak capacity broken in prev commit\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "834cf71ccbe137d12472b3214d151cbc8e3f4de2": {
                "jctools-core/src/main/java/org/jctools/queues/MpscRelaxedArrayQueue.java": [
                    "public int org.jctools.queues.MpscRelaxedArrayQueue<E>.capacity()"
                ]
            },
            "a347534f75ccd827ce2864c2941adb25ea824daf": {
                "jctools-core/src/main/java/org/jctools/queues/MpscRelaxedArrayQueue.java": [
                    "public int org.jctools.queues.MpscRelaxedArrayQueue<E>.capacity()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "3afd0f22b349f89c10e7795b8e7e5979a6a168aa",
        "previous_commit": "8cd041dfabbe679dd7681dd3a155ac922dfdc220",
        "date": 1496041711,
        "releases": {
            "previous": "3afd0f22b349f89c10e7795b8e7e5979a6a168aa",
            "next": "3afd0f22b349f89c10e7795b8e7e5979a6a168aa"
        },
        "commit_message": "Split out MpmcAtomicArrayQueue test case and add a fix #179 for Atomic version\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "3afd0f22b349f89c10e7795b8e7e5979a6a168aa": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.offer(final E e)"
                ]
            },
            "8cd041dfabbe679dd7681dd3a155ac922dfdc220": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpmcAtomicArrayQueue.java": [
                    "public boolean org.jctools.queues.atomic.MpmcAtomicArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b95d4f639a88c630c375aa4a8ab2ae54474cddfc",
        "previous_commit": "7d4551ab55959288d30edf31cc08a4222152fbaf",
        "date": 1404219658,
        "releases": {
            "previous": "b95d4f639a88c630c375aa4a8ab2ae54474cddfc",
            "next": "b95d4f639a88c630c375aa4a8ab2ae54474cddfc"
        },
        "commit_message": "missed file",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "b95d4f639a88c630c375aa4a8ab2ae54474cddfc": {
                "jctools-core/src/main/java/org/jctools/queues/QueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.QueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            },
            "7d4551ab55959288d30edf31cc08a4222152fbaf": {
                "jctools-core/src/main/java/org/jctools/queues/QueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.QueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "c00a9fac6385b5c90af2b6083494ee55cadfb4d2",
        "previous_commit": "19cbaae4501c310ce3afb1a7443187e244888310",
        "date": 1564377184,
        "releases": {
            "previous": "c00a9fac6385b5c90af2b6083494ee55cadfb4d2",
            "next": "c00a9fac6385b5c90af2b6083494ee55cadfb4d2"
        },
        "commit_message": "Mpmc Xadd q doesn't need load chunk index after chunk search on offer\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "c00a9fac6385b5c90af2b6083494ee55cadfb4d2": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public boolean org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.offer(E e)"
                ]
            },
            "19cbaae4501c310ce3afb1a7443187e244888310": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public boolean org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.offer(E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "78f5df48580bd858dde9cd9bb6a47a4186d27e72",
        "previous_commit": "9876084db8e4b64718c45defc10e124643304533",
        "date": 1451231005,
        "releases": {
            "previous": "78f5df48580bd858dde9cd9bb6a47a4186d27e72",
            "next": "78f5df48580bd858dde9cd9bb6a47a4186d27e72"
        },
        "commit_message": "Move slow path to own method.\n\nImproves compilation and method size for inlining.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "78f5df48580bd858dde9cd9bb6a47a4186d27e72": {
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)"
                ]
            },
            "9876084db8e4b64718c45defc10e124643304533": {
                "jctools-core/src/main/java/org/jctools/queues/SpscArrayQueue.java": [
                    "public boolean org.jctools.queues.SpscArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "f62531e1e4cf00d119fe0085d982e14dc1fc0fe8",
        "previous_commit": "9a134f65a2bd302cd3f8537d422f736827bbd0de",
        "date": 1474638846,
        "releases": {
            "previous": "f62531e1e4cf00d119fe0085d982e14dc1fc0fe8",
            "next": "f62531e1e4cf00d119fe0085d982e14dc1fc0fe8"
        },
        "commit_message": "demo code bug",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "f62531e1e4cf00d119fe0085d982e14dc1fc0fe8": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/DemoProxyResult.java": [
                    "public int org.jctools.channels.proxy.DemoProxyResult.process(Demo1 impl, int limit)"
                ]
            },
            "9a134f65a2bd302cd3f8537d422f736827bbd0de": {
                "jctools-experimental/src/main/java/org/jctools/channels/proxy/DemoProxyResult.java": [
                    "public int org.jctools.channels.proxy.DemoProxyResult.process(Demo1 impl, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "42a92bf143342182e6e849ddaaceea99c4ee27ea",
        "previous_commit": "ec71c35612142be4386858b78deb5756523c4781",
        "date": 1572879162,
        "releases": {
            "previous": "42a92bf143342182e6e849ddaaceea99c4ee27ea",
            "next": "42a92bf143342182e6e849ddaaceea99c4ee27ea"
        },
        "commit_message": "Handle unbounded configuration consistently\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "42a92bf143342182e6e849ddaaceea99c4ee27ea": {
                "jctools-core/src/main/java/org/jctools/queues/spec/ConcurrentQueueSpec.java": [
                    "public boolean org.jctools.queues.spec.ConcurrentQueueSpec.isBounded()"
                ]
            },
            "ec71c35612142be4386858b78deb5756523c4781": {
                "jctools-core/src/main/java/org/jctools/queues/spec/ConcurrentQueueSpec.java": [
                    "public boolean org.jctools.queues.spec.ConcurrentQueueSpec.isBounded()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "80d0efd0862f17f5741fb29ddd44114a159f6556",
        "previous_commit": "193b96724204402f206a07734c590a598d525158",
        "date": 1469186150,
        "releases": {
            "previous": "80d0efd0862f17f5741fb29ddd44114a159f6556",
            "next": "80d0efd0862f17f5741fb29ddd44114a159f6556"
        },
        "commit_message": "Add MPSC linked queue factory method",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "80d0efd0862f17f5741fb29ddd44114a159f6556": {
                "jctools-core/src/main/java/org/jctools/queues/QueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.QueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            },
            "193b96724204402f206a07734c590a598d525158": {
                "jctools-core/src/main/java/org/jctools/queues/QueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.QueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "f92da3d6919dae506b1e4737c587c6ed03e2eb61",
        "previous_commit": "b4eae437b65fee59eddc266a0b7f7c85e19b25bf",
        "date": 1606119282,
        "releases": {
            "previous": "f92da3d6919dae506b1e4737c587c6ed03e2eb61",
            "next": "f92da3d6919dae506b1e4737c587c6ed03e2eb61"
        },
        "commit_message": "Fix build on JDK 9 and later\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "f92da3d6919dae506b1e4737c587c6ed03e2eb61": {
                "jctools-channels/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "public static <E> ProxyChannel<E> org.jctools.channels.proxy.ProxyChannelFactory.createProxy(int capacity, Class<E> iFace, WaitStrategy waitStrategy, Class<? extends ProxyChannelRingBuffer> backendType)"
                ]
            },
            "b4eae437b65fee59eddc266a0b7f7c85e19b25bf": {
                "jctools-channels/src/main/java/org/jctools/channels/proxy/ProxyChannelFactory.java": [
                    "public static <E> ProxyChannel<E> org.jctools.channels.proxy.ProxyChannelFactory.createProxy(int capacity, Class<E> iFace, WaitStrategy waitStrategy, Class<? extends ProxyChannelRingBuffer> backendType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d0d6dbf5dda1d83c8a4a3cd651f7716bd90901a9",
        "previous_commit": "80d0efd0862f17f5741fb29ddd44114a159f6556",
        "date": 1469186192,
        "releases": {
            "previous": "d0d6dbf5dda1d83c8a4a3cd651f7716bd90901a9",
            "next": "d0d6dbf5dda1d83c8a4a3cd651f7716bd90901a9"
        },
        "commit_message": "improve linked queue size accuracy, enable size test for linked queues",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d0d6dbf5dda1d83c8a4a3cd651f7716bd90901a9": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "public final int org.jctools.queues.BaseLinkedQueue<E>.size()"
                ]
            },
            "80d0efd0862f17f5741fb29ddd44114a159f6556": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "public final int org.jctools.queues.BaseLinkedQueue<E>.size()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "771d92b957b6cdb43779a7d5dce245e9dff3c5fc",
        "previous_commit": "e8bf97017862797adaf9548385eb6e1978599923",
        "date": 1407255925,
        "releases": {
            "previous": "771d92b957b6cdb43779a7d5dce245e9dff3c5fc",
            "next": "771d92b957b6cdb43779a7d5dce245e9dff3c5fc"
        },
        "commit_message": "Decouple flyweight serialisation from channel implementation, fix #24\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "771d92b957b6cdb43779a7d5dce245e9dff3c5fc": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannel.java": [
                    "public ChannelConsumer org.jctools.channels.spsc.SpscChannel<E>.consumer(ChannelReceiver<E> receiver)"
                ]
            },
            "e8bf97017862797adaf9548385eb6e1978599923": {
                "jctools-experimental/src/main/java/org/jctools/channels/spsc/SpscChannel.java": [
                    "public ChannelConsumer org.jctools.channels.spsc.SpscChannel<E>.consumer(ChannelReceiver<E> receiver)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "00e2b147fef8fbcd2dd69004f98cb4c707301e1f",
        "previous_commit": "f74fa5ce35580e1b3e8e09b0d0a34c4242fcd706",
        "date": 1466926365,
        "releases": {
            "previous": "00e2b147fef8fbcd2dd69004f98cb4c707301e1f",
            "next": "00e2b147fef8fbcd2dd69004f98cb4c707301e1f"
        },
        "commit_message": "Force positive input to Pow2::roundTo",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "00e2b147fef8fbcd2dd69004f98cb4c707301e1f": {
                "jctools-core/src/main/java/org/jctools/util/Pow2.java": [
                    "public static int org.jctools.util.Pow2.roundToPowerOfTwo(final int value)"
                ]
            },
            "f74fa5ce35580e1b3e8e09b0d0a34c4242fcd706": {
                "jctools-core/src/main/java/org/jctools/util/Pow2.java": [
                    "public static int org.jctools.util.Pow2.roundToPowerOfTwo(final int value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "7878ab554d35c52bc0a5c590e426d98c09f4540d",
        "previous_commit": "e215fbecda1e9222d8eef51dcc7fef3b1565ca10",
        "date": 1573042095,
        "releases": {
            "previous": "7878ab554d35c52bc0a5c590e426d98c09f4540d",
            "next": "7878ab554d35c52bc0a5c590e426d98c09f4540d"
        },
        "commit_message": "Fix LGTM warning, remove pointless conditional (always false)\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "7878ab554d35c52bc0a5c590e426d98c09f4540d": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            },
            "e215fbecda1e9222d8eef51dcc7fef3b1565ca10": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "fd823b2255672f68190e6dce7a60be17722b517e",
        "previous_commit": "52cc477cda74a0b70776e02595e0309ba189d032",
        "date": 1395927578,
        "releases": {
            "previous": "fd823b2255672f68190e6dce7a60be17722b517e",
            "next": "fd823b2255672f68190e6dce7a60be17722b517e"
        },
        "commit_message": "off by one error",
        "jmh_dependency": {
            "benchmark_directory": "jaq-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "fd823b2255672f68190e6dce7a60be17722b517e": {
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueueCq.java": [
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueueCq<E>.offer(final E e)"
                ]
            },
            "52cc477cda74a0b70776e02595e0309ba189d032": {
                "jaq-inabox/src/main/java/io/jaq/mpmc/MpmcConcurrentQueueCq.java": [
                    "public boolean io.jaq.mpmc.MpmcConcurrentQueueCq<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "869c67964f230766bf25b5c40d52939326716284",
        "previous_commit": "ea6ac4c4b7ab05fd7839edc9d8100e2412b0718c",
        "date": 1429341547,
        "releases": {
            "previous": "869c67964f230766bf25b5c40d52939326716284",
            "next": "869c67964f230766bf25b5c40d52939326716284"
        },
        "commit_message": "Aesthetic refactoring.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "869c67964f230766bf25b5c40d52939326716284": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "public final int org.jctools.queues.BaseLinkedQueue<E>.size()"
                ]
            },
            "ea6ac4c4b7ab05fd7839edc9d8100e2412b0718c": {
                "jctools-core/src/main/java/org/jctools/queues/BaseLinkedQueue.java": [
                    "public final int org.jctools.queues.BaseLinkedQueue<E>.size()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "2fce44a63bb5a6a7af8be26f5e87df849e9988de",
        "previous_commit": "46e227139f041c8cc4d9b458ca764720213d792a",
        "date": 1502187671,
        "releases": {
            "previous": "2fce44a63bb5a6a7af8be26f5e87df849e9988de",
            "next": "2fce44a63bb5a6a7af8be26f5e87df849e9988de"
        },
        "commit_message": "Refactored SpscAtomicArrayQueue to be more similiar to the\nSpscArrayQueue and each other including:\n- variable names\n- implemented an offerSlowPath(..) method\n- whitespace\n- reordered soElement/soConsumerIndex in the poll() method of\n  SpscAtomicArrayQueue which has no semantic impact\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "2fce44a63bb5a6a7af8be26f5e87df849e9988de": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.poll()"
                ]
            },
            "46e227139f041c8cc4d9b458ca764720213d792a": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscAtomicArrayQueue.java": [
                    "public E org.jctools.queues.atomic.SpscAtomicArrayQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "e30d33d2eccc602bac5ce1cd96c962c0165a301e",
        "previous_commit": "9eabb419db936c5e67ba1692f9847ec44c29dc6d",
        "date": 1403531760,
        "releases": {
            "previous": "e30d33d2eccc602bac5ce1cd96c962c0165a301e",
            "next": "e30d33d2eccc602bac5ce1cd96c962c0165a301e"
        },
        "commit_message": "MPMC fix: No memory barriers required on element removal in poll as the\ntransaction is made correct by the barriers on sequence.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "e30d33d2eccc602bac5ce1cd96c962c0165a301e": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()"
                ]
            },
            "9eabb419db936c5e67ba1692f9847ec44c29dc6d": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "aad8c82b72dd9eceb79c7f0373d492ab28b4b90f",
        "previous_commit": "638e7f4ea9b010cc28fcb98382cbf926896996ca",
        "date": 1564032670,
        "releases": {
            "previous": "aad8c82b72dd9eceb79c7f0373d492ab28b4b90f",
            "next": "aad8c82b72dd9eceb79c7f0373d492ab28b4b90f"
        },
        "commit_message": "Fix #255 Multiple consumers can null out element on a pooled chunk\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "aad8c82b72dd9eceb79c7f0373d492ab28b4b90f": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()"
                ]
            },
            "638e7f4ea9b010cc28fcb98382cbf926896996ca": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "26ff40387fdba01ddd57bc5e12aa0395ca69d5e4",
        "previous_commit": "c6460d9f8af2ecc4270d0bd8b922980a422835be",
        "date": 1464186882,
        "releases": {
            "previous": "26ff40387fdba01ddd57bc5e12aa0395ca69d5e4",
            "next": "26ff40387fdba01ddd57bc5e12aa0395ca69d5e4"
        },
        "commit_message": "Pow2.nextPowerOf2(v) throws IAE when no larger int pow2 exists\n\n- Fix #116",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "26ff40387fdba01ddd57bc5e12aa0395ca69d5e4": {
                "jctools-core/src/main/java/org/jctools/util/Pow2.java": [
                    "public static int org.jctools.util.Pow2.roundToPowerOfTwo(final int value)"
                ]
            },
            "c6460d9f8af2ecc4270d0bd8b922980a422835be": {
                "jctools-core/src/main/java/org/jctools/util/Pow2.java": [
                    "public static int org.jctools.util.Pow2.roundToPowerOfTwo(final int value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "f623779212ec20dd4e1548f3a2ea11c72205e4ec",
        "previous_commit": "ec5be6173d40423be6977ea2c588b8315294a116",
        "date": 1477250780,
        "releases": {
            "previous": "f623779212ec20dd4e1548f3a2ea11c72205e4ec",
            "next": "f623779212ec20dd4e1548f3a2ea11c72205e4ec"
        },
        "commit_message": "Fix prepetual fill issue for unbounded queues",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "f623779212ec20dd4e1548f3a2ea11c72205e4ec": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public void org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ]
            },
            "ec5be6173d40423be6977ea2c588b8315294a116": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public void org.jctools.queues.BaseMpscLinkedArrayQueue<E>.fill(Supplier<E> s, WaitStrategy w, ExitCondition exit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "2cfcda95f35c2b0a485ec42f4b65278f04d8d59f",
        "previous_commit": "982dc5145d8d2008f5c5ada2aa10e3a0f8e90e83",
        "date": 1577791574,
        "releases": {
            "previous": "2cfcda95f35c2b0a485ec42f4b65278f04d8d59f",
            "next": "2cfcda95f35c2b0a485ec42f4b65278f04d8d59f"
        },
        "commit_message": "Added new test cases + changed some bits of logic 4 xadd qs\n\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "2cfcda95f35c2b0a485ec42f4b65278f04d8d59f": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()"
                ]
            },
            "982dc5145d8d2008f5c5ada2aa10e3a0f8e90e83": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.poll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "6a230ac37c626fecf672d1495b64fee58e4c674a",
        "previous_commit": "697b0bd9f6ea65959ca7fd890b7d668f32ce86cc",
        "date": 1469200177,
        "releases": {
            "previous": "6a230ac37c626fecf672d1495b64fee58e4c674a",
            "next": "6a230ac37c626fecf672d1495b64fee58e4c674a"
        },
        "commit_message": "Make size consistent with non-atomic change",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "6a230ac37c626fecf672d1495b64fee58e4c674a": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseLinkedAtomicQueue.java": [
                    "public final int org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.size()"
                ]
            },
            "697b0bd9f6ea65959ca7fd890b7d668f32ce86cc": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseLinkedAtomicQueue.java": [
                    "public final int org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.size()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "bf3ab5893c1c95dd4b4448f8070e2bef466f76bc",
        "previous_commit": "0584a31a6a5a303cddfd0f4057b90f4609a75000",
        "date": 1440169915,
        "releases": {
            "previous": "bf3ab5893c1c95dd4b4448f8070e2bef466f76bc",
            "next": "bf3ab5893c1c95dd4b4448f8070e2bef466f76bc"
        },
        "commit_message": "Fix #75. Chunk size now defaults to a minimum of 16.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "bf3ab5893c1c95dd4b4448f8070e2bef466f76bc": {
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "public final boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offer(final E e)"
                ]
            },
            "0584a31a6a5a303cddfd0f4057b90f4609a75000": {
                "jctools-core/src/main/java/org/jctools/queues/SpscUnboundedArrayQueue.java": [
                    "public final boolean org.jctools.queues.SpscUnboundedArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "8aa0e5791b38de29166861a905d15f9433bcdff1",
        "previous_commit": "58a2faf6b11c4ea00ec653839829b5b47beaf6d6",
        "date": 1621593751,
        "releases": {
            "previous": "8aa0e5791b38de29166861a905d15f9433bcdff1",
            "next": "8aa0e5791b38de29166861a905d15f9433bcdff1"
        },
        "commit_message": "Simplify code\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "8aa0e5791b38de29166861a905d15f9433bcdff1": {
                "jctools-core/src/main/java/org/jctools/queues/IndexedQueueSizeUtil.java": [
                    "public static int org.jctools.queues.IndexedQueueSizeUtil.sanitizedSize(int capacity, long size)"
                ]
            },
            "58a2faf6b11c4ea00ec653839829b5b47beaf6d6": {
                "jctools-core/src/main/java/org/jctools/queues/IndexedQueueSizeUtil.java": [
                    "public static int org.jctools.queues.IndexedQueueSizeUtil.sanitizedSize(int capacity, long size)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "676be40a026a012aff45567e9ebee4c81bb910a3",
        "previous_commit": "de19049db25a37f7e0df17bfe60bb6c810bf00ed",
        "date": 1500908116,
        "releases": {
            "previous": "676be40a026a012aff45567e9ebee4c81bb910a3",
            "next": "676be40a026a012aff45567e9ebee4c81bb910a3"
        },
        "commit_message": "Formatting\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "676be40a026a012aff45567e9ebee4c81bb910a3": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.peek()"
                ]
            },
            "de19049db25a37f7e0df17bfe60bb6c810bf00ed": {
                "jctools-core/src/main/java/org/jctools/queues/BaseMpscLinkedArrayQueue.java": [
                    "public E org.jctools.queues.BaseMpscLinkedArrayQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "e54b31e1a5a2dbb83edd13ef53111cc5a26ab6ea",
        "previous_commit": "1810fb5421a3e5ebaca51d3e6ad246ac1e34febb",
        "date": 1466848666,
        "releases": {
            "previous": "e54b31e1a5a2dbb83edd13ef53111cc5a26ab6ea",
            "next": "e54b31e1a5a2dbb83edd13ef53111cc5a26ab6ea"
        },
        "commit_message": "Cleanup dead code",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "e54b31e1a5a2dbb83edd13ef53111cc5a26ab6ea": {
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public void org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)"
                ]
            },
            "1810fb5421a3e5ebaca51d3e6ad246ac1e34febb": {
                "jctools-core/src/main/java/org/jctools/queues/SpmcArrayQueue.java": [
                    "public void org.jctools.queues.SpmcArrayQueue<E>.drain(final Consumer<E> c, final WaitStrategy w, final ExitCondition exit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "f5caab6d709e5aaffda3a894b032b77b994ca403",
        "previous_commit": "6a230ac37c626fecf672d1495b64fee58e4c674a",
        "date": 1469201536,
        "releases": {
            "previous": "f5caab6d709e5aaffda3a894b032b77b994ca403",
            "next": "f5caab6d709e5aaffda3a894b032b77b994ca403"
        },
        "commit_message": "Fixed issue #119 for this queue which was hidden behind a slow isEmpty",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "f5caab6d709e5aaffda3a894b032b77b994ca403": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "private void org.jctools.queues.MpscChunkedArrayQueue<E>.resize(long mask, E[] buffer, long pIndex, final long consumerIndex, final long maxQueueCapacity, final E e)"
                ]
            },
            "6a230ac37c626fecf672d1495b64fee58e4c674a": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "private void org.jctools.queues.MpscChunkedArrayQueue<E>.resize(long mask, E[] buffer, long pIndex, final long consumerIndex, final long maxQueueCapacity, final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "054b242035f7d62ef6739ce2d79b32db1dcf9188",
        "previous_commit": "2f44fd1dba0d262ef77adbf173a55533141d0e4f",
        "date": 1404400681,
        "releases": {
            "previous": "054b242035f7d62ef6739ce2d79b32db1dcf9188",
            "next": "054b242035f7d62ef6739ce2d79b32db1dcf9188"
        },
        "commit_message": "Produce correct implementations depending on getAndSet availablity.",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "054b242035f7d62ef6739ce2d79b32db1dcf9188": {
                "jctools-core/src/main/java/org/jctools/queues/QueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.QueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            },
            "2f44fd1dba0d262ef77adbf173a55533141d0e4f": {
                "jctools-core/src/main/java/org/jctools/queues/QueueFactory.java": [
                    "public static <E> Queue<E> org.jctools.queues.QueueFactory.newQueue(ConcurrentQueueSpec qs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "39cbf779001f5f6457d029d9b9fc78d5b7316a8e",
        "previous_commit": "90e5f056ea9b0c0ce4ba46ddc7e14536dd042528",
        "date": 1503142515,
        "releases": {
            "previous": "39cbf779001f5f6457d029d9b9fc78d5b7316a8e",
            "next": "39cbf779001f5f6457d029d9b9fc78d5b7316a8e"
        },
        "commit_message": "remove() does not work for SPSC case, move to MPSC only\n- simplify code\n- add stress test which triggers the SPSC issue\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "39cbf779001f5f6457d029d9b9fc78d5b7316a8e": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseLinkedAtomicQueue.java": [
                    "public boolean org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.remove(Object o)"
                ]
            },
            "90e5f056ea9b0c0ce4ba46ddc7e14536dd042528": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/BaseLinkedAtomicQueue.java": [
                    "public final boolean org.jctools.queues.atomic.BaseLinkedAtomicQueue<E>.remove(Object o)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "70925e492a97208fa3b8c47c353cabef5cc37f67",
        "previous_commit": "8aa0e5791b38de29166861a905d15f9433bcdff1",
        "date": 1621594121,
        "releases": {
            "previous": "70925e492a97208fa3b8c47c353cabef5cc37f67",
            "next": "70925e492a97208fa3b8c47c353cabef5cc37f67"
        },
        "commit_message": "Re-order if, fixes potential (but very unlikely) `size` bug\n\nFixes a case where `size` is > `MAX_INT` and the queue has limited capacity. This could hypothetically happen if say the capacity is 2^31 and through incredibly poor observation timing the size was estimated as larger than `MAX_INT` (2^32-1).\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "70925e492a97208fa3b8c47c353cabef5cc37f67": {
                "jctools-core/src/main/java/org/jctools/queues/IndexedQueueSizeUtil.java": [
                    "public static int org.jctools.queues.IndexedQueueSizeUtil.sanitizedSize(int capacity, long size)"
                ]
            },
            "8aa0e5791b38de29166861a905d15f9433bcdff1": {
                "jctools-core/src/main/java/org/jctools/queues/IndexedQueueSizeUtil.java": [
                    "public static int org.jctools.queues.IndexedQueueSizeUtil.sanitizedSize(int capacity, long size)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "cf712e558cfbcc5615f1de43df5f6849190e4ca2",
        "previous_commit": "28913526283e4ae32f954a59e08bd8b85265ac78",
        "date": 1590399817,
        "releases": {
            "previous": "cf712e558cfbcc5615f1de43df5f6849190e4ca2",
            "next": "cf712e558cfbcc5615f1de43df5f6849190e4ca2"
        },
        "commit_message": "Touchup\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "cf712e558cfbcc5615f1de43df5f6849190e4ca2": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.peek()"
                ]
            },
            "28913526283e4ae32f954a59e08bd8b85265ac78": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcArrayQueue.java": [
                    "public E org.jctools.queues.MpmcArrayQueue<E>.peek()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "858ffcd3935dc8e1052af69a5090a222ab80610d",
        "previous_commit": "7c29af548adf640e13ecbe451fd493f0ef5df058",
        "date": 1458288214,
        "releases": {
            "previous": "858ffcd3935dc8e1052af69a5090a222ab80610d",
            "next": "858ffcd3935dc8e1052af69a5090a222ab80610d"
        },
        "commit_message": "Fix spelling of field name to be producerLimit.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "858ffcd3935dc8e1052af69a5090a222ab80610d": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "private long org.jctools.queues.MpscChunkedArrayQueue<E>.lvProducerLimit()"
                ]
            },
            "7c29af548adf640e13ecbe451fd493f0ef5df058": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "private long org.jctools.queues.MpscChunkedArrayQueue<E>.lvProducerLimit()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "988a63983ca9c13f1b67c51df5abec4d71e49fa1",
        "previous_commit": "952442574d9a1b8157070dd1f2d69ab6a4230776",
        "date": 1493330895,
        "releases": {
            "previous": "988a63983ca9c13f1b67c51df5abec4d71e49fa1",
            "next": "988a63983ca9c13f1b67c51df5abec4d71e49fa1"
        },
        "commit_message": "Replace plain array access with volatile load in SingleWriterHashSet iterator\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "988a63983ca9c13f1b67c51df5abec4d71e49fa1": {
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "private void org.jctools.sets.SingleWriterHashSet<E>.findNextVal()"
                ]
            },
            "952442574d9a1b8157070dd1f2d69ab6a4230776": {
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "private void org.jctools.sets.SingleWriterHashSet<E>.findNextVal()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "7593bb014a43697af85decddf64d7cdc7a07fb72",
        "previous_commit": "d60366d5cdef9091f7dfacb6713fb7fc2b153516",
        "date": 1456586445,
        "releases": {
            "previous": "7593bb014a43697af85decddf64d7cdc7a07fb72",
            "next": "7593bb014a43697af85decddf64d7cdc7a07fb72"
        },
        "commit_message": "A chunked variant of the MPSC queue",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "7593bb014a43697af85decddf64d7cdc7a07fb72": {
                "jctools-core/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "public boolean org.jctools.queues.MpscGrowableArrayQueue<E>.offer(final E e)"
                ]
            },
            "d60366d5cdef9091f7dfacb6713fb7fc2b153516": {
                "jctools-core/src/main/java/org/jctools/queues/MpscGrowableArrayQueue.java": [
                    "public boolean org.jctools.queues.MpscGrowableArrayQueue<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "0bc99e0d06b15df6a50796ab31caf570644c3d60",
        "previous_commit": "16f9fce2c3ea281eb66e45ff6492519f706e437d",
        "date": 1596718858,
        "releases": {
            "previous": "0bc99e0d06b15df6a50796ab31caf570644c3d60",
            "next": "0bc99e0d06b15df6a50796ab31caf570644c3d60"
        },
        "commit_message": "missed benign gen-code diff\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "0bc99e0d06b15df6a50796ab31caf570644c3d60": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            },
            "16f9fce2c3ea281eb66e45ff6492519f706e437d": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/MpscAtomicArrayQueue.java": [
                    "public int org.jctools.queues.atomic.MpscAtomicArrayQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "de63a8413d77d091cd1678b986ba2b305772eeaf",
        "previous_commit": "aabd96a526402c5e8f5fe92112fb3b2a33b9c628",
        "date": 1584938225,
        "releases": {
            "previous": "de63a8413d77d091cd1678b986ba2b305772eeaf",
            "next": "de63a8413d77d091cd1678b986ba2b305772eeaf"
        },
        "commit_message": "Fixed mpmc xadd relaxed poll and xadd qs javadoc (#291)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "de63a8413d77d091cd1678b986ba2b305772eeaf": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPoll()"
                ]
            },
            "aabd96a526402c5e8f5fe92112fb3b2a33b9c628": {
                "jctools-core/src/main/java/org/jctools/queues/MpmcUnboundedXaddArrayQueue.java": [
                    "public E org.jctools.queues.MpmcUnboundedXaddArrayQueue<E>.relaxedPoll()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "3539dfae62b2a7b0bc60966eefd507dc3eb5d059",
        "previous_commit": "b64dfecff7fe721d6e6aa61ce2c2e49635f88cb3",
        "date": 1614755154,
        "releases": {
            "previous": "3539dfae62b2a7b0bc60966eefd507dc3eb5d059",
            "next": "3539dfae62b2a7b0bc60966eefd507dc3eb5d059"
        },
        "commit_message": "Remove else. Consistent brace alignment.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "3539dfae62b2a7b0bc60966eefd507dc3eb5d059": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "private E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.parkUntilNext(E[] buffer, long cIndex, long offset, long timeoutNs)"
                ]
            },
            "b64dfecff7fe721d6e6aa61ce2c2e49635f88cb3": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "private E org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.parkUntilNext(E[] buffer, long cIndex, long offset, long timeoutNs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "172a2f87a2b381cb7bee481df6b72a4abc07a261",
        "previous_commit": "7878ab554d35c52bc0a5c590e426d98c09f4540d",
        "date": 1573042135,
        "releases": {
            "previous": "172a2f87a2b381cb7bee481df6b72a4abc07a261",
            "next": "172a2f87a2b381cb7bee481df6b72a4abc07a261"
        },
        "commit_message": "Fix LGTM warning, harmless\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "172a2f87a2b381cb7bee481df6b72a4abc07a261": {
                "jctools-experimental/src/main/java/org/jctools/queues/MpscRelaxedArrayQueue.java": [
                    "private void org.jctools.queues.MpscRelaxedArrayQueue<E>.validateSlowProducerOverClaim(final int activeCycleIndex, final long producerCycleClaim)"
                ]
            },
            "7878ab554d35c52bc0a5c590e426d98c09f4540d": {
                "jctools-experimental/src/main/java/org/jctools/queues/MpscRelaxedArrayQueue.java": [
                    "private void org.jctools.queues.MpscRelaxedArrayQueue<E>.validateSlowProducerOverClaim(final int activeCycleIndex, final long producerCycleClaim)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d4d0c005fd9eb6a168b85c2bec55c27d7d6a2742",
        "previous_commit": "2140d7a9c1d14cbf528e25ad6a3d94021aae0512",
        "date": 1606298264,
        "releases": {
            "previous": "d4d0c005fd9eb6a168b85c2bec55c27d7d6a2742",
            "next": "d4d0c005fd9eb6a168b85c2bec55c27d7d6a2742"
        },
        "commit_message": "Fix NBHMLong put linearizability issue #319\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "d4d0c005fd9eb6a168b85c2bec55c27d7d6a2742": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "private Object org.jctools.maps.NonBlockingHashMapLong<TypeV>.putIfMatch( final long key, final Object putval, final Object expVal )"
                ]
            },
            "2140d7a9c1d14cbf528e25ad6a3d94021aae0512": {
                "jctools-core/src/main/java/org/jctools/maps/NonBlockingHashMapLong.java": [
                    "private Object org.jctools.maps.NonBlockingHashMapLong<TypeV>.putIfMatch( final long key, final Object putval, final Object expVal )"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "79939e6f6e6f0febab903941c819c3468429a071",
        "previous_commit": "d81b8df5fefaccf7ac8243c25d747f2f47b73b43",
        "date": 1457296711,
        "releases": {
            "previous": "79939e6f6e6f0febab903941c819c3468429a071",
            "next": "79939e6f6e6f0febab903941c819c3468429a071"
        },
        "commit_message": "MpscLinkedQueue fill() method CAS operation done once every limit nodes instead of one per limit.\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "79939e6f6e6f0febab903941c819c3468429a071": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public int org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            },
            "d81b8df5fefaccf7ac8243c25d747f2f47b73b43": {
                "jctools-core/src/main/java/org/jctools/queues/MpscLinkedQueue.java": [
                    "public int org.jctools.queues.MpscLinkedQueue<E>.fill(Supplier<E> s, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "103a4b90368a4bf35644c91949f1a9ec97a0ce54",
        "previous_commit": "423680d23d4b950afa2b22e394546ff59154cda6",
        "date": 1460964986,
        "releases": {
            "previous": "103a4b90368a4bf35644c91949f1a9ec97a0ce54",
            "next": "103a4b90368a4bf35644c91949f1a9ec97a0ce54"
        },
        "commit_message": "Eliminate redundant recalculation of offset",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "103a4b90368a4bf35644c91949f1a9ec97a0ce54": {
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public boolean org.jctools.queues.FFBuffer<E>.offer(final E e)"
                ]
            },
            "423680d23d4b950afa2b22e394546ff59154cda6": {
                "jctools-experimental/src/main/java/org/jctools/queues/FFBuffer.java": [
                    "public boolean org.jctools.queues.FFBuffer<E>.offer(final E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b70e83ed54168b9734990e725d9068a144b26d2f",
        "previous_commit": "636795114f61e5f0489b6ff52fb332f2f92b5d39",
        "date": 1573041992,
        "releases": {
            "previous": "b70e83ed54168b9734990e725d9068a144b26d2f",
            "next": "b70e83ed54168b9734990e725d9068a144b26d2f"
        },
        "commit_message": "Fix LGTM warning, useless condition(always true)\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "b70e83ed54168b9734990e725d9068a144b26d2f": {
                "jctools-experimental/src/main/java/org/jctools/queues/MpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.MpscLinkedArrayQueue<T>.offer(T value)"
                ]
            },
            "636795114f61e5f0489b6ff52fb332f2f92b5d39": {
                "jctools-experimental/src/main/java/org/jctools/queues/MpscLinkedArrayQueue.java": [
                    "public boolean org.jctools.queues.MpscLinkedArrayQueue<T>.offer(T value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "901418b9134d78cdeba8e4cf864a4b7384a7e183",
        "previous_commit": "fbd6bfab1a036d57f5db4a7659f23764c2d7c08a",
        "date": 1423148842,
        "releases": {
            "previous": "901418b9134d78cdeba8e4cf864a4b7384a7e183",
            "next": "901418b9134d78cdeba8e4cf864a4b7384a7e183"
        },
        "commit_message": "Improve error reporting",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "901418b9134d78cdeba8e4cf864a4b7384a7e183": {
                "jctools-experimental/src/main/java/org/jctools/util/Template.java": [
                    "public static Template org.jctools.util.Template.fromFile(final Class<?> resourceRoot, final String fileName)"
                ]
            },
            "fbd6bfab1a036d57f5db4a7659f23764c2d7c08a": {
                "jctools-experimental/src/main/java/org/jctools/util/Template.java": [
                    "public static Template org.jctools.util.Template.fromFile(final Class<?> resourceRoot, final String fileName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "acf6b4a303a048b9382a77d97d273bad1dc473a2",
        "previous_commit": "b30036626a4ac432a8a64f714323e9708c933b76",
        "date": 1419198132,
        "releases": {
            "previous": "acf6b4a303a048b9382a77d97d273bad1dc473a2",
            "next": "acf6b4a303a048b9382a77d97d273bad1dc473a2"
        },
        "commit_message": "add support for figuring out whether its the last element of the list or not\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "acf6b4a303a048b9382a77d97d273bad1dc473a2": {
                "jctools-experimental/src/main/java/org/jctools/util/Template.java": [
                    "private void org.jctools.util.Template.render(Object obj, StringBuilder result)"
                ]
            },
            "b30036626a4ac432a8a64f714323e9708c933b76": {
                "jctools-experimental/src/main/java/org/jctools/util/Template.java": [
                    "private void org.jctools.util.Template.render(Object obj, StringBuilder result)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "697b0bd9f6ea65959ca7fd890b7d668f32ce86cc",
        "previous_commit": "f04cbd4e4cee9f29ffa15d841fd64e0ab8ac09a7",
        "date": 1469197882,
        "releases": {
            "previous": "697b0bd9f6ea65959ca7fd890b7d668f32ce86cc",
            "next": "697b0bd9f6ea65959ca7fd890b7d668f32ce86cc"
        },
        "commit_message": "revert size change for MPMC chunked",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "697b0bd9f6ea65959ca7fd890b7d668f32ce86cc": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "public final int org.jctools.queues.MpscChunkedArrayQueue<E>.size()"
                ]
            },
            "f04cbd4e4cee9f29ffa15d841fd64e0ab8ac09a7": {
                "jctools-core/src/main/java/org/jctools/queues/MpscChunkedArrayQueue.java": [
                    "public final int org.jctools.queues.MpscChunkedArrayQueue<E>.size()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "02238cbd83edade95d3e8b7b2ef3077f3ffee731",
        "previous_commit": "88ca9a51ccc32e7949451c4ebe2149dcc395cf28",
        "date": 1573028054,
        "releases": {
            "previous": "02238cbd83edade95d3e8b7b2ef3077f3ffee731",
            "next": "02238cbd83edade95d3e8b7b2ef3077f3ffee731"
        },
        "commit_message": "Fix LGTM warnings (though no bug suspected)\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "02238cbd83edade95d3e8b7b2ef3077f3ffee731": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ]
            },
            "88ca9a51ccc32e7949451c4ebe2149dcc395cf28": {
                "jctools-core/src/main/java/org/jctools/queues/MpscBlockingConsumerArrayQueue.java": [
                    "public int org.jctools.queues.MpscBlockingConsumerArrayQueue<E>.fill(Supplier<E> s, int batchSize)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "8e9718413620020e8ad13e90cfd915eccf5f6ea0",
        "previous_commit": "146ad909de46ddc035e993dd4eadc4f4a6aea703",
        "date": 1440232142,
        "releases": {
            "previous": "8e9718413620020e8ad13e90cfd915eccf5f6ea0",
            "next": "8e9718413620020e8ad13e90cfd915eccf5f6ea0"
        },
        "commit_message": "More extended queue work.\n\nAdded clear method.\nFixed issue in MpscCompoundQueue.relaxedOffer\nExtended support to linked queues\nAdded sanity tests for relaxed methods",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "8e9718413620020e8ad13e90cfd915eccf5f6ea0": {
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public boolean org.jctools.queues.MpscCompoundQueue<E>.relaxedOffer(E e)"
                ]
            },
            "146ad909de46ddc035e993dd4eadc4f4a6aea703": {
                "jctools-core/src/main/java/org/jctools/queues/MpscCompoundQueue.java": [
                    "public boolean org.jctools.queues.MpscCompoundQueue<E>.relaxedOffer(E e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "c225457ec77d5027ec57b7bde20e01c60811b43d",
        "previous_commit": "bbe02aa58fcba15198de1ff5f5a3add656372b9a",
        "date": 1506872429,
        "releases": {
            "previous": "c225457ec77d5027ec57b7bde20e01c60811b43d",
            "next": "c225457ec77d5027ec57b7bde20e01c60811b43d"
        },
        "commit_message": "Revert 988a639: use plain access in Iter#next\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "c225457ec77d5027ec57b7bde20e01c60811b43d": {
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "private void org.jctools.sets.SingleWriterHashSet<E>.findNextVal()"
                ]
            },
            "bbe02aa58fcba15198de1ff5f5a3add656372b9a": {
                "jctools-experimental/src/main/java/org/jctools/sets/SingleWriterHashSet.java": [
                    "private void org.jctools.sets.SingleWriterHashSet<E>.findNextVal()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "602dcfc1cf6992caafc3e70f0c254d7397e346f7",
        "previous_commit": "3213f219f5184c5bda127086a35329d34db3e1e4",
        "date": 1502728163,
        "releases": {
            "previous": "602dcfc1cf6992caafc3e70f0c254d7397e346f7",
            "next": "602dcfc1cf6992caafc3e70f0c254d7397e346f7"
        },
        "commit_message": "Spsc chunked array queues homogenized\n",
        "jmh_dependency": {
            "benchmark_directory": "jctools-benchmarks",
            "benchmark_name": "microbenchmarks.jar"
        },
        "method_changes": {
            "602dcfc1cf6992caafc3e70f0c254d7397e346f7": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscChunkedAtomicArrayQueue.java": [
                    "final boolean org.jctools.queues.atomic.SpscChunkedAtomicArrayQueue<E>.offerColdPath(AtomicReferenceArray<E> buffer, long mask, long pIndex, int offset, E v, Supplier<? extends E> s)"
                ]
            },
            "3213f219f5184c5bda127086a35329d34db3e1e4": {
                "jctools-core/src/main/java/org/jctools/queues/atomic/SpscChunkedAtomicArrayQueue.java": [
                    "protected final boolean org.jctools.queues.atomic.SpscChunkedAtomicArrayQueue<E>.offerColdPath(AtomicReferenceArray<E> buffer, long mask, long pIndex, int offset, E e, Supplier<? extends E> s)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    }
]