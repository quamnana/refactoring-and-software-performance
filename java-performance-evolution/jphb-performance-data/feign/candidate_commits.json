[
    {
        "commit": "2d761cb6a92efc6b4a95e7092c945f47431b76cd",
        "previous_commit": "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737",
        "date": 1537709383,
        "releases": {
            "previous": "2d761cb6a92efc6b4a95e7092c945f47431b76cd",
            "next": "2d761cb6a92efc6b4a95e7092c945f47431b76cd"
        },
        "commit_message": "Refactoring RequestTemplate to RFC6570 (#778)\n\n* Refactoring RequestTemplate to RFC6570\r\n\r\nThis change refactors `RequestTemplate` in an attempt to\r\nadhere to the [RFC-6570 - URI Template](https://tools.ietf.org/html/rfc6570)\r\nspecification more closely.  The reason for this is to\r\nreduce the amount of inconsistency between `@Param`, `@QueryMap`,\r\n`@Header`, `@HeaderMap`, and `@Body` template expansion.\r\n\r\nFirst, `RequestTemplate` now delegates uri, header, query, and\r\nbody template parsing to `UriTemplate`, `HeaderTemplate`,\r\n`QueryTemplate`, and `BodyTemplate` respectively.  These components\r\nare all variations on a `Template`.\r\n\r\n`UriTemplate` adheres to RFC 6570 explicitly and supports Level 1\r\n(Simple String) variable expansion.  Unresolved variables are ignored\r\nand removed from the uri.  This includes query parameter pairs.  All\r\nliteral and expanded variables are pct-encoded according to the Charset\r\nprovided in the `RequestTemplate`.\r\n\r\n`HeaderTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables are ignored.  Empty headers are removed.  No\r\nencoding is performed.\r\n\r\n`QueryTemplate` is a subset of a `UriTemplate` and reacts in the same\r\nway.  Unresolved pairs are ignored and not present on the final\r\ntemplate.  All literals and expanded variables are pct-encoded\r\naccording to the Charset provided.\r\n\r\n`BodyTemplate` supports Level 1 (Simple String) variable expansion.\r\nUnresolved variables produce empty strings.  Values are not encoded.\r\n\r\nAll remaining customizations, including custom encoders, collection format\r\nexpansion and charset encoding are still supportted and made backward\r\ncompatible.\r\n\r\nFinally, a number of inconsistent methods on `RequestTemplate` have\r\nbeen deprecated for public use and all deprecated usage throughout\r\nthe library has been replaced.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "2d761cb6a92efc6b4a95e7092c945f47431b76cd": {
                "core/src/main/java/feign/Contract.java": [
                    "protected boolean feign.Default.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)",
                    "protected void feign.Default.processAnnotationOnMethod(MethodMetadata data, Annotation methodAnnotation, Method method)",
                    "public List<MethodMetadata> feign.BaseContract.parseAndValidatateMetadata(Class<?> targetType)"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "private RequestTemplate feign.ReflectiveFeign.addQueryMapQueryParameters(Map<String, Object> queryMap, RequestTemplate mutable)",
                    "public RequestTemplate feign.ReflectiveFeign.create(Object[] argv)"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public String feign.RequestTemplate.method()",
                    "public RequestTemplate feign.RequestTemplate.headers(Map<String, Collection<String>> headers)",
                    "public String feign.RequestTemplate.url()",
                    "public String feign.RequestTemplate.bodyTemplate()",
                    "public RequestTemplate feign.RequestTemplate.bodyTemplate(String bodyTemplate)",
                    "public RequestTemplate feign.RequestTemplate.decodeSlash(boolean decodeSlash)",
                    "public String feign.RequestTemplate.queryLine()",
                    "public Request feign.RequestTemplate.request()",
                    "public RequestTemplate feign.RequestTemplate.method(String method)",
                    "public RequestTemplate feign.RequestTemplate.insert(int pos, CharSequence value)",
                    "public RequestTemplate feign.RequestTemplate.queries(Map<String, Collection<String>> queries)",
                    "public RequestTemplate feign.RequestTemplate.query(String name, Iterable<String> values)",
                    "public Map<String, Collection<String>> feign.RequestTemplate.headers()",
                    "public RequestTemplate feign.RequestTemplate.append(CharSequence value)",
                    "RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> unencoded, Map<String, Boolean> alreadyEncoded)",
                    "public RequestTemplate feign.RequestTemplate.header(String name, String... values)",
                    "public RequestTemplate feign.RequestTemplate.query(String name, String... values)",
                    "public Map<String, Collection<String>> feign.RequestTemplate.queries()",
                    "public RequestTemplate feign.RequestTemplate.header(String name, Iterable<String> values)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Request feign.SynchronousMethodHandler.targetRequest(RequestTemplate template)"
                ],
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "HttpUriRequest feign.httpclient.ApacheHttpClient.toHttpUriRequest(Request request, Request.Options options)"
                ],
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "protected void feign.jaxrs.JAXRSContract.processAnnotationOnClass(MethodMetadata data, Class<?> clz)",
                    "protected void feign.jaxrs.JAXRSContract.processAnnotationOnMethod(MethodMetadata data, Annotation methodAnnotation, Method method)"
                ],
                "jaxrs2/src/main/java/feign/jaxrs2/JAXRSClient.java": [
                    "private MultivaluedMap<String, Object> feign.jaxrs2.JAXRSClient.toMultivaluedMap(Map<String, Collection<String>> headers)",
                    "public feign.Response feign.jaxrs2.JAXRSClient.execute(feign.Request request, Options options)"
                ],
                "mock/src/main/java/feign/mock/MockTarget.java": [
                    "public Request feign.mock.MockTarget<E>.apply(RequestTemplate input)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)"
                ],
                "ribbon/src/main/java/feign/ribbon/LBClient.java": [
                    "public RequestSpecificRetryHandler feign.ribbon.LBClient.getRequestSpecificRetryHandler( RibbonRequest request, IClientConfig requestConfig)",
                    "Request feign.ribbon.LBClient.toRequest()"
                ],
                "ribbon/src/main/java/feign/ribbon/LoadBalancingTarget.java": [
                    "public Request feign.ribbon.LoadBalancingTarget<T>.apply(RequestTemplate input)"
                ]
            },
            "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737": {
                "core/src/main/java/feign/Contract.java": [
                    "protected boolean feign.Default.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)",
                    "protected void feign.Default.processAnnotationOnMethod(MethodMetadata data, Annotation methodAnnotation, Method method)",
                    "public List<MethodMetadata> feign.BaseContract.parseAndValidatateMetadata(Class<?> targetType)"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "private RequestTemplate feign.ReflectiveFeign.addQueryMapQueryParameters(Map<String, Object> queryMap, RequestTemplate mutable)",
                    "public RequestTemplate feign.ReflectiveFeign.create(Object[] argv)"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public String queryLine()",
                    "public String feign.RequestTemplate.method()",
                    "public RequestTemplate feign.RequestTemplate.headers(Map<String, Collection<String>> headers)",
                    "public String feign.RequestTemplate.url()",
                    "public String bodyTemplate()",
                    "public RequestTemplate feign.RequestTemplate.decodeSlash(boolean decodeSlash)",
                    "public Request feign.RequestTemplate.request()",
                    "public RequestTemplate feign.RequestTemplate.method(String method)",
                    "public RequestTemplate bodyTemplate(String bodyTemplate)",
                    "public RequestTemplate feign.RequestTemplate.insert(int pos, CharSequence value)",
                    "public RequestTemplate feign.RequestTemplate.queries(Map<String, Collection<String>> queries)",
                    "public RequestTemplate feign.RequestTemplate.query(String name, Iterable<String> values)",
                    "public Map<String, Collection<String>> feign.RequestTemplate.headers()",
                    "public RequestTemplate feign.RequestTemplate.append(CharSequence value)",
                    "RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> unencoded, Map<String, Boolean> alreadyEncoded)",
                    "public RequestTemplate feign.RequestTemplate.header(String name, String... values)",
                    "public RequestTemplate feign.RequestTemplate.query(String name, String... values)",
                    "public Map<String, Collection<String>> feign.RequestTemplate.queries()",
                    "public RequestTemplate feign.RequestTemplate.header(String name, Iterable<String> values)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Request feign.SynchronousMethodHandler.targetRequest(RequestTemplate template)"
                ],
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "HttpUriRequest feign.httpclient.ApacheHttpClient.toHttpUriRequest(Request request, Request.Options options)"
                ],
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "protected void feign.jaxrs.JAXRSContract.processAnnotationOnClass(MethodMetadata data, Class<?> clz)",
                    "protected void feign.jaxrs.JAXRSContract.processAnnotationOnMethod(MethodMetadata data, Annotation methodAnnotation, Method method)"
                ],
                "jaxrs2/src/main/java/feign/jaxrs2/JAXRSClient.java": [
                    "private MultivaluedMap<String, Object> feign.jaxrs2.JAXRSClient.toMultivaluedMap(Map<String, Collection<String>> headers)",
                    "public feign.Response feign.jaxrs2.JAXRSClient.execute(feign.Request request, Options options)"
                ],
                "mock/src/main/java/feign/mock/MockTarget.java": [
                    "public Request feign.mock.MockTarget<E>.apply(RequestTemplate input)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)"
                ],
                "ribbon/src/main/java/feign/ribbon/LBClient.java": [
                    "public RequestSpecificRetryHandler feign.ribbon.LBClient.getRequestSpecificRetryHandler( RibbonRequest request, IClientConfig requestConfig)",
                    "Request feign.ribbon.LBClient.toRequest()"
                ],
                "ribbon/src/main/java/feign/ribbon/LoadBalancingTarget.java": [
                    "public Request feign.ribbon.LoadBalancingTarget<T>.apply(RequestTemplate input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "75e569fb3f87b4f5e3a638dd65e90cc8a5adf8d1",
        "previous_commit": "ee2054160a18e19b2f13bedca8d83eea8ac9a373",
        "date": 1578940015,
        "releases": {
            "previous": "75e569fb3f87b4f5e3a638dd65e90cc8a5adf8d1",
            "next": "75e569fb3f87b4f5e3a638dd65e90cc8a5adf8d1"
        },
        "commit_message": "Remove deprecated code usage from core module (#1145)\n\nFixes #857\r\n\r\nTo simply removal, Request.Body was returned back to an internal\r\ncomponent and additional methods were added to Request to expose\r\nit's capabilities outside of the object.\r\n\r\nAll other deprecated usage in core modules has been removed.\r\nDeprecated code still exists in the test cases and will be\r\nremoved once the deprecated methods are removed in our next\r\nmajor release.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "75e569fb3f87b4f5e3a638dd65e90cc8a5adf8d1": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)"
                ],
                "core/src/main/java/feign/FeignException.java": [
                    "static FeignException feign.FeignException.errorReading(Request request, Response response, IOException cause)"
                ],
                "core/src/main/java/feign/Request.java": [
                    "public static Body feign.Request.empty()",
                    "public static Request feign.Request.create(HttpMethod httpMethod, String url, Map<String, Collection<String>> headers, byte[] body, Charset charset)",
                    "public static Request feign.Request.create(HttpMethod httpMethod, String url, Map<String, Collection<String>> headers, byte[] body, Charset charset, RequestTemplate requestTemplate)",
                    "public Map<String, Collection<String>> feign.Request.headers()"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
                    "public Charset feign.RequestTemplate.requestCharset()",
                    "public static RequestTemplate feign.RequestTemplate.from(RequestTemplate requestTemplate)",
                    "public Request feign.RequestTemplate.request()",
                    "public List<String> feign.RequestTemplate.variables()",
                    "public RequestTemplate feign.RequestTemplate.body(String bodyText)",
                    "public String feign.RequestTemplate.bodyTemplate()",
                    "public RequestTemplate feign.RequestTemplate.bodyTemplate(String bodyTemplate)",
                    "private RequestTemplate feign.RequestTemplate.body(Request.Body body)"
                ],
                "core/src/main/java/feign/codec/StringDecoder.java": [
                    "public Object feign.codec.StringDecoder.decode(Response response, Type type)"
                ],
                "googlehttpclient/src/main/java/feign/googlehttpclient/GoogleHttpClient.java": [
                    "private final HttpRequest feign.googlehttpclient.GoogleHttpClient.convertRequest(final Request inputRequest, final Request.Options options)"
                ],
                "gson/src/main/java/feign/gson/GsonDecoder.java": [
                    "public Object feign.gson.GsonDecoder.decode(Response response, Type type)"
                ],
                "hc5/src/main/java/feign/hc5/ApacheHttp5Client.java": [
                    "ClassicHttpRequest feign.hc5.ApacheHttp5Client.toClassicHttpRequest(Request request, Request.Options options)",
                    "Response.Body feign.hc5.ApacheHttp5Client.toFeignBody(ClassicHttpResponse httpResponse)"
                ],
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "HttpUriRequest feign.httpclient.ApacheHttpClient.toHttpUriRequest(Request request, Request.Options options)",
                    "Response.Body feign.httpclient.ApacheHttpClient.toFeignBody(HttpResponse httpResponse)"
                ],
                "jackson/src/main/java/feign/jackson/JacksonDecoder.java": [
                    "public Object feign.jackson.JacksonDecoder.decode(Response response, Type type)"
                ],
                "jackson/src/main/java/feign/jackson/JacksonIteratorDecoder.java": [
                    "public Object feign.jackson.JacksonIteratorDecoder.decode(Response response, Type type)"
                ],
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "private Builder feign.http2client.Http2Client.newRequestBuilder(Request request)"
                ],
                "jaxrs2/src/main/java/feign/jaxrs2/JAXRSClient.java": [
                    "private Entity<byte[]> feign.jaxrs2.JAXRSClient.createRequestEntity(feign.Request request)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)",
                    "private static feign.Response.Body feign.okhttp.OkHttpClient.toBody(final ResponseBody input)"
                ],
                "ribbon/src/main/java/feign/ribbon/LBClient.java": [
                    "public RibbonResponse feign.ribbon.LBClient.execute(RibbonRequest request, IClientConfig configOverride)",
                    "Request feign.ribbon.LBClient.toRequest()"
                ]
            },
            "ee2054160a18e19b2f13bedca8d83eea8ac9a373": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)"
                ],
                "core/src/main/java/feign/FeignException.java": [
                    "static FeignException feign.FeignException.errorReading(Request request, Response response, IOException cause)"
                ],
                "core/src/main/java/feign/Request.java": [
                    "public static Body feign.Request.empty()",
                    "public static Request feign.Request.create(HttpMethod httpMethod, String url, Map<String, Collection<String>> headers, byte[] body, Charset charset)",
                    "public static Request feign.Request.create(HttpMethod httpMethod, String url, Map<String, Collection<String>> headers, byte[] body, Charset charset, RequestTemplate requestTemplate)",
                    "public Map<String, Collection<String>> feign.Request.headers()"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.body(Request.Body body)",
                    "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
                    "public Charset feign.RequestTemplate.requestCharset()",
                    "public static RequestTemplate feign.RequestTemplate.from(RequestTemplate requestTemplate)",
                    "public Request feign.RequestTemplate.request()",
                    "public List<String> feign.RequestTemplate.variables()",
                    "public RequestTemplate feign.RequestTemplate.body(String bodyText)",
                    "public String feign.RequestTemplate.bodyTemplate()",
                    "public RequestTemplate feign.RequestTemplate.bodyTemplate(String bodyTemplate)"
                ],
                "core/src/main/java/feign/codec/StringDecoder.java": [
                    "public Object feign.codec.StringDecoder.decode(Response response, Type type)"
                ],
                "googlehttpclient/src/main/java/feign/googlehttpclient/GoogleHttpClient.java": [
                    "private final HttpRequest feign.googlehttpclient.GoogleHttpClient.convertRequest(final Request inputRequest, final Request.Options options)"
                ],
                "gson/src/main/java/feign/gson/GsonDecoder.java": [
                    "public Object feign.gson.GsonDecoder.decode(Response response, Type type)"
                ],
                "hc5/src/main/java/feign/hc5/ApacheHttp5Client.java": [
                    "ClassicHttpRequest feign.hc5.ApacheHttp5Client.toClassicHttpRequest(Request request, Request.Options options)",
                    "Response.Body feign.hc5.ApacheHttp5Client.toFeignBody(ClassicHttpResponse httpResponse)"
                ],
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "HttpUriRequest feign.httpclient.ApacheHttpClient.toHttpUriRequest(Request request, Request.Options options)",
                    "Response.Body feign.httpclient.ApacheHttpClient.toFeignBody(HttpResponse httpResponse)"
                ],
                "jackson/src/main/java/feign/jackson/JacksonDecoder.java": [
                    "public Object feign.jackson.JacksonDecoder.decode(Response response, Type type)"
                ],
                "jackson/src/main/java/feign/jackson/JacksonIteratorDecoder.java": [
                    "public Object feign.jackson.JacksonIteratorDecoder.decode(Response response, Type type)"
                ],
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "private Builder feign.http2client.Http2Client.newRequestBuilder(Request request)"
                ],
                "jaxrs2/src/main/java/feign/jaxrs2/JAXRSClient.java": [
                    "private Entity<byte[]> feign.jaxrs2.JAXRSClient.createRequestEntity(feign.Request request)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)",
                    "private static feign.Response.Body feign.okhttp.OkHttpClient.toBody(final ResponseBody input)"
                ],
                "ribbon/src/main/java/feign/ribbon/LBClient.java": [
                    "public RibbonResponse feign.ribbon.LBClient.execute(RibbonRequest request, IClientConfig configOverride)",
                    "Request feign.ribbon.LBClient.toRequest()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a7b7c01806324126dd844a9a912e309754bc4dc9",
        "previous_commit": "033de93ccac0db19d31676d49dacc1b570c747e6",
        "date": 1577460373,
        "releases": {
            "previous": "a7b7c01806324126dd844a9a912e309754bc4dc9",
            "next": "a7b7c01806324126dd844a9a912e309754bc4dc9"
        },
        "commit_message": "Ensure Iterable values are encoded before template expansion (#1138)\n\n* Ensure Iterable values are encoded before template expansion\r\n\r\nFixes #1123, Fixes #1133, Fixes #1102, Fixes #1028\r\n\r\nEnsures that all expressions are fully-encoded before being\r\nmanipulated during template expansion.  This allows parameters\r\nto include reserved values and result in properly encoded\r\nresults.\r\n\r\nAdditionally, `Iterable` values are now handled in accordance\r\nwith RFC 6570 allowing for the specified `CollectionFormat` to\r\nbe applied and empty parameters to be expanded correctly as this\r\nis the main use case that exhibited this issue.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "a7b7c01806324126dd844a9a912e309754bc4dc9": {
                "core/src/main/java/feign/CollectionFormat.java": [
                    "public CharSequence join(String field, Collection<String> values, Charset charset)"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)"
                ],
                "core/src/main/java/feign/template/Expressions.java": [
                    "String feign.template.Expressions.encode(Object value)",
                    "String feign.template.Expressions.expand(Object variable, boolean encode)",
                    "public static Expression feign.template.Expressions.create(final String value)"
                ],
                "core/src/main/java/feign/template/QueryTemplate.java": [
                    "public List<String> feign.template.QueryTemplate.getValues()",
                    "public String feign.template.QueryTemplate.expand(Map<String, ?> variables)",
                    "public String feign.template.QueryTemplate.toString()",
                    "public static QueryTemplate feign.template.QueryTemplate.create(String name, Iterable<String> values, Charset charset, CollectionFormat collectionFormat)",
                    "public static QueryTemplate feign.template.QueryTemplate.append(QueryTemplate queryTemplate, Iterable<String> values, CollectionFormat collectionFormat)"
                ],
                "core/src/main/java/feign/template/Template.java": [
                    "private void feign.template.Template.parseTemplate()",
                    "public String feign.template.Template.expand(Map<String, ?> variables)",
                    "protected String feign.template.Template.resolveExpression( Expression expression, Map<String, ?> variables)"
                ],
                "core/src/main/java/feign/template/UriUtils.java": [
                    "public static String feign.template.UriUtils.encode(String value, Charset charset)",
                    "public static String feign.template.UriUtils.encode(String value)",
                    "private static boolean feign.template.UriUtils.isUnreserved(int c)",
                    "private boolean feign.template.UriUtils.isPchar(int c)",
                    "private static boolean feign.template.UriUtils.isReserved(int c)"
                ]
            },
            "033de93ccac0db19d31676d49dacc1b570c747e6": {
                "core/src/main/java/feign/CollectionFormat.java": [
                    "public CharSequence join(String field, Collection<String> values, Charset charset)"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)"
                ],
                "core/src/main/java/feign/template/Expressions.java": [
                    "String feign.template.Expressions.encode(Object value)",
                    "String feign.template.Expressions.expand(Object variable, boolean encode)",
                    "public static Expression feign.template.Expressions.create(final String value, final FragmentType type)"
                ],
                "core/src/main/java/feign/template/QueryTemplate.java": [
                    "public List<String> feign.template.QueryTemplate.getValues()",
                    "public String feign.template.QueryTemplate.expand(Map<String, ?> variables)",
                    "public String feign.template.QueryTemplate.toString()",
                    "public static QueryTemplate feign.template.QueryTemplate.create(String name, Iterable<String> values, Charset charset, CollectionFormat collectionFormat)",
                    "public static QueryTemplate feign.template.QueryTemplate.append(QueryTemplate queryTemplate, Iterable<String> values, CollectionFormat collectionFormat)"
                ],
                "core/src/main/java/feign/template/Template.java": [
                    "protected String feign.template.Template.resolveExpression(Expression expression, Map<String, ?> variables)",
                    "private void feign.template.Template.parseTemplate()",
                    "public String feign.template.Template.expand(Map<String, ?> variables)"
                ],
                "core/src/main/java/feign/template/UriUtils.java": [
                    "public static String feign.template.UriUtils.encode(String value, Charset charset)",
                    "protected boolean feign.template.UriUtils.isReserved(int c)",
                    "protected boolean feign.template.UriUtils.isUnreserved(int c)",
                    "public static String feign.template.UriUtils.encode(String value)",
                    "protected boolean feign.template.UriUtils.isPchar(int c)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9875a16f4ad3117904dde1c5a5ce3d08de7d1009",
        "previous_commit": "68f04c90c2ad550b251172213ad8f08082f5abb6",
        "date": 1532393630,
        "releases": {
            "previous": "9875a16f4ad3117904dde1c5a5ce3d08de7d1009",
            "next": "9875a16f4ad3117904dde1c5a5ce3d08de7d1009"
        },
        "commit_message": "Adding Method to Retryable Exception for evaluation (#744)\n\nCloses #719\r\n\r\nThis change adds the original Request Method to `RetryableException`,\r\nallowing implementers to determine if a retry should occur based on\r\nmethod and exception type.\r\n\r\nTo support this, `Response` objects now require that the original\r\n`Request` be present.  Test Cases, benchmarks, and documentation have\r\nbeen added.\r\n\r\n* Refactored Request Method Attribute on Requests\r\n* Added `HttpMethod` enum that represents the supported HTTP methods\r\nreplacing String handling.\r\n* Deprecated `Request#method()` in favor of `Request#httpMethod()`",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "9875a16f4ad3117904dde1c5a5ce3d08de7d1009": {
                "core/src/main/java/feign/Client.java": [
                    "Response feign.Default.convertResponse(HttpURLConnection connection, Request request)",
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)",
                    "public Response feign.Default.execute(Request request, Options options)"
                ],
                "core/src/main/java/feign/FeignException.java": [
                    "static FeignException feign.FeignException.errorReading(Request request, Response ignored, IOException cause)",
                    "static FeignException feign.FeignException.errorExecuting(Request request, IOException cause)"
                ],
                "core/src/main/java/feign/Request.java": [
                    "public String feign.Request.method()",
                    "public String feign.Request.toString()",
                    "public static Request feign.Request.create(String method, String url, Map<String, Collection<String>> headers, byte[] body, Charset charset)"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "private static Map<String, Collection<String>> feign.RequestTemplate.parseAndDecodeQueries(String queryLine)"
                ],
                "core/src/main/java/feign/Response.java": [
                    "public Builder feign.Response.request(Request request)"
                ],
                "core/src/main/java/feign/codec/ErrorDecoder.java": [
                    "public Exception feign.codec.Default.decode(String methodKey, Response response)"
                ],
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "Response feign.httpclient.ApacheHttpClient.toFeignResponse(HttpResponse httpResponse, Request request)",
                    "public Response feign.httpclient.ApacheHttpClient.execute(Request request, Request.Options options)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request input, feign.Request.Options options)"
                ]
            },
            "68f04c90c2ad550b251172213ad8f08082f5abb6": {
                "core/src/main/java/feign/Client.java": [
                    "Response feign.Default.convertResponse(HttpURLConnection connection)",
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)",
                    "public Response feign.Default.execute(Request request, Options options)"
                ],
                "core/src/main/java/feign/FeignException.java": [
                    "static FeignException feign.FeignException.errorReading(Request request, Response ignored, IOException cause)",
                    "static FeignException feign.FeignException.errorExecuting(Request request, IOException cause)"
                ],
                "core/src/main/java/feign/Request.java": [
                    "public String feign.Request.method()",
                    "public String feign.Request.toString()",
                    "public static Request feign.Request.create(String method, String url, Map<String, Collection<String>> headers, byte[] body, Charset charset)"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "private static Map<String, Collection<String>> feign.RequestTemplate.parseAndDecodeQueries(String queryLine)"
                ],
                "core/src/main/java/feign/Response.java": [
                    "public Builder feign.Response.request(Request request)"
                ],
                "core/src/main/java/feign/codec/ErrorDecoder.java": [
                    "public Exception feign.codec.Default.decode(String methodKey, Response response)"
                ],
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "Response feign.httpclient.ApacheHttpClient.toFeignResponse(HttpResponse httpResponse)",
                    "public Response feign.httpclient.ApacheHttpClient.execute(Request request, Request.Options options)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request input, feign.Request.Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "04a85e6961123d4fdb2ab9e4eabbfe09b4eea0a6",
        "previous_commit": "c4686e0e0e9b50de7618ff4c651044633089a64f",
        "date": 1647721724,
        "releases": {
            "previous": "04a85e6961123d4fdb2ab9e4eabbfe09b4eea0a6",
            "next": "04a85e6961123d4fdb2ab9e4eabbfe09b4eea0a6"
        },
        "commit_message": " All decoders follow rule: if a status is 404 it returns empty or null value (#1597)\n\n* All decoders follow rule: if status 404 it returns empty or null value\r\n\r\n* Replace decode404 with dismiss404",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "04a85e6961123d4fdb2ab9e4eabbfe09b4eea0a6": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncBuilder<C> feign.AsyncFeign<C>.decode404()"
                ],
                "core/src/main/java/feign/AsyncResponseHandler.java": [
                    "void feign.AsyncResponseHandler.handleResponse(CompletableFuture<Object> resultFuture, String configKey, Response response, Type returnType, long elapsedTime)"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Builder feign.Feign.decode404()",
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "public MethodHandler feign.SynchronousMethodHandler.create(Target<?> target, MethodMetadata md, RequestTemplate.Factory buildTemplateFromArgs, Options options, Decoder decoder, ErrorDecoder errorDecoder)"
                ],
                "core/src/main/java/feign/codec/StringDecoder.java": [
                    "public Object feign.codec.StringDecoder.decode(Response response, Type type)"
                ],
                "gson/src/main/java/feign/gson/GsonDecoder.java": [
                    "public Object feign.gson.GsonDecoder.decode(Response response, Type type)"
                ],
                "jackson-jaxb/src/main/java/feign/jackson/jaxb/JacksonJaxbJsonDecoder.java": [
                    "public Object feign.jackson.jaxb.JacksonJaxbJsonDecoder.decode(Response response, Type type)"
                ],
                "jackson-jr/src/main/java/feign/jackson/jr/JacksonJrDecoder.java": [
                    "public Object feign.jackson.jr.JacksonJrDecoder.decode(Response response, Type type)"
                ],
                "jackson/src/main/java/feign/jackson/JacksonDecoder.java": [
                    "public Object feign.jackson.JacksonDecoder.decode(Response response, Type type)"
                ],
                "jackson/src/main/java/feign/jackson/JacksonIteratorDecoder.java": [
                    "public Object feign.jackson.JacksonIteratorDecoder.decode(Response response, Type type)"
                ],
                "jaxb/src/main/java/feign/jaxb/JAXBDecoder.java": [
                    "public Object feign.jaxb.JAXBDecoder.decode(Response response, Type type)"
                ],
                "json/src/main/java/feign/json/JsonDecoder.java": [
                    "public Object feign.json.JsonDecoder.decode(Response response, Type type)"
                ],
                "sax/src/main/java/feign/sax/SAXDecoder.java": [
                    "public Object feign.sax.SAXDecoder.decode(Response response, Type type)"
                ]
            },
            "c4686e0e0e9b50de7618ff4c651044633089a64f": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncBuilder<C> feign.AsyncFeign<C>.decode404()"
                ],
                "core/src/main/java/feign/AsyncResponseHandler.java": [
                    "void feign.AsyncResponseHandler.handleResponse(CompletableFuture<Object> resultFuture, String configKey, Response response, Type returnType, long elapsedTime)"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Builder feign.Feign.decode404()",
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "public MethodHandler feign.SynchronousMethodHandler.create(Target<?> target, MethodMetadata md, RequestTemplate.Factory buildTemplateFromArgs, Options options, Decoder decoder, ErrorDecoder errorDecoder)"
                ],
                "core/src/main/java/feign/codec/StringDecoder.java": [
                    "public Object feign.codec.StringDecoder.decode(Response response, Type type)"
                ],
                "gson/src/main/java/feign/gson/GsonDecoder.java": [
                    "public Object feign.gson.GsonDecoder.decode(Response response, Type type)"
                ],
                "jackson-jaxb/src/main/java/feign/jackson/jaxb/JacksonJaxbJsonDecoder.java": [
                    "public Object feign.jackson.jaxb.JacksonJaxbJsonDecoder.decode(Response response, Type type)"
                ],
                "jackson-jr/src/main/java/feign/jackson/jr/JacksonJrDecoder.java": [
                    "public Object feign.jackson.jr.JacksonJrDecoder.decode(Response response, Type type)"
                ],
                "jackson/src/main/java/feign/jackson/JacksonDecoder.java": [
                    "public Object feign.jackson.JacksonDecoder.decode(Response response, Type type)"
                ],
                "jackson/src/main/java/feign/jackson/JacksonIteratorDecoder.java": [
                    "public Object feign.jackson.JacksonIteratorDecoder.decode(Response response, Type type)"
                ],
                "jaxb/src/main/java/feign/jaxb/JAXBDecoder.java": [
                    "public Object feign.jaxb.JAXBDecoder.decode(Response response, Type type)"
                ],
                "json/src/main/java/feign/json/JsonDecoder.java": [
                    "public Object feign.json.JsonDecoder.decode(Response response, Type type)"
                ],
                "sax/src/main/java/feign/sax/SAXDecoder.java": [
                    "public Object feign.sax.SAXDecoder.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fb4f304a0e593eb4044792e1e02a736a52ff850d",
        "previous_commit": "0b361518e41d27337de13e4a78eec3af9bb1b9dc",
        "date": 1722886014,
        "releases": {
            "previous": "fb4f304a0e593eb4044792e1e02a736a52ff850d",
            "next": "fb4f304a0e593eb4044792e1e02a736a52ff850d"
        },
        "commit_message": "Refactored data clumps with the help of LLMs (research project) (#2497)\n\n* refactor: data clumps with LLM\r\n\r\n* Align with other openfeign projects\r\n\r\n* Refactored to favor immutability and easy of read\r\n\r\n* Update codeql-analysis.yml\r\n\r\n* Quickbuild\r\n\r\n* Update license header\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin <velo@users.noreply.github.com>\r\nCo-authored-by: Marvin Froeder <velo.br@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "fb4f304a0e593eb4044792e1e02a736a52ff850d": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.internalBuild()"
                ],
                "core/src/main/java/feign/AsynchronousMethodHandler.java": [
                    "private boolean feign.AsynchronousMethodHandler<C>.shouldRetry(Retryer retryer, Throwable throwable, CompletableFuture<Object> resultFuture)",
                    "private Options findOptions(Object[] argv)",
                    "public Object feign.AsynchronousMethodHandler<C>.invoke(Object[] argv)",
                    "private CompletableFuture<Object> feign.AsynchronousMethodHandler<C>.executeAndDecode(RequestTemplate template, Options options)",
                    "private CompletableFuture<Object> feign.AsynchronousMethodHandler<C>.executeAndDecode(RequestTemplate template, Options options, Retryer retryer)",
                    "private CompletableFuture<Object> handleResponse(Response response, long elapsedTime)",
                    "private Request targetRequest(RequestTemplate template)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "public MethodHandler feign.SynchronousMethodHandler.create(Target<?> target, MethodMetadata md, Object requestContext)",
                    "Options feign.SynchronousMethodHandler.findOptions(Object[] argv)",
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)",
                    "public Object feign.SynchronousMethodHandler.invoke(Object[] argv)",
                    "Request feign.SynchronousMethodHandler.targetRequest(RequestTemplate template)"
                ]
            },
            "0b361518e41d27337de13e4a78eec3af9bb1b9dc": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.internalBuild()"
                ],
                "core/src/main/java/feign/AsynchronousMethodHandler.java": [
                    "private boolean feign.AsynchronousMethodHandler<C>.shouldRetry(Retryer retryer, Throwable throwable, CompletableFuture<Object> resultFuture)",
                    "private Options findOptions(Object[] argv)",
                    "public Object feign.AsynchronousMethodHandler<C>.invoke(Object[] argv)",
                    "private CompletableFuture<Object> feign.AsynchronousMethodHandler<C>.executeAndDecode(RequestTemplate template, Options options)",
                    "private CompletableFuture<Object> feign.AsynchronousMethodHandler<C>.executeAndDecode(RequestTemplate template, Options options, Retryer retryer)",
                    "private CompletableFuture<Object> handleResponse(Response response, long elapsedTime)",
                    "private Request targetRequest(RequestTemplate template)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "public MethodHandler feign.SynchronousMethodHandler.create(Target<?> target, MethodMetadata md, Object requestContext)",
                    "Options feign.SynchronousMethodHandler.findOptions(Object[] argv)",
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)",
                    "public Object feign.SynchronousMethodHandler.invoke(Object[] argv)",
                    "Request feign.SynchronousMethodHandler.targetRequest(RequestTemplate template)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4da6d5cad674e4eeae5b56035ac1f94992499449",
        "previous_commit": "4b2a48ee6ae7cf25a9ba515ac5a198db076217d3",
        "date": 1540585875,
        "releases": {
            "previous": "4da6d5cad674e4eeae5b56035ac1f94992499449",
            "next": "4da6d5cad674e4eeae5b56035ac1f94992499449"
        },
        "commit_message": "NPE when resolving a template with binary body (#821)\n\n* NPE when resolving a template with binary body\r\n\r\n* Initial change to introduce body object to Request's\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "4da6d5cad674e4eeae5b56035ac1f94992499449": {
                "core/src/main/java/feign/Request.java": [
                    "public byte[] feign.Request.body()",
                    "public Charset feign.Request.charset()",
                    "public static Request feign.Request.create(HttpMethod httpMethod, String url, Map<String, Collection<String>> headers, byte[] body, Charset charset)",
                    "public String feign.Request.toString()"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
                    "public byte[] feign.RequestTemplate.body()",
                    "public static RequestTemplate feign.RequestTemplate.from(RequestTemplate requestTemplate)",
                    "public Request feign.RequestTemplate.request()",
                    "public List<String> feign.RequestTemplate.variables()",
                    "public String feign.RequestTemplate.bodyTemplate()",
                    "public RequestTemplate feign.RequestTemplate.bodyTemplate(String bodyTemplate)",
                    "public RequestTemplate feign.RequestTemplate.body(byte[] bodyData, Charset charset)"
                ]
            },
            "4b2a48ee6ae7cf25a9ba515ac5a198db076217d3": {
                "core/src/main/java/feign/Request.java": [
                    "public byte[] feign.Request.body()",
                    "public Charset feign.Request.charset()",
                    "public static Request feign.Request.create(HttpMethod httpMethod, String url, Map<String, Collection<String>> headers, byte[] body, Charset charset)",
                    "public String feign.Request.toString()"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)",
                    "public byte[] feign.RequestTemplate.body()",
                    "public static RequestTemplate feign.RequestTemplate.from(RequestTemplate requestTemplate)",
                    "public Request feign.RequestTemplate.request()",
                    "public List<String> feign.RequestTemplate.variables()",
                    "public String feign.RequestTemplate.bodyTemplate()",
                    "public RequestTemplate feign.RequestTemplate.bodyTemplate(String bodyTemplate)",
                    "public RequestTemplate feign.RequestTemplate.body(byte[] bodyData, Charset charset)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cc650a031409283242b9a2ae4040f80f374f66b4",
        "previous_commit": "30753bf250d8552a61f93f0201a7daa0470961a7",
        "date": 1470961168,
        "releases": {
            "previous": "cc650a031409283242b9a2ae4040f80f374f66b4",
            "next": "cc650a031409283242b9a2ae4040f80f374f66b4"
        },
        "commit_message": "added builder methods and Request field for Response object (#436)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "cc650a031409283242b9a2ae4040f80f374f66b4": {
                "core/src/main/java/feign/Client.java": [
                    "Response feign.Default.convertResponse(HttpURLConnection connection)",
                    "public Response feign.Default.execute(Request request, Options options)"
                ],
                "core/src/main/java/feign/Response.java": [
                    "public static Response feign.Response.create(int status, String reason, Map<String, Collection<String>> headers, Body body)",
                    "public static Response feign.Response.create(int status, String reason, Map<String, Collection<String>> headers, String text, Charset charset)",
                    "public static Response feign.Response.create(int status, String reason, Map<String, Collection<String>> headers, InputStream inputStream, Integer length)",
                    "public static Response feign.Response.create(int status, String reason, Map<String, Collection<String>> headers, byte[] data)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template)"
                ],
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "Response feign.httpclient.ApacheHttpClient.toFeignResponse(HttpResponse httpResponse)",
                    "public Response feign.httpclient.ApacheHttpClient.execute(Request request, Request.Options options)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request input, feign.Request.Options options)",
                    "private static feign.Response feign.okhttp.OkHttpClient.toFeignResponse(Response input)"
                ]
            },
            "30753bf250d8552a61f93f0201a7daa0470961a7": {
                "core/src/main/java/feign/Client.java": [
                    "Response feign.Default.convertResponse(HttpURLConnection connection)",
                    "public Response feign.Default.execute(Request request, Options options)"
                ],
                "core/src/main/java/feign/Response.java": [
                    "public static Response feign.Response.create(int status, String reason, Map<String, Collection<String>> headers, Body body)",
                    "public static Response feign.Response.create(int status, String reason, Map<String, Collection<String>> headers, String text, Charset charset)",
                    "public static Response feign.Response.create(int status, String reason, Map<String, Collection<String>> headers, InputStream inputStream, Integer length)",
                    "public static Response feign.Response.create(int status, String reason, Map<String, Collection<String>> headers, byte[] data)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template)"
                ],
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "Response feign.httpclient.ApacheHttpClient.toFeignResponse(HttpResponse httpResponse)",
                    "public Response feign.httpclient.ApacheHttpClient.execute(Request request, Request.Options options)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request input, feign.Request.Options options)",
                    "private static feign.Response feign.okhttp.OkHttpClient.toFeignResponse(Response input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "75a3c1cf6f0e57c2d1eaa5f8be2538489e605650",
        "previous_commit": "daed53a2d884772e742d089d33823811c80f977f",
        "date": 1655932986,
        "releases": {
            "previous": "75a3c1cf6f0e57c2d1eaa5f8be2538489e605650",
            "next": "75a3c1cf6f0e57c2d1eaa5f8be2538489e605650"
        },
        "commit_message": "Support of capabilities for AsyncFeign (#1626)\n\n* Support of capabilities for AsyncFeign\r\n\r\n* Removed SyncBased interface, added todo for stageExecution, and adopted micrometer client to be async as well.\r\n\r\n* Added internal builder flag similar to 'forceDecoding' but for client enrichment\r\n\r\n* Added async client enrichment to Dropwizard5 capability\r\n\r\n* Added async client enrichment to Dropwizard5 capability + code formatting\r\n\r\n* Progress with tests; added decoder condition similar to the client one\r\n\r\n* Fixed javadoc\r\n\r\n* A different take on skipping enrichment and delagation\r\n\r\n* Switcharoo\r\n\r\n* Relaxed casting requirements and check it during execution phase\r\n\r\n* Create class to hold common Builder fields\r\n\r\n* Make sure capabilities are applied to all relevant fields\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>\r\nCo-authored-by: Marvin Froeder <velo.br@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "75a3c1cf6f0e57c2d1eaa5f8be2538489e605650": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncBuilder<C> feign.AsyncFeign<C>.defaultContextSupplier(Supplier<C> supplier)",
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()",
                    "public <T> T feign.AsyncFeign<C>.newInstance(Target<T> target)",
                    "private Decoder feign.AsyncFeign<C>.stageDecode( ThreadLocal<AsyncInvocation<C>> activeContext, Logger logger, Level logLevel, AsyncResponseHandler responseHandler)"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public <T> T feign.Feign.target(Class<T> apiType, String url)",
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/ReflectiveAsyncFeign.java": [
                    "public Object feign.ReflectiveAsyncFeign<C>.invoke(Object proxy, Method method, Object[] args)"
                ],
                "core/src/main/java/feign/Util.java": [
                    "public static <T> T[] feign.Util.toArray(Iterable<? extends T> iterable, Class<T> type)"
                ],
                "dropwizard-metrics4/src/main/java/feign/metrics4/MeteredClient.java": [
                    "public Response feign.metrics4.MeteredClient.execute(Request request, Options options)"
                ],
                "dropwizard-metrics5/src/main/java/feign/metrics5/MeteredClient.java": [
                    "public Response feign.metrics5.MeteredClient.execute(Request request, Options options)"
                ],
                "mock/src/main/java/feign/mock/MockClient.java": [
                    "private Response.Builder feign.mock.MockClient.executeAny(Request request, RequestKey requestKey)"
                ]
            },
            "daed53a2d884772e742d089d33823811c80f977f": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "private Object feign.AsyncFeign<C>.stageDecode(Response response, Type type)",
                    "public AsyncBuilder<C> feign.AsyncFeign<C>.defaultContextSupplier(Supplier<C> supplier)",
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()",
                    "public <T> T feign.AsyncFeign<C>.newInstance(Target<T> target)"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public <T> T feign.Feign.target(Class<T> apiType, String url)",
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/ReflectiveAsyncFeign.java": [
                    "public Object feign.ReflectiveAsyncFeign<C>.invoke(Object proxy, Method method, Object[] args)"
                ],
                "core/src/main/java/feign/Util.java": [
                    "public static <T> T[] feign.Util.toArray(Iterable<? extends T> iterable, Class<T> type)"
                ],
                "dropwizard-metrics4/src/main/java/feign/metrics4/MeteredClient.java": [
                    "public Response feign.metrics4.MeteredClient.execute(Request request, Options options)"
                ],
                "dropwizard-metrics5/src/main/java/feign/metrics5/MeteredClient.java": [
                    "public Response feign.metrics5.MeteredClient.execute(Request request, Options options)"
                ],
                "mock/src/main/java/feign/mock/MockClient.java": [
                    "private Response.Builder feign.mock.MockClient.executeAny(Request request, RequestKey requestKey)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "262488506ffafbedfa7215fa42efccfd3f3b470c",
        "previous_commit": "d5389a57db17ad9a311813bcb8539ff891d9ac3a",
        "date": 1571705322,
        "releases": {
            "previous": "262488506ffafbedfa7215fa42efccfd3f3b470c",
            "next": "262488506ffafbedfa7215fa42efccfd3f3b470c"
        },
        "commit_message": "Expose Method and Target on RequestTemplate (#1091)\n\n* Expose Method and Target on RequestTemplate\r\n\r\n* Add test to check if method metadata is present\r\n\r\n* Annotated API changes as being experimental/not API-frozen\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "262488506ffafbedfa7215fa42efccfd3f3b470c": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public Map<String, MethodHandler> feign.ReflectiveFeign.apply(Target target)",
                    "public RequestTemplate feign.ReflectiveFeign.create(Object[] argv)"
                ],
                "core/src/main/java/feign/Request.java": [
                    "public static Request feign.Request.create(HttpMethod httpMethod, String url, Map<String, Collection<String>> headers, byte[] body, Charset charset)",
                    "public static Request feign.Request.create(HttpMethod httpMethod, String url, Map<String, Collection<String>> headers, byte[] body, Charset charset, RequestTemplate requestTemplate)",
                    "public static Request feign.Request.create(HttpMethod httpMethod, String url, Map<String, Collection<String>> headers, Body body, RequestTemplate requestTemplate)",
                    "public static Request feign.Request.create(String method, String url, Map<String, Collection<String>> headers, byte[] body, Charset charset)"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public Request feign.RequestTemplate.request()",
                    "public static RequestTemplate feign.RequestTemplate.from(RequestTemplate requestTemplate)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)"
                ]
            },
            "d5389a57db17ad9a311813bcb8539ff891d9ac3a": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public Map<String, MethodHandler> feign.ReflectiveFeign.apply(Target key)",
                    "public RequestTemplate feign.ReflectiveFeign.create(Object[] argv)"
                ],
                "core/src/main/java/feign/Request.java": [
                    "public static Request feign.Request.create(HttpMethod httpMethod, String url, Map<String, Collection<String>> headers, Body body)",
                    "public static Request feign.Request.create(HttpMethod httpMethod, String url, Map<String, Collection<String>> headers, byte[] body, Charset charset)",
                    "public static Request feign.Request.create(String method, String url, Map<String, Collection<String>> headers, byte[] body, Charset charset)"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public Request feign.RequestTemplate.request()",
                    "public static RequestTemplate feign.RequestTemplate.from(RequestTemplate requestTemplate)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d3665e45d6fba9df06f7e229e1909a5f11944b7f",
        "previous_commit": "91e9882a004129a4c08bf2468be0b37505258fab",
        "date": 1566827520,
        "releases": {
            "previous": "d3665e45d6fba9df06f7e229e1909a5f11944b7f",
            "next": "d3665e45d6fba9df06f7e229e1909a5f11944b7f"
        },
        "commit_message": "GH-845: Add Request to Feign Exception (#1039)\n\nFixes #845 \r\n\r\nThis change allows Feign Exceptions to be created with the original request as an optional parameter.\r\n\r\nChanges include:\r\n* Request field added to FeignException\r\n* New constructors are defended from null in request argument\r\n* Tests to check null instead of request, null message updated\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "d3665e45d6fba9df06f7e229e1909a5f11944b7f": {
                "core/src/main/java/feign/FeignException.java": [
                    "public static FeignException feign.FeignException.errorStatus(String methodKey, Response response)",
                    "static FeignException feign.FeignException.errorReading(Request request, Response response, IOException cause)",
                    "static FeignException feign.FeignException.errorExecuting(Request request, IOException cause)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.decode(Response response)"
                ],
                "core/src/main/java/feign/codec/ErrorDecoder.java": [
                    "public Exception feign.codec.Default.decode(String methodKey, Response response)"
                ],
                "core/src/main/java/feign/codec/StringDecoder.java": [
                    "public Object feign.codec.StringDecoder.decode(Response response, Type type)"
                ],
                "jackson/src/main/java/feign/jackson/JacksonIteratorDecoder.java": [
                    "public boolean feign.jackson.JacksonIteratorDecoder.hasNext()"
                ],
                "jaxb/src/main/java/feign/jaxb/JAXBDecoder.java": [
                    "public Object feign.jaxb.JAXBDecoder.decode(Response response, Type type)"
                ],
                "sax/src/main/java/feign/sax/SAXDecoder.java": [
                    "public Object feign.sax.SAXDecoder.decode(Response response, Type type)"
                ],
                "soap/src/main/java/feign/soap/SOAPDecoder.java": [
                    "public Object feign.soap.SOAPDecoder.decode(Response response, Type type)"
                ]
            },
            "91e9882a004129a4c08bf2468be0b37505258fab": {
                "core/src/main/java/feign/FeignException.java": [
                    "public static FeignException feign.FeignException.errorStatus(String methodKey, Response response)",
                    "static FeignException feign.FeignException.errorReading(Request request, Response response, IOException cause)",
                    "static FeignException feign.FeignException.errorExecuting(Request request, IOException cause)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.decode(Response response)"
                ],
                "core/src/main/java/feign/codec/ErrorDecoder.java": [
                    "public Exception feign.codec.Default.decode(String methodKey, Response response)"
                ],
                "core/src/main/java/feign/codec/StringDecoder.java": [
                    "public Object feign.codec.StringDecoder.decode(Response response, Type type)"
                ],
                "jackson/src/main/java/feign/jackson/JacksonIteratorDecoder.java": [
                    "public boolean feign.jackson.JacksonIteratorDecoder.hasNext()"
                ],
                "jaxb/src/main/java/feign/jaxb/JAXBDecoder.java": [
                    "public Object feign.jaxb.JAXBDecoder.decode(Response response, Type type)"
                ],
                "sax/src/main/java/feign/sax/SAXDecoder.java": [
                    "public Object feign.sax.SAXDecoder.decode(Response response, Type type)"
                ],
                "soap/src/main/java/feign/soap/SOAPDecoder.java": [
                    "public Object feign.soap.SOAPDecoder.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f52158bc24bab0c6c3f858c6b07dd09d4f59dc65",
        "previous_commit": "c595301a952c062cb4b782a81ec6338e06f7f3ce",
        "date": 1568149452,
        "releases": {
            "previous": "f52158bc24bab0c6c3f858c6b07dd09d4f59dc65",
            "next": "f52158bc24bab0c6c3f858c6b07dd09d4f59dc65"
        },
        "commit_message": "Declarative contracts (#1060)\n\n* Declarative contracts\r\n\r\n* Actually using the data structure to read declaritve contracts\r\n\r\n* Using declarative contract for jaxrs contracts\r\n\r\n* Make possible for contracts to declare parameters as ignored\r\n\r\n* Using predicate to decide if an AnnotationProcessor should be invoked\r\n\r\n* Restore environment variable for GITHUB_TOKEN\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "f52158bc24bab0c6c3f858c6b07dd09d4f59dc65": {
                "core/src/main/java/feign/Contract.java": [
                    "protected final void feign.DeclarativeContract.processAnnotationOnMethod(MethodMetadata data, Annotation annotation, Method method)",
                    "public final List<MethodMetadata> feign.DeclarativeContract.parseAndValidatateMetadata(Class<?> targetType)",
                    "protected final boolean feign.DeclarativeContract.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)",
                    "protected final void feign.DeclarativeContract.processAnnotationOnClass(MethodMetadata data, Class<?> targetType)",
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)",
                    "public List<MethodMetadata> feign.BaseContract.parseAndValidatateMetadata(Class<?> targetType)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Options feign.SynchronousMethodHandler.findOptions(Object[] argv)"
                ],
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "private void feign.jaxrs.JAXRSContract.handleConsumesAnnotation(Consumes consumes, MethodMetadata data)",
                    "private void feign.jaxrs.JAXRSContract.handleProducesAnnotation(Produces produces, MethodMetadata data)"
                ]
            },
            "c595301a952c062cb4b782a81ec6338e06f7f3ce": {
                "core/src/main/java/feign/Contract.java": [
                    "protected boolean feign.Default.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)",
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)",
                    "public List<MethodMetadata> feign.BaseContract.parseAndValidatateMetadata(Class<?> targetType)",
                    "protected void feign.Default.processAnnotationOnClass(MethodMetadata data, Class<?> targetType)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Options feign.SynchronousMethodHandler.findOptions(Object[] argv)"
                ],
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "private void feign.jaxrs.JAXRSContract.handleProducesAnnotation(MethodMetadata data, Produces produces, String name)",
                    "private void feign.jaxrs.JAXRSContract.handleConsumesAnnotation(MethodMetadata data, Consumes consumes, String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "29935b2287d455677171277f4e02926b5d9dd5a9",
        "previous_commit": "92e6ad85630ca3318e9f5e4cf12ac58806bb2645",
        "date": 1549058078,
        "releases": {
            "previous": "29935b2287d455677171277f4e02926b5d9dd5a9",
            "next": "29935b2287d455677171277f4e02926b5d9dd5a9"
        },
        "commit_message": "Adding URI segment specific encoding (#882)\n\n* Adding URI segment specific encoding\r\n\r\nFixes #879\r\n\r\nURI encoding introduced in Feign 10.x was refactored to be more in line\r\nwith URI and URI Template specifications respectively.  One change was to\r\nensure that certain reserved characters were not encoded incorrectly.\r\n\r\nThe result was that path segment specific reserved characters were being\r\npreserved on the query string as well.  This change updates the `UriTemplate`\r\nand `Expression` classes to recognize the segment of the URI that is being processed\r\nand apply the segment specific encoding correctly.\r\n\r\nOne important change regarding the `+` sign.  Per the URI specification, a `+` sign\r\nis allowed in both the path and query segments of a URI, however, handling of\r\nthe symbol on the query can be inconsistent.  In some legacy systems, the `+` is\r\nequivalent to the a space.  Feign takes the approach of modern systems, where a\r\n`+` symbol should not reprsent a space and is explicitly encoded as `%2B` when\r\nfound on a query string.\r\n\r\nIf you wish to use `+` as a space, then use the literal ` ` character or encode\r\nthe value directly as `%20`\r\n\r\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "29935b2287d455677171277f4e02926b5d9dd5a9": {
                "core/src/main/java/feign/template/Expressions.java": [
                    "String feign.template.Expressions.encode(Object value)",
                    "public static Expression feign.template.Expressions.create(final String value, final FragmentType type)"
                ],
                "core/src/main/java/feign/template/Template.java": [
                    "private void feign.template.Template.parseFragment(String fragment, boolean query)",
                    "public String feign.template.Template.expand(Map<String, ?> variables)"
                ],
                "core/src/main/java/feign/template/UriUtils.java": [
                    "public static String feign.template.UriUtils.encode(String value, Charset charset)",
                    "public static String feign.template.UriUtils.encode(String value)",
                    "public static String feign.template.UriUtils.queryEncode(String query, Charset charset)",
                    "public static String feign.template.UriUtils.encodeReserved(String value, FragmentType type, Charset charset)",
                    "public static String feign.template.UriUtils.pathEncode(String path, Charset charset)"
                ]
            },
            "92e6ad85630ca3318e9f5e4cf12ac58806bb2645": {
                "core/src/main/java/feign/template/Expressions.java": [
                    "String feign.template.Expressions.encode(Object value)",
                    "public static Expression feign.template.Expressions.create(final String value)"
                ],
                "core/src/main/java/feign/template/Template.java": [
                    "private void feign.template.Template.parseFragment(String fragment, boolean query)",
                    "public String feign.template.Template.expand(Map<String, ?> variables)"
                ],
                "core/src/main/java/feign/template/UriUtils.java": [
                    "public static String feign.template.UriUtils.encode(String value, Charset charset)",
                    "public static String feign.template.UriUtils.encode(String value)",
                    "public static String feign.template.UriUtils.queryEncode(String query, Charset charset)",
                    "public static String feign.template.UriUtils.pathEncode(String path, Charset charset)",
                    "public static String feign.template.UriUtils.encodeReserved(String value, String reserved, Charset charset)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7e9e54735088b39b3f217a86f6f0d10ce3f77c60",
        "previous_commit": "cf4585228a1675b222df6341e87a4ffee87ab55f",
        "date": 1688262130,
        "releases": {
            "previous": "7e9e54735088b39b3f217a86f6f0d10ce3f77c60",
            "next": "7e9e54735088b39b3f217a86f6f0d10ce3f77c60"
        },
        "commit_message": "Allow schema and validation event handler customization in JAXBContextFactory (#2084)\n\n* Allow custom schema and validation event handler setup in JAXBContextFactory (#1479)\r\n\r\n* Add tests for schema and validation event handler setup (#1479)\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "7e9e54735088b39b3f217a86f6f0d10ce3f77c60": {
                "jaxb-jakarta/src/main/java/feign/jaxb/JAXBContextFactory.java": [
                    "public Unmarshaller feign.jaxb.JAXBContextFactory.createUnmarshaller(Class<?> clazz)",
                    "public Marshaller feign.jaxb.JAXBContextFactory.createMarshaller(Class<?> clazz)",
                    "public JAXBContextFactory feign.jaxb.JAXBContextFactory.build()",
                    "public JAXBContextFactory feign.jaxb.JAXBContextFactory.build(List<Class<?>> classes)"
                ],
                "jaxb/src/main/java/feign/jaxb/JAXBContextFactory.java": [
                    "public Unmarshaller feign.jaxb.JAXBContextFactory.createUnmarshaller(Class<?> clazz)",
                    "public Marshaller feign.jaxb.JAXBContextFactory.createMarshaller(Class<?> clazz)",
                    "public JAXBContextFactory feign.jaxb.JAXBContextFactory.build()",
                    "public JAXBContextFactory feign.jaxb.JAXBContextFactory.build(List<Class<?>> classes)"
                ]
            },
            "cf4585228a1675b222df6341e87a4ffee87ab55f": {
                "jaxb-jakarta/src/main/java/feign/jaxb/JAXBContextFactory.java": [
                    "public Unmarshaller feign.jaxb.JAXBContextFactory.createUnmarshaller(Class<?> clazz)",
                    "public Marshaller feign.jaxb.JAXBContextFactory.createMarshaller(Class<?> clazz)",
                    "public JAXBContextFactory feign.jaxb.JAXBContextFactory.build()",
                    "public JAXBContextFactory feign.jaxb.JAXBContextFactory.build(List<Class<?>> classes)"
                ],
                "jaxb/src/main/java/feign/jaxb/JAXBContextFactory.java": [
                    "public Unmarshaller feign.jaxb.JAXBContextFactory.createUnmarshaller(Class<?> clazz)",
                    "public Marshaller feign.jaxb.JAXBContextFactory.createMarshaller(Class<?> clazz)",
                    "public JAXBContextFactory feign.jaxb.JAXBContextFactory.build()",
                    "public JAXBContextFactory feign.jaxb.JAXBContextFactory.build(List<Class<?>> classes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "62277a9df6bc396de2fe4ff35f766c468ec24e9a",
        "previous_commit": "5f17624fb94145390379b926eb6f4fbe9b037919",
        "date": 1671353182,
        "releases": {
            "previous": "62277a9df6bc396de2fe4ff35f766c468ec24e9a",
            "next": "62277a9df6bc396de2fe4ff35f766c468ec24e9a"
        },
        "commit_message": "set root cause as the exception_name in micrometer tags (#1883)\n\n* set root cause as the exception_name in micrometer tags\r\n\r\n* set root cause as the exception_name in other metrics system\r\n\r\n* set root cause as the exception_name in other metrics system\r\n\r\n* Update ExceptionUtilsTest.java\r\n\r\n* reformat\r\n\r\n* reformat\r\n\r\n* add root_cause_name instead of changing exception_name\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "62277a9df6bc396de2fe4ff35f766c468ec24e9a": {
                "dropwizard-metrics4/src/main/java/feign/metrics4/BaseMeteredClient.java": [
                    "protected void feign.metrics4.BaseMeteredClient.recordFailure(RequestTemplate template, Exception e)",
                    "protected void feign.metrics4.BaseMeteredClient.recordFailure(RequestTemplate template, FeignException e)"
                ],
                "dropwizard-metrics5/src/main/java/feign/metrics5/BaseMeteredClient.java": [
                    "protected void feign.metrics5.BaseMeteredClient.recordFailure(RequestTemplate template, FeignException e)",
                    "protected void feign.metrics5.BaseMeteredClient.recordFailure(RequestTemplate template, Exception e)"
                ],
                "dropwizard-metrics5/src/main/java/feign/metrics5/MeteredDecoder.java": [
                    "public Object feign.metrics5.MeteredDecoder.decode(Response response, Type type)"
                ],
                "dropwizard-metrics5/src/main/java/feign/metrics5/MeteredInvocationHandleFactory.java": [
                    "public InvocationHandler feign.metrics5.MeteredInvocationHandleFactory.create(Target target, Map<Method, MethodHandler> dispatch)"
                ],
                "micrometer/src/main/java/feign/micrometer/FeignMetricTagResolver.java": [
                    "public Tags feign.micrometer.FeignMetricTagResolver.tag(Class<?> targetType, Method method, String url, Throwable e, Tag... extraTags)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredDecoder.java": [
                    "protected Counter feign.micrometer.MeteredDecoder.createExceptionCounter(Response response, Type type, Exception e)"
                ]
            },
            "5f17624fb94145390379b926eb6f4fbe9b037919": {
                "dropwizard-metrics4/src/main/java/feign/metrics4/BaseMeteredClient.java": [
                    "protected void feign.metrics4.BaseMeteredClient.recordFailure(RequestTemplate template, Exception e)",
                    "protected void feign.metrics4.BaseMeteredClient.recordFailure(RequestTemplate template, FeignException e)"
                ],
                "dropwizard-metrics5/src/main/java/feign/metrics5/BaseMeteredClient.java": [
                    "protected void feign.metrics5.BaseMeteredClient.recordFailure(RequestTemplate template, FeignException e)",
                    "protected void feign.metrics5.BaseMeteredClient.recordFailure(RequestTemplate template, Exception e)"
                ],
                "dropwizard-metrics5/src/main/java/feign/metrics5/MeteredDecoder.java": [
                    "public Object feign.metrics5.MeteredDecoder.decode(Response response, Type type)"
                ],
                "dropwizard-metrics5/src/main/java/feign/metrics5/MeteredInvocationHandleFactory.java": [
                    "public InvocationHandler feign.metrics5.MeteredInvocationHandleFactory.create(Target target, Map<Method, MethodHandler> dispatch)"
                ],
                "micrometer/src/main/java/feign/micrometer/FeignMetricTagResolver.java": [
                    "public Tags feign.micrometer.FeignMetricTagResolver.tag(Class<?> targetType, Method method, String url, Throwable e, Tag... extraTags)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredDecoder.java": [
                    "protected Counter feign.micrometer.MeteredDecoder.createExceptionCounter(Response response, Type type, Exception e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c715049829178adea9255251768ef7109314b25f",
        "previous_commit": "423c18c7b8d2dfa3053bf554be0f7a76ff9cbba4",
        "date": 1630531222,
        "releases": {
            "previous": "c715049829178adea9255251768ef7109314b25f",
            "next": "c715049829178adea9255251768ef7109314b25f"
        },
        "commit_message": "Aggregate Micrometer \"uri\" label values under uri template (#1493)\n\n* Use path expression rather than explicit value for Micrometer \"uri\" labels\r\n\r\n* e.g. \"/get/{id}\" rather than \"/get/123\"\r\n* this provides better aggregation, protecting the time series database\r\n\r\n* Make assertions more self explanatory\r\n\r\n* Test Micrometer Decoder uri label\r\n\r\n* Move tests to AbstractMetricsTestBase, add uri label to dropwizard-metrics4&5\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "c715049829178adea9255251768ef7109314b25f": {
                "dropwizard-metrics4/src/main/java/feign/metrics4/MeteredClient.java": [
                    "public Response feign.metrics4.MeteredClient.execute(Request request, Options options)"
                ],
                "dropwizard-metrics4/src/main/java/feign/metrics4/MeteredDecoder.java": [
                    "public Object feign.metrics4.MeteredDecoder.decode(Response response, Type type)"
                ],
                "dropwizard-metrics5/src/main/java/feign/metrics5/MeteredClient.java": [
                    "public Response feign.metrics5.MeteredClient.execute(Request request, Options options)"
                ],
                "dropwizard-metrics5/src/main/java/feign/metrics5/MeteredDecoder.java": [
                    "public Object feign.metrics5.MeteredDecoder.decode(Response response, Type type)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredClient.java": [
                    "protected Timer feign.micrometer.MeteredClient.createTimer(Request request, Response response, Options options, Exception e)",
                    "protected void feign.micrometer.MeteredClient.countResponseCode(Request request, Response response, Options options, int responseStatus, Exception e)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredDecoder.java": [
                    "protected Counter feign.micrometer.MeteredDecoder.createExceptionCounter(Response response, Type type, Exception e)",
                    "protected Tag[] feign.micrometer.MeteredDecoder.extraTags(Response response, Type type, Exception e)"
                ]
            },
            "423c18c7b8d2dfa3053bf554be0f7a76ff9cbba4": {
                "dropwizard-metrics4/src/main/java/feign/metrics4/MeteredClient.java": [
                    "public Response feign.metrics4.MeteredClient.execute(Request request, Options options)"
                ],
                "dropwizard-metrics4/src/main/java/feign/metrics4/MeteredDecoder.java": [
                    "public Object feign.metrics4.MeteredDecoder.decode(Response response, Type type)"
                ],
                "dropwizard-metrics5/src/main/java/feign/metrics5/MeteredClient.java": [
                    "public Response feign.metrics5.MeteredClient.execute(Request request, Options options)"
                ],
                "dropwizard-metrics5/src/main/java/feign/metrics5/MeteredDecoder.java": [
                    "public Object feign.metrics5.MeteredDecoder.decode(Response response, Type type)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredClient.java": [
                    "protected Timer feign.micrometer.MeteredClient.createTimer(Request request, Response response, Options options, Exception e)",
                    "protected void feign.micrometer.MeteredClient.countResponseCode(Request request, Response response, Options options, int responseStatus, Exception e)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredDecoder.java": [
                    "protected Counter feign.micrometer.MeteredDecoder.createExceptionCounter(Response response, Type type, Exception e)",
                    "protected Tag[] feign.micrometer.MeteredDecoder.extraTags(Response response, Type type, Exception e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "368818ab9ab741fa335a9dd739c4d2cc5fe04e70",
        "previous_commit": "58d49da0eba0ced60e7a09f24ee562c10f8f10a2",
        "date": 1665308571,
        "releases": {
            "previous": "368818ab9ab741fa335a9dd739c4d2cc5fe04e70",
            "next": "368818ab9ab741fa335a9dd739c4d2cc5fe04e70"
        },
        "commit_message": "Add retry feature to async feign (#1757)\n\n* Define MethodHandler.Factory interface\r\n\r\n* Extract AsynchronousMethodHandler from SynchronousMethodHandler\r\n\r\n* Genericize AsynchronousMethodHandler for receive requestContext\r\n\r\n* Pass requestContext to AsynchronousMethodHandler\r\n\r\n* Add retry feature to AsyncFeign\r\n\r\n* Remove ReflectiveAsyncFeign\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "368818ab9ab741fa335a9dd739c4d2cc5fe04e70": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()",
                    "public <T> T feign.AsyncFeign<C>.newInstance(Target<T> target, C context)"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public Map<String, MethodHandler> feign.ReflectiveFeign<C>.apply(Target target, C requestContext)",
                    "public <T> T feign.ReflectiveFeign<C>.newInstance(Target<T> target)",
                    "public <T> T feign.ReflectiveFeign<C>.newInstance(Target<T> target, C requestContext)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "public MethodHandler feign.SynchronousMethodHandler.create(Target<?> target, MethodMetadata md, RequestTemplate.Factory buildTemplateFromArgs, Options options, Decoder decoder, ErrorDecoder errorDecoder, Object requestContext)",
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)"
                ]
            },
            "58d49da0eba0ced60e7a09f24ee562c10f8f10a2": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()",
                    "public <T> T feign.AsyncFeign<C>.newInstance(Target<T> target, C context)"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public Map<String, MethodHandler> feign.ReflectiveFeign.apply(Target target)",
                    "public <T> T feign.ReflectiveFeign.newInstance(Target<T> target)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "public MethodHandler feign.SynchronousMethodHandler.create(Target<?> target, MethodMetadata md, RequestTemplate.Factory buildTemplateFromArgs, Options options, Decoder decoder, ErrorDecoder errorDecoder)",
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bdb46138cdcb94c3a2fd32bb18c37c69b1a51c41",
        "previous_commit": "29935b2287d455677171277f4e02926b5d9dd5a9",
        "date": 1549058718,
        "releases": {
            "previous": "bdb46138cdcb94c3a2fd32bb18c37c69b1a51c41",
            "next": "bdb46138cdcb94c3a2fd32bb18c37c69b1a51c41"
        },
        "commit_message": "Make status mandatory (#880)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "bdb46138cdcb94c3a2fd32bb18c37c69b1a51c41": {
                "core/src/main/java/feign/FeignException.java": [
                    "static FeignException feign.FeignException.errorExecuting(Request request, IOException cause)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.decode(Response response)"
                ],
                "core/src/main/java/feign/codec/ErrorDecoder.java": [
                    "public Exception feign.codec.Default.decode(String methodKey, Response response)"
                ],
                "core/src/main/java/feign/codec/StringDecoder.java": [
                    "public Object feign.codec.StringDecoder.decode(Response response, Type type)"
                ],
                "jackson/src/main/java/feign/jackson/JacksonIteratorDecoder.java": [
                    "public boolean feign.jackson.JacksonIteratorDecoder.hasNext()"
                ],
                "jaxb/src/main/java/feign/jaxb/JAXBDecoder.java": [
                    "public Object feign.jaxb.JAXBDecoder.decode(Response response, Type type)"
                ],
                "sax/src/main/java/feign/sax/SAXDecoder.java": [
                    "public Object feign.sax.SAXDecoder.decode(Response response, Type type)"
                ],
                "soap/src/main/java/feign/soap/SOAPDecoder.java": [
                    "public Object feign.soap.SOAPDecoder.decode(Response response, Type type)"
                ]
            },
            "29935b2287d455677171277f4e02926b5d9dd5a9": {
                "core/src/main/java/feign/FeignException.java": [
                    "static FeignException feign.FeignException.errorExecuting(Request request, IOException cause)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.decode(Response response)"
                ],
                "core/src/main/java/feign/codec/ErrorDecoder.java": [
                    "public Exception feign.codec.Default.decode(String methodKey, Response response)"
                ],
                "core/src/main/java/feign/codec/StringDecoder.java": [
                    "public Object feign.codec.StringDecoder.decode(Response response, Type type)"
                ],
                "jackson/src/main/java/feign/jackson/JacksonIteratorDecoder.java": [
                    "public boolean feign.jackson.JacksonIteratorDecoder.hasNext()"
                ],
                "jaxb/src/main/java/feign/jaxb/JAXBDecoder.java": [
                    "public Object feign.jaxb.JAXBDecoder.decode(Response response, Type type)"
                ],
                "sax/src/main/java/feign/sax/SAXDecoder.java": [
                    "public Object feign.sax.SAXDecoder.decode(Response response, Type type)"
                ],
                "soap/src/main/java/feign/soap/SOAPDecoder.java": [
                    "public Object feign.soap.SOAPDecoder.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a9e631ac9beed8a59b52b480f75231695624c2a0",
        "previous_commit": "68f79847449c6df36010e9c4118c4244854ea67c",
        "date": 1583744849,
        "releases": {
            "previous": "a9e631ac9beed8a59b52b480f75231695624c2a0",
            "next": "a9e631ac9beed8a59b52b480f75231695624c2a0"
        },
        "commit_message": "Add extra information when failing to parse contract (#1176)\n\n* Add extra information when failing to parse contract\r\n\r\n* Add warnings to other error messages\r\n\r\n* Move check if processor are valid before if block",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "a9e631ac9beed8a59b52b480f75231695624c2a0": {
                "core/src/main/java/feign/Contract.java": [
                    "private static Map<String, Collection<String>> feign.Default.toMap(String[] input)",
                    "protected void feign.BaseContract.nameParam(MethodMetadata data, String name, int i)",
                    "public List<MethodMetadata> feign.BaseContract.parseAndValidateMetadata(Class<?> targetType)",
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)",
                    "private static void feign.BaseContract.checkMapKeys(String name, Type genericType)"
                ],
                "core/src/main/java/feign/DeclarativeContract.java": [
                    "protected final void feign.DeclarativeContract.processAnnotationOnClass(MethodMetadata data, Class<?> targetType)",
                    "protected final void feign.DeclarativeContract.processAnnotationOnMethod(MethodMetadata data, Annotation annotation, Method method)",
                    "protected final boolean feign.DeclarativeContract.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)"
                ]
            },
            "68f79847449c6df36010e9c4118c4244854ea67c": {
                "core/src/main/java/feign/Contract.java": [
                    "private static Map<String, Collection<String>> feign.Default.toMap(String[] input)",
                    "protected void feign.BaseContract.nameParam(MethodMetadata data, String name, int i)",
                    "public List<MethodMetadata> feign.BaseContract.parseAndValidateMetadata(Class<?> targetType)",
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)",
                    "private static void feign.BaseContract.checkMapKeys(String name, Type genericType)"
                ],
                "core/src/main/java/feign/DeclarativeContract.java": [
                    "protected final void feign.DeclarativeContract.processAnnotationOnClass(MethodMetadata data, Class<?> targetType)",
                    "protected final void feign.DeclarativeContract.processAnnotationOnMethod(MethodMetadata data, Annotation annotation, Method method)",
                    "protected final boolean feign.DeclarativeContract.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f16553db43ed062d1de878b38ecff0268ad440ba",
        "previous_commit": "f72db36968d499874e5bd1bdc39289dd62e45ddd",
        "date": 1542313056,
        "releases": {
            "previous": "f16553db43ed062d1de878b38ecff0268ad440ba",
            "next": "f16553db43ed062d1de878b38ecff0268ad440ba"
        },
        "commit_message": "Adding Support for Query Parameter Name Expansion (#841)\n\n* Adding Support for Query Parameter Name Expansion\r\n\r\nFixes #838\r\n\r\n`QueryTemplate` assumed that all query names were literals.  This change\r\nadds support for Expressions in Query Parameter names, providing better\r\nadherence to RFC 6570.\r\n\r\nRequestLines such as `@RequestLine(\"GET /uri?{parameter}={value}\")` are\r\nnow fully expanded whereas before, only `{value}` would be.\r\n\r\n* Adding Encoding and Resolution Enums for Template Control\r\n\r\nThese new enums replace the boolean values used to control\r\nencoding and expression expansion options in Templates\r\n\r\n* Allow unresolved expressions in Query Parameter Name and Body Template\r\n\r\nExpressions in Query Parameter names and in a Body Template will\r\nnow no longer be removed if they are not resolved.  For Query Template,\r\nthis change will prevent invalid query name/value pairs from being\r\ngenerated.\r\n\r\nFor the Body Template, the documentation states that\r\nunresolved should be preserved, yet the code did not match.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "f16553db43ed062d1de878b38ecff0268ad440ba": {
                "core/src/main/java/feign/template/QueryTemplate.java": [
                    "public String feign.template.QueryTemplate.getName()",
                    "private String feign.template.QueryTemplate.queryString(String name, String values)",
                    "public String feign.template.QueryTemplate.expand(Map<String, ?> variables)",
                    "public String feign.template.QueryTemplate.toString()"
                ],
                "core/src/main/java/feign/template/Template.java": [
                    "private String feign.template.Template.encode(String value, boolean query)",
                    "private String feign.template.Template.encode(String value)",
                    "public String feign.template.Template.expand(Map<String, ?> variables)",
                    "public boolean feign.template.Template.encode()"
                ]
            },
            "f72db36968d499874e5bd1bdc39289dd62e45ddd": {
                "core/src/main/java/feign/template/QueryTemplate.java": [
                    "public String feign.template.QueryTemplate.getName()",
                    "public String feign.template.QueryTemplate.expand(Map<String, ?> variables)",
                    "private String feign.template.QueryTemplate.queryString(String values)",
                    "public String feign.template.QueryTemplate.toString()"
                ],
                "core/src/main/java/feign/template/Template.java": [
                    "private String feign.template.Template.encode(String value, boolean query)",
                    "private String feign.template.Template.encode(String value)",
                    "public String feign.template.Template.expand(Map<String, ?> variables)",
                    "public boolean feign.template.Template.encode()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "819b2df8c54d9266abf4cde9b17ab7890ed95cc6",
        "previous_commit": "49e137349d32acc6c7e886b4646fca578b412eb5",
        "date": 1579313365,
        "releases": {
            "previous": "819b2df8c54d9266abf4cde9b17ab7890ed95cc6",
            "next": "819b2df8c54d9266abf4cde9b17ab7890ed95cc6"
        },
        "commit_message": "Correct Encoding and restore decodeSlash in QueryTemplate (#1160)\n\nFixes #1156\r\n\r\nCollection Format was encoding query string values unnecessarily\r\ndue to changes introduced in #1138 and #1139 that encode template\r\nvalues before appending them to the query string.\r\n\r\nIn addition, `decodeSlash` flags that were accidentally removed,\r\nhave been restored in QueryTemplate.\r\n\r\n* Restoring decodeSlash in QueryTemplate\r\n\r\n* Correcting Readme with regards to decodeSlash usage\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "819b2df8c54d9266abf4cde9b17ab7890ed95cc6": {
                "core/src/main/java/feign/CollectionFormat.java": [
                    "public CharSequence join(String field, Collection<String> values, Charset charset)"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.decodeSlash(boolean decodeSlash)",
                    "private RequestTemplate feign.RequestTemplate.appendQuery(String name, Iterable<String> values, CollectionFormat collectionFormat)"
                ],
                "core/src/main/java/feign/template/QueryTemplate.java": [
                    "public static QueryTemplate feign.template.QueryTemplate.create(String name, Iterable<String> values, Charset charset, CollectionFormat collectionFormat, boolean decodeSlash)",
                    "public static QueryTemplate feign.template.QueryTemplate.create(String name, Iterable<String> values, Charset charset, CollectionFormat collectionFormat)",
                    "public static QueryTemplate feign.template.QueryTemplate.create(String name, Iterable<String> values, Charset charset)",
                    "public static QueryTemplate feign.template.QueryTemplate.append(QueryTemplate queryTemplate, Iterable<String> values, CollectionFormat collectionFormat, boolean decodeSlash)"
                ],
                "core/src/main/java/feign/template/UriUtils.java": [
                    "private static String feign.template.UriUtils.encodeChunk(String value, Charset charset, boolean allowReserved)"
                ]
            },
            "49e137349d32acc6c7e886b4646fca578b412eb5": {
                "core/src/main/java/feign/CollectionFormat.java": [
                    "public CharSequence join(String field, Collection<String> values, Charset charset)"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.decodeSlash(boolean decodeSlash)",
                    "private RequestTemplate feign.RequestTemplate.appendQuery(String name, Iterable<String> values, CollectionFormat collectionFormat)"
                ],
                "core/src/main/java/feign/template/QueryTemplate.java": [
                    "public static QueryTemplate feign.template.QueryTemplate.create(String name, Iterable<String> values, Charset charset, CollectionFormat collectionFormat)",
                    "public static QueryTemplate feign.template.QueryTemplate.create(String name, Iterable<String> values, Charset charset)",
                    "public static QueryTemplate feign.template.QueryTemplate.append(QueryTemplate queryTemplate, Iterable<String> values, CollectionFormat collectionFormat)"
                ],
                "core/src/main/java/feign/template/UriUtils.java": [
                    "private static String feign.template.UriUtils.encodeChunk(String value, Charset charset, boolean allowReserved)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d1199f64aec365a24551b00ec1780e56af04870d",
        "previous_commit": "03ff13ed54d7c628314855074004a4a3da7c1f0a",
        "date": 1557409699,
        "releases": {
            "previous": "d1199f64aec365a24551b00ec1780e56af04870d",
            "next": "d1199f64aec365a24551b00ec1780e56af04870d"
        },
        "commit_message": "Feature/replace deprecated body (#959)\n\nIn this pr the old `body()` method calls replaced with `requestBody().asBytes()` method which both exists in Request class. The intention is to remove deprecated code and keep source code clean.\r\n\r\nRelated to #857 \r\n\r\n* replaced old body with new Body.asBytes()\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "d1199f64aec365a24551b00ec1780e56af04870d": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)"
                ],
                "core/src/main/java/feign/FeignException.java": [
                    "static FeignException feign.FeignException.errorReading(Request request, Response response, IOException cause)"
                ],
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "HttpUriRequest feign.httpclient.ApacheHttpClient.toHttpUriRequest(Request request, Request.Options options)"
                ],
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "private Builder feign.http2client.Http2Client.newRequestBuilder(Request request)"
                ],
                "jaxrs2/src/main/java/feign/jaxrs2/JAXRSClient.java": [
                    "private Entity<byte[]> feign.jaxrs2.JAXRSClient.createRequestEntity(feign.Request request)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)"
                ],
                "ribbon/src/main/java/feign/ribbon/LBClient.java": [
                    "Request feign.ribbon.LBClient.toRequest()"
                ]
            },
            "03ff13ed54d7c628314855074004a4a3da7c1f0a": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)"
                ],
                "core/src/main/java/feign/FeignException.java": [
                    "static FeignException feign.FeignException.errorReading(Request request, Response response, IOException cause)"
                ],
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "HttpUriRequest feign.httpclient.ApacheHttpClient.toHttpUriRequest(Request request, Request.Options options)"
                ],
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "private Builder feign.http2client.Http2Client.newRequestBuilder(Request request)"
                ],
                "jaxrs2/src/main/java/feign/jaxrs2/JAXRSClient.java": [
                    "private Entity<byte[]> feign.jaxrs2.JAXRSClient.createRequestEntity(feign.Request request)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)"
                ],
                "ribbon/src/main/java/feign/ribbon/LBClient.java": [
                    "Request feign.ribbon.LBClient.toRequest()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "efc6cf4c59486d42ded8ce1f9f8b2792ab21c28a",
        "previous_commit": "744fd725ac60b534ff553ec96dcd6494631e677f",
        "date": 1568123040,
        "releases": {
            "previous": "efc6cf4c59486d42ded8ce1f9f8b2792ab21c28a",
            "next": "efc6cf4c59486d42ded8ce1f9f8b2792ab21c28a"
        },
        "commit_message": "Create new module for Apache Http 5 (#1065)\n\nCreate new module for Apache Http Components Client version 5.x",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "efc6cf4c59486d42ded8ce1f9f8b2792ab21c28a": {
                "core/src/main/java/feign/Request.java": [
                    "public int feign.Request.readTimeoutMillis()",
                    "public Request.Body feign.Request.expand(Map<String, ?> variables)",
                    "public List<String> feign.Request.getVariables()",
                    "public String feign.Request.asString()",
                    "public int feign.Request.connectTimeoutMillis()",
                    "public String feign.Request.toString()",
                    "public static Request feign.Request.create(String method, String url, Map<String, Collection<String>> headers, byte[] body, Charset charset)"
                ]
            },
            "744fd725ac60b534ff553ec96dcd6494631e677f": {
                "core/src/main/java/feign/Request.java": [
                    "public int feign.Request.readTimeoutMillis()",
                    "public Request.Body feign.Request.expand(Map<String, ?> variables)",
                    "public List<String> feign.Request.getVariables()",
                    "public String feign.Request.asString()",
                    "public int feign.Request.connectTimeoutMillis()",
                    "public String feign.Request.toString()",
                    "public static Request feign.Request.create(String method, String url, Map<String, Collection<String>> headers, byte[] body, Charset charset)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "23abb5075dee28a334e37b7b9b4c1c278638ed66",
        "previous_commit": "e282510c22703921f25ad1a4f5741293988bf1ce",
        "date": 1565192843,
        "releases": {
            "previous": "23abb5075dee28a334e37b7b9b4c1c278638ed66",
            "next": "23abb5075dee28a334e37b7b9b4c1c278638ed66"
        },
        "commit_message": "Added configuration for reactive scheduler (#1032)\n\n* Added configuration for reactive scheduler\r\n\r\n* make final things explicitly final.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "23abb5075dee28a334e37b7b9b4c1c278638ed66": {
                "reactive/src/main/java/feign/reactive/ReactorFeign.java": [
                    "public InvocationHandler feign.reactive.ReactorFeign.create(Target target, Map<Method, MethodHandler> dispatch)",
                    "public Feign feign.reactive.ReactorFeign.build()"
                ],
                "reactive/src/main/java/feign/reactive/ReactorInvocationHandler.java": [
                    "protected Publisher feign.reactive.ReactorInvocationHandler.invoke(Method method, MethodHandler methodHandler, Object[] arguments)"
                ],
                "reactive/src/main/java/feign/reactive/RxJavaFeign.java": [
                    "public Feign feign.reactive.RxJavaFeign.build()",
                    "public InvocationHandler feign.reactive.RxJavaFeign.create(Target target, Map<Method, MethodHandler> dispatch)"
                ],
                "reactive/src/main/java/feign/reactive/RxJavaInvocationHandler.java": [
                    "protected Publisher feign.reactive.RxJavaInvocationHandler.invoke(Method method, MethodHandler methodHandler, Object[] arguments)"
                ]
            },
            "e282510c22703921f25ad1a4f5741293988bf1ce": {
                "reactive/src/main/java/feign/reactive/ReactorFeign.java": [
                    "public InvocationHandler feign.reactive.ReactorFeign.create(Target target, Map<Method, MethodHandler> dispatch)",
                    "public Feign feign.reactive.ReactorFeign.build()"
                ],
                "reactive/src/main/java/feign/reactive/ReactorInvocationHandler.java": [
                    "protected Publisher feign.reactive.ReactorInvocationHandler.invoke(Method method, MethodHandler methodHandler, Object[] arguments)"
                ],
                "reactive/src/main/java/feign/reactive/RxJavaFeign.java": [
                    "public Feign feign.reactive.RxJavaFeign.build()",
                    "public InvocationHandler feign.reactive.RxJavaFeign.create(Target target, Map<Method, MethodHandler> dispatch)"
                ],
                "reactive/src/main/java/feign/reactive/RxJavaInvocationHandler.java": [
                    "protected Publisher feign.reactive.RxJavaInvocationHandler.invoke(Method method, MethodHandler methodHandler, Object[] arguments)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5e2fdeed0dc72cf7022993ad9877f7bb8e011e14",
        "previous_commit": "213494dff463088a3a738f15e4a49b751c8354e5",
        "date": 1524516698,
        "releases": {
            "previous": "5e2fdeed0dc72cf7022993ad9877f7bb8e011e14",
            "next": "5e2fdeed0dc72cf7022993ad9877f7bb8e011e14"
        },
        "commit_message": "Added support for custom POJO query param encoding (#667)\n\n* Added support for custom param encoding\r\n\r\n* Added ability to inherit @CustomParam annotation\r\n\r\n* Updated class cast style to match rest of code\r\n\r\n* Updated to use QueryMap for custom pojo query parameters\r\n\r\n* Clarification in README of QueryMap POJO usage\r\n\r\n* Removed unused line\r\n\r\n* Updated custom POJO QueryMap test to prove that private fields can be used\r\n\r\n* Removed no-longer-valid test endpoint\r\n\r\n* Renamed tests to more accurately reflect their contents\r\n\r\n* More test cleanup\r\n\r\n* Modified QueryMap POJO encoding to use specified QueryMapEncoder (default implementation provided)\r\n\r\n* Corrected typo in README.md\r\n\r\n* Fixed merge conflict and typo in test name\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "5e2fdeed0dc72cf7022993ad9877f7bb8e011e14": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)",
                    "private static void feign.BaseContract.checkMapString(String name, Class<?> type, Type genericType)"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public Map<String, MethodHandler> feign.ReflectiveFeign.apply(Target key)",
                    "public RequestTemplate feign.ReflectiveFeign.create(Object[] argv)",
                    "private List<String> feign.ReflectiveFeign.expandIterable(Expander expander, Iterable value)"
                ]
            },
            "213494dff463088a3a738f15e4a49b751c8354e5": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)",
                    "private static void feign.BaseContract.checkMapString(String name, Class<?> type, Type genericType)"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public Map<String, MethodHandler> feign.ReflectiveFeign.apply(Target key)",
                    "public RequestTemplate feign.ReflectiveFeign.create(Object[] argv)",
                    "private List<String> feign.ReflectiveFeign.expandIterable(Expander expander, Iterable value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5c57213b349c3e76910f595b67b13d0d34f64566",
        "previous_commit": "a2904ad189efd640f65d2ae527425d7dbada3beb",
        "date": 1563700777,
        "releases": {
            "previous": "5c57213b349c3e76910f595b67b13d0d34f64566",
            "next": "5c57213b349c3e76910f595b67b13d0d34f64566"
        },
        "commit_message": "Respect decode404 flag and decode 404 response body (#1012)\n\n* decode 404 response body\r\n\r\n* fix SOAPCodecTest\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "5c57213b349c3e76910f595b67b13d0d34f64566": {
                "gson/src/main/java/feign/gson/GsonDecoder.java": [
                    "public Object feign.gson.GsonDecoder.decode(Response response, Type type)"
                ],
                "jackson-jaxb/src/main/java/feign/jackson/jaxb/JacksonJaxbJsonDecoder.java": [
                    "public Object feign.jackson.jaxb.JacksonJaxbJsonDecoder.decode(Response response, Type type)"
                ],
                "jackson/src/main/java/feign/jackson/JacksonDecoder.java": [
                    "public Object feign.jackson.JacksonDecoder.decode(Response response, Type type)"
                ],
                "jackson/src/main/java/feign/jackson/JacksonIteratorDecoder.java": [
                    "public Object feign.jackson.JacksonIteratorDecoder.decode(Response response, Type type)"
                ],
                "jaxb/src/main/java/feign/jaxb/JAXBDecoder.java": [
                    "public Object feign.jaxb.JAXBDecoder.decode(Response response, Type type)"
                ],
                "sax/src/main/java/feign/sax/SAXDecoder.java": [
                    "public Object feign.sax.SAXDecoder.decode(Response response, Type type)"
                ]
            },
            "a2904ad189efd640f65d2ae527425d7dbada3beb": {
                "gson/src/main/java/feign/gson/GsonDecoder.java": [
                    "public Object feign.gson.GsonDecoder.decode(Response response, Type type)"
                ],
                "jackson-jaxb/src/main/java/feign/jackson/jaxb/JacksonJaxbJsonDecoder.java": [
                    "public Object feign.jackson.jaxb.JacksonJaxbJsonDecoder.decode(Response response, Type type)"
                ],
                "jackson/src/main/java/feign/jackson/JacksonDecoder.java": [
                    "public Object feign.jackson.JacksonDecoder.decode(Response response, Type type)"
                ],
                "jackson/src/main/java/feign/jackson/JacksonIteratorDecoder.java": [
                    "public Object feign.jackson.JacksonIteratorDecoder.decode(Response response, Type type)"
                ],
                "jaxb/src/main/java/feign/jaxb/JAXBDecoder.java": [
                    "public Object feign.jaxb.JAXBDecoder.decode(Response response, Type type)"
                ],
                "sax/src/main/java/feign/sax/SAXDecoder.java": [
                    "public Object feign.sax.SAXDecoder.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "542312e6163327bee0eee481094e9f932fd67140",
        "previous_commit": "f8c57dabe49ded5433e7b7d08b5b7432455284aa",
        "date": 1665511409,
        "releases": {
            "previous": "542312e6163327bee0eee481094e9f932fd67140",
            "next": "542312e6163327bee0eee481094e9f932fd67140"
        },
        "commit_message": "Refactor AsyncFeign (#1789)\n\n* Refactor to supply defaultContext on ReflectiveFeign\r\n\r\n* Move target specification verification logic\r\n\r\n* Refactor TargetSpecificationVerifier\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "542312e6163327bee0eee481094e9f932fd67140": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()",
                    "public <T> T feign.AsyncFeign<C>.newInstance(Target<T> target)",
                    "public <T> T feign.AsyncFeign<C>.newInstance(Target<T> target, C context)"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public <T> T feign.ReflectiveFeign<C>.newInstance(Target<T> target)",
                    "public <T> T feign.ReflectiveFeign<C>.newInstance(Target<T> target, C requestContext)"
                ]
            },
            "f8c57dabe49ded5433e7b7d08b5b7432455284aa": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()",
                    "public <T> T feign.AsyncFeign<C>.newInstance(Target<T> target)",
                    "public <T> T feign.AsyncFeign<C>.newInstance(Target<T> target, C context)"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public <T> T feign.ReflectiveFeign<C>.newInstance(Target<T> target)",
                    "public <T> T feign.ReflectiveFeign<C>.newInstance(Target<T> target, C requestContext)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7d1cf7ced714b355e981e50be1b0f49eb5f8a787",
        "previous_commit": "333782514b700d9fe798c25986becd60f23c06a0",
        "date": 1663623052,
        "releases": {
            "previous": "7d1cf7ced714b355e981e50be1b0f49eb5f8a787",
            "next": "7d1cf7ced714b355e981e50be1b0f49eb5f8a787"
        },
        "commit_message": "Refactor async feign (#1755)\n\n* Add MethodInfoResolver to customize MethodInfo creation logic\r\n\r\n* Add methodInfoResolver setter to AsyncBuilder\r\n\r\n* Refactor CoroutineFeign to use AsyncFeignBuilder instead of FeignBuilder\r\n\r\n* Deprecate CoroutineFeign.coBuilder\r\n\r\n* Change AsyncFeign to not inherit Feign\r\n\r\n* Deprecate AsyncFeign.asyncBuilder\r\n\r\n* Refactor AsyncBuilder to build Feign directly\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "7d1cf7ced714b355e981e50be1b0f49eb5f8a787": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()",
                    "public static <C> AsyncBuilder<C> feign.AsyncFeign<C>.asyncBuilder()"
                ],
                "core/src/main/java/feign/ReflectiveAsyncFeign.java": [
                    "public Object feign.ReflectiveAsyncFeign<C>.invoke(Object proxy, Method method, Object[] args)"
                ],
                "kotlin/src/main/java/feign/kotlin/CoroutineFeign.java": [
                    "public CoroutineFeign<C> feign.kotlin.CoroutineFeign<C>.build()",
                    "public static <C> CoroutineBuilder<C> feign.kotlin.CoroutineFeign<C>.coBuilder()",
                    "public Object feign.kotlin.CoroutineFeign<C>.invoke(Object proxy, Method method, Object[] args)"
                ]
            },
            "333782514b700d9fe798c25986becd60f23c06a0": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()",
                    "public static <C> AsyncBuilder<C> feign.AsyncFeign<C>.asyncBuilder()"
                ],
                "core/src/main/java/feign/ReflectiveAsyncFeign.java": [
                    "public Object feign.ReflectiveAsyncFeign<C>.invoke(Object proxy, Method method, Object[] args)"
                ],
                "kotlin/src/main/java/feign/kotlin/CoroutineFeign.java": [
                    "public CoroutineFeign<C> feign.kotlin.CoroutineFeign<C>.build()",
                    "public static <C> CoroutineBuilder<C> feign.kotlin.CoroutineFeign<C>.coBuilder()",
                    "public Object feign.kotlin.CoroutineFeign<C>.invoke(Object proxy, Method method, Object[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "deda96a4c5c5966d67d0e17d9d8c460faf67dbe6",
        "previous_commit": "0e4a1c8da3474e4e3ffdb066bd57d1cd3469a03e",
        "date": 1475365693,
        "releases": {
            "previous": "deda96a4c5c5966d67d0e17d9d8c460faf67dbe6",
            "next": "deda96a4c5c5966d67d0e17d9d8c460faf67dbe6"
        },
        "commit_message": "Implements possibility to disable @Param url encoding (#465)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "deda96a4c5c5966d67d0e17d9d8c460faf67dbe6": {
                "core/src/main/java/feign/Contract.java": [
                    "protected boolean feign.Default.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)",
                    "private static <K, V> boolean feign.Default.searchMapValuesContainsSubstring(Map<K, Collection<String>> map, String search)"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public static String feign.RequestTemplate.expand(String template, Map<String, ?> variables)",
                    "public Request feign.RequestTemplate.request()",
                    "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> unencoded)",
                    "public void feign.RequestTemplate.replaceQueryValues(Map<String, ?> unencoded)"
                ]
            },
            "0e4a1c8da3474e4e3ffdb066bd57d1cd3469a03e": {
                "core/src/main/java/feign/Contract.java": [
                    "protected boolean feign.Default.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)",
                    "private static <K, V> boolean feign.Default.searchMapValuesContainsSubstring(Map<K, Collection<String>> map, String search)"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public static String feign.RequestTemplate.expand(String template, Map<String, ?> variables)",
                    "public Request feign.RequestTemplate.request()",
                    "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> unencoded)",
                    "public void feign.RequestTemplate.replaceQueryValues(Map<String, ?> unencoded)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f8ad8670e3dc73862f52eec475464a301e8c41cc",
        "previous_commit": "784301a9cb397d50a1c90bb028ef03da7b466f42",
        "date": 1609274053,
        "releases": {
            "previous": "f8ad8670e3dc73862f52eec475464a301e8c41cc",
            "next": "f8ad8670e3dc73862f52eec475464a301e8c41cc"
        },
        "commit_message": "GH-1270: Fix conflict between single and multi-value headers (#1347)\n\nFixes: #1270\r\n\r\n`HeaderTemplate` was confusing iterable values with literal values due\r\nto the presence of comma `,` characters in the result.  The result was\r\nthat, in certain cases like HTTP Dates, additional spaces were inserted\r\ninto the final expanded value.\r\n\r\nThe root cause of the issue is that `HeaderTemplate` combined all values\r\ninto a single `String` template, with each value separated by a comma.\r\n\r\nThis change refactors `HeaderTemplate` to treat all `values` as individual\r\n`Templates`, removing the need to combine any provided values into a single\r\nString.\r\n\r\n* Remove unnecessary string splits when expanding Headers in RequestTemplate",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "f8ad8670e3dc73862f52eec475464a301e8c41cc": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)"
                ],
                "core/src/main/java/feign/template/HeaderTemplate.java": [
                    "public Collection<String> feign.template.HeaderTemplate.getValues()",
                    "public static HeaderTemplate feign.template.HeaderTemplate.create(String name, Iterable<String> values)",
                    "public String feign.template.HeaderTemplate.expand(Map<String, ?> variables)",
                    "public String feign.template.HeaderTemplate.getName()"
                ]
            },
            "784301a9cb397d50a1c90bb028ef03da7b466f42": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)"
                ],
                "core/src/main/java/feign/template/HeaderTemplate.java": [
                    "public Collection<String> feign.template.HeaderTemplate.getValues()",
                    "public static HeaderTemplate feign.template.HeaderTemplate.create(String name, Iterable<String> values)",
                    "public String feign.template.HeaderTemplate.expand(Map<String, ?> variables)",
                    "public String feign.template.HeaderTemplate.getName()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a259a729a8107acaf4d188367a72ef04f9434210",
        "previous_commit": "75a3c1cf6f0e57c2d1eaa5f8be2538489e605650",
        "date": 1655945906,
        "releases": {
            "previous": "a259a729a8107acaf4d188367a72ef04f9434210",
            "next": "a259a729a8107acaf4d188367a72ef04f9434210"
        },
        "commit_message": "Alternative ResponseInterceptor attempt (#1634)\n\n* add ResponseInterceptor support #1126\r\n\r\n* Add the license header.\r\n\r\nAdd the license header.\r\n\r\nCo-authored-by: Dewald de Jager <DewaldDeJager@users.noreply.github.com>\r\n\r\n* small fix for license header\r\n\r\n* fix format issue\r\n\r\n* combine before and after method to one aroundDecode method\r\n\r\n* Change ResponseInterceptor to use InvocationContext\r\n\r\nCo-authored-by: Fei,Yanke <yanke.fei@mosi-tech.com>\r\nCo-authored-by: feiyanke <feiyanke@126.com>\r\nCo-authored-by: Dewald de Jager <DewaldDeJager@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "a259a729a8107acaf4d188367a72ef04f9434210": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()"
                ],
                "core/src/main/java/feign/AsyncResponseHandler.java": [
                    "Object feign.AsyncResponseHandler.decode(Response response, Type type)"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "public MethodHandler feign.SynchronousMethodHandler.create(Target<?> target, MethodMetadata md, RequestTemplate.Factory buildTemplateFromArgs, Options options, Decoder decoder, ErrorDecoder errorDecoder)",
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)"
                ]
            },
            "75a3c1cf6f0e57c2d1eaa5f8be2538489e605650": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()"
                ],
                "core/src/main/java/feign/AsyncResponseHandler.java": [
                    "Object feign.AsyncResponseHandler.decode(Response response, Type type)"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "public MethodHandler feign.SynchronousMethodHandler.create(Target<?> target, MethodMetadata md, RequestTemplate.Factory buildTemplateFromArgs, Options options, Decoder decoder, ErrorDecoder errorDecoder)",
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bc0fcdb8e080c11cb5648e6a78e217420a76f3ff",
        "previous_commit": "742a2d9d5a906290a7d89fe926df34044453897b",
        "date": 1679041221,
        "releases": {
            "previous": "bc0fcdb8e080c11cb5648e6a78e217420a76f3ff",
            "next": "bc0fcdb8e080c11cb5648e6a78e217420a76f3ff"
        },
        "commit_message": "Add http_method tag to micrometer metrics (#1968)\n\n* Add http_method tag to micrometer metrics\r\n\r\n* Limit line length to 100 chars\r\n\r\n* Applies eclipse-java-style to AbstractMetricsTestBase\r\n\r\n* Fix AbstractMetricsTestBase format",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "bc0fcdb8e080c11cb5648e6a78e217420a76f3ff": {
                "dropwizard-metrics4/src/main/java/feign/metrics4/BaseMeteredClient.java": [
                    "protected void feign.metrics4.BaseMeteredClient.recordSuccess(RequestTemplate template, Response response)",
                    "protected void feign.metrics4.BaseMeteredClient.recordFailure(RequestTemplate template, FeignException e)"
                ],
                "dropwizard-metrics5/src/main/java/feign/metrics5/BaseMeteredClient.java": [
                    "protected void feign.metrics5.BaseMeteredClient.recordSuccess(RequestTemplate template, Response response)",
                    "protected void feign.metrics5.BaseMeteredClient.recordFailure(RequestTemplate template, FeignException e)"
                ],
                "micrometer/src/main/java/feign/micrometer/BaseMeteredClient.java": [
                    "protected void feign.micrometer.BaseMeteredClient.countResponseCode( Request request, Response response, Options options, int responseStatus, Exception e)"
                ]
            },
            "742a2d9d5a906290a7d89fe926df34044453897b": {
                "dropwizard-metrics4/src/main/java/feign/metrics4/BaseMeteredClient.java": [
                    "protected void feign.metrics4.BaseMeteredClient.recordSuccess(RequestTemplate template, Response response)",
                    "protected void feign.metrics4.BaseMeteredClient.recordFailure(RequestTemplate template, FeignException e)"
                ],
                "dropwizard-metrics5/src/main/java/feign/metrics5/BaseMeteredClient.java": [
                    "protected void feign.metrics5.BaseMeteredClient.recordSuccess(RequestTemplate template, Response response)",
                    "protected void feign.metrics5.BaseMeteredClient.recordFailure(RequestTemplate template, FeignException e)"
                ],
                "micrometer/src/main/java/feign/micrometer/BaseMeteredClient.java": [
                    "protected void feign.micrometer.BaseMeteredClient.countResponseCode( Request request, Response response, Options options, int responseStatus, Exception e)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1abcc42a9aa55e9272c7b075cc7b3b03336410dd",
        "previous_commit": "3042e521b927efdc37ff1d61e244073995e0964e",
        "date": 1655162555,
        "releases": {
            "previous": "1abcc42a9aa55e9272c7b075cc7b3b03336410dd",
            "next": "1abcc42a9aa55e9272c7b075cc7b3b03336410dd"
        },
        "commit_message": "Fix for #1286 (#1287)\n\n* Fix for #1286\r\n\r\nWhen feign is done with the response, also invoke close on http response (if closeable)\r\n\r\n* Update httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java\r\n\r\nCo-authored-by: Austin Pio <austinpioj@gmail.com>\r\n\r\n* Update ApacheHttpClient.java\r\n\r\n* Use finally block to close http5 client\r\n\r\n* Use finally block to close http5 client\r\n\r\nCo-authored-by: Kevin Davis <kdavisk6@gmail.com>\r\nCo-authored-by: Austin Pio <austinpioj@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "1abcc42a9aa55e9272c7b075cc7b3b03336410dd": {
                "hc5/src/main/java/feign/hc5/ApacheHttp5Client.java": [
                    "public void feign.hc5.ApacheHttp5Client.close()",
                    "Response.Body feign.hc5.ApacheHttp5Client.toFeignBody(ClassicHttpResponse httpResponse)",
                    "Response feign.hc5.ApacheHttp5Client.toFeignResponse(ClassicHttpResponse httpResponse, Request request)"
                ],
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "Response.Body feign.httpclient.ApacheHttpClient.toFeignBody(HttpResponse httpResponse)",
                    "public void feign.httpclient.ApacheHttpClient.close()"
                ]
            },
            "3042e521b927efdc37ff1d61e244073995e0964e": {
                "hc5/src/main/java/feign/hc5/ApacheHttp5Client.java": [
                    "public void feign.hc5.ApacheHttp5Client.close()",
                    "Response.Body feign.hc5.ApacheHttp5Client.toFeignBody(ClassicHttpResponse httpResponse)",
                    "Response feign.hc5.ApacheHttp5Client.toFeignResponse(ClassicHttpResponse httpResponse, Request request)"
                ],
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "Response.Body feign.httpclient.ApacheHttpClient.toFeignBody(HttpResponse httpResponse)",
                    "public void feign.httpclient.ApacheHttpClient.close()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2bf779638473967b49faddcdca85b11bd595de7d",
        "previous_commit": "e15e9f0c982f7adfad72689885eaab03f3cbc396",
        "date": 1542312532,
        "releases": {
            "previous": "2bf779638473967b49faddcdca85b11bd595de7d",
            "next": "2bf779638473967b49faddcdca85b11bd595de7d"
        },
        "commit_message": "Adding SOAP CoDec (+ JAXB modifications) (#786)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "2bf779638473967b49faddcdca85b11bd595de7d": {
                "jaxb/src/main/java/feign/jaxb/JAXBContextFactory.java": [
                    "public Unmarshaller feign.jaxb.JAXBContextFactory.createUnmarshaller(Class<?> clazz)",
                    "public Marshaller feign.jaxb.JAXBContextFactory.createMarshaller(Class<?> clazz)",
                    "private void feign.jaxb.JAXBContextFactory.setMarshallerProperties(Marshaller marshaller)"
                ],
                "jaxb/src/main/java/feign/jaxb/JAXBDecoder.java": [
                    "public Object feign.jaxb.JAXBDecoder.decode(Response response, Type type)"
                ],
                "jaxb/src/main/java/feign/jaxb/JAXBEncoder.java": [
                    "public void feign.jaxb.JAXBEncoder.encode(Object object, Type bodyType, RequestTemplate template)"
                ]
            },
            "e15e9f0c982f7adfad72689885eaab03f3cbc396": {
                "jaxb/src/main/java/feign/jaxb/JAXBContextFactory.java": [
                    "public Unmarshaller feign.jaxb.JAXBContextFactory.createUnmarshaller(Class<?> clazz)",
                    "public Marshaller feign.jaxb.JAXBContextFactory.createMarshaller(Class<?> clazz)",
                    "private void feign.jaxb.JAXBContextFactory.setMarshallerProperties(Marshaller marshaller)"
                ],
                "jaxb/src/main/java/feign/jaxb/JAXBDecoder.java": [
                    "public Object feign.jaxb.JAXBDecoder.decode(Response response, Type type)"
                ],
                "jaxb/src/main/java/feign/jaxb/JAXBEncoder.java": [
                    "public void feign.jaxb.JAXBEncoder.encode(Object object, Type bodyType, RequestTemplate template)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "be25759e93d2b94408b44270013d8379ec9b47bd",
        "previous_commit": "c7ca6e0cc1f9ae31348518ae839e56e0ee07f49d",
        "date": 1694763935,
        "releases": {
            "previous": "be25759e93d2b94408b44270013d8379ec9b47bd",
            "next": "be25759e93d2b94408b44270013d8379ec9b47bd"
        },
        "commit_message": "Retryer: replace an instance of Date with an epoch millisecond (#2170)\n\n* Retryer: replace an instance of Date with an epoch millisecond\r\n\r\n* Style issue: unnecessary explicit casting\r\n\r\n* Add another check to RetryableException's test\r\n\r\n* Update serialization ID. Resolve some deprecation issues of Integer.\r\n\r\n* Remove obsolete Date\r\n\r\n* Remove obsolete Date 2\r\n\r\n* Resolve issue with overrided method of a mock class",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "be25759e93d2b94408b44270013d8379ec9b47bd": {
                "core/src/main/java/feign/FeignException.java": [
                    "static FeignException feign.FeignException.errorExecuting(Request request, IOException cause)"
                ],
                "core/src/main/java/feign/Retryer.java": [
                    "long feign.Default.nextMaxInterval()"
                ],
                "core/src/main/java/feign/codec/ErrorDecoder.java": [
                    "public Exception feign.codec.Default.decode(String methodKey, Response response)"
                ],
                "jaxrs2/src/main/java/feign/jaxrs2/JAXRSClient.java": [
                    "private Integer feign.jaxrs2.JAXRSClient.integerHeader(Response response, String header)"
                ]
            },
            "c7ca6e0cc1f9ae31348518ae839e56e0ee07f49d": {
                "core/src/main/java/feign/FeignException.java": [
                    "static FeignException feign.FeignException.errorExecuting(Request request, IOException cause)"
                ],
                "core/src/main/java/feign/Retryer.java": [
                    "long feign.Default.nextMaxInterval()"
                ],
                "core/src/main/java/feign/codec/ErrorDecoder.java": [
                    "public Exception feign.codec.Default.decode(String methodKey, Response response)"
                ],
                "jaxrs2/src/main/java/feign/jaxrs2/JAXRSClient.java": [
                    "private Integer feign.jaxrs2.JAXRSClient.integerHeader(Response response, String header)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "968f35f1da60a12ae1ef5b7e2c14803882ce6bef",
        "previous_commit": "44afa41a4a23d1711e5d828d34b302c041e90beb",
        "date": 1468047096,
        "releases": {
            "previous": "968f35f1da60a12ae1ef5b7e2c14803882ce6bef",
            "next": "968f35f1da60a12ae1ef5b7e2c14803882ce6bef"
        },
        "commit_message": "Adds support for encoded query parameters in  @QueryMap (#408)\n\nAdds support for encoded query parameters in `@QueryMap` via `@QueryMap(encoded = true)`",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "968f35f1da60a12ae1ef5b7e2c14803882ce6bef": {
                "core/src/main/java/feign/Contract.java": [
                    "protected boolean feign.Default.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "private RequestTemplate feign.ReflectiveFeign.addQueryMapQueryParameters(Object[] argv, RequestTemplate mutable)"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.query(String name, String... values)",
                    "public RequestTemplate feign.RequestTemplate.query(String name, Iterable<String> values)"
                ]
            },
            "44afa41a4a23d1711e5d828d34b302c041e90beb": {
                "core/src/main/java/feign/Contract.java": [
                    "protected boolean feign.Default.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "private RequestTemplate feign.ReflectiveFeign.addQueryMapQueryParameters(Object[] argv, RequestTemplate mutable)"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.query(String name, String... values)",
                    "public RequestTemplate feign.RequestTemplate.query(String name, Iterable<String> values)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "470631be507caf2f27a4c693537f9e2f93852dc3",
        "previous_commit": "79ba51019920d49a6a295dcc56785c59360fba4a",
        "date": 1638303637,
        "releases": {
            "previous": "470631be507caf2f27a4c693537f9e2f93852dc3",
            "next": "470631be507caf2f27a4c693537f9e2f93852dc3"
        },
        "commit_message": "HTTP protocol version on the logging (#1543)\n\n* [HTTP version] Add HTTP version to Response, the default client; Update SLF4J unit-test\r\n\r\n* [HTTP version] Mock client\r\n\r\n* [HTTP version] Apache HTTP Client\r\n\r\n* [HTTP version] protocol -> protocolVersion; Replace protocol number with full name\r\n\r\n* [HTTP version] Code style, rollback to old one\r\n\r\n* [HTTP version] Google HTTP Client\r\n\r\n* [HTTP version] HTTP_PROTOCOL -> HTTP_PROTOCOL_VERSION\r\n\r\n* [HTTP version] HC5\r\n\r\n* [HTTP version] Java11 Client\r\n\r\n* [HTTP version] OkHttpClient\r\n\r\n* [HTTP version] Code style, rollback to old one\r\n\r\n* [HTTP version] Make some required changes: restore log messages for back compatibility, replace string protocol version with enum, replace fragile conversion of alien enums by string case-insensitive comparision\r\n\r\n* [HTTP version] Code style, rollback to old one; Remove unused constants\r\n\r\n* [HTTP version] Update imports\r\n\r\n* [HTTP version] Test coverage\r\n\r\n* [HTTP version] Fix license issue\r\n\r\n* [HTTP version] Beatify and simplify the unit-test",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "470631be507caf2f27a4c693537f9e2f93852dc3": {
                "hc5/src/main/java/feign/hc5/ApacheHttp5Client.java": [
                    "Response feign.hc5.ApacheHttp5Client.toFeignResponse(ClassicHttpResponse httpResponse, Request request)"
                ],
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "protected Response feign.http2client.Http2Client.toFeignResponse(Request request, HttpResponse<byte[]> httpResponse)"
                ],
                "mock/src/main/java/feign/mock/MockClient.java": [
                    "public synchronized Response feign.mock.MockClient.execute(Request request, Request.Options options)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "private static feign.Response feign.okhttp.OkHttpClient.toFeignResponse(Response response, feign.Request request)"
                ]
            },
            "79ba51019920d49a6a295dcc56785c59360fba4a": {
                "hc5/src/main/java/feign/hc5/ApacheHttp5Client.java": [
                    "Response feign.hc5.ApacheHttp5Client.toFeignResponse(ClassicHttpResponse httpResponse, Request request)"
                ],
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "protected Response feign.http2client.Http2Client.toFeignResponse(Request request, HttpResponse<byte[]> httpResponse)"
                ],
                "mock/src/main/java/feign/mock/MockClient.java": [
                    "public synchronized Response feign.mock.MockClient.execute(Request request, Request.Options options)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "private static feign.Response feign.okhttp.OkHttpClient.toFeignResponse(Response response, feign.Request request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8ecb6ade49668ff332316afdef049dbde1d608e8",
        "previous_commit": "baf8e256260eaf7efa732329756575b6e0700a57",
        "date": 1471610890,
        "releases": {
            "previous": "8ecb6ade49668ff332316afdef049dbde1d608e8",
            "next": "8ecb6ade49668ff332316afdef049dbde1d608e8"
        },
        "commit_message": "Adds FallbackFactory, allowing access to the cause of a Hystrix fallback (#443)\n\nThe cause of the fallback is now logged by default to FINE level. You can programmatically inspect\r\nthe cause by making your own `FallbackFactory`. In many cases, the cause will be a `FeignException`,\r\nwhich includes the http status.\r\n\r\nHere's an example of using `FallbackFactory`:\r\n\r\n```java\r\n// This instance will be invoked if there are errors of any kind.\r\nFallbackFactory<GitHub> fallbackFactory = cause -> (owner, repo) -> {\r\n  if (cause instanceof FeignException && ((FeignException) cause).status() == 403) {\r\n    return Collections.emptyList();\r\n  } else {\r\n    return Arrays.asList(\"yogi\");\r\n  }\r\n};\r\n\r\nGitHub github = HystrixFeign.builder()\r\n                            ...\r\n                            .target(GitHub.class, \"https://api.github.com\", fallbackFactory);\r\n```",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "8ecb6ade49668ff332316afdef049dbde1d608e8": {
                "hystrix/src/main/java/feign/hystrix/HystrixFeign.java": [
                    "public InvocationHandler feign.hystrix.HystrixFeign.create(Target target, Map<Method, MethodHandler> dispatch)",
                    "public Feign feign.hystrix.HystrixFeign.build()"
                ],
                "hystrix/src/main/java/feign/hystrix/HystrixInvocationHandler.java": [
                    "public Object feign.hystrix.HystrixInvocationHandler.invoke(final Object proxy, final Method method, final Object[] args)",
                    "protected Object feign.hystrix.HystrixInvocationHandler.getFallback()"
                ]
            },
            "baf8e256260eaf7efa732329756575b6e0700a57": {
                "hystrix/src/main/java/feign/hystrix/HystrixFeign.java": [
                    "public InvocationHandler feign.hystrix.HystrixFeign.create(Target target, Map<Method, MethodHandler> dispatch)",
                    "public Feign feign.hystrix.HystrixFeign.build()"
                ],
                "hystrix/src/main/java/feign/hystrix/HystrixInvocationHandler.java": [
                    "public Object feign.hystrix.HystrixInvocationHandler.invoke(final Object proxy, final Method method, final Object[] args)",
                    "protected Object feign.hystrix.HystrixInvocationHandler.getFallback()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "caa30649c03a3c5175d3c4990d8ba2398f0956dc",
        "previous_commit": "368818ab9ab741fa335a9dd739c4d2cc5fe04e70",
        "date": 1665308951,
        "releases": {
            "previous": "caa30649c03a3c5175d3c4990d8ba2398f0956dc",
            "next": "caa30649c03a3c5175d3c4990d8ba2398f0956dc"
        },
        "commit_message": "Issue #1606 Customize the length of the body in FeignException builder (#1767)\n\nCo-authored-by: Witalij Berdinskich <radio_rogal@keemail.me>\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "caa30649c03a3c5175d3c4990d8ba2398f0956dc": {
                "core/src/main/java/feign/FeignException.java": [
                    "public static FeignException feign.FeignException.errorStatus(String methodKey, Response response)",
                    "private String feign.FeignException.getResponseBodyPreview(byte[] body, Charset charset)",
                    "private String feign.FeignException.getResponseBody(byte[] body, Charset charset)",
                    "public String feign.FeignException.build()"
                ]
            },
            "368818ab9ab741fa335a9dd739c4d2cc5fe04e70": {
                "core/src/main/java/feign/FeignException.java": [
                    "public static FeignException feign.FeignException.errorStatus(String methodKey, Response response)",
                    "private static String feign.FeignException.getResponseBodyPreview(byte[] body, Charset charset)",
                    "private static String feign.FeignException.getResponseBody(byte[] body, Charset charset)",
                    "public String feign.FeignException.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2c00066d4a7a1f1882708166f8b2cbaabe721efa",
        "previous_commit": "c39376fde3b74768355f919b912753c9a14f6cfd",
        "date": 1693287957,
        "releases": {
            "previous": "2c00066d4a7a1f1882708166f8b2cbaabe721efa",
            "next": "2c00066d4a7a1f1882708166f8b2cbaabe721efa"
        },
        "commit_message": "Add support for multiple ResponseInterceptors (#1829)\n\n* Add support for multiple ResponseInterceptors\r\n\r\n* Address PR comments\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin Froeder <marvin.froeder@police.govt.nz>\r\nCo-authored-by: Marvin Froeder <velobr@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "2c00066d4a7a1f1882708166f8b2cbaabe721efa": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.internalBuild()"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.internalBuild()"
                ],
                "core/src/main/java/feign/ResponseHandler.java": [
                    "private Object feign.ResponseHandler.decode(Response response, Type type)"
                ],
                "kotlin/src/main/java/feign/kotlin/CoroutineFeign.java": [
                    "public CoroutineFeign<C> feign.kotlin.CoroutineFeign<C>.internalBuild()"
                ]
            },
            "c39376fde3b74768355f919b912753c9a14f6cfd": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.internalBuild()"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.internalBuild()"
                ],
                "core/src/main/java/feign/ResponseHandler.java": [
                    "private Object feign.ResponseHandler.decode(Response response, Type type)"
                ],
                "kotlin/src/main/java/feign/kotlin/CoroutineFeign.java": [
                    "public CoroutineFeign<C> feign.kotlin.CoroutineFeign<C>.internalBuild()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6771866f9d4ebea14b3ca16a38c12f5a3f0af128",
        "previous_commit": "7ba16df534d82e85eba6dba713fb156328634df4",
        "date": 1554761959,
        "releases": {
            "previous": "6771866f9d4ebea14b3ca16a38c12f5a3f0af128",
            "next": "6771866f9d4ebea14b3ca16a38c12f5a3f0af128"
        },
        "commit_message": "Don't URL encode fragment identifiers (#937)\n\nFixes #936\r\n\r\nThis is a super simple fix to illustrate the issue.\r\nIf a different solution is preferred, then I'm open for suggestions of course.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "6771866f9d4ebea14b3ca16a38c12f5a3f0af128": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.target(String target)",
                    "public String feign.RequestTemplate.url()",
                    "public RequestTemplate feign.RequestTemplate.uri(String uri, boolean append)",
                    "public static RequestTemplate feign.RequestTemplate.from(RequestTemplate requestTemplate)"
                ]
            },
            "7ba16df534d82e85eba6dba713fb156328634df4": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.target(String target)",
                    "public String feign.RequestTemplate.url()",
                    "public RequestTemplate feign.RequestTemplate.uri(String uri, boolean append)",
                    "public static RequestTemplate feign.RequestTemplate.from(RequestTemplate requestTemplate)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fb825f2ce1a0d40ea8b1a5612ccdbe76d15bc3ef",
        "previous_commit": "8117fcfe6fcfd0aa0ebecbb99fa9a428024aa1e1",
        "date": 1526590980,
        "releases": {
            "previous": "fb825f2ce1a0d40ea8b1a5612ccdbe76d15bc3ef",
            "next": "fb825f2ce1a0d40ea8b1a5612ccdbe76d15bc3ef"
        },
        "commit_message": "Mock: manage headers using RequestHeaders (#706)\n\n* feat(feign-mock): add RequestHeaders class to manage headers\r\n\r\n* feat(feign-mock): use google code style formatting\r\n\r\n* feat(feign-mock): remove system.out\r\n\r\n* feat(RequestKey): add deprecated headers builder + format code\r\n\r\n* feat(feign-mock): format pom correctly\r\n\r\n* feat(feign-mock): format pom correctly\r\n\r\n* fix(feign-mock): undo some typo and no-op change\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "fb825f2ce1a0d40ea8b1a5612ccdbe76d15bc3ef": {
                "mock/src/main/java/feign/mock/MockClient.java": [
                    "public MockClient feign.mock.MockClient.add(RequestKey requestKey, int status, byte[] responseBody)"
                ],
                "mock/src/main/java/feign/mock/RequestKey.java": [
                    "public boolean feign.mock.RequestKey.equals(Object obj)",
                    "public Builder feign.mock.RequestKey.headers(Map<String, Collection<String>> headers)",
                    "public String feign.mock.RequestKey.toString()"
                ]
            },
            "8117fcfe6fcfd0aa0ebecbb99fa9a428024aa1e1": {
                "mock/src/main/java/feign/mock/MockClient.java": [
                    "public MockClient feign.mock.MockClient.add(RequestKey requestKey, int status, byte[] responseBody)"
                ],
                "mock/src/main/java/feign/mock/RequestKey.java": [
                    "public boolean feign.mock.RequestKey.equals(Object obj)",
                    "public Builder feign.mock.RequestKey.headers(Map<String, Collection<String>> headers)",
                    "public String feign.mock.RequestKey.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fc6daef95fdde3aaf9d4ba10f36331876c6eead2",
        "previous_commit": "c65915b0b560c2b3dcf14b2e8f644b27d10a3deb",
        "date": 1692653847,
        "releases": {
            "previous": "fc6daef95fdde3aaf9d4ba10f36331876c6eead2",
            "next": "fc6daef95fdde3aaf9d4ba10f36331876c6eead2"
        },
        "commit_message": "The builder clones itself before enrichment (#2117)\n\n* Enrichment of a clone\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin Froeder <marvin.froeder@dovetailstudios.com>\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "fc6daef95fdde3aaf9d4ba10f36331876c6eead2": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.internalBuild()"
                ],
                "hystrix/src/main/java/feign/hystrix/HystrixFeign.java": [
                    "Feign feign.hystrix.HystrixFeign.build(final FallbackFactory<?> nullableFallbackFactory)"
                ],
                "kotlin/src/main/java/feign/kotlin/CoroutineFeign.java": [
                    "public CoroutineFeign<C> feign.kotlin.CoroutineFeign<C>.internalBuild()"
                ],
                "reactive/src/main/java/feign/reactive/ReactiveFeign.java": [
                    "public Feign feign.reactive.ReactiveFeign.internalBuild()"
                ]
            },
            "c65915b0b560c2b3dcf14b2e8f644b27d10a3deb": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()"
                ],
                "hystrix/src/main/java/feign/hystrix/HystrixFeign.java": [
                    "Feign feign.hystrix.HystrixFeign.build(final FallbackFactory<?> nullableFallbackFactory)"
                ],
                "kotlin/src/main/java/feign/kotlin/CoroutineFeign.java": [
                    "public CoroutineFeign<C> feign.kotlin.CoroutineFeign<C>.build()"
                ],
                "reactive/src/main/java/feign/reactive/ReactiveFeign.java": [
                    "public Feign feign.reactive.ReactiveFeign.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5ecd70431409e7afe348fda4b3c05054ae35413f",
        "previous_commit": "aa96dda408159cd0c8b0222d6b2f3573932b7a12",
        "date": 1626823202,
        "releases": {
            "previous": "5ecd70431409e7afe348fda4b3c05054ae35413f",
            "next": "5ecd70431409e7afe348fda4b3c05054ae35413f"
        },
        "commit_message": "Micrometer metrics tags extension (#1322)\n\n* Micrometer metrics tags extension\r\n\r\n* Merge parent\r\n\r\n* Fix license\r\n\r\n* Add tags to response code counter metric\r\n\r\n* Fix format\r\n\r\n* Improve tags resolution for exceptions, decrease amount of similar methods\r\n\r\n* Make MeteredEncoder timer and counter methods protected\r\n\r\n* Fix formatting\r\n\r\n* Add finally blocks\r\n\r\nCo-authored-by: Nikolay Fadin <nikolay.fadin@sperasoft.com>\r\nCo-authored-by: Kuvaldis <a1N9u8t9I1k>\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "5ecd70431409e7afe348fda4b3c05054ae35413f": {
                "micrometer/src/main/java/feign/micrometer/MeteredClient.java": [
                    "public Response feign.micrometer.MeteredClient.execute(Request request, Options options)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredDecoder.java": [
                    "public Object feign.micrometer.MeteredDecoder.decode(Response response, Type type)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredEncoder.java": [
                    "public void feign.micrometer.MeteredEncoder.encode(Object object, Type bodyType, RequestTemplate template)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredInvocationHandleFactory.java": [
                    "public InvocationHandler feign.micrometer.MeteredInvocationHandleFactory.create(Target target, Map<Method, MethodHandler> dispatch)"
                ]
            },
            "aa96dda408159cd0c8b0222d6b2f3573932b7a12": {
                "micrometer/src/main/java/feign/micrometer/MeteredClient.java": [
                    "public Response feign.micrometer.MeteredClient.execute(Request request, Options options)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredDecoder.java": [
                    "public Object feign.micrometer.MeteredDecoder.decode(Response response, Type type)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredEncoder.java": [
                    "public void feign.micrometer.MeteredEncoder.encode(Object object, Type bodyType, RequestTemplate template)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredInvocationHandleFactory.java": [
                    "public InvocationHandler feign.micrometer.MeteredInvocationHandleFactory.create(Target target, Map<Method, MethodHandler> dispatch)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "770b579fd66a773288c7ba4552467f92e63719d3",
        "previous_commit": "2dbe24a40de60abcf564f90bd7c3c420fc0e3605",
        "date": 1570849551,
        "releases": {
            "previous": "770b579fd66a773288c7ba4552467f92e63719d3",
            "next": "770b579fd66a773288c7ba4552467f92e63719d3"
        },
        "commit_message": "Ignore github example integration tests when building PR (#1094)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "770b579fd66a773288c7ba4552467f92e63719d3": {
                "example-github/src/main/java/example/github/GitHubExample.java": [
                    "public static void example.github.GitHubExample.main(String... args)",
                    "public Exception example.github.GitHubExample.decode(String methodKey, Response response)",
                    "static GitHub example.github.GitHubExample.connect()"
                ]
            },
            "2dbe24a40de60abcf564f90bd7c3c420fc0e3605": {
                "example-github/src/main/java/example/github/GitHubExample.java": [
                    "public static void example.github.GitHubExample.main(String... args)",
                    "public Exception example.github.GitHubExample.decode(String methodKey, Response response)",
                    "static GitHub example.github.GitHubExample.connect()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b6bf1ca7119bf5f008743117006b7ac1ac5276b1",
        "previous_commit": "7850eb071ca7aa37ba455515bb7864193b1761e6",
        "date": 1471418687,
        "releases": {
            "previous": "b6bf1ca7119bf5f008743117006b7ac1ac5276b1",
            "next": "b6bf1ca7119bf5f008743117006b7ac1ac5276b1"
        },
        "commit_message": "Consolidates entrypoint where Hystrix is configured (#446)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "b6bf1ca7119bf5f008743117006b7ac1ac5276b1": {
                "hystrix/src/main/java/feign/hystrix/HystrixFeign.java": [
                    "public InvocationHandler feign.hystrix.HystrixFeign.create(Target target, Map<Method, MethodHandler> dispatch)",
                    "public Feign feign.hystrix.HystrixFeign.build()",
                    "public <T> T feign.hystrix.HystrixFeign.target(Target<T> target, final T fallback)"
                ]
            },
            "7850eb071ca7aa37ba455515bb7864193b1761e6": {
                "hystrix/src/main/java/feign/hystrix/HystrixFeign.java": [
                    "public InvocationHandler feign.hystrix.HystrixFeign.create(Target target, Map<Method, MethodHandler> dispatch)",
                    "public Feign feign.hystrix.HystrixFeign.build()",
                    "public <T> T feign.hystrix.HystrixFeign.target(Target<T> target, final T fallback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ddb9ff922257b2cf256c25a79c00c467182a37f0",
        "previous_commit": "bc7e706a274ee32d965a71d3c0c32741e42e30c2",
        "date": 1697275139,
        "releases": {
            "previous": "ddb9ff922257b2cf256c25a79c00c467182a37f0",
            "next": "ddb9ff922257b2cf256c25a79c00c467182a37f0"
        },
        "commit_message": "Flux type response should be corresponding to List (#2199)\n\n* Refactoring: Move resolveLastTypeParameter from Util to Types\r\n\r\n* Add ReactiveDecoder\r\n\r\n* Update code as per suggestions\r\n\r\n* Update code as per suggestions\r\n\r\n* Refactoring\r\n\r\n* Add tests",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "ddb9ff922257b2cf256c25a79c00c467182a37f0": {
                "core/src/main/java/feign/Util.java": [
                    "public static Type feign.Util.resolveLastTypeParameter(Type genericContext, Class<?> supertype)"
                ],
                "reactive/src/main/java/feign/reactive/ReactiveDelegatingContract.java": [
                    "public List<MethodMetadata> feign.reactive.ReactiveDelegatingContract.parseAndValidateMetadata(Class<?> targetType)"
                ],
                "reactive/src/main/java/feign/reactive/ReactorInvocationHandler.java": [
                    "protected Publisher feign.reactive.ReactorInvocationHandler.invoke(Method method, MethodHandler methodHandler, Object[] arguments)"
                ]
            },
            "bc7e706a274ee32d965a71d3c0c32741e42e30c2": {
                "core/src/main/java/feign/Util.java": [
                    "public static Type feign.Util.resolveLastTypeParameter(Type genericContext, Class<?> supertype)"
                ],
                "reactive/src/main/java/feign/reactive/ReactiveDelegatingContract.java": [
                    "public List<MethodMetadata> feign.reactive.ReactiveDelegatingContract.parseAndValidateMetadata(Class<?> targetType)"
                ],
                "reactive/src/main/java/feign/reactive/ReactorInvocationHandler.java": [
                    "protected Publisher feign.reactive.ReactorInvocationHandler.invoke(Method method, MethodHandler methodHandler, Object[] arguments)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8a68acef6adab7284183d27f14f75075d31d67b3",
        "previous_commit": "d97b751afe969cf845137d6829b02d3aae5cb49e",
        "date": 1668018681,
        "releases": {
            "previous": "8a68acef6adab7284183d27f14f75075d31d67b3",
            "next": "8a68acef6adab7284183d27f14f75075d31d67b3"
        },
        "commit_message": "Refactor method signature of MethodHandler.Factory.create (#1822)\n\n* Add parameters to constructor of MethodHandler.Factory\r\n\r\n* Refactor method signature of MethodHandler.Factory.create\r\n\r\n* Remove necessary parameters from constructor of ParseHandlerByName",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "8a68acef6adab7284183d27f14f75075d31d67b3": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "private MethodHandler feign.ReflectiveFeign<C>.createMethodHandler(final Target<?> target, final MethodMetadata md, final C requestContext)"
                ]
            },
            "d97b751afe969cf845137d6829b02d3aae5cb49e": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "private MethodHandler feign.ReflectiveFeign<C>.createMethodHandler(final Target<?> target, final MethodMetadata md, final C requestContext)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "989fbd7c1f4029c6ad5900f0c3e591323cc11ffc",
        "previous_commit": "02d97371fe3a84bfd3222e18b94d791c5841170e",
        "date": 1538247908,
        "releases": {
            "previous": "989fbd7c1f4029c6ad5900f0c3e591323cc11ffc",
            "next": "989fbd7c1f4029c6ad5900f0c3e591323cc11ffc"
        },
        "commit_message": "fix #797 fix #798: JAXRSContract sets a single Content-Type value (#799)\n\nCloses #797 \r\nCloses #798 \r\n\r\nJAXRSContract sets a single Content-Type value\r\n\r\nThis change allows headers to be cleared by passing a null\r\nvalue for backwards compatibility.\r\n\r\nMultiple Content-Type values are not valid because the body\r\nthat we send with any given request will only have a single\r\ntype.\r\n\r\nUpdated header entry assertion to be agnostic to header name\r\norder.\r\n\r\n* RequestTemplate.headers clear behavior matches that of query params\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "989fbd7c1f4029c6ad5900f0c3e591323cc11ffc": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "private RequestTemplate feign.RequestTemplate.appendHeader(String name, Iterable<String> values)"
                ],
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "private void feign.jaxrs.JAXRSContract.handleProducesAnnotation(MethodMetadata data, Produces produces, String name)",
                    "private void feign.jaxrs.JAXRSContract.handleConsumesAnnotation(MethodMetadata data, Consumes consumes, String name)"
                ]
            },
            "02d97371fe3a84bfd3222e18b94d791c5841170e": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "private RequestTemplate feign.RequestTemplate.appendHeader(String name, Iterable<String> values)"
                ],
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "private void feign.jaxrs.JAXRSContract.handleProducesAnnotation(MethodMetadata data, Produces produces, String name)",
                    "private void feign.jaxrs.JAXRSContract.handleConsumesAnnotation(MethodMetadata data, Consumes consumes, String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b6db37ee3ad7990809425da225c413defa4ce786",
        "previous_commit": "292b474c5cacf98404f6f8cd2fec3ef0a5901274",
        "date": 1582767305,
        "releases": {
            "previous": "b6db37ee3ad7990809425da225c413defa4ce786",
            "next": "b6db37ee3ad7990809425da225c413defa4ce786"
        },
        "commit_message": "issue 361 - async feign variant supporting CompleteableFutures (#1174)\n\n* issue 361 - async feign variant supporting CompleteableFutures\r\n\r\n* Update core/src/test/java/feign/AsyncFeignTest.java\r\n\r\n* remove duplication between synchronous and async cases\r\n\r\n* remove duplication between synchronous and async cases\r\n\r\n* support sync calls in async-feign\r\n\r\n* Add a synchronous \"AsyncClient\"\r\n\r\n* Added license header\r\n\r\n* Apply feign formatter\r\n\r\n* Add '@Experimental' annotation to new async classes\r\n\r\n* \"fix\" formatting to try and appease build\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "b6db37ee3ad7990809425da225c413defa4ce786": {
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "public MethodHandler feign.SynchronousMethodHandler.create(Target<?> target, MethodMetadata md, RequestTemplate.Factory buildTemplateFromArgs, Options options, Decoder decoder, ErrorDecoder errorDecoder)",
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)"
                ]
            },
            "292b474c5cacf98404f6f8cd2fec3ef0a5901274": {
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "public MethodHandler feign.SynchronousMethodHandler.create(Target<?> target, MethodMetadata md, RequestTemplate.Factory buildTemplateFromArgs, Options options, Decoder decoder, ErrorDecoder errorDecoder)",
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d5389a57db17ad9a311813bcb8539ff891d9ac3a",
        "previous_commit": "76a45243e556d96ba0289c634f27d798d15cfde3",
        "date": 1571704607,
        "releases": {
            "previous": "d5389a57db17ad9a311813bcb8539ff891d9ac3a",
            "next": "d5389a57db17ad9a311813bcb8539ff891d9ac3a"
        },
        "commit_message": "Fixes a typo in Contract.java method (#1098)\n\n* The method parseAndValidatateMetadata has been deleted and parseAndValidateMetadata is used instead;\r\n* Replaced all usages along the project;\r\n* Documented which method to use instead of the deleted one.\r\n\r\nSigned-off-by: C\u00e9zar Augusto <cezar@stilingue.com.br>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "d5389a57db17ad9a311813bcb8539ff891d9ac3a": {
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public Map<String, MethodHandler> feign.ReflectiveFeign.apply(Target key)"
                ],
                "hystrix/src/main/java/feign/hystrix/HystrixDelegatingContract.java": [
                    "public List<MethodMetadata> feign.hystrix.HystrixDelegatingContract.parseAndValidateMetadata(Class<?> targetType)"
                ],
                "reactive/src/main/java/feign/reactive/ReactiveDelegatingContract.java": [
                    "public List<MethodMetadata> feign.reactive.ReactiveDelegatingContract.parseAndValidateMetadata(Class<?> targetType)"
                ]
            },
            "76a45243e556d96ba0289c634f27d798d15cfde3": {
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public Map<String, MethodHandler> feign.ReflectiveFeign.apply(Target key)"
                ],
                "hystrix/src/main/java/feign/hystrix/HystrixDelegatingContract.java": [
                    "public List<MethodMetadata> feign.hystrix.HystrixDelegatingContract.parseAndValidatateMetadata(Class<?> targetType)"
                ],
                "reactive/src/main/java/feign/reactive/ReactiveDelegatingContract.java": [
                    "public List<MethodMetadata> feign.reactive.ReactiveDelegatingContract.parseAndValidatateMetadata(Class<?> targetType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c2fcbededea1aad841a7da91aadc5bacdb86bc6d",
        "previous_commit": "524c0d91d11cc09f9cf91a5ad7b2346573906c8f",
        "date": 1522921697,
        "releases": {
            "previous": "c2fcbededea1aad841a7da91aadc5bacdb86bc6d",
            "next": "c2fcbededea1aad841a7da91aadc5bacdb86bc6d"
        },
        "commit_message": "Add an option to not follow redirects (302) and add a unit test for that (#602)\n\n* Add an option to not follow redirects (302) and add a unit test for that\r\n\r\n* Implement followRedirect options for Ribbon Client and OkHTTP.\r\nAdd unit tests for these.\r\n\r\n* Fix last failing unit test with IClientConfig options handling\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "c2fcbededea1aad841a7da91aadc5bacdb86bc6d": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request input, feign.Request.Options options)"
                ],
                "ribbon/src/main/java/feign/ribbon/LBClient.java": [
                    "public RibbonResponse feign.ribbon.LBClient.execute(RibbonRequest request, IClientConfig configOverride)"
                ]
            },
            "524c0d91d11cc09f9cf91a5ad7b2346573906c8f": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request input, feign.Request.Options options)"
                ],
                "ribbon/src/main/java/feign/ribbon/LBClient.java": [
                    "public RibbonResponse feign.ribbon.LBClient.execute(RibbonRequest request, IClientConfig configOverride)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9dfd9b432928e04bbc51fb9f50d2553bf0161891",
        "previous_commit": "f16553db43ed062d1de878b38ecff0268ad440ba",
        "date": 1542313527,
        "releases": {
            "previous": "9dfd9b432928e04bbc51fb9f50d2553bf0161891",
            "next": "9dfd9b432928e04bbc51fb9f50d2553bf0161891"
        },
        "commit_message": "Add support for `CompletableFuture` for method return types (#638)\n\nImplements support for `CompletableFuture` on method return types by converting through RxJava `Observable`",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "9dfd9b432928e04bbc51fb9f50d2553bf0161891": {
                "hystrix/src/main/java/feign/hystrix/HystrixDelegatingContract.java": [
                    "public List<MethodMetadata> feign.hystrix.HystrixDelegatingContract.parseAndValidatateMetadata(Class<?> targetType)"
                ],
                "hystrix/src/main/java/feign/hystrix/HystrixInvocationHandler.java": [
                    "public Object feign.hystrix.HystrixInvocationHandler.invoke(final Object proxy, final Method method, final Object[] args)",
                    "protected Object feign.hystrix.HystrixInvocationHandler.getFallback()"
                ]
            },
            "f16553db43ed062d1de878b38ecff0268ad440ba": {
                "hystrix/src/main/java/feign/hystrix/HystrixDelegatingContract.java": [
                    "public List<MethodMetadata> feign.hystrix.HystrixDelegatingContract.parseAndValidatateMetadata(Class<?> targetType)"
                ],
                "hystrix/src/main/java/feign/hystrix/HystrixInvocationHandler.java": [
                    "public Object feign.hystrix.HystrixInvocationHandler.invoke(final Object proxy, final Method method, final Object[] args)",
                    "protected Object feign.hystrix.HystrixInvocationHandler.getFallback()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fe901ca48da982be48931708f1e44b47df211471",
        "previous_commit": "c4b89c29b8cc29c38faf4369235c39ac582c3302",
        "date": 1615670154,
        "releases": {
            "previous": "fe901ca48da982be48931708f1e44b47df211471",
            "next": "fe901ca48da982be48931708f1e44b47df211471"
        },
        "commit_message": "Collect `http_response_code` for successfull and failed requests (#1375)\n\nOn previous implementation response code would only be collected for errors.\r\n\r\nTo avoid mixing new and old metrics, gave the one that includes successfull codes a different name",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "fe901ca48da982be48931708f1e44b47df211471": {
                "dropwizard-metrics4/src/main/java/feign/metrics4/MeteredClient.java": [
                    "public Response feign.metrics4.MeteredClient.execute(Request request, Options options)"
                ],
                "dropwizard-metrics5/src/main/java/feign/metrics5/MeteredClient.java": [
                    "public Response feign.metrics5.MeteredClient.execute(Request request, Options options)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredClient.java": [
                    "public Response feign.micrometer.MeteredClient.execute(Request request, Options options)"
                ]
            },
            "c4b89c29b8cc29c38faf4369235c39ac582c3302": {
                "dropwizard-metrics4/src/main/java/feign/metrics4/MeteredClient.java": [
                    "public Response feign.metrics4.MeteredClient.execute(Request request, Options options)"
                ],
                "dropwizard-metrics5/src/main/java/feign/metrics5/MeteredClient.java": [
                    "public Response feign.metrics5.MeteredClient.execute(Request request, Options options)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredClient.java": [
                    "public Response feign.micrometer.MeteredClient.execute(Request request, Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "177ce5e0ec8395ac770fb44035ddca76a7044d7e",
        "previous_commit": "b6bf1ca7119bf5f008743117006b7ac1ac5276b1",
        "date": 1471445548,
        "releases": {
            "previous": "177ce5e0ec8395ac770fb44035ddca76a7044d7e",
            "next": "177ce5e0ec8395ac770fb44035ddca76a7044d7e"
        },
        "commit_message": "Adds Hystrix SetterFactory to customize group and command keys (#447)\n\nThis exposes means to customize group and command keys, for example to\r\nuse non-default conventions from configuration or custom annotation\r\nprocessing.\r\n\r\nEx.\r\n```java\r\nSetterFactory commandKeyIsRequestLine = (target, method) -> {\r\n  String groupKey = target.name();\r\n  String commandKey = method.getAnnotation(RequestLine.class).value();\r\n  return HystrixCommand.Setter\r\n      .withGroupKey(HystrixCommandGroupKey.Factory.asKey(groupKey))\r\n      .andCommandKey(HystrixCommandKey.Factory.asKey(commandKey));\r\n};\r\n\r\napi = HystrixFeign.builder()\r\n                  .setterFactory(commandKeyIsRequestLine)\r\n                  ...\r\n```\r\n\r\nThis also makes the default's more unique to avoid clashing in Hystrix's\r\ncache.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "177ce5e0ec8395ac770fb44035ddca76a7044d7e": {
                "hystrix/src/main/java/feign/hystrix/HystrixFeign.java": [
                    "Feign feign.hystrix.HystrixFeign.buildWithFallback(final Object nullableFallback)",
                    "public InvocationHandler feign.hystrix.HystrixFeign.create(Target target, Map<Method, MethodHandler> dispatch)"
                ],
                "hystrix/src/main/java/feign/hystrix/HystrixInvocationHandler.java": [
                    "public Object feign.hystrix.HystrixInvocationHandler.invoke(final Object proxy, final Method method, final Object[] args)"
                ]
            },
            "b6bf1ca7119bf5f008743117006b7ac1ac5276b1": {
                "hystrix/src/main/java/feign/hystrix/HystrixFeign.java": [
                    "Feign feign.hystrix.HystrixFeign.buildWithFallback(final Object nullableFallback)",
                    "public InvocationHandler feign.hystrix.HystrixFeign.create(Target target, Map<Method, MethodHandler> dispatch)"
                ],
                "hystrix/src/main/java/feign/hystrix/HystrixInvocationHandler.java": [
                    "public Object feign.hystrix.HystrixInvocationHandler.invoke(final Object proxy, final Method method, final Object[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ae514aaf790c87804b245013044bd212d3786b92",
        "previous_commit": "f9f294ab88c439b58058c333dedc7a94af954736",
        "date": 1593699000,
        "releases": {
            "previous": "ae514aaf790c87804b245013044bd212d3786b92",
            "next": "ae514aaf790c87804b245013044bd212d3786b92"
        },
        "commit_message": "Add support for Request Timeouts to HTTP/2 Java 11 Client. (#1233)\n\nAdds `Request.Options` to the HTTP/2 Client Request Builder.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "ae514aaf790c87804b245013044bd212d3786b92": {
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "private Builder feign.http2client.Http2Client.newRequestBuilder(Request request, Options options)",
                    "private String[] feign.http2client.Http2Client.asString(Map<String, Collection<String>> headers)",
                    "public Response feign.http2client.Http2Client.execute(Request request, Options options)"
                ]
            },
            "f9f294ab88c439b58058c333dedc7a94af954736": {
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "private Builder feign.http2client.Http2Client.newRequestBuilder(Request request)",
                    "private String[] feign.http2client.Http2Client.asString(Map<String, Collection<String>> headers)",
                    "public Response feign.http2client.Http2Client.execute(Request request, Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e1a70289cdc203707237e4642dc56e1a96e88e63",
        "previous_commit": "55b35f711d82658c84366e56e5f589050ab856a9",
        "date": 1648215502,
        "releases": {
            "previous": "e1a70289cdc203707237e4642dc56e1a96e88e63",
            "next": "e1a70289cdc203707237e4642dc56e1a96e88e63"
        },
        "commit_message": "[GH-1319] Add Support for Path Style Parameter Expansion (#1537)\n\n* [GH-1319] Add Support for Path Style Parameter Expansion\r\n\r\nFixes #1319\r\n\r\nThis change adds limited Path Style support to Feign URI template-style\r\ntemplates.  Variable expressions that start with a semi-colon `;`\r\nare now expanded in accordance to [RFC 6570 Section 3.2.7](https://datatracker.ietf.org/doc/html/rfc6570#section-3.2.7)\r\nwith the following modifications:\r\n\r\n* Maps and Lists are expanded by default.\r\n* Only Single variable templates are supported.\r\n\r\nExamples:\r\n```\r\n{;who}             ;who=fred\r\n{;half}            ;half=50%25\r\n{;empty}           ;empty\r\n{;list}            ;list=red;list=green;list=blue\r\n{;keys}            ;semi=%3B;dot=.;comma=%2C\r\n```\r\n\r\n* Export Path Style Expression as an Expander for use with custom contracts\r\n\r\n* Added example to ReadMe\r\n\r\n* Additional Test Cases.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "e1a70289cdc203707237e4642dc56e1a96e88e63": {
                "core/src/main/java/feign/template/Expressions.java": [
                    "protected String feign.template.Expressions.expandIterable(Iterable<?> values)",
                    "public static Expression feign.template.Expressions.create(final String value)",
                    "protected String feign.template.Expressions.expand(Object variable, boolean encode)"
                ]
            },
            "55b35f711d82658c84366e56e5f589050ab856a9": {
                "core/src/main/java/feign/template/Expressions.java": [
                    "String feign.template.Expressions.expand(Object variable, boolean encode)",
                    "public static Expression feign.template.Expressions.create(final String value)",
                    "private String feign.template.Expressions.expandIterable(Iterable<?> values)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6e5f3eb5ef918123b78e082a0ed6b0aadf81e821",
        "previous_commit": "b3cf4e48163a2aa354b28b3b885b4fb12959d375",
        "date": 1610137720,
        "releases": {
            "previous": "6e5f3eb5ef918123b78e082a0ed6b0aadf81e821",
            "next": "6e5f3eb5ef918123b78e082a0ed6b0aadf81e821"
        },
        "commit_message": "GH-934: Update Default Client to handle Compression correctly (#1349)\n\nFixes: #934, #1208\r\n\r\nThis change updates the Input Stream handling when using the Default\r\nclient implementation to detect when a response is `gzipped` and\r\nwrap it in a `GZipInputStream`.\r\n\r\nThis addresses any issues related to compression when using the\r\ndefault client.\r\n\r\nIn addition, removed the implicit parsing of the\r\nbody during toString.  This was also brought up in #1208 and it came up\r\nduring testing of this change.  Users should be using our `asReader`\r\nand other methods to access the response body.\r\n\r\n* Adding Deflate support\r\n* Added Deflate Support and removed implicit response body reading\r\n* Refactored Gzip and Deflate Conditions\r\n* Corrected formatting and line-endings\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "6e5f3eb5ef918123b78e082a0ed6b0aadf81e821": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)",
                    "Response feign.Default.convertResponse(HttpURLConnection connection, Request request)"
                ],
                "core/src/main/java/feign/Response.java": [
                    "public String feign.Response.toString()"
                ]
            },
            "b3cf4e48163a2aa354b28b3b885b4fb12959d375": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)",
                    "Response feign.Default.convertResponse(HttpURLConnection connection, Request request)"
                ],
                "core/src/main/java/feign/Response.java": [
                    "public String feign.Response.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4a309e1a55b56acbd071ed3fbc2234418ce418cb",
        "previous_commit": "215ac38821250e16eecb915d71edfe3caecc6f3c",
        "date": 1626654507,
        "releases": {
            "previous": "4a309e1a55b56acbd071ed3fbc2234418ce418cb",
            "next": "4a309e1a55b56acbd071ed3fbc2234418ce418cb"
        },
        "commit_message": "Add response headers to FeignException (#1452)\n\n* Add response headers to FeignException\r\n\r\n* Test coverage\r\n\r\n* Small format issues\r\n\r\n* Mistyping: unmodified -> unmodifiable",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "4a309e1a55b56acbd071ed3fbc2234418ce418cb": {
                "core/src/main/java/feign/FeignException.java": [
                    "public static FeignException feign.FeignException.errorStatus(String methodKey, Response response)",
                    "static FeignException feign.FeignException.errorReading(Request request, Response response, IOException cause)",
                    "private static FeignClientException feign.FeignException.clientErrorStatus(int status, String message, Request request, byte[] body, Map<String, Collection<String>> headers)"
                ]
            },
            "215ac38821250e16eecb915d71edfe3caecc6f3c": {
                "core/src/main/java/feign/FeignException.java": [
                    "public static FeignException feign.FeignException.errorStatus(String methodKey, Response response)",
                    "static FeignException feign.FeignException.errorReading(Request request, Response response, IOException cause)",
                    "private static FeignClientException feign.FeignException.clientErrorStatus(int status, String message, Request request, byte[] body)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "aa96dda408159cd0c8b0222d6b2f3573932b7a12",
        "previous_commit": "f47ce52269fd4e57a2f6a241c731c06546fcf91f",
        "date": 1626822650,
        "releases": {
            "previous": "aa96dda408159cd0c8b0222d6b2f3573932b7a12",
            "next": "aa96dda408159cd0c8b0222d6b2f3573932b7a12"
        },
        "commit_message": "Modifying Contract to support passing all parameters to encoders #1448 (#1459)\n\n* Modifying Contract to support passing all parameters to encoders\r\n\r\n* Formatting license\r\n\r\n* Adding unit tests\r\n\r\n* Adding AlwaysEncodeBodyContract abstract class (#1)",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "aa96dda408159cd0c8b0222d6b2f3573932b7a12": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "protected RequestTemplate feign.ReflectiveFeign.resolve(Object[] argv, RequestTemplate mutable, Map<String, Object> variables)",
                    "public Map<String, MethodHandler> feign.ReflectiveFeign.apply(Target target)"
                ]
            },
            "f47ce52269fd4e57a2f6a241c731c06546fcf91f": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "protected RequestTemplate feign.ReflectiveFeign.resolve(Object[] argv, RequestTemplate mutable, Map<String, Object> variables)",
                    "public Map<String, MethodHandler> feign.ReflectiveFeign.apply(Target target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7ba16df534d82e85eba6dba713fb156328634df4",
        "previous_commit": "6c4dfbd39fbb49a6f97c646fdbe8f767054261f2",
        "date": 1554724440,
        "releases": {
            "previous": "7ba16df534d82e85eba6dba713fb156328634df4",
            "next": "7ba16df534d82e85eba6dba713fb156328634df4"
        },
        "commit_message": "Replaced comma with Constant Delimiter in Template (#930)\n\nReplaced comma with Constant Delimiter in Template\r\n\r\nFixes #924\r\n\r\nCommas were used to identify iterable content, which conflicted when\r\na comma delimited literal was provided during expansion.  This change\r\nswitches commas for semi-colons, which are considered reserved secondary\r\ndelimiters in RFC 6750 and should not be used without being pct-encoded.\r\n\r\nShould be a safer choice.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "7ba16df534d82e85eba6dba713fb156328634df4": {
                "core/src/main/java/feign/template/Expressions.java": [
                    "String feign.template.Expressions.expand(Object variable, boolean encode)"
                ],
                "core/src/main/java/feign/template/QueryTemplate.java": [
                    "private String feign.template.QueryTemplate.queryString(String name, String values)",
                    "public static QueryTemplate feign.template.QueryTemplate.create(String name, Iterable<String> values, Charset charset, CollectionFormat collectionFormat)"
                ]
            },
            "6c4dfbd39fbb49a6f97c646fdbe8f767054261f2": {
                "core/src/main/java/feign/template/Expressions.java": [
                    "String feign.template.Expressions.expand(Object variable, boolean encode)"
                ],
                "core/src/main/java/feign/template/QueryTemplate.java": [
                    "private String feign.template.QueryTemplate.queryString(String name, String values)",
                    "public static QueryTemplate feign.template.QueryTemplate.create(String name, Iterable<String> values, Charset charset, CollectionFormat collectionFormat)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7557597a4c4d494c2029bd487199f53cb6e07345",
        "previous_commit": "551aa8a0fd3ad26d713b19e1d05445ebc804caa5",
        "date": 1680808232,
        "releases": {
            "previous": "7557597a4c4d494c2029bd487199f53cb6e07345",
            "next": "7557597a4c4d494c2029bd487199f53cb6e07345"
        },
        "commit_message": "feat(jaxb-package): possibility to choose a JAXBContext instantiation using package mode (#2005)\n\nCo-authored-by: jernat <jernat.morbal@gmail.com>\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "7557597a4c4d494c2029bd487199f53cb6e07345": {
                "jaxb/src/main/java/feign/jaxb/JAXBContextFactory.java": [
                    "public JAXBContextFactory feign.jaxb.JAXBContextFactory.build(List<Class<?>> classes)",
                    "private JAXBContext feign.jaxb.JAXBContextFactory.getContext(Class<?> clazz)",
                    "public JAXBContextFactory feign.jaxb.JAXBContextFactory.build()"
                ]
            },
            "551aa8a0fd3ad26d713b19e1d05445ebc804caa5": {
                "jaxb/src/main/java/feign/jaxb/JAXBContextFactory.java": [
                    "public JAXBContextFactory feign.jaxb.JAXBContextFactory.build(List<Class<?>> classes)",
                    "private JAXBContext feign.jaxb.JAXBContextFactory.getContext(Class<?> clazz)",
                    "public JAXBContextFactory feign.jaxb.JAXBContextFactory.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a2addbf2cae2f4b1b49a80429d709b84eb165504",
        "previous_commit": "0ad007ad793040c88bd9d8a5829981eae9f6e403",
        "date": 1520290903,
        "releases": {
            "previous": "a2addbf2cae2f4b1b49a80429d709b84eb165504",
            "next": "a2addbf2cae2f4b1b49a80429d709b84eb165504"
        },
        "commit_message": "add doNotCloseAfterDecode flag to Feign builder (#649)\n\nThis commit adds the `doNotCloseAfterDecode` flag to the Feign builder object. This allows you to\r\nlazily evaluate the response in your Decoder, in order to support Iterators or Java 8 Streams.\r\n\r\nThis is a pretty light weight change, to support a do-it-yourself approach to lazy instantiation.\r\n\r\nFixes #514.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "a2addbf2cae2f4b1b49a80429d709b84eb165504": {
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template)",
                    "public MethodHandler feign.SynchronousMethodHandler.create(Target<?> target, MethodMetadata md, RequestTemplate.Factory buildTemplateFromArgs, Options options, Decoder decoder, ErrorDecoder errorDecoder)"
                ]
            },
            "0ad007ad793040c88bd9d8a5829981eae9f6e403": {
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template)",
                    "public MethodHandler feign.SynchronousMethodHandler.create(Target<?> target, MethodMetadata md, RequestTemplate.Factory buildTemplateFromArgs, Options options, Decoder decoder, ErrorDecoder errorDecoder)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4ee8cd8f1ec6fd48e5ed604f96dfeb91ea7d4d65",
        "previous_commit": "c1b853c7aa33290adc618824669c56a31dabadd5",
        "date": 1588452137,
        "releases": {
            "previous": "4ee8cd8f1ec6fd48e5ed604f96dfeb91ea7d4d65",
            "next": "4ee8cd8f1ec6fd48e5ed604f96dfeb91ea7d4d65"
        },
        "commit_message": "Headers overwrite (#1219)\n\n* Add unit test illustrating #1217\r\n\r\n* Make sure content-type is limited to a single value\r\n\r\nCo-authored-by: Pierre de Soyres <pierre.de-soyres@eptica.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "4ee8cd8f1ec6fd48e5ed604f96dfeb91ea7d4d65": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "private RequestTemplate feign.RequestTemplate.appendHeader(String name, Iterable<String> values)"
                ],
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "private void feign.jaxrs.JAXRSContract.handleConsumesAnnotation(Consumes consumes, MethodMetadata data)",
                    "private void feign.jaxrs.JAXRSContract.handleProducesAnnotation(Produces produces, MethodMetadata data)"
                ]
            },
            "c1b853c7aa33290adc618824669c56a31dabadd5": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "private RequestTemplate feign.RequestTemplate.appendHeader(String name, Iterable<String> values)"
                ],
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "private void feign.jaxrs.JAXRSContract.handleConsumesAnnotation(Consumes consumes, MethodMetadata data)",
                    "private void feign.jaxrs.JAXRSContract.handleProducesAnnotation(Produces produces, MethodMetadata data)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "30753bf250d8552a61f93f0201a7daa0470961a7",
        "previous_commit": "449e9ceaba3c127dce01eb0a1c71b5565462b805",
        "date": 1470881901,
        "releases": {
            "previous": "30753bf250d8552a61f93f0201a7daa0470961a7",
            "next": "30753bf250d8552a61f93f0201a7daa0470961a7"
        },
        "commit_message": "Supports context path when using Ribbon LoadBalancingTarget (#433)\n\nBefore, `LoadBalancingTarget` stripped out the path and only used\r\n`URI.getScheme()` and `URI.getHost()` to generate the `Request`.\r\n\r\nNow, it will add `URI.getPath()` to the `Request` as well; this is\r\nuseful if you want to interact with endpoints with a context-path.\r\n\r\nUpdate README.md Travis CI to point to correct git repository",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "30753bf250d8552a61f93f0201a7daa0470961a7": {
                "ribbon/src/main/java/feign/ribbon/LoadBalancingTarget.java": [
                    "public String feign.ribbon.LoadBalancingTarget<T>.url()",
                    "public String feign.ribbon.LoadBalancingTarget<T>.toString()",
                    "public Request feign.ribbon.LoadBalancingTarget<T>.apply(RequestTemplate input)"
                ]
            },
            "449e9ceaba3c127dce01eb0a1c71b5565462b805": {
                "ribbon/src/main/java/feign/ribbon/LoadBalancingTarget.java": [
                    "public String feign.ribbon.LoadBalancingTarget<T>.url()",
                    "public String feign.ribbon.LoadBalancingTarget<T>.toString()",
                    "public Request feign.ribbon.LoadBalancingTarget<T>.apply(RequestTemplate input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "273e5dc18e479f62c5e0f7233f8ef5cee466692a",
        "previous_commit": "1d1699d4566ab721a322aae01f7a916df96cc898",
        "date": 1669104866,
        "releases": {
            "previous": "273e5dc18e479f62c5e0f7233f8ef5cee466692a",
            "next": "273e5dc18e479f62c5e0f7233f8ef5cee466692a"
        },
        "commit_message": "Move responsibility for resolving RequestTemplateFactory (#1850)\n\n* Extract RequestTemplateFactoryResolver\r\n\r\n* Pass RequestTemplateFactoryResolver to MethodHandler.Factory\r\n\r\n* Remove buildTemplateFromArgs parameter from MethodHandler.Factory\r\n\r\n* Remove requestTemplateFactoryResolver parameter from ParseHandlersByName\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "273e5dc18e479f62c5e0f7233f8ef5cee466692a": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "private MethodHandler feign.ReflectiveFeign<C>.createMethodHandler(final Target<?> target, final MethodMetadata md, final C requestContext)"
                ]
            },
            "1d1699d4566ab721a322aae01f7a916df96cc898": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "private MethodHandler feign.ReflectiveFeign<C>.createMethodHandler(final Target<?> target, final MethodMetadata md, final C requestContext)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4b2a48ee6ae7cf25a9ba515ac5a198db076217d3",
        "previous_commit": "6b608d0356776da6892567059b0acef35afb919e",
        "date": 1540235806,
        "releases": {
            "previous": "4b2a48ee6ae7cf25a9ba515ac5a198db076217d3",
            "next": "4b2a48ee6ae7cf25a9ba515ac5a198db076217d3"
        },
        "commit_message": "Unwrap RetryableException and throw cause (#737)\n\n* Throw cause of RetryableExceptions\r\n\r\n* Allow propogation of underlying exceptions\r\n\r\nAdd configuration to Feign.Builder and support in SynchronousMethodHandler\r\nto make it propagate the cause of RetryableExceptions\r\n\r\n* Retab SMH\r\n\r\n* Add note about propagation in readme\r\n\r\n* Use enum for exception propagation policy\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "4b2a48ee6ae7cf25a9ba515ac5a198db076217d3": {
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "public MethodHandler feign.SynchronousMethodHandler.create(Target<?> target, MethodMetadata md, RequestTemplate.Factory buildTemplateFromArgs, Options options, Decoder decoder, ErrorDecoder errorDecoder)",
                    "public Object feign.SynchronousMethodHandler.invoke(Object[] argv)"
                ]
            },
            "6b608d0356776da6892567059b0acef35afb919e": {
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "public MethodHandler feign.SynchronousMethodHandler.create(Target<?> target, MethodMetadata md, RequestTemplate.Factory buildTemplateFromArgs, Options options, Decoder decoder, ErrorDecoder errorDecoder)",
                    "public Object feign.SynchronousMethodHandler.invoke(Object[] argv)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "336f2cebeef3825652e8d89cb3de436999b6f1fb",
        "previous_commit": "a1f49bc316463112f13d7f2b7e6babe96b2445fc",
        "date": 1603783134,
        "releases": {
            "previous": "336f2cebeef3825652e8d89cb3de436999b6f1fb",
            "next": "336f2cebeef3825652e8d89cb3de436999b6f1fb"
        },
        "commit_message": "Track number of exception that happen while decoding payload (#1288)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "336f2cebeef3825652e8d89cb3de436999b6f1fb": {
                "dropwizard-metrics5/src/main/java/feign/metrics5/MeteredDecoder.java": [
                    "public Object feign.metrics5.MeteredDecoder.decode(Response response, Type type)"
                ],
                "micrometer/src/main/java/feign/micrometer/FeignMetricName.java": [
                    "public Tags feign.micrometer.FeignMetricName.tag(Class<?> targetType, Method method, String url, Tag... extraTags)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredDecoder.java": [
                    "public Object feign.micrometer.MeteredDecoder.decode(Response response, Type type)"
                ]
            },
            "a1f49bc316463112f13d7f2b7e6babe96b2445fc": {
                "dropwizard-metrics5/src/main/java/feign/metrics5/MeteredDecoder.java": [
                    "public Object feign.metrics5.MeteredDecoder.decode(Response response, Type type)"
                ],
                "micrometer/src/main/java/feign/micrometer/FeignMetricName.java": [
                    "public List<Tag> feign.micrometer.FeignMetricName.tag(Class<?> targetType, Method method, String url, Tag... extraTags)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredDecoder.java": [
                    "public Object feign.micrometer.MeteredDecoder.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "92b2f511a991031cf1e4a1839e08249a5841f9d7",
        "previous_commit": "9a60ea609932625f3702f36e0a66aa29552920e0",
        "date": 1665100083,
        "releases": {
            "previous": "92b2f511a991031cf1e4a1839e08249a5841f9d7",
            "next": "92b2f511a991031cf1e4a1839e08249a5841f9d7"
        },
        "commit_message": "[GH-1464] Add appendHeader that supports Literals (#1781)\n\nThis change adds a new `appendHeader` internal method to `RequestTemplate`\r\nallowing for already resolved headers to be added to the resolved `RequestTemplate`\r\npreventing duplicate expression processing by using another new method\r\n`HeaderTemplate.literal` and `HeaderTemplate.appendLiteral` respectively.\r\n\r\nI chose this route as it isolates the change to be applied only after the\r\noriginal `HeaderTemplate` has been resolved.  While it does expose new\r\npublic `HeaderTemplate` APIs, I feel that is an OK trade off, allowing\r\na new escape-hatch for situations where URI template processing is not\r\nacceptable for Header values.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "92b2f511a991031cf1e4a1839e08249a5841f9d7": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "private RequestTemplate feign.RequestTemplate.appendHeader(String name, Iterable<String> values)",
                    "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)"
                ],
                "core/src/main/java/feign/template/HeaderTemplate.java": [
                    "public static HeaderTemplate feign.template.HeaderTemplate.literal(String name, Iterable<String> values)"
                ]
            },
            "9a60ea609932625f3702f36e0a66aa29552920e0": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "private RequestTemplate feign.RequestTemplate.appendHeader(String name, Iterable<String> values)",
                    "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)"
                ],
                "core/src/main/java/feign/template/HeaderTemplate.java": [
                    "public static HeaderTemplate feign.template.HeaderTemplate.create(String name, Iterable<String> values)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "757de664372c1568f130caa83ae95aa2016ff201",
        "previous_commit": "bc8b4b1fc53f0fc0911f486a5150fedab6813798",
        "date": 1698483251,
        "releases": {
            "previous": "757de664372c1568f130caa83ae95aa2016ff201",
            "next": "757de664372c1568f130caa83ae95aa2016ff201"
        },
        "commit_message": "Allow to ignore methods on provided interface (#2218)\n\n* Allow to ignore methods on provided interface\r\n\r\n* Throw an UnsupportedOperationException if an ignored method was called",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "757de664372c1568f130caa83ae95aa2016ff201": {
                "core/src/main/java/feign/Contract.java": [
                    "public List<MethodMetadata> feign.BaseContract.parseAndValidateMetadata(Class<?> targetType)"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public Object feign.ReflectiveFeign<C>.invoke(Object proxy, Method method, Object[] args)"
                ],
                "reactive/src/main/java/feign/reactive/ReactiveInvocationHandler.java": [
                    "public Object feign.reactive.ReactiveInvocationHandler.invoke(Object proxy, Method method, Object[] args)"
                ]
            },
            "bc8b4b1fc53f0fc0911f486a5150fedab6813798": {
                "core/src/main/java/feign/Contract.java": [
                    "public List<MethodMetadata> feign.BaseContract.parseAndValidateMetadata(Class<?> targetType)"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public Object feign.ReflectiveFeign<C>.invoke(Object proxy, Method method, Object[] args)"
                ],
                "reactive/src/main/java/feign/reactive/ReactiveInvocationHandler.java": [
                    "public Object feign.reactive.ReactiveInvocationHandler.invoke(Object proxy, Method method, Object[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3e089ffba597e411440025cd7a4fab53ae2a7878",
        "previous_commit": "59a568eb1023dad4dab1159960edb8114b66de8a",
        "date": 1690529423,
        "releases": {
            "previous": "3e089ffba597e411440025cd7a4fab53ae2a7878",
            "next": "3e089ffba597e411440025cd7a4fab53ae2a7878"
        },
        "commit_message": "feat: Added decodeVoid feature (#2131)\n\n* feat: Added decodeVoid feature\r\n\r\n* fix: Added decodeVoid for AsyncFeign\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "3e089ffba597e411440025cd7a4fab53ae2a7878": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/ResponseHandler.java": [
                    "private Object feign.ResponseHandler.decode(Response response, Type type)"
                ]
            },
            "59a568eb1023dad4dab1159960edb8114b66de8a": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/ResponseHandler.java": [
                    "private Object feign.ResponseHandler.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2b141a00ec6d569f0b0abb4408eb4799c31c62b8",
        "previous_commit": "542312e6163327bee0eee481094e9f932fd67140",
        "date": 1665514374,
        "releases": {
            "previous": "2b141a00ec6d569f0b0abb4408eb4799c31c62b8",
            "next": "2b141a00ec6d569f0b0abb4408eb4799c31c62b8"
        },
        "commit_message": "Eliminates unnecessary overhead (#1786)\n\n* Refactor AsyncResponseHandler\r\n\r\n* Extract ResponseHandler from AsyncResponseHandler\r\n\r\n* Use ResponseHandler on SynchronousMethodHandler\r\n\r\nEliminates unnecessary overhead caused by CompletableFutre on synchronous operation.\r\n\r\n* Modify `AsyncResponseHandler.handleResponse` method signature\r\n\r\n* Fix code format\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>\r\nCo-authored-by: Marvin Froeder <marvin.froeder@dovetailstudios.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "2b141a00ec6d569f0b0abb4408eb4799c31c62b8": {
                "core/src/main/java/feign/AsyncResponseHandler.java": [
                    "void feign.AsyncResponseHandler.handleResponse(CompletableFuture<Object> resultFuture, String configKey, Response response, Type returnType, long elapsedTime)"
                ],
                "core/src/main/java/feign/AsynchronousMethodHandler.java": [
                    "private CompletableFuture<Object> feign.AsynchronousMethodHandler<C>.handleResponse(Response response, long elapsedTime)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)"
                ]
            },
            "542312e6163327bee0eee481094e9f932fd67140": {
                "core/src/main/java/feign/AsyncResponseHandler.java": [
                    "void feign.AsyncResponseHandler.handleResponse(CompletableFuture<Object> resultFuture, String configKey, Response response, Type returnType, long elapsedTime)"
                ],
                "core/src/main/java/feign/AsynchronousMethodHandler.java": [
                    "private CompletableFuture<Object> feign.AsynchronousMethodHandler<C>.handleResponse(Response response, long elapsedTime)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template, Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0ed5008f0845fd2d5215d3f87270bf65e97ad43a",
        "previous_commit": "23ee09ef88a02ead7c8c925cdab7b094053b3d9e",
        "date": 1560889534,
        "releases": {
            "previous": "0ed5008f0845fd2d5215d3f87270bf65e97ad43a",
            "next": "0ed5008f0845fd2d5215d3f87270bf65e97ad43a"
        },
        "commit_message": "Add POST example to README.md and example-github (#986)\n\nFixes: #978",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "0ed5008f0845fd2d5215d3f87270bf65e97ad43a": {
                "example-github/src/main/java/example/github/GitHubExample.java": [
                    "public static void example.github.GitHubExample.main(String... args)",
                    "static GitHub example.github.GitHubExample.connect()"
                ]
            },
            "23ee09ef88a02ead7c8c925cdab7b094053b3d9e": {
                "example-github/src/main/java/example/github/GitHubExample.java": [
                    "public static void example.github.GitHubExample.main(String... args)",
                    "static GitHub example.github.GitHubExample.connect()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "246df3746ac3af05945a170940ff7e78a97ce038",
        "previous_commit": "8af587e6f5e42c84bb32eae69c45aaa2a9b595fb",
        "date": 1550010332,
        "releases": {
            "previous": "246df3746ac3af05945a170940ff7e78a97ce038",
            "next": "246df3746ac3af05945a170940ff7e78a97ce038"
        },
        "commit_message": "No Longer prepend uri with slash if it is a query string (#889)\n\n* No Longer prepend uri with slash if it is a query string\r\n\r\nFixes #887\r\n\r\nChanges to target and uri parsing did not take into account\r\nEmpty Targets or URI provided methods.  In these scenarios,\r\nthe target contains the entire path and the uri will be the\r\nquery string only.  This change takes that into account and\r\nno longer prepends a slash in these cases.\r\n\r\n* Removed unnecessary import for Spring from Target Test\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "246df3746ac3af05945a170940ff7e78a97ce038": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.target(String target)",
                    "public RequestTemplate feign.RequestTemplate.uri(String uri, boolean append)"
                ]
            },
            "8af587e6f5e42c84bb32eae69c45aaa2a9b595fb": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.target(String target)",
                    "public RequestTemplate feign.RequestTemplate.uri(String uri, boolean append)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bc8b4b1fc53f0fc0911f486a5150fedab6813798",
        "previous_commit": "6105f37fa4655e14a7c28ad0afc55eefd9c53cb2",
        "date": 1698393769,
        "releases": {
            "previous": "bc8b4b1fc53f0fc0911f486a5150fedab6813798",
            "next": "bc8b4b1fc53f0fc0911f486a5150fedab6813798"
        },
        "commit_message": "Add typed response (#2206)\n\n* Add typed response\r\n\r\n* Update code as per suggestions\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "bc8b4b1fc53f0fc0911f486a5150fedab6813798": {
                "core/src/main/java/feign/InvocationContext.java": [
                    "public Object feign.InvocationContext.proceed()"
                ],
                "core/src/main/java/feign/Response.java": [
                    "public String feign.Response.toString()"
                ]
            },
            "6105f37fa4655e14a7c28ad0afc55eefd9c53cb2": {
                "core/src/main/java/feign/InvocationContext.java": [
                    "public Object feign.InvocationContext.proceed()"
                ],
                "core/src/main/java/feign/Response.java": [
                    "public String feign.Response.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "089a59f98076d64b3086b98366ebbf0d2114769b",
        "previous_commit": "32019a22ab3524ee984a09a547c4596a3c5fed80",
        "date": 1551732983,
        "releases": {
            "previous": "089a59f98076d64b3086b98366ebbf0d2114769b",
            "next": "089a59f98076d64b3086b98366ebbf0d2114769b"
        },
        "commit_message": "Updated Query Expressions to support empty and undefined values (#910)\n\nFixes #872\r\n\r\nPreviously, all unresolved query template expressions resolved\r\nto empty strings, which then indcate that the entire query parameter\r\nshould be removed.  This violates RFC 6570 in that only undefined\r\nvalues should be removed.  This change updates Query Template to\r\ncheck the provided `variables` map for an entry expression.  If\r\nno value is provided, the entry is explicitly marked `UNDEF` and\r\nremoved.\r\n\r\nThis brings us in line with the specification.  The following is\r\nnow how parameters are resolved:\r\n\r\n*Empty String*\r\n```java\r\npublic void test() {\r\n   Map<String, Object> parameters = new LinkedHashMap<>();\r\n   parameters.put(\"param\", \"\");\r\n   this.demoClient.test(parameters);\r\n}\r\n```\r\nResult\r\n```\r\nhttp://localhost:8080/test?param=\r\n```\r\n\r\n*Missing*\r\n```java\r\npublic void test() {\r\n   Map<String, Object> parameters = new LinkedHashMap<>();\r\n   this.demoClient.test(parameters);\r\n}\r\n```\r\nResult\r\n```\r\nhttp://localhost:8080/test\r\n```\r\n\r\n*Undefined*\r\n```java\r\npublic void test() {\r\n   Map<String, Object> parameters = new LinkedHashMap<>();\r\n   parameters.put(\"param\", null);\r\n   this.demoClient.test(parameters);\r\n}\r\n```\r\nResult\r\n```\r\nhttp://localhost:8080/test\r\n```\r\n\r\n* Adding additional test case for explicit null parameter value\r\n\r\n* Additional Test case for the explict `null` case.  Updates to the\r\ndocumentation.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "089a59f98076d64b3086b98366ebbf0d2114769b": {
                "core/src/main/java/feign/template/QueryTemplate.java": [
                    "private String feign.template.QueryTemplate.queryString(String name, String values)"
                ],
                "core/src/main/java/feign/template/Template.java": [
                    "public String feign.template.Template.expand(Map<String, ?> variables)"
                ]
            },
            "32019a22ab3524ee984a09a547c4596a3c5fed80": {
                "core/src/main/java/feign/template/QueryTemplate.java": [
                    "private String feign.template.QueryTemplate.queryString(String name, String values)"
                ],
                "core/src/main/java/feign/template/Template.java": [
                    "public String feign.template.Template.expand(Map<String, ?> variables)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3e6e0936a53838ad6ca65e7432ad0b480054ca7d",
        "previous_commit": "335835022b6d94b47200a0067766c8ef66fb8c95",
        "date": 1569875091,
        "releases": {
            "previous": "3e6e0936a53838ad6ca65e7432ad0b480054ca7d",
            "next": "3e6e0936a53838ad6ca65e7432ad0b480054ca7d"
        },
        "commit_message": "Spring4 contract (#1069)\n\n\r\n* Move DeclarativeContract to new file\r\n\r\n* Get spring4 contract to compile with feign10\r\n\r\n* Move to declarative contract\r\n\r\n* Brought spring 4 contract back to life\r\n\r\n* Remove old badges\r\n\r\n* Throw error when contract mark a method as ignored\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "3e6e0936a53838ad6ca65e7432ad0b480054ca7d": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public Map<String, MethodHandler> feign.ReflectiveFeign.apply(Target key)"
                ]
            },
            "335835022b6d94b47200a0067766c8ef66fb8c95": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public Map<String, MethodHandler> feign.ReflectiveFeign.apply(Target key)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cca0cad160d5e871cf8b64c3f41ee5525b7a2a1f",
        "previous_commit": "6acbe94cc01cb3bb8a18633682eb78c97b94f645",
        "date": 1539844774,
        "releases": {
            "previous": "cca0cad160d5e871cf8b64c3f41ee5525b7a2a1f",
            "next": "cca0cad160d5e871cf8b64c3f41ee5525b7a2a1f"
        },
        "commit_message": "Expanded test for HTTP/2 client (#812)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "cca0cad160d5e871cf8b64c3f41ee5525b7a2a1f": {
                "java11/src/main/java/feign/httpclient/Http2Client.java": [
                    "public Response feign.httpclient.Http2Client.execute(Request request, Options options)",
                    "private Map<String, Collection<String>> feign.httpclient.Http2Client.filterRestrictedHeaders(Map<String, Collection<String>> headers)"
                ]
            },
            "6acbe94cc01cb3bb8a18633682eb78c97b94f645": {
                "java11/src/main/java/feign/httpclient/Http2Client.java": [
                    "public Response feign.httpclient.Http2Client.execute(Request request, Options options)",
                    "private Map<String, Collection<String>> feign.httpclient.Http2Client.filterRestrictedHeaders(Map<String, Collection<String>> headers)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ad8c9190ae1a56baf0a7c991813f424db849fb21",
        "previous_commit": "7c6b2bb9bbaa45688a4465d537386b2a8874e309",
        "date": 1574626806,
        "releases": {
            "previous": "ad8c9190ae1a56baf0a7c991813f424db849fb21",
            "next": "ad8c9190ae1a56baf0a7c991813f424db849fb21"
        },
        "commit_message": "Makes iterator compatible with Java iterator expected behavior (#1117)\n\n* Makes iterator compatible with Java iterator expected behavior\r\nboth next() and hasNext() should read from stream if needed. both also inspect 'current' member, next() resets it after consuming. exception is thrown when no more elements are available to return.\r\n\r\n* Fixing CI - formatting issue\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "ad8c9190ae1a56baf0a7c991813f424db849fb21": {
                "jackson/src/main/java/feign/jackson/JacksonIteratorDecoder.java": [
                    "public T feign.jackson.JacksonIteratorDecoder.next()",
                    "public boolean feign.jackson.JacksonIteratorDecoder.hasNext()"
                ]
            },
            "7c6b2bb9bbaa45688a4465d537386b2a8874e309": {
                "jackson/src/main/java/feign/jackson/JacksonIteratorDecoder.java": [
                    "public T feign.jackson.JacksonIteratorDecoder.next()",
                    "public boolean feign.jackson.JacksonIteratorDecoder.hasNext()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "72f379a03d24826ae64e43a3d3e737c2a94ee717",
        "previous_commit": "1ce671a903c7fceaa851b4466f9a9e1de7e6f4e6",
        "date": 1668464762,
        "releases": {
            "previous": "72f379a03d24826ae64e43a3d3e737c2a94ee717",
            "next": "72f379a03d24826ae64e43a3d3e737c2a94ee717"
        },
        "commit_message": "Micrometer Observations (#1760)\n\n* WIP on Micrometer Observations\r\n\r\n* Added verification that metrics are measured\r\n\r\n* Fixed formatting\r\n\r\n* Fixed wrong status code method call\r\n\r\n* Converted to using around\r\n\r\n* Fixed compilation issues\r\n\r\n* prepare release 11.10\r\n\r\n* [ci skip] updating versions to next development iteration 11.11-SNAPSHOT\r\n\r\n* Preparing for next development version\r\n\r\n* build(deps): bump json from 20220320 to 20220924 (#1768)\r\n\r\nBumps [json](https://github.com/douglascrockford/JSON-java) from 20220320 to 20220924.\r\n- [Release notes](https://github.com/douglascrockford/JSON-java/releases)\r\n- [Changelog](https://github.com/stleary/JSON-java/blob/master/docs/RELEASES.md)\r\n- [Commits](https://github.com/douglascrockford/JSON-java/commits)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.json:json\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-major\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* Updated to latest micrometer changes\r\n\r\n* Enriches via clientInterceptors\r\n\r\n* Fixed the error in the DEFAULT instance\r\n\r\n* Reverts enriching of CLientInterceptor to achieve observability\r\n\r\n* build(deps): bump slf4j.version from 2.0.2 to 2.0.3 (#1769)\r\n\r\nBumps `slf4j.version` from 2.0.2 to 2.0.3.\r\n\r\nUpdates `slf4j-simple` from 2.0.2 to 2.0.3\r\n- [Release notes](https://github.com/qos-ch/slf4j/releases)\r\n- [Commits](https://github.com/qos-ch/slf4j/compare/v_2.0.2...v_2.0.3)\r\n\r\nUpdates `slf4j-nop` from 2.0.2 to 2.0.3\r\n- [Release notes](https://github.com/qos-ch/slf4j/releases)\r\n- [Commits](https://github.com/qos-ch/slf4j/compare/v_2.0.2...v_2.0.3)\r\n\r\nUpdates `slf4j-api` from 2.0.2 to 2.0.3\r\n- [Release notes](https://github.com/qos-ch/slf4j/releases)\r\n- [Commits](https://github.com/qos-ch/slf4j/compare/v_2.0.2...v_2.0.3)\r\n\r\nUpdates `slf4j-jdk14` from 2.0.2 to 2.0.3\r\n- [Release notes](https://github.com/qos-ch/slf4j/releases)\r\n- [Commits](https://github.com/qos-ch/slf4j/compare/v_2.0.2...v_2.0.3)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.slf4j:slf4j-simple\r\n  dependency-type: direct:development\r\n  update-type: version-update:semver-patch\r\n- dependency-name: org.slf4j:slf4j-nop\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n- dependency-name: org.slf4j:slf4j-api\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n- dependency-name: org.slf4j:slf4j-jdk14\r\n  dependency-type: direct:development\r\n  update-type: version-update:semver-patch\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* build(deps): bump kotlin.version from 1.7.10 to 1.7.20 (#1771)\r\n\r\nBumps `kotlin.version` from 1.7.10 to 1.7.20.\r\n\r\nUpdates `kotlin-stdlib-jdk8` from 1.7.10 to 1.7.20\r\n- [Release notes](https://github.com/JetBrains/kotlin/releases)\r\n- [Changelog](https://github.com/JetBrains/kotlin/blob/v1.7.20/ChangeLog.md)\r\n- [Commits](https://github.com/JetBrains/kotlin/compare/v1.7.10...v1.7.20)\r\n\r\nUpdates `kotlin-reflect` from 1.7.10 to 1.7.20\r\n- [Release notes](https://github.com/JetBrains/kotlin/releases)\r\n- [Changelog](https://github.com/JetBrains/kotlin/blob/v1.7.20/ChangeLog.md)\r\n- [Commits](https://github.com/JetBrains/kotlin/compare/v1.7.10...v1.7.20)\r\n\r\nUpdates `kotlin-maven-plugin` from 1.7.10 to 1.7.20\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.jetbrains.kotlin:kotlin-stdlib-jdk8\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n- dependency-name: org.jetbrains.kotlin:kotlin-reflect\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n- dependency-name: org.jetbrains.kotlin:kotlin-maven-plugin\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* build(deps): bump asm from 9.3 to 9.4 (#1777)\r\n\r\nBumps asm from 9.3 to 9.4.\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.ow2.asm:asm\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-minor\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\n\r\n* Applied latest changes of Micrometer\r\n\r\n* Polish\r\n\r\n* Upgraded Micrometer to 1.10.0'\r\n\r\n* Alternative micrometer observation using capability\r\n\r\n* Ban 'repositories'\r\n\r\n* Applied my own review suggestions ;)\r\n\r\n* Polish\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\nCo-authored-by: Marvin Froeder <marvin.froeder@dovetailstudios.com>\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>\r\nCo-authored-by: Marvin Froeder <marvin.froeder@police.govt.nz>\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "72f379a03d24826ae64e43a3d3e737c2a94ee717": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "private RequestTemplate feign.RequestTemplate.appendHeader(String name, Iterable<String> values, boolean literal)",
                    "public Map<String, Collection<String>> feign.RequestTemplate.headers()"
                ]
            },
            "1ce671a903c7fceaa851b4466f9a9e1de7e6f4e6": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "private RequestTemplate feign.RequestTemplate.appendHeader(String name, Iterable<String> values, boolean literal)",
                    "public Map<String, Collection<String>> feign.RequestTemplate.headers()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2d01a4593886860d2c93e6f2fb15caa39ce1844e",
        "previous_commit": "273e5dc18e479f62c5e0f7233f8ef5cee466692a",
        "date": 1669138464,
        "releases": {
            "previous": "2d01a4593886860d2c93e6f2fb15caa39ce1844e",
            "next": "2d01a4593886860d2c93e6f2fb15caa39ce1844e"
        },
        "commit_message": "Refactor constructor of ReflectiveFeign (#1857)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "2d01a4593886860d2c93e6f2fb15caa39ce1844e": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ]
            },
            "273e5dc18e479f62c5e0f7233f8ef5cee466692a": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncFeign<C> feign.AsyncFeign<C>.build()"
                ],
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "39ed8ef2a765cc5a892787e326877e46344400ea",
        "previous_commit": "fbd4731d397505e5f69d26944f151da4d6a0c292",
        "date": 1663140501,
        "releases": {
            "previous": "39ed8ef2a765cc5a892787e326877e46344400ea",
            "next": "39ed8ef2a765cc5a892787e326877e46344400ea"
        },
        "commit_message": "Support kotlin coroutines (#1706)\n\n* Support kotlin coroutines\r\n\r\nResolves: #1565\r\n\r\nInspired by https://github.com/PlaytikaOSS/feign-reactive/pull/486\r\n\r\n## TODO\r\n\r\n- [ ] Separate Kotlin support module\r\n- [ ] Enhance test case\r\n- [ ] Refactoring\r\n- [ ] Clean up pom.xml\r\n\r\n* Apply optional dependency to kotlin support related dependency\r\n\r\n* Seperate Kotlin support module\r\n\r\n* Remove unused code from ClassUtils.java\r\n\r\n* Remove unused code from ClassUtils.java\r\n\r\n* Refactor KotlinDetector\r\n\r\n* Move ClassUtils location into KotlinDetector\r\n\r\n* Move KotlinDetector location\r\n\r\n* Format code\r\n\r\n* First attempt to move kotlin work to it's own isolated module\r\n\r\n* Coroutine Feign using AyncFeign\r\n\r\n* Coroutine Feign using AyncFeign\r\n\r\n* Refactor suspending function  detect logic\r\n\r\n- Remove KotlinDetector.java\r\n- Add Method.isSuspend extension function\r\n\r\n* Cleanup CoroutineFeignTest test code format\r\n\r\n* Fix suspend function contract parsing error when using http body\r\n\r\n* Rename test names to be meaningful\r\n\r\n* Add Github Example With Coroutine\r\n\r\n- Copy of GithubExample\r\n\r\n* Remove unnecessary dependency\r\n\r\nhttps://github.com/OpenFeign/feign/pull/1706/files#r965389041\r\n\r\nCo-authored-by: Marvin Froeder <velo.br@gmail.com>\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "39ed8ef2a765cc5a892787e326877e46344400ea": {
                "core/src/main/java/feign/AsyncResponseHandler.java": [
                    "boolean feign.AsyncResponseHandler.isVoidType(Type returnType)"
                ],
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ]
            },
            "fbd4731d397505e5f69d26944f151da4d6a0c292": {
                "core/src/main/java/feign/AsyncResponseHandler.java": [
                    "boolean feign.AsyncResponseHandler.isVoidType(Type returnType)"
                ],
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7230f7c6eea82eb2b340e5d2e76cba1cf87bcf13",
        "previous_commit": "e1a70289cdc203707237e4642dc56e1a96e88e63",
        "date": 1651240346,
        "releases": {
            "previous": "7230f7c6eea82eb2b340e5d2e76cba1cf87bcf13",
            "next": "7230f7c6eea82eb2b340e5d2e76cba1cf87bcf13"
        },
        "commit_message": "Stream decoder optimize (#1590)\n\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* add license header\r\n\r\n* add license header\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* add license header\r\n\r\n* add license header\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* add license header\r\n\r\n* add license header\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* add license header\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* Optimize StreamDecoder\r\n\r\n* add some example\r\n\r\n* Optimize StreamDecoder\r\n\r\n* add a section of README for stream decoder\r\n\r\n* Update StreamDecoder.java\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "7230f7c6eea82eb2b340e5d2e76cba1cf87bcf13": {
                "core/src/main/java/feign/stream/StreamDecoder.java": [
                    "public static StreamDecoder feign.stream.StreamDecoder.create(Decoder iteratorDecoder)",
                    "public Object feign.stream.StreamDecoder.decode(Response response, Type type)"
                ]
            },
            "e1a70289cdc203707237e4642dc56e1a96e88e63": {
                "core/src/main/java/feign/stream/StreamDecoder.java": [
                    "public static StreamDecoder feign.stream.StreamDecoder.create(Decoder iteratorDecoder)",
                    "public Object feign.stream.StreamDecoder.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d09b88efb6e285c6ee54c15ef4b0dcab12c40185",
        "previous_commit": "950935d59395c37ac702cb1066d92f4fedc7dac1",
        "date": 1667408864,
        "releases": {
            "previous": "d09b88efb6e285c6ee54c15ef4b0dcab12c40185",
            "next": "d09b88efb6e285c6ee54c15ef4b0dcab12c40185"
        },
        "commit_message": "Support retry cancel feature fully for AsyncFeign (#1801)\n\n* Support retry cancel feature for AsyncFeign\r\n\r\n* Support retry cancel feature fully for AsyncFeign\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "d09b88efb6e285c6ee54c15ef4b0dcab12c40185": {
                "core/src/main/java/feign/AsynchronousMethodHandler.java": [
                    "private static <T> BiConsumer<? super T, ? super Throwable> feign.AsynchronousMethodHandler<C>.pipeTo(CompletableFuture<T> completableFuture)",
                    "private CompletableFuture<Object> feign.AsynchronousMethodHandler<C>.executeAndDecode(RequestTemplate template, Options options, Retryer retryer)"
                ]
            },
            "950935d59395c37ac702cb1066d92f4fedc7dac1": {
                "core/src/main/java/feign/AsynchronousMethodHandler.java": [
                    "private static <T> BiConsumer<? super T, ? super Throwable> feign.AsynchronousMethodHandler<C>.pipeTo(CompletableFuture<T> completableFuture)",
                    "private CompletableFuture<Object> feign.AsynchronousMethodHandler<C>.executeAndDecode(RequestTemplate template, Options options, Retryer retryer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8e84f5e4a908439edcd47b9b7170274efcb2cddb",
        "previous_commit": "0cdebcdc081178beee9a153e845909631a55c3e3",
        "date": 1540606920,
        "releases": {
            "previous": "8e84f5e4a908439edcd47b9b7170274efcb2cddb",
            "next": "8e84f5e4a908439edcd47b9b7170274efcb2cddb"
        },
        "commit_message": "Stage feign 10 1 (#819)\n\n* NPE when resolving a template with binary body\r\n\r\n* must cast to super class Buffer otherwise break when running with java 11\r\n\r\n* Better error message for feign mock\r\n\r\n* Recomend using Response.Builder on MockClient\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "8e84f5e4a908439edcd47b9b7170274efcb2cddb": {
                "core/src/main/java/feign/Util.java": [
                    "public static String feign.Util.toString(Reader reader)"
                ],
                "mock/src/main/java/feign/mock/MockClient.java": [
                    "public List<Request> feign.mock.MockClient.verifyTimes(final HttpMethod method, final String url, final int times)"
                ]
            },
            "0cdebcdc081178beee9a153e845909631a55c3e3": {
                "core/src/main/java/feign/Util.java": [
                    "public static String feign.Util.toString(Reader reader)"
                ],
                "mock/src/main/java/feign/mock/MockClient.java": [
                    "public List<Request> feign.mock.MockClient.verifyTimes(final HttpMethod method, final String url, final int times)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "23ee09ef88a02ead7c8c925cdab7b094053b3d9e",
        "previous_commit": "2ee3f99624bad5ea6ba8390e5b3295c06734f4a4",
        "date": 1559313529,
        "releases": {
            "previous": "23ee09ef88a02ead7c8c925cdab7b094053b3d9e",
            "next": "23ee09ef88a02ead7c8c925cdab7b094053b3d9e"
        },
        "commit_message": "Adds support for per request timeout options. Fixes #562 (#970)\n\n* Add Options UT\r\n\r\n* Ignore Options when set bodyIndex",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "23ee09ef88a02ead7c8c925cdab7b094053b3d9e": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "public Object feign.SynchronousMethodHandler.invoke(Object[] argv)"
                ]
            },
            "2ee3f99624bad5ea6ba8390e5b3295c06734f4a4": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "public Object feign.SynchronousMethodHandler.invoke(Object[] argv)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "37d973c00476c88731edd36733bc3d65763285ac",
        "previous_commit": "187cba9c5d13335f3119cb4d778416c1b8c742d8",
        "date": 1586997672,
        "releases": {
            "previous": "37d973c00476c88731edd36733bc3d65763285ac",
            "next": "37d973c00476c88731edd36733bc3d65763285ac"
        },
        "commit_message": "GH-1172: Store expanded Header Template values as Literals (#1203)\n\nFixes #1172\r\n\r\nWhen a `HeaderTemplate` is expanded, the result is placed onto a new\r\n`RequestTemplate` via it's `header` method.  This results in the expanded\r\nresult being turned back into a `HeaderTemplate`, simply out of\r\nconvenience.  This behavior, while fine more general use cases, is\r\nproblematic if the header value contains braces `{` `}`, as this will\r\ncause the app to consider these values as new expressions.\r\n\r\nAt this point in the expansion process, there is no need to evaluate\r\nthe expanded values again, so this change allows a `Template` to be\r\ncreated from an existing List of `TemplateChunks`, allowing for callers\r\nto provide explicit `Literal` or `Expression` chunks directly into a\r\n`Template`, by passing the template parsing algorithms.\r\n\r\n`RequestTemplate#expand` has been updated to apply this logic for\r\n`HeaderTemplate` values only.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "37d973c00476c88731edd36733bc3d65763285ac": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.body(Request.Body body)",
                    "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)"
                ]
            },
            "187cba9c5d13335f3119cb4d778416c1b8c742d8": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.body(Request.Body body)",
                    "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a2904ad189efd640f65d2ae527425d7dbada3beb",
        "previous_commit": "028ae86753324e379dcc13580e8f8ad5c45213a2",
        "date": 1563477233,
        "releases": {
            "previous": "a2904ad189efd640f65d2ae527425d7dbada3beb",
            "next": "a2904ad189efd640f65d2ae527425d7dbada3beb"
        },
        "commit_message": "Fixes 1003: Do not wrap exceptions in RuntimeException (#1004)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "a2904ad189efd640f65d2ae527425d7dbada3beb": {
                "reactive/src/main/java/feign/reactive/ReactorInvocationHandler.java": [
                    "protected Publisher feign.reactive.ReactorInvocationHandler.invoke(Method method, MethodHandler methodHandler, Object[] arguments)"
                ],
                "reactive/src/main/java/feign/reactive/RxJavaInvocationHandler.java": [
                    "protected Publisher feign.reactive.RxJavaInvocationHandler.invoke(Method method, MethodHandler methodHandler, Object[] arguments)"
                ]
            },
            "028ae86753324e379dcc13580e8f8ad5c45213a2": {
                "reactive/src/main/java/feign/reactive/ReactorInvocationHandler.java": [
                    "protected Publisher feign.reactive.ReactorInvocationHandler.invoke(Method method, MethodHandler methodHandler, Object[] arguments)"
                ],
                "reactive/src/main/java/feign/reactive/RxJavaInvocationHandler.java": [
                    "protected Publisher feign.reactive.RxJavaInvocationHandler.invoke(Method method, MethodHandler methodHandler, Object[] arguments)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b596abe348ee4a2ce71ba66fc9b3e3b6fb5236f7",
        "previous_commit": "92b2f511a991031cf1e4a1839e08249a5841f9d7",
        "date": 1665108803,
        "releases": {
            "previous": "b596abe348ee4a2ce71ba66fc9b3e3b6fb5236f7",
            "next": "b596abe348ee4a2ce71ba66fc9b3e3b6fb5236f7"
        },
        "commit_message": "Set empty request body if it was null (#1778)\n\nCo-authored-by: Kevin Davis <kdavisk6@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "b596abe348ee4a2ce71ba66fc9b3e3b6fb5236f7": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)"
                ]
            },
            "92b2f511a991031cf1e4a1839e08249a5841f9d7": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e4d2bed76b56e65e234aa9280c93cddee7be9c20",
        "previous_commit": "f1e2c19ceec3e7265d7f2ac83cc29f0c6ca4b4a6",
        "date": 1687391304,
        "releases": {
            "previous": "e4d2bed76b56e65e234aa9280c93cddee7be9c20",
            "next": "e4d2bed76b56e65e234aa9280c93cddee7be9c20"
        },
        "commit_message": "The HTTP protocol version: it misses in AsyncApacheHttp5Client's response and hardcoded in Request.toString() (#2097)\n\n* Missed the HTTP protocol version in HC5. The hardcoded protocol version in Request.toString()\r\n\r\n* Fix formatting",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "e4d2bed76b56e65e234aa9280c93cddee7be9c20": {
                "core/src/main/java/feign/Request.java": [
                    "public String feign.Request.toString()"
                ],
                "hc5/src/main/java/feign/hc5/AsyncApacheHttp5Client.java": [
                    "Response feign.hc5.AsyncApacheHttp5Client.toFeignResponse(SimpleHttpResponse httpResponse, Request request)"
                ]
            },
            "f1e2c19ceec3e7265d7f2ac83cc29f0c6ca4b4a6": {
                "core/src/main/java/feign/Request.java": [
                    "public String feign.Request.toString()"
                ],
                "hc5/src/main/java/feign/hc5/AsyncApacheHttp5Client.java": [
                    "Response feign.hc5.AsyncApacheHttp5Client.toFeignResponse(SimpleHttpResponse httpResponse, Request request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a029afd8666b9a8ddeaecd1599e10b7b55f43bb4",
        "previous_commit": "0142f0cd9b7eebb08f53b9220ba292121bcf07c6",
        "date": 1499350509,
        "releases": {
            "previous": "a029afd8666b9a8ddeaecd1599e10b7b55f43bb4",
            "next": "a029afd8666b9a8ddeaecd1599e10b7b55f43bb4"
        },
        "commit_message": "Perform type validation for QueryMap and HeaderMap in Contract (#573)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "a029afd8666b9a8ddeaecd1599e10b7b55f43bb4": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public RequestTemplate feign.ReflectiveFeign.create(Object[] argv)"
                ]
            },
            "0142f0cd9b7eebb08f53b9220ba292121bcf07c6": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public RequestTemplate feign.ReflectiveFeign.create(Object[] argv)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ca43a64c44c4c94fa967ce0fa1ead2d464b4ee77",
        "previous_commit": "4a309e1a55b56acbd071ed3fbc2234418ce418cb",
        "date": 1626655160,
        "releases": {
            "previous": "ca43a64c44c4c94fa967ce0fa1ead2d464b4ee77",
            "next": "ca43a64c44c4c94fa967ce0fa1ead2d464b4ee77"
        },
        "commit_message": "adding support for meta-annotations (#1458)\n\nwhen trying to find the ErrorHandling annotation on method or class level also\r\ninspect annotations already present to see if they are annotated\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "ca43a64c44c4c94fa967ce0fa1ead2d464b4ee77": {
                "annotation-error-decoder/src/main/java/feign/error/AnnotationErrorDecoder.java": [
                    "Map<String, MethodErrorHandler> feign.error.AnnotationErrorDecoder.generateErrorHandlerMapFromApi(Class<?> apiType)",
                    "Optional<ErrorHandling> feign.error.AnnotationErrorDecoder.readErrorHandlingIncludingInherited(Class<?> apiType)"
                ]
            },
            "4a309e1a55b56acbd071ed3fbc2234418ce418cb": {
                "annotation-error-decoder/src/main/java/feign/error/AnnotationErrorDecoder.java": [
                    "Map<String, MethodErrorHandler> feign.error.AnnotationErrorDecoder.generateErrorHandlerMapFromApi(Class<?> apiType)",
                    "Optional<ErrorHandling> feign.error.AnnotationErrorDecoder.readErrorHandlingIncludingInherited(Class<?> apiType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "318fb0e955b8cfcf64f70d6aeea0ba5795f8a7eb",
        "previous_commit": "6771866f9d4ebea14b3ca16a38c12f5a3f0af128",
        "date": 1556480276,
        "releases": {
            "previous": "318fb0e955b8cfcf64f70d6aeea0ba5795f8a7eb",
            "next": "318fb0e955b8cfcf64f70d6aeea0ba5795f8a7eb"
        },
        "commit_message": "Updated Expression Patterns to allow brackets (#939)\n\n* Updated Expression Patterns to allow brackets\r\n\r\nFixes #928\r\n\r\nRelaxed the regular expression that is used to determine if a given\r\nvalue is an Expression per the URI Template Spec RFC 6570.  We already\r\ndeviated by allowing dashes to exist without pct-encoding, this change\r\nadds braces `[]` to this list.\r\n\r\nAlso included is the ability to set Collection Format per Query, overriding\r\nthe Template default.  This allows for mixed Collection formats in the\r\nsame template and provides a way for Contract extensions to determine\r\nwhich expansion type they want when parsing a contract.\r\n\r\n* Fixing Formatting\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "318fb0e955b8cfcf64f70d6aeea0ba5795f8a7eb": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "private RequestTemplate feign.RequestTemplate.appendQuery(String name, Iterable<String> values, CollectionFormat collectionFormat)",
                    "public RequestTemplate feign.RequestTemplate.query(String name, Iterable<String> values)"
                ]
            },
            "6771866f9d4ebea14b3ca16a38c12f5a3f0af128": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "private RequestTemplate feign.RequestTemplate.appendQuery(String name, Iterable<String> values)",
                    "public RequestTemplate feign.RequestTemplate.query(String name, Iterable<String> values)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6c30d769386dd805e0eea555e4ad91e4ec5a0642",
        "previous_commit": "6415c3b72809ebf284e3e2c98d0bf981dbb89446",
        "date": 1609434438,
        "releases": {
            "previous": "6c30d769386dd805e0eea555e4ad91e4ec5a0642",
            "next": "6c30d769386dd805e0eea555e4ad91e4ec5a0642"
        },
        "commit_message": "connection request timeout setting documentation (#1351)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "6c30d769386dd805e0eea555e4ad91e4ec5a0642": {
                "example-github/src/main/java/example/github/GitHubExample.java": [
                    "static GitHub example.github.GitHubExample.connect()"
                ],
                "example-wikipedia/src/main/java/example/wikipedia/WikipediaExample.java": [
                    "public static void example.wikipedia.WikipediaExample.main(String... args)"
                ]
            },
            "6415c3b72809ebf284e3e2c98d0bf981dbb89446": {
                "example-github/src/main/java/example/github/GitHubExample.java": [
                    "static GitHub example.github.GitHubExample.connect()"
                ],
                "example-wikipedia/src/main/java/example/wikipedia/WikipediaExample.java": [
                    "public static void example.wikipedia.WikipediaExample.main(String... args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "68f79847449c6df36010e9c4118c4244854ea67c",
        "previous_commit": "2cc907c88ff893dfc4769a0319f812027ff5f1ae",
        "date": 1583743191,
        "releases": {
            "previous": "68f79847449c6df36010e9c4118c4244854ea67c",
            "next": "68f79847449c6df36010e9c4118c4244854ea67c"
        },
        "commit_message": "Overriding query parameter name (#1184)\n\n* Add possibility to override request parameter name in objects by @Param\r\n\r\nFixes #1183\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "68f79847449c6df36010e9c4118c4244854ea67c": {
                "core/src/main/java/feign/querymap/BeanQueryMapEncoder.java": [
                    "public Map<String, Object> feign.querymap.BeanQueryMapEncoder.encode(Object object)"
                ],
                "core/src/main/java/feign/querymap/FieldQueryMapEncoder.java": [
                    "public Map<String, Object> feign.querymap.FieldQueryMapEncoder.encode(Object object)"
                ]
            },
            "2cc907c88ff893dfc4769a0319f812027ff5f1ae": {
                "core/src/main/java/feign/querymap/BeanQueryMapEncoder.java": [
                    "public Map<String, Object> feign.querymap.BeanQueryMapEncoder.encode(Object object)"
                ],
                "core/src/main/java/feign/querymap/FieldQueryMapEncoder.java": [
                    "public Map<String, Object> feign.querymap.FieldQueryMapEncoder.encode(Object object)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "afba674800a88a828564f7b842aea5111768d7e1",
        "previous_commit": "8c4cfde652b2cbeceb1a475853d22576d4a9bbd1",
        "date": 1646242515,
        "releases": {
            "previous": "afba674800a88a828564f7b842aea5111768d7e1",
            "next": "afba674800a88a828564f7b842aea5111768d7e1"
        },
        "commit_message": "Add support for the parameter type corresponding to headerMapIndex for user object (#1581)\n\n* feat: add support for the parameter type corresponding to headerMapIndex for user object\r\n\r\n* feat: add a resolution of the user pojo object\r\n\r\n* feat: add a resolution of the user pojo object\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "afba674800a88a828564f7b842aea5111768d7e1": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public RequestTemplate feign.ReflectiveFeign.create(Object[] argv)"
                ]
            },
            "8c4cfde652b2cbeceb1a475853d22576d4a9bbd1": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ],
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public RequestTemplate feign.ReflectiveFeign.create(Object[] argv)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c43515137cc541573582d512e8e529ca56a64316",
        "previous_commit": "ad167f5aca78ccf940498a4484466a9c698d2358",
        "date": 1687208601,
        "releases": {
            "previous": "c43515137cc541573582d512e8e529ca56a64316",
            "next": "c43515137cc541573582d512e8e529ca56a64316"
        },
        "commit_message": "Allow QueryMapEncoder accept null value (#2086)\n\nFor\r\n```java\r\n@GetMapping\r\npublic Paged<User> list(int page, int size, @QueryMap User user);\r\n```\r\nnow we can use\r\n```java\r\nPaged<User> paged = userClient.list(1, 10, null);\r\n```\r\ninstead of\r\n```java\r\nPaged<User> paged = userClient.list(1, 10, new User()); // query map will include primitive type default values which is unexpected\r\n```",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "c43515137cc541573582d512e8e529ca56a64316": {
                "core/src/main/java/feign/querymap/BeanQueryMapEncoder.java": [
                    "public Map<String, Object> feign.querymap.BeanQueryMapEncoder.encode(Object object)"
                ],
                "core/src/main/java/feign/querymap/FieldQueryMapEncoder.java": [
                    "public Map<String, Object> feign.querymap.FieldQueryMapEncoder.encode(Object object)"
                ]
            },
            "ad167f5aca78ccf940498a4484466a9c698d2358": {
                "core/src/main/java/feign/querymap/BeanQueryMapEncoder.java": [
                    "public Map<String, Object> feign.querymap.BeanQueryMapEncoder.encode(Object object)"
                ],
                "core/src/main/java/feign/querymap/FieldQueryMapEncoder.java": [
                    "public Map<String, Object> feign.querymap.FieldQueryMapEncoder.encode(Object object)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ed2cef04658a28b5ca8c50645032df0d5c7fd7b7",
        "previous_commit": "a25423c0233ea1f0b0da8802b60c128133a1e640",
        "date": 1530855080,
        "releases": {
            "previous": "ed2cef04658a28b5ca8c50645032df0d5c7fd7b7",
            "next": "ed2cef04658a28b5ca8c50645032df0d5c7fd7b7"
        },
        "commit_message": "Remove null empty headers (#724)\n\n* Creating headers from Request removing those with null or empty values\r\n\r\n* Moving back to let the empty strings as valid header\r\n\r\n* Returning headers filtering null and empty rather removing them for the current map. Supporting with tests as it needs to be LinkedHashMap not to lost the sorting\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "ed2cef04658a28b5ca8c50645032df0d5c7fd7b7": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public Request feign.RequestTemplate.request()",
                    "public Map<String, Collection<String>> feign.RequestTemplate.headers()"
                ]
            },
            "a25423c0233ea1f0b0da8802b60c128133a1e640": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public Request feign.RequestTemplate.request()",
                    "public Map<String, Collection<String>> feign.RequestTemplate.headers()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "60a80df91a64068c9c13b1dfdca6c15296af175f",
        "previous_commit": "064f389fada66f29cd9df2a17178787ee7cc97de",
        "date": 1715948329,
        "releases": {
            "previous": "60a80df91a64068c9c13b1dfdca6c15296af175f",
            "next": "60a80df91a64068c9c13b1dfdca6c15296af175f"
        },
        "commit_message": "http2client should not cache the InputStream eg:HTTP 1.1 Chunked_transfer_encoding (#2420)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "60a80df91a64068c9c13b1dfdca6c15296af175f": {
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "public Response feign.http2client.Http2Client.execute(Request request, Options options)",
                    "public CompletableFuture<Response> feign.http2client.Http2Client.execute(Request request, Options options, Optional<Object> requestContext)"
                ]
            },
            "064f389fada66f29cd9df2a17178787ee7cc97de": {
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "public Response feign.http2client.Http2Client.execute(Request request, Options options)",
                    "public CompletableFuture<Response> feign.http2client.Http2Client.execute(Request request, Options options, Optional<Object> requestContext)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "32372293454dbcc7797f758586e7da1617b88fd3",
        "previous_commit": "b8d33fbacd1f6c7cbd6143c79ad09e17913e5236",
        "date": 1535331343,
        "releases": {
            "previous": "32372293454dbcc7797f758586e7da1617b88fd3",
            "next": "32372293454dbcc7797f758586e7da1617b88fd3"
        },
        "commit_message": "Added FeignRequestException, FeignResponseException  (#769)\n\n* Add FeignRequestException, FeignResponseException, update and add tests\r\n\r\n* Remove FeignRequestException, FeignResponseException, add 'content' field to FeignException, update tests.\r\n\r\n* Fix style\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "32372293454dbcc7797f758586e7da1617b88fd3": {
                "core/src/main/java/feign/FeignException.java": [
                    "static FeignException feign.FeignException.errorReading(Request request, Response ignored, IOException cause)",
                    "public static FeignException feign.FeignException.errorStatus(String methodKey, Response response)"
                ]
            },
            "b8d33fbacd1f6c7cbd6143c79ad09e17913e5236": {
                "core/src/main/java/feign/FeignException.java": [
                    "static FeignException feign.FeignException.errorReading(Request request, Response ignored, IOException cause)",
                    "public static FeignException feign.FeignException.errorStatus(String methodKey, Response response)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "91e9882a004129a4c08bf2468be0b37505258fab",
        "previous_commit": "9a4b21bc0e21349687fbba3ee72154f440630af2",
        "date": 1566827368,
        "releases": {
            "previous": "91e9882a004129a4c08bf2468be0b37505258fab",
            "next": "91e9882a004129a4c08bf2468be0b37505258fab"
        },
        "commit_message": "GH-801: Adding support for JDK Proxy (#1045)\n\nFixes #801\r\n\r\nAdding a `Proxied` client implementation that extends the `Default`\r\nclient allowing for a JDK Proxy, along with explict credential support.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "91e9882a004129a4c08bf2468be0b37505258fab": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)",
                    "Response feign.Default.convertResponse(HttpURLConnection connection, Request request)"
                ]
            },
            "9a4b21bc0e21349687fbba3ee72154f440630af2": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)",
                    "Response feign.Default.convertResponse(HttpURLConnection connection, Request request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6f4226da9bcfa84ba6d35705104e0b870eee0da1",
        "previous_commit": "4f4ccab8b30e4534ab5cc3fd6ad51d0da60271c9",
        "date": 1701932654,
        "releases": {
            "previous": "6f4226da9bcfa84ba6d35705104e0b870eee0da1",
            "next": "6f4226da9bcfa84ba6d35705104e0b870eee0da1"
        },
        "commit_message": "Add support for request body gzip Content-Encoding (#2247)\n\n* Add support for request body gzip Content-Encoding\r\n\r\n* do not use 'deflate' in unit test. It is not supported for requests\r\n\r\n---------\r\n\r\nCo-authored-by: Fabien Bussiron <fabien.bussiron@axa.fr>\r\nCo-authored-by: Marvin <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "6f4226da9bcfa84ba6d35705104e0b870eee0da1": {
                "hc5/src/main/java/feign/hc5/ApacheHttp5Client.java": [
                    "ClassicHttpRequest feign.hc5.ApacheHttp5Client.toClassicHttpRequest(Request request, Request.Options options)"
                ],
                "hc5/src/main/java/feign/hc5/AsyncApacheHttp5Client.java": [
                    "SimpleHttpRequest feign.hc5.AsyncApacheHttp5Client.toClassicHttpRequest(Request request, Request.Options options)"
                ]
            },
            "4f4ccab8b30e4534ab5cc3fd6ad51d0da60271c9": {
                "hc5/src/main/java/feign/hc5/ApacheHttp5Client.java": [
                    "ClassicHttpRequest feign.hc5.ApacheHttp5Client.toClassicHttpRequest(Request request, Request.Options options)"
                ],
                "hc5/src/main/java/feign/hc5/AsyncApacheHttp5Client.java": [
                    "SimpleHttpRequest feign.hc5.AsyncApacheHttp5Client.toClassicHttpRequest(Request request, Request.Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "524c0d91d11cc09f9cf91a5ad7b2346573906c8f",
        "previous_commit": "982ee99474e8cc9ee21e0ac2318de2d98412e95e",
        "date": 1522577010,
        "releases": {
            "previous": "524c0d91d11cc09f9cf91a5ad7b2346573906c8f",
            "next": "524c0d91d11cc09f9cf91a5ad7b2346573906c8f"
        },
        "commit_message": "@Path(\"\") annotations are equivalent to @Path(\"/\") (#631)\n\nThe documentation suggests that all paths are relative:\r\nhttps://docs.oracle.com/javaee/6/api/javax/ws/rs/Path.html",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "524c0d91d11cc09f9cf91a5ad7b2346573906c8f": {
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "protected void feign.jaxrs.JAXRSContract.processAnnotationOnClass(MethodMetadata data, Class<?> clz)",
                    "protected void feign.jaxrs.JAXRSContract.processAnnotationOnMethod(MethodMetadata data, Annotation methodAnnotation, Method method)"
                ]
            },
            "982ee99474e8cc9ee21e0ac2318de2d98412e95e": {
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "protected void feign.jaxrs.JAXRSContract.processAnnotationOnClass(MethodMetadata data, Class<?> clz)",
                    "protected void feign.jaxrs.JAXRSContract.processAnnotationOnMethod(MethodMetadata data, Annotation methodAnnotation, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "082679ec74f25c189bf3f839e9256f2ecc5bf9e5",
        "previous_commit": "e2615a9817fe1fceb06daf226cd30a1094069637",
        "date": 1668928444,
        "releases": {
            "previous": "082679ec74f25c189bf3f839e9256f2ecc5bf9e5",
            "next": "082679ec74f25c189bf3f839e9256f2ecc5bf9e5"
        },
        "commit_message": "Refactor constructor of SynchronousMethodHandler (#1848)\n\nModify to inject ResponseHandler like AsynchronousMethodHandler\r\ninstead of constructing ResponseHandler in constructor",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "082679ec74f25c189bf3f839e9256f2ecc5bf9e5": {
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "public MethodHandler feign.SynchronousMethodHandler.create(Target<?> target, MethodMetadata md, RequestTemplate.Factory buildTemplateFromArgs, Object requestContext)"
                ]
            },
            "e2615a9817fe1fceb06daf226cd30a1094069637": {
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ],
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "public MethodHandler feign.SynchronousMethodHandler.create(Target<?> target, MethodMetadata md, RequestTemplate.Factory buildTemplateFromArgs, Object requestContext)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9a859da4ced6a37babd3eba29b0f12f8bb088f6c",
        "previous_commit": "7b646abe877214964e36416ec0a41cfc07fe392d",
        "date": 1478630194,
        "releases": {
            "previous": "9a859da4ced6a37babd3eba29b0f12f8bb088f6c",
            "next": "9a859da4ced6a37babd3eba29b0f12f8bb088f6c"
        },
        "commit_message": "Replaces getFailedExecutionException() on getExecutionException() for fallback factory\n\nFixes #464",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "9a859da4ced6a37babd3eba29b0f12f8bb088f6c": {
                "hystrix/src/main/java/feign/hystrix/HystrixInvocationHandler.java": [
                    "public Object feign.hystrix.HystrixInvocationHandler.invoke(final Object proxy, final Method method, final Object[] args)",
                    "protected Object feign.hystrix.HystrixInvocationHandler.getFallback()"
                ]
            },
            "7b646abe877214964e36416ec0a41cfc07fe392d": {
                "hystrix/src/main/java/feign/hystrix/HystrixInvocationHandler.java": [
                    "public Object feign.hystrix.HystrixInvocationHandler.invoke(final Object proxy, final Method method, final Object[] args)",
                    "protected Object feign.hystrix.HystrixInvocationHandler.getFallback()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b06f47acf9e9cd4e9bb29ed6b93193d951748b57",
        "previous_commit": "5eb9905e58ecffce907ec3ee092ccee8383ca9ce",
        "date": 1634505841,
        "releases": {
            "previous": "b06f47acf9e9cd4e9bb29ed6b93193d951748b57",
            "next": "b06f47acf9e9cd4e9bb29ed6b93193d951748b57"
        },
        "commit_message": "JDK 11 HttpClient async implement for AsyncFeign. (#1330)\n\n* java11 async http client for AsyncFeign\r\n\r\n* java 11 httpclient not allow some header\r\n\r\n* add unit test\r\n\r\n* add license\r\n\r\n* remove unused annotation\r\n\r\n* Merge branch 'master' of https://github.com/OpenFeign/feign into asyncfeign-java11-impl\r\n\r\n\u0001 Conflicts:\r\n\u0001\tjava11/src/main/java/feign/http2client/Http2Client.java\r\n\r\n* port connectionTimeout feature of Http2Client to AsyncHttpClient\r\n\r\n* fix format\r\n\r\n* Combined Sync and Async clients into a single class\r\n\r\nCo-authored-by: UzimakiNaruto <ff578505546@qq.com>\r\nCo-authored-by: Kevin Davis <kdavisk6@gmail.com>\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>\r\nCo-authored-by: Marvin Froeder <marvin.froeder@dovetailstudios.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "b06f47acf9e9cd4e9bb29ed6b93193d951748b57": {
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "private Builder feign.http2client.Http2Client.newRequestBuilder(Request request, Options options)",
                    "public Response feign.http2client.Http2Client.execute(Request request, Options options)"
                ]
            },
            "5eb9905e58ecffce907ec3ee092ccee8383ca9ce": {
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "private Builder feign.http2client.Http2Client.newRequestBuilder(Request request, Options options)",
                    "public Response feign.http2client.Http2Client.execute(Request request, Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "66de4f09889fac1d1725843df751d68bf613a748",
        "previous_commit": "a22f0ddad0b531ed7ac64aac881cb4c72361fe36",
        "date": 1626675378,
        "releases": {
            "previous": "66de4f09889fac1d1725843df751d68bf613a748",
            "next": "66de4f09889fac1d1725843df751d68bf613a748"
        },
        "commit_message": "allow multiple inheritance on the interface level with current restrictions intact. (#1341)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "66de4f09889fac1d1725843df751d68bf613a748": {
                "core/src/main/java/feign/Contract.java": [
                    "private static void feign.BaseContract.checkMapKeys(String name, Type genericType)",
                    "public List<MethodMetadata> feign.BaseContract.parseAndValidateMetadata(Class<?> targetType)"
                ]
            },
            "a22f0ddad0b531ed7ac64aac881cb4c72361fe36": {
                "core/src/main/java/feign/Contract.java": [
                    "private static void feign.BaseContract.checkMapKeys(String name, Type genericType)",
                    "public List<MethodMetadata> feign.BaseContract.parseAndValidateMetadata(Class<?> targetType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6667b0f88fd06a7b48f8a5c0a0a6ad4503f8a7e3",
        "previous_commit": "cb611eff4dcbc0e0242fbe5b09a63f0cef92277f",
        "date": 1534286502,
        "releases": {
            "previous": "6667b0f88fd06a7b48f8a5c0a0a6ad4503f8a7e3",
            "next": "6667b0f88fd06a7b48f8a5c0a0a6ad4503f8a7e3"
        },
        "commit_message": "Adding Multiple Values for Consumes and Produces (#765)\n\n* Adding multiple mediatype support for JaxRs contract\r\n\r\n* Updating README for multiple values\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "6667b0f88fd06a7b48f8a5c0a0a6ad4503f8a7e3": {
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "private void feign.jaxrs.JAXRSContract.handleProducesAnnotation(MethodMetadata data, Produces produces, String name)",
                    "private void feign.jaxrs.JAXRSContract.handleConsumesAnnotation(MethodMetadata data, Consumes consumes, String name)"
                ]
            },
            "cb611eff4dcbc0e0242fbe5b09a63f0cef92277f": {
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "private void feign.jaxrs.JAXRSContract.handleProducesAnnotation(MethodMetadata data, Produces produces, String name)",
                    "private void feign.jaxrs.JAXRSContract.handleConsumesAnnotation(MethodMetadata data, Consumes consumes, String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4c17b87e6cec1fce619e734700eb9749fe4fae1f",
        "previous_commit": "0d2590cc4a59427c242eade20946a7fbdff90104",
        "date": 1687464062,
        "releases": {
            "previous": "4c17b87e6cec1fce619e734700eb9749fe4fae1f",
            "next": "4c17b87e6cec1fce619e734700eb9749fe4fae1f"
        },
        "commit_message": "ApacheHttp5Client uses Options to follow Redirects (#2104)\n\n* Added setRedirectsEnabled and test cases\r\n\r\n* Formatting\r\n\r\n* Added same for Async Client\r\n\r\n* Formatting\r\n\r\n* Formatting\r\n\r\n* Formatting\r\n\r\n* Formatting\r\n\r\n* formatting",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "4c17b87e6cec1fce619e734700eb9749fe4fae1f": {
                "hc5/src/main/java/feign/hc5/ApacheHttp5Client.java": [
                    "public Response feign.hc5.ApacheHttp5Client.execute(Request request, Request.Options options)"
                ],
                "hc5/src/main/java/feign/hc5/AsyncApacheHttp5Client.java": [
                    "public CompletableFuture<Response> feign.hc5.AsyncApacheHttp5Client.execute(Request request, Options options, Optional<HttpClientContext> requestContext)"
                ]
            },
            "0d2590cc4a59427c242eade20946a7fbdff90104": {
                "hc5/src/main/java/feign/hc5/ApacheHttp5Client.java": [
                    "public Response feign.hc5.ApacheHttp5Client.execute(Request request, Request.Options options)"
                ],
                "hc5/src/main/java/feign/hc5/AsyncApacheHttp5Client.java": [
                    "public CompletableFuture<Response> feign.hc5.AsyncApacheHttp5Client.execute(Request request, Options options, Optional<HttpClientContext> requestContext)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cb611eff4dcbc0e0242fbe5b09a63f0cef92277f",
        "previous_commit": "5835dcbd25d4ae2c19f66d33bfab96e145e0cfcb",
        "date": 1534219487,
        "releases": {
            "previous": "cb611eff4dcbc0e0242fbe5b09a63f0cef92277f",
            "next": "cb611eff4dcbc0e0242fbe5b09a63f0cef92277f"
        },
        "commit_message": "support charset when build Reader for Response.Body (#766)\n\n* add charset to Response.Body when create Reader\r\n\r\n* format\r\n\r\n* support charset when build Reader for Response.Body\r\n\r\n* support charset when build Reader for Response.Body\r\n\r\n* support charset when build Reader for Response.Body\r\n\r\n* format header\r\n\r\n* format Response\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "cb611eff4dcbc0e0242fbe5b09a63f0cef92277f": {
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "Response.Body feign.httpclient.ApacheHttpClient.toFeignBody(HttpResponse httpResponse)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "private static feign.Response.Body feign.okhttp.OkHttpClient.toBody(final ResponseBody input)"
                ]
            },
            "5835dcbd25d4ae2c19f66d33bfab96e145e0cfcb": {
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "Response.Body feign.httpclient.ApacheHttpClient.toFeignBody(HttpResponse httpResponse)"
                ],
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "private static feign.Response.Body feign.okhttp.OkHttpClient.toBody(final ResponseBody input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a16140d7f5256e52658ccca62e3fb70ffa81687c",
        "previous_commit": "377ca744b13d6be58106685d062e35aa0daaa6e3",
        "date": 1602393932,
        "releases": {
            "previous": "a16140d7f5256e52658ccca62e3fb70ffa81687c",
            "next": "a16140d7f5256e52658ccca62e3fb70ffa81687c"
        },
        "commit_message": "Fixes propagation of unchecked exceptions in feign-micrometer (#1282)\n\nBoth `MeteredClient` and `MeteredDecoder` now propagates all\r\nunchecked exceptions as-is (they were previously wrapped in\r\n`IOException` before rethrown).\r\nFixes #1281",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "a16140d7f5256e52658ccca62e3fb70ffa81687c": {
                "micrometer/src/main/java/feign/micrometer/MeteredClient.java": [
                    "public Response feign.micrometer.MeteredClient.execute(Request request, Options options)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredDecoder.java": [
                    "public Object feign.micrometer.MeteredDecoder.decode(Response response, Type type)"
                ]
            },
            "377ca744b13d6be58106685d062e35aa0daaa6e3": {
                "micrometer/src/main/java/feign/micrometer/MeteredClient.java": [
                    "public Response feign.micrometer.MeteredClient.execute(Request request, Options options)"
                ],
                "micrometer/src/main/java/feign/micrometer/MeteredDecoder.java": [
                    "public Object feign.micrometer.MeteredDecoder.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9584dfafc647159f5503e895603d48c5ba126e82",
        "previous_commit": "d3f7d76f57edc07cc5008cd01d0477effe90b0c3",
        "date": 1577817008,
        "releases": {
            "previous": "9584dfafc647159f5503e895603d48c5ba126e82",
            "next": "9584dfafc647159f5503e895603d48c5ba126e82"
        },
        "commit_message": "Clarify availability of a Response Body in FeignException (#1149)\n\nFixes #920\r\n\r\nFeignException may contain the data from the response if the response is available and contains data.  However, the method `content` is ambiguious and does not reveal it's intent.  User's have expressed confusion as to if it is for the Request or the Response.\r\n\r\nThis change adds a new method `responseBody` to addresse this.  Use of content is now `@deprecated`.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "9584dfafc647159f5503e895603d48c5ba126e82": {
                "core/src/main/java/feign/FeignException.java": [
                    "public byte[] feign.FeignException.content()",
                    "public String feign.FeignException.contentUTF8()"
                ]
            },
            "d3f7d76f57edc07cc5008cd01d0477effe90b0c3": {
                "core/src/main/java/feign/FeignException.java": [
                    "public byte[] feign.FeignException.content()",
                    "public String feign.FeignException.contentUTF8()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9ed47d5d25ef2bbb39dcb19306c1308d71247eb6",
        "previous_commit": "ea51e7014e944261401cb7d426c9755c2fa337c3",
        "date": 1523830572,
        "releases": {
            "previous": "9ed47d5d25ef2bbb39dcb19306c1308d71247eb6",
            "next": "9ed47d5d25ef2bbb39dcb19306c1308d71247eb6"
        },
        "commit_message": "Allows different collection encodings (#543)\n\n* Allows different collection encodings\r\n\r\nIn the case where a parameter represents a collection of values, there are\r\nconflicting ways of encoding that collection. Common ways are repeating the\r\nparameter name (foo=bar&foo=baz) and using comma separated values (foo=bar,baz).\r\nThe current behavior repeats the parameter name. This change introduces an\r\nadditional RequestLine parameter that explicitly specifies the encoding type,\r\none of CSV, TSV, space-delimited, pipe-delimited, and repeating the parameter\r\nname. The default value for this option is repeating the parameter name, so\r\nbackwards compatibility is maintained.\r\n\r\n* Replace switch statement with enum method for joining values\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "9ed47d5d25ef2bbb39dcb19306c1308d71247eb6": {
                "core/src/main/java/feign/Contract.java": [
                    "protected void feign.Default.processAnnotationOnMethod(MethodMetadata data, Annotation methodAnnotation, Method method)"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public String feign.RequestTemplate.queryLine()"
                ]
            },
            "ea51e7014e944261401cb7d426c9755c2fa337c3": {
                "core/src/main/java/feign/Contract.java": [
                    "protected void feign.Default.processAnnotationOnMethod(MethodMetadata data, Annotation methodAnnotation, Method method)"
                ],
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public String feign.RequestTemplate.queryLine()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9c5a52d627d91f9d6190dc7ac567620341358acc",
        "previous_commit": "2793a3175bb1e3cde0ef9eb124166965ac6cbfe2",
        "date": 1543520756,
        "releases": {
            "previous": "9c5a52d627d91f9d6190dc7ac567620341358acc",
            "next": "9c5a52d627d91f9d6190dc7ac567620341358acc"
        },
        "commit_message": "Add support for java 8's Optional type to represent a HTTP 404 response. (#822)\n\n* Add support for java 8's Optional type to represent a HTTP 404 response.\r\n\r\n* Delete x.patch\r\n\r\n* Also dealing with Stream in case of empty responses\r\n\r\n* Add support for java 8's Optional type to represent a HTTP 404 response.\r\n\r\n* Delete x.patch\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "9c5a52d627d91f9d6190dc7ac567620341358acc": {
                "core/src/main/java/feign/Util.java": [
                    "public static Object feign.Util.emptyValueOf(Type type)"
                ],
                "core/src/main/java/feign/codec/Decoder.java": [
                    "public Object feign.codec.Default.decode(Response response, Type type)"
                ]
            },
            "2793a3175bb1e3cde0ef9eb124166965ac6cbfe2": {
                "core/src/main/java/feign/Util.java": [
                    "public static Object feign.Util.emptyValueOf(Type type)"
                ],
                "core/src/main/java/feign/codec/Decoder.java": [
                    "public Object feign.codec.Default.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "85f2f504793283bb66ffde5b80fd2cc6ccfebd88",
        "previous_commit": "7670103bc60fc346f9f9fbcbe011fb2535d9f326",
        "date": 1525483038,
        "releases": {
            "previous": "85f2f504793283bb66ffde5b80fd2cc6ccfebd88",
            "next": "85f2f504793283bb66ffde5b80fd2cc6ccfebd88"
        },
        "commit_message": "Response is closed after decoder fails (#668)\n\nPreviously a decoder failure resulting in an exception would\r\nfail to close responses when \"doNotCloseAfterDecode\" was enabled.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "85f2f504793283bb66ffde5b80fd2cc6ccfebd88": {
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template)"
                ]
            },
            "7670103bc60fc346f9f9fbcbe011fb2535d9f326": {
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737",
        "previous_commit": "17a515e073e8dc6e3d06a8404ad9742274ce0bb0",
        "date": 1537479615,
        "releases": {
            "previous": "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737",
            "next": "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737"
        },
        "commit_message": "The @Headers does not work (#789)\n\n* The @Headers does not work \r\n\r\nThe @Headers does not work when it has space around \":\".\r\n Modify the method  toMap() .\r\nadd trim() to the key and value\r\n\r\n* corevert the field name whitespace changes\r\n\r\n* add TestCase \"headersContainsWhitespaces\"\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "d7cc9b6c7ee34da15ee2cf0e1c0824b3040e5737": {
                "core/src/main/java/feign/Contract.java": [
                    "private static Map<String, Collection<String>> feign.Default.toMap(String[] input)"
                ]
            },
            "17a515e073e8dc6e3d06a8404ad9742274ce0bb0": {
                "core/src/main/java/feign/Contract.java": [
                    "private static Map<String, Collection<String>> feign.Default.toMap(String[] input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d436ca153b4f88ea630d14bfe3fd646ada1ba407",
        "previous_commit": "e7729852387796537eff6e585cd0d5b63ba529d7",
        "date": 1541291137,
        "releases": {
            "previous": "d436ca153b4f88ea630d14bfe3fd646ada1ba407",
            "next": "d436ca153b4f88ea630d14bfe3fd646ada1ba407"
        },
        "commit_message": "Add fine-grained HTTP error exceptions (#825)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "d436ca153b4f88ea630d14bfe3fd646ada1ba407": {
                "core/src/main/java/feign/FeignException.java": [
                    "public static FeignException feign.FeignException.errorStatus(String methodKey, Response response)"
                ]
            },
            "e7729852387796537eff6e585cd0d5b63ba529d7": {
                "core/src/main/java/feign/FeignException.java": [
                    "public static FeignException feign.FeignException.errorStatus(String methodKey, Response response)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b79d6fcf83bc56b6ab0459c0f63688a2b6197b28",
        "previous_commit": "4cf1a5498513535499f956a4639481a26f65fc06",
        "date": 1612326462,
        "releases": {
            "previous": "b79d6fcf83bc56b6ab0459c0f63688a2b6197b28",
            "next": "b79d6fcf83bc56b6ab0459c0f63688a2b6197b28"
        },
        "commit_message": "Use charset from response Content-Type header to decode  (#1302)\n\n* If charset is set in Content-type, we decode response using that charset\r\n\r\n* Java 8 compatibility\r\n\r\n* Format fix\r\n\r\n* Moving code to get charset to Response in order to be used by another\r\ndecoders",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "b79d6fcf83bc56b6ab0459c0f63688a2b6197b28": {
                "jackson/src/main/java/feign/jackson/JacksonDecoder.java": [
                    "public Object feign.jackson.JacksonDecoder.decode(Response response, Type type)"
                ]
            },
            "4cf1a5498513535499f956a4639481a26f65fc06": {
                "jackson/src/main/java/feign/jackson/JacksonDecoder.java": [
                    "public Object feign.jackson.JacksonDecoder.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "05c5f9264603a7a9ec3db6c4ea60f4e3312186f8",
        "previous_commit": "82b57a3f4efb1ec09dbfa908fd808b7244eae7f9",
        "date": 1494047012,
        "releases": {
            "previous": "05c5f9264603a7a9ec3db6c4ea60f4e3312186f8",
            "next": "05c5f9264603a7a9ec3db6c4ea60f4e3312186f8"
        },
        "commit_message": "Allows configuration of status codes that cause Ribbon retries (#492)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "05c5f9264603a7a9ec3db6c4ea60f4e3312186f8": {
                "ribbon/src/main/java/feign/ribbon/LBClient.java": [
                    "public RibbonResponse feign.ribbon.LBClient.execute(RibbonRequest request, IClientConfig configOverride)"
                ]
            },
            "82b57a3f4efb1ec09dbfa908fd808b7244eae7f9": {
                "ribbon/src/main/java/feign/ribbon/LBClient.java": [
                    "public RibbonResponse feign.ribbon.LBClient.execute(RibbonRequest request, IClientConfig configOverride)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7861fbcdf8b8761736c70a04c9a2aad413a1f95c",
        "previous_commit": "3fa3e1a3c0e1af5969bf155626da5b6bf345470e",
        "date": 1627338869,
        "releases": {
            "previous": "7861fbcdf8b8761736c70a04c9a2aad413a1f95c",
            "next": "7861fbcdf8b8761736c70a04c9a2aad413a1f95c"
        },
        "commit_message": "Fix exception thrown when using a custom error decoder with metrics (#1468)\n\n* #1466: fixed metered feign client throwing IllegalArgumentException when using custom ErrorDecoder\r\n\r\n* #1466: add missing license header\r\n\r\n* Fold MeteredFeignClientTest into AbstractMetricsTestBase\r\n\r\nCo-authored-by: Marvin Froeder <marvin.froeder@dovetailstudios.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "7861fbcdf8b8761736c70a04c9a2aad413a1f95c": {
                "micrometer/src/main/java/feign/micrometer/MeteredInvocationHandleFactory.java": [
                    "public InvocationHandler feign.micrometer.MeteredInvocationHandleFactory.create(Target target, Map<Method, MethodHandler> dispatch)"
                ]
            },
            "3fa3e1a3c0e1af5969bf155626da5b6bf345470e": {
                "micrometer/src/main/java/feign/micrometer/MeteredInvocationHandleFactory.java": [
                    "public InvocationHandler feign.micrometer.MeteredInvocationHandleFactory.create(Target target, Map<Method, MethodHandler> dispatch)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "82b57a3f4efb1ec09dbfa908fd808b7244eae7f9",
        "previous_commit": "d7f40f5a3692628121330d2a53e01c90a434f20b",
        "date": 1494040329,
        "releases": {
            "previous": "82b57a3f4efb1ec09dbfa908fd808b7244eae7f9",
            "next": "82b57a3f4efb1ec09dbfa908fd808b7244eae7f9"
        },
        "commit_message": "Fix the issue encountered when the value of queries starting with '{' (#555)\n\nsupport the query values starting with {, when use RibbonClient\u3002different from #540.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "82b57a3f4efb1ec09dbfa908fd808b7244eae7f9": {
                "ribbon/src/main/java/feign/ribbon/LBClient.java": [
                    "Request feign.ribbon.LBClient.toRequest()"
                ]
            },
            "d7f40f5a3692628121330d2a53e01c90a434f20b": {
                "ribbon/src/main/java/feign/ribbon/LBClient.java": [
                    "Request feign.ribbon.LBClient.toRequest()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f09a72d5b22473adeae940aab717006007c492a0",
        "previous_commit": "6fe951c541291cce04b718665fbca6768f2a2688",
        "date": 1662594777,
        "releases": {
            "previous": "f09a72d5b22473adeae940aab717006007c492a0",
            "next": "f09a72d5b22473adeae940aab717006007c492a0"
        },
        "commit_message": "Only allow a single content-type header to be applied while using googlehttpclient (#1737)\n\n* Only allow a single content-type header to be applied while using google client\r\n\r\n* Run code formatter\r\n\r\n* Run formatter again via cmd line\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "f09a72d5b22473adeae940aab717006007c492a0": {
                "googlehttpclient/src/main/java/feign/googlehttpclient/GoogleHttpClient.java": [
                    "private final HttpRequest feign.googlehttpclient.GoogleHttpClient.convertRequest(final Request inputRequest, final Request.Options options)"
                ]
            },
            "6fe951c541291cce04b718665fbca6768f2a2688": {
                "googlehttpclient/src/main/java/feign/googlehttpclient/GoogleHttpClient.java": [
                    "private final HttpRequest feign.googlehttpclient.GoogleHttpClient.convertRequest(final Request inputRequest, final Request.Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "903a5d78dd144e006db9ddcbf8f1858a67f1ee8d",
        "previous_commit": "c835adb075186516d1d42a07631e9348d94a3632",
        "date": 1705947681,
        "releases": {
            "previous": "903a5d78dd144e006db9ddcbf8f1858a67f1ee8d",
            "next": "903a5d78dd144e006db9ddcbf8f1858a67f1ee8d"
        },
        "commit_message": "Allow generics deserialization by JacksonJrDecoder (#2298)\n\n* Allow generics deserialization by JacksonJrDecoder\r\nFixes #2296\r\n\r\n* Update JacksonJrDecoder.java\r\n\r\n* Update JacksonCodecTest.java\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "903a5d78dd144e006db9ddcbf8f1858a67f1ee8d": {
                "jackson-jr/src/main/java/feign/jackson/jr/JacksonJrDecoder.java": [
                    "protected Transformer feign.jackson.jr.JacksonJrDecoder.findTransformer(Response response, Type type)"
                ]
            },
            "c835adb075186516d1d42a07631e9348d94a3632": {
                "jackson-jr/src/main/java/feign/jackson/jr/JacksonJrDecoder.java": [
                    "protected Transformer feign.jackson.jr.JacksonJrDecoder.findTransformer(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7d4eb18cf94823893f89f09e740977c8462b3d4b",
        "previous_commit": "0868e712638e09d9f59cb1dcf1cd826d5064be39",
        "date": 1688543137,
        "releases": {
            "previous": "7d4eb18cf94823893f89f09e740977c8462b3d4b",
            "next": "7d4eb18cf94823893f89f09e740977c8462b3d4b"
        },
        "commit_message": "Allow override of maxBodyBytesLength in ErrorDecoder (#2113)\n\n* Allow override of maxBodyBytesLength in ErrorDecoder\r\n\r\n* Apply linter\r\n\r\n* Choose constructor approach\r\n\r\n* Reformat",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "7d4eb18cf94823893f89f09e740977c8462b3d4b": {
                "core/src/main/java/feign/codec/ErrorDecoder.java": [
                    "public Exception feign.codec.Default.decode(String methodKey, Response response)"
                ]
            },
            "0868e712638e09d9f59cb1dcf1cd826d5064be39": {
                "core/src/main/java/feign/codec/ErrorDecoder.java": [
                    "public Exception feign.codec.Default.decode(String methodKey, Response response)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9818693c5f5b771b7dfa1098d8cb625a66e301f8",
        "previous_commit": "1dd0c2e85ffa44081a261c2ae50bee1451533b15",
        "date": 1471352811,
        "releases": {
            "previous": "9818693c5f5b771b7dfa1098d8cb625a66e301f8",
            "next": "9818693c5f5b771b7dfa1098d8cb625a66e301f8"
        },
        "commit_message": "Propagates first IOException from ribbon ClientException (#441)\n\nFixes wrong IOExceptionhandling when combining HystrixFeign and RibbonClient\r\n\r\nFixes #352",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "9818693c5f5b771b7dfa1098d8cb625a66e301f8": {
                "ribbon/src/main/java/feign/ribbon/RibbonClient.java": [
                    "public Response feign.ribbon.RibbonClient.execute(Request request, Request.Options options)"
                ]
            },
            "1dd0c2e85ffa44081a261c2ae50bee1451533b15": {
                "ribbon/src/main/java/feign/ribbon/RibbonClient.java": [
                    "public Response feign.ribbon.RibbonClient.execute(Request request, Request.Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7146e358e5fa3ea4fc00333505d0c4556703d7e1",
        "previous_commit": "d27fef7ccb93f305abacf9012a3e12d4b719e1f8",
        "date": 1646597326,
        "releases": {
            "previous": "7146e358e5fa3ea4fc00333505d0c4556703d7e1",
            "next": "7146e358e5fa3ea4fc00333505d0c4556703d7e1"
        },
        "commit_message": "Add ability use case insensitive headers for default Client (#1586)\n\n* Add ability use case insensitive headers for default Client\r\n\r\n* Add ability use case insensitive headers for default Client\r\n\r\nCo-authored-by: Alexander Zadvinskiy <azadvinskiy@it-one.ru>\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "7146e358e5fa3ea4fc00333505d0c4556703d7e1": {
                "core/src/main/java/feign/Client.java": [
                    "Response feign.Default.convertResponse(HttpURLConnection connection, Request request)"
                ]
            },
            "d27fef7ccb93f305abacf9012a3e12d4b719e1f8": {
                "core/src/main/java/feign/Client.java": [
                    "Response feign.Default.convertResponse(HttpURLConnection connection, Request request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b6d8bb1a46d390cd675c05880d3e0aa03ff5880e",
        "previous_commit": "4da6d5cad674e4eeae5b56035ac1f94992499449",
        "date": 1540586381,
        "releases": {
            "previous": "b6d8bb1a46d390cd675c05880d3e0aa03ff5880e",
            "next": "b6d8bb1a46d390cd675c05880d3e0aa03ff5880e"
        },
        "commit_message": "support PATCH with empty body paramter. (#824)\n\nFixes #665",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "b6d8bb1a46d390cd675c05880d3e0aa03ff5880e": {
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)"
                ]
            },
            "4da6d5cad674e4eeae5b56035ac1f94992499449": {
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "950935d59395c37ac702cb1066d92f4fedc7dac1",
        "previous_commit": "b57ab5146474da5e1b3b57bd15f46f75a411666d",
        "date": 1667408434,
        "releases": {
            "previous": "950935d59395c37ac702cb1066d92f4fedc7dac1",
            "next": "950935d59395c37ac702cb1066d92f4fedc7dac1"
        },
        "commit_message": "Allow usage of GET with body in java11 Module (#1819)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "950935d59395c37ac702cb1066d92f4fedc7dac1": {
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "private Builder feign.http2client.Http2Client.newRequestBuilder(Request request, Options options)"
                ]
            },
            "b57ab5146474da5e1b3b57bd15f46f75a411666d": {
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "private Builder feign.http2client.Http2Client.newRequestBuilder(Request request, Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "431b3282378104029ebf5035d9316b6affff9526",
        "previous_commit": "e70bb4fb7a6aa1611943c79cb5433675a8c914c6",
        "date": 1501635293,
        "releases": {
            "previous": "431b3282378104029ebf5035d9316b6affff9526",
            "next": "431b3282378104029ebf5035d9316b6affff9526"
        },
        "commit_message": "Set empty HttpEntity if request body is null.\nOtherwise RequestBuilder will create HttpEntity from query parameters.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "431b3282378104029ebf5035d9316b6affff9526": {
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "HttpUriRequest feign.httpclient.ApacheHttpClient.toHttpUriRequest(Request request, Request.Options options)"
                ]
            },
            "e70bb4fb7a6aa1611943c79cb5433675a8c914c6": {
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "HttpUriRequest feign.httpclient.ApacheHttpClient.toHttpUriRequest(Request request, Request.Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fc6bf6f356dd15e24c29869a2a575d06d97800bc",
        "previous_commit": "f06856c07abb6b3b080ca69e1fc69605cd129ff3",
        "date": 1691521666,
        "releases": {
            "previous": "fc6bf6f356dd15e24c29869a2a575d06d97800bc",
            "next": "fc6bf6f356dd15e24c29869a2a575d06d97800bc"
        },
        "commit_message": "Fix possible regex matching stack overflow (#2150)\n\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "fc6bf6f356dd15e24c29869a2a575d06d97800bc": {
                "core/src/main/java/feign/template/Expressions.java": [
                    "public static Expression feign.template.Expressions.create(final String value)"
                ]
            },
            "f06856c07abb6b3b080ca69e1fc69605cd129ff3": {
                "core/src/main/java/feign/template/Expressions.java": [
                    "public static Expression feign.template.Expressions.create(final String value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "eed6dbe51c41bf6f0a2fdba69de991172fdf3a84",
        "previous_commit": "1d57e1f13e8014cbc5f58dc6e91abb45c9c80e00",
        "date": 1718195630,
        "releases": {
            "previous": "eed6dbe51c41bf6f0a2fdba69de991172fdf3a84",
            "next": "eed6dbe51c41bf6f0a2fdba69de991172fdf3a84"
        },
        "commit_message": "fix: Response.charset does not support RFC 7231 compliant Content-Type headers using quotation marks as application/json; charset=\"utf-8\" (#2444)\n\nCo-authored-by: Stefan Vitz (C804185) <stefan.vitz@sanitas.com>\r\nCo-authored-by: Marvin <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "eed6dbe51c41bf6f0a2fdba69de991172fdf3a84": {
                "core/src/main/java/feign/Response.java": [
                    "public Charset feign.Response.charset()"
                ]
            },
            "1d57e1f13e8014cbc5f58dc6e91abb45c9c80e00": {
                "core/src/main/java/feign/Response.java": [
                    "public Charset feign.Response.charset()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a23bce07812b9dcaa30e09b6a9a0005b19b34c11",
        "previous_commit": "1f7ca4c74cefdeeea96d4b90be2a945d77e6905a",
        "date": 1640111259,
        "releases": {
            "previous": "a23bce07812b9dcaa30e09b6a9a0005b19b34c11",
            "next": "a23bce07812b9dcaa30e09b6a9a0005b19b34c11"
        },
        "commit_message": "MeteredDecoder records timer once in happy path (#1554)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "a23bce07812b9dcaa30e09b6a9a0005b19b34c11": {
                "micrometer/src/main/java/feign/micrometer/MeteredDecoder.java": [
                    "public Object feign.micrometer.MeteredDecoder.decode(Response response, Type type)"
                ]
            },
            "1f7ca4c74cefdeeea96d4b90be2a945d77e6905a": {
                "micrometer/src/main/java/feign/micrometer/MeteredDecoder.java": [
                    "public Object feign.micrometer.MeteredDecoder.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ad86f22524343818850358662b69160d124dbff0",
        "previous_commit": "4ddc12e34a44530144cac0d25428911a13bd02d6",
        "date": 1559052930,
        "releases": {
            "previous": "ad86f22524343818850358662b69160d124dbff0",
            "next": "ad86f22524343818850358662b69160d124dbff0"
        },
        "commit_message": "This pr resolves QueryMap inheritance issue #927 (#960)\n\n* This pr resolves issue #927\r\n\r\nadd apache commons lang3 as mvn dependency to get inherited fields of given class\r\n\r\nchange type.getDeclaredFields() to FieldUtils.getAllFieldsList(type) on FieldQueryMapEncoder\r\n\r\n* format\r\n\r\n* remove apache common langs dependency\r\nadd logic for finding fields which comes via inheritance\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "ad86f22524343818850358662b69160d124dbff0": {
                "core/src/main/java/feign/querymap/FieldQueryMapEncoder.java": [
                    "private static ObjectParamMetadata feign.querymap.FieldQueryMapEncoder.parseObjectType(Class<?> type)"
                ]
            },
            "4ddc12e34a44530144cac0d25428911a13bd02d6": {
                "core/src/main/java/feign/querymap/FieldQueryMapEncoder.java": [
                    "private static ObjectParamMetadata feign.querymap.FieldQueryMapEncoder.parseObjectType(Class<?> type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "985c6828fd8d8e037156d1c432d7867a05b6628b",
        "previous_commit": "fa30e55d93f585e0a6ae82f9507ba140cd9b9349",
        "date": 1531742726,
        "releases": {
            "previous": "985c6828fd8d8e037156d1c432d7867a05b6628b",
            "next": "985c6828fd8d8e037156d1c432d7867a05b6628b"
        },
        "commit_message": "Removing @Deprecated methods marked for removal on feign 10 (#739)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "985c6828fd8d8e037156d1c432d7867a05b6628b": {
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template)"
                ]
            },
            "fa30e55d93f585e0a6ae82f9507ba140cd9b9349": {
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "57c609009c2e2e852ef5695b26cdd2b2238b0537",
        "previous_commit": "4aab37c0bc290a18e5acdce6d4f397b624ee4c91",
        "date": 1493303510,
        "releases": {
            "previous": "57c609009c2e2e852ef5695b26cdd2b2238b0537",
            "next": "57c609009c2e2e852ef5695b26cdd2b2238b0537"
        },
        "commit_message": "Avoid `Decoder.decode` on 404 when void response type (#549)\n\n* Avoid `Decoder.decode` on 404 when void response type\r\n\r\nAvoid calling `decode` when receiving a 404 error and `decode404` is set and the response type is `void`.\r\n\r\n* Update CHANGELOG\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "57c609009c2e2e852ef5695b26cdd2b2238b0537": {
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template)"
                ]
            },
            "4aab37c0bc290a18e5acdce6d4f397b624ee4c91": {
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7b646abe877214964e36416ec0a41cfc07fe392d",
        "previous_commit": "95f78cb2ae0b45e94dbae58848276780c43854f0",
        "date": 1478630059,
        "releases": {
            "previous": "7b646abe877214964e36416ec0a41cfc07fe392d",
            "next": "7b646abe877214964e36416ec0a41cfc07fe392d"
        },
        "commit_message": "Also wrap the exception of Decoder.decode() in case of a 404. (#487)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "7b646abe877214964e36416ec0a41cfc07fe392d": {
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template)"
                ]
            },
            "95f78cb2ae0b45e94dbae58848276780c43854f0": {
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Object feign.SynchronousMethodHandler.executeAndDecode(RequestTemplate template)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8ad08f80d2bd8febe993659d9ee2ac4e3a254c7e",
        "previous_commit": "8a8bbb9554206382a6e5b39d2476c7857d5b5bf3",
        "date": 1679534636,
        "releases": {
            "previous": "8ad08f80d2bd8febe993659d9ee2ac4e3a254c7e",
            "next": "8ad08f80d2bd8febe993659d9ee2ac4e3a254c7e"
        },
        "commit_message": "JSON Decoder can decode String too (#1989)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "8ad08f80d2bd8febe993659d9ee2ac4e3a254c7e": {
                "json/src/main/java/feign/json/JsonDecoder.java": [
                    "public Object feign.json.JsonDecoder.decode(Response response, Type type)"
                ]
            },
            "8a8bbb9554206382a6e5b39d2476c7857d5b5bf3": {
                "json/src/main/java/feign/json/JsonDecoder.java": [
                    "public Object feign.json.JsonDecoder.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a39c0ea9c3861261ed185718d6c1c69b70fafd31",
        "previous_commit": "b596abe348ee4a2ce71ba66fc9b3e3b6fb5236f7",
        "date": 1665173682,
        "releases": {
            "previous": "a39c0ea9c3861261ed185718d6c1c69b70fafd31",
            "next": "a39c0ea9c3861261ed185718d6c1c69b70fafd31"
        },
        "commit_message": "Implement a Regex based Check on Expressions (#1776)\n\nCo-authored-by: Kevin Davis <kdavisk6@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "a39c0ea9c3861261ed185718d6c1c69b70fafd31": {
                "core/src/main/java/feign/template/Expressions.java": [
                    "public static Expression feign.template.Expressions.create(final String value)"
                ]
            },
            "b596abe348ee4a2ce71ba66fc9b3e3b6fb5236f7": {
                "core/src/main/java/feign/template/Expressions.java": [
                    "public static Expression feign.template.Expressions.create(final String value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c4b89c29b8cc29c38faf4369235c39ac582c3302",
        "previous_commit": "e4e9d05125c6a353d6421b5f391b465ef1805980",
        "date": 1615140196,
        "releases": {
            "previous": "c4b89c29b8cc29c38faf4369235c39ac582c3302",
            "next": "c4b89c29b8cc29c38faf4369235c39ac582c3302"
        },
        "commit_message": "Upgrade httpclient5 to GA version 5.0.3 (#1373)\n\n* Upgrade httpclient5 to GA version 5.0.3\r\n\r\n* Updating License Headers for 2021\r\n\r\nCo-authored-by: Thanh Nguyen <thanh.nguyen-ky@klarna.com>\r\nCo-authored-by: Davis, Kevin <kdavisk6@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "c4b89c29b8cc29c38faf4369235c39ac582c3302": {
                "hc5/src/main/java/feign/hc5/AsyncApacheHttp5Client.java": [
                    "SimpleHttpRequest feign.hc5.AsyncApacheHttp5Client.toClassicHttpRequest(Request request, Request.Options options)"
                ]
            },
            "e4e9d05125c6a353d6421b5f391b465ef1805980": {
                "hc5/src/main/java/feign/hc5/AsyncApacheHttp5Client.java": [
                    "SimpleHttpRequest feign.hc5.AsyncApacheHttp5Client.toClassicHttpRequest(Request request, Request.Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8c54e3aa09ad329ee315231b3c31cc3f8fb18cb4",
        "previous_commit": "f7fea7f7dca579ab37ab875e33703dbcf37f6c89",
        "date": 1497271660,
        "releases": {
            "previous": "8c54e3aa09ad329ee315231b3c31cc3f8fb18cb4",
            "next": "8c54e3aa09ad329ee315231b3c31cc3f8fb18cb4"
        },
        "commit_message": "Fix ApacheHttpClient.getContentType() to use request charset as default (#566)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "8c54e3aa09ad329ee315231b3c31cc3f8fb18cb4": {
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "private ContentType feign.httpclient.ApacheHttpClient.getContentType(Request request)"
                ]
            },
            "f7fea7f7dca579ab37ab875e33703dbcf37f6c89": {
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "private ContentType feign.httpclient.ApacheHttpClient.getContentType(Request request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "be8f30d6ae2eb3fadcfbcd1f08002511ec9e64cf",
        "previous_commit": "a9e631ac9beed8a59b52b480f75231695624c2a0",
        "date": 1583744879,
        "releases": {
            "previous": "be8f30d6ae2eb3fadcfbcd1f08002511ec9e64cf",
            "next": "be8f30d6ae2eb3fadcfbcd1f08002511ec9e64cf"
        },
        "commit_message": "Metric API (#1181)\n\n* Add metrics support to feign\r\n\r\n* Introduced capabilities to hystrix\r\n\r\n* Addressing PR comments",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "be8f30d6ae2eb3fadcfbcd1f08002511ec9e64cf": {
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ]
            },
            "a9e631ac9beed8a59b52b480f75231695624c2a0": {
                "core/src/main/java/feign/Feign.java": [
                    "public Feign feign.Feign.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a6fc182d453f421305893f2b4fbd677a18099ffb",
        "previous_commit": "7146e358e5fa3ea4fc00333505d0c4556703d7e1",
        "date": 1646602795,
        "releases": {
            "previous": "a6fc182d453f421305893f2b4fbd677a18099ffb",
            "next": "a6fc182d453f421305893f2b4fbd677a18099ffb"
        },
        "commit_message": "fix: Undefined value in @QueryMap params works not as described (#1585)\n\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "a6fc182d453f421305893f2b4fbd677a18099ffb": {
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "private RequestTemplate feign.ReflectiveFeign.addQueryMapQueryParameters(Map<String, Object> queryMap, RequestTemplate mutable)"
                ]
            },
            "7146e358e5fa3ea4fc00333505d0c4556703d7e1": {
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "private RequestTemplate feign.ReflectiveFeign.addQueryMapQueryParameters(Map<String, Object> queryMap, RequestTemplate mutable)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "005619f56b875f6d858a3eeda39905be8ab5fcfc",
        "previous_commit": "ee68ebfff49e14abb5c0a0be86355152ecbfc976",
        "date": 1720611459,
        "releases": {
            "previous": "005619f56b875f6d858a3eeda39905be8ab5fcfc",
            "next": "005619f56b875f6d858a3eeda39905be8ab5fcfc"
        },
        "commit_message": "Allows adding literal header values to RequestTemplate (#2471)\n\n* Allows adding literal header values to RequestTemplate\r\n\r\nThis change adds a new method RequestTemplate#headerLiteral which allows adding headers which are not interpreted as Template expressions. This allows adding empty JSON objects to headers in RequestInterceptor implementations.\r\n\r\nFixes #2252, #1987\r\n\r\n* Update RequestTemplate.java\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "005619f56b875f6d858a3eeda39905be8ab5fcfc": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.headerLiteral(String name, Iterable<String> values)"
                ]
            },
            "ee68ebfff49e14abb5c0a0be86355152ecbfc976": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.header(String name, Iterable<String> values)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9a86fa8e99b37bec451108172736acb4b3fc248d",
        "previous_commit": "1ffa9bea2059c55c09e0bf53cead8caabae59b6e",
        "date": 1591076446,
        "releases": {
            "previous": "9a86fa8e99b37bec451108172736acb4b3fc248d",
            "next": "9a86fa8e99b37bec451108172736acb4b3fc248d"
        },
        "commit_message": "fixed query map with array parameter bug (#1220)\n\n* fixed query map with array parameter bug\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "9a86fa8e99b37bec451108172736acb4b3fc248d": {
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "private RequestTemplate feign.ReflectiveFeign.addQueryMapQueryParameters(Map<String, Object> queryMap, RequestTemplate mutable)"
                ]
            },
            "1ffa9bea2059c55c09e0bf53cead8caabae59b6e": {
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "private RequestTemplate feign.ReflectiveFeign.addQueryMapQueryParameters(Map<String, Object> queryMap, RequestTemplate mutable)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "aa565e41568f10d1c01a4e43978bcd37ac4b6f9f",
        "previous_commit": "5c57213b349c3e76910f595b67b13d0d34f64566",
        "date": 1563817658,
        "releases": {
            "previous": "aa565e41568f10d1c01a4e43978bcd37ac4b6f9f",
            "next": "aa565e41568f10d1c01a4e43978bcd37ac4b6f9f"
        },
        "commit_message": "Maintain user-given order for header values (#1009)\n\nFixes bug where HeaderTemplate stored values in a HashSet which\r\ncaused the following issues:\r\n\r\n* Header values could be written in wrong order\r\n* Order was not stable between JVM instances\r\n\r\nFixes #1007",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "aa565e41568f10d1c01a4e43978bcd37ac4b6f9f": {
                "core/src/main/java/feign/template/HeaderTemplate.java": [
                    "public static HeaderTemplate feign.template.HeaderTemplate.append(HeaderTemplate headerTemplate, Iterable<String> values)"
                ]
            },
            "5c57213b349c3e76910f595b67b13d0d34f64566": {
                "core/src/main/java/feign/template/HeaderTemplate.java": [
                    "public static HeaderTemplate feign.template.HeaderTemplate.append(HeaderTemplate headerTemplate, Iterable<String> values)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ef96a8166a4050f0f2738dc221d150f5ed6dfacc",
        "previous_commit": "fd7eab9826b0ce678f37739326a710631a1a41a9",
        "date": 1608687317,
        "releases": {
            "previous": "ef96a8166a4050f0f2738dc221d150f5ed6dfacc",
            "next": "ef96a8166a4050f0f2738dc221d150f5ed6dfacc"
        },
        "commit_message": "Java11client connect timeout (#1307)\n\n* Set connect timeout from feign Option on java11 HttpClient\r\n\r\n* added a constructor to Http2Client which takes Options argument\r\n\r\nCo-authored-by: Gunther Klein <gunther.klein@thepaymail.com>\r\nCo-authored-by: Kevin Davis <kdavisk6@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "ef96a8166a4050f0f2738dc221d150f5ed6dfacc": {
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "public Response feign.http2client.Http2Client.execute(Request request, Options options)"
                ]
            },
            "fd7eab9826b0ce678f37739326a710631a1a41a9": {
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "public Response feign.http2client.Http2Client.execute(Request request, Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c14c838a5ffbe4027d7edc426b73c64342958b38",
        "previous_commit": "77acebc7468d049bbcc2f1b7893f2fed8a77745b",
        "date": 1696064733,
        "releases": {
            "previous": "c14c838a5ffbe4027d7edc426b73c64342958b38",
            "next": "c14c838a5ffbe4027d7edc426b73c64342958b38"
        },
        "commit_message": "Optimize moshi decoding (#2183)\n\n* perf: avoid writing full body to an intermediate string\r\n\r\n* fix: eagerly return null for empty bodies\r\n\r\n* chore(moshi): remove guava dependency\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "c14c838a5ffbe4027d7edc426b73c64342958b38": {
                "moshi/src/main/java/feign/moshi/MoshiDecoder.java": [
                    "public Object feign.moshi.MoshiDecoder.decode(Response response, Type type)"
                ]
            },
            "77acebc7468d049bbcc2f1b7893f2fed8a77745b": {
                "moshi/src/main/java/feign/moshi/MoshiDecoder.java": [
                    "public Object feign.moshi.MoshiDecoder.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b500a0585fa3fb5ad5bce1ea88b0cf9e1fbe11d4",
        "previous_commit": "dacb086923dac14331f014fb25728661b2901f75",
        "date": 1697793767,
        "releases": {
            "previous": "b500a0585fa3fb5ad5bce1ea88b0cf9e1fbe11d4",
            "next": "b500a0585fa3fb5ad5bce1ea88b0cf9e1fbe11d4"
        },
        "commit_message": "Unzip/Deflate content on error status for Default Client (#2184)\n\n* Unzip/Deflate content on error status for Default Client\r\n\r\n* Fix assert message\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "b500a0585fa3fb5ad5bce1ea88b0cf9e1fbe11d4": {
                "core/src/main/java/feign/Client.java": [
                    "Response feign.Default.convertResponse(HttpURLConnection connection, Request request)"
                ]
            },
            "dacb086923dac14331f014fb25728661b2901f75": {
                "core/src/main/java/feign/Client.java": [
                    "Response feign.Default.convertResponse(HttpURLConnection connection, Request request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cb036e48e47c537eb874241fa586ea77272d892f",
        "previous_commit": "d436ca153b4f88ea630d14bfe3fd646ada1ba407",
        "date": 1541708303,
        "releases": {
            "previous": "cb036e48e47c537eb874241fa586ea77272d892f",
            "next": "cb036e48e47c537eb874241fa586ea77272d892f"
        },
        "commit_message": "Fixes an issue with http-headers duplication when using RequestTemplate (#832)\n\n* Fixes an issue with http-headers duplication when using RequestTemplate\r\n\r\nFixes #570\r\n\r\n* Changes imports formatting (upon running 'clean install')\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "cb036e48e47c537eb874241fa586ea77272d892f": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public Map<String, Collection<String>> feign.RequestTemplate.headers()"
                ]
            },
            "d436ca153b4f88ea630d14bfe3fd646ada1ba407": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public Map<String, Collection<String>> feign.RequestTemplate.headers()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e9b07659958b10b381b41097825d2ac22404bffa",
        "previous_commit": "c7aa85c1b6fb6df5462483463d28e7b0cf5aa038",
        "date": 1696242671,
        "releases": {
            "previous": "e9b07659958b10b381b41097825d2ac22404bffa",
            "next": "e9b07659958b10b381b41097825d2ac22404bffa"
        },
        "commit_message": "Java 11 HTTP client incorrectly reports 'invalid URI' exception message when cause is thread interruption (#2191)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "e9b07659958b10b381b41097825d2ac22404bffa": {
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "public Response feign.http2client.Http2Client.execute(Request request, Options options)"
                ]
            },
            "c7aa85c1b6fb6df5462483463d28e7b0cf5aa038": {
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "public Response feign.http2client.Http2Client.execute(Request request, Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "aba4b75a4ad1668b469e1c8e1138e01854ffba35",
        "previous_commit": "2d60cffabf21a376fdb6025cc9dfe91e7db49a60",
        "date": 1676234124,
        "releases": {
            "previous": "aba4b75a4ad1668b469e1c8e1138e01854ffba35",
            "next": "aba4b75a4ad1668b469e1c8e1138e01854ffba35"
        },
        "commit_message": "updates reactor-core dependency for the feign-reactive-wrappers (#1930)\n\n* updates reactor-core dependency for the feign-reactive-wrappers\r\n\r\nremoved deprecated usage of <code>Schedulers.elastic()</code> and using <code>Schedulers.boundedElastic()</code> instead\r\n\r\nFixes #1711\r\n\r\n* moved scheduler initialization to constructor\r\n\r\nCreated a second builder method which allows to configure the scheduler as a parameter. The default builder method now uses the non deprecated <code>Schedulers.boundedElastic()</code>\r\n\r\nFixes #1711\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "aba4b75a4ad1668b469e1c8e1138e01854ffba35": {
                "reactive/src/main/java/feign/reactive/ReactorFeign.java": [
                    "public static Builder feign.reactive.ReactorFeign.builder()"
                ]
            },
            "2d60cffabf21a376fdb6025cc9dfe91e7db49a60": {
                "reactive/src/main/java/feign/reactive/ReactorFeign.java": [
                    "public static Builder feign.reactive.ReactorFeign.builder()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5c460ae08242e3704ecc0a57901facff564098cf",
        "previous_commit": "4cb83a3ac4892e922f2cddd8355a3defac1ba05f",
        "date": 1623886302,
        "releases": {
            "previous": "5c460ae08242e3704ecc0a57901facff564098cf",
            "next": "5c460ae08242e3704ecc0a57901facff564098cf"
        },
        "commit_message": "Modify DefaultMethodHandler to work with Android (#1436)\n\n* Modify DefaultMethodHandler to work with Android.\r\n\r\n* Modified to work with Android. Previous commit worked up to API level 28 (Android 8) however, Android 9+ enforces more strict checking with reflection.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "5c460ae08242e3704ecc0a57901facff564098cf": {
                "core/src/main/java/feign/DefaultMethodHandler.java": [
                    "private Lookup feign.DefaultMethodHandler.readLookup(Class<?> declaringClass)"
                ]
            },
            "4cb83a3ac4892e922f2cddd8355a3defac1ba05f": {
                "core/src/main/java/feign/DefaultMethodHandler.java": [
                    "private Lookup feign.DefaultMethodHandler.readLookup(Class<?> declaringClass)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "03dcf4dbf9cbfec75597af9ed5bc7d94dfbc4d0c",
        "previous_commit": "fffce1ee13b9badf35a079c00eae190f0e869f6f",
        "date": 1683090016,
        "releases": {
            "previous": "03dcf4dbf9cbfec75597af9ed5bc7d94dfbc4d0c",
            "next": "03dcf4dbf9cbfec75597af9ed5bc7d94dfbc4d0c"
        },
        "commit_message": "Added error decoder to async builder (#2029)\n\nCo-authored-by: Richard Wagstaff <richardwagstaff@hollandandbarrett.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "03dcf4dbf9cbfec75597af9ed5bc7d94dfbc4d0c": {
                "kotlin/src/main/java/feign/kotlin/CoroutineFeign.java": [
                    "public CoroutineFeign<C> feign.kotlin.CoroutineFeign<C>.build()"
                ]
            },
            "fffce1ee13b9badf35a079c00eae190f0e869f6f": {
                "kotlin/src/main/java/feign/kotlin/CoroutineFeign.java": [
                    "public CoroutineFeign<C> feign.kotlin.CoroutineFeign<C>.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5bc04de16043d74a24ec9e15b478ddefbf57c4cb",
        "previous_commit": "ad86f22524343818850358662b69160d124dbff0",
        "date": 1559053585,
        "releases": {
            "previous": "5bc04de16043d74a24ec9e15b478ddefbf57c4cb",
            "next": "5bc04de16043d74a24ec9e15b478ddefbf57c4cb"
        },
        "commit_message": "Parse Retry-After header responses that include decimal points (#980)\n\nrfc7231 section 7.1.3 states that the Retry-After header can return delay-seconds value\r\nthat is a non-negative decimal integer, representing time in seconds.\r\n\r\nSome servers return the second delay with a decimal point.  Eg instead of 2 they return 2.0\r\nThis patch handles this case where the server has included a decimal point in their response.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "5bc04de16043d74a24ec9e15b478ddefbf57c4cb": {
                "core/src/main/java/feign/codec/ErrorDecoder.java": [
                    "public Date feign.codec.RetryAfterDecoder.apply(String retryAfter)"
                ]
            },
            "ad86f22524343818850358662b69160d124dbff0": {
                "core/src/main/java/feign/codec/ErrorDecoder.java": [
                    "public Date feign.codec.RetryAfterDecoder.apply(String retryAfter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "24635e6e85f4d50445e94aed779712e18fd2a1bc",
        "previous_commit": "afc1d676c2e62b6697e937aad4a59cd2ee2ec4ce",
        "date": 1639429628,
        "releases": {
            "previous": "24635e6e85f4d50445e94aed779712e18fd2a1bc",
            "next": "24635e6e85f4d50445e94aed779712e18fd2a1bc"
        },
        "commit_message": "The counter indicator increases by 2 each time (on happy path) (#1548)\n\n* The counter indicator increases by 2 each time (on happy path).\r\n\r\n* Add test coverage\r\n\r\n* Make test beaty again\r\n\r\n* Fix license header\r\n\r\n* Move new tests to the common abstract class",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "24635e6e85f4d50445e94aed779712e18fd2a1bc": {
                "micrometer/src/main/java/feign/micrometer/MeteredClient.java": [
                    "public Response feign.micrometer.MeteredClient.execute(Request request, Options options)"
                ]
            },
            "afc1d676c2e62b6697e937aad4a59cd2ee2ec4ce": {
                "micrometer/src/main/java/feign/micrometer/MeteredClient.java": [
                    "public Response feign.micrometer.MeteredClient.execute(Request request, Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fdc7bc2fb85ef6c816f36750ece1a18fa80d4ef3",
        "previous_commit": "d27d385e1a1673446aa1f6a778a91fbaa2442679",
        "date": 1655154186,
        "releases": {
            "previous": "fdc7bc2fb85ef6c816f36750ece1a18fa80d4ef3",
            "next": "fdc7bc2fb85ef6c816f36750ece1a18fa80d4ef3"
        },
        "commit_message": "Add async behavior to OkHttpClient (#1629)\n\n* Add AsyncOkHttpClient implementation\r\n\r\n* Make OkHttpClient implement both Client and AsyncClient\r\n\r\nRemoves the need to share code in an abstract class.\r\n\r\n* Update mindmap\r\n\r\n* Update CHANGELOG.md\r\n\r\n* Remove jetbrains specific annotations",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "fdc7bc2fb85ef6c816f36750ece1a18fa80d4ef3": {
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request input, feign.Request.Options options)"
                ]
            },
            "d27d385e1a1673446aa1f6a778a91fbaa2442679": {
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request input, feign.Request.Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f9310ae8e696b820fc48a9b0f61f295cc5b1a652",
        "previous_commit": "00328998c1c4469b2ee726c56134b86d16b95470",
        "date": 1646240728,
        "releases": {
            "previous": "f9310ae8e696b820fc48a9b0f61f295cc5b1a652",
            "next": "f9310ae8e696b820fc48a9b0f61f295cc5b1a652"
        },
        "commit_message": "Use charset of request to create the String content. (#1571)\n\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "f9310ae8e696b820fc48a9b0f61f295cc5b1a652": {
                "hc5/src/main/java/feign/hc5/ApacheHttp5Client.java": [
                    "ClassicHttpRequest feign.hc5.ApacheHttp5Client.toClassicHttpRequest(Request request, Request.Options options)"
                ]
            },
            "00328998c1c4469b2ee726c56134b86d16b95470": {
                "hc5/src/main/java/feign/hc5/ApacheHttp5Client.java": [
                    "ClassicHttpRequest feign.hc5.ApacheHttp5Client.toClassicHttpRequest(Request request, Request.Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "80bdec06a4cda5bb457783e9b4f569efe0d1ce9a",
        "previous_commit": "e9b07659958b10b381b41097825d2ac22404bffa",
        "date": 1696403179,
        "releases": {
            "previous": "80bdec06a4cda5bb457783e9b4f569efe0d1ce9a",
            "next": "80bdec06a4cda5bb457783e9b4f569efe0d1ce9a"
        },
        "commit_message": "Add @QueryMap `mapEncoder` attribute (#2098)\n\n* use `mapEncoder` attribute at method level for what encoder to use\r\n* still use builder `QueryMapEncoder` if no attribute specified\r\n\r\nCo-authored-by: Pierre Lakreb <pierre.lakreb@smile.fr>\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "80bdec06a4cda5bb457783e9b4f569efe0d1ce9a": {
                "core/src/main/java/feign/RequestTemplateFactoryResolver.java": [
                    "public RequestTemplate feign.RequestTemplateFactoryResolver.create(Object[] argv)"
                ]
            },
            "e9b07659958b10b381b41097825d2ac22404bffa": {
                "core/src/main/java/feign/RequestTemplateFactoryResolver.java": [
                    "public RequestTemplate feign.RequestTemplateFactoryResolver.create(Object[] argv)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b53a53591b7de1f2c301ad332f7b8a88a7b6fbce",
        "previous_commit": "3ea3708cddef0d20c0bf443c18f2364c8d8df062",
        "date": 1619056802,
        "releases": {
            "previous": "b53a53591b7de1f2c301ad332f7b8a88a7b6fbce",
            "next": "b53a53591b7de1f2c301ad332f7b8a88a7b6fbce"
        },
        "commit_message": "Make the FieldQueryMapEncoder encoder thread safe (#1369)\n\n* Make the FieldQueryMapEncoder encoder thread safe\r\nChange the caching map to be concurrent and only\r\ninsert items that are missing to the map.\r\nFixes #1257\r\n\r\n* Refactor the FieldQueryMapEncoder to use streams\r\nFixes #1257",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "b53a53591b7de1f2c301ad332f7b8a88a7b6fbce": {
                "core/src/main/java/feign/querymap/FieldQueryMapEncoder.java": [
                    "public Map<String, Object> feign.querymap.FieldQueryMapEncoder.encode(Object object)"
                ]
            },
            "3ea3708cddef0d20c0bf443c18f2364c8d8df062": {
                "core/src/main/java/feign/querymap/FieldQueryMapEncoder.java": [
                    "public Map<String, Object> feign.querymap.FieldQueryMapEncoder.encode(Object object)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3c7bca03947616adfe0e5a713a3779e9719f669e",
        "previous_commit": "b40498f56d182537279e059375eb7887e2384373",
        "date": 1536934822,
        "releases": {
            "previous": "3c7bca03947616adfe0e5a713a3779e9719f669e",
            "next": "3c7bca03947616adfe0e5a713a3779e9719f669e"
        },
        "commit_message": "Correctly handle @Path annotations that has params with regexes (#600)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "3c7bca03947616adfe0e5a713a3779e9719f669e": {
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "protected void feign.jaxrs.JAXRSContract.processAnnotationOnClass(MethodMetadata data, Class<?> clz)"
                ]
            },
            "b40498f56d182537279e059375eb7887e2384373": {
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "protected void feign.jaxrs.JAXRSContract.processAnnotationOnClass(MethodMetadata data, Class<?> clz)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5e914418e102cdee82388881214f684ca81b21db",
        "previous_commit": "181bd059b07c3230e5c9d04df494d4ec0497d007",
        "date": 1715592066,
        "releases": {
            "previous": "5e914418e102cdee82388881214f684ca81b21db",
            "next": "5e914418e102cdee82388881214f684ca81b21db"
        },
        "commit_message": "Http2Client: added clients cache (#2405)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "5e914418e102cdee82388881214f684ca81b21db": {
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "private HttpClient feign.http2client.Http2Client.getOrCreateClient(Options options)"
                ]
            },
            "181bd059b07c3230e5c9d04df494d4ec0497d007": {
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "private HttpClient feign.http2client.Http2Client.getOrCreateClient(Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d08dac04f705284236d4bdacdd7275f61a09addd",
        "previous_commit": "a429f7ff5900d59abc6d96362c9ecece02d5ff5f",
        "date": 1709173882,
        "releases": {
            "previous": "d08dac04f705284236d4bdacdd7275f61a09addd",
            "next": "d08dac04f705284236d4bdacdd7275f61a09addd"
        },
        "commit_message": "Adds a client tag to the default micrometer observation (#2333)\n\n* Add client tag to default micrometer observation\r\n\r\n* Update license headers\r\n\r\n* Update tag name to clientName",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "d08dac04f705284236d4bdacdd7275f61a09addd": {
                "micrometer/src/main/java/feign/micrometer/DefaultFeignObservationConvention.java": [
                    "public KeyValues feign.micrometer.DefaultFeignObservationConvention.getLowCardinalityKeyValues(FeignContext context)"
                ]
            },
            "a429f7ff5900d59abc6d96362c9ecece02d5ff5f": {
                "micrometer/src/main/java/feign/micrometer/DefaultFeignObservationConvention.java": [
                    "public KeyValues feign.micrometer.DefaultFeignObservationConvention.getLowCardinalityKeyValues(FeignContext context)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8fd94cec951707b288ee7243da8e915259e5f2f4",
        "previous_commit": "3adb897defe755d18a88a6485e1a7b35d03b2fb6",
        "date": 1473314702,
        "releases": {
            "previous": "8fd94cec951707b288ee7243da8e915259e5f2f4",
            "next": "8fd94cec951707b288ee7243da8e915259e5f2f4"
        },
        "commit_message": "Support request content-type with charset (#453)\n\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "8fd94cec951707b288ee7243da8e915259e5f2f4": {
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "private ContentType feign.httpclient.ApacheHttpClient.getContentType(Request request)"
                ]
            },
            "3adb897defe755d18a88a6485e1a7b35d03b2fb6": {
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "private ContentType feign.httpclient.ApacheHttpClient.getContentType(Request request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "55b35f711d82658c84366e56e5f589050ab856a9",
        "previous_commit": "04a85e6961123d4fdb2ab9e4eabbfe09b4eea0a6",
        "date": 1647805162,
        "releases": {
            "previous": "55b35f711d82658c84366e56e5f589050ab856a9",
            "next": "55b35f711d82658c84366e56e5f589050ab856a9"
        },
        "commit_message": "Deprecate QueryMap.encode, remove processing of the \"encode\" parameter (#1551)\n\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "55b35f711d82658c84366e56e5f589050ab856a9": {
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "private RequestTemplate feign.ReflectiveFeign.addQueryMapQueryParameters(Map<String, Object> queryMap, RequestTemplate mutable)"
                ]
            },
            "04a85e6961123d4fdb2ab9e4eabbfe09b4eea0a6": {
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "private RequestTemplate feign.ReflectiveFeign.addQueryMapQueryParameters(Map<String, Object> queryMap, RequestTemplate mutable)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b86efe04ed26209bceec06bba0a25aa5796c620d",
        "previous_commit": "819b2df8c54d9266abf4cde9b17ab7890ed95cc6",
        "date": 1579314079,
        "releases": {
            "previous": "b86efe04ed26209bceec06bba0a25aa5796c620d",
            "next": "b86efe04ed26209bceec06bba0a25aa5796c620d"
        },
        "commit_message": "Add support for SOAP Envelope declarations to be inherited (#1141)\n\nFixes #1127\r\n\r\nIn certain situations the declarations on the SOAP envelope are not\r\ninherited by JAXB when reading the documents.  This is particularly\r\ntroublesome when it is not possible to correct the XML at the source.\r\n\r\nTo support this a new `useFirstChild` option has been added to the\r\n`SOAPDecoder` builder that will use `SOAPBody#getFirstChild()`\r\ninstead of `SOAPBody#extractContentAsDocument()`.  This will allow\r\nusers to supply a `package-info.java` to manage the element namespaces\r\nexplicitly and define what should occur if the namespace declarations\r\nare missing.\r\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "b86efe04ed26209bceec06bba0a25aa5796c620d": {
                "soap/src/main/java/feign/soap/SOAPDecoder.java": [
                    "public Object feign.soap.SOAPDecoder.decode(Response response, Type type)"
                ]
            },
            "819b2df8c54d9266abf4cde9b17ab7890ed95cc6": {
                "soap/src/main/java/feign/soap/SOAPDecoder.java": [
                    "public Object feign.soap.SOAPDecoder.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8cac02659747968715731a149c40126d782d0cf3",
        "previous_commit": "a71040b781d5bfa58eaaa2955ebad07a9e5da01a",
        "date": 1582928019,
        "releases": {
            "previous": "8cac02659747968715731a149c40126d782d0cf3",
            "next": "8cac02659747968715731a149c40126d782d0cf3"
        },
        "commit_message": "Hardcode a github token for more stable testing\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "8cac02659747968715731a149c40126d782d0cf3": {
                "example-github/src/main/java/example/github/GitHubExample.java": [
                    "static GitHub example.github.GitHubExample.connect()"
                ]
            },
            "a71040b781d5bfa58eaaa2955ebad07a9e5da01a": {
                "example-github/src/main/java/example/github/GitHubExample.java": [
                    "static GitHub example.github.GitHubExample.connect()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f34b3ab3c9ff2f75e9b4d2b92a30e94165f075a3",
        "previous_commit": "a237da789988d27d3a72e28e0791aeda1deddb14",
        "date": 1702368374,
        "releases": {
            "previous": "f34b3ab3c9ff2f75e9b4d2b92a30e94165f075a3",
            "next": "f34b3ab3c9ff2f75e9b4d2b92a30e94165f075a3"
        },
        "commit_message": "Migrate all assertions to assertJ (#2261)\n\n* Migrate all assertions to assertJ\r\n\r\nmvn -U org.openrewrite.maven:rewrite-maven-plugin:run   -Drewrite.recipeArtifactCoordinates=org.openrewrite.recipe:rewrite-testing-frameworks:RELEASE   -Drewrite.activeRecipes=org.openrewrite.java.testing.junit5.AssertToAssertions,org.openrewrite.java.testing.assertj.Assertj\r\n\r\n* Remove obsolete testing framework\r\n\r\n* Migrate more tests for assertJ and assertThrows\r\n\r\n* Remove obsolete testing framework\r\n\r\n* Build using junit 5\r\n\r\n* Use lambdas on tests\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin Froeder <velobr@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "f34b3ab3c9ff2f75e9b4d2b92a30e94165f075a3": {
                "core/src/main/java/feign/AsynchronousMethodHandler.java": [
                    "private CompletableFuture<Object> feign.AsynchronousMethodHandler<C>.executeAndDecode(RequestTemplate template, Options options)"
                ]
            },
            "a237da789988d27d3a72e28e0791aeda1deddb14": {
                "core/src/main/java/feign/AsynchronousMethodHandler.java": [
                    "private CompletableFuture<Object> feign.AsynchronousMethodHandler<C>.executeAndDecode(RequestTemplate template, Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f73fe7058a3a7da0aa307220e766f1fb2f4b58dd",
        "previous_commit": "a7b7c01806324126dd844a9a912e309754bc4dc9",
        "date": 1577474718,
        "releases": {
            "previous": "f73fe7058a3a7da0aa307220e766f1fb2f4b58dd",
            "next": "f73fe7058a3a7da0aa307220e766f1fb2f4b58dd"
        },
        "commit_message": "Include variables Query Parameter Names when listing template parameters (#1144)\n\nFixes #1089\r\n\r\nQuery Template names, which also happen to be templates, were not being\r\nconsidered when listing out all of the variable names in a Query Template.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "f73fe7058a3a7da0aa307220e766f1fb2f4b58dd": {
                "core/src/main/java/feign/template/QueryTemplate.java": [
                    "public List<String> feign.template.QueryTemplate.getVariables()"
                ]
            },
            "a7b7c01806324126dd844a9a912e309754bc4dc9": {
                "core/src/main/java/feign/template/QueryTemplate.java": [
                    "public List<String> feign.template.QueryTemplate.getVariables()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "96a6bbd2c85223ae5f49b6dd324f0be192f0e3be",
        "previous_commit": "80020559599fd97a04182f517e5976c6d9f4fd29",
        "date": 1699473042,
        "releases": {
            "previous": "96a6bbd2c85223ae5f49b6dd324f0be192f0e3be",
            "next": "96a6bbd2c85223ae5f49b6dd324f0be192f0e3be"
        },
        "commit_message": "Do not decode URL encoding while setting up RequestTemplate (#2228)\n\n* Do not decode URL encoding while setting up RequestTemplate (#2227)\r\n\r\n* Add unit test for preserving URL encoding in RequestTemplate (#2227)",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "96a6bbd2c85223ae5f49b6dd324f0be192f0e3be": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.target(String target)"
                ]
            },
            "80020559599fd97a04182f517e5976c6d9f4fd29": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.target(String target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "94ce07122e69afb43ad8fa50ada624b8064ff41e",
        "previous_commit": "7ce0727e09941d48904a1919ee4a46d764e8ba49",
        "date": 1525133454,
        "releases": {
            "previous": "94ce07122e69afb43ad8fa50ada624b8064ff41e",
            "next": "94ce07122e69afb43ad8fa50ada624b8064ff41e"
        },
        "commit_message": "FIXED unsupported jaxrs-2.1 annotations should not break entire interface (#672)\n\n* FIXED unsupported jaxrs-2.1 annotations should not break entire interface, resolving #669\r\n\r\n* UPDATED jaxrs: more defensive jaxrs2 support\r\n\r\n* ADDED jsr311-api dependency to httpclient (as jsr311 is `provided` in feign-jaxrs now)\r\n\r\n* UPDATED httpclient `jsr311-api` scope to test\r\nUPDATED jaxrs readme\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "94ce07122e69afb43ad8fa50ada624b8064ff41e": {
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "protected boolean feign.jaxrs.JAXRSContract.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)"
                ]
            },
            "7ce0727e09941d48904a1919ee4a46d764e8ba49": {
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "protected boolean feign.jaxrs.JAXRSContract.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "45cff0673a4236ff31ed84ae30c51aa1c9b2204c",
        "previous_commit": "d09b88efb6e285c6ee54c15ef4b0dcab12c40185",
        "date": 1667409151,
        "releases": {
            "previous": "45cff0673a4236ff31ed84ae30c51aa1c9b2204c",
            "next": "45cff0673a4236ff31ed84ae30c51aa1c9b2204c"
        },
        "commit_message": "Refactor reflective feign (#1821)\n\n* Extract ParseHandlersByName.createMethodHandler\r\n\r\nExtract the function so that the ParseHandlersByName.apply function is easy to understand.\r\n\r\n* Refactor ReflectiveFeign.newInstance\r\n\r\nExtract the function so that the ReflectiveFeign.newInstance function is easy to understand.\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "45cff0673a4236ff31ed84ae30c51aa1c9b2204c": {
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public <T> T feign.ReflectiveFeign<C>.newInstance(Target<T> target, C requestContext)"
                ]
            },
            "d09b88efb6e285c6ee54c15ef4b0dcab12c40185": {
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public <T> T feign.ReflectiveFeign<C>.newInstance(Target<T> target, C requestContext)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6e6486503d4808fd8901ea8ba47f64c56b602757",
        "previous_commit": "1821d9466926f2a4764a8336bd34954a637db37e",
        "date": 1577722944,
        "releases": {
            "previous": "6e6486503d4808fd8901ea8ba47f64c56b602757",
            "next": "6e6486503d4808fd8901ea8ba47f64c56b602757"
        },
        "commit_message": "Ensure @Body and @Param parsing consistency  (#1137)\n\nRelates to #561 \r\n\r\nCorrects inconsistent processing during Contract parsing with `formParams` are mixed with `@Body` parameters where order of parameters mattered, when it shouldn't.\r\n\r\nTest Case:\r\n```java\r\n\r\n@RequestLine(\"POST /\")\r\nvoid formParamAndBodyParams(\r\n        @Param(\"customer_name\") String customer,\r\n        String body);\r\n\r\n@RequestLine(\"POST /\")\r\nvoid bodyParamsAndformParam(\r\n        String body,\r\n        @Param(\"customer_name\") String customer);\r\n\r\n```\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "6e6486503d4808fd8901ea8ba47f64c56b602757": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ]
            },
            "1821d9466926f2a4764a8336bd34954a637db37e": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2cc907c88ff893dfc4769a0319f812027ff5f1ae",
        "previous_commit": "8cac02659747968715731a149c40126d782d0cf3",
        "date": 1583445760,
        "releases": {
            "previous": "2cc907c88ff893dfc4769a0319f812027ff5f1ae",
            "next": "2cc907c88ff893dfc4769a0319f812027ff5f1ae"
        },
        "commit_message": "Configurable to disable streaming mode for Default client (#1182)\n\n* Configurable to disable streaming mode for Default client\r\n\r\n* Add a property `allowStramingMode` in `Request.Option`.\r\n\r\n* Optional to disable the streaming mode for `HttpURLConnection`.\r\n\r\n* The property is default to `true` for compatibility.\r\n\r\nFix #260\r\n\r\n* Fix a merging problem\r\n\r\n* Make the new option `disableRequestBuffering` to Default client\r\n\r\n* Move it from `Request.Options` to `Default` client\r\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "2cc907c88ff893dfc4769a0319f812027ff5f1ae": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)"
                ]
            },
            "8cac02659747968715731a149c40126d782d0cf3": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "83bb55c58962c3f69320a63202b6632c48a3b929",
        "previous_commit": "5087bd83a6caa95cb991b57d6550e609571cf9c3",
        "date": 1625177039,
        "releases": {
            "previous": "83bb55c58962c3f69320a63202b6632c48a3b929",
            "next": "83bb55c58962c3f69320a63202b6632c48a3b929"
        },
        "commit_message": "Fix no response logging on async Feign (#1450)\n\n* Fix no response logging on async Feign.\r\n\r\nCopy log level onto asyncBuilder as well as setting it on the builder, so responses get logged in the asynchronous case.\r\n\r\n* Forgot a semicolon\r\n\r\n* Run license:format; make logLevel not final.\r\n\r\nCo-authored-by: Andrew Winterman <andrew.winterman@altruist.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "83bb55c58962c3f69320a63202b6632c48a3b929": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncBuilder<C> feign.AsyncFeign<C>.logLevel(Logger.Level logLevel)"
                ]
            },
            "5087bd83a6caa95cb991b57d6550e609571cf9c3": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncBuilder<C> feign.AsyncFeign<C>.logLevel(Logger.Level logLevel)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1727283572145bd1b834f4f8bfd70ea5602eb168",
        "previous_commit": "cb036e48e47c537eb874241fa586ea77272d892f",
        "date": 1541967807,
        "releases": {
            "previous": "1727283572145bd1b834f4f8bfd70ea5602eb168",
            "next": "1727283572145bd1b834f4f8bfd70ea5602eb168"
        },
        "commit_message": "Fixes RecordedRequestAssert.hasNoHeaderNamed (now it returns 'false' in corresponding cases (#835)\n\nFixes #679",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "1727283572145bd1b834f4f8bfd70ea5602eb168": {
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "private ContentType feign.httpclient.ApacheHttpClient.getContentType(Request request)"
                ]
            },
            "cb036e48e47c537eb874241fa586ea77272d892f": {
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "private ContentType feign.httpclient.ApacheHttpClient.getContentType(Request request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "100a9acc64dbf86760b2c55196a9bdb608ed00c0",
        "previous_commit": "1e6dcf308f5d010907b76916f12977639a39d6f3",
        "date": 1467452637,
        "releases": {
            "previous": "100a9acc64dbf86760b2c55196a9bdb608ed00c0",
            "next": "100a9acc64dbf86760b2c55196a9bdb608ed00c0"
        },
        "commit_message": "Add support for expansion of @Param lists (#403)\n\n* Add support for expansion of @Param lists\r\n\r\nThe existing support for expanders in method parameters is\r\nlimited to converting a single value. The change applies the\r\nexpander individually to each item in a collection or array,\r\nthus making it useful for multi-valued query parameters, for\r\ninstance. The old behaviour is preserved because no existing\r\nexpanders would have been converting collections to strings\r\n(probably).\r\n\r\n* Change Collection to Iterable and add tests\r\n\r\n* Add test for null conversion to empty string as well\r\n\r\n* Remove array handling and null handling\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "100a9acc64dbf86760b2c55196a9bdb608ed00c0": {
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public RequestTemplate feign.ReflectiveFeign.create(Object[] argv)"
                ]
            },
            "1e6dcf308f5d010907b76916f12977639a39d6f3": {
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "public RequestTemplate feign.ReflectiveFeign.create(Object[] argv)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e15e9f0c982f7adfad72689885eaab03f3cbc396",
        "previous_commit": "1727283572145bd1b834f4f8bfd70ea5602eb168",
        "date": 1542076879,
        "releases": {
            "previous": "e15e9f0c982f7adfad72689885eaab03f3cbc396",
            "next": "e15e9f0c982f7adfad72689885eaab03f3cbc396"
        },
        "commit_message": "Filter out sythetic fields from FieldQueryMapEncoder (#840)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "e15e9f0c982f7adfad72689885eaab03f3cbc396": {
                "core/src/main/java/feign/querymap/FieldQueryMapEncoder.java": [
                    "private static ObjectParamMetadata feign.querymap.FieldQueryMapEncoder.parseObjectType(Class<?> type)"
                ]
            },
            "1727283572145bd1b834f4f8bfd70ea5602eb168": {
                "core/src/main/java/feign/querymap/FieldQueryMapEncoder.java": [
                    "private static ObjectParamMetadata feign.querymap.FieldQueryMapEncoder.parseObjectType(Class<?> type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "32eacdcca272ec623a5c2c9953a5140068c28265",
        "previous_commit": "903a5d78dd144e006db9ddcbf8f1858a67f1ee8d",
        "date": 1706086678,
        "releases": {
            "previous": "32eacdcca272ec623a5c2c9953a5140068c28265",
            "next": "32eacdcca272ec623a5c2c9953a5140068c28265"
        },
        "commit_message": "Fixed NullPointerException Bug (#2304)\n\n`RequestTemplate.header(name, values)` method has two overloaded implementations.\r\nIn the case where `values` has type `Iterable<String>`, `values` is guarded against `null`.\r\nThis does not happen when `values` has type `String...`, which is fixed by this commit.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "32eacdcca272ec623a5c2c9953a5140068c28265": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.header(String name, String... values)"
                ]
            },
            "903a5d78dd144e006db9ddcbf8f1858a67f1ee8d": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.header(String name, String... values)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "29d1db521e0b9b001212b660a17e332c35c01151",
        "previous_commit": "dbbb112f142a9fbf4de7b2d1f20a28f7a5b0bbeb",
        "date": 1490678377,
        "releases": {
            "previous": "29d1db521e0b9b001212b660a17e332c35c01151",
            "next": "29d1db521e0b9b001212b660a17e332c35c01151"
        },
        "commit_message": "fix gh-470, support the values of QueryMap starting with '{' (#540)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "29d1db521e0b9b001212b660a17e332c35c01151": {
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "private RequestTemplate feign.ReflectiveFeign.addQueryMapQueryParameters(Object[] argv, RequestTemplate mutable)"
                ]
            },
            "dbbb112f142a9fbf4de7b2d1f20a28f7a5b0bbeb": {
                "core/src/main/java/feign/ReflectiveFeign.java": [
                    "private RequestTemplate feign.ReflectiveFeign.addQueryMapQueryParameters(Object[] argv, RequestTemplate mutable)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9ad5af91fe551db42665952f628753763808dd0e",
        "previous_commit": "83b3a52c9c9cc658f0c45ef9ffbe15ae3e5734bf",
        "date": 1669515900,
        "releases": {
            "previous": "9ad5af91fe551db42665952f628753763808dd0e",
            "next": "9ad5af91fe551db42665952f628753763808dd0e"
        },
        "commit_message": "Issue-1859: ApacheHttpClient - follow redirect via Request.Options (#1861)\n\nCo-authored-by: Olivier Sergeant <olivier.sergeant@boulanger.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "9ad5af91fe551db42665952f628753763808dd0e": {
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "HttpUriRequest feign.httpclient.ApacheHttpClient.toHttpUriRequest(Request request, Request.Options options)"
                ]
            },
            "83b3a52c9c9cc658f0c45ef9ffbe15ae3e5734bf": {
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "HttpUriRequest feign.httpclient.ApacheHttpClient.toHttpUriRequest(Request request, Request.Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "982ee99474e8cc9ee21e0ac2318de2d98412e95e",
        "previous_commit": "47b7aa24e4629fc2de10eaf829e8de91d6dfdb6f",
        "date": 1522446254,
        "releases": {
            "previous": "982ee99474e8cc9ee21e0ac2318de2d98412e95e",
            "next": "982ee99474e8cc9ee21e0ac2318de2d98412e95e"
        },
        "commit_message": "Using proper formatting pattern for logIOException (#614)\n\n* Using proper formatting pattern for logIOException.\r\n\r\nFixes #613\r\n\r\n* Enforced rule exection order for LoggerTest such that ExpectedException is caught before the other rules. (The recording logging rule was ignored for tests that throw an exception). Fixed up test cases that never ran because of this. Added test for format character bug.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "982ee99474e8cc9ee21e0ac2318de2d98412e95e": {
                "core/src/main/java/feign/Logger.java": [
                    "protected IOException feign.Logger.logIOException(String configKey, Level logLevel, IOException ioe, long elapsedTime)"
                ]
            },
            "47b7aa24e4629fc2de10eaf829e8de91d6dfdb6f": {
                "core/src/main/java/feign/Logger.java": [
                    "protected IOException feign.Logger.logIOException(String configKey, Level logLevel, IOException ioe, long elapsedTime)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b36bb509ce8eeaef86baf0e6606dc568b3f55a52",
        "previous_commit": "52d981577f08834754962659c98af26520aed037",
        "date": 1632284009,
        "releases": {
            "previous": "b36bb509ce8eeaef86baf0e6606dc568b3f55a52",
            "next": "b36bb509ce8eeaef86baf0e6606dc568b3f55a52"
        },
        "commit_message": "SOAPEncoder: Add support to modify soap message manually (#1503)\n\n* Add support to modify soap message manually\r\n\r\nThis small extension adds the possibility to manually set soap headers.\r\nAn example is given in the javadoc.\r\n\r\n* Increment copyright year\r\n\r\n* Fix code formatting\r\n\r\n* Increment copyright year\r\n\r\n* Increment copyright year\r\n\r\n* Fix formatting\r\n\r\n* Improve implementation\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "b36bb509ce8eeaef86baf0e6606dc568b3f55a52": {
                "soap/src/main/java/feign/soap/SOAPEncoder.java": [
                    "public void feign.soap.SOAPEncoder.encode(Object object, Type bodyType, RequestTemplate template)"
                ]
            },
            "52d981577f08834754962659c98af26520aed037": {
                "soap/src/main/java/feign/soap/SOAPEncoder.java": [
                    "public void feign.soap.SOAPEncoder.encode(Object object, Type bodyType, RequestTemplate template)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8af587e6f5e42c84bb32eae69c45aaa2a9b595fb",
        "previous_commit": "478f4ec92e910ab4ad791dd38f47f1c4729285ed",
        "date": 1550010312,
        "releases": {
            "previous": "8af587e6f5e42c84bb32eae69c45aaa2a9b595fb",
            "next": "8af587e6f5e42c84bb32eae69c45aaa2a9b595fb"
        },
        "commit_message": "Refactored Header and Query parameter JAXRS Contract Parsing (#896)\n\nAs part of 10.x, the `headers()` and `queries()` collections on the\r\n`RequestTemplate` were made read only.  The `JAXRSContract` was still\r\nattempting to manipulate those directly.  THis was missed due to a\r\nuse case not accounted for in the tests.  I've added the appropriate\r\nuse case and corrected the usage of the template.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "8af587e6f5e42c84bb32eae69c45aaa2a9b595fb": {
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "protected boolean feign.jaxrs.JAXRSContract.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)"
                ]
            },
            "478f4ec92e910ab4ad791dd38f47f1c4729285ed": {
                "jaxrs/src/main/java/feign/jaxrs/JAXRSContract.java": [
                    "protected boolean feign.jaxrs.JAXRSContract.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7bea518f56bf209398c5b3b679e9df5330dfa5d2",
        "previous_commit": "92d45470a0a9526011666a85304e89f9f366ef64",
        "date": 1521064100,
        "releases": {
            "previous": "7bea518f56bf209398c5b3b679e9df5330dfa5d2",
            "next": "7bea518f56bf209398c5b3b679e9df5330dfa5d2"
        },
        "commit_message": "fix default method gets wrapped twice (#641)\n\n* fix default method gets wrapped twice\r\n\r\n* check if default method only once\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "7bea518f56bf209398c5b3b679e9df5330dfa5d2": {
                "hystrix/src/main/java/feign/hystrix/HystrixInvocationHandler.java": [
                    "public Object feign.hystrix.HystrixInvocationHandler.invoke(final Object proxy, final Method method, final Object[] args)"
                ]
            },
            "92d45470a0a9526011666a85304e89f9f366ef64": {
                "hystrix/src/main/java/feign/hystrix/HystrixInvocationHandler.java": [
                    "public Object feign.hystrix.HystrixInvocationHandler.invoke(final Object proxy, final Method method, final Object[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f97423253f00baf36a5f805ca5d144198c35421a",
        "previous_commit": "1f99fa4dbc438405eb317968804f23166fb0c348",
        "date": 1520880646,
        "releases": {
            "previous": "f97423253f00baf36a5f805ca5d144198c35421a",
            "next": "f97423253f00baf36a5f805ca5d144198c35421a"
        },
        "commit_message": "Enable OptionalDecoder to parse 204 responses into Optional.empty (#605)\n\nAddresses https://github.com/OpenFeign/feign/issues/604",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-9.7.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "f97423253f00baf36a5f805ca5d144198c35421a": {
                "java8/src/main/java/feign/optionals/OptionalDecoder.java": [
                    "public Object feign.optionals.OptionalDecoder.decode(Response response, Type type)"
                ]
            },
            "1f99fa4dbc438405eb317968804f23166fb0c348": {
                "java8/src/main/java/feign/optionals/OptionalDecoder.java": [
                    "public Object feign.optionals.OptionalDecoder.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "17a515e073e8dc6e3d06a8404ad9742274ce0bb0",
        "previous_commit": "3c7bca03947616adfe0e5a713a3779e9719f669e",
        "date": 1537298600,
        "releases": {
            "previous": "17a515e073e8dc6e3d06a8404ad9742274ce0bb0",
            "next": "17a515e073e8dc6e3d06a8404ad9742274ce0bb0"
        },
        "commit_message": "Fix NPE in OptionalDecoder (#788)\n\nThe decoded instance (from delegate.decode()) will be null when a\r\nresponse body is null. This decoded instance (null) will result in a NPE\r\nin the Optional since Optional.of is used. Changing this to\r\nOptional.ofNullable will return an empty Optional when the decoded\r\ninstance is null.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "17a515e073e8dc6e3d06a8404ad9742274ce0bb0": {
                "core/src/main/java/feign/optionals/OptionalDecoder.java": [
                    "public Object feign.optionals.OptionalDecoder.decode(Response response, Type type)"
                ]
            },
            "3c7bca03947616adfe0e5a713a3779e9719f669e": {
                "core/src/main/java/feign/optionals/OptionalDecoder.java": [
                    "public Object feign.optionals.OptionalDecoder.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1f7ca4c74cefdeeea96d4b90be2a945d77e6905a",
        "previous_commit": "24635e6e85f4d50445e94aed779712e18fd2a1bc",
        "date": 1639956257,
        "releases": {
            "previous": "1f7ca4c74cefdeeea96d4b90be2a945d77e6905a",
            "next": "1f7ca4c74cefdeeea96d4b90be2a945d77e6905a"
        },
        "commit_message": "Reason is optional in HTTP2 (#1550)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "1f7ca4c74cefdeeea96d4b90be2a945d77e6905a": {
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "protected Response feign.http2client.Http2Client.toFeignResponse(Request request, HttpResponse<byte[]> httpResponse)"
                ]
            },
            "24635e6e85f4d50445e94aed779712e18fd2a1bc": {
                "java11/src/main/java/feign/http2client/Http2Client.java": [
                    "protected Response feign.http2client.Http2Client.toFeignResponse(Request request, HttpResponse<byte[]> httpResponse)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cbda5e6958ff3ef4f8928fa065725eff867685d0",
        "previous_commit": "841f5ef029df34300e9936c1f935af31abcecace",
        "date": 1637347771,
        "releases": {
            "previous": "cbda5e6958ff3ef4f8928fa065725eff867685d0",
            "next": "cbda5e6958ff3ef4f8928fa065725eff867685d0"
        },
        "commit_message": "Fixes #1536: asyncBuilder can override default logger (#1539)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "cbda5e6958ff3ef4f8928fa065725eff867685d0": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncBuilder<C> feign.AsyncFeign<C>.logger(Logger logger)"
                ]
            },
            "841f5ef029df34300e9936c1f935af31abcecace": {
                "core/src/main/java/feign/AsyncFeign.java": [
                    "public AsyncBuilder<C> feign.AsyncFeign<C>.logger(Logger logger)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6b8ed38ef5e8310bc5d93e7b2293d15762312d09",
        "previous_commit": "089a59f98076d64b3086b98366ebbf0d2114769b",
        "date": 1552058007,
        "releases": {
            "previous": "6b8ed38ef5e8310bc5d93e7b2293d15762312d09",
            "next": "6b8ed38ef5e8310bc5d93e7b2293d15762312d09"
        },
        "commit_message": "Fixes NullPointerException when accessing a FeignException's content (#914)\n\nFixes NullPointerException when accessing a FeignException's content\r\n\r\nFixes #912 \r\n\r\nIf the content of a FeignException is null, `contentUTF8()` now returns an empty string rather than throwing a NullPointerException.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "6b8ed38ef5e8310bc5d93e7b2293d15762312d09": {
                "core/src/main/java/feign/FeignException.java": [
                    "public String feign.FeignException.contentUTF8()"
                ]
            },
            "089a59f98076d64b3086b98366ebbf0d2114769b": {
                "core/src/main/java/feign/FeignException.java": [
                    "public String feign.FeignException.contentUTF8()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7c6b2bb9bbaa45688a4465d537386b2a8874e309",
        "previous_commit": "c1d00649f58783ba706b34c685aaa403b8e39dc3",
        "date": 1574082470,
        "releases": {
            "previous": "7c6b2bb9bbaa45688a4465d537386b2a8874e309",
            "next": "7c6b2bb9bbaa45688a4465d537386b2a8874e309"
        },
        "commit_message": "Bump reactive dependencies. (#1105)\n\nMake reactive contract work with the latest project reactor class hierarchy.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "7c6b2bb9bbaa45688a4465d537386b2a8874e309": {
                "reactive/src/main/java/feign/reactive/ReactiveDelegatingContract.java": [
                    "private boolean feign.reactive.ReactiveDelegatingContract.isReactive(Type type)"
                ]
            },
            "c1d00649f58783ba706b34c685aaa403b8e39dc3": {
                "reactive/src/main/java/feign/reactive/ReactiveDelegatingContract.java": [
                    "private boolean feign.reactive.ReactiveDelegatingContract.isReactive(Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "76a45243e556d96ba0289c634f27d798d15cfde3",
        "previous_commit": "770b579fd66a773288c7ba4552467f92e63719d3",
        "date": 1571704592,
        "releases": {
            "previous": "76a45243e556d96ba0289c634f27d798d15cfde3",
            "next": "76a45243e556d96ba0289c634f27d798d15cfde3"
        },
        "commit_message": "1048 simple illustration - more details in the default feignexception\u2026 (#1095)\n\n* 1048 simple illustration - more details in the default feignexception message\r\n\r\n* 1048 response body abbreviated\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "76a45243e556d96ba0289c634f27d798d15cfde3": {
                "core/src/main/java/feign/FeignException.java": [
                    "public static FeignException feign.FeignException.errorStatus(String methodKey, Response response)"
                ]
            },
            "770b579fd66a773288c7ba4552467f92e63719d3": {
                "core/src/main/java/feign/FeignException.java": [
                    "public static FeignException feign.FeignException.errorStatus(String methodKey, Response response)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "12e61b91c91d3b1a29ae2e8fbf27cd8d854cc4f8",
        "previous_commit": "de85d2ed175866237044e5e145e64290df82149a",
        "date": 1476202783,
        "releases": {
            "previous": "12e61b91c91d3b1a29ae2e8fbf27cd8d854cc4f8",
            "next": "12e61b91c91d3b1a29ae2e8fbf27cd8d854cc4f8"
        },
        "commit_message": "Adds Builder class to JAXBDecoder for disabling namespace-awareness. (#471)\n\nMakes the SAX parser namespace aware by default (as it was prior to #415).\r\n\r\nFixes #456",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "12e61b91c91d3b1a29ae2e8fbf27cd8d854cc4f8": {
                "jaxb/src/main/java/feign/jaxb/JAXBDecoder.java": [
                    "public Object feign.jaxb.JAXBDecoder.decode(Response response, Type type)"
                ]
            },
            "de85d2ed175866237044e5e145e64290df82149a": {
                "jaxb/src/main/java/feign/jaxb/JAXBDecoder.java": [
                    "public Object feign.jaxb.JAXBDecoder.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e70bb4fb7a6aa1611943c79cb5433675a8c914c6",
        "previous_commit": "c2bd91e7139edd7b7216ee80153f7562b7736d9e",
        "date": 1500366043,
        "releases": {
            "previous": "e70bb4fb7a6aa1611943c79cb5433675a8c914c6",
            "next": "e70bb4fb7a6aa1611943c79cb5433675a8c914c6"
        },
        "commit_message": "Add the Content-Type if specified, unless we are setting the body (#569)\n\n* Add the Content-Type if specified, unless we are setting the body\r\n\r\n* Update changelog\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "e70bb4fb7a6aa1611943c79cb5433675a8c914c6": {
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)"
                ]
            },
            "c2bd91e7139edd7b7216ee80153f7562b7736d9e": {
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "static Request feign.okhttp.OkHttpClient.toOkHttpRequest(feign.Request input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3c23f1d8cc688804bc95f47c3b38a7c429d22706",
        "previous_commit": "bb0f2924fe5d13f9aaecda0b1a29dc644a8f4062",
        "date": 1471320373,
        "releases": {
            "previous": "3c23f1d8cc688804bc95f47c3b38a7c429d22706",
            "next": "3c23f1d8cc688804bc95f47c3b38a7c429d22706"
        },
        "commit_message": "Reduce logging overhead (#439)\n\n* Avoid overhead when logging is disabled.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "3c23f1d8cc688804bc95f47c3b38a7c429d22706": {
                "slf4j/src/main/java/feign/slf4j/Slf4jLogger.java": [
                    "protected void feign.slf4j.Slf4jLogger.log(String configKey, String format, Object... args)"
                ]
            },
            "bb0f2924fe5d13f9aaecda0b1a29dc644a8f4062": {
                "slf4j/src/main/java/feign/slf4j/Slf4jLogger.java": [
                    "protected void feign.slf4j.Slf4jLogger.log(String configKey, String format, Object... args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fa30e55d93f585e0a6ae82f9507ba140cd9b9349",
        "previous_commit": "248bb9ab3b54be0ec5285f205f57a7c4e74db49d",
        "date": 1530855208,
        "releases": {
            "previous": "fa30e55d93f585e0a6ae82f9507ba140cd9b9349",
            "next": "fa30e55d93f585e0a6ae82f9507ba140cd9b9349"
        },
        "commit_message": "Copy default config if present before per request timeouts setting in (#734)\n\nApacheHttpClient",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "fa30e55d93f585e0a6ae82f9507ba140cd9b9349": {
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "HttpUriRequest feign.httpclient.ApacheHttpClient.toHttpUriRequest(Request request, Request.Options options)"
                ]
            },
            "248bb9ab3b54be0ec5285f205f57a7c4e74db49d": {
                "httpclient/src/main/java/feign/httpclient/ApacheHttpClient.java": [
                    "HttpUriRequest feign.httpclient.ApacheHttpClient.toHttpUriRequest(Request request, Request.Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2ee3f99624bad5ea6ba8390e5b3295c06734f4a4",
        "previous_commit": "29df3e40bf07327a4110f198c919d1bd6a5a9927",
        "date": 1559310074,
        "releases": {
            "previous": "2ee3f99624bad5ea6ba8390e5b3295c06734f4a4",
            "next": "2ee3f99624bad5ea6ba8390e5b3295c06734f4a4"
        },
        "commit_message": "Fine-grained HTTP error exceptions with client and server errors (#854)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "2ee3f99624bad5ea6ba8390e5b3295c06734f4a4": {
                "core/src/main/java/feign/FeignException.java": [
                    "private static FeignException feign.FeignException.errorStatus(int status, String message, byte[] body)"
                ]
            },
            "29df3e40bf07327a4110f198c919d1bd6a5a9927": {
                "core/src/main/java/feign/FeignException.java": [
                    "private static FeignException feign.FeignException.errorStatus(int status, String message, byte[] body)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "028ae86753324e379dcc13580e8f8ad5c45213a2",
        "previous_commit": "d3af6a9b5e6763660ec0ec4a9a9b72065b6dd70a",
        "date": 1563477211,
        "releases": {
            "previous": "028ae86753324e379dcc13580e8f8ad5c45213a2",
            "next": "028ae86753324e379dcc13580e8f8ad5c45213a2"
        },
        "commit_message": "Avoided url appending with slash when matrix parameter exists (#999)\n\n* Avoided url appending with slash when matrix parameter exists\r\n\r\n* Added UT to cover url appending with slash when matrix parameter exists\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "028ae86753324e379dcc13580e8f8ad5c45213a2": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.uri(String uri, boolean append)"
                ]
            },
            "d3af6a9b5e6763660ec0ec4a9a9b72065b6dd70a": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.uri(String uri, boolean append)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d3eb9cf3bd9f8e2a5711100c91ce33f44a54b0b0",
        "previous_commit": "9e23599df3325c407e752d9fd6fcd302637e9ab9",
        "date": 1577454473,
        "releases": {
            "previous": "d3eb9cf3bd9f8e2a5711100c91ce33f44a54b0b0",
            "next": "d3eb9cf3bd9f8e2a5711100c91ce33f44a54b0b0"
        },
        "commit_message": "Ensure all brackets are decoded in JSON based Body Templates (#1140)\n\n* Ensure all brackets are decoded in JSON based Body Templates\r\n\r\nFixes #1129\r\n\r\nWhen JSON is detected in a Body Template, all start and end tokens\r\nthat may have been pct-encoded are decoded, ensuring that the\r\nexpanded result is valid JSON.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "d3eb9cf3bd9f8e2a5711100c91ce33f44a54b0b0": {
                "core/src/main/java/feign/template/BodyTemplate.java": [
                    "public String feign.template.BodyTemplate.expand(Map<String, ?> variables)"
                ]
            },
            "9e23599df3325c407e752d9fd6fcd302637e9ab9": {
                "core/src/main/java/feign/template/BodyTemplate.java": [
                    "public String feign.template.BodyTemplate.expand(Map<String, ?> variables)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e4743d4e33270ccb2e8a1ba8d284b7436e938a0b",
        "previous_commit": "141560b5f73235e8f44519485be01394e40d84a9",
        "date": 1534091294,
        "releases": {
            "previous": "e4743d4e33270ccb2e8a1ba8d284b7436e938a0b",
            "next": "e4743d4e33270ccb2e8a1ba8d284b7436e938a0b"
        },
        "commit_message": "Allow decoding of parameterizedTypes (generics) Fixes #759 (#758)\n\n* Allow decoding of parameterizedTypes (generics)\r\n\r\n* Allow decoding of parameterizedTypes (generics)\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "e4743d4e33270ccb2e8a1ba8d284b7436e938a0b": {
                "jaxb/src/main/java/feign/jaxb/JAXBDecoder.java": [
                    "public Object feign.jaxb.JAXBDecoder.decode(Response response, Type type)"
                ]
            },
            "141560b5f73235e8f44519485be01394e40d84a9": {
                "jaxb/src/main/java/feign/jaxb/JAXBDecoder.java": [
                    "public Object feign.jaxb.JAXBDecoder.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9e23599df3325c407e752d9fd6fcd302637e9ab9",
        "previous_commit": "cca3887ce0bb2562b0e6d6432731c9f5e946739e",
        "date": 1576184510,
        "releases": {
            "previous": "9e23599df3325c407e752d9fd6fcd302637e9ab9",
            "next": "9e23599df3325c407e752d9fd6fcd302637e9ab9"
        },
        "commit_message": "Force followRedirects on the OkHttpClient when needed (#1130)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "9e23599df3325c407e752d9fd6fcd302637e9ab9": {
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request input, feign.Request.Options options)"
                ]
            },
            "cca3887ce0bb2562b0e6d6432731c9f5e946739e": {
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "public feign.Response feign.okhttp.OkHttpClient.execute(feign.Request input, feign.Request.Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e1ad7fc75d5abb8227e34db85d2f50034eb34c88",
        "previous_commit": "9aa2204f258520dacdc0a9d7d28878649b66a795",
        "date": 1473947773,
        "releases": {
            "previous": "e1ad7fc75d5abb8227e34db85d2f50034eb34c88",
            "next": "e1ad7fc75d5abb8227e34db85d2f50034eb34c88"
        },
        "commit_message": "Remove overriding of retry handler. (#459)\n\n* Remove overriding of retry handler.\r\n\r\nSetting the retry handler to DEFAULT overrides the retry configuration,\r\nmaking it impossible to specify a default configuration. It seems to be\r\nunnecessary since allowing LoadBalancerContext to initialize it in\r\ninitWithNiwsConfig appears to be sufficient for the case where there is\r\nno global configuration too.\r\n\r\n* Match previous retry behaviour, and add tests.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "e1ad7fc75d5abb8227e34db85d2f50034eb34c88": {
                "ribbon/src/main/java/feign/ribbon/LBClientFactory.java": [
                    "public LBClient feign.ribbon.Default.create(String clientName)"
                ]
            },
            "9aa2204f258520dacdc0a9d7d28878649b66a795": {
                "ribbon/src/main/java/feign/ribbon/LBClientFactory.java": [
                    "public LBClient feign.ribbon.Default.create(String clientName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d27d385e1a1673446aa1f6a778a91fbaa2442679",
        "previous_commit": "75721d10b622e18c941d55fe000da61326c54aa8",
        "date": 1653043315,
        "releases": {
            "previous": "d27d385e1a1673446aa1f6a778a91fbaa2442679",
            "next": "d27d385e1a1673446aa1f6a778a91fbaa2442679"
        },
        "commit_message": "fix\uff1aissue 1420 (#1620)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "d27d385e1a1673446aa1f6a778a91fbaa2442679": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ]
            },
            "75721d10b622e18c941d55fe000da61326c54aa8": {
                "core/src/main/java/feign/Contract.java": [
                    "protected MethodMetadata feign.BaseContract.parseAndValidateMetadata(Class<?> targetType, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "dc081d136d4ccf24d47f0b96aed3780b6652b4b3",
        "previous_commit": "37d973c00476c88731edd36733bc3d65763285ac",
        "date": 1587326969,
        "releases": {
            "previous": "dc081d136d4ccf24d47f0b96aed3780b6652b4b3",
            "next": "dc081d136d4ccf24d47f0b96aed3780b6652b4b3"
        },
        "commit_message": "Fix expansion of @RequestParam empty lists (#1200)\n\n* Add list tests to QueryTemplateTest\r\n\r\n* Make expandIterable() return empty string if unresolved\r\n\r\n* Rename new tests to fit existing tests\r\n\r\n* Format code\r\n\r\n* Fix newlines",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "dc081d136d4ccf24d47f0b96aed3780b6652b4b3": {
                "core/src/main/java/feign/template/Expressions.java": [
                    "private String feign.template.Expressions.expandIterable(Iterable<?> values)"
                ]
            },
            "37d973c00476c88731edd36733bc3d65763285ac": {
                "core/src/main/java/feign/template/Expressions.java": [
                    "private String feign.template.Expressions.expandIterable(Iterable<?> values)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0444e23b0d435283517eeeff6c91aaf8dfe4a849",
        "previous_commit": "30ff85fae3e43f70a3a56f0ea96d7b079c0e9e25",
        "date": 1493797891,
        "releases": {
            "previous": "0444e23b0d435283517eeeff6c91aaf8dfe4a849",
            "next": "0444e23b0d435283517eeeff6c91aaf8dfe4a849"
        },
        "commit_message": "Don't leak OkHttp response when response.body() is null (#556)\n\nSigned-off-by: Jonathan Fuerth <jonathan@helpful.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "0444e23b0d435283517eeeff6c91aaf8dfe4a849": {
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "private static feign.Response.Body feign.okhttp.OkHttpClient.toBody(final ResponseBody input)"
                ]
            },
            "30ff85fae3e43f70a3a56f0ea96d7b079c0e9e25": {
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "private static feign.Response.Body feign.okhttp.OkHttpClient.toBody(final ResponseBody input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e8fa87c7893a163d3b3fa36643884a7a349760dd",
        "previous_commit": "3491dcb3bd1ee89ec26cf2046c36bbaba8c529a9",
        "date": 1635368726,
        "releases": {
            "previous": "e8fa87c7893a163d3b3fa36643884a7a349760dd",
            "next": "e8fa87c7893a163d3b3fa36643884a7a349760dd"
        },
        "commit_message": "Provide a way to exclude headers from logs (#1530)\n\n* Provide a way to exclude headers from logs\r\n\r\n* Make header filters optional (nullable), update README\r\n\r\n* Mistyping: sing -> sign\r\n\r\n* New implementation with overriding of filter methods\r\n\r\n* Fix javadocs, update README\r\n\r\n* Update README, fix removed newline",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "e8fa87c7893a163d3b3fa36643884a7a349760dd": {
                "core/src/main/java/feign/Logger.java": [
                    "protected static String feign.Logger.methodTag(String configKey)"
                ]
            },
            "3491dcb3bd1ee89ec26cf2046c36bbaba8c529a9": {
                "core/src/main/java/feign/Logger.java": [
                    "protected static String feign.Logger.methodTag(String configKey)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "381142e6cf76925d874d7b1921eb44086b752e83",
        "previous_commit": "f52158bc24bab0c6c3f858c6b07dd09d4f59dc65",
        "date": 1568156535,
        "releases": {
            "previous": "381142e6cf76925d874d7b1921eb44086b752e83",
            "next": "381142e6cf76925d874d7b1921eb44086b752e83"
        },
        "commit_message": "Move DeclarativeContract to new file (#1068)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "381142e6cf76925d874d7b1921eb44086b752e83": {
                "core/src/main/java/feign/Contract.java": [
                    "public List<MethodMetadata> feign.BaseContract.parseAndValidatateMetadata(Class<?> targetType)"
                ]
            },
            "f52158bc24bab0c6c3f858c6b07dd09d4f59dc65": {
                "core/src/main/java/feign/Contract.java": [
                    "public final List<MethodMetadata> feign.DeclarativeContract.parseAndValidatateMetadata(Class<?> targetType)",
                    "protected final void feign.DeclarativeContract.processAnnotationOnMethod(MethodMetadata data, Annotation annotation, Method method)",
                    "public List<MethodMetadata> feign.BaseContract.parseAndValidatateMetadata(Class<?> targetType)",
                    "protected final boolean feign.DeclarativeContract.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "033de93ccac0db19d31676d49dacc1b570c747e6",
        "previous_commit": "d3eb9cf3bd9f8e2a5711100c91ce33f44a54b0b0",
        "date": 1577458023,
        "releases": {
            "previous": "033de93ccac0db19d31676d49dacc1b570c747e6",
            "next": "033de93ccac0db19d31676d49dacc1b570c747e6"
        },
        "commit_message": "Remove Template Expression naming restrictions (#1139)\n\nFixes #1036\r\n\r\nRelaxed the regular expression used to determine if an expression\r\nis valid to support additional expression variable names.  We will\r\nno longer restrict what an expression name can be.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "033de93ccac0db19d31676d49dacc1b570c747e6": {
                "core/src/main/java/feign/template/Expressions.java": [
                    "public static Expression feign.template.Expressions.create(final String value, final FragmentType type)"
                ]
            },
            "d3eb9cf3bd9f8e2a5711100c91ce33f44a54b0b0": {
                "core/src/main/java/feign/template/Expressions.java": [
                    "public static Expression feign.template.Expressions.create(final String value, final FragmentType type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ba3ecbf5ea29c538db71ac4c9ff6900d2c823c06",
        "previous_commit": "bacdca7d571f4753d75b569dd7e460b91642350a",
        "date": 1710616285,
        "releases": {
            "previous": "ba3ecbf5ea29c538db71ac4c9ff6900d2c823c06",
            "next": "ba3ecbf5ea29c538db71ac4c9ff6900d2c823c06"
        },
        "commit_message": "fix: Response.protocolVersion may cause NPE (#2351)\n\n* fix: set Response.protocolVersion default value\r\n\r\n* refactor: add default protocol version field\r\n\r\n* refactor: change to default protocol version value using builder field.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "ba3ecbf5ea29c538db71ac4c9ff6900d2c823c06": {
                "core/src/main/java/feign/Response.java": [
                    "public Builder feign.Response.protocolVersion(ProtocolVersion protocolVersion)"
                ]
            },
            "bacdca7d571f4753d75b569dd7e460b91642350a": {
                "core/src/main/java/feign/Response.java": [
                    "public Builder feign.Response.protocolVersion(ProtocolVersion protocolVersion)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "468c44cfa1f9fcca6d1584009bbbdb4489cfaa3b",
        "previous_commit": "a3a19fda6eda622bdd6d785f74a3cc36d554670a",
        "date": 1698820595,
        "releases": {
            "previous": "468c44cfa1f9fcca6d1584009bbbdb4489cfaa3b",
            "next": "468c44cfa1f9fcca6d1584009bbbdb4489cfaa3b"
        },
        "commit_message": "support method option and add UT (#1881)\n\n* support method option and add UT\r\n\r\n* format code style\r\n\r\n* add Experimental annotation\r\n\r\n* Added     @Experimental to new method\r\n\r\n---------\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "468c44cfa1f9fcca6d1584009bbbdb4489cfaa3b": {
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Options feign.SynchronousMethodHandler.findOptions(Object[] argv)"
                ]
            },
            "a3a19fda6eda622bdd6d785f74a3cc36d554670a": {
                "core/src/main/java/feign/SynchronousMethodHandler.java": [
                    "Options feign.SynchronousMethodHandler.findOptions(Object[] argv)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3d5f5ecce760d3a8fd6a80501b77272695209612",
        "previous_commit": "7b9706df86670836416c44326da81b27ba35c411",
        "date": 1693940682,
        "releases": {
            "previous": "3d5f5ecce760d3a8fd6a80501b77272695209612",
            "next": "3d5f5ecce760d3a8fd6a80501b77272695209612"
        },
        "commit_message": "Feature/decoder interceptor to response interceptor (#2116)\n\n* Refactor so that ResponseInterceptor intercepts the response (in the same manner that RequestInterceptor does) rather than intercepting the decoding process.\r\n\r\nSigned-off-by: Iain Henderson <Iain.henderson@mac.com>\r\n\r\n* Add a default RedirectionInterceptor as an implementation of ResponseInterceptor and include unit tests for redirection interception, error interception, and void decoding in FeignTest.\r\n\r\n* Update README to include ResponseInterceptor\r\n\r\n* Add copyright notice to RedirectionInterceptor\r\n\r\n* Correct formatting using maven\r\n\r\n* Updates in response to CodeRabbit\r\n\r\n* more CodeRabbitAI suggestions\r\n\r\n* Add unit tests for chained ResponseInterceptor instances\r\n\r\n* fixing formatting\r\n\r\n* formatting and responding to CodeRabbitAI comment\r\n\r\n* Reverting Feign-core pom\r\n\r\n* Cleanup Javadocs in ResponseInterceptor and RedirectionInterceptor\r\n\r\n---------\r\n\r\nSigned-off-by: Iain Henderson <Iain.henderson@mac.com>\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "3d5f5ecce760d3a8fd6a80501b77272695209612": {
                "core/src/main/java/feign/ResponseHandler.java": [
                    "public Object feign.ResponseHandler.handleResponse(String configKey, Response response, Type returnType, long elapsedTime)"
                ]
            },
            "7b9706df86670836416c44326da81b27ba35c411": {
                "core/src/main/java/feign/ResponseHandler.java": [
                    "public Object feign.ResponseHandler.handleResponse(String configKey, Response response, Type returnType, long elapsedTime)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d851bf2fc08f3b60be09ad5b2b176ed1146f52ef",
        "previous_commit": "ecde6bc9bcbf5ddbc3001a8092e311775d766c93",
        "date": 1716461028,
        "releases": {
            "previous": "d851bf2fc08f3b60be09ad5b2b176ed1146f52ef",
            "next": "d851bf2fc08f3b60be09ad5b2b176ed1146f52ef"
        },
        "commit_message": "Using Protocol.name when resolving HTTP protocol for responses (#2428)\n\nThe `toString()` method on `OkHttp3.Protocol` does not return\r\na value that can be used to resolve to enum `ProtocolVersion`.\r\n\r\nThis change extracts the `name` from the Protocol and uses\r\nthat instead of the whole Protocol object.\r\n\r\nFixes #2427\r\n\r\nCo-authored-by: Henrik Stene <k01211@norsk-tipping.no>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "d851bf2fc08f3b60be09ad5b2b176ed1146f52ef": {
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "private static feign.Response feign.okhttp.OkHttpClient.toFeignResponse(Response response, feign.Request request)"
                ]
            },
            "ecde6bc9bcbf5ddbc3001a8092e311775d766c93": {
                "okhttp/src/main/java/feign/okhttp/OkHttpClient.java": [
                    "private static feign.Response feign.okhttp.OkHttpClient.toFeignResponse(Response response, feign.Request request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c2bdad31de57afa1df02a7ff1dedcb99a06b093d",
        "previous_commit": "ef983acead893299ab4b62240764a2ede304676e",
        "date": 1660077957,
        "releases": {
            "previous": "c2bdad31de57afa1df02a7ff1dedcb99a06b093d",
            "next": "c2bdad31de57afa1df02a7ff1dedcb99a06b093d"
        },
        "commit_message": "Pass exception parameter to overloaded method in FeignMetricTagResolver (#1716) (#1720)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "c2bdad31de57afa1df02a7ff1dedcb99a06b093d": {
                "micrometer/src/main/java/feign/micrometer/FeignMetricTagResolver.java": [
                    "public Tags feign.micrometer.FeignMetricTagResolver.tag(MethodMetadata methodMetadata, Target<?> target, Throwable e, Tag... tags)"
                ]
            },
            "ef983acead893299ab4b62240764a2ede304676e": {
                "micrometer/src/main/java/feign/micrometer/FeignMetricTagResolver.java": [
                    "public Tags feign.micrometer.FeignMetricTagResolver.tag(MethodMetadata methodMetadata, Target<?> target, Throwable e, Tag... tags)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d42fcef2bc9f470668e806f9215a09d7ddef0a5a",
        "previous_commit": "7d1cf7ced714b355e981e50be1b0f49eb5f8a787",
        "date": 1663651400,
        "releases": {
            "previous": "d42fcef2bc9f470668e806f9215a09d7ddef0a5a",
            "next": "d42fcef2bc9f470668e806f9215a09d7ddef0a5a"
        },
        "commit_message": "Add methodInfoResolver attribute to Coroutinebuilder (#1762)\n\n* Add methodInfoResolver attribute to Coroutinebuilder\r\n\r\nWork on the [feedback](https://github.com/OpenFeign/feign/pull/1754#discussion_r974700238) of PR #1754\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "d42fcef2bc9f470668e806f9215a09d7ddef0a5a": {
                "kotlin/src/main/java/feign/kotlin/CoroutineFeign.java": [
                    "public CoroutineFeign<C> feign.kotlin.CoroutineFeign<C>.build()"
                ]
            },
            "7d1cf7ced714b355e981e50be1b0f49eb5f8a787": {
                "kotlin/src/main/java/feign/kotlin/CoroutineFeign.java": [
                    "public CoroutineFeign<C> feign.kotlin.CoroutineFeign<C>.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ba009a0bd44b1f35d2d428c172ff48532970908e",
        "previous_commit": "3e089ffba597e411440025cd7a4fab53ae2a7878",
        "date": 1690529548,
        "releases": {
            "previous": "ba009a0bd44b1f35d2d428c172ff48532970908e",
            "next": "ba009a0bd44b1f35d2d428c172ff48532970908e"
        },
        "commit_message": "Fix issuse #1721 Accept-Encoding header is added twice (#2139)\n\n* Fix issuse #1721 Accept-Encoding header is added twice\r\n\r\n* format core code",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "ba009a0bd44b1f35d2d428c172ff48532970908e": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)"
                ]
            },
            "3e089ffba597e411440025cd7a4fab53ae2a7878": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0cb3a0aa5a46b092e975164155b950db3f07e02c",
        "previous_commit": "f43c455ab764a7e6a36963a6759bacf51384406e",
        "date": 1676675355,
        "releases": {
            "previous": "0cb3a0aa5a46b092e975164155b950db3f07e02c",
            "next": "0cb3a0aa5a46b092e975164155b950db3f07e02c"
        },
        "commit_message": "Ignore Jakarta Suspended and Context, Support BeanParam (#1942)\n\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "0cb3a0aa5a46b092e975164155b950db3f07e02c": {
                "jakarta/src/main/java/feign/jaxrs/JakartaContract.java": [
                    "protected void feign.jaxrs.JakartaContract.registerParamAnnotations()"
                ]
            },
            "f43c455ab764a7e6a36963a6759bacf51384406e": {
                "jakarta/src/main/java/feign/jaxrs/JakartaContract.java": [
                    "protected void feign.jaxrs.JakartaContract.registerParamAnnotations()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f350c6564a73fcd2fb0197a23272317758f7d9de",
        "previous_commit": "919339aa0283bfefb2906b998a84c6d90fb54ef0",
        "date": 1470366953,
        "releases": {
            "previous": "f350c6564a73fcd2fb0197a23272317758f7d9de",
            "next": "f350c6564a73fcd2fb0197a23272317758f7d9de"
        },
        "commit_message": "Allows query parameters to match on a substring. Ex q=body:{body} (#428)\n\nThis is to help develop apis like Elasticsearch which nest queries in\r\nquery parameters.\r\n\r\nFixes #424",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "feign-benchmark-8.1.0-SNAPSHOT.jar"
        },
        "method_changes": {
            "f350c6564a73fcd2fb0197a23272317758f7d9de": {
                "core/src/main/java/feign/Contract.java": [
                    "protected boolean feign.Default.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)"
                ]
            },
            "919339aa0283bfefb2906b998a84c6d90fb54ef0": {
                "core/src/main/java/feign/Contract.java": [
                    "protected boolean feign.Default.processAnnotationsOnParameter(MethodMetadata data, Annotation[] annotations, int paramIndex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b46ad267525d9aa4b130d9034a217a9fbda46072",
        "previous_commit": "fc6bf6f356dd15e24c29869a2a575d06d97800bc",
        "date": 1691523312,
        "releases": {
            "previous": "b46ad267525d9aa4b130d9034a217a9fbda46072",
            "next": "b46ad267525d9aa4b130d9034a217a9fbda46072"
        },
        "commit_message": "Fix bug in string split (#2146)\n\n* Fix empty split bug\r\n\r\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>\r\n\r\n* Add unit testing\r\n\r\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>\r\n\r\n* Fix formatting\r\n\r\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>\r\n\r\n---------\r\n\r\nSigned-off-by: Arthur Chan <arthur.chan@adalogics.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "b46ad267525d9aa4b130d9034a217a9fbda46072": {
                "core/src/main/java/feign/template/Expressions.java": [
                    "public static Expression feign.template.Expressions.create(final String value)"
                ]
            },
            "fc6bf6f356dd15e24c29869a2a575d06d97800bc": {
                "core/src/main/java/feign/template/Expressions.java": [
                    "public static Expression feign.template.Expressions.create(final String value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7ce0727e09941d48904a1919ee4a46d764e8ba49",
        "previous_commit": "5e2fdeed0dc72cf7022993ad9877f7bb8e011e14",
        "date": 1525120439,
        "releases": {
            "previous": "7ce0727e09941d48904a1919ee4a46d764e8ba49",
            "next": "7ce0727e09941d48904a1919ee4a46d764e8ba49"
        },
        "commit_message": "Fixes Map Based Parameter Checking for Generic Subclasses (#689)\n\nFixes #665\r\n\r\nWhen verifying that any of th `@*Map` annotations are in fact\r\n`Map` instances, we were assumping that all values are direct\r\nextension of a `Map` with generic type information intact.  When\r\nusing frameworks like Spring, it is possible to have `Map` objects\r\nthat do not expose type information, like `HttpHeaders`, which\r\ndirectly extend from a `Map` with the type information static.\r\n\r\nThis added additional checking to the `checkMapKeys` function\r\nto accomodate for `Map` subclasses without type information.  If\r\nthe map key information cannot be validated, we simply pass it\r\nthrough.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "7ce0727e09941d48904a1919ee4a46d764e8ba49": {
                "core/src/main/java/feign/Contract.java": [
                    "private static void feign.BaseContract.checkMapKeys(String name, Type genericType)"
                ]
            },
            "5e2fdeed0dc72cf7022993ad9877f7bb8e011e14": {
                "core/src/main/java/feign/Contract.java": [
                    "private static void feign.BaseContract.checkMapKeys(String name, Type genericType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5d92174d686d3f1a608bb1d42de25d3f615413dd",
        "previous_commit": "376b0a2962c4c99a613d810a63567b0c9ca34564",
        "date": 1724234716,
        "releases": {
            "previous": "5d92174d686d3f1a608bb1d42de25d3f615413dd",
            "next": "5d92174d686d3f1a608bb1d42de25d3f615413dd"
        },
        "commit_message": "Client.Default - Null pointer exception when receiving an 'empty' response with compression (#2510)\n\n* Client.Default - Null pointer exception when receiving an 'empty' response with compression\r\n\r\n* Apply code style",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "5d92174d686d3f1a608bb1d42de25d3f615413dd": {
                "core/src/main/java/feign/Client.java": [
                    "Response feign.Default.convertResponse(HttpURLConnection connection, Request request)"
                ]
            },
            "376b0a2962c4c99a613d810a63567b0c9ca34564": {
                "core/src/main/java/feign/Client.java": [
                    "Response feign.Default.convertResponse(HttpURLConnection connection, Request request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "697b1c3162255c3e36f0bb73ebab0980dbe56f30",
        "previous_commit": "efe6356def9f063f3f4513841c22269a2a49fd3f",
        "date": 1712050733,
        "releases": {
            "previous": "697b1c3162255c3e36f0bb73ebab0980dbe56f30",
            "next": "697b1c3162255c3e36f0bb73ebab0980dbe56f30"
        },
        "commit_message": "Error in RequestTemplate#uri when there're both query and fragment (#2367)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "697b1c3162255c3e36f0bb73ebab0980dbe56f30": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.uri(String uri, boolean append)"
                ]
            },
            "efe6356def9f063f3f4513841c22269a2a49fd3f": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.uri(String uri, boolean append)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3c7af5710cb438d49f4e8c601d0ad8facdaa3ff6",
        "previous_commit": "2d761cb6a92efc6b4a95e7092c945f47431b76cd",
        "date": 1537794182,
        "releases": {
            "previous": "3c7af5710cb438d49f4e8c601d0ad8facdaa3ff6",
            "next": "3c7af5710cb438d49f4e8c601d0ad8facdaa3ff6"
        },
        "commit_message": "Return null (empty target object) if status code is 204 (#792)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "3c7af5710cb438d49f4e8c601d0ad8facdaa3ff6": {
                "jaxb/src/main/java/feign/jaxb/JAXBDecoder.java": [
                    "public Object feign.jaxb.JAXBDecoder.decode(Response response, Type type)"
                ]
            },
            "2d761cb6a92efc6b4a95e7092c945f47431b76cd": {
                "jaxb/src/main/java/feign/jaxb/JAXBDecoder.java": [
                    "public Object feign.jaxb.JAXBDecoder.decode(Response response, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ce662052d788bb4c35f89c8f67a75cdaf3c68c83",
        "previous_commit": "6b8ed38ef5e8310bc5d93e7b2293d15762312d09",
        "date": 1552058047,
        "releases": {
            "previous": "ce662052d788bb4c35f89c8f67a75cdaf3c68c83",
            "next": "ce662052d788bb4c35f89c8f67a75cdaf3c68c83"
        },
        "commit_message": "Removed Duplicate Expansion (#909)\n\nFixes #904\r\n\r\nQuery Template expanded twice.  This is unnecessary and would have\r\ncaused a performance issue at scale.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "ce662052d788bb4c35f89c8f67a75cdaf3c68c83": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)"
                ]
            },
            "6b8ed38ef5e8310bc5d93e7b2293d15762312d09": {
                "core/src/main/java/feign/RequestTemplate.java": [
                    "public RequestTemplate feign.RequestTemplate.resolve(Map<String, ?> variables)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2a8ee35b482b7cae375ce73dfa7804ab02e6d853",
        "previous_commit": "a24580e99fa7534bbaf15ed4bad502ebd87e3ee2",
        "date": 1561415981,
        "releases": {
            "previous": "2a8ee35b482b7cae375ce73dfa7804ab02e6d853",
            "next": "2a8ee35b482b7cae375ce73dfa7804ab02e6d853"
        },
        "commit_message": "JacksonEncoder avoids intermediate String request body (#989)\n\n* JacksonEncoder avoids intermediate String request body\r\n\r\nSerialize Jackson request object directly to UTF-8 byte array without\r\nintermediate String representation.\r\n\r\nSee https://github.com/FasterXML/jackson-docs/wiki/Presentation:-Jackson-Performance#basics-things-you-should-do-anyway\r\n\r\n* Use Util.UTF_8\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "2a8ee35b482b7cae375ce73dfa7804ab02e6d853": {
                "jackson/src/main/java/feign/jackson/JacksonEncoder.java": [
                    "public void feign.jackson.JacksonEncoder.encode(Object object, Type bodyType, RequestTemplate template)"
                ]
            },
            "a24580e99fa7534bbaf15ed4bad502ebd87e3ee2": {
                "jackson/src/main/java/feign/jackson/JacksonEncoder.java": [
                    "public void feign.jackson.JacksonEncoder.encode(Object object, Type bodyType, RequestTemplate template)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f8d16cf492e5882ba558b6f2c07162a0556e2c00",
        "previous_commit": "bf9d292871c9c56d14353a6f321f7b221b15ba7f",
        "date": 1557773435,
        "releases": {
            "previous": "f8d16cf492e5882ba558b6f2c07162a0556e2c00",
            "next": "f8d16cf492e5882ba558b6f2c07162a0556e2c00"
        },
        "commit_message": "simplify valuesOrEmpty (#938)\n\nthere are 3 lookups in the map, and one should be sufficient",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "f8d16cf492e5882ba558b6f2c07162a0556e2c00": {
                "core/src/main/java/feign/Util.java": [
                    "public static <T> Collection<T> feign.Util.valuesOrEmpty(Map<String, Collection<T>> map, String key)"
                ]
            },
            "bf9d292871c9c56d14353a6f321f7b221b15ba7f": {
                "core/src/main/java/feign/Util.java": [
                    "public static <T> Collection<T> feign.Util.valuesOrEmpty(Map<String, Collection<T>> map, String key)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6c4dfbd39fbb49a6f97c646fdbe8f767054261f2",
        "previous_commit": "10a4eadf4f3312573354672c9f5f9e322a30e5c5",
        "date": 1554724380,
        "releases": {
            "previous": "6c4dfbd39fbb49a6f97c646fdbe8f767054261f2",
            "next": "6c4dfbd39fbb49a6f97c646fdbe8f767054261f2"
        },
        "commit_message": "Removed decoding from Body Template Expansion (#931)\n\nRemoved decoding from Body Template Expansion\r\n\r\nFixes #916\r\n\r\nIn certain cases, a Body Template will contain a JSON payload.  To\r\nsupport this we are asking users to pct-encode the beginning and the\r\nend of the JSON object when providing it to the RequestLine so we don't\r\nreject it as an expression.  Doing this requires that the we decode those\r\nmarkers before submitting the request.\r\n\r\nThis change updates that logic to only decode the first and last characters\r\nonly and not decode the entire payload, since Body values don't require\r\nany type of encoding.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "6c4dfbd39fbb49a6f97c646fdbe8f767054261f2": {
                "core/src/main/java/feign/template/BodyTemplate.java": [
                    "public String feign.template.BodyTemplate.expand(Map<String, ?> variables)"
                ]
            },
            "10a4eadf4f3312573354672c9f5f9e322a30e5c5": {
                "core/src/main/java/feign/template/BodyTemplate.java": [
                    "public String feign.template.BodyTemplate.expand(Map<String, ?> variables)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c8fbb85e0ebf9ae491870f7f87df88430e3a94e8",
        "previous_commit": "ee8d5174d2d7ae19d3f88d7177407cb03b8635c5",
        "date": 1615136154,
        "releases": {
            "previous": "c8fbb85e0ebf9ae491870f7f87df88430e3a94e8",
            "next": "c8fbb85e0ebf9ae491870f7f87df88430e3a94e8"
        },
        "commit_message": "Fix bug for FeignException cannot get the correct charset (#1325) (#1345)\n\n* Fix bug for FeignException cannot get the correct charset (#1325)\r\n\r\n* Add test for (Fix bug for FeignException cannot get the correct charset) (#1325)\r\n\r\n* Add more test for (Fix bug for FeignException cannot get the correct charset) (#1325)\r\n\r\n* Format test for (Fix bug for FeignException cannot get the correct charset) (#1325)\r\n\r\n* Fix bug for FeignException cannot get the correct charset (#1325)\r\n\r\n* Add test for (Fix bug for FeignException cannot get the correct charset) (#1325)\r\n\r\n* Add more test for (Fix bug for FeignException cannot get the correct charset) (#1325)\r\n\r\n* Format test for (Fix bug for FeignException cannot get the correct charset) (#1325)\r\n\r\n* Add test for (Fix bug for FeignException cannot get the correct charset) (#1325)\r\n\r\n* Add more test for (Fix bug for FeignException cannot get the correct charset) (#1325)\r\n\r\n* Format test for (Fix bug for FeignException cannot get the correct charset) (#1325)\r\n\r\n* Correcting License Headers for 2021\r\n\r\nCo-authored-by: Kevin Davis <kdavisk6@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "c8fbb85e0ebf9ae491870f7f87df88430e3a94e8": {
                "core/src/main/java/feign/FeignException.java": [
                    "private static Charset feign.FeignException.getResponseCharset(Map<String, Collection<String>> headers)"
                ]
            },
            "ee8d5174d2d7ae19d3f88d7177407cb03b8635c5": {
                "core/src/main/java/feign/FeignException.java": [
                    "private static Charset feign.FeignException.getResponseCharset(Map<String, Collection<String>> headers)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d9cf6ac872e6f137e27918cc8d9b0f24063f596b",
        "previous_commit": "359e80e614de9c3ce89bbc0d44f195b1a05a4f4d",
        "date": 1717400828,
        "releases": {
            "previous": "d9cf6ac872e6f137e27918cc8d9b0f24063f596b",
            "next": "d9cf6ac872e6f137e27918cc8d9b0f24063f596b"
        },
        "commit_message": "Update Client.java and add unit tests (#2336)\n\n* Update Client.java\r\n\r\nFix Isuue #1721 Content-Length may be added twice\r\n\r\n* format code\r\n\r\n* Add ClientTest unit tests\r\n\r\n* update license header\r\n\r\n* Update comment of ClientTest",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "d9cf6ac872e6f137e27918cc8d9b0f24063f596b": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)"
                ]
            },
            "359e80e614de9c3ce89bbc0d44f195b1a05a4f4d": {
                "core/src/main/java/feign/Client.java": [
                    "HttpURLConnection feign.Default.convertAndSend(Request request, Options options)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6378ae2e83906bb2bcbf773a8090ff83d7e40335",
        "previous_commit": "6f263a3a979cdbf298fbe121159561a0a2fe456a",
        "date": 1665472838,
        "releases": {
            "previous": "6378ae2e83906bb2bcbf773a8090ff83d7e40335",
            "next": "6378ae2e83906bb2bcbf773a8090ff83d7e40335"
        },
        "commit_message": "Remove the unused code from the MethodInfo (#1785)\n\nThe MethodInfo.configKey field is not more used since PR #1757 removing AsyncInvocation\r\n\r\nCo-authored-by: Marvin Froeder <velo@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "6378ae2e83906bb2bcbf773a8090ff83d7e40335": {
                "kotlin/src/main/java/feign/kotlin/KotlinMethodInfo.java": [
                    "static KotlinMethodInfo feign.kotlin.KotlinMethodInfo.createInstance(Class<?> targetType, Method method)"
                ]
            },
            "6f263a3a979cdbf298fbe121159561a0a2fe456a": {
                "kotlin/src/main/java/feign/kotlin/KotlinMethodInfo.java": [
                    "static KotlinMethodInfo feign.kotlin.KotlinMethodInfo.createInstance(Class<?> targetType, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "99bbcba6f1c124f0277b24b4a2304fbcf9917962",
        "previous_commit": "6ad5584f037164aacafc72307e6a8e44a62b3f92",
        "date": 1539198764,
        "releases": {
            "previous": "99bbcba6f1c124f0277b24b4a2304fbcf9917962",
            "next": "99bbcba6f1c124f0277b24b4a2304fbcf9917962"
        },
        "commit_message": "add BeanQueryMapEncoder (#802)\n\n* changed default query encoder result from POJO field to getter property\r\n\r\n* changed default query encoder result from POJO field to getter property\r\n\r\n* reset mistakenly deleted file\r\n\r\n* Create PropertyQueryMapEncoder and extract QueryMapEncoder.Default to FieldQueryMapEncoder\r\n\r\n* rename PropertyQueryMapEncoder to BeanQueryMapEncoder and add README\r\n\r\n* fix README\r\n\r\n* add comments to QueryMapEncoder and remove deprecation on Default\r\n\r\n* rename test name\r\n\r\n* rename package name queryMap to querymap\r\n\r\n* format code\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "99bbcba6f1c124f0277b24b4a2304fbcf9917962": {
                "core/src/main/java/feign/QueryMapEncoder.java": []
            },
            "6ad5584f037164aacafc72307e6a8e44a62b3f92": {
                "core/src/main/java/feign/QueryMapEncoder.java": [
                    "public Map<String, Object> feign.Default.encode(Object object)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    }
]