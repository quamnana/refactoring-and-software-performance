[
    {
        "commit": "4fde8312ca337674dd9981ab5d7d280840e37183",
        "previous_commit": "c208b817c60035bcc07ea9008e6c1d6a066ddc40",
        "date": 1693341016,
        "releases": {
            "previous": "4fde8312ca337674dd9981ab5d7d280840e37183",
            "next": "4fde8312ca337674dd9981ab5d7d280840e37183"
        },
        "commit_message": "Add OpenTelemetry exporter\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "4fde8312ca337674dd9981ab5d7d280840e37183": {
                "integration-tests/it-exporter/it-exporter-httpserver-sample/src/main/java/io/prometheus/metrics/it/exporter/httpserver/HTTPServerSample.java": [
                    "public static void io.prometheus.metrics.it.exporter.httpserver.HTTPServerSample.main(String[] args)"
                ],
                "integration-tests/it-exporter/it-exporter-servlet-jetty-sample/src/main/java/io/prometheus/metrics/it/exporter/servlet/jetty/ExporterServletJettySample.java": [
                    "public static void io.prometheus.metrics.it.exporter.servlet.jetty.ExporterServletJettySample.main(String[] args)"
                ],
                "integration-tests/it-exporter/it-exporter-servlet-tomcat-sample/src/main/java/io/prometheus/metrics/it/exporter/servlet/tomcat/ExporterServletTomcatSample.java": [
                    "public static void io.prometheus.metrics.it.exporter.servlet.tomcat.ExporterServletTomcatSample.main(String[] args)"
                ],
                "prometheus-metrics-config/src/main/java/io/prometheus/metrics/config/PrometheusProperties.java": [
                    "public ExporterHttpServerProperties io.prometheus.metrics.config.PrometheusProperties.getExporterHttpServerProperties()"
                ],
                "prometheus-metrics-config/src/main/java/io/prometheus/metrics/config/PrometheusPropertiesLoader.java": [
                    "public static PrometheusProperties io.prometheus.metrics.config.PrometheusPropertiesLoader.load()"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/Info.java": [
                    "public InfoSnapshot io.prometheus.metrics.core.metrics.Info.collect()"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/MetricWithFixedMetadata.java": [
                    "public B io.prometheus.metrics.core.metrics.MetricWithFixedMetadata.withLabelNames(String... labelNames)"
                ],
                "prometheus-metrics-exposition-formats/src/main/generated/io/prometheus/metrics/expositionformats/generated/com_google_protobuf_3_21_7/Metrics.java": [
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Bucket io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Metric io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.ensurePositiveCountIsMutable()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllBucket( java.lang.Iterable<? extends io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Bucket> values)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Exemplar io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Quantile io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public static void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.registerAllExtensions( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistry registry)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllQuantile( java.lang.Iterable<? extends io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Quantile> values)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Gauge io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.ensurePositiveSpanIsMutable()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Summary io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Bucket io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "private io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.RepeatedFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Bucket, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Bucket.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getBucketFieldBuilder()",
                    "public Gauge io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parsePartialFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Metric io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Quantile io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Metric io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Untyped io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.setZeroCount(long value)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.LabelPair io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Counter io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Quantile io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public boolean io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.hasZeroCountFloat()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearPositiveCount()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Exemplar io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearNegativeDelta()",
                    "public LabelPair io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parsePartialFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public Metric io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parsePartialFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.MetricFamily io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public Summary io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parsePartialFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllNegativeCount( java.lang.Iterable<? extends java.lang.Double> values)",
                    "public BucketSpan io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parsePartialFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.buildPartial0(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Summary result)",
                    "private io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.SingleFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Exemplar, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Exemplar.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.ExemplarOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getExemplarFieldBuilder()",
                    "private io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.RepeatedFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.LabelPair, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.LabelPair.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.LabelPairOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getLabelFieldBuilder()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.LabelPair io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public java.util.List<java.lang.Long> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getNegativeDeltaList()",
                    "public java.lang.String io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getName()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.mergeFrom(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Summary other)",
                    "public io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ByteString io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getHelpBytes()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Gauge io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "private io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.RepeatedFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Metric, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Metric.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.MetricOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getMetricFieldBuilder()",
                    "public Quantile io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parsePartialFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Gauge io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearSchema()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.LabelPair io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllPositiveSpan( java.lang.Iterable<? extends io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan> values)",
                    "private io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.SingleFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Counter, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Counter.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.CounterOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getCounterFieldBuilder()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Metric io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.ensurePositiveDeltaIsMutable()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Summary io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.MetricFamily io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public MetricFamily io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parsePartialFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearZeroThreshold()",
                    "private io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.SingleFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Untyped, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Untyped.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.UntypedOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getUntypedFieldBuilder()",
                    "private io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.SingleFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Summary, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Summary.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.SummaryOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getSummaryFieldBuilder()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Gauge io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Untyped io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.mergeFrom(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Exemplar other)",
                    "public int io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getSerializedSize()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Summary io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Counter io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearZeroCountFloat()",
                    "public Untyped io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parsePartialFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Exemplar io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.maybeForceBuilderInitialization()",
                    "public io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ByteString io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getNameBytes()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Quantile io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public Counter io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parsePartialFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllNegativeDelta( java.lang.Iterable<? extends java.lang.Long> values)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.mergeFrom(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Metric other)",
                    "public io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.Timestamp io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getTimestamp()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Bucket io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Untyped io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "private io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.SingleFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.HistogramOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getHistogramFieldBuilder()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Bucket io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.MetricFamily io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllPositiveCount( java.lang.Iterable<? extends java.lang.Double> values)",
                    "private io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.SingleFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Gauge, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Gauge.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.GaugeOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getGaugeFieldBuilder()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllPositiveDelta( java.lang.Iterable<? extends java.lang.Long> values)",
                    "public Bucket io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parsePartialFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Gauge io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.ensureNegativeSpanIsMutable()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.setZeroThreshold(double value)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.buildPartial0(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Counter result)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.LabelPair io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.MetricFamily io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.LabelPair io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ByteString io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getValueBytes()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Quantile io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Quantile io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllMetric( java.lang.Iterable<? extends io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Metric> values)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.setZeroCountFloat(double value)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Exemplar io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.LabelPair io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Bucket io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.ensureNegativeCountIsMutable()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.mergeFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearNegativeCount()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.setSchema(int value)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.mergeFrom(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.MetricFamily other)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Untyped io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Bucket io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.mergeFrom(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Counter other)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Exemplar io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Untyped io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearNegativeSpan()",
                    "public void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.writeTo(io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedOutputStream output)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Gauge io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllLabel( java.lang.Iterable<? extends io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.LabelPair> values)",
                    "private io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.RepeatedFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Quantile, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Quantile.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.QuantileOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getQuantileFieldBuilder()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearZeroCount()",
                    "public java.lang.String io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getHelp()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Summary io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.buildPartial0(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram result)",
                    "public boolean io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.hasSchema()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.mergeFrom(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram other)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "private io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.RepeatedFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpanOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getPositiveSpanFieldBuilder()",
                    "private io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.SingleFieldBuilderV3<\n io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.Timestamp, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.Timestamp.Builder, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.TimestampOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getTimestampFieldBuilder()",
                    "public java.util.List<java.lang.Long> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getPositiveDeltaList()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Summary io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Untyped io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public java.util.List<java.lang.Double> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getPositiveCountList()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public Histogram io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parsePartialFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public Exemplar io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parsePartialFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public boolean io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.hasZeroThreshold()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllNegativeSpan( java.lang.Iterable<? extends io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan> values)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.MetricFamily io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "private io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.RepeatedFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpanOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getNegativeSpanFieldBuilder()",
                    "public boolean io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.hasZeroCount()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Counter io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Metric io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public java.lang.String io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getValue()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Exemplar io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Counter io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.ensureNegativeDeltaIsMutable()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearPositiveSpan()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.mergeTimestamp(io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.Timestamp value)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.buildPartialRepeatedFields(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram result)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Metric io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.MetricFamily io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public java.util.List<java.lang.Double> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getNegativeCountList()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Summary io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.TimestampOrBuilder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getTimestampOrBuilder()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Counter io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearPositiveDelta()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Counter io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( java.io.InputStream input, io.prometheus.metrics.shaded.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)"
                ]
            },
            "c208b817c60035bcc07ea9008e6c1d6a066ddc40": {
                "integration-tests/it-exporter/it-exporter-httpserver-sample/src/main/java/io/prometheus/metrics/it/exporter/httpserver/HTTPServerSample.java": [
                    "public static void io.prometheus.metrics.it.exporter.httpserver.HTTPServerSample.main(String[] args)"
                ],
                "integration-tests/it-exporter/it-exporter-servlet-jetty-sample/src/main/java/io/prometheus/metrics/it/exporter/servlet/jetty/ExporterServletJettySample.java": [
                    "public static void io.prometheus.metrics.it.exporter.servlet.jetty.ExporterServletJettySample.main(String[] args)"
                ],
                "integration-tests/it-exporter/it-exporter-servlet-tomcat-sample/src/main/java/io/prometheus/metrics/it/exporter/servlet/tomcat/ExporterServletTomcatSample.java": [
                    "public static void io.prometheus.metrics.it.exporter.servlet.tomcat.ExporterServletTomcatSample.main(String[] args)"
                ],
                "prometheus-metrics-config/src/main/java/io/prometheus/metrics/config/PrometheusProperties.java": [
                    "public ExporterHttpServerProperties io.prometheus.metrics.config.PrometheusProperties.getExporterHttpServerProperties()"
                ],
                "prometheus-metrics-config/src/main/java/io/prometheus/metrics/config/PrometheusPropertiesLoader.java": [
                    "public static PrometheusProperties io.prometheus.metrics.config.PrometheusPropertiesLoader.load()"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/Info.java": [
                    "public InfoSnapshot io.prometheus.metrics.core.metrics.Info.collect()"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/MetricWithFixedMetadata.java": [
                    "public B io.prometheus.metrics.core.metrics.MetricWithFixedMetadata.withLabelNames(String... labelNames)"
                ],
                "prometheus-metrics-exposition-formats/src/main/generated/io/prometheus/metrics/expositionformats/generated/com_google_protobuf_3_21_7/Metrics.java": [
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Metric io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.ensurePositiveCountIsMutable()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllBucket( java.lang.Iterable<? extends io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Bucket> values)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Quantile io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllQuantile( java.lang.Iterable<? extends io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Quantile> values)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Gauge io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.ensurePositiveSpanIsMutable()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Bucket io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Metric io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Quantile io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.setZeroCount(long value)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.LabelPair io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.LabelPair io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Counter io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public boolean io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.hasZeroCountFloat()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearPositiveCount()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearNegativeDelta()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.MetricFamily io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllNegativeCount( java.lang.Iterable<? extends java.lang.Double> values)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.buildPartial0(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Summary result)",
                    "public io.prometheus.metrics.com_google_protobuf_3_21_7.TimestampOrBuilder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getTimestampOrBuilder()",
                    "public java.util.List<java.lang.Long> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getNegativeDeltaList()",
                    "public java.lang.String io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getName()",
                    "public io.prometheus.metrics.com_google_protobuf_3_21_7.Timestamp io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getTimestamp()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Counter io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.mergeFrom(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Summary other)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearSchema()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.LabelPair io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllPositiveSpan( java.lang.Iterable<? extends io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan> values)",
                    "public io.prometheus.metrics.com_google_protobuf_3_21_7.ByteString io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getNameBytes()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Untyped io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Summary io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.ensurePositiveDeltaIsMutable()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Summary io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.MetricFamily io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearZeroThreshold()",
                    "private io.prometheus.metrics.com_google_protobuf_3_21_7.RepeatedFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Quantile, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Quantile.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.QuantileOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getQuantileFieldBuilder()",
                    "public Summary io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parsePartialFrom( io.prometheus.metrics.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.mergeFrom(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Exemplar other)",
                    "private io.prometheus.metrics.com_google_protobuf_3_21_7.SingleFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Counter, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Counter.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.CounterOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getCounterFieldBuilder()",
                    "public int io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getSerializedSize()",
                    "private io.prometheus.metrics.com_google_protobuf_3_21_7.RepeatedFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Bucket, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Bucket.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getBucketFieldBuilder()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Summary io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearZeroCountFloat()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Metric io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "private io.prometheus.metrics.com_google_protobuf_3_21_7.SingleFieldBuilderV3<\n io.prometheus.metrics.com_google_protobuf_3_21_7.Timestamp, io.prometheus.metrics.com_google_protobuf_3_21_7.Timestamp.Builder, io.prometheus.metrics.com_google_protobuf_3_21_7.TimestampOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getTimestampFieldBuilder()",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.maybeForceBuilderInitialization()",
                    "private io.prometheus.metrics.com_google_protobuf_3_21_7.RepeatedFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Metric, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Metric.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.MetricOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getMetricFieldBuilder()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllNegativeDelta( java.lang.Iterable<? extends java.lang.Long> values)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.mergeFrom(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Metric other)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Untyped io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.MetricFamily io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( java.io.InputStream input, io.prometheus.metrics.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllPositiveCount( java.lang.Iterable<? extends java.lang.Double> values)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllPositiveDelta( java.lang.Iterable<? extends java.lang.Long> values)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.ensureNegativeSpanIsMutable()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.setZeroThreshold(double value)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.buildPartial0(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Counter result)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.mergeTimestamp(io.prometheus.metrics.com_google_protobuf_3_21_7.Timestamp value)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Quantile io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllMetric( java.lang.Iterable<? extends io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Metric> values)",
                    "private io.prometheus.metrics.com_google_protobuf_3_21_7.SingleFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.HistogramOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getHistogramFieldBuilder()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.setZeroCountFloat(double value)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.mergeFrom( io.prometheus.metrics.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Exemplar io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Exemplar io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.ensureNegativeCountIsMutable()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.mergeFrom(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.MetricFamily other)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearNegativeCount()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.setSchema(int value)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Untyped io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "private io.prometheus.metrics.com_google_protobuf_3_21_7.SingleFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Summary, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Summary.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.SummaryOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getSummaryFieldBuilder()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Bucket io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.mergeFrom(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Counter other)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Exemplar io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Bucket io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "private io.prometheus.metrics.com_google_protobuf_3_21_7.SingleFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Exemplar, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Exemplar.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.ExemplarOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getExemplarFieldBuilder()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearNegativeSpan()",
                    "private io.prometheus.metrics.com_google_protobuf_3_21_7.RepeatedFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpanOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getPositiveSpanFieldBuilder()",
                    "private io.prometheus.metrics.com_google_protobuf_3_21_7.RepeatedFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.LabelPair, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.LabelPair.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.LabelPairOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getLabelFieldBuilder()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Gauge io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Gauge io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllLabel( java.lang.Iterable<? extends io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.LabelPair> values)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearZeroCount()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Exemplar io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.com_google_protobuf_3_21_7.CodedInputStream input, io.prometheus.metrics.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public java.lang.String io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getHelp()",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.buildPartial0(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram result)",
                    "public boolean io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.hasSchema()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.mergeFrom(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram other)",
                    "private io.prometheus.metrics.com_google_protobuf_3_21_7.SingleFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Untyped, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Untyped.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.UntypedOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getUntypedFieldBuilder()",
                    "public java.util.List<java.lang.Long> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getPositiveDeltaList()",
                    "public java.util.List<java.lang.Double> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getPositiveCountList()",
                    "public boolean io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.hasZeroThreshold()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.addAllNegativeSpan( java.lang.Iterable<? extends io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan> values)",
                    "private io.prometheus.metrics.com_google_protobuf_3_21_7.RepeatedFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpanOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getNegativeSpanFieldBuilder()",
                    "private io.prometheus.metrics.com_google_protobuf_3_21_7.SingleFieldBuilderV3<\n io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Gauge, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Gauge.Builder, io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.GaugeOrBuilder> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getGaugeFieldBuilder()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom( java.io.InputStream input, io.prometheus.metrics.com_google_protobuf_3_21_7.ExtensionRegistryLite extensionRegistry)",
                    "public boolean io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.hasZeroCount()",
                    "public void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.writeTo(io.prometheus.metrics.com_google_protobuf_3_21_7.CodedOutputStream output)",
                    "public java.lang.String io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getValue()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Counter io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public static void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.registerAllExtensions( io.prometheus.metrics.com_google_protobuf_3_21_7.ExtensionRegistry registry)",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.ensureNegativeDeltaIsMutable()",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearPositiveSpan()",
                    "public io.prometheus.metrics.com_google_protobuf_3_21_7.ByteString io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getValueBytes()",
                    "private void io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.buildPartialRepeatedFields(io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram result)",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.MetricFamily io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseFrom( io.prometheus.metrics.com_google_protobuf_3_21_7.CodedInputStream input)",
                    "public java.util.List<java.lang.Double> io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getNegativeCountList()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.Histogram io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)",
                    "public Builder io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.clearPositiveDelta()",
                    "public io.prometheus.metrics.com_google_protobuf_3_21_7.ByteString io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.getHelpBytes()",
                    "public static io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.BucketSpan io.prometheus.metrics.expositionformats.generated.com_google_protobuf_3_21_7.Metrics.parseDelimitedFrom(java.io.InputStream input)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f1cc00a21dc458d2704c4775e88704df895ca875",
        "previous_commit": "a09edde39153f1fe0fb455b72acf21a7bfca212c",
        "date": 1694720993,
        "releases": {
            "previous": "f1cc00a21dc458d2704c4775e88704df895ca875",
            "next": "f1cc00a21dc458d2704c4775e88704df895ca875"
        },
        "commit_message": "Refactor Builders to use Spring/Lombok conventions\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "f1cc00a21dc458d2704c4775e88704df895ca875": {
                "examples/example-exemplars-tail-sampling/example-greeting-service/src/main/java/io/prometheus/metrics/examples/otel_exemplars/greeting/GreetingServlet.java": [
                    "protected void io.prometheus.metrics.examples.otel_exemplars.greeting.GreetingServlet.doGet(HttpServletRequest req, HttpServletResponse resp)"
                ],
                "examples/example-exemplars-tail-sampling/example-greeting-service/src/main/java/io/prometheus/metrics/examples/otel_exemplars/greeting/Main.java": [
                    "public static void io.prometheus.metrics.examples.otel_exemplars.greeting.Main.main(String[] args)"
                ],
                "examples/example-exemplars-tail-sampling/example-hello-world-app/src/main/java/io/prometheus/metrics/examples/otel_exemplars/app/HelloWorldServlet.java": [
                    "protected void io.prometheus.metrics.examples.otel_exemplars.app.HelloWorldServlet.doGet(HttpServletRequest req, HttpServletResponse resp)"
                ],
                "examples/example-exemplars-tail-sampling/example-hello-world-app/src/main/java/io/prometheus/metrics/examples/otel_exemplars/app/Main.java": [
                    "public static void io.prometheus.metrics.examples.otel_exemplars.app.Main.main(String[] args)"
                ],
                "examples/example-exporter-httpserver/src/main/java/io/prometheus/metrics/examples/httpserver/Main.java": [
                    "public static void io.prometheus.metrics.examples.httpserver.Main.main(String[] args)"
                ],
                "examples/example-exporter-opentelemetry/src/main/java/io/prometheus/metrics/examples/opentelemetry/Main.java": [
                    "public static void io.prometheus.metrics.examples.opentelemetry.Main.main(String[] args)"
                ],
                "examples/example-exporter-servlet-tomcat/src/main/java/io/prometheus/metrics/examples/tomcat_servlet/HelloWorldServlet.java": [
                    "protected void io.prometheus.metrics.examples.tomcat_servlet.HelloWorldServlet.doGet(HttpServletRequest req, HttpServletResponse resp)"
                ],
                "examples/example-exporter-servlet-tomcat/src/main/java/io/prometheus/metrics/examples/tomcat_servlet/Main.java": [
                    "public static void io.prometheus.metrics.examples.tomcat_servlet.Main.main(String[] args)"
                ],
                "examples/example-simpleclient-bridge/src/main/java/io/prometheus/metrics/examples/simpleclient/Main.java": [
                    "public static void io.prometheus.metrics.examples.simpleclient.Main.main(String[] args)"
                ],
                "integration-tests/it-exporter/it-exporter-httpserver-sample/src/main/java/io/prometheus/metrics/it/exporter/httpserver/HTTPServerSample.java": [
                    "public static void io.prometheus.metrics.it.exporter.httpserver.HTTPServerSample.main(String[] args)"
                ],
                "integration-tests/it-exporter/it-exporter-servlet-jetty-sample/src/main/java/io/prometheus/metrics/it/exporter/servlet/jetty/ExporterServletJettySample.java": [
                    "public static void io.prometheus.metrics.it.exporter.servlet.jetty.ExporterServletJettySample.main(String[] args)"
                ],
                "integration-tests/it-exporter/it-exporter-servlet-tomcat-sample/src/main/java/io/prometheus/metrics/it/exporter/servlet/tomcat/ExporterServletTomcatSample.java": [
                    "public static void io.prometheus.metrics.it.exporter.servlet.tomcat.ExporterServletTomcatSample.main(String[] args)"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/exemplars/ExemplarSampler.java": [
                    "private long io.prometheus.metrics.core.exemplars.ExemplarSampler.updateCustomExemplar(int index, double value, Labels labels, long now)",
                    "private long io.prometheus.metrics.core.exemplars.ExemplarSampler.updateExemplar(int index, double value, long now)"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/Histogram.java": [
                    "public MetricsProperties io.prometheus.metrics.core.metrics.Builder.getDefaultProperties()",
                    "protected MetricsProperties io.prometheus.metrics.core.metrics.Builder.toProperties()"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/MetricWithFixedMetadata.java": [
                    "public B io.prometheus.metrics.core.metrics.MetricWithFixedMetadata.constLabels(Labels constLabels)"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/Summary.java": [
                    "protected MetricsProperties io.prometheus.metrics.core.metrics.Summary.toProperties()",
                    "public MetricsProperties io.prometheus.metrics.core.metrics.Summary.getDefaultProperties()"
                ],
                "prometheus-metrics-exporter-common/src/main/java/io/prometheus/metrics/exporter/common/PrometheusScrapeHandler.java": [
                    "private Predicate<String> io.prometheus.metrics.exporter.common.PrometheusScrapeHandler.makeNameFilter(String[] includedNames)",
                    "private Predicate<String> io.prometheus.metrics.exporter.common.PrometheusScrapeHandler.makeNameFilter(ExporterFilterProperties props)"
                ],
                "prometheus-metrics-exporter-opentelemetry/src/main/java/io/prometheus/metrics/exporter/opentelemetry/PrometheusMetricProducer.java": [
                    "private InstrumentationScopeInfo io.prometheus.metrics.exporter.opentelemetry.PrometheusMetricProducer.instrumentationScopeFromOTelScopeInfo(MetricSnapshots snapshots)",
                    "private Resource io.prometheus.metrics.exporter.opentelemetry.PrometheusMetricProducer.resourceFromTargetInfo(MetricSnapshots snapshots)"
                ],
                "prometheus-metrics-exporter-opentelemetry/src/main/java/io/prometheus/metrics/exporter/opentelemetry/otelmodel/MetricDataFactory.java": [
                    "public MetricData io.prometheus.metrics.exporter.opentelemetry.otelmodel.MetricDataFactory.create(HistogramSnapshot snapshot)"
                ],
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/OpenMetricsTextFormatWriter.java": [
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeHistogram(OutputStreamWriter writer, HistogramSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeStateSet(OutputStreamWriter writer, StateSetSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeCounter(OutputStreamWriter writer, CounterSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeUnknown(OutputStreamWriter writer, UnknownSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeInfo(OutputStreamWriter writer, InfoSnapshot snapshot)",
                    "public void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.write(OutputStream out, MetricSnapshots metricSnapshots)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeGauge(OutputStreamWriter writer, GaugeSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeSummary(OutputStreamWriter writer, SummarySnapshot snapshot)"
                ],
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/PrometheusProtobufWriter.java": [
                    "public String io.prometheus.metrics.expositionformats.PrometheusProtobufWriter.toDebugString(MetricSnapshots metricSnapshots)",
                    "public void io.prometheus.metrics.expositionformats.PrometheusProtobufWriter.write(OutputStream out, MetricSnapshots metricSnapshots)",
                    "public Metrics.MetricFamily io.prometheus.metrics.expositionformats.PrometheusProtobufWriter.convert(MetricSnapshot snapshot)"
                ],
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/PrometheusTextFormatWriter.java": [
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeGauge(OutputStreamWriter writer, GaugeSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeHistogram(OutputStreamWriter writer, HistogramSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeUnknown(OutputStreamWriter writer, UnknownSnapshot snapshot)",
                    "public void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.write(OutputStream out, MetricSnapshots metricSnapshots)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeCounter(OutputStreamWriter writer, CounterSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeInfo(OutputStreamWriter writer, InfoSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeGaugeCountSum(OutputStreamWriter writer, HistogramSnapshot snapshot, MetricMetadata metadata)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeStateSet(OutputStreamWriter writer, StateSetSnapshot snapshot)",
                    "public void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeCreated(OutputStreamWriter writer, MetricSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeSummary(OutputStreamWriter writer, SummarySnapshot snapshot)"
                ],
                "prometheus-metrics-instrumentation-jvm/src/main/java/io/prometheus/metrics/instrumentation/jvm/JvmMemoryPoolAllocationMetrics.java": [
                    "void io.prometheus.metrics.instrumentation.jvm.JvmMemoryPoolAllocationMetrics.handleMemoryPool(String memoryPool, long before, long after)"
                ],
                "prometheus-metrics-instrumentation-jvm/src/main/java/io/prometheus/metrics/instrumentation/jvm/JvmMetrics.java": [
                    "public void io.prometheus.metrics.instrumentation.jvm.JvmMetrics.register(PrometheusRegistry registry)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/registry/PrometheusRegistry.java": [
                    "public MetricSnapshots io.prometheus.metrics.model.registry.PrometheusRegistry.scrape()",
                    "public MetricSnapshots io.prometheus.metrics.model.registry.PrometheusRegistry.scrape(Predicate<String> includedNames)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/MetricSnapshot.java": [
                    "protected void io.prometheus.metrics.model.snapshots.MetricSnapshot.validateLabels()"
                ],
                "prometheus-metrics-simpleclient-bridge/src/main/java/io/prometheus/metrics/simpleclient/bridge/SimpleclientCollector.java": [
                    "private Labels io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.labelsWithout(Collector.MetricFamilySamples.Sample sample, String excludedLabelName)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertInfo(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertUnknown(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertSummary(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertStateSet(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertHistogram(Collector.MetricFamilySamples samples, boolean isGaugeHistogram)",
                    "private ClassicHistogramBuckets io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.makeBuckets(Map<Double, Long> cumulativeBuckets)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertCounter(Collector.MetricFamilySamples samples)",
                    "private Exemplar io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertExemplar(io.prometheus.client.exemplars.Exemplar exemplar)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertGauge(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshots io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convert(Enumeration<Collector.MetricFamilySamples> samples)"
                ]
            },
            "a09edde39153f1fe0fb455b72acf21a7bfca212c": {
                "examples/example-exemplars-tail-sampling/example-greeting-service/src/main/java/io/prometheus/metrics/examples/otel_exemplars/greeting/GreetingServlet.java": [
                    "protected void io.prometheus.metrics.examples.otel_exemplars.greeting.GreetingServlet.doGet(HttpServletRequest req, HttpServletResponse resp)"
                ],
                "examples/example-exemplars-tail-sampling/example-greeting-service/src/main/java/io/prometheus/metrics/examples/otel_exemplars/greeting/Main.java": [
                    "public static void io.prometheus.metrics.examples.otel_exemplars.greeting.Main.main(String[] args)"
                ],
                "examples/example-exemplars-tail-sampling/example-hello-world-app/src/main/java/io/prometheus/metrics/examples/otel_exemplars/app/HelloWorldServlet.java": [
                    "protected void io.prometheus.metrics.examples.otel_exemplars.app.HelloWorldServlet.doGet(HttpServletRequest req, HttpServletResponse resp)"
                ],
                "examples/example-exemplars-tail-sampling/example-hello-world-app/src/main/java/io/prometheus/metrics/examples/otel_exemplars/app/Main.java": [
                    "public static void io.prometheus.metrics.examples.otel_exemplars.app.Main.main(String[] args)"
                ],
                "examples/example-exporter-httpserver/src/main/java/io/prometheus/metrics/examples/httpserver/Main.java": [
                    "public static void io.prometheus.metrics.examples.httpserver.Main.main(String[] args)"
                ],
                "examples/example-exporter-opentelemetry/src/main/java/io/prometheus/metrics/examples/opentelemetry/Main.java": [
                    "public static void io.prometheus.metrics.examples.opentelemetry.Main.main(String[] args)"
                ],
                "examples/example-exporter-servlet-tomcat/src/main/java/io/prometheus/metrics/examples/tomcat_servlet/HelloWorldServlet.java": [
                    "protected void io.prometheus.metrics.examples.tomcat_servlet.HelloWorldServlet.doGet(HttpServletRequest req, HttpServletResponse resp)"
                ],
                "examples/example-exporter-servlet-tomcat/src/main/java/io/prometheus/metrics/examples/tomcat_servlet/Main.java": [
                    "public static void io.prometheus.metrics.examples.tomcat_servlet.Main.main(String[] args)"
                ],
                "examples/example-simpleclient-bridge/src/main/java/io/prometheus/metrics/examples/simpleclient/Main.java": [
                    "public static void io.prometheus.metrics.examples.simpleclient.Main.main(String[] args)"
                ],
                "integration-tests/it-exporter/it-exporter-httpserver-sample/src/main/java/io/prometheus/metrics/it/exporter/httpserver/HTTPServerSample.java": [
                    "public static void io.prometheus.metrics.it.exporter.httpserver.HTTPServerSample.main(String[] args)"
                ],
                "integration-tests/it-exporter/it-exporter-servlet-jetty-sample/src/main/java/io/prometheus/metrics/it/exporter/servlet/jetty/ExporterServletJettySample.java": [
                    "public static void io.prometheus.metrics.it.exporter.servlet.jetty.ExporterServletJettySample.main(String[] args)"
                ],
                "integration-tests/it-exporter/it-exporter-servlet-tomcat-sample/src/main/java/io/prometheus/metrics/it/exporter/servlet/tomcat/ExporterServletTomcatSample.java": [
                    "public static void io.prometheus.metrics.it.exporter.servlet.tomcat.ExporterServletTomcatSample.main(String[] args)"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/exemplars/ExemplarSampler.java": [
                    "private long io.prometheus.metrics.core.exemplars.ExemplarSampler.updateCustomExemplar(int index, double value, Labels labels, long now)",
                    "private long io.prometheus.metrics.core.exemplars.ExemplarSampler.updateExemplar(int index, double value, long now)"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/Histogram.java": [
                    "public MetricsProperties io.prometheus.metrics.core.metrics.Builder.getDefaultProperties()",
                    "protected MetricsProperties io.prometheus.metrics.core.metrics.Builder.toProperties()"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/MetricWithFixedMetadata.java": [
                    "public B io.prometheus.metrics.core.metrics.MetricWithFixedMetadata.withConstLabels(Labels constLabels)"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/Summary.java": [
                    "protected MetricsProperties io.prometheus.metrics.core.metrics.Summary.toProperties()",
                    "public MetricsProperties io.prometheus.metrics.core.metrics.Summary.getDefaultProperties()"
                ],
                "prometheus-metrics-exporter-common/src/main/java/io/prometheus/metrics/exporter/common/PrometheusScrapeHandler.java": [
                    "private Predicate<String> io.prometheus.metrics.exporter.common.PrometheusScrapeHandler.makeNameFilter(String[] includedNames)",
                    "private Predicate<String> io.prometheus.metrics.exporter.common.PrometheusScrapeHandler.makeNameFilter(ExporterFilterProperties props)"
                ],
                "prometheus-metrics-exporter-opentelemetry/src/main/java/io/prometheus/metrics/exporter/opentelemetry/PrometheusMetricProducer.java": [
                    "private InstrumentationScopeInfo io.prometheus.metrics.exporter.opentelemetry.PrometheusMetricProducer.instrumentationScopeFromOTelScopeInfo(MetricSnapshots snapshots)",
                    "private Resource io.prometheus.metrics.exporter.opentelemetry.PrometheusMetricProducer.resourceFromTargetInfo(MetricSnapshots snapshots)"
                ],
                "prometheus-metrics-exporter-opentelemetry/src/main/java/io/prometheus/metrics/exporter/opentelemetry/otelmodel/MetricDataFactory.java": [
                    "public MetricData io.prometheus.metrics.exporter.opentelemetry.otelmodel.MetricDataFactory.create(HistogramSnapshot snapshot)"
                ],
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/OpenMetricsTextFormatWriter.java": [
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeHistogram(OutputStreamWriter writer, HistogramSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeStateSet(OutputStreamWriter writer, StateSetSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeCounter(OutputStreamWriter writer, CounterSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeUnknown(OutputStreamWriter writer, UnknownSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeInfo(OutputStreamWriter writer, InfoSnapshot snapshot)",
                    "public void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.write(OutputStream out, MetricSnapshots metricSnapshots)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeGauge(OutputStreamWriter writer, GaugeSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeSummary(OutputStreamWriter writer, SummarySnapshot snapshot)"
                ],
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/PrometheusProtobufWriter.java": [
                    "public String io.prometheus.metrics.expositionformats.PrometheusProtobufWriter.toDebugString(MetricSnapshots metricSnapshots)",
                    "public void io.prometheus.metrics.expositionformats.PrometheusProtobufWriter.write(OutputStream out, MetricSnapshots metricSnapshots)",
                    "public Metrics.MetricFamily io.prometheus.metrics.expositionformats.PrometheusProtobufWriter.convert(MetricSnapshot snapshot)"
                ],
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/PrometheusTextFormatWriter.java": [
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeGauge(OutputStreamWriter writer, GaugeSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeHistogram(OutputStreamWriter writer, HistogramSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeUnknown(OutputStreamWriter writer, UnknownSnapshot snapshot)",
                    "public void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.write(OutputStream out, MetricSnapshots metricSnapshots)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeCounter(OutputStreamWriter writer, CounterSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeInfo(OutputStreamWriter writer, InfoSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeGaugeCountSum(OutputStreamWriter writer, HistogramSnapshot snapshot, MetricMetadata metadata)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeStateSet(OutputStreamWriter writer, StateSetSnapshot snapshot)",
                    "public void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeCreated(OutputStreamWriter writer, MetricSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeSummary(OutputStreamWriter writer, SummarySnapshot snapshot)"
                ],
                "prometheus-metrics-instrumentation-jvm/src/main/java/io/prometheus/metrics/instrumentation/jvm/JvmMemoryPoolAllocationMetrics.java": [
                    "void io.prometheus.metrics.instrumentation.jvm.JvmMemoryPoolAllocationMetrics.handleMemoryPool(String memoryPool, long before, long after)"
                ],
                "prometheus-metrics-instrumentation-jvm/src/main/java/io/prometheus/metrics/instrumentation/jvm/JvmMetrics.java": [
                    "public void io.prometheus.metrics.instrumentation.jvm.JvmMetrics.register(PrometheusRegistry registry)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/registry/PrometheusRegistry.java": [
                    "public MetricSnapshots io.prometheus.metrics.model.registry.PrometheusRegistry.scrape()",
                    "public MetricSnapshots io.prometheus.metrics.model.registry.PrometheusRegistry.scrape(Predicate<String> includedNames)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/MetricSnapshot.java": [
                    "protected void io.prometheus.metrics.model.snapshots.MetricSnapshot.validateLabels()"
                ],
                "prometheus-metrics-simpleclient-bridge/src/main/java/io/prometheus/metrics/simpleclient/bridge/SimpleclientCollector.java": [
                    "private Labels io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.labelsWithout(Collector.MetricFamilySamples.Sample sample, String excludedLabelName)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertInfo(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertUnknown(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertSummary(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertStateSet(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertHistogram(Collector.MetricFamilySamples samples, boolean isGaugeHistogram)",
                    "private ClassicHistogramBuckets io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.makeBuckets(Map<Double, Long> cumulativeBuckets)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertCounter(Collector.MetricFamilySamples samples)",
                    "private Exemplar io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertExemplar(io.prometheus.client.exemplars.Exemplar exemplar)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertGauge(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshots io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convert(Enumeration<Collector.MetricFamilySamples> samples)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1a955b1d99b3a31f2c48db146832bf4466f9e12a",
        "previous_commit": "0d232b44723a5275f9cdee4eae99a8c35ca923d3",
        "date": 1693340734,
        "releases": {
            "previous": "1a955b1d99b3a31f2c48db146832bf4466f9e12a",
            "next": "1a955b1d99b3a31f2c48db146832bf4466f9e12a"
        },
        "commit_message": "Allow dots in metric names and label names\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "1a955b1d99b3a31f2c48db146832bf4466f9e12a": {
                "prometheus-metrics-config/src/main/java/io/prometheus/metrics/config/PrometheusProperties.java": [
                    "public MetricsProperties io.prometheus.metrics.config.PrometheusProperties.getMetricProperties(String metricName)"
                ],
                "prometheus-metrics-config/src/main/java/io/prometheus/metrics/config/PrometheusPropertiesLoader.java": [
                    "private static Map<String, MetricsProperties> io.prometheus.metrics.config.PrometheusPropertiesLoader.loadMetricsConfigs(Map<Object, Object> properties)"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/Counter.java": [
                    "public Builder io.prometheus.metrics.core.metrics.Counter.withName(String name)"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/CounterWithCallback.java": [
                    "public Builder io.prometheus.metrics.core.metrics.CounterWithCallback.withName(String name)"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/Info.java": [
                    "public Builder io.prometheus.metrics.core.metrics.Info.withName(String name)",
                    "public Info io.prometheus.metrics.core.metrics.Info.build()"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/MetricWithFixedMetadata.java": [
                    "public B io.prometheus.metrics.core.metrics.MetricWithFixedMetadata.withName(String name)",
                    "public B io.prometheus.metrics.core.metrics.MetricWithFixedMetadata.withLabelNames(String... labelNames)",
                    "private String io.prometheus.metrics.core.metrics.MetricWithFixedMetadata.makeName(String name, Unit unit)"
                ],
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/OpenMetricsTextFormatWriter.java": [
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeStateSet(OutputStreamWriter writer, StateSetSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeCounter(OutputStreamWriter writer, CounterSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeCreated(OutputStreamWriter writer, MetricMetadata metadata, DataPointSnapshot data)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeUnknown(OutputStreamWriter writer, UnknownSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeInfo(OutputStreamWriter writer, InfoSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeClassicHistogramBuckets(OutputStreamWriter writer, MetricMetadata metadata, String countSuffix, String sumSuffix, List<HistogramSnapshot.HistogramDataPointSnapshot> dataList)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeCountAndSum(OutputStreamWriter writer, MetricMetadata metadata, DistributionDataPointSnapshot data, String countSuffix, String sumSuffix, Exemplars exemplars)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeMetadata(OutputStreamWriter writer, String typeName, MetricMetadata metadata)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeGauge(OutputStreamWriter writer, GaugeSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeSummary(OutputStreamWriter writer, SummarySnapshot snapshot)"
                ],
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/PrometheusProtobufWriter.java": [
                    "private void io.prometheus.metrics.expositionformats.PrometheusProtobufWriter.setMetadataUnlessEmpty(Metrics.MetricFamily.Builder builder, MetricMetadata metadata, String nameSuffix, Metrics.MetricType type)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusProtobufWriter.addLabels(Metrics.Exemplar.Builder metricBuilder, Labels labels)",
                    "public Metrics.MetricFamily io.prometheus.metrics.expositionformats.PrometheusProtobufWriter.convert(MetricSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusProtobufWriter.addLabels(Metrics.Metric.Builder metricBuilder, Labels labels)"
                ],
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/PrometheusTextFormatWriter.java": [
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeGauge(OutputStreamWriter writer, GaugeSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeHistogram(OutputStreamWriter writer, HistogramSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeUnknown(OutputStreamWriter writer, UnknownSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeCounter(OutputStreamWriter writer, CounterSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeInfo(OutputStreamWriter writer, InfoSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeGaugeCountSum(OutputStreamWriter writer, HistogramSnapshot snapshot, MetricMetadata metadata)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeStateSet(OutputStreamWriter writer, StateSetSnapshot snapshot)",
                    "public void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeCreated(OutputStreamWriter writer, MetricSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeMetadata(OutputStreamWriter writer, String suffix, String typeString, MetricMetadata metadata)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeSummary(OutputStreamWriter writer, SummarySnapshot snapshot)"
                ],
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/TextFormatUtil.java": [
                    "static void io.prometheus.metrics.expositionformats.TextFormatUtil.writeLabels(OutputStreamWriter writer, Labels labels, String additionalLabelName, double additionalLabelValue)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/registry/PrometheusRegistry.java": [
                    "public MetricSnapshots io.prometheus.metrics.model.registry.PrometheusRegistry.scrape()",
                    "public void io.prometheus.metrics.model.registry.PrometheusRegistry.unregister(MultiCollector collector)",
                    "public void io.prometheus.metrics.model.registry.PrometheusRegistry.register(Collector collector)",
                    "public void io.prometheus.metrics.model.registry.PrometheusRegistry.register(MultiCollector collector)",
                    "public void io.prometheus.metrics.model.registry.PrometheusRegistry.unregister(Collector collector)",
                    "public MetricSnapshots io.prometheus.metrics.model.registry.PrometheusRegistry.scrape(Predicate<String> includedNames)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/Labels.java": [
                    "public boolean io.prometheus.metrics.model.snapshots.Labels.hasSameNames(Labels other)",
                    "public int io.prometheus.metrics.model.snapshots.Labels.compareTo(Labels other)",
                    "public static Labels io.prometheus.metrics.model.snapshots.Labels.of(String... keyValuePairs)",
                    "public Labels io.prometheus.metrics.model.snapshots.Labels.merge(String[] names, String[] values)",
                    "public static Labels io.prometheus.metrics.model.snapshots.Labels.of(List<String> names, List<String> values)",
                    "private static void io.prometheus.metrics.model.snapshots.Labels.validateNames(String[] names, String[] prometheusNames)",
                    "public Labels io.prometheus.metrics.model.snapshots.Labels.merge(Labels other)",
                    "public boolean io.prometheus.metrics.model.snapshots.Labels.contains(String labelName)",
                    "public int io.prometheus.metrics.model.snapshots.Labels.hashCode()",
                    "public boolean io.prometheus.metrics.model.snapshots.Labels.equals(Object o)",
                    "public static Labels io.prometheus.metrics.model.snapshots.Labels.of(String[] names, String[] values)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/MetricMetadata.java": [
                    "private void io.prometheus.metrics.model.snapshots.MetricMetadata.validate()"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/MetricSnapshots.java": [
                    "public boolean io.prometheus.metrics.model.snapshots.MetricSnapshots.containsMetricName(String name)"
                ]
            },
            "0d232b44723a5275f9cdee4eae99a8c35ca923d3": {
                "prometheus-metrics-config/src/main/java/io/prometheus/metrics/config/PrometheusProperties.java": [
                    "public MetricsProperties io.prometheus.metrics.config.PrometheusProperties.getMetricProperties(String metricName)"
                ],
                "prometheus-metrics-config/src/main/java/io/prometheus/metrics/config/PrometheusPropertiesLoader.java": [
                    "private static Map<String, MetricsProperties> io.prometheus.metrics.config.PrometheusPropertiesLoader.loadMetricsConfigs(Map<Object, Object> properties)"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/Counter.java": [
                    "public Builder io.prometheus.metrics.core.metrics.Counter.withName(String name)"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/CounterWithCallback.java": [
                    "public Builder io.prometheus.metrics.core.metrics.CounterWithCallback.withName(String name)"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/Info.java": [
                    "public Builder io.prometheus.metrics.core.metrics.Info.withName(String name)",
                    "public Info io.prometheus.metrics.core.metrics.Info.build()"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/MetricWithFixedMetadata.java": [
                    "public B io.prometheus.metrics.core.metrics.MetricWithFixedMetadata.withName(String name)",
                    "public B io.prometheus.metrics.core.metrics.MetricWithFixedMetadata.withLabelNames(String... labelNames)",
                    "private String io.prometheus.metrics.core.metrics.MetricWithFixedMetadata.makeName(String name, Unit unit)"
                ],
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/OpenMetricsTextFormatWriter.java": [
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeStateSet(OutputStreamWriter writer, StateSetSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeCounter(OutputStreamWriter writer, CounterSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeCreated(OutputStreamWriter writer, MetricMetadata metadata, DataPointSnapshot data)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeUnknown(OutputStreamWriter writer, UnknownSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeInfo(OutputStreamWriter writer, InfoSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeClassicHistogramBuckets(OutputStreamWriter writer, MetricMetadata metadata, String countSuffix, String sumSuffix, List<HistogramSnapshot.HistogramDataPointSnapshot> dataList)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeCountAndSum(OutputStreamWriter writer, MetricMetadata metadata, DistributionDataPointSnapshot data, String countSuffix, String sumSuffix, Exemplars exemplars)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeMetadata(OutputStreamWriter writer, String typeName, MetricMetadata metadata)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeGauge(OutputStreamWriter writer, GaugeSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeSummary(OutputStreamWriter writer, SummarySnapshot snapshot)"
                ],
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/PrometheusProtobufWriter.java": [
                    "private void io.prometheus.metrics.expositionformats.PrometheusProtobufWriter.setMetadataUnlessEmpty(Metrics.MetricFamily.Builder builder, MetricMetadata metadata, String nameSuffix, Metrics.MetricType type)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusProtobufWriter.addLabels(Metrics.Exemplar.Builder metricBuilder, Labels labels)",
                    "public Metrics.MetricFamily io.prometheus.metrics.expositionformats.PrometheusProtobufWriter.convert(MetricSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusProtobufWriter.addLabels(Metrics.Metric.Builder metricBuilder, Labels labels)"
                ],
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/PrometheusTextFormatWriter.java": [
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeGauge(OutputStreamWriter writer, GaugeSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeHistogram(OutputStreamWriter writer, HistogramSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeUnknown(OutputStreamWriter writer, UnknownSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeCounter(OutputStreamWriter writer, CounterSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeInfo(OutputStreamWriter writer, InfoSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeGaugeCountSum(OutputStreamWriter writer, HistogramSnapshot snapshot, MetricMetadata metadata)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeStateSet(OutputStreamWriter writer, StateSetSnapshot snapshot)",
                    "public void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeCreated(OutputStreamWriter writer, MetricSnapshot snapshot)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeMetadata(OutputStreamWriter writer, String suffix, String typeString, MetricMetadata metadata)",
                    "private void io.prometheus.metrics.expositionformats.PrometheusTextFormatWriter.writeSummary(OutputStreamWriter writer, SummarySnapshot snapshot)"
                ],
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/TextFormatUtil.java": [
                    "static void io.prometheus.metrics.expositionformats.TextFormatUtil.writeLabels(OutputStreamWriter writer, Labels labels, String additionalLabelName, double additionalLabelValue)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/registry/PrometheusRegistry.java": [
                    "public MetricSnapshots io.prometheus.metrics.model.registry.PrometheusRegistry.scrape()",
                    "public void io.prometheus.metrics.model.registry.PrometheusRegistry.unregister(MultiCollector collector)",
                    "public void io.prometheus.metrics.model.registry.PrometheusRegistry.register(Collector collector)",
                    "public void io.prometheus.metrics.model.registry.PrometheusRegistry.register(MultiCollector collector)",
                    "public void io.prometheus.metrics.model.registry.PrometheusRegistry.unregister(Collector collector)",
                    "public MetricSnapshots io.prometheus.metrics.model.registry.PrometheusRegistry.scrape(Predicate<String> includedNames)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/Labels.java": [
                    "public boolean io.prometheus.metrics.model.snapshots.Labels.hasSameNames(Labels other)",
                    "public int io.prometheus.metrics.model.snapshots.Labels.compareTo(Labels other)",
                    "private static void io.prometheus.metrics.model.snapshots.Labels.validateNames(String[] names)",
                    "public static Labels io.prometheus.metrics.model.snapshots.Labels.of(String... keyValuePairs)",
                    "public Labels io.prometheus.metrics.model.snapshots.Labels.merge(String[] names, String[] values)",
                    "public static Labels io.prometheus.metrics.model.snapshots.Labels.of(List<String> names, List<String> values)",
                    "public Labels io.prometheus.metrics.model.snapshots.Labels.merge(Labels other)",
                    "public boolean io.prometheus.metrics.model.snapshots.Labels.contains(String labelName)",
                    "public int io.prometheus.metrics.model.snapshots.Labels.hashCode()",
                    "public boolean io.prometheus.metrics.model.snapshots.Labels.equals(Object o)",
                    "public static Labels io.prometheus.metrics.model.snapshots.Labels.of(String[] names, String[] values)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/MetricMetadata.java": [
                    "private void io.prometheus.metrics.model.snapshots.MetricMetadata.validate()"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/MetricSnapshots.java": [
                    "public boolean io.prometheus.metrics.model.snapshots.MetricSnapshots.containsMetricName(String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e68daf23336eb5de7856df406eb1d497f51ad3be",
        "previous_commit": "17c98ebe505e583ffe9927f8ab9d910426860c8d",
        "date": 1630009649,
        "releases": {
            "previous": "e68daf23336eb5de7856df406eb1d497f51ad3be",
            "next": "e68daf23336eb5de7856df406eb1d497f51ad3be"
        },
        "commit_message": "Add a sample name filter for in-/excluding metrics by name or name prefix (#680)\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "e68daf23336eb5de7856df406eb1d497f51ad3be": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private List<String> io.prometheus.client.CollectorRegistry.collectorNames(Collector m)",
                    "private void io.prometheus.client.CollectorRegistry.findNextElement()",
                    "public Enumeration<Collector.MetricFamilySamples> io.prometheus.client.CollectorRegistry.filteredMetricFamilySamples(Set<String> includedNames)"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/BufferPoolsExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.BufferPoolsExports.collect()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ClassLoadingExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.ClassLoadingExports.collect()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/GarbageCollectorExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.GarbageCollectorExports.collect()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/MemoryPoolsExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.MemoryPoolsExports.collect()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ThreadExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.ThreadExports.collect()"
                ],
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.stop()",
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ],
                "simpleclient_servlet_common/src/main/java/io/prometheus/client/servlet/common/exporter/Exporter.java": [
                    "public void io.prometheus.client.servlet.common.exporter.Exporter.doGet(final HttpServletRequestAdapter req, final HttpServletResponseAdapter resp)"
                ]
            },
            "17c98ebe505e583ffe9927f8ab9d910426860c8d": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private List<String> io.prometheus.client.CollectorRegistry.collectorNames(Collector m)",
                    "private void io.prometheus.client.CollectorRegistry.findNextElement()",
                    "public Enumeration<Collector.MetricFamilySamples> io.prometheus.client.CollectorRegistry.filteredMetricFamilySamples(Set<String> includedNames)"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/BufferPoolsExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.BufferPoolsExports.collect()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ClassLoadingExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.ClassLoadingExports.collect()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/GarbageCollectorExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.GarbageCollectorExports.collect()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/MemoryPoolsExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.MemoryPoolsExports.collect()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ThreadExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.ThreadExports.collect()"
                ],
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.stop()",
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ],
                "simpleclient_servlet_common/src/main/java/io/prometheus/client/servlet/common/exporter/Exporter.java": [
                    "public void io.prometheus.client.servlet.common.exporter.Exporter.doGet(final HttpServletRequestAdapter req, final HttpServletResponseAdapter resp)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "fa46c1937e9de86ca54dba5ad13d832fcf8b9df2",
        "previous_commit": "c650cad6dec343693c758b64ab163fc02cdd9e56",
        "date": 1418731864,
        "releases": {
            "previous": "fa46c1937e9de86ca54dba5ad13d832fcf8b9df2",
            "next": "fa46c1937e9de86ca54dba5ad13d832fcf8b9df2"
        },
        "commit_message": "Switch to DoubleAdder for simpleclient, it's more performant.\n\nAdd benchmarks for both of our java clients, and a comparison with\ncodahale/yammer metrics. This is based on internal benchmarks by Will Fleury.\n\nAdd caching of the Child when there's no labels. This is the most common use\ncase, and makes it 4-5x faster than the naive approach.\n\nPerformance comparison:\nCodehale(a popular java instrumention library) takes 12ns per increment\nof a counter uncontended, rising to 18ns with 4 threads\n\nThe original client takes 126ns, rising to 245ns with 4 threads.\nIncrementing the child takes 13ns, rising to 382ns with 4 threads (odd - it should be <245ns).\n\nWith theese changes the Simpleclient's performance goes from:\n- Uncontended labels() increment: 70ns -> 54ns\n- 2-thread labels() increment: 146ns -> 103ns\n- 4-thread labels() increment: 509ns -> 130ns\n- Uncontended Child increment: 29ns -> 13ns\n- 2-thread Child increment: 102ns -> 16ns\n- 4-thread Child increment: 215ns -> 19ns\n- Uncontended nolabels convenience increment: 50ns -> 13ns\n- 2-thread nolabels convenience increment: 172ns -> 17ns\n- 4-thread nolabels convenience increment: 434ns -> 20ns\n\nThe new numbers are much faster, and comparable with codehale.\nConcurrentHashMap doesn't seem great with lots of threads, avoiding\nthat by caching the Child is advised where you have labels and a high rate of concurrent updates.\nI tested on a 2-core MacBook Pro with a 2.5GHz i5 processor, Oracle Java 64 1.7.0_51.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "fa46c1937e9de86ca54dba5ad13d832fcf8b9df2": {
                "simpleclient/src/main/java/io/prometheus/client/Counter.java": [
                    "public void io.prometheus.client.Counter.inc(double amt)",
                    "public double io.prometheus.client.Counter.get()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Gauge.java": [
                    "public void io.prometheus.client.Gauge.dec(double amt)",
                    "public void io.prometheus.client.Gauge.setToCurrentTime()",
                    "public void io.prometheus.client.Gauge.inc(double amt)",
                    "public double io.prometheus.client.Gauge.get()",
                    "public void io.prometheus.client.Gauge.set(double val)"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "public void io.prometheus.client.Summary.observe(double amt)",
                    "public void io.prometheus.client.Summary.observeSecondsSinceNanoTime(long nanoTime)",
                    "public Value io.prometheus.client.Summary.get()"
                ]
            },
            "c650cad6dec343693c758b64ab163fc02cdd9e56": {
                "simpleclient/src/main/java/io/prometheus/client/Counter.java": [
                    "public void io.prometheus.client.Counter.inc(double amt)",
                    "public double io.prometheus.client.Counter.get()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Gauge.java": [
                    "public void io.prometheus.client.Gauge.dec(double amt)",
                    "public void io.prometheus.client.Gauge.setToCurrentTime()",
                    "public void io.prometheus.client.Gauge.inc(double amt)",
                    "public double io.prometheus.client.Gauge.get()",
                    "public void io.prometheus.client.Gauge.set(double val)"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "public void io.prometheus.client.Summary.observe(double amt)",
                    "public void io.prometheus.client.Summary.observeSecondsSinceNanoTime(long nanoTime)",
                    "public Value io.prometheus.client.Summary.get()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b76e1e95d1c8ce3141584e2a2d260519c3a6eb19",
        "previous_commit": "8fcc7bc03dfbabd0c15776640d5fe52942aa9309",
        "date": 1621886675,
        "releases": {
            "previous": "b76e1e95d1c8ce3141584e2a2d260519c3a6eb19",
            "next": "b76e1e95d1c8ce3141584e2a2d260519c3a6eb19"
        },
        "commit_message": "add Exemplar support for OpenTelemetry tracing\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "b76e1e95d1c8ce3141584e2a2d260519c3a6eb19": {
                "simpleclient/src/main/java/io/prometheus/client/Collector.java": [
                    "public int io.prometheus.client.Collector.hashCode()",
                    "public boolean io.prometheus.client.Collector.equals(Object obj)"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Counter.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Counter.collect()",
                    "public Counter io.prometheus.client.Counter.create()",
                    "protected Child io.prometheus.client.Counter.newChild()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Histogram.java": [
                    "public Value io.prometheus.client.Histogram.get()",
                    "protected Child io.prometheus.client.Histogram.newChild()",
                    "public double io.prometheus.client.Histogram.observeDuration()",
                    "public List<MetricFamilySamples> io.prometheus.client.Histogram.collect()"
                ],
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.writeOpenMetrics100(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ]
            },
            "8fcc7bc03dfbabd0c15776640d5fe52942aa9309": {
                "simpleclient/src/main/java/io/prometheus/client/Collector.java": [
                    "public int io.prometheus.client.Collector.hashCode()",
                    "public boolean io.prometheus.client.Collector.equals(Object obj)"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Counter.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Counter.collect()",
                    "public Counter io.prometheus.client.Counter.create()",
                    "protected Child io.prometheus.client.Counter.newChild()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Histogram.java": [
                    "public Value io.prometheus.client.Histogram.get()",
                    "protected Child io.prometheus.client.Histogram.newChild()",
                    "public double io.prometheus.client.Histogram.observeDuration()",
                    "public List<MetricFamilySamples> io.prometheus.client.Histogram.collect()"
                ],
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.writeOpenMetrics100(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b49b8a9fda742ac263357c08478f2b9f7cef2106",
        "previous_commit": "5b4ddb883f6f393e30c9a4c43c153d4cc0677eab",
        "date": 1487701518,
        "releases": {
            "previous": "b49b8a9fda742ac263357c08478f2b9f7cef2106",
            "next": "b49b8a9fda742ac263357c08478f2b9f7cef2106"
        },
        "commit_message": "Improve array allocation\n\n- precompute array size when it's obvious - avoids re-allocating\r\n- use singletonList() when the array can be immutable\r\n- replace some empty arrays with emptyList()",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "b49b8a9fda742ac263357c08478f2b9f7cef2106": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private Set<Collector> io.prometheus.client.CollectorRegistry.collectors()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Counter.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Counter.collect()",
                    "public List<MetricFamilySamples> io.prometheus.client.Counter.describe()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Gauge.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Gauge.collect()",
                    "public List<MetricFamilySamples> io.prometheus.client.Gauge.describe()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Histogram.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Histogram.describe()",
                    "public List<MetricFamilySamples> io.prometheus.client.Histogram.collect()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Summary.collect()",
                    "public List<MetricFamilySamples> io.prometheus.client.Summary.describe()"
                ],
                "simpleclient_spring_boot/src/main/java/io/prometheus/client/spring/boot/SpringBootMetricsCollector.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.spring.boot.SpringBootMetricsCollector.collect()"
                ]
            },
            "5b4ddb883f6f393e30c9a4c43c153d4cc0677eab": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private Set<Collector> io.prometheus.client.CollectorRegistry.collectors()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Counter.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Counter.collect()",
                    "public List<MetricFamilySamples> io.prometheus.client.Counter.describe()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Gauge.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Gauge.collect()",
                    "public List<MetricFamilySamples> io.prometheus.client.Gauge.describe()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Histogram.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Histogram.describe()",
                    "public List<MetricFamilySamples> io.prometheus.client.Histogram.collect()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Summary.collect()",
                    "public List<MetricFamilySamples> io.prometheus.client.Summary.describe()"
                ],
                "simpleclient_spring_boot/src/main/java/io/prometheus/client/spring/boot/SpringBootMetricsCollector.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.spring.boot.SpringBootMetricsCollector.collect()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "1fd8c7df9f88981a603ce4821f5637b719f663ea",
        "previous_commit": "60f72b6d27d31a4a566670cebdfb2699073c705a",
        "date": 1705487159,
        "releases": {
            "previous": "1fd8c7df9f88981a603ce4821f5637b719f663ea",
            "next": "1fd8c7df9f88981a603ce4821f5637b719f663ea"
        },
        "commit_message": "Add Backwards-Compatibility (#911)\n\n* Add Backwards-Compatibility\r\n- metrics name\r\n\r\nSigned-off-by: thinker0 <thinker0@gmail.com>\r\n\r\n* Update code\r\n\r\nSigned-off-by: thinker0 <thinker0@gmail.com>\r\n\r\n* Update code\r\n\r\nSigned-off-by: thinker0 <thinker0@gmail.com>\r\n\r\n---------\r\n\r\nSigned-off-by: thinker0 <thinker0@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "1fd8c7df9f88981a603ce4821f5637b719f663ea": {
                "prometheus-metrics-simpleclient-bridge/src/main/java/io/prometheus/metrics/simpleclient/bridge/SimpleclientCollector.java": [
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertInfo(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertUnknown(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertSummary(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertStateSet(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertHistogram(Collector.MetricFamilySamples samples, boolean isGaugeHistogram)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertCounter(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertGauge(Collector.MetricFamilySamples samples)"
                ]
            },
            "60f72b6d27d31a4a566670cebdfb2699073c705a": {
                "prometheus-metrics-simpleclient-bridge/src/main/java/io/prometheus/metrics/simpleclient/bridge/SimpleclientCollector.java": [
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertInfo(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertUnknown(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertSummary(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertStateSet(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertHistogram(Collector.MetricFamilySamples samples, boolean isGaugeHistogram)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertCounter(Collector.MetricFamilySamples samples)",
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertGauge(Collector.MetricFamilySamples samples)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "575488ddb66225928195412b47174912de1d0f05",
        "previous_commit": "c5692b0c102ddda0741b0f48ee722828a678c421",
        "date": 1480061161,
        "releases": {
            "previous": "575488ddb66225928195412b47174912de1d0f05",
            "next": "575488ddb66225928195412b47174912de1d0f05"
        },
        "commit_message": "Add Gauge/Counter/SummaryMetricFamily to make custom collectors easier. (#161)\n\nFollowing from the Python client, add these as convenience functions\r\nto make writing custom collectors easier by reducing boilerplate.\r\n\r\nHistogram is excluded, as it'd not save much.\r\n\r\nSwitch all hotspot metrics to use these.\r\n\r\nFix family name of jvm_threads_peak.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "575488ddb66225928195412b47174912de1d0f05": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ClassLoadingExports.java": [
                    "void io.prometheus.client.hotspot.ClassLoadingExports.addClassLoadingMetrics(List<MetricFamilySamples> sampleFamilies)"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/GarbageCollectorExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.GarbageCollectorExports.collect()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/MemoryPoolsExports.java": [
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryPoolMetrics(List<MetricFamilySamples> sampleFamilies)",
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryAreaMetrics(List<MetricFamilySamples> sampleFamilies)"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/StandardExports.java": [
                    "void io.prometheus.client.hotspot.StandardExports.collectMemoryMetricsLinux(List<MetricFamilySamples> mfs)",
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.StandardExports.collect()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ThreadExports.java": [
                    "void io.prometheus.client.hotspot.ThreadExports.addThreadMetrics(List<MetricFamilySamples> sampleFamilies)"
                ]
            },
            "c5692b0c102ddda0741b0f48ee722828a678c421": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ClassLoadingExports.java": [
                    "void io.prometheus.client.hotspot.ClassLoadingExports.addClassLoadingMetrics(List<MetricFamilySamples> sampleFamilies)"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/GarbageCollectorExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.GarbageCollectorExports.collect()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/MemoryPoolsExports.java": [
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryPoolMetrics(List<MetricFamilySamples> sampleFamilies)",
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryAreaMetrics(List<MetricFamilySamples> sampleFamilies)"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/StandardExports.java": [
                    "void io.prometheus.client.hotspot.StandardExports.collectMemoryMetricsLinux(List<MetricFamilySamples> mfs)",
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.StandardExports.collect()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ThreadExports.java": [
                    "void io.prometheus.client.hotspot.ThreadExports.addThreadMetrics(List<MetricFamilySamples> sampleFamilies)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "5c0d1e7ee22897b87f73358caee43d95dcd07408",
        "previous_commit": "801f91e05cbee4dfe99bd65724d6a7cfede8e94a",
        "date": 1610981427,
        "releases": {
            "previous": "5c0d1e7ee22897b87f73358caee43d95dcd07408",
            "next": "5c0d1e7ee22897b87f73358caee43d95dcd07408"
        },
        "commit_message": "Add _created for direct instrumentation.\n\nSigned-off-by: Brian Brazil <brian.brazil@robustperception.io>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "5c0d1e7ee22897b87f73358caee43d95dcd07408": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private List<String> io.prometheus.client.CollectorRegistry.collectorNames(Collector m)"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Counter.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Counter.collect()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Histogram.java": [
                    "public Value io.prometheus.client.Histogram.get()",
                    "public List<MetricFamilySamples> io.prometheus.client.Histogram.collect()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "public Value io.prometheus.client.Summary.get()",
                    "public List<MetricFamilySamples> io.prometheus.client.Summary.collect()"
                ]
            },
            "801f91e05cbee4dfe99bd65724d6a7cfede8e94a": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private List<String> io.prometheus.client.CollectorRegistry.collectorNames(Collector m)"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Counter.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Counter.collect()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Histogram.java": [
                    "public Value io.prometheus.client.Histogram.get()",
                    "public List<MetricFamilySamples> io.prometheus.client.Histogram.collect()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "public Value io.prometheus.client.Summary.get()",
                    "public List<MetricFamilySamples> io.prometheus.client.Summary.collect()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b67a0f32230e6d3cf0f5b3db3ee43779289f8136",
        "previous_commit": "c5b6ca4cfe092b9b6bf6228fc1a2cf9582143f6a",
        "date": 1459855487,
        "releases": {
            "previous": "b67a0f32230e6d3cf0f5b3db3ee43779289f8136",
            "next": "b67a0f32230e6d3cf0f5b3db3ee43779289f8136"
        },
        "commit_message": "Cosmetic fixes to increase thread-safety and performance\n\n- make all variables final if possible\n- use Collections.singletonList() where possible\n- reduce visiblity of elements clearly not intended to be public\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "b67a0f32230e6d3cf0f5b3db3ee43779289f8136": {
                "simpleclient/src/main/java/io/prometheus/client/Collector.java": [
                    "public String io.prometheus.client.Collector.toString()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "public Value io.prometheus.client.Summary.get()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/GarbageCollectorExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.GarbageCollectorExports.collect()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/MemoryPoolsExports.java": [
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryPoolMetrics(List<MetricFamilySamples> sampleFamilies)",
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryAreaMetrics(List<MetricFamilySamples> sampleFamilies)"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/StandardExports.java": [
                    "private static MetricFamilySamples io.prometheus.client.hotspot.StandardExports.singleMetric(String name, Type type, String help, double value)"
                ]
            },
            "c5b6ca4cfe092b9b6bf6228fc1a2cf9582143f6a": {
                "simpleclient/src/main/java/io/prometheus/client/Collector.java": [
                    "public String io.prometheus.client.Collector.toString()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "public Value io.prometheus.client.Summary.get()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/GarbageCollectorExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.GarbageCollectorExports.collect()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/MemoryPoolsExports.java": [
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryPoolMetrics(List<MetricFamilySamples> sampleFamilies)",
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryAreaMetrics(List<MetricFamilySamples> sampleFamilies)"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/StandardExports.java": [
                    "MetricFamilySamples io.prometheus.client.hotspot.StandardExports.singleMetric(String name, Type type, String help, double value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d4f32a2c1467aabb19110ff524ac6c5af47faf3f",
        "previous_commit": "99e209d234e40ddc4b10ae468e3ff0aff945bed7",
        "date": 1610981425,
        "releases": {
            "previous": "d4f32a2c1467aabb19110ff524ac6c5af47faf3f",
            "next": "d4f32a2c1467aabb19110ff524ac6c5af47faf3f"
        },
        "commit_message": "Get all the http servers working with OM.\n\nSigned-off-by: Brian Brazil <brian.brazil@robustperception.io>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "d4f32a2c1467aabb19110ff524ac6c5af47faf3f": {
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.writeOpenMetrics100(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ],
                "simpleclient_servlet/src/main/java/io/prometheus/client/exporter/MetricsServlet.java": [
                    "protected void io.prometheus.client.exporter.MetricsServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)"
                ],
                "simpleclient_spring_boot/src/main/java/io/prometheus/client/spring/boot/PrometheusEndpoint.java": [
                    "public String io.prometheus.client.spring.boot.PrometheusEndpoint.writeRegistry(Set<String> metricsToInclude, String contentType)",
                    "public String io.prometheus.client.spring.boot.PrometheusEndpoint.invoke()"
                ],
                "simpleclient_vertx/src/main/java/io/prometheus/client/vertx/MetricsHandler.java": [
                    "public void io.prometheus.client.vertx.MetricsHandler.handle(RoutingContext ctx)"
                ]
            },
            "99e209d234e40ddc4b10ae468e3ff0aff945bed7": {
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.writeOpenMetrics100(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ],
                "simpleclient_servlet/src/main/java/io/prometheus/client/exporter/MetricsServlet.java": [
                    "protected void io.prometheus.client.exporter.MetricsServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)"
                ],
                "simpleclient_spring_boot/src/main/java/io/prometheus/client/spring/boot/PrometheusEndpoint.java": [
                    "public String io.prometheus.client.spring.boot.PrometheusEndpoint.invoke()",
                    "public String io.prometheus.client.spring.boot.PrometheusEndpoint.writeRegistry(Set<String> metricsToInclude)"
                ],
                "simpleclient_vertx/src/main/java/io/prometheus/client/vertx/MetricsHandler.java": [
                    "public void io.prometheus.client.vertx.MetricsHandler.handle(RoutingContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "399d6bf1379130e08364473ebd75ced594b31a19",
        "previous_commit": "0fbbf67f4178a48e8758fa9c01951b6c79c34029",
        "date": 1436198957,
        "releases": {
            "previous": "399d6bf1379130e08364473ebd75ced594b31a19",
            "next": "399d6bf1379130e08364473ebd75ced594b31a19"
        },
        "commit_message": "Switch to new pushgateway URL.\n\nNote: Anyone relying on setting the instance to empty string\nwill now get an empty instance label, rather than the previous\nbehaviour of the pushgateway using the IP address of the client.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "399d6bf1379130e08364473ebd75ced594b31a19": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "public void io.prometheus.client.exporter.PushGateway.push(CollectorRegistry registry, String job, String instance)",
                    "public void io.prometheus.client.exporter.PushGateway.pushAdd(Collector collector, String job)",
                    "public void io.prometheus.client.exporter.PushGateway.delete(String job, String instance)",
                    "public void io.prometheus.client.exporter.PushGateway.push(Collector collector, String job)",
                    "public void io.prometheus.client.exporter.PushGateway.pushAdd(CollectorRegistry registry, String job, String instance)"
                ]
            },
            "0fbbf67f4178a48e8758fa9c01951b6c79c34029": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "public void io.prometheus.client.exporter.PushGateway.push(CollectorRegistry registry, String job, String instance)",
                    "public void io.prometheus.client.exporter.PushGateway.pushAdd(Collector collector, String job, String instance)",
                    "public void io.prometheus.client.exporter.PushGateway.push(Collector collector, String job, String instance)",
                    "public void io.prometheus.client.exporter.PushGateway.delete(String job, String instance)",
                    "public void io.prometheus.client.exporter.PushGateway.pushAdd(CollectorRegistry registry, String job, String instance)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "7b31d68d23816baed5afea6dc7b04a660f08bebc",
        "previous_commit": "ff3c8d7ef6c0879d6f643c938ed70488d8be8093",
        "date": 1470389919,
        "releases": {
            "previous": "7b31d68d23816baed5afea6dc7b04a660f08bebc",
            "next": "7b31d68d23816baed5afea6dc7b04a660f08bebc"
        },
        "commit_message": "Added quantiles to summary metric (same algorithm as in client_golang).\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "7b31d68d23816baed5afea6dc7b04a660f08bebc": {
                "simpleclient/src/main/java/io/prometheus/client/Collector.java": [
                    "public static String io.prometheus.client.Collector.doubleToGoString(double d)"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "protected Child io.prometheus.client.Summary.newChild()",
                    "public List<MetricFamilySamples> io.prometheus.client.Summary.collect()",
                    "public Summary io.prometheus.client.Summary.create()",
                    "public Value io.prometheus.client.Summary.get()"
                ]
            },
            "ff3c8d7ef6c0879d6f643c938ed70488d8be8093": {
                "simpleclient/src/main/java/io/prometheus/client/Collector.java": [
                    "public static String io.prometheus.client.Collector.doubleToGoString(double d)"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "protected Child io.prometheus.client.Summary.newChild()",
                    "public List<MetricFamilySamples> io.prometheus.client.Summary.collect()",
                    "public Summary io.prometheus.client.Summary.create()",
                    "public Value io.prometheus.client.Summary.get()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "2cb33ef474aa648fa28ffb7f0f3bddae1ac73a12",
        "previous_commit": "f00456522f7a2abc5ab30f785bffbff6c69d0938",
        "date": 1459847983,
        "releases": {
            "previous": "2cb33ef474aa648fa28ffb7f0f3bddae1ac73a12",
            "next": "2cb33ef474aa648fa28ffb7f0f3bddae1ac73a12"
        },
        "commit_message": "Clarify the deprecation of methods using 'instance' parameter\n\nProvide a replacement for deprecated methods in their JavaDoc\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "2cb33ef474aa648fa28ffb7f0f3bddae1ac73a12": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "public void io.prometheus.client.exporter.PushGateway.push(CollectorRegistry registry, String job, String instance)",
                    "public void io.prometheus.client.exporter.PushGateway.pushAdd(Collector collector, String job, String instance)",
                    "public void io.prometheus.client.exporter.PushGateway.push(Collector collector, String job, String instance)",
                    "public void io.prometheus.client.exporter.PushGateway.delete(String job, String instance)",
                    "public void io.prometheus.client.exporter.PushGateway.pushAdd(CollectorRegistry registry, String job, String instance)"
                ]
            },
            "f00456522f7a2abc5ab30f785bffbff6c69d0938": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "public void io.prometheus.client.exporter.PushGateway.push(CollectorRegistry registry, String job, String instance)",
                    "public void io.prometheus.client.exporter.PushGateway.pushAdd(Collector collector, String job, String instance)",
                    "public void io.prometheus.client.exporter.PushGateway.push(Collector collector, String job, String instance)",
                    "public void io.prometheus.client.exporter.PushGateway.delete(String job, String instance)",
                    "public void io.prometheus.client.exporter.PushGateway.pushAdd(CollectorRegistry registry, String job, String instance)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "819a8576ccb159d4c3769ac49e97a59ae67858fc",
        "previous_commit": "b6c6e639536f8f62e2de15f7dc79d971c3aeb954",
        "date": 1610981153,
        "releases": {
            "previous": "819a8576ccb159d4c3769ac49e97a59ae67858fc",
            "next": "819a8576ccb159d4c3769ac49e97a59ae67858fc"
        },
        "commit_message": "Add support for OM Units, and Counter naming.\n\nSigned-off-by: Brian Brazil <brian.brazil@robustperception.io>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "819a8576ccb159d4c3769ac49e97a59ae67858fc": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private List<String> io.prometheus.client.CollectorRegistry.collectorNames(Collector m)"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Counter.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Counter.collect()",
                    "public Counter io.prometheus.client.Counter.create()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/SimpleCollector.java": [
                    "protected List<MetricFamilySamples> io.prometheus.client.SimpleCollector<Child>.familySamplesList(Collector.Type type, List<MetricFamilySamples.Sample> samples)"
                ],
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.write004(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ]
            },
            "b6c6e639536f8f62e2de15f7dc79d971c3aeb954": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private List<String> io.prometheus.client.CollectorRegistry.collectorNames(Collector m)"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Counter.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Counter.collect()",
                    "public Counter io.prometheus.client.Counter.create()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/SimpleCollector.java": [
                    "protected List<MetricFamilySamples> io.prometheus.client.SimpleCollector<Child>.familySamplesList(Collector.Type type, List<MetricFamilySamples.Sample> samples)"
                ],
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.write004(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "8b0c0458c77d6ff2cb4ade014daac52ecf57d827",
        "previous_commit": "fbc3fc42f8470b55b5274c9921f6202f17ffc1bc",
        "date": 1565802810,
        "releases": {
            "previous": "8b0c0458c77d6ff2cb4ade014daac52ecf57d827",
            "next": "8b0c0458c77d6ff2cb4ade014daac52ecf57d827"
        },
        "commit_message": "fixed one way to get a ConcurrentModificationException: (#495)\n\nUsing one object (namesCollectorsLock) to lock both names / collectors maps. Using a seperate object just to prevent confusion.\r\n\r\nSigned-off-by: Jason Young <jason.young@procentive.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "8b0c0458c77d6ff2cb4ade014daac52ecf57d827": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "public void io.prometheus.client.CollectorRegistry.register(Collector m)",
                    "private Set<Collector> io.prometheus.client.CollectorRegistry.collectors()",
                    "public void io.prometheus.client.CollectorRegistry.unregister(Collector m)",
                    "private Iterator<Collector> io.prometheus.client.CollectorRegistry.includedCollectorIterator(Set<String> includedNames)",
                    "public void io.prometheus.client.CollectorRegistry.clear()"
                ]
            },
            "fbc3fc42f8470b55b5274c9921f6202f17ffc1bc": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "public void io.prometheus.client.CollectorRegistry.register(Collector m)",
                    "private Set<Collector> io.prometheus.client.CollectorRegistry.collectors()",
                    "public void io.prometheus.client.CollectorRegistry.unregister(Collector m)",
                    "private Iterator<Collector> io.prometheus.client.CollectorRegistry.includedCollectorIterator(Set<String> includedNames)",
                    "public void io.prometheus.client.CollectorRegistry.clear()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "5817253028476ab2d17eb6a0613fe3da3bc185f0",
        "previous_commit": "586c2f9e4c62553eb157c82b292377521375f554",
        "date": 1697401054,
        "releases": {
            "previous": "5817253028476ab2d17eb6a0613fe3da3bc185f0",
            "next": "5817253028476ab2d17eb6a0613fe3da3bc185f0"
        },
        "commit_message": "Remove scrape() from getPrometheusName() default implementation\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "5817253028476ab2d17eb6a0613fe3da3bc185f0": {
                "integration-tests/it-exporter/it-exporter-httpserver-sample/src/main/java/io/prometheus/metrics/it/exporter/httpserver/HTTPServerSample.java": [
                    "public static void io.prometheus.metrics.it.exporter.httpserver.HTTPServerSample.main(String[] args)"
                ],
                "integration-tests/it-exporter/it-exporter-servlet-jetty-sample/src/main/java/io/prometheus/metrics/it/exporter/servlet/jetty/ExporterServletJettySample.java": [
                    "public static void io.prometheus.metrics.it.exporter.servlet.jetty.ExporterServletJettySample.main(String[] args)"
                ],
                "integration-tests/it-exporter/it-exporter-servlet-tomcat-sample/src/main/java/io/prometheus/metrics/it/exporter/servlet/tomcat/ExporterServletTomcatSample.java": [
                    "public static void io.prometheus.metrics.it.exporter.servlet.tomcat.ExporterServletTomcatSample.main(String[] args)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/registry/PrometheusRegistry.java": [
                    "public void io.prometheus.metrics.model.registry.PrometheusRegistry.unregister(Collector collector)",
                    "public MetricSnapshots io.prometheus.metrics.model.registry.PrometheusRegistry.scrape(Predicate<String> includedNames)"
                ]
            },
            "586c2f9e4c62553eb157c82b292377521375f554": {
                "integration-tests/it-exporter/it-exporter-httpserver-sample/src/main/java/io/prometheus/metrics/it/exporter/httpserver/HTTPServerSample.java": [
                    "public static void io.prometheus.metrics.it.exporter.httpserver.HTTPServerSample.main(String[] args)"
                ],
                "integration-tests/it-exporter/it-exporter-servlet-jetty-sample/src/main/java/io/prometheus/metrics/it/exporter/servlet/jetty/ExporterServletJettySample.java": [
                    "public static void io.prometheus.metrics.it.exporter.servlet.jetty.ExporterServletJettySample.main(String[] args)"
                ],
                "integration-tests/it-exporter/it-exporter-servlet-tomcat-sample/src/main/java/io/prometheus/metrics/it/exporter/servlet/tomcat/ExporterServletTomcatSample.java": [
                    "public static void io.prometheus.metrics.it.exporter.servlet.tomcat.ExporterServletTomcatSample.main(String[] args)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/registry/PrometheusRegistry.java": [
                    "public void io.prometheus.metrics.model.registry.PrometheusRegistry.unregister(Collector collector)",
                    "public MetricSnapshots io.prometheus.metrics.model.registry.PrometheusRegistry.scrape(Predicate<String> includedNames)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "edaf26aaffb374949ccf41816f970beb792415bf",
        "previous_commit": "5ca4a6af134ad018ebf54bbebcd6d55f11fcf6cf",
        "date": 1473349766,
        "releases": {
            "previous": "edaf26aaffb374949ccf41816f970beb792415bf",
            "next": "edaf26aaffb374949ccf41816f970beb792415bf"
        },
        "commit_message": "export of Dropwizard metrics should use original name in help message\n\nDropwizard metric name can contain characters which are not\nallowed in Prometheus metrics name. For example\n`my.application.namedTimer1`. This name is then sanitized\nto `my_application_namedTimer1`.\n\nThe change is that help message should provide original metric name:\n\n `Generated from Dropwizard metric import (metric=my.application.namedTimer1, type=com.codahale.metrics.Timer)`\n\ninstead of\n\n`Generated from Dropwizard metric import (metric=my_application_namedTimer1, type=com.codahale.metrics.Timer)`\n\n Metric name in help message was not  correct.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "edaf26aaffb374949ccf41816f970beb792415bf": {
                "simpleclient_dropwizard/src/main/java/io/prometheus/client/dropwizard/DropwizardExports.java": [
                    "List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.fromSnapshotAndCount(String dropwizardName, Snapshot snapshot, long count, double factor, String helpMessage)",
                    "List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.fromGauge(String dropwizardName, Gauge gauge)",
                    "public List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.collect()",
                    "List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.fromMeter(String dropwizardName, Meter meter)",
                    "List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.fromCounter(String dropwizardName, Counter counter)"
                ]
            },
            "5ca4a6af134ad018ebf54bbebcd6d55f11fcf6cf": {
                "simpleclient_dropwizard/src/main/java/io/prometheus/client/dropwizard/DropwizardExports.java": [
                    "List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.fromSnapshotAndCount(String name, Snapshot snapshot, long count, double factor, String helpMessage)",
                    "List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.fromMeter(String name, Meter meter)",
                    "public List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.collect()",
                    "List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.fromGauge(String name, Gauge gauge)",
                    "List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.fromCounter(String name, Counter counter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b06dcb812be901de16b9f2824e3a2e2a8ce64d89",
        "previous_commit": "f9a42e604e59385dd7e44554fae6663663c404bf",
        "date": 1694082080,
        "releases": {
            "previous": "b06dcb812be901de16b9f2824e3a2e2a8ce64d89",
            "next": "b06dcb812be901de16b9f2824e3a2e2a8ce64d89"
        },
        "commit_message": "Add JVM metrics\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "b06dcb812be901de16b9f2824e3a2e2a8ce64d89": {
                "examples/example-exemplars-tail-sampling/example-greeting-service/src/main/java/io/prometheus/metrics/examples/otel_exemplars/greeting/Main.java": [
                    "public static void io.prometheus.metrics.examples.otel_exemplars.greeting.Main.main(String[] args)"
                ],
                "examples/example-exemplars-tail-sampling/example-hello-world-app/src/main/java/io/prometheus/metrics/examples/otel_exemplars/app/Main.java": [
                    "public static void io.prometheus.metrics.examples.otel_exemplars.app.Main.main(String[] args)"
                ],
                "examples/example-exporter-httpserver/src/main/java/io/prometheus/metrics/examples/httpserver/Main.java": [
                    "public static void io.prometheus.metrics.examples.httpserver.Main.main(String[] args)"
                ],
                "examples/example-exporter-opentelemetry/src/main/java/io/prometheus/metrics/examples/opentelemetry/Main.java": [
                    "public static void io.prometheus.metrics.examples.opentelemetry.Main.main(String[] args)"
                ],
                "examples/example-exporter-servlet-tomcat/src/main/java/io/prometheus/metrics/examples/tomcat_servlet/Main.java": [
                    "public static void io.prometheus.metrics.examples.tomcat_servlet.Main.main(String[] args)"
                ]
            },
            "f9a42e604e59385dd7e44554fae6663663c404bf": {
                "examples/example-exemplars-tail-sampling/example-greeting-service/src/main/java/io/prometheus/metrics/examples/otel_exemplars/greeting/Main.java": [
                    "public static void io.prometheus.metrics.examples.otel_exemplars.greeting.Main.main(String[] args)"
                ],
                "examples/example-exemplars-tail-sampling/example-hello-world-app/src/main/java/io/prometheus/metrics/examples/otel_exemplars/app/Main.java": [
                    "public static void io.prometheus.metrics.examples.otel_exemplars.app.Main.main(String[] args)"
                ],
                "examples/example-exporter-httpserver/src/main/java/io/prometheus/metrics/examples/httpserver/Main.java": [
                    "public static void io.prometheus.metrics.examples.httpserver.Main.main(String[] args)"
                ],
                "examples/example-exporter-opentelemetry/src/main/java/io/prometheus/metrics/examples/opentelemetry/Main.java": [
                    "public static void io.prometheus.metrics.examples.opentelemetry.Main.main(String[] args)"
                ],
                "examples/example-exporter-servlet-tomcat/src/main/java/io/prometheus/metrics/examples/tomcat_servlet/Main.java": [
                    "public static void io.prometheus.metrics.examples.tomcat_servlet.Main.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9701230610aa499a4d75b45b351aa52532779f24",
        "previous_commit": "d663d040e19fa07cf8f928492b3a99e2ebce8f6b",
        "date": 1627894350,
        "releases": {
            "previous": "9701230610aa499a4d75b45b351aa52532779f24",
            "next": "9701230610aa499a4d75b45b351aa52532779f24"
        },
        "commit_message": "Add support for Jakarta servlet #647\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "9701230610aa499a4d75b45b351aa52532779f24": {
                "simpleclient_servlet/src/main/java/io/prometheus/client/exporter/MetricsServlet.java": [
                    "protected void io.prometheus.client.exporter.MetricsServlet.doPost(final HttpServletRequest req, final HttpServletResponse resp)",
                    "protected void io.prometheus.client.exporter.MetricsServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)"
                ],
                "simpleclient_servlet/src/main/java/io/prometheus/client/filter/MetricsFilter.java": [
                    "public void io.prometheus.client.filter.MetricsFilter.init(FilterConfig filterConfig)",
                    "public void io.prometheus.client.filter.MetricsFilter.doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)"
                ]
            },
            "d663d040e19fa07cf8f928492b3a99e2ebce8f6b": {
                "simpleclient_servlet/src/main/java/io/prometheus/client/exporter/MetricsServlet.java": [
                    "protected void io.prometheus.client.exporter.MetricsServlet.doPost(final HttpServletRequest req, final HttpServletResponse resp)",
                    "protected void io.prometheus.client.exporter.MetricsServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)"
                ],
                "simpleclient_servlet/src/main/java/io/prometheus/client/filter/MetricsFilter.java": [
                    "public void io.prometheus.client.filter.MetricsFilter.init(FilterConfig filterConfig)",
                    "public void io.prometheus.client.filter.MetricsFilter.doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "fd9da3e7f756dc9c119108ebf6dbe88cda9a740c",
        "previous_commit": "787eef37843e3ea0972d064eb567d0639a8aba5f",
        "date": 1643896466,
        "releases": {
            "previous": "fd9da3e7f756dc9c119108ebf6dbe88cda9a740c",
            "next": "fd9da3e7f756dc9c119108ebf6dbe88cda9a740c"
        },
        "commit_message": "CKMS Quantiles: Add tests, refactor, fix tests\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "fd9da3e7f756dc9c119108ebf6dbe88cda9a740c": {
                "simpleclient/src/main/java/io/prometheus/client/CKMSQuantiles.java": [
                    "public void io.prometheus.client.CKMSQuantiles.insert(double value)",
                    "public double io.prometheus.client.CKMSQuantiles.get(double q)",
                    "void io.prometheus.client.CKMSQuantiles.compress()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "public Builder io.prometheus.client.Summary.quantile(double quantile, double error)"
                ]
            },
            "787eef37843e3ea0972d064eb567d0639a8aba5f": {
                "simpleclient/src/main/java/io/prometheus/client/CKMSQuantiles.java": [
                    "public void io.prometheus.client.CKMSQuantiles.insert(double value)",
                    "public double io.prometheus.client.CKMSQuantiles.get(double q)",
                    "private void io.prometheus.client.CKMSQuantiles.compress()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "public Builder io.prometheus.client.Summary.quantile(double quantile, double error)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "787eef37843e3ea0972d064eb567d0639a8aba5f",
        "previous_commit": "c83877ab01539a34f172d72405db0f1b9b29cc60",
        "date": 1643575301,
        "releases": {
            "previous": "787eef37843e3ea0972d064eb567d0639a8aba5f",
            "next": "787eef37843e3ea0972d064eb567d0639a8aba5f"
        },
        "commit_message": "Improve CKMSQuantiles and address memory leak\n\nCKMSQuantiles is copied from an implementation of 2012, where it states that a \u2018HACK\u2019 was done, admitting a space leak.\nThis leak has been noticed several times (#422, #550, #654).\nBy correctly applying the algorithm from the paper we fix the leak.\n\nI have added unit-tests to show that the behaviour is correct.\nI have also added a Benchmark in the benchmark module showing the difference with the old and current\nimplementation.\n\nAccording to my benchmarks, is in the new implementation a `get` of a quantile that has \u2018seen\u2019 1 million elements 440 times faster.\nInserting 1 million elements is 3.5 times faster.\n\nWhile going through the CKMS paper and the Java implementation I have added remarks and snippets\nfrom the paper, to clarify why certain choices are made.\n\nSigned-off-by: Jens <jenskat@gmail.com>\n\nFix assertion in HistogramTest\n\nMedian of 1..11 = 6\n\nSigned-off-by: Jens <jenskat@gmail.com>\n\nAddress PR remarks\n\nSigned-off-by: Jens <jenskat@gmail.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "787eef37843e3ea0972d064eb567d0639a8aba5f": {
                "simpleclient/src/main/java/io/prometheus/client/CKMSQuantiles.java": [
                    "public void io.prometheus.client.CKMSQuantiles.insert(double value)",
                    "public double io.prometheus.client.CKMSQuantiles.get(double q)",
                    "public String io.prometheus.client.CKMSQuantiles.toString()",
                    "private void io.prometheus.client.CKMSQuantiles.compress()"
                ]
            },
            "c83877ab01539a34f172d72405db0f1b9b29cc60": {
                "simpleclient/src/main/java/io/prometheus/client/CKMSQuantiles.java": [
                    "public void io.prometheus.client.CKMSQuantiles.insert(double value)",
                    "public double io.prometheus.client.CKMSQuantiles.get(double q)",
                    "public String io.prometheus.client.CKMSQuantiles.toString()",
                    "private void io.prometheus.client.CKMSQuantiles.compress()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "37503bcc71edff0382b106a252308f341ba57a99",
        "previous_commit": "b90fef7b6c7d5461bf1511bb86215328c30c40f0",
        "date": 1430738788,
        "releases": {
            "previous": "37503bcc71edff0382b106a252308f341ba57a99",
            "next": "37503bcc71edff0382b106a252308f341ba57a99"
        },
        "commit_message": "Update Striped64 & DoubleAdded to avoid ClassLoader leak\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "37503bcc71edff0382b106a252308f341ba57a99": {
                "simpleclient/src/main/java/io/prometheus/client/DoubleAdder.java": [
                    "public void io.prometheus.client.DoubleAdder.add(double x)"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Striped64.java": [
                    "final void io.prometheus.client.Striped64.retryUpdate(long x, int[] hc, boolean wasUncontended)",
                    "private static sun.misc.Unsafe io.prometheus.client.Striped64.getUnsafe()",
                    "public sun.misc.Unsafe io.prometheus.client.Striped64.run()"
                ]
            },
            "b90fef7b6c7d5461bf1511bb86215328c30c40f0": {
                "simpleclient/src/main/java/io/prometheus/client/DoubleAdder.java": [
                    "public void io.prometheus.client.DoubleAdder.add(double x)"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Striped64.java": [
                    "final void io.prometheus.client.Striped64.retryUpdate(long x, HashCode hc, boolean wasUncontended)",
                    "public sun.misc.Unsafe io.prometheus.client.Striped64.run()",
                    "private static sun.misc.Unsafe io.prometheus.client.Striped64.getUnsafe()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5b0a2752bcb8a168b69a74fd6c230d6a7d74f9c1",
        "previous_commit": "80b44dc41a04a667fe08f924cc7cc677390326b9",
        "date": 1518603081,
        "releases": {
            "previous": "5b0a2752bcb8a168b69a74fd6c230d6a7d74f9c1",
            "next": "5b0a2752bcb8a168b69a74fd6c230d6a7d74f9c1"
        },
        "commit_message": "Added optional \"timestamp\" value as part of metric sample (#337)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "5b0a2752bcb8a168b69a74fd6c230d6a7d74f9c1": {
                "simpleclient/src/main/java/io/prometheus/client/Collector.java": [
                    "public int io.prometheus.client.Collector.hashCode()",
                    "public String io.prometheus.client.Collector.toString()",
                    "public boolean io.prometheus.client.Collector.equals(Object obj)"
                ],
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.write004(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ]
            },
            "80b44dc41a04a667fe08f924cc7cc677390326b9": {
                "simpleclient/src/main/java/io/prometheus/client/Collector.java": [
                    "public int io.prometheus.client.Collector.hashCode()",
                    "public String io.prometheus.client.Collector.toString()",
                    "public boolean io.prometheus.client.Collector.equals(Object obj)"
                ],
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.write004(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "500ab032cf322e31dc21139e9619b7d7ed1ef72f",
        "previous_commit": "575488ddb66225928195412b47174912de1d0f05",
        "date": 1480075350,
        "releases": {
            "previous": "500ab032cf322e31dc21139e9619b7d7ed1ef72f",
            "next": "500ab032cf322e31dc21139e9619b7d7ed1ef72f"
        },
        "commit_message": "Add describe and autodescribe to detect dupes. (#162)\n\nThis works largely the same as this feature in the\r\nPython client.\r\n\r\nThis works by adding an optional Describable interface to collectors,\r\nwhich returns data in the same format as collect (though hopefully\r\nwithout the samples). If implemented it is called at registration time.\r\n\r\nIf describe is not present and auto describe is set on the\r\nregistry, then collect is called instead. This is enabled by default on\r\nthe default registry, but disabled elsewhere.\r\n\r\nPut in empty describes on some custom collectors that\r\ndeal with arbitrary data.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "500ab032cf322e31dc21139e9619b7d7ed1ef72f": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "public void io.prometheus.client.CollectorRegistry.register(Collector m)",
                    "public void io.prometheus.client.CollectorRegistry.clear()",
                    "public void io.prometheus.client.CollectorRegistry.unregister(Collector m)"
                ]
            },
            "575488ddb66225928195412b47174912de1d0f05": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "public void io.prometheus.client.CollectorRegistry.register(Collector m)",
                    "public void io.prometheus.client.CollectorRegistry.clear()",
                    "public void io.prometheus.client.CollectorRegistry.unregister(Collector m)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "7a77d9e8bf9b00793f258a4505ff438b8e33176f",
        "previous_commit": "0ea0a30f07090d8fc3f4819cb2afb15b835ecb3e",
        "date": 1495450166,
        "releases": {
            "previous": "7a77d9e8bf9b00793f258a4505ff438b8e33176f",
            "next": "7a77d9e8bf9b00793f258a4505ff438b8e33176f"
        },
        "commit_message": "Add support for `name[]` parameter filtering in CollectorRegistry and MetricsServlet (#204)\n\nAdd support for `name[]` parameter filtering\r\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "7a77d9e8bf9b00793f258a4505ff438b8e33176f": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private void io.prometheus.client.CollectorRegistry.findNextElement()"
                ],
                "simpleclient_servlet/src/main/java/io/prometheus/client/exporter/MetricsServlet.java": [
                    "protected void io.prometheus.client.exporter.MetricsServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)"
                ],
                "simpleclient_vertx/src/main/java/io/prometheus/client/vertx/MetricsHandler.java": [
                    "public void io.prometheus.client.vertx.MetricsHandler.handle(RoutingContext ctx)"
                ]
            },
            "0ea0a30f07090d8fc3f4819cb2afb15b835ecb3e": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private void io.prometheus.client.CollectorRegistry.findNextElement()"
                ],
                "simpleclient_servlet/src/main/java/io/prometheus/client/exporter/MetricsServlet.java": [
                    "protected void io.prometheus.client.exporter.MetricsServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)"
                ],
                "simpleclient_vertx/src/main/java/io/prometheus/client/vertx/MetricsHandler.java": [
                    "public void io.prometheus.client.vertx.MetricsHandler.handle(RoutingContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "cff40ddc7b992efba0bf913212985d3593a2b994",
        "previous_commit": "ee99bb85e1cc771e6b8b451b143a2af7d521ff01",
        "date": 1698702075,
        "releases": {
            "previous": "cff40ddc7b992efba0bf913212985d3593a2b994",
            "next": "cff40ddc7b992efba0bf913212985d3593a2b994"
        },
        "commit_message": "Support multi-target pattern (#873)\n\nAdd multi-target pattern support\r\n\r\nSigned-off-by: Guido Anzuoni <ganzuoni@gmail.com>\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "cff40ddc7b992efba0bf913212985d3593a2b994": {
                "prometheus-metrics-exporter-common/src/main/java/io/prometheus/metrics/exporter/common/PrometheusScrapeHandler.java": [
                    "private MetricSnapshots io.prometheus.metrics.exporter.common.PrometheusScrapeHandler.scrape(PrometheusHttpRequest request)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/registry/PrometheusRegistry.java": [
                    "public MetricSnapshots io.prometheus.metrics.model.registry.PrometheusRegistry.scrape()",
                    "public MetricSnapshots io.prometheus.metrics.model.registry.PrometheusRegistry.scrape(Predicate<String> includedNames)"
                ]
            },
            "ee99bb85e1cc771e6b8b451b143a2af7d521ff01": {
                "prometheus-metrics-exporter-common/src/main/java/io/prometheus/metrics/exporter/common/PrometheusScrapeHandler.java": [
                    "private MetricSnapshots io.prometheus.metrics.exporter.common.PrometheusScrapeHandler.scrape(PrometheusHttpRequest request)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/registry/PrometheusRegistry.java": [
                    "public MetricSnapshots io.prometheus.metrics.model.registry.PrometheusRegistry.scrape()",
                    "public MetricSnapshots io.prometheus.metrics.model.registry.PrometheusRegistry.scrape(Predicate<String> includedNames)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fe42313813b96dc92cf61f94fcfb79a8157b88a4",
        "previous_commit": "ac5136b864d5d90a7ce5e1da0c235da2dcfc18e2",
        "date": 1588853895,
        "releases": {
            "previous": "fe42313813b96dc92cf61f94fcfb79a8157b88a4",
            "next": "fe42313813b96dc92cf61f94fcfb79a8157b88a4"
        },
        "commit_message": "Remove dependency on sun.misc.Unsafe (#547)\n\nThis replaces `sun.misc.Unsafe` with\r\n`java.util.concurrent.atomic.AtomicLongFieldUpdater` and\r\n`AtomicIntegerFieldUpdater`. This is to enable compatibility with Jigsaw\r\nmodules where `sun.misc.Unsafe` is no longer available.\r\n\r\nCloses #468\r\n\r\nSigned-off-by: Andre Masella <andre@masella.name>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "fe42313813b96dc92cf61f94fcfb79a8157b88a4": {
                "simpleclient/src/main/java/io/prometheus/client/Striped64.java": [
                    "final boolean io.prometheus.client.Striped64.casBase(long cmp, long val)",
                    "final boolean io.prometheus.client.Striped64.cas(long cmp, long val)",
                    "final boolean io.prometheus.client.Striped64.casBusy()"
                ]
            },
            "ac5136b864d5d90a7ce5e1da0c235da2dcfc18e2": {
                "simpleclient/src/main/java/io/prometheus/client/Striped64.java": [
                    "final boolean io.prometheus.client.Striped64.casBase(long cmp, long val)",
                    "final boolean io.prometheus.client.Striped64.cas(long cmp, long val)",
                    "final boolean io.prometheus.client.Striped64.casBusy()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "5760fe18a38a37af90038a9eefb7d4ca5c451f86",
        "previous_commit": "a9a91546eeb0560b9f163e8e0efa56874e460baf",
        "date": 1485994006,
        "releases": {
            "previous": "5760fe18a38a37af90038a9eefb7d4ca5c451f86",
            "next": "5760fe18a38a37af90038a9eefb7d4ca5c451f86"
        },
        "commit_message": "more performant version of TextFormat (avoids String concats) (#194)\n\nmore performant version of TextFormat (avoids String concats)",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "5760fe18a38a37af90038a9eefb7d4ca5c451f86": {
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.write004(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)",
                    "static String io.prometheus.client.exporter.common.TextFormat.escapeHelp(String s)",
                    "static String io.prometheus.client.exporter.common.TextFormat.escapeLabelValue(String s)"
                ]
            },
            "a9a91546eeb0560b9f163e8e0efa56874e460baf": {
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.write004(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)",
                    "static String io.prometheus.client.exporter.common.TextFormat.escapeHelp(String s)",
                    "static String io.prometheus.client.exporter.common.TextFormat.escapeLabelValue(String s)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "5638a2a0fca88b9cfc9ecd6eabb9eb08c522f7f7",
        "previous_commit": "3fc8c10dcf7bcc64a2467a5ed37425a45c640ed6",
        "date": 1423497193,
        "releases": {
            "previous": "5638a2a0fca88b9cfc9ecd6eabb9eb08c522f7f7",
            "next": "5638a2a0fca88b9cfc9ecd6eabb9eb08c522f7f7"
        },
        "commit_message": "Build upon Michal's work for jvm stats.\n\nSpaces are okay in label values, no need to switch to hyphens.\nExport committed and max separately.\nInline rather than using constants, so it's easier to read.\nUse a summary for GC stats.\n\nAdd a way to pick up current and future jvm collectors.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "5638a2a0fca88b9cfc9ecd6eabb9eb08c522f7f7": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/GarbageCollectorExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.GarbageCollectorExports.collect()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/MemoryPoolsExports.java": [
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryPoolMetrics(List<MetricFamilySamples> sampleFamilies)",
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryAreaMetrics(List<MetricFamilySamples> sampleFamilies)"
                ]
            },
            "3fc8c10dcf7bcc64a2467a5ed37425a45c640ed6": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/GarbageCollectorExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.GarbageCollectorExports.collect()"
                ],
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/MemoryPoolsExports.java": [
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryPoolMetrics(List<MetricFamilySamples> sampleFamilies)",
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryAreaMetrics(List<MetricFamilySamples> sampleFamilies)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "923d23e33135044b59d1d736ebdfd29154ecca02",
        "previous_commit": "fcde9554d759c397775298c64f99c0c169c8111b",
        "date": 1547377152,
        "releases": {
            "previous": "923d23e33135044b59d1d736ebdfd29154ecca02",
            "next": "923d23e33135044b59d1d736ebdfd29154ecca02"
        },
        "commit_message": "Set thread names in HTTPServer (#456)\n\nName threads in the HTTPServer thread pool to make them easily\r\nidentifiable in e.g. thread dumps.\r\n\r\nBefore: pool-1-thread-3\r\nAfter: prometheus-http-1-3\r\nSigned-off-by: Robin Karlsson <snago86@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "923d23e33135044b59d1d736ebdfd29154ecca02": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "static ThreadFactory io.prometheus.client.exporter.HTTPServer.defaultThreadFactory(boolean daemon)",
                    "public Thread io.prometheus.client.exporter.HTTPServer.newThread(Runnable r)",
                    "private void io.prometheus.client.exporter.HTTPServer.start(boolean daemon)"
                ]
            },
            "fcde9554d759c397775298c64f99c0c169c8111b": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "static ThreadFactory io.prometheus.client.exporter.HTTPServer.defaultThreadFactory(boolean daemon)",
                    "public Thread io.prometheus.client.exporter.HTTPServer.newThread(Runnable r)",
                    "private void io.prometheus.client.exporter.HTTPServer.start(boolean daemon)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "f9a117126157019af5248be6588dd442e3c6dd6a",
        "previous_commit": "fd9da3e7f756dc9c119108ebf6dbe88cda9a740c",
        "date": 1643896481,
        "releases": {
            "previous": "f9a117126157019af5248be6588dd442e3c6dd6a",
            "next": "f9a117126157019af5248be6588dd442e3c6dd6a"
        },
        "commit_message": "Summaries: Allow 0.0 and 1.0 quantiles and update documentation\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "f9a117126157019af5248be6588dd442e3c6dd6a": {
                "simpleclient/src/main/java/io/prometheus/client/CKMSQuantiles.java": [
                    "int io.prometheus.client.CKMSQuantiles.f(int r)",
                    "public double io.prometheus.client.CKMSQuantiles.get(double q)"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "public Builder io.prometheus.client.Summary.quantile(double quantile, double error)"
                ]
            },
            "fd9da3e7f756dc9c119108ebf6dbe88cda9a740c": {
                "simpleclient/src/main/java/io/prometheus/client/CKMSQuantiles.java": [
                    "int io.prometheus.client.CKMSQuantiles.f(int r)",
                    "public double io.prometheus.client.CKMSQuantiles.get(double q)"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "public Builder io.prometheus.client.Summary.quantile(double quantile, double error)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "40c3599d8b49b63bf84900921af43b6b0a9f5f1c",
        "previous_commit": "fc447f8861a48040ad4b956cf3e5af86f99985e4",
        "date": 1711049882,
        "releases": {
            "previous": "40c3599d8b49b63bf84900921af43b6b0a9f5f1c",
            "next": "40c3599d8b49b63bf84900921af43b6b0a9f5f1c"
        },
        "commit_message": "Allow Exemplars on histogram _count (#930)\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "40c3599d8b49b63bf84900921af43b6b0a9f5f1c": {
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/OpenMetricsTextFormatWriter.java": [
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeCountAndSum(OutputStreamWriter writer, MetricMetadata metadata, DistributionDataPointSnapshot data, String countSuffix, String sumSuffix, Exemplars exemplars)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeClassicHistogramBuckets(OutputStreamWriter writer, MetricMetadata metadata, String countSuffix, String sumSuffix, List<HistogramSnapshot.HistogramDataPointSnapshot> dataList)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/Exemplars.java": [
                    "public Exemplar io.prometheus.metrics.model.snapshots.Exemplars.get(double lowerBound, double upperBound)"
                ]
            },
            "fc447f8861a48040ad4b956cf3e5af86f99985e4": {
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/OpenMetricsTextFormatWriter.java": [
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeCountAndSum(OutputStreamWriter writer, MetricMetadata metadata, DistributionDataPointSnapshot data, String countSuffix, String sumSuffix, Exemplars exemplars)",
                    "private void io.prometheus.metrics.expositionformats.OpenMetricsTextFormatWriter.writeClassicHistogramBuckets(OutputStreamWriter writer, MetricMetadata metadata, String countSuffix, String sumSuffix, List<HistogramSnapshot.HistogramDataPointSnapshot> dataList)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/Exemplars.java": [
                    "public Exemplar io.prometheus.metrics.model.snapshots.Exemplars.get(double lowerBound, double upperBound)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e441e6942bc10657e310db25c083e86775627d28",
        "previous_commit": "1387c2fb200d9ead7daacf57c301baa988543cc5",
        "date": 1459927036,
        "releases": {
            "previous": "e441e6942bc10657e310db25c083e86775627d28",
            "next": "e441e6942bc10657e310db25c083e86775627d28"
        },
        "commit_message": "Make some missed fields private and/or final\n\nCleans up 36d08fd1fd82598636f04\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "e441e6942bc10657e310db25c083e86775627d28": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "public Double io.prometheus.client.CollectorRegistry.getSampleValue(String name, String[] labelNames, String[] labelValues)"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Histogram.java": [
                    "public Histogram io.prometheus.client.Histogram.create()",
                    "public Value io.prometheus.client.Histogram.get()"
                ]
            },
            "1387c2fb200d9ead7daacf57c301baa988543cc5": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "public Double io.prometheus.client.CollectorRegistry.getSampleValue(String name, String[] labelNames, String[] labelValues)"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Histogram.java": [
                    "public Histogram io.prometheus.client.Histogram.create()",
                    "public Value io.prometheus.client.Histogram.get()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "6730f3e32199d6bf0e963b306ff69ef08ac5b178",
        "previous_commit": "75baa060b650ae5d8b5e59efc5c81ca276cc73eb",
        "date": 1655282578,
        "releases": {
            "previous": "6730f3e32199d6bf0e963b306ff69ef08ac5b178",
            "next": "6730f3e32199d6bf0e963b306ff69ef08ac5b178"
        },
        "commit_message": "Support `_created` time series suppression (#791)\n\n* Support PROMETHEUS_DISABLE_CREATED_SERIES env var to suppress `_created` time series\r\n\r\nSigned-off-by: Gabi Davar <grizzly.nyo@gmail.com>\r\n\r\n* switched to use a static variable. test tweaks.\r\n\r\nSigned-off-by: Gabi Davar <grizzly.nyo@gmail.com>\r\n\r\n* docs\r\n\r\nSigned-off-by: Gabi Davar <grizzly.nyo@gmail.com>\r\n\r\n* let's be truer.\r\n\r\nSigned-off-by: Gabi Davar <grizzly.nyo@gmail.com>\r\n\r\n* Revert GetNames() redundant change.\r\n\r\nSigned-off-by: Gabi Davar <grizzly.nyo@gmail.com>\r\n\r\n* make final, drop test for now\r\n\r\nSigned-off-by: Gabi Davar <grizzly.nyo@gmail.com>\r\n\r\n* remove the extra deps too.\r\n\r\nSigned-off-by: Gabi Davar <grizzly.nyo@gmail.com>\r\n\r\n* Add a brand new and shiny class\r\n\r\nSigned-off-by: Gabi Davar <grizzly.nyo@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "6730f3e32199d6bf0e963b306ff69ef08ac5b178": {
                "simpleclient/src/main/java/io/prometheus/client/Counter.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Counter.collect()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Histogram.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Histogram.collect()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Summary.collect()"
                ]
            },
            "75baa060b650ae5d8b5e59efc5c81ca276cc73eb": {
                "simpleclient/src/main/java/io/prometheus/client/Counter.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Counter.collect()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Histogram.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Histogram.collect()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.Summary.collect()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "a526bae96dcee88747b485f5410975b2cd70bf11",
        "previous_commit": "ca22b57da76ae38e3c2da7a49e4d6b374014599f",
        "date": 1594897834,
        "releases": {
            "previous": "a526bae96dcee88747b485f5410975b2cd70bf11",
            "next": "a526bae96dcee88747b485f5410975b2cd70bf11"
        },
        "commit_message": "Count HTTP statuses returned along with the HTTP response times (#560)\n\nSigned-off-by: Ken Dombeck <kdombeck@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "a526bae96dcee88747b485f5410975b2cd70bf11": {
                "simpleclient_servlet/src/main/java/io/prometheus/client/filter/MetricsFilter.java": [
                    "public void io.prometheus.client.filter.MetricsFilter.init(FilterConfig filterConfig)",
                    "public void io.prometheus.client.filter.MetricsFilter.doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)"
                ]
            },
            "ca22b57da76ae38e3c2da7a49e4d6b374014599f": {
                "simpleclient_servlet/src/main/java/io/prometheus/client/filter/MetricsFilter.java": [
                    "public void io.prometheus.client.filter.MetricsFilter.init(FilterConfig filterConfig)",
                    "public void io.prometheus.client.filter.MetricsFilter.doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "944e69274b0daca54a29ce7c012e1c9552dc84d8",
        "previous_commit": "bdc6f2507a81029c1aec6cd8b5276661bb6c7ee1",
        "date": 1486453377,
        "releases": {
            "previous": "944e69274b0daca54a29ce7c012e1c9552dc84d8",
            "next": "944e69274b0daca54a29ce7c012e1c9552dc84d8"
        },
        "commit_message": "Add convenience 'get'-methods to nolabel-Counter, Gauge and Summary (#193)\n\nAdd convenience 'get'-methods to nolabel-Counter, Gauge and Summary\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "944e69274b0daca54a29ce7c012e1c9552dc84d8": {
                "simpleclient/src/main/java/io/prometheus/client/Counter.java": [
                    "public double io.prometheus.client.Counter.get()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Gauge.java": [
                    "public double io.prometheus.client.Gauge.get()"
                ]
            },
            "bdc6f2507a81029c1aec6cd8b5276661bb6c7ee1": {
                "simpleclient/src/main/java/io/prometheus/client/Counter.java": [
                    "public double io.prometheus.client.Counter.get()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Gauge.java": [
                    "public double io.prometheus.client.Gauge.get()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "0dba0f881439cd86a0ea468e6054f008617150b4",
        "previous_commit": "8a1e3c0f5c48963912bfa29f026fa2b5a51a002a",
        "date": 1490012573,
        "releases": {
            "previous": "0dba0f881439cd86a0ea468e6054f008617150b4",
            "next": "0dba0f881439cd86a0ea468e6054f008617150b4"
        },
        "commit_message": "Add cache size metrics to guave and caffeine (#217)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "0dba0f881439cd86a0ea468e6054f008617150b4": {
                "simpleclient_caffeine/src/main/java/io/prometheus/client/cache/caffeine/CacheMetricsCollector.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.cache.caffeine.CacheMetricsCollector.collect()"
                ],
                "simpleclient_guava/src/main/java/io/prometheus/client/guava/cache/CacheMetricsCollector.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.guava.cache.CacheMetricsCollector.collect()"
                ]
            },
            "8a1e3c0f5c48963912bfa29f026fa2b5a51a002a": {
                "simpleclient_caffeine/src/main/java/io/prometheus/client/cache/caffeine/CacheMetricsCollector.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.cache.caffeine.CacheMetricsCollector.collect()"
                ],
                "simpleclient_guava/src/main/java/io/prometheus/client/guava/cache/CacheMetricsCollector.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.guava.cache.CacheMetricsCollector.collect()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "c82ab1fa65b859c7844e7d9e378aa8b3a954be47",
        "previous_commit": "2ae979d459b7cd3d9856fc8220eafefeab816fb6",
        "date": 1715804359,
        "releases": {
            "previous": "c82ab1fa65b859c7844e7d9e378aa8b3a954be47",
            "next": "c82ab1fa65b859c7844e7d9e378aa8b3a954be47"
        },
        "commit_message": "Prevent illegal metric names\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "c82ab1fa65b859c7844e7d9e378aa8b3a954be47": {
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/MetricWithFixedMetadata.java": [
                    "private String io.prometheus.metrics.core.metrics.MetricWithFixedMetadata.makeName(String name, Unit unit)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/MetricMetadata.java": [
                    "private void io.prometheus.metrics.model.snapshots.MetricMetadata.validate()"
                ]
            },
            "2ae979d459b7cd3d9856fc8220eafefeab816fb6": {
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/MetricWithFixedMetadata.java": [
                    "private String io.prometheus.metrics.core.metrics.MetricWithFixedMetadata.makeName(String name, Unit unit)"
                ],
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/MetricMetadata.java": [
                    "private void io.prometheus.metrics.model.snapshots.MetricMetadata.validate()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "01e1e9edb6f0a4667afd99ae224673318130f36f",
        "previous_commit": "570f8bb70ae6f5a0a950dc563b68fb495d2f4d69",
        "date": 1597180107,
        "releases": {
            "previous": "01e1e9edb6f0a4667afd99ae224673318130f36f",
            "next": "01e1e9edb6f0a4667afd99ae224673318130f36f"
        },
        "commit_message": "Specify the charset of HTTPServer response (#564)\n\n* Update to specify the charset of response\r\n\r\nIn some Operational Systems (Like IBM Z/OS and IBM Z/Unix) the JRE runs with a charset different of UTF-8, those default charsets produce wrong behavior and truncated responses.\r\n\r\nTo avoid this kind of situations I put the specifc charset in the output writer.\r\n\r\nThis create a consistent response between different platforms.\r\n\r\nSigned-off-by: Jo\u00e3o Paulo Binda Delboni <joaopdelboni@gmail.com>\r\n\r\n* Specify the charset of Graphite Request\r\nTo prevent problems with encoding in some Operational Systems we set the charset of Graphite Charset.\r\n\r\nSigned-off-by: Jo\u00e3o Paulo Binda Delboni <joaopdelboni@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "01e1e9edb6f0a4667afd99ae224673318130f36f": {
                "simpleclient_graphite_bridge/src/main/java/io/prometheus/client/bridge/Graphite.java": [
                    "public void io.prometheus.client.bridge.Graphite.push(CollectorRegistry registry)"
                ],
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ]
            },
            "570f8bb70ae6f5a0a950dc563b68fb495d2f4d69": {
                "simpleclient_graphite_bridge/src/main/java/io/prometheus/client/bridge/Graphite.java": [
                    "public void io.prometheus.client.bridge.Graphite.push(CollectorRegistry registry)"
                ],
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "ed184d8e50c82e98bb2706723fff764424840c3a",
        "previous_commit": "4ce980f1fb41debcb7b6f9fb3820d1806c11f009",
        "date": 1424190783,
        "releases": {
            "previous": "ed184d8e50c82e98bb2706723fff764424840c3a",
            "next": "ed184d8e50c82e98bb2706723fff764424840c3a"
        },
        "commit_message": "Add histogram to simpleclient.\n\nSee https://docs.google.com/document/d/1uSenXRDjDaJLV3qnSD09GqgPdEEDPjER0mVsnGaCYF0/edit\n\nRender +Inf as the server expects it.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "ed184d8e50c82e98bb2706723fff764424840c3a": {
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "static String io.prometheus.client.exporter.common.TextFormat.typeString(Collector.Type t)",
                    "public static void io.prometheus.client.exporter.common.TextFormat.write004(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ]
            },
            "4ce980f1fb41debcb7b6f9fb3820d1806c11f009": {
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "static String io.prometheus.client.exporter.common.TextFormat.typeString(Collector.Type t)",
                    "public static void io.prometheus.client.exporter.common.TextFormat.write004(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d663d040e19fa07cf8f928492b3a99e2ebce8f6b",
        "previous_commit": "8976c99f70e8939c5405594d3af0d625ec3fc573",
        "date": 1627761056,
        "releases": {
            "previous": "d663d040e19fa07cf8f928492b3a99e2ebce8f6b",
            "next": "d663d040e19fa07cf8f928492b3a99e2ebce8f6b"
        },
        "commit_message": "Add parameter to optionally strip deploy path. (#639)\n\n* Add parameter to optionally strip deploy path.\r\nCloses #631.\r\n\r\nSigned-off-by: Lapo Luchini <lapo@lapo.it>\r\n\r\n* Add documentation and test as requested in PR#639.\r\n\r\nSigned-off-by: Lapo Luchini <lapo@lapo.it>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "d663d040e19fa07cf8f928492b3a99e2ebce8f6b": {
                "simpleclient_servlet/src/main/java/io/prometheus/client/filter/MetricsFilter.java": [
                    "public void io.prometheus.client.filter.MetricsFilter.init(FilterConfig filterConfig)",
                    "public void io.prometheus.client.filter.MetricsFilter.doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)"
                ]
            },
            "8976c99f70e8939c5405594d3af0d625ec3fc573": {
                "simpleclient_servlet/src/main/java/io/prometheus/client/filter/MetricsFilter.java": [
                    "public void io.prometheus.client.filter.MetricsFilter.init(FilterConfig filterConfig)",
                    "public void io.prometheus.client.filter.MetricsFilter.doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "608592e2bf2fe124c476e804153b3c04317a0919",
        "previous_commit": "6b97066ae90248dd9a907213a703db7f73c2dcac",
        "date": 1715778583,
        "releases": {
            "previous": "608592e2bf2fe124c476e804153b3c04317a0919",
            "next": "608592e2bf2fe124c476e804153b3c04317a0919"
        },
        "commit_message": "Port Pushgateway to client_java 1.x\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "608592e2bf2fe124c476e804153b3c04317a0919": {
                "prometheus-metrics-config/src/main/java/io/prometheus/metrics/config/PrometheusPropertiesLoader.java": [
                    "public static PrometheusProperties io.prometheus.metrics.config.PrometheusPropertiesLoader.load(Map<Object, Object> externalProperties)"
                ],
                "prometheus-metrics-exporter-pushgateway/src/main/java/io/prometheus/metrics/exporter/pushgateway/PushGateway.java": [
                    "private String io.prometheus.metrics.exporter.pushgateway.PushGateway.base64url(String v)"
                ]
            },
            "6b97066ae90248dd9a907213a703db7f73c2dcac": {
                "prometheus-metrics-config/src/main/java/io/prometheus/metrics/config/PrometheusPropertiesLoader.java": [
                    "public static PrometheusProperties io.prometheus.metrics.config.PrometheusPropertiesLoader.load(Map<Object, Object> externalProperties)"
                ],
                "prometheus-metrics-exporter-pushgateway/src/main/java/io/prometheus/metrics/exporter/pushgateway/PushGateway.java": [
                    "private static String io.prometheus.metrics.exporter.pushgateway.PushGateway.base64url(String v)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1d75a2dc79dce036fe4b4e46492df61843f85e69",
        "previous_commit": "f1cc00a21dc458d2704c4775e88704df895ca875",
        "date": 1694890959,
        "releases": {
            "previous": "1d75a2dc79dce036fe4b4e46492df61843f85e69",
            "next": "1d75a2dc79dce036fe4b4e46492df61843f85e69"
        },
        "commit_message": "Add initial Hugo docs to be published on Github pages\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "1d75a2dc79dce036fe4b4e46492df61843f85e69": {
                "examples/example-exporter-httpserver/src/main/java/io/prometheus/metrics/examples/httpserver/Main.java": [
                    "public static void io.prometheus.metrics.examples.httpserver.Main.main(String[] args)"
                ],
                "prometheus-metrics-simpleclient-bridge/src/main/java/io/prometheus/metrics/simpleclient/bridge/SimpleclientCollector.java": [
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertHistogram(Collector.MetricFamilySamples samples, boolean isGaugeHistogram)"
                ]
            },
            "f1cc00a21dc458d2704c4775e88704df895ca875": {
                "examples/example-exporter-httpserver/src/main/java/io/prometheus/metrics/examples/httpserver/Main.java": [
                    "public static void io.prometheus.metrics.examples.httpserver.Main.main(String[] args)"
                ],
                "prometheus-metrics-simpleclient-bridge/src/main/java/io/prometheus/metrics/simpleclient/bridge/SimpleclientCollector.java": [
                    "private MetricSnapshot io.prometheus.metrics.simpleclient.bridge.SimpleclientCollector.convertHistogram(Collector.MetricFamilySamples samples, boolean isGaugeHistogram)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "72b79d4aea750d14b018ae278be71bbcae884129",
        "previous_commit": "8a24bdea2eef88c7655cb9173db9d058fbc780a8",
        "date": 1725888338,
        "releases": {
            "previous": "72b79d4aea750d14b018ae278be71bbcae884129",
            "next": "72b79d4aea750d14b018ae278be71bbcae884129"
        },
        "commit_message": "Fix PrometheusNaming.sanitizeMetricName() methods (#975)\n\nSigned-off-by: Mickael Maison <mickael.maison@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "72b79d4aea750d14b018ae278be71bbcae884129": {
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/PrometheusNaming.java": [
                    "public static String io.prometheus.metrics.model.snapshots.PrometheusNaming.sanitizeMetricName(String metricName, Unit unit)",
                    "private static String io.prometheus.metrics.model.snapshots.PrometheusNaming.replaceIllegalCharsInMetricName(String name)"
                ]
            },
            "8a24bdea2eef88c7655cb9173db9d058fbc780a8": {
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/PrometheusNaming.java": [
                    "public static String io.prometheus.metrics.model.snapshots.PrometheusNaming.sanitizeMetricName(String metricName, Unit unit)",
                    "private static String io.prometheus.metrics.model.snapshots.PrometheusNaming.replaceIllegalCharsInMetricName(String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6847f9fff1f0d6f79a4d8e646052da7554e56565",
        "previous_commit": "819a8576ccb159d4c3769ac49e97a59ae67858fc",
        "date": 1610981232,
        "releases": {
            "previous": "6847f9fff1f0d6f79a4d8e646052da7554e56565",
            "next": "6847f9fff1f0d6f79a4d8e646052da7554e56565"
        },
        "commit_message": "Get basic OM rendering working with HttpServer.\n\nSigned-off-by: Brian Brazil <brian.brazil@robustperception.io>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "6847f9fff1f0d6f79a4d8e646052da7554e56565": {
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "private static String io.prometheus.client.exporter.common.TextFormat.typeString(Collector.Type t)"
                ],
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ]
            },
            "819a8576ccb159d4c3769ac49e97a59ae67858fc": {
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "private static String io.prometheus.client.exporter.common.TextFormat.typeString(Collector.Type t)"
                ],
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "ca6145fdf8ad01093f09d1168fd683a1c6c64e59",
        "previous_commit": "4edf91118760f06e7b9ba12937b18850de343972",
        "date": 1649793995,
        "releases": {
            "previous": "ca6145fdf8ad01093f09d1168fd683a1c6c64e59",
            "next": "ca6145fdf8ad01093f09d1168fd683a1c6c64e59"
        },
        "commit_message": "Taking account of Fabian's propositions\nSigned-off-by: Fabrice Scellos <fabrice.scellos@soprasteria.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "ca6145fdf8ad01093f09d1168fd683a1c6c64e59": {
                "simpleclient_tracer/simpleclient_tracer_otel/src/main/java/io/prometheus/client/exemplars/tracer/otel/OpenTelemetrySpanContextSupplier.java": [
                    "public static boolean io.prometheus.client.exemplars.tracer.otel.OpenTelemetrySpanContextSupplier.isAvailable()"
                ],
                "simpleclient_tracer/simpleclient_tracer_otel_agent/src/main/java/io/prometheus/client/exemplars/tracer/otel_agent/OpenTelemetryAgentSpanContextSupplier.java": [
                    "public static boolean io.prometheus.client.exemplars.tracer.otel_agent.OpenTelemetryAgentSpanContextSupplier.isAvailable()"
                ]
            },
            "4edf91118760f06e7b9ba12937b18850de343972": {
                "simpleclient_tracer/simpleclient_tracer_otel/src/main/java/io/prometheus/client/exemplars/tracer/otel/OpenTelemetrySpanContextSupplier.java": [
                    "public static boolean io.prometheus.client.exemplars.tracer.otel.OpenTelemetrySpanContextSupplier.isAvailable()"
                ],
                "simpleclient_tracer/simpleclient_tracer_otel_agent/src/main/java/io/prometheus/client/exemplars/tracer/otel_agent/OpenTelemetryAgentSpanContextSupplier.java": [
                    "public static boolean io.prometheus.client.exemplars.tracer.otel_agent.OpenTelemetryAgentSpanContextSupplier.isAvailable()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "817afb695701a3da65b8697e4ff07a4e5ea7c7b8",
        "previous_commit": "15da580ffc38b96eb7f6f1d5991d4d368ae394c0",
        "date": 1695071486,
        "releases": {
            "previous": "817afb695701a3da65b8697e4ff07a4e5ea7c7b8",
            "next": "817afb695701a3da65b8697e4ff07a4e5ea7c7b8"
        },
        "commit_message": "Add prometheus.properties example\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "817afb695701a3da65b8697e4ff07a4e5ea7c7b8": {
                "prometheus-metrics-exporter-httpserver/src/main/java/io/prometheus/metrics/exporter/httpserver/HTTPServer.java": [
                    "private InetSocketAddress io.prometheus.metrics.exporter.httpserver.HTTPServer.makeInetSocketAddress()",
                    "private int io.prometheus.metrics.exporter.httpserver.HTTPServer.findPort()"
                ]
            },
            "15da580ffc38b96eb7f6f1d5991d4d368ae394c0": {
                "prometheus-metrics-exporter-httpserver/src/main/java/io/prometheus/metrics/exporter/httpserver/HTTPServer.java": [
                    "private InetSocketAddress io.prometheus.metrics.exporter.httpserver.HTTPServer.makeInetSocketAddress()",
                    "private int io.prometheus.metrics.exporter.httpserver.HTTPServer.findPort()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c208b817c60035bcc07ea9008e6c1d6a066ddc40",
        "previous_commit": "8aea91493bd6ff1a6c478131d7607cb0495ff965",
        "date": 1693340734,
        "releases": {
            "previous": "c208b817c60035bcc07ea9008e6c1d6a066ddc40",
            "next": "c208b817c60035bcc07ea9008e6c1d6a066ddc40"
        },
        "commit_message": "Add HTTPServer exporter\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "c208b817c60035bcc07ea9008e6c1d6a066ddc40": {
                "examples/example-tomcat-servlet/src/main/java/io/prometheus/metrics/examples/tomcat_servlet/Main.java": [
                    "public static void io.prometheus.metrics.examples.tomcat_servlet.Main.main(String[] args)"
                ],
                "prometheus-metrics-exporter-servlet-jakarta/src/main/java/io/prometheus/metrics/exporter/servlet/jakarta/PrometheusMetricsServlet.java": [
                    "protected void io.prometheus.metrics.exporter.servlet.jakarta.PrometheusMetricsServlet.doGet(HttpServletRequest request, HttpServletResponse response)"
                ]
            },
            "8aea91493bd6ff1a6c478131d7607cb0495ff965": {
                "examples/example-tomcat-servlet/src/main/java/io/prometheus/metrics/examples/tomcat_servlet/Main.java": [
                    "public static void io.prometheus.metrics.examples.tomcat_servlet.Main.main(String[] args)"
                ],
                "prometheus-metrics-exporter-servlet-jakarta/src/main/java/io/prometheus/metrics/exporter/servlet/jakarta/PrometheusMetricsServlet.java": [
                    "protected void io.prometheus.metrics.exporter.servlet.jakarta.PrometheusMetricsServlet.doGet(HttpServletRequest request, HttpServletResponse response)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4618df7471c8ed49ba09f25b9b64e2674debb5a5",
        "previous_commit": "3a54fdffe5df9a3d3db2071fda0d4fcee7915656",
        "date": 1602778937,
        "releases": {
            "previous": "4618df7471c8ed49ba09f25b9b64e2674debb5a5",
            "next": "4618df7471c8ed49ba09f25b9b64e2674debb5a5"
        },
        "commit_message": "Make sure GZIPOutputStream is always closed (#598)\n\nSigned-off-by: Andrey Turbanov <turbanoff@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "4618df7471c8ed49ba09f25b9b64e2674debb5a5": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)",
                    "protected static boolean io.prometheus.client.exporter.HTTPServer.shouldUseCompression(HttpExchange exchange)"
                ]
            },
            "3a54fdffe5df9a3d3db2071fda0d4fcee7915656": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)",
                    "protected static boolean io.prometheus.client.exporter.HTTPServer.shouldUseCompression(HttpExchange exchange)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "fd931c1c6a88bab379fbc91cf3c933dd71dc19a1",
        "previous_commit": "ce3f5d9736ed59421630a8367f6ae21def47e8e6",
        "date": 1640160685,
        "releases": {
            "previous": "fd931c1c6a88bab379fbc91cf3c933dd71dc19a1",
            "next": "fd931c1c6a88bab379fbc91cf3c933dd71dc19a1"
        },
        "commit_message": "Fix MetricsServlet initialization (#739)\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "fd931c1c6a88bab379fbc91cf3c933dd71dc19a1": {
                "simpleclient_servlet/src/main/java/io/prometheus/client/exporter/MetricsServlet.java": [
                    "public void io.prometheus.client.exporter.MetricsServlet.init(ServletConfig servletConfig)"
                ],
                "simpleclient_servlet_jakarta/src/main/java/io/prometheus/client/servlet/jakarta/exporter/MetricsServlet.java": [
                    "public void io.prometheus.client.servlet.jakarta.exporter.MetricsServlet.init(ServletConfig servletConfig)"
                ]
            },
            "ce3f5d9736ed59421630a8367f6ae21def47e8e6": {
                "simpleclient_servlet/src/main/java/io/prometheus/client/exporter/MetricsServlet.java": [
                    "public void io.prometheus.client.exporter.MetricsServlet.init(ServletConfig servletConfig)"
                ],
                "simpleclient_servlet_jakarta/src/main/java/io/prometheus/client/servlet/jakarta/exporter/MetricsServlet.java": [
                    "public void io.prometheus.client.servlet.jakarta.exporter.MetricsServlet.init(ServletConfig servletConfig)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "4b6e78fbff8e794cb141e02c46a4d1d36113db4b",
        "previous_commit": "eb9a77f1dccdd025aeecc63c0b3a3e5f2398e18f",
        "date": 1712179053,
        "releases": {
            "previous": "4b6e78fbff8e794cb141e02c46a4d1d36113db4b",
            "next": "4b6e78fbff8e794cb141e02c46a4d1d36113db4b"
        },
        "commit_message": "Add load(Map) overload to PrometheusPropertiesLoader\n\nSigned-off-by: Jonatan Ivanov <jonatan.ivanov@gmail.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "4b6e78fbff8e794cb141e02c46a4d1d36113db4b": {
                "prometheus-metrics-config/src/main/java/io/prometheus/metrics/config/PrometheusPropertiesLoader.java": [
                    "public static PrometheusProperties io.prometheus.metrics.config.PrometheusPropertiesLoader.load(Map<Object, Object> externalProperties)",
                    "public static PrometheusProperties io.prometheus.metrics.config.PrometheusPropertiesLoader.load()"
                ]
            },
            "eb9a77f1dccdd025aeecc63c0b3a3e5f2398e18f": {
                "prometheus-metrics-config/src/main/java/io/prometheus/metrics/config/PrometheusPropertiesLoader.java": [
                    "public static PrometheusProperties io.prometheus.metrics.config.PrometheusPropertiesLoader.load()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d84b0fababc439d5f8ccad33edea68a62b8082f6",
        "previous_commit": "8bb75446c6dca2a4e2c074e39fe34c1b061b028a",
        "date": 1710994528,
        "releases": {
            "previous": "d84b0fababc439d5f8ccad33edea68a62b8082f6",
            "next": "d84b0fababc439d5f8ccad33edea68a62b8082f6"
        },
        "commit_message": "Added try/finally to close the HttpExchange\n\nSigned-off-by: dhoard <doug.hoard@gmail.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "d84b0fababc439d5f8ccad33edea68a62b8082f6": {
                "prometheus-metrics-exporter-httpserver/src/main/java/io/prometheus/metrics/exporter/httpserver/DefaultHandler.java": [
                    "public void io.prometheus.metrics.exporter.httpserver.DefaultHandler.handle(HttpExchange exchange)"
                ],
                "prometheus-metrics-exporter-httpserver/src/main/java/io/prometheus/metrics/exporter/httpserver/HealthyHandler.java": [
                    "public void io.prometheus.metrics.exporter.httpserver.HealthyHandler.handle(HttpExchange exchange)"
                ]
            },
            "8bb75446c6dca2a4e2c074e39fe34c1b061b028a": {
                "prometheus-metrics-exporter-httpserver/src/main/java/io/prometheus/metrics/exporter/httpserver/DefaultHandler.java": [
                    "public void io.prometheus.metrics.exporter.httpserver.DefaultHandler.handle(HttpExchange exchange)"
                ],
                "prometheus-metrics-exporter-httpserver/src/main/java/io/prometheus/metrics/exporter/httpserver/HealthyHandler.java": [
                    "public void io.prometheus.metrics.exporter.httpserver.HealthyHandler.handle(HttpExchange exchange)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "37fa7fb33c49cfbb9d2620ee59e350e23af8d2fc",
        "previous_commit": "92d34e36ef1d75c8b99af652484003bc212e03dc",
        "date": 1610982069,
        "releases": {
            "previous": "37fa7fb33c49cfbb9d2620ee59e350e23af8d2fc",
            "next": "37fa7fb33c49cfbb9d2620ee59e350e23af8d2fc"
        },
        "commit_message": "Add support for Info metrics\n\nSigned-off-by: Brian Brazil <brian.brazil@robustperception.io>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "37fa7fb33c49cfbb9d2620ee59e350e23af8d2fc": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private List<String> io.prometheus.client.CollectorRegistry.collectorNames(Collector m)"
                ],
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.write004(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ]
            },
            "92d34e36ef1d75c8b99af652484003bc212e03dc": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private List<String> io.prometheus.client.CollectorRegistry.collectorNames(Collector m)"
                ],
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.write004(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "27fe3b733165230c4f5ae6f9bbf3242b095b8ad7",
        "previous_commit": "98967b8367216f4107ad5621f260ed895c930262",
        "date": 1691276631,
        "releases": {
            "previous": "27fe3b733165230c4f5ae6f9bbf3242b095b8ad7",
            "next": "27fe3b733165230c4f5ae6f9bbf3242b095b8ad7"
        },
        "commit_message": "Changed to remove use of inefficient String method\n\nSigned-off-by: dhoard <doug.hoard@gmail.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "27fe3b733165230c4f5ae6f9bbf3242b095b8ad7": {
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "private static void io.prometheus.client.exporter.common.TextFormat.writeEscapedHelp(Writer writer, String s)",
                    "private static void io.prometheus.client.exporter.common.TextFormat.writeEscapedLabelValue(Writer writer, String s)"
                ]
            },
            "98967b8367216f4107ad5621f260ed895c930262": {
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "private static void io.prometheus.client.exporter.common.TextFormat.writeEscapedHelp(Writer writer, String s)",
                    "private static void io.prometheus.client.exporter.common.TextFormat.writeEscapedLabelValue(Writer writer, String s)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "5b286bcbf073e18fa33d3c41138b1563a44de3e1",
        "previous_commit": "66c97259c0dbfd266267c230ab83ca9afd811bd5",
        "date": 1711095027,
        "releases": {
            "previous": "5b286bcbf073e18fa33d3c41138b1563a44de3e1",
            "next": "5b286bcbf073e18fa33d3c41138b1563a44de3e1"
        },
        "commit_message": "Add get() method for Counter and Gauge (#920)\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "5b286bcbf073e18fa33d3c41138b1563a44de3e1": {
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/Counter.java": [
                    "private CounterSnapshot.CounterDataPointSnapshot io.prometheus.metrics.core.metrics.Counter.collect(Labels labels)"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/Gauge.java": [
                    "private GaugeSnapshot.GaugeDataPointSnapshot io.prometheus.metrics.core.metrics.Gauge.collect(Labels labels)"
                ]
            },
            "66c97259c0dbfd266267c230ab83ca9afd811bd5": {
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/Counter.java": [
                    "private CounterSnapshot.CounterDataPointSnapshot io.prometheus.metrics.core.metrics.Counter.collect(Labels labels)"
                ],
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/Gauge.java": [
                    "private GaugeSnapshot.GaugeDataPointSnapshot io.prometheus.metrics.core.metrics.Gauge.collect(Labels labels)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bc2244d635598813d0845900c4d4db94895ca224",
        "previous_commit": "a192c7887e7542c982d7f07e30fcd2737b4a73ea",
        "date": 1699547585,
        "releases": {
            "previous": "bc2244d635598813d0845900c4d4db94895ca224",
            "next": "bc2244d635598813d0845900c4d4db94895ca224"
        },
        "commit_message": "Fix sliding window rotation #894 (#896)\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "bc2244d635598813d0845900c4d4db94895ca224": {
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/SlidingWindow.java": [
                    "private T io.prometheus.metrics.core.metrics.SlidingWindow<T>.rotate()",
                    "public synchronized void io.prometheus.metrics.core.metrics.SlidingWindow<T>.observe(double value)"
                ]
            },
            "a192c7887e7542c982d7f07e30fcd2737b4a73ea": {
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/metrics/SlidingWindow.java": [
                    "private T io.prometheus.metrics.core.metrics.SlidingWindow<T>.rotate()",
                    "public synchronized void io.prometheus.metrics.core.metrics.SlidingWindow<T>.observe(double value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5f7292054d03d7eef268fd785695e21a5835e55d",
        "previous_commit": "755ba6e89e75525ba5fab502b3014156d485f7a9",
        "date": 1511254563,
        "releases": {
            "previous": "5f7292054d03d7eef268fd785695e21a5835e55d",
            "next": "5f7292054d03d7eef268fd785695e21a5835e55d"
        },
        "commit_message": "add initial memory metrics (#317)\n\n* add initial memory metrics (https://github.com/prometheus/client_java/issues/312)\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "5f7292054d03d7eef268fd785695e21a5835e55d": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/MemoryPoolsExports.java": [
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryPoolMetrics(List<MetricFamilySamples> sampleFamilies)",
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryAreaMetrics(List<MetricFamilySamples> sampleFamilies)"
                ]
            },
            "755ba6e89e75525ba5fab502b3014156d485f7a9": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/MemoryPoolsExports.java": [
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryPoolMetrics(List<MetricFamilySamples> sampleFamilies)",
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryAreaMetrics(List<MetricFamilySamples> sampleFamilies)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "65ca8bd19382c4f35f7f8d10e2cc462faf3adf3c",
        "previous_commit": "48c18e5f189b8950111a7c2e0ada7f03fbfb68ad",
        "date": 1638745520,
        "releases": {
            "previous": "65ca8bd19382c4f35f7f8d10e2cc462faf3adf3c",
            "next": "65ca8bd19382c4f35f7f8d10e2cc462faf3adf3c"
        },
        "commit_message": "Refactored code to delegate Base64 encoding to either java.util.Base64 or javax.xml.bind.DatatypeConverter depending on the running JVM version. (#698)\n\nSigned-off-by: Doug Hoard <doug.hoard@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "65ca8bd19382c4f35f7f8d10e2cc462faf3adf3c": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/BasicAuthHttpConnectionFactory.java": [
                    "private String io.prometheus.client.exporter.BasicAuthHttpConnectionFactory.encode(String user, String password)"
                ],
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "private static String io.prometheus.client.exporter.PushGateway.base64url(String v)"
                ]
            },
            "48c18e5f189b8950111a7c2e0ada7f03fbfb68ad": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/BasicAuthHttpConnectionFactory.java": [
                    "private String io.prometheus.client.exporter.BasicAuthHttpConnectionFactory.encode(String user, String password)"
                ],
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "private static String io.prometheus.client.exporter.PushGateway.base64url(String v)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "8076e9cf2bc4c9809ae855441c70cd813b0d816f",
        "previous_commit": "c57e49cab206777e09b48e350455225148039433",
        "date": 1695544776,
        "releases": {
            "previous": "8076e9cf2bc4c9809ae855441c70cd813b0d816f",
            "next": "8076e9cf2bc4c9809ae855441c70cd813b0d816f"
        },
        "commit_message": "Complete config documentation.\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "8076e9cf2bc4c9809ae855441c70cd813b0d816f": {
                "prometheus-metrics-config/src/main/java/io/prometheus/metrics/config/ExporterFilterProperties.java": [
                    "static ExporterFilterProperties io.prometheus.metrics.config.ExporterFilterProperties.load(String prefix, Map<Object, Object> properties)"
                ],
                "prometheus-metrics-exporter-common/src/main/java/io/prometheus/metrics/exporter/common/PrometheusScrapeHandler.java": [
                    "private Predicate<String> io.prometheus.metrics.exporter.common.PrometheusScrapeHandler.makeNameFilter(ExporterFilterProperties props)"
                ]
            },
            "c57e49cab206777e09b48e350455225148039433": {
                "prometheus-metrics-config/src/main/java/io/prometheus/metrics/config/ExporterFilterProperties.java": [
                    "static ExporterFilterProperties io.prometheus.metrics.config.ExporterFilterProperties.load(String prefix, Map<Object, Object> properties)"
                ],
                "prometheus-metrics-exporter-common/src/main/java/io/prometheus/metrics/exporter/common/PrometheusScrapeHandler.java": [
                    "private Predicate<String> io.prometheus.metrics.exporter.common.PrometheusScrapeHandler.makeNameFilter(ExporterFilterProperties props)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fc2bfaf21eb7740525e0d9c0d1054110e23406c2",
        "previous_commit": "4bf235ebe2ab946bf7045e4a53dc365b85d9d8df",
        "date": 1484048742,
        "releases": {
            "previous": "fc2bfaf21eb7740525e0d9c0d1054110e23406c2",
            "next": "fc2bfaf21eb7740525e0d9c0d1054110e23406c2"
        },
        "commit_message": "Expose `SimpleTimer` to keep timing logic that returns elapsed seconds (#172)\n\n* Fix JavaDoc typos\r\n\r\n* Create `SimpleTimer` that merely tracks duration\r\n\r\nThe elapsed duration can be sent to a summary as an observation\r\n\r\n* Extract inner SimpleTimer into separate class\r\n\r\nReuse the SimpleTimer between Histogram and Summary\r\nAdd JavaDoc explaining usage and preference\r\nAdd SimpleTimer test\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "fc2bfaf21eb7740525e0d9c0d1054110e23406c2": {
                "simpleclient/src/main/java/io/prometheus/client/Histogram.java": [
                    "public double io.prometheus.client.Histogram.observeDuration()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "public double io.prometheus.client.Summary.observeDuration()"
                ]
            },
            "4bf235ebe2ab946bf7045e4a53dc365b85d9d8df": {
                "simpleclient/src/main/java/io/prometheus/client/Histogram.java": [
                    "public double io.prometheus.client.Histogram.observeDuration()"
                ],
                "simpleclient/src/main/java/io/prometheus/client/Summary.java": [
                    "public double io.prometheus.client.Summary.observeDuration()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "e1913a0078534bea9cfecb5e29bfa93043a4ba51",
        "previous_commit": "340251a09b45524547a6a004623d5bfa5993e0a4",
        "date": 1545066127,
        "releases": {
            "previous": "e1913a0078534bea9cfecb5e29bfa93043a4ba51",
            "next": "e1913a0078534bea9cfecb5e29bfa93043a4ba51"
        },
        "commit_message": "Dropwizard: Pass on labels when no custom mapping matched (#447)\n\nSigned-off-by: Tom Wieczorek <t.wieczorek@yieldlab.de>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "e1913a0078534bea9cfecb5e29bfa93043a4ba51": {
                "simpleclient_dropwizard/src/main/java/io/prometheus/client/dropwizard/samplebuilder/CustomMappingSampleBuilder.java": [
                    "public Collector.MetricFamilySamples.Sample io.prometheus.client.dropwizard.samplebuilder.CustomMappingSampleBuilder.createSample(final String dropwizardName, final String nameSuffix, final List<String> additionalLabelNames, final List<String> additionalLabelValues, final double value)"
                ]
            },
            "340251a09b45524547a6a004623d5bfa5993e0a4": {
                "simpleclient_dropwizard/src/main/java/io/prometheus/client/dropwizard/samplebuilder/CustomMappingSampleBuilder.java": [
                    "public Collector.MetricFamilySamples.Sample io.prometheus.client.dropwizard.samplebuilder.CustomMappingSampleBuilder.createSample(final String dropwizardName, final String nameSuffix, final List<String> additionalLabelNames, final List<String> additionalLabelValues, final double value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "2ae979d459b7cd3d9856fc8220eafefeab816fb6",
        "previous_commit": "dfc559d5d823b746c3c2af7555838a032b418dde",
        "date": 1715796757,
        "releases": {
            "previous": "2ae979d459b7cd3d9856fc8220eafefeab816fb6",
            "next": "2ae979d459b7cd3d9856fc8220eafefeab816fb6"
        },
        "commit_message": "Add comments to the HTTPServer start() method\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "2ae979d459b7cd3d9856fc8220eafefeab816fb6": {
                "integration-tests/it-exporter/it-exporter-httpserver-sample/src/main/java/io/prometheus/metrics/it/exporter/httpserver/HTTPServerSample.java": [
                    "public static void io.prometheus.metrics.it.exporter.httpserver.HTTPServerSample.main(String[] args)"
                ]
            },
            "dfc559d5d823b746c3c2af7555838a032b418dde": {
                "integration-tests/it-exporter/it-exporter-httpserver-sample/src/main/java/io/prometheus/metrics/it/exporter/httpserver/HTTPServerSample.java": [
                    "public static void io.prometheus.metrics.it.exporter.httpserver.HTTPServerSample.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8c40e23fbe153158eabc99af1d2bf039d0788f48",
        "previous_commit": "7a77d9e8bf9b00793f258a4505ff438b8e33176f",
        "date": 1495456238,
        "releases": {
            "previous": "8c40e23fbe153158eabc99af1d2bf039d0788f48",
            "next": "8c40e23fbe153158eabc99af1d2bf039d0788f48"
        },
        "commit_message": "name[] rather than names[] for series filtering.\n\nFix vertx implementation.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "8c40e23fbe153158eabc99af1d2bf039d0788f48": {
                "simpleclient_vertx/src/main/java/io/prometheus/client/vertx/MetricsHandler.java": [
                    "private Set<String> io.prometheus.client.vertx.MetricsHandler.parse(HttpServerRequest request)"
                ]
            },
            "7a77d9e8bf9b00793f258a4505ff438b8e33176f": {
                "simpleclient_vertx/src/main/java/io/prometheus/client/vertx/MetricsHandler.java": [
                    "private Set<String> io.prometheus.client.vertx.MetricsHandler.parse(HttpServerRequest request)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "26156b52f6f62a918d92ff14efab68d4e0e8ce8e",
        "previous_commit": "af8d033d3c00b49d3f50f39e9e6645467e124622",
        "date": 1499684938,
        "releases": {
            "previous": "26156b52f6f62a918d92ff14efab68d4e0e8ce8e",
            "next": "26156b52f6f62a918d92ff14efab68d4e0e8ce8e"
        },
        "commit_message": "add instrumented QueuedThreadPool (#247)\n\nusing counters instead of gauges in JettyStatisticsCollector\r\n\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "26156b52f6f62a918d92ff14efab68d4e0e8ce8e": {
                "simpleclient_jetty/src/main/java/io/prometheus/client/jetty/JettyStatisticsCollector.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.jetty.JettyStatisticsCollector.collect()"
                ]
            },
            "af8d033d3c00b49d3f50f39e9e6645467e124622": {
                "simpleclient_jetty/src/main/java/io/prometheus/client/jetty/JettyStatisticsCollector.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.jetty.JettyStatisticsCollector.collect()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "9d14f766c6c73c26ebdfdf0bb0940a86bbf80df6",
        "previous_commit": "c4ef25c6bb7f4a186e27cc45711a339913491cb6",
        "date": 1517124964,
        "releases": {
            "previous": "9d14f766c6c73c26ebdfdf0bb0940a86bbf80df6",
            "next": "9d14f766c6c73c26ebdfdf0bb0940a86bbf80df6"
        },
        "commit_message": "Improve CollectorRegistry#unregister() (#335)\n\n- In 'unregister', remove the collector before its names, so\r\nwe do instructions in the reverse order compare to 'register'.\r\nIt is consistent with 'clear'.\r\n- So we do 1 lookup in collectors hash map instead of 2.\r\n\r\nSigned-off-by: Cyril Martin <c.martin@criteo.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "9d14f766c6c73c26ebdfdf0bb0940a86bbf80df6": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "public void io.prometheus.client.CollectorRegistry.unregister(Collector m)"
                ]
            },
            "c4ef25c6bb7f4a186e27cc45711a339913491cb6": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "public void io.prometheus.client.CollectorRegistry.unregister(Collector m)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "82b216dc9e1107e8b13b19b1b8856ea4f516c7d7",
        "previous_commit": "c10a7414ebe8cf4fe497acc47dbb9f5974834dcd",
        "date": 1464092764,
        "releases": {
            "previous": "82b216dc9e1107e8b13b19b1b8856ea4f516c7d7",
            "next": "82b216dc9e1107e8b13b19b1b8856ea4f516c7d7"
        },
        "commit_message": "Remove sum from Summary\n\nJust summing all snapshot values does not work with\r\ndropwizard metrics, because the values array does not\r\nhold all values but only a sample of recent values.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "82b216dc9e1107e8b13b19b1b8856ea4f516c7d7": {
                "simpleclient_dropwizard/src/main/java/io/prometheus/client/dropwizard/DropwizardExports.java": [
                    "List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.fromSnapshotAndCount(String name, Snapshot snapshot, long count, double factor, String helpMessage)"
                ]
            },
            "c10a7414ebe8cf4fe497acc47dbb9f5974834dcd": {
                "simpleclient_dropwizard/src/main/java/io/prometheus/client/dropwizard/DropwizardExports.java": [
                    "List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.fromSnapshotAndCount(String name, Snapshot snapshot, long count, double factor, String helpMessage)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "966360b2735fb975a7110699efd4cb62284dfc0b",
        "previous_commit": "4b6e78fbff8e794cb141e02c46a4d1d36113db4b",
        "date": 1712214150,
        "releases": {
            "previous": "966360b2735fb975a7110699efd4cb62284dfc0b",
            "next": "966360b2735fb975a7110699efd4cb62284dfc0b"
        },
        "commit_message": "Remove import for SpanContextSupplier\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "966360b2735fb975a7110699efd4cb62284dfc0b": {
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/exemplars/ExemplarSampler.java": [
                    "private Labels io.prometheus.metrics.core.exemplars.ExemplarSampler.doSampleExemplar()"
                ]
            },
            "4b6e78fbff8e794cb141e02c46a4d1d36113db4b": {
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/exemplars/ExemplarSampler.java": [
                    "private Labels io.prometheus.metrics.core.exemplars.ExemplarSampler.doSampleExemplar()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4f64a6c18b8afa02e56114b3a4e7ff735e8dca97",
        "previous_commit": "f1950039de5be7666294cf0fe4e6ae34e5b330a9",
        "date": 1508146920,
        "releases": {
            "previous": "4f64a6c18b8afa02e56114b3a4e7ff735e8dca97",
            "next": "4f64a6c18b8afa02e56114b3a4e7ff735e8dca97"
        },
        "commit_message": "Shutdown executor service to avoid non-daemon threads potentially blocking exiting JVMs. (#303)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "4f64a6c18b8afa02e56114b3a4e7ff735e8dca97": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.stop()"
                ]
            },
            "f1950039de5be7666294cf0fe4e6ae34e5b330a9": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.stop()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "756b5ebcda6d9b5b5c9f66ac565cd459153ff3b4",
        "previous_commit": "84262002f3e2edbf09754e3eb80e28597dc1179a",
        "date": 1649793995,
        "releases": {
            "previous": "756b5ebcda6d9b5b5c9f66ac565cd459153ff3b4",
            "next": "756b5ebcda6d9b5b5c9f66ac565cd459153ff3b4"
        },
        "commit_message": "Adding TraceSampling to Examplar Sampler -  Signed-off-by: Fabrice Scellos <fabrice.scellos@soprasteria.com>\n\nSigned-off-by: Fabrice Scellos <fabrice.scellos@soprasteria.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "756b5ebcda6d9b5b5c9f66ac565cd459153ff3b4": {
                "simpleclient/src/main/java/io/prometheus/client/exemplars/DefaultExemplarSampler.java": [
                    "private Exemplar io.prometheus.client.exemplars.DefaultExemplarSampler.doSample(double value, Exemplar previous)"
                ]
            },
            "84262002f3e2edbf09754e3eb80e28597dc1179a": {
                "simpleclient/src/main/java/io/prometheus/client/exemplars/DefaultExemplarSampler.java": [
                    "private Exemplar io.prometheus.client.exemplars.DefaultExemplarSampler.doSample(double value, Exemplar previous)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "82b48dff77fda170a3a7e11f9287bc53ce95f830",
        "previous_commit": "e19ecd451ac4e65a23cdc48150bd73437361ed61",
        "date": 1495456238,
        "releases": {
            "previous": "82b48dff77fda170a3a7e11f9287bc53ce95f830",
            "next": "82b48dff77fda170a3a7e11f9287bc53ce95f830"
        },
        "commit_message": "Filter based on time series, not metric.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "82b48dff77fda170a3a7e11f9287bc53ce95f830": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private Collector.MetricFamilySamples io.prometheus.client.CollectorRegistry.filter(Collector.MetricFamilySamples next)"
                ]
            },
            "e19ecd451ac4e65a23cdc48150bd73437361ed61": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private Collector.MetricFamilySamples io.prometheus.client.CollectorRegistry.filter(Collector.MetricFamilySamples next)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "c28b901225e35e7c1df0eacae8b58fdfbb390162",
        "previous_commit": "1966186deaaa83aec496d88ff604a90795bad688",
        "date": 1663880349,
        "releases": {
            "previous": "c28b901225e35e7c1df0eacae8b58fdfbb390162",
            "next": "c28b901225e35e7c1df0eacae8b58fdfbb390162"
        },
        "commit_message": "Fix rounding errors when creating histogram buckets\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "c28b901225e35e7c1df0eacae8b58fdfbb390162": {
                "simpleclient/src/main/java/io/prometheus/client/Histogram.java": [
                    "public Builder io.prometheus.client.Histogram.linearBuckets(double start, double width, int count)"
                ]
            },
            "1966186deaaa83aec496d88ff604a90795bad688": {
                "simpleclient/src/main/java/io/prometheus/client/Histogram.java": [
                    "public Builder io.prometheus.client.Histogram.linearBuckets(double start, double width, int count)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d37ad738d8a503aba9fca841afbdc366aecbf901",
        "previous_commit": "17b552c225392e3331319bced40f83e2eb7ea597",
        "date": 1622323705,
        "releases": {
            "previous": "d37ad738d8a503aba9fca841afbdc366aecbf901",
            "next": "d37ad738d8a503aba9fca841afbdc366aecbf901"
        },
        "commit_message": "Add \"jvm_objects_pending_finalization\" counter providing access to MemoryMXBean.getObjectPendingFinalizationCount()\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "d37ad738d8a503aba9fca841afbdc366aecbf901": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/MemoryPoolsExports.java": [
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryAreaMetrics(List<MetricFamilySamples> sampleFamilies)"
                ]
            },
            "17b552c225392e3331319bced40f83e2eb7ea597": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/MemoryPoolsExports.java": [
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryAreaMetrics(List<MetricFamilySamples> sampleFamilies)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "ddf03f1a939d7c41659bdf7b4a150657ffa5cadb",
        "previous_commit": "ba220f75c8d4ced25b4a18cbb92abb61e6fc626e",
        "date": 1571050356,
        "releases": {
            "previous": "ddf03f1a939d7c41659bdf7b4a150657ffa5cadb",
            "next": "ddf03f1a939d7c41659bdf7b4a150657ffa5cadb"
        },
        "commit_message": "Allow for 200 response code from pgw 0.10.0\n\nSigned-off-by: Brian Brazil <brian.brazil@robustperception.io>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "ddf03f1a939d7c41659bdf7b4a150657ffa5cadb": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "void io.prometheus.client.exporter.PushGateway.doRequest(CollectorRegistry registry, String job, Map<String, String> groupingKey, String method)"
                ]
            },
            "ba220f75c8d4ced25b4a18cbb92abb61e6fc626e": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "void io.prometheus.client.exporter.PushGateway.doRequest(CollectorRegistry registry, String job, Map<String, String> groupingKey, String method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "4a9347202e8fe30f9aab50bc84769e0b1a5b443e",
        "previous_commit": "c0a38270c021e4d63998a98a68bacf2b6f32ace5",
        "date": 1716461099,
        "releases": {
            "previous": "4a9347202e8fe30f9aab50bc84769e0b1a5b443e",
            "next": "4a9347202e8fe30f9aab50bc84769e0b1a5b443e"
        },
        "commit_message": "Add method for sanitizing Unit names\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "4a9347202e8fe30f9aab50bc84769e0b1a5b443e": {
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/PrometheusNaming.java": [
                    "private static String io.prometheus.metrics.model.snapshots.PrometheusNaming.replaceIllegalCharsInUnitName(String name)"
                ]
            },
            "c0a38270c021e4d63998a98a68bacf2b6f32ace5": {
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/PrometheusNaming.java": [
                    "private static String io.prometheus.metrics.model.snapshots.PrometheusNaming.replaceIllegalCharsInLabelName(String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a4781a5fd29dd3415d6224692815f10127c50850",
        "previous_commit": "c50ca363f8086ea337d8fa14a3db269794a99b43",
        "date": 1494412546,
        "releases": {
            "previous": "a4781a5fd29dd3415d6224692815f10127c50850",
            "next": "a4781a5fd29dd3415d6224692815f10127c50850"
        },
        "commit_message": "Use correct encoding for pushgateway when -Dfile.encoding != UTF-8\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "a4781a5fd29dd3415d6224692815f10127c50850": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "void io.prometheus.client.exporter.PushGateway.doRequest(CollectorRegistry registry, String job, Map<String, String> groupingKey, String method)"
                ]
            },
            "c50ca363f8086ea337d8fa14a3db269794a99b43": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "void io.prometheus.client.exporter.PushGateway.doRequest(CollectorRegistry registry, String job, Map<String, String> groupingKey, String method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "cb0c862ca52231e6369ef4d9e1ef5b9178e763e6",
        "previous_commit": "f3bfba1f324a22d42ce60852ac07a972e97fbaf3",
        "date": 1657445356,
        "releases": {
            "previous": "cb0c862ca52231e6369ef4d9e1ef5b9178e763e6",
            "next": "cb0c862ca52231e6369ef4d9e1ef5b9178e763e6"
        },
        "commit_message": "Added CompilationMXBean compilation time metric (#798)\n\nSigned-off-by: Doug Hoard <doug.hoard@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "cb0c862ca52231e6369ef4d9e1ef5b9178e763e6": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/DefaultExports.java": [
                    "public static void io.prometheus.client.hotspot.DefaultExports.register(CollectorRegistry registry)"
                ]
            },
            "f3bfba1f324a22d42ce60852ac07a972e97fbaf3": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/DefaultExports.java": [
                    "public static void io.prometheus.client.hotspot.DefaultExports.register(CollectorRegistry registry)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "18bdc332eb66a6600bec896dcfd10a13be6ab0f4",
        "previous_commit": "5817253028476ab2d17eb6a0613fe3da3bc185f0",
        "date": 1697401927,
        "releases": {
            "previous": "18bdc332eb66a6600bec896dcfd10a13be6ab0f4",
            "next": "18bdc332eb66a6600bec896dcfd10a13be6ab0f4"
        },
        "commit_message": "Remove unneccessary name filter\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "18bdc332eb66a6600bec896dcfd10a13be6ab0f4": {
                "prometheus-metrics-exporter-common/src/main/java/io/prometheus/metrics/exporter/common/PrometheusScrapeHandler.java": [
                    "private Predicate<String> io.prometheus.metrics.exporter.common.PrometheusScrapeHandler.makeNameFilter(String[] includedNames)"
                ]
            },
            "5817253028476ab2d17eb6a0613fe3da3bc185f0": {
                "prometheus-metrics-exporter-common/src/main/java/io/prometheus/metrics/exporter/common/PrometheusScrapeHandler.java": [
                    "private Predicate<String> io.prometheus.metrics.exporter.common.PrometheusScrapeHandler.makeNameFilter(String[] includedNames)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "065c5da5c1bda83da52153b4bd8b6714a65ca75f",
        "previous_commit": "ddd1533140f8c67f7466abdd8c5f3343a3c2adb0",
        "date": 1484822804,
        "releases": {
            "previous": "065c5da5c1bda83da52153b4bd8b6714a65ca75f",
            "next": "065c5da5c1bda83da52153b4bd8b6714a65ca75f"
        },
        "commit_message": "Invoke processCpuTime with reflection to bridge ibm/sun diffs (#176)\n\n* Invoke processCpuTime with reflection to bridge ibm/sun diffs\r\n\r\nFixes #174",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "065c5da5c1bda83da52153b4bd8b6714a65ca75f": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/StandardExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.StandardExports.collect()"
                ]
            },
            "ddd1533140f8c67f7466abdd8c5f3343a3c2adb0": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/StandardExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.StandardExports.collect()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "3568b2477c60dcde4d9380b666ad60a33d0f4208",
        "previous_commit": "a3954b03512376050f3609ae9fa462fda7fb427a",
        "date": 1643988141,
        "releases": {
            "previous": "3568b2477c60dcde4d9380b666ad60a33d0f4208",
            "next": "3568b2477c60dcde4d9380b666ad60a33d0f4208"
        },
        "commit_message": "Remove call to Math.floor in f()\n\nSince we can be sure that the result is always positive, rounding down is faster than using Math.floor while getting the same result.\n\n```\nBenchmark                               Mode  Cnt   Score   Error  Units\nCKMSQuantileBenchmark.ckmsQuantileF  avgt    4  37,188 \u00b1 6,681  ns/op\nCKMSQuantileBenchmark.ckmsQuantileF  avgt    4  20,500 \u00b1 1,054  ns/op <= Without floor()\n```\n\nSigned-off-by: Jens <jenskat@gmail.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "3568b2477c60dcde4d9380b666ad60a33d0f4208": {
                "simpleclient/src/main/java/io/prometheus/client/CKMSQuantiles.java": [
                    "int io.prometheus.client.CKMSQuantiles.f(int r)"
                ]
            },
            "a3954b03512376050f3609ae9fa462fda7fb427a": {
                "simpleclient/src/main/java/io/prometheus/client/CKMSQuantiles.java": [
                    "int io.prometheus.client.CKMSQuantiles.f(int r)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "0f0d3020a4fa3e03c1d38bc5d926ce8448659eee",
        "previous_commit": "c5a95d95679bf21c2e2836d3e9ca11e025af554d",
        "date": 1694182452,
        "releases": {
            "previous": "0f0d3020a4fa3e03c1d38bc5d926ce8448659eee",
            "next": "0f0d3020a4fa3e03c1d38bc5d926ce8448659eee"
        },
        "commit_message": "Improve the default executor service in HTTPServer\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "0f0d3020a4fa3e03c1d38bc5d926ce8448659eee": {
                "prometheus-metrics-exporter-httpserver/src/main/java/io/prometheus/metrics/exporter/httpserver/HTTPServer.java": [
                    "private ExecutorService io.prometheus.metrics.exporter.httpserver.HTTPServer.makeExecutorService()"
                ]
            },
            "c5a95d95679bf21c2e2836d3e9ca11e025af554d": {
                "prometheus-metrics-exporter-httpserver/src/main/java/io/prometheus/metrics/exporter/httpserver/HTTPServer.java": [
                    "private ExecutorService io.prometheus.metrics.exporter.httpserver.HTTPServer.makeExecutorService()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "989cbd1f4f249d84dbdf4b9e91b9676cc64022b6",
        "previous_commit": "ca6145fdf8ad01093f09d1168fd683a1c6c64e59",
        "date": 1651483565,
        "releases": {
            "previous": "989cbd1f4f249d84dbdf4b9e91b9676cc64022b6",
            "next": "989cbd1f4f249d84dbdf4b9e91b9676cc64022b6"
        },
        "commit_message": "optimize Collector.sanitizeMetricName\n\nSigned-off-by: Flavio Brasil <fwbrasil@gmail.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "989cbd1f4f249d84dbdf4b9e91b9676cc64022b6": {
                "simpleclient/src/main/java/io/prometheus/client/Collector.java": [
                    "public static String io.prometheus.client.Collector.sanitizeMetricName(String metricName)"
                ]
            },
            "ca6145fdf8ad01093f09d1168fd683a1c6c64e59": {
                "simpleclient/src/main/java/io/prometheus/client/Collector.java": [
                    "public static String io.prometheus.client.Collector.sanitizeMetricName(String metricName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "c3dc1f2506108761414309210c3a98e775e331a4",
        "previous_commit": "72593071d99924eb9c71eb0e385c78d218fec220",
        "date": 1582909879,
        "releases": {
            "previous": "c3dc1f2506108761414309210c3a98e775e331a4",
            "next": "c3dc1f2506108761414309210c3a98e775e331a4"
        },
        "commit_message": "Added health check api to the client. (#534)\n\n* Added health check api to the client.\r\nhttps://github.com/prometheus/jmx_exporter/issues/465\r\n\r\nSigned-off-by: Brajesh Kumar <brjkumar@amazon.com>\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "c3dc1f2506108761414309210c3a98e775e331a4": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ]
            },
            "72593071d99924eb9c71eb0e385c78d218fec220": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "9642ec1034a65f8b679127551aeec32107603fef",
        "previous_commit": "9139a2ce765c100b6693b7294baa1139988fdcfc",
        "date": 1477993977,
        "releases": {
            "previous": "9642ec1034a65f8b679127551aeec32107603fef",
            "next": "9642ec1034a65f8b679127551aeec32107603fef"
        },
        "commit_message": "Add class loading metrics to default exports (#154)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "9642ec1034a65f8b679127551aeec32107603fef": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/DefaultExports.java": [
                    "public static synchronized void io.prometheus.client.hotspot.DefaultExports.initialize()"
                ]
            },
            "9139a2ce765c100b6693b7294baa1139988fdcfc": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/DefaultExports.java": [
                    "public static synchronized void io.prometheus.client.hotspot.DefaultExports.initialize()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "2199ee6ba133126757686ac6e42bf102fe4ad66b",
        "previous_commit": "5c59958af89aa7735b13c84f7e71da586ed22858",
        "date": 1695127562,
        "releases": {
            "previous": "2199ee6ba133126757686ac6e42bf102fe4ad66b",
            "next": "2199ee6ba133126757686ac6e42bf102fe4ad66b"
        },
        "commit_message": "OpenTelemetry exporter: Use random UUID as default instance ID\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "2199ee6ba133126757686ac6e42bf102fe4ad66b": {
                "prometheus-metrics-exporter-opentelemetry/src/main/java/io/prometheus/metrics/exporter/opentelemetry/ResourceAttributesDefaults.java": [
                    "public static void io.prometheus.metrics.exporter.opentelemetry.ResourceAttributesDefaults.addIfAbsent(Map<String, String> result)"
                ]
            },
            "5c59958af89aa7735b13c84f7e71da586ed22858": {
                "prometheus-metrics-exporter-opentelemetry/src/main/java/io/prometheus/metrics/exporter/opentelemetry/ResourceAttributesDefaults.java": [
                    "public static void io.prometheus.metrics.exporter.opentelemetry.ResourceAttributesDefaults.addIfAbsent(Map<String, String> result)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3a54fdffe5df9a3d3db2071fda0d4fcee7915656",
        "previous_commit": "40e6eec96f4b68870e8bf18ccecf3019355e6bdb",
        "date": 1602664757,
        "releases": {
            "previous": "3a54fdffe5df9a3d3db2071fda0d4fcee7915656",
            "next": "3a54fdffe5df9a3d3db2071fda0d4fcee7915656"
        },
        "commit_message": "Add ability to filter metrics in DropwizardExports (#574)\n\n* Add ability to filter metrics in DropwizardExports\r\n\r\nSigned-off-by: Vasily Vasilkov <vgv@ecwid.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "3a54fdffe5df9a3d3db2071fda0d4fcee7915656": {
                "simpleclient_dropwizard/src/main/java/io/prometheus/client/dropwizard/DropwizardExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.collect()"
                ]
            },
            "40e6eec96f4b68870e8bf18ccecf3019355e6bdb": {
                "simpleclient_dropwizard/src/main/java/io/prometheus/client/dropwizard/DropwizardExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.collect()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "a125fc3ace5d501b45b155c16f7e0f8481cae257",
        "previous_commit": "445177676fb20d66147be1b0dc1209568f97d6b8",
        "date": 1631397852,
        "releases": {
            "previous": "a125fc3ace5d501b45b155c16f7e0f8481cae257",
            "next": "a125fc3ace5d501b45b155c16f7e0f8481cae257"
        },
        "commit_message": "Added code to correctly handle HEAD request (#688)\n\n* Added code to correctly handle HEAD request\r\n\r\nSigned-off-by: Doug Hoard <doug.hoard@gmail.com>\r\n\r\n* Refactored solution and associated test code\r\n\r\nSigned-off-by: Doug Hoard <doug.hoard@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "a125fc3ace5d501b45b155c16f7e0f8481cae257": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ]
            },
            "445177676fb20d66147be1b0dc1209568f97d6b8": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "149c0c06d9ac9020ec9240844f3fcb0da03909b6",
        "previous_commit": "cb0c862ca52231e6369ef4d9e1ef5b9178e763e6",
        "date": 1658229683,
        "releases": {
            "previous": "149c0c06d9ac9020ec9240844f3fcb0da03909b6",
            "next": "149c0c06d9ac9020ec9240844f3fcb0da03909b6"
        },
        "commit_message": "SubstrateVM awareness (#802)\n\n* SubstrateVM awareness\r\n\r\nSigned-off-by: Arthur Sengileyev <arthur.sengileyev@gmail.com>\r\n\r\n* SubstrateVM awareness (via system properties check)\r\n\r\nSigned-off-by: Arthur Sengileyev <arthur.sengileyev@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "149c0c06d9ac9020ec9240844f3fcb0da03909b6": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ThreadExports.java": [
                    "void io.prometheus.client.hotspot.ThreadExports.addThreadMetrics(List<MetricFamilySamples> sampleFamilies, Predicate<String> nameFilter)"
                ]
            },
            "cb0c862ca52231e6369ef4d9e1ef5b9178e763e6": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ThreadExports.java": [
                    "void io.prometheus.client.hotspot.ThreadExports.addThreadMetrics(List<MetricFamilySamples> sampleFamilies, Predicate<String> nameFilter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "f9a42e604e59385dd7e44554fae6663663c404bf",
        "previous_commit": "b94922fad2a31d4fa2b04cccdf1666b7e5c2731f",
        "date": 1693430079,
        "releases": {
            "previous": "f9a42e604e59385dd7e44554fae6663663c404bf",
            "next": "f9a42e604e59385dd7e44554fae6663663c404bf"
        },
        "commit_message": "Prevent unnecessary collect() calls during register()\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "f9a42e604e59385dd7e44554fae6663663c404bf": {
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/Labels.java": [
                    "public boolean io.prometheus.metrics.model.snapshots.Labels.contains(String labelName)"
                ]
            },
            "b94922fad2a31d4fa2b04cccdf1666b7e5c2731f": {
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/Labels.java": [
                    "public boolean io.prometheus.metrics.model.snapshots.Labels.contains(String labelName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5d9dbc45a9cb1d027cc22d2440272fb7d85b2b96",
        "previous_commit": "eadc0a15725abccd18579042891edd2ed0087ff6",
        "date": 1493364561,
        "releases": {
            "previous": "5d9dbc45a9cb1d027cc22d2440272fb7d85b2b96",
            "next": "5d9dbc45a9cb1d027cc22d2440272fb7d85b2b96"
        },
        "commit_message": "Remove superfluous null checks in Collector (#227)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "5d9dbc45a9cb1d027cc22d2440272fb7d85b2b96": {
                "simpleclient/src/main/java/io/prometheus/client/Collector.java": [
                    "public boolean io.prometheus.client.Collector.equals(Object obj)"
                ]
            },
            "eadc0a15725abccd18579042891edd2ed0087ff6": {
                "simpleclient/src/main/java/io/prometheus/client/Collector.java": [
                    "public boolean io.prometheus.client.Collector.equals(Object obj)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "ee34e76c328ed225418e24b8de3697430259ac64",
        "previous_commit": "422e3b3bfd068f764428dba65e54099d9ecbdf1e",
        "date": 1497382156,
        "releases": {
            "previous": "ee34e76c328ed225418e24b8de3697430259ac64",
            "next": "ee34e76c328ed225418e24b8de3697430259ac64"
        },
        "commit_message": "Seconds are 1000 milliseconds, not the other way around (#259)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "ee34e76c328ed225418e24b8de3697430259ac64": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "void io.prometheus.client.exporter.PushGateway.doRequest(CollectorRegistry registry, String job, Map<String, String> groupingKey, String method)"
                ]
            },
            "422e3b3bfd068f764428dba65e54099d9ecbdf1e": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "void io.prometheus.client.exporter.PushGateway.doRequest(CollectorRegistry registry, String job, Map<String, String> groupingKey, String method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "5452faeeade1a732c37eaa4faa6a5ea973d50c8e",
        "previous_commit": "e81e17a6e167b21ce48f632c886a4fe27e8711e2",
        "date": 1622322543,
        "releases": {
            "previous": "5452faeeade1a732c37eaa4faa6a5ea973d50c8e",
            "next": "5452faeeade1a732c37eaa4faa6a5ea973d50c8e"
        },
        "commit_message": "test more Java versions\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "5452faeeade1a732c37eaa4faa6a5ea973d50c8e": {
                "integration_tests/example_application/src/main/java/io/prometheus/client/smoketest/Server.java": [
                    "public static void io.prometheus.client.smoketest.Server.main(String[] args)"
                ]
            },
            "e81e17a6e167b21ce48f632c886a4fe27e8711e2": {
                "integration_tests/example_application/src/main/java/io/prometheus/client/smoketest/Server.java": [
                    "public static void io.prometheus.client.smoketest.Server.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d7eef0fa0c6d4a2f315d27d4c8a06feca04868c4",
        "previous_commit": "5b0a2752bcb8a168b69a74fd6c230d6a7d74f9c1",
        "date": 1518778880,
        "releases": {
            "previous": "d7eef0fa0c6d4a2f315d27d4c8a06feca04868c4",
            "next": "d7eef0fa0c6d4a2f315d27d4c8a06feca04868c4"
        },
        "commit_message": "Reflective version of #305 (#341)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "d7eef0fa0c6d4a2f315d27d4c8a06feca04868c4": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/DefaultExports.java": [
                    "public static synchronized void io.prometheus.client.hotspot.DefaultExports.initialize()"
                ]
            },
            "5b0a2752bcb8a168b69a74fd6c230d6a7d74f9c1": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/DefaultExports.java": [
                    "public static synchronized void io.prometheus.client.hotspot.DefaultExports.initialize()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "8edf17ea0bced5c9a13fd656376d5f6930de058f",
        "previous_commit": "6c99b1a6730108fd103844a7cecd93809093036e",
        "date": 1456413749,
        "releases": {
            "previous": "8edf17ea0bced5c9a13fd656376d5f6930de058f",
            "next": "8edf17ea0bced5c9a13fd656376d5f6930de058f"
        },
        "commit_message": "Handle Gauges that return both Numbers and Booleans\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "8edf17ea0bced5c9a13fd656376d5f6930de058f": {
                "simpleclient_dropwizard/src/main/java/io/prometheus/client/dropwizard/DropwizardExports.java": [
                    "List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.fromGauge(String name, Gauge gauge)"
                ]
            },
            "6c99b1a6730108fd103844a7cecd93809093036e": {
                "simpleclient_dropwizard/src/main/java/io/prometheus/client/dropwizard/DropwizardExports.java": [
                    "List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.fromGauge(String name, Gauge gauge)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "af7dd680fb1399f5117189608093b2b0c48f4d44",
        "previous_commit": "70c776a2668b17717e950b8c874b3b842dbae867",
        "date": 1695052417,
        "releases": {
            "previous": "af7dd680fb1399f5117189608093b2b0c48f4d44",
            "next": "af7dd680fb1399f5117189608093b2b0c48f4d44"
        },
        "commit_message": "Remove workaround for github.com/prometheus/prometheus/issues/12553\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "af7dd680fb1399f5117189608093b2b0c48f4d44": {
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/PrometheusProtobufWriter.java": [
                    "private Metrics.Metric.Builder io.prometheus.metrics.expositionformats.PrometheusProtobufWriter.convert(HistogramSnapshot.HistogramDataPointSnapshot data)"
                ]
            },
            "70c776a2668b17717e950b8c874b3b842dbae867": {
                "prometheus-metrics-exposition-formats/src/main/java/io/prometheus/metrics/expositionformats/PrometheusProtobufWriter.java": [
                    "private Metrics.Metric.Builder io.prometheus.metrics.expositionformats.PrometheusProtobufWriter.convert(HistogramSnapshot.HistogramDataPointSnapshot data)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "24e4e4727deff6298165957c3713574e6bbe9c9c",
        "previous_commit": "944ecf9488c007b7f27383dca27a6731401a4cfe",
        "date": 1485185089,
        "releases": {
            "previous": "24e4e4727deff6298165957c3713574e6bbe9c9c",
            "next": "24e4e4727deff6298165957c3713574e6bbe9c9c"
        },
        "commit_message": "MetricFamily#addMetric() should return this to allow builder like usage (#185)\n\nMetricFamily#addMetric() should return \"this\" to allow builder like usage",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "24e4e4727deff6298165957c3713574e6bbe9c9c": {
                "simpleclient/src/main/java/io/prometheus/client/SummaryMetricFamily.java": [
                    "public SummaryMetricFamily io.prometheus.client.SummaryMetricFamily.addMetric(List<String> labelValues, double count, double sum, List<Double> quantiles)"
                ]
            },
            "944ecf9488c007b7f27383dca27a6731401a4cfe": {
                "simpleclient/src/main/java/io/prometheus/client/SummaryMetricFamily.java": [
                    "public void io.prometheus.client.SummaryMetricFamily.addMetric(List<String> labelValues, double count, double sum, List<Double> quantiles)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "c61d2eb1eaa3ac8fde8412da576eef26b5955a74",
        "previous_commit": "1f859efca54b679e5c22dedc1a194b837c2c63d6",
        "date": 1651665371,
        "releases": {
            "previous": "c61d2eb1eaa3ac8fde8412da576eef26b5955a74",
            "next": "c61d2eb1eaa3ac8fde8412da576eef26b5955a74"
        },
        "commit_message": "Added code to HTTPServer.Builder to use ExecutorService\n\nSigned-off-by: Doug Hoard <doug.hoard@gmail.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "c61d2eb1eaa3ac8fde8412da576eef26b5955a74": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public HTTPServer io.prometheus.client.exporter.HTTPServer.build()"
                ]
            },
            "1f859efca54b679e5c22dedc1a194b837c2c63d6": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public HTTPServer io.prometheus.client.exporter.HTTPServer.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "2be241cc3efeefd46c8bd7a6f403f3079a18e7e2",
        "previous_commit": "2f31b96666ce705e18d7216771f18c83f0dce0c5",
        "date": 1653057839,
        "releases": {
            "previous": "2be241cc3efeefd46c8bd7a6f403f3079a18e7e2",
            "next": "2be241cc3efeefd46c8bd7a6f403f3079a18e7e2"
        },
        "commit_message": "Added defensive code for scenario where thread id <= 0\n\nSigned-off-by: Doug Hoard <doug.hoard@gmail.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "2be241cc3efeefd46c8bd7a6f403f3079a18e7e2": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ThreadExports.java": [
                    "void io.prometheus.client.hotspot.ThreadExports.addThreadMetrics(List<MetricFamilySamples> sampleFamilies, Predicate<String> nameFilter)"
                ]
            },
            "2f31b96666ce705e18d7216771f18c83f0dce0c5": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ThreadExports.java": [
                    "void io.prometheus.client.hotspot.ThreadExports.addThreadMetrics(List<MetricFamilySamples> sampleFamilies, Predicate<String> nameFilter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "2ca49bc105fa77f2df2fa8518c9a798d6629700b",
        "previous_commit": "352b6b557830778db2b920c994c06f2655be9218",
        "date": 1489751517,
        "releases": {
            "previous": "2ca49bc105fa77f2df2fa8518c9a798d6629700b",
            "next": "2ca49bc105fa77f2df2fa8518c9a798d6629700b"
        },
        "commit_message": "removed collection create on writing metrics - used enumeration for iteration (#214)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "2ca49bc105fa77f2df2fa8518c9a798d6629700b": {
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.write004(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ]
            },
            "352b6b557830778db2b920c994c06f2655be9218": {
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.write004(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "fc447f8861a48040ad4b956cf3e5af86f99985e4",
        "previous_commit": "7f0265184adb86182fb7be029acbf5c2efd1c742",
        "date": 1711048303,
        "releases": {
            "previous": "fc447f8861a48040ad4b956cf3e5af86f99985e4",
            "next": "fc447f8861a48040ad4b956cf3e5af86f99985e4"
        },
        "commit_message": "Add optional SpanContext parameter to ExemplarSampler (#929)\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "fc447f8861a48040ad4b956cf3e5af86f99985e4": {
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/exemplars/ExemplarSampler.java": [
                    "private Labels io.prometheus.metrics.core.exemplars.ExemplarSampler.doSampleExemplar()"
                ]
            },
            "7f0265184adb86182fb7be029acbf5c2efd1c742": {
                "prometheus-metrics-core/src/main/java/io/prometheus/metrics/core/exemplars/ExemplarSampler.java": [
                    "private Labels io.prometheus.metrics.core.exemplars.ExemplarSampler.doSampleExemplar()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0275972817f602b5dac2636aae3e7abe137455a6",
        "previous_commit": "5d9dbc45a9cb1d027cc22d2440272fb7d85b2b96",
        "date": 1493394021,
        "releases": {
            "previous": "0275972817f602b5dac2636aae3e7abe137455a6",
            "next": "0275972817f602b5dac2636aae3e7abe137455a6"
        },
        "commit_message": "Use foreach loop where possible (#229)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "0275972817f602b5dac2636aae3e7abe137455a6": {
                "simpleclient/src/main/java/io/prometheus/client/TimeWindowQuantiles.java": [
                    "public void io.prometheus.client.TimeWindowQuantiles.insert(double value)"
                ]
            },
            "5d9dbc45a9cb1d027cc22d2440272fb7d85b2b96": {
                "simpleclient/src/main/java/io/prometheus/client/TimeWindowQuantiles.java": [
                    "public void io.prometheus.client.TimeWindowQuantiles.insert(double value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b16dda738cea375e65fae64d977bd82119a1c880",
        "previous_commit": "40c3599d8b49b63bf84900921af43b6b0a9f5f1c",
        "date": 1711055840,
        "releases": {
            "previous": "b16dda738cea375e65fae64d977bd82119a1c880",
            "next": "b16dda738cea375e65fae64d977bd82119a1c880"
        },
        "commit_message": "feat: add jvm native memory metrics\n\nSigned-off-by: Christoph MEIER <meier-christoph@users.noreply.github.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "b16dda738cea375e65fae64d977bd82119a1c880": {
                "prometheus-metrics-instrumentation-jvm/src/main/java/io/prometheus/metrics/instrumentation/jvm/JvmMetrics.java": [
                    "public void io.prometheus.metrics.instrumentation.jvm.JvmMetrics.register(PrometheusRegistry registry)"
                ]
            },
            "40c3599d8b49b63bf84900921af43b6b0a9f5f1c": {
                "prometheus-metrics-instrumentation-jvm/src/main/java/io/prometheus/metrics/instrumentation/jvm/JvmMetrics.java": [
                    "public void io.prometheus.metrics.instrumentation.jvm.JvmMetrics.register(PrometheusRegistry registry)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a224960e7d9935456dd9860c6e5541825ce6e7b2",
        "previous_commit": "13315ebcad0fa29f47ada0d03310ba153fdcd9dd",
        "date": 1715097923,
        "releases": {
            "previous": "a224960e7d9935456dd9860c6e5541825ce6e7b2",
            "next": "a224960e7d9935456dd9860c6e5541825ce6e7b2"
        },
        "commit_message": "does this help to make the tests pass?\n\nSigned-off-by: Matthias Berndt <matthias.berndt@ttmzero.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "a224960e7d9935456dd9860c6e5541825ce6e7b2": {
                "integration-tests/it-exporter/it-exporter-httpserver-sample/src/main/java/io/prometheus/metrics/it/exporter/httpserver/HTTPServerSample.java": [
                    "public static void io.prometheus.metrics.it.exporter.httpserver.HTTPServerSample.main(String[] args)"
                ]
            },
            "13315ebcad0fa29f47ada0d03310ba153fdcd9dd": {
                "integration-tests/it-exporter/it-exporter-httpserver-sample/src/main/java/io/prometheus/metrics/it/exporter/httpserver/HTTPServerSample.java": [
                    "public static void io.prometheus.metrics.it.exporter.httpserver.HTTPServerSample.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "09cb6ab3fda7c6e32148dbb43fec92ce720236ac",
        "previous_commit": "4a52c1307625a8ee036654abb1e1fefa6a461814",
        "date": 1531489765,
        "releases": {
            "previous": "09cb6ab3fda7c6e32148dbb43fec92ce720236ac",
            "next": "09cb6ab3fda7c6e32148dbb43fec92ce720236ac"
        },
        "commit_message": "Added per-query metrics in HibernateStatisticsCollector (#388)\n\nexposing accumulated total execution time per query\r\n(update to Hibernate 5 was necessary)\r\nmoved hibernate dependency to 5.2.0\r\n\r\n\r\nSigned-off-by: Tom Hombergs <tom.hombergs@gmail.com>\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "09cb6ab3fda7c6e32148dbb43fec92ce720236ac": {
                "simpleclient_hibernate/src/main/java/io/prometheus/client/hibernate/HibernateStatisticsCollector.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hibernate.HibernateStatisticsCollector.collect()"
                ]
            },
            "4a52c1307625a8ee036654abb1e1fefa6a461814": {
                "simpleclient_hibernate/src/main/java/io/prometheus/client/hibernate/HibernateStatisticsCollector.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hibernate.HibernateStatisticsCollector.collect()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "99e209d234e40ddc4b10ae468e3ff0aff945bed7",
        "previous_commit": "6847f9fff1f0d6f79a4d8e646052da7554e56565",
        "date": 1610981235,
        "releases": {
            "previous": "99e209d234e40ddc4b10ae468e3ff0aff945bed7",
            "next": "99e209d234e40ddc4b10ae468e3ff0aff945bed7"
        },
        "commit_message": "Update and add tests and code for _total handling.\n\nSigned-off-by: Brian Brazil <brian.brazil@robustperception.io>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "99e209d234e40ddc4b10ae468e3ff0aff945bed7": {
                "simpleclient/src/main/java/io/prometheus/client/CounterMetricFamily.java": [
                    "public CounterMetricFamily io.prometheus.client.CounterMetricFamily.addMetric(List<String> labelValues, double value)"
                ]
            },
            "6847f9fff1f0d6f79a4d8e646052da7554e56565": {
                "simpleclient/src/main/java/io/prometheus/client/CounterMetricFamily.java": [
                    "public CounterMetricFamily io.prometheus.client.CounterMetricFamily.addMetric(List<String> labelValues, double value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "ad17a8fe9046771a49ff484fa27c365af416c7d8",
        "previous_commit": "5e33fe69e8baee0a6dd609c669d055f6e78ec281",
        "date": 1524482688,
        "releases": {
            "previous": "ad17a8fe9046771a49ff484fa27c365af416c7d8",
            "next": "ad17a8fe9046771a49ff484fa27c365af416c7d8"
        },
        "commit_message": "fix spring_web aop no such method found exception (#376)\n\nSigned-off-by: candyleer <295198088@qq.com>\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "ad17a8fe9046771a49ff484fa27c365af416c7d8": {
                "simpleclient_spring_web/src/main/java/io/prometheus/client/spring/web/MethodTimer.java": [
                    "private PrometheusTimeMethod io.prometheus.client.spring.web.MethodTimer.getAnnotation(ProceedingJoinPoint pjp)"
                ]
            },
            "5e33fe69e8baee0a6dd609c669d055f6e78ec281": {
                "simpleclient_spring_web/src/main/java/io/prometheus/client/spring/web/MethodTimer.java": [
                    "private PrometheusTimeMethod io.prometheus.client.spring.web.MethodTimer.getAnnotation(ProceedingJoinPoint pjp)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "755ba6e89e75525ba5fab502b3014156d485f7a9",
        "previous_commit": "6afa1bb2c38e3f1621b2de87ddd797c3e141657d",
        "date": 1510331645,
        "releases": {
            "previous": "755ba6e89e75525ba5fab502b3014156d485f7a9",
            "next": "755ba6e89e75525ba5fab502b3014156d485f7a9"
        },
        "commit_message": "Better metric name sanitizer in Dropwizard exporter (#314)\n\nMake sure dropwizard imported metric does not start with number",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "755ba6e89e75525ba5fab502b3014156d485f7a9": {
                "simpleclient_dropwizard/src/main/java/io/prometheus/client/dropwizard/DropwizardExports.java": [
                    "public static String io.prometheus.client.dropwizard.DropwizardExports.sanitizeMetricName(String dropwizardName)"
                ]
            },
            "6afa1bb2c38e3f1621b2de87ddd797c3e141657d": {
                "simpleclient_dropwizard/src/main/java/io/prometheus/client/dropwizard/DropwizardExports.java": [
                    "public static String io.prometheus.client.dropwizard.DropwizardExports.sanitizeMetricName(String dropwizardName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "af8d033d3c00b49d3f50f39e9e6645467e124622",
        "previous_commit": "ee34e76c328ed225418e24b8de3697430259ac64",
        "date": 1498488790,
        "releases": {
            "previous": "af8d033d3c00b49d3f50f39e9e6645467e124622",
            "next": "af8d033d3c00b49d3f50f39e9e6645467e124622"
        },
        "commit_message": "Accept URL to Pushgateway constructor. Closes #258 (#257)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "af8d033d3c00b49d3f50f39e9e6645467e124622": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "void io.prometheus.client.exporter.PushGateway.doRequest(CollectorRegistry registry, String job, Map<String, String> groupingKey, String method)"
                ]
            },
            "ee34e76c328ed225418e24b8de3697430259ac64": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "void io.prometheus.client.exporter.PushGateway.doRequest(CollectorRegistry registry, String job, Map<String, String> groupingKey, String method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "95872fc77cd55f88de9ee377e07fbc4aa2410ff7",
        "previous_commit": "c16d4ae26630686f56b4b8d898e94bba7f8e8229",
        "date": 1644184035,
        "releases": {
            "previous": "95872fc77cd55f88de9ee377e07fbc4aa2410ff7",
            "next": "95872fc77cd55f88de9ee377e07fbc4aa2410ff7"
        },
        "commit_message": "Extract upperbound calculation\n\nThe upperbound is constant for a given quantile.\nBy calculating this once we save O(iterator size * quantiles size) calculations of this constant.\n\nSigned-off-by: Jens <jenskat@gmail.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "95872fc77cd55f88de9ee377e07fbc4aa2410ff7": {
                "simpleclient/src/main/java/io/prometheus/client/CKMSQuantiles.java": [
                    "public double io.prometheus.client.CKMSQuantiles.get(double q)"
                ]
            },
            "c16d4ae26630686f56b4b8d898e94bba7f8e8229": {
                "simpleclient/src/main/java/io/prometheus/client/CKMSQuantiles.java": [
                    "public double io.prometheus.client.CKMSQuantiles.get(double q)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "ce76a494acd4f4077f01b6cea40e4329b0d54fac",
        "previous_commit": "bd94a665ac45666fac60b9b246268070465d746b",
        "date": 1501226739,
        "releases": {
            "previous": "ce76a494acd4f4077f01b6cea40e4329b0d54fac",
            "next": "ce76a494acd4f4077f01b6cea40e4329b0d54fac"
        },
        "commit_message": "Make StandardExports work with modules and/or IBM JVMs (#281)\n\nMake StandardExports work in restricted environments or IBM JVMs where com.sun.management.UnixOperatingSystemMXBean is not available. Use reflection instead to collect file descriptor metrics.\r\n\r\nUse reflection to recursively try invoking a method on the concrete class then on all the interfaces it implements until either success or all attempts have failed\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "ce76a494acd4f4077f01b6cea40e4329b0d54fac": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/StandardExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.StandardExports.collect()"
                ]
            },
            "bd94a665ac45666fac60b9b246268070465d746b": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/StandardExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.StandardExports.collect()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "af39ca948ca446757f14d8da618a72d18a46ef3d",
        "previous_commit": "1950cff385518eae45651df47547f80547d72c1a",
        "date": 1537526192,
        "releases": {
            "previous": "af39ca948ca446757f14d8da618a72d18a46ef3d",
            "next": "af39ca948ca446757f14d8da618a72d18a46ef3d"
        },
        "commit_message": "GZIPOutputStream won't close, may cause native memory leak (#426)\n\nSigned-off-by: vision <vision.zhou@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "af39ca948ca446757f14d8da618a72d18a46ef3d": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ]
            },
            "1950cff385518eae45651df47547f80547d72c1a": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "64e3cb8effad76522cd25b6e0c0a56422ba8474a",
        "previous_commit": "fb4161a2be99074f1d2fd254238193afa4aa0398",
        "date": 1515321970,
        "releases": {
            "previous": "64e3cb8effad76522cd25b6e0c0a56422ba8474a",
            "next": "64e3cb8effad76522cd25b6e0c0a56422ba8474a"
        },
        "commit_message": "Fix bug in CollectorRegistry#collectorNames method (#325)\n\nThe switch statement was missing breaks for SUMMARY and HISTOGRAM cases.\r\nDue to this bug wrong and duplicate collector names are produced for summaries and histograms.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "64e3cb8effad76522cd25b6e0c0a56422ba8474a": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private List<String> io.prometheus.client.CollectorRegistry.collectorNames(Collector m)"
                ]
            },
            "fb4161a2be99074f1d2fd254238193afa4aa0398": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private List<String> io.prometheus.client.CollectorRegistry.collectorNames(Collector m)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "5867b799a735288147bfd9ee680ca588a34490b9",
        "previous_commit": "fa5e057f216908f83a30c86045a2c24037acf710",
        "date": 1716467007,
        "releases": {
            "previous": "5867b799a735288147bfd9ee680ca588a34490b9",
            "next": "5867b799a735288147bfd9ee680ca588a34490b9"
        },
        "commit_message": "Simple MetricsSnapshot performance change\n\nSigned-off-by: dhoard <doug.hoard@gmail.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "5867b799a735288147bfd9ee680ca588a34490b9": {
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/MetricSnapshots.java": [
                    "public boolean io.prometheus.metrics.model.snapshots.MetricSnapshots.containsMetricName(String name)"
                ]
            },
            "fa5e057f216908f83a30c86045a2c24037acf710": {
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/MetricSnapshots.java": [
                    "public boolean io.prometheus.metrics.model.snapshots.MetricSnapshots.containsMetricName(String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "df64303fb00472384a98dacdeba6d838b52ba6a3",
        "previous_commit": "409c82508a66a62038fd65f44cf39295a0fd8534",
        "date": 1541175779,
        "releases": {
            "previous": "df64303fb00472384a98dacdeba6d838b52ba6a3",
            "next": "df64303fb00472384a98dacdeba6d838b52ba6a3"
        },
        "commit_message": "Add MemoryAllocationExports (#434)\n\n* Add MemoryAllocationExports\r\n\r\nCounters for total bytes allocated to each memory pool.\r\nCan be used to show allocation rate and promotion rate.\r\n\r\n\r\nSigned-off-by: Robin Karlsson <snago86@gmail.com>\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "df64303fb00472384a98dacdeba6d838b52ba6a3": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/DefaultExports.java": [
                    "public static synchronized void io.prometheus.client.hotspot.DefaultExports.initialize()"
                ]
            },
            "409c82508a66a62038fd65f44cf39295a0fd8534": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/DefaultExports.java": [
                    "public static synchronized void io.prometheus.client.hotspot.DefaultExports.initialize()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d7825cf87cd61a65b20fc2277b8f5e52bd7ec5f7",
        "previous_commit": "10fa80b9fc9a3be66d95fbad9760e337ed465495",
        "date": 1567690929,
        "releases": {
            "previous": "d7825cf87cd61a65b20fc2277b8f5e52bd7ec5f7",
            "next": "d7825cf87cd61a65b20fc2277b8f5e52bd7ec5f7"
        },
        "commit_message": "Use atomics instead of synchronized for Gauge (#482)\n\n* Use atomic update instead of synchronized for Gauge\r\n* Introduce DoubleAdder#set to avoid allocations in Gauge#set\r\n\r\nSigned-off-by: Rudolf Rakos <rrakos@evolutiongaming.com>\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "d7825cf87cd61a65b20fc2277b8f5e52bd7ec5f7": {
                "simpleclient/src/main/java/io/prometheus/client/DoubleAdder.java": [
                    "public double io.prometheus.client.DoubleAdder.sum()"
                ]
            },
            "10fa80b9fc9a3be66d95fbad9760e337ed465495": {
                "simpleclient/src/main/java/io/prometheus/client/DoubleAdder.java": [
                    "public double io.prometheus.client.DoubleAdder.sum()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "445177676fb20d66147be1b0dc1209568f97d6b8",
        "previous_commit": "f56cd15baddcbbb1154ea62fa244666493bf510b",
        "date": 1631390063,
        "releases": {
            "previous": "445177676fb20d66147be1b0dc1209568f97d6b8",
            "next": "445177676fb20d66147be1b0dc1209568f97d6b8"
        },
        "commit_message": "Add an InstrumentedAppender constructor that allows passing a CollectorRegistry (#690)\n\n* Add the InstrumentedAppender constructor that allows passing a CollectorRegistry\r\n\r\nSigned-off-by: Matthew Dolan <MatthewDolan@users.noreply.github.com>\r\n\r\n* address comment: fix tests\r\n\r\nSigned-off-by: Matthew Dolan <MatthewDolan@users.noreply.github.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "445177676fb20d66147be1b0dc1209568f97d6b8": {
                "simpleclient_logback/src/main/java/io/prometheus/client/logback/InstrumentedAppender.java": [
                    "protected void io.prometheus.client.logback.InstrumentedAppender.append(ILoggingEvent event)"
                ]
            },
            "f56cd15baddcbbb1154ea62fa244666493bf510b": {
                "simpleclient_logback/src/main/java/io/prometheus/client/logback/InstrumentedAppender.java": [
                    "protected void io.prometheus.client.logback.InstrumentedAppender.append(ILoggingEvent event)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "fe02245d54f0f94d5054ca553215cb70b1687233",
        "previous_commit": "fca49ffc315641c239246ffbb516a36f374fb8dc",
        "date": 1712756706,
        "releases": {
            "previous": "fe02245d54f0f94d5054ca553215cb70b1687233",
            "next": "fe02245d54f0f94d5054ca553215cb70b1687233"
        },
        "commit_message": "instrumentation-dw5: Fix metric name issue with CustomLabelMapper (#949)\n\n* instrumentation-dw5: Fix issue with CustomLabelMapper\r\n\r\nSigned-off-by: Kinshuk Bairagi <hi@kinsh.uk>\r\n\r\n* Update CustomLabelMapperTest\r\n\r\nSigned-off-by: Kinshuk Bairagi <hi@kinsh.uk>\r\n\r\n* Refactor & Fix tests\r\n\r\nSigned-off-by: Kinshuk Bairagi <hi@kinsh.uk>\r\n\r\n---------\r\n\r\nSigned-off-by: Kinshuk Bairagi <hi@kinsh.uk>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "fe02245d54f0f94d5054ca553215cb70b1687233": {
                "prometheus-metrics-instrumentation-dropwizard5/src/main/java/io/prometheus/metrics/instrumentation/dropwizard5/DropwizardExports.java": [
                    "private MetricMetadata io.prometheus.metrics.instrumentation.dropwizard5.DropwizardExports.getMetricMetaData(String metricName, Metric metric)"
                ]
            },
            "fca49ffc315641c239246ffbb516a36f374fb8dc": {
                "prometheus-metrics-instrumentation-dropwizard5/src/main/java/io/prometheus/metrics/instrumentation/dropwizard5/DropwizardExports.java": [
                    "private static MetricMetadata io.prometheus.metrics.instrumentation.dropwizard5.DropwizardExports.getMetricMetaData(String metricName, Metric metric)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "820c696e6125f9e8df476c7e34bf01f35234213c",
        "previous_commit": "a1c777b8c7aca72379bda4cc2d407fa7c07c5085",
        "date": 1694977942,
        "releases": {
            "previous": "820c696e6125f9e8df476c7e34bf01f35234213c",
            "next": "820c696e6125f9e8df476c7e34bf01f35234213c"
        },
        "commit_message": "Remove accidentally added line\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "820c696e6125f9e8df476c7e34bf01f35234213c": {
                "examples/example-exporter-httpserver/src/main/java/io/prometheus/metrics/examples/httpserver/Main.java": [
                    "public static void io.prometheus.metrics.examples.httpserver.Main.main(String[] args)"
                ]
            },
            "a1c777b8c7aca72379bda4cc2d407fa7c07c5085": {
                "examples/example-exporter-httpserver/src/main/java/io/prometheus/metrics/examples/httpserver/Main.java": [
                    "public static void io.prometheus.metrics.examples.httpserver.Main.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d720fea58a1dfe4405b0c6bda8826749b8594e2c",
        "previous_commit": "df64303fb00472384a98dacdeba6d838b52ba6a3",
        "date": 1542287631,
        "releases": {
            "previous": "d720fea58a1dfe4405b0c6bda8826749b8594e2c",
            "next": "d720fea58a1dfe4405b0c6bda8826749b8594e2c"
        },
        "commit_message": "Mapping Dropwizard metric to Prometheus labelled metric (#435)\n\n* Add ability to translate specific Dropwizard dot separated metrics to Prometheus metrics with custom name and labels\r\n\r\nSigned-off-by: Alessandro Ciccimarra <alessandro.ciccimarra@gmail.com>\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "d720fea58a1dfe4405b0c6bda8826749b8594e2c": {
                "simpleclient_dropwizard/src/main/java/io/prometheus/client/dropwizard/DropwizardExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.collect()"
                ]
            },
            "df64303fb00472384a98dacdeba6d838b52ba6a3": {
                "simpleclient_dropwizard/src/main/java/io/prometheus/client/dropwizard/DropwizardExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.collect()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "801f91e05cbee4dfe99bd65724d6a7cfede8e94a",
        "previous_commit": "706672af5d7266b9b94b576adb4f2eebc99e12de",
        "date": 1610981427,
        "releases": {
            "previous": "801f91e05cbee4dfe99bd65724d6a7cfede8e94a",
            "next": "801f91e05cbee4dfe99bd65724d6a7cfede8e94a"
        },
        "commit_message": "Add handling for gsum/gcount/created in Prometheus exposition format.\n\nSigned-off-by: Brian Brazil <brian.brazil@robustperception.io>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "801f91e05cbee4dfe99bd65724d6a7cfede8e94a": {
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.write004(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ]
            },
            "706672af5d7266b9b94b576adb4f2eebc99e12de": {
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.write004(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "4a52c1307625a8ee036654abb1e1fefa6a461814",
        "previous_commit": "11408239035f02a125fe3c860f05fcd0be1e7873",
        "date": 1531391561,
        "releases": {
            "previous": "4a52c1307625a8ee036654abb1e1fefa6a461814",
            "next": "4a52c1307625a8ee036654abb1e1fefa6a461814"
        },
        "commit_message": "Add basic auth push gateway (#398)\n\n* Added ability to add authentication logic into pushgateway request. Added Basic Auth. implementation.\r\n\r\nSigned-off-by: bitsal <beletsky.andrew@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "4a52c1307625a8ee036654abb1e1fefa6a461814": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "void io.prometheus.client.exporter.PushGateway.doRequest(CollectorRegistry registry, String job, Map<String, String> groupingKey, String method)"
                ]
            },
            "11408239035f02a125fe3c860f05fcd0be1e7873": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "void io.prometheus.client.exporter.PushGateway.doRequest(CollectorRegistry registry, String job, Map<String, String> groupingKey, String method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "17c98ebe505e583ffe9927f8ab9d910426860c8d",
        "previous_commit": "9701230610aa499a4d75b45b351aa52532779f24",
        "date": 1628288735,
        "releases": {
            "previous": "17c98ebe505e583ffe9927f8ab9d910426860c8d",
            "next": "17c98ebe505e583ffe9927f8ab9d910426860c8d"
        },
        "commit_message": "Prevent name conflicts and rename jvm_classes_loaded (#681)\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "17c98ebe505e583ffe9927f8ab9d910426860c8d": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "public void io.prometheus.client.CollectorRegistry.register(Collector m)"
                ]
            },
            "9701230610aa499a4d75b45b351aa52532779f24": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "public void io.prometheus.client.CollectorRegistry.register(Collector m)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "5655d1fa896a9799dce7830a50b8a05672f1b299",
        "previous_commit": "c3306c4c522c6246d54f2d2504099c8163492944",
        "date": 1630270644,
        "releases": {
            "previous": "5655d1fa896a9799dce7830a50b8a05672f1b299",
            "next": "5655d1fa896a9799dce7830a50b8a05672f1b299"
        },
        "commit_message": "Added HTTP authentication to HTTPServer (#682)\n\nSigned-off-by: Doug Hoard <doug.hoard@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "5655d1fa896a9799dce7830a50b8a05672f1b299": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public HTTPServer io.prometheus.client.exporter.HTTPServer.build()"
                ]
            },
            "c3306c4c522c6246d54f2d2504099c8163492944": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public HTTPServer io.prometheus.client.exporter.HTTPServer.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "9537b443d7ffc48cc9bc5be173f0d49c27f96f6e",
        "previous_commit": "a3547124bcd8879094774ecadeb9078374c3b343",
        "date": 1536051393,
        "releases": {
            "previous": "9537b443d7ffc48cc9bc5be173f0d49c27f96f6e",
            "next": "9537b443d7ffc48cc9bc5be173f0d49c27f96f6e"
        },
        "commit_message": "Fix thread state metrics not being exposed (#419)\n\n* Fix Thread State metrics not being exposed\r\n* Expand ThreadExportsTest to include thread state metrics\r\n\r\nSigned-off-by: Dennis Neufeld <napster@npstr.space>\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "9537b443d7ffc48cc9bc5be173f0d49c27f96f6e": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ThreadExports.java": [
                    "void io.prometheus.client.hotspot.ThreadExports.addThreadMetrics(List<MetricFamilySamples> sampleFamilies)"
                ]
            },
            "a3547124bcd8879094774ecadeb9078374c3b343": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ThreadExports.java": [
                    "void io.prometheus.client.hotspot.ThreadExports.addThreadMetrics(List<MetricFamilySamples> sampleFamilies)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "683466fcf100b7f52ba2ab5c8b73a3b74251869d",
        "previous_commit": "6ed8bee926c52d8ffa0fe5e0642fa91100d6f945",
        "date": 1609696412,
        "releases": {
            "previous": "683466fcf100b7f52ba2ab5c8b73a3b74251869d",
            "next": "683466fcf100b7f52ba2ab5c8b73a3b74251869d"
        },
        "commit_message": "java's method Double.toString is able to convert not-a-number values to \"NaN\" string (#611)\n\nSigned-off-by: Andrey Turbanov <turbanoff@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "683466fcf100b7f52ba2ab5c8b73a3b74251869d": {
                "simpleclient/src/main/java/io/prometheus/client/Collector.java": [
                    "public static String io.prometheus.client.Collector.doubleToGoString(double d)"
                ]
            },
            "6ed8bee926c52d8ffa0fe5e0642fa91100d6f945": {
                "simpleclient/src/main/java/io/prometheus/client/Collector.java": [
                    "public static String io.prometheus.client.Collector.doubleToGoString(double d)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "e4cab67f476ec97ccf6757ecb868f7f30c0db828",
        "previous_commit": "5554fc7f36e773d50484b3675291456e14283ef2",
        "date": 1589462067,
        "releases": {
            "previous": "e4cab67f476ec97ccf6757ecb868f7f30c0db828",
            "next": "e4cab67f476ec97ccf6757ecb868f7f30c0db828"
        },
        "commit_message": "Handle empty label values for the pushgateway. (#553)\n\nFixes #552\r\n\r\nSigned-off-by: Brian Brazil <brian.brazil@robustperception.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "e4cab67f476ec97ccf6757ecb868f7f30c0db828": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "void io.prometheus.client.exporter.PushGateway.doRequest(CollectorRegistry registry, String job, Map<String, String> groupingKey, String method)"
                ]
            },
            "5554fc7f36e773d50484b3675291456e14283ef2": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "void io.prometheus.client.exporter.PushGateway.doRequest(CollectorRegistry registry, String job, Map<String, String> groupingKey, String method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "6b10e1f9273bfbadc815af3f6b8509fef7437101",
        "previous_commit": "5f7292054d03d7eef268fd785695e21a5835e55d",
        "date": 1512054066,
        "releases": {
            "previous": "6b10e1f9273bfbadc815af3f6b8509fef7437101",
            "next": "6b10e1f9273bfbadc815af3f6b8509fef7437101"
        },
        "commit_message": "SimpleCollecor.labels() initialization performance (#307)\n\n- Now, we do 3 lookups in the children Map when we create a new tupple of\r\nlabels. From my understanding, it's to manage concurrent initializations.\r\n\r\nIt can be improved. I suggest to check the result of 'putIfAbsent' to avoid the third\r\nlookup.\r\n\r\nBecause we do not want to create a new Child for each call to #labels, I\r\ndon't find a solution with only 1 lookup. BUT with Java 8, we can consider\r\nthe use of 'computeIfAbsent' with a lambda.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "6b10e1f9273bfbadc815af3f6b8509fef7437101": {
                "simpleclient/src/main/java/io/prometheus/client/SimpleCollector.java": [
                    "public Child io.prometheus.client.SimpleCollector<Child>.labels(String... labelValues)"
                ]
            },
            "5f7292054d03d7eef268fd785695e21a5835e55d": {
                "simpleclient/src/main/java/io/prometheus/client/SimpleCollector.java": [
                    "public Child io.prometheus.client.SimpleCollector<Child>.labels(String... labelValues)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "ec6def41378f4a408f781a13669e2caf82aa6bf3",
        "previous_commit": "fd931c1c6a88bab379fbc91cf3c933dd71dc19a1",
        "date": 1640190091,
        "releases": {
            "previous": "ec6def41378f4a408f781a13669e2caf82aa6bf3",
            "next": "ec6def41378f4a408f781a13669e2caf82aa6bf3"
        },
        "commit_message": "Changes to HTTPServer and HTTPMetricHandler to resolve getting Content-Length=0 when Transfer-Encoding=chunked. Refactored test classes for easier/cleaner testing.\n\nSigned-off-by: Doug Hoard <doug.hoard@gmail.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "ec6def41378f4a408f781a13669e2caf82aa6bf3": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ]
            },
            "fd931c1c6a88bab379fbc91cf3c933dd71dc19a1": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "80b44dc41a04a667fe08f924cc7cc677390326b9",
        "previous_commit": "9d14f766c6c73c26ebdfdf0bb0940a86bbf80df6",
        "date": 1518014274,
        "releases": {
            "previous": "80b44dc41a04a667fe08f924cc7cc677390326b9",
            "next": "80b44dc41a04a667fe08f924cc7cc677390326b9"
        },
        "commit_message": "Adding info for the java runtime name (#338)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "80b44dc41a04a667fe08f924cc7cc677390326b9": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/VersionInfoExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.VersionInfoExports.collect()"
                ]
            },
            "9d14f766c6c73c26ebdfdf0bb0940a86bbf80df6": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/VersionInfoExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.VersionInfoExports.collect()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "11408239035f02a125fe3c860f05fcd0be1e7873",
        "previous_commit": "16e5be3b8ce102684a60d7890cd6fe6fc60c56f4",
        "date": 1529579178,
        "releases": {
            "previous": "11408239035f02a125fe3c860f05fcd0be1e7873",
            "next": "11408239035f02a125fe3c860f05fcd0be1e7873"
        },
        "commit_message": "Extend JVM metrics with thread states (#391)\n\n\r\nSigned-off-by: Christian Stein <christian.stein@xing.com>\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "11408239035f02a125fe3c860f05fcd0be1e7873": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ThreadExports.java": [
                    "void io.prometheus.client.hotspot.ThreadExports.addThreadMetrics(List<MetricFamilySamples> sampleFamilies)"
                ]
            },
            "16e5be3b8ce102684a60d7890cd6fe6fc60c56f4": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ThreadExports.java": [
                    "void io.prometheus.client.hotspot.ThreadExports.addThreadMetrics(List<MetricFamilySamples> sampleFamilies)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "bdc6f2507a81029c1aec6cd8b5276661bb6c7ee1",
        "previous_commit": "5760fe18a38a37af90038a9eefb7d4ca5c451f86",
        "date": 1486387049,
        "releases": {
            "previous": "bdc6f2507a81029c1aec6cd8b5276661bb6c7ee1",
            "next": "bdc6f2507a81029c1aec6cd8b5276661bb6c7ee1"
        },
        "commit_message": "Add JVM and OS version info to export (#196)\n\nAdd JVM version to exports",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "bdc6f2507a81029c1aec6cd8b5276661bb6c7ee1": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/DefaultExports.java": [
                    "public static synchronized void io.prometheus.client.hotspot.DefaultExports.initialize()"
                ]
            },
            "5760fe18a38a37af90038a9eefb7d4ca5c451f86": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/DefaultExports.java": [
                    "public static synchronized void io.prometheus.client.hotspot.DefaultExports.initialize()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "784db178aa3c0fbddb153b3b1551d79a59384216",
        "previous_commit": "37fa7fb33c49cfbb9d2620ee59e350e23af8d2fc",
        "date": 1610982069,
        "releases": {
            "previous": "784db178aa3c0fbddb153b3b1551d79a59384216",
            "next": "784db178aa3c0fbddb153b3b1551d79a59384216"
        },
        "commit_message": "Make jvm_info use an Info. UNTYPED -> UNKNOWN.\n\nSigned-off-by: Brian Brazil <brian.brazil@robustperception.io>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "784db178aa3c0fbddb153b3b1551d79a59384216": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/VersionInfoExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.VersionInfoExports.collect()"
                ]
            },
            "37fa7fb33c49cfbb9d2620ee59e350e23af8d2fc": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/VersionInfoExports.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.hotspot.VersionInfoExports.collect()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "8f94f52c431d5dfae9a143c2be4f16471fe89aa0",
        "previous_commit": "a15f8ad5ea6494ee148ed2110f0c652a539e0dac",
        "date": 1455037450,
        "releases": {
            "previous": "8f94f52c431d5dfae9a143c2be4f16471fe89aa0",
            "next": "8f94f52c431d5dfae9a143c2be4f16471fe89aa0"
        },
        "commit_message": "Added support for basic Thread Counts\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "8f94f52c431d5dfae9a143c2be4f16471fe89aa0": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/DefaultExports.java": [
                    "public static synchronized void io.prometheus.client.hotspot.DefaultExports.initialize()"
                ]
            },
            "a15f8ad5ea6494ee148ed2110f0c652a539e0dac": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/DefaultExports.java": [
                    "public static synchronized void io.prometheus.client.hotspot.DefaultExports.initialize()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "7c9fc397c21ebc9119f40131f075e1b2ed7b3079",
        "previous_commit": "2be241cc3efeefd46c8bd7a6f403f3079a18e7e2",
        "date": 1654509974,
        "releases": {
            "previous": "7c9fc397c21ebc9119f40131f075e1b2ed7b3079",
            "next": "7c9fc397c21ebc9119f40131f075e1b2ed7b3079"
        },
        "commit_message": "Fixed HttpServletResponseAdapterImpl setStatus method to call correct delegate method\n\nSigned-off-by: Doug Hoard <doug.hoard@gmail.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "7c9fc397c21ebc9119f40131f075e1b2ed7b3079": {
                "simpleclient_servlet_jakarta/src/main/java/io/prometheus/client/servlet/jakarta/Adapter.java": [
                    "public void io.prometheus.client.servlet.jakarta.Adapter.setStatus(int httpStatusCode)"
                ]
            },
            "2be241cc3efeefd46c8bd7a6f403f3079a18e7e2": {
                "simpleclient_servlet_jakarta/src/main/java/io/prometheus/client/servlet/jakarta/Adapter.java": [
                    "public void io.prometheus.client.servlet.jakarta.Adapter.setStatus(int httpStatusCode)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "f1950039de5be7666294cf0fe4e6ae34e5b330a9",
        "previous_commit": "5a006515b9c93c8e7131111189248c443892b0a6",
        "date": 1505302009,
        "releases": {
            "previous": "f1950039de5be7666294cf0fe4e6ae34e5b330a9",
            "next": "f1950039de5be7666294cf0fe4e6ae34e5b330a9"
        },
        "commit_message": "HTTP Server: Add support for Gzip Compression + Reuse ByteArray (#291)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "f1950039de5be7666294cf0fe4e6ae34e5b330a9": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ]
            },
            "5a006515b9c93c8e7131111189248c443892b0a6": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "7de891ee551ecc0b27b8eb37f9a6df3a4b4b35d8",
        "previous_commit": "6730f3e32199d6bf0e963b306ff69ef08ac5b178",
        "date": 1655287100,
        "releases": {
            "previous": "7de891ee551ecc0b27b8eb37f9a6df3a4b4b35d8",
            "next": "7de891ee551ecc0b27b8eb37f9a6df3a4b4b35d8"
        },
        "commit_message": "Fix Describable returning an empty list (#785)\n\n* Fix Describable returning an empty list\r\n\r\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\r\n\r\n* Fix implementation and add test\r\n\r\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "7de891ee551ecc0b27b8eb37f9a6df3a4b4b35d8": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private Iterator<Collector> io.prometheus.client.CollectorRegistry.filteredCollectorIterator()"
                ]
            },
            "6730f3e32199d6bf0e963b306ff69ef08ac5b178": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "private Iterator<Collector> io.prometheus.client.CollectorRegistry.filteredCollectorIterator()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "5ae9e247f3f71605b591b80a90e9cb0d8196c5c6",
        "previous_commit": "1c27e58a26cdf7cbe3751f02fcb9acab600fde64",
        "date": 1712351136,
        "releases": {
            "previous": "5ae9e247f3f71605b591b80a90e9cb0d8196c5c6",
            "next": "5ae9e247f3f71605b591b80a90e9cb0d8196c5c6"
        },
        "commit_message": "Explicit DuplicateLabelsException when creating MetricSnapshot\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "5ae9e247f3f71605b591b80a90e9cb0d8196c5c6": {
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/MetricSnapshot.java": [
                    "protected void io.prometheus.metrics.model.snapshots.MetricSnapshot.validateLabels()"
                ]
            },
            "1c27e58a26cdf7cbe3751f02fcb9acab600fde64": {
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/snapshots/MetricSnapshot.java": [
                    "protected void io.prometheus.metrics.model.snapshots.MetricSnapshot.validateLabels()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "97b980c48c4fe988e25f2ec463f86cfbe2829f7c",
        "previous_commit": "f92dd4cffd381c3c5ab2e82fdc83fd2a5458841e",
        "date": 1487267031,
        "releases": {
            "previous": "97b980c48c4fe988e25f2ec463f86cfbe2829f7c",
            "next": "97b980c48c4fe988e25f2ec463f86cfbe2829f7c"
        },
        "commit_message": "Remove unnecessary allocation in TextFormat (#199)\n\nFurther improve work from 5760fe1 - avoid allocating\r\nStringBuilder with double size and allocating a string\r\nfrom it.\r\nAvoid reading the same character twice.\r\nAdd accented characters to the test.",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "97b980c48c4fe988e25f2ec463f86cfbe2829f7c": {
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.write004(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ]
            },
            "f92dd4cffd381c3c5ab2e82fdc83fd2a5458841e": {
                "simpleclient_common/src/main/java/io/prometheus/client/exporter/common/TextFormat.java": [
                    "public static void io.prometheus.client.exporter.common.TextFormat.write004(Writer writer, Enumeration<Collector.MetricFamilySamples> mfs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "2f4b01bb0893d3bead6164239bc9c3cd822acf0a",
        "previous_commit": "95872fc77cd55f88de9ee377e07fbc4aa2410ff7",
        "date": 1649790870,
        "releases": {
            "previous": "2f4b01bb0893d3bead6164239bc9c3cd822acf0a",
            "next": "2f4b01bb0893d3bead6164239bc9c3cd822acf0a"
        },
        "commit_message": "Fix conditional for jvm_memory_bytes_committed\n\nSigned-off-by: Fredrik Svensson <SvenssonWeb@users.noreply.github.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "2f4b01bb0893d3bead6164239bc9c3cd822acf0a": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/MemoryPoolsExports.java": [
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryAreaMetrics(List<MetricFamilySamples> sampleFamilies, Predicate<String> nameFilter)"
                ]
            },
            "95872fc77cd55f88de9ee377e07fbc4aa2410ff7": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/MemoryPoolsExports.java": [
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryAreaMetrics(List<MetricFamilySamples> sampleFamilies, Predicate<String> nameFilter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "17b552c225392e3331319bced40f83e2eb7ea597",
        "previous_commit": "5452faeeade1a732c37eaa4faa6a5ea973d50c8e",
        "date": 1622323426,
        "releases": {
            "previous": "17b552c225392e3331319bced40f83e2eb7ea597",
            "next": "17b552c225392e3331319bced40f83e2eb7ea597"
        },
        "commit_message": "Add \"jvm_memory_pool_collection_bytes_xxx\" providing access to MemoryPoolMXBean.getCollectionUsage()\n\nSigned-off-by: Rainer Jung <rainer.jung@kippdata.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "17b552c225392e3331319bced40f83e2eb7ea597": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/MemoryPoolsExports.java": [
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryPoolMetrics(List<MetricFamilySamples> sampleFamilies)"
                ]
            },
            "5452faeeade1a732c37eaa4faa6a5ea973d50c8e": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/MemoryPoolsExports.java": [
                    "void io.prometheus.client.hotspot.MemoryPoolsExports.addMemoryPoolMetrics(List<MetricFamilySamples> sampleFamilies)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "937a9bfda1089e800ce9d365a2a84100e20dd3be",
        "previous_commit": "a9aed4b8cba353ca3224cd8199d67af9a176f3d1",
        "date": 1534857269,
        "releases": {
            "previous": "937a9bfda1089e800ce9d365a2a84100e20dd3be",
            "next": "937a9bfda1089e800ce9d365a2a84100e20dd3be"
        },
        "commit_message": "Fix HTTP header content-length when using compression (#413)\n\nSigned-off-by: Calu <lucas.boisserie@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "937a9bfda1089e800ce9d365a2a84100e20dd3be": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ]
            },
            "a9aed4b8cba353ca3224cd8199d67af9a176f3d1": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public void io.prometheus.client.exporter.HTTPServer.handle(HttpExchange t)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "1a8bf7da57402f444861c32abc9e0c7cd313748e",
        "previous_commit": "6b10e1f9273bfbadc815af3f6b8509fef7437101",
        "date": 1512163543,
        "releases": {
            "previous": "1a8bf7da57402f444861c32abc9e0c7cd313748e",
            "next": "1a8bf7da57402f444861c32abc9e0c7cd313748e"
        },
        "commit_message": "Produce metric for max thread pool size (#319)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "1a8bf7da57402f444861c32abc9e0c7cd313748e": {
                "simpleclient_jetty_jdk8/src/main/java/io/prometheus/client/jetty/QueuedThreadPoolStatisticsCollector.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.jetty.QueuedThreadPoolStatisticsCollector.collect()"
                ]
            },
            "6b10e1f9273bfbadc815af3f6b8509fef7437101": {
                "simpleclient_jetty_jdk8/src/main/java/io/prometheus/client/jetty/QueuedThreadPoolStatisticsCollector.java": [
                    "public List<MetricFamilySamples> io.prometheus.client.jetty.QueuedThreadPoolStatisticsCollector.collect()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "1950cff385518eae45651df47547f80547d72c1a",
        "previous_commit": "9537b443d7ffc48cc9bc5be173f0d49c27f96f6e",
        "date": 1536679802,
        "releases": {
            "previous": "1950cff385518eae45651df47547f80547d72c1a",
            "next": "1950cff385518eae45651df47547f80547d72c1a"
        },
        "commit_message": "Put response body in pushgateway exception (#83) (#423)\n\nSigned-off-by: Ivan Balashov <ibalashov@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "1950cff385518eae45651df47547f80547d72c1a": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "void io.prometheus.client.exporter.PushGateway.doRequest(CollectorRegistry registry, String job, Map<String, String> groupingKey, String method)"
                ]
            },
            "9537b443d7ffc48cc9bc5be173f0d49c27f96f6e": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "void io.prometheus.client.exporter.PushGateway.doRequest(CollectorRegistry registry, String job, Map<String, String> groupingKey, String method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "b68c124c817df7697c06c5e67aee66a1c22c4ba1",
        "previous_commit": "4fde8312ca337674dd9981ab5d7d280840e37183",
        "date": 1693341926,
        "releases": {
            "previous": "b68c124c817df7697c06c5e67aee66a1c22c4ba1",
            "next": "b68c124c817df7697c06c5e67aee66a1c22c4ba1"
        },
        "commit_message": "Make the DefaultHandler in HTTPServer configurable\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "b68c124c817df7697c06c5e67aee66a1c22c4ba1": {
                "prometheus-metrics-exporter-httpserver/src/main/java/io/prometheus/metrics/exporter/httpserver/HTTPServer.java": [
                    "public HTTPServer io.prometheus.metrics.exporter.httpserver.HTTPServer.buildAndStart()"
                ]
            },
            "4fde8312ca337674dd9981ab5d7d280840e37183": {
                "prometheus-metrics-exporter-httpserver/src/main/java/io/prometheus/metrics/exporter/httpserver/HTTPServer.java": [
                    "public HTTPServer io.prometheus.metrics.exporter.httpserver.HTTPServer.buildAndStart()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c90bf0a83f1951597a3be18a3a07c403cd40c543",
        "previous_commit": "922fa703c68c1ac1ed4fdeeb2bc43437c6e52053",
        "date": 1481275539,
        "releases": {
            "previous": "c90bf0a83f1951597a3be18a3a07c403cd40c543",
            "next": "c90bf0a83f1951597a3be18a3a07c403cd40c543"
        },
        "commit_message": "Fixes #169 - add thread deadlock metrics (#170)\n\n* Fixes #169 - add thread deadlock metrics\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "c90bf0a83f1951597a3be18a3a07c403cd40c543": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ThreadExports.java": [
                    "void io.prometheus.client.hotspot.ThreadExports.addThreadMetrics(List<MetricFamilySamples> sampleFamilies)"
                ]
            },
            "922fa703c68c1ac1ed4fdeeb2bc43437c6e52053": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/ThreadExports.java": [
                    "void io.prometheus.client.hotspot.ThreadExports.addThreadMetrics(List<MetricFamilySamples> sampleFamilies)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "ac5136b864d5d90a7ce5e1da0c235da2dcfc18e2",
        "previous_commit": "c3dc1f2506108761414309210c3a98e775e331a4",
        "date": 1584199824,
        "releases": {
            "previous": "ac5136b864d5d90a7ce5e1da0c235da2dcfc18e2",
            "next": "ac5136b864d5d90a7ce5e1da0c235da2dcfc18e2"
        },
        "commit_message": "Wrap PrintWriter with BufferedWriter (#540)\n\n* Wrap PrintWriter with BufferedWriter\r\n* Microbenchmark for BufferedWriter wrapper\r\n\r\nSigned-off-by: Takanori Takase <scm@after-sunrise.com>\r\nCo-authored-by: Takanori Takase <scm@after-sunrise.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "ac5136b864d5d90a7ce5e1da0c235da2dcfc18e2": {
                "simpleclient_servlet/src/main/java/io/prometheus/client/exporter/MetricsServlet.java": [
                    "protected void io.prometheus.client.exporter.MetricsServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)"
                ]
            },
            "c3dc1f2506108761414309210c3a98e775e331a4": {
                "simpleclient_servlet/src/main/java/io/prometheus/client/exporter/MetricsServlet.java": [
                    "protected void io.prometheus.client.exporter.MetricsServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "a9a91546eeb0560b9f163e8e0efa56874e460baf",
        "previous_commit": "b2174ed00c90cda14d624a46c49dc2ed0ce318ca",
        "date": 1485993965,
        "releases": {
            "previous": "a9a91546eeb0560b9f163e8e0efa56874e460baf",
            "next": "a9a91546eeb0560b9f163e8e0efa56874e460baf"
        },
        "commit_message": "Close Writer in Finally block (#195)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "a9a91546eeb0560b9f163e8e0efa56874e460baf": {
                "simpleclient_servlet/src/main/java/io/prometheus/client/exporter/MetricsServlet.java": [
                    "protected void io.prometheus.client.exporter.MetricsServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)"
                ]
            },
            "b2174ed00c90cda14d624a46c49dc2ed0ce318ca": {
                "simpleclient_servlet/src/main/java/io/prometheus/client/exporter/MetricsServlet.java": [
                    "protected void io.prometheus.client.exporter.MetricsServlet.doGet(final HttpServletRequest req, final HttpServletResponse resp)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "3a5cef6618d4f4e741d541c1c79b31fb0488d068",
        "previous_commit": "0deffbc4cf06513ca1c75b00936db3956ca1fb1c",
        "date": 1521066702,
        "releases": {
            "previous": "3a5cef6618d4f4e741d541c1c79b31fb0488d068",
            "next": "3a5cef6618d4f4e741d541c1c79b31fb0488d068"
        },
        "commit_message": "Handle null values gracefully in DropwizardExports (#352)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "3a5cef6618d4f4e741d541c1c79b31fb0488d068": {
                "simpleclient_dropwizard/src/main/java/io/prometheus/client/dropwizard/DropwizardExports.java": [
                    "List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.fromGauge(String dropwizardName, Gauge gauge)"
                ]
            },
            "0deffbc4cf06513ca1c75b00936db3956ca1fb1c": {
                "simpleclient_dropwizard/src/main/java/io/prometheus/client/dropwizard/DropwizardExports.java": [
                    "List<MetricFamilySamples> io.prometheus.client.dropwizard.DropwizardExports.fromGauge(String dropwizardName, Gauge gauge)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "fcde9554d759c397775298c64f99c0c169c8111b",
        "previous_commit": "9cf3437917a5942bf754ce2dfa9e93e398c39929",
        "date": 1547031457,
        "releases": {
            "previous": "fcde9554d759c397775298c64f99c0c169c8111b",
            "next": "fcde9554d759c397775298c64f99c0c169c8111b"
        },
        "commit_message": "Allow DefaultExports to be registered with an arbitrary CollectorRegistry (#450)\n\nSigned-off-by: Tom Wieczorek <t.wieczorek@yieldlab.de>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "fcde9554d759c397775298c64f99c0c169c8111b": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/DefaultExports.java": [
                    "public static synchronized void io.prometheus.client.hotspot.DefaultExports.initialize()"
                ]
            },
            "9cf3437917a5942bf754ce2dfa9e93e398c39929": {
                "simpleclient_hotspot/src/main/java/io/prometheus/client/hotspot/DefaultExports.java": [
                    "public static synchronized void io.prometheus.client.hotspot.DefaultExports.initialize()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "4ddd60c3d161272c6a9434c5f1ac519eab964fb9",
        "previous_commit": "b529294987dd75f8046e48e91c3d2780f27002dd",
        "date": 1656604891,
        "releases": {
            "previous": "4ddd60c3d161272c6a9434c5f1ac519eab964fb9",
            "next": "4ddd60c3d161272c6a9434c5f1ac519eab964fb9"
        },
        "commit_message": "Fixed code to correctly unregister a Collector that is not registered (#795)\n\nSigned-off-by: Doug Hoard <doug.hoard@gmail.com>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "4ddd60c3d161272c6a9434c5f1ac519eab964fb9": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "public void io.prometheus.client.CollectorRegistry.unregister(Collector m)"
                ]
            },
            "b529294987dd75f8046e48e91c3d2780f27002dd": {
                "simpleclient/src/main/java/io/prometheus/client/CollectorRegistry.java": [
                    "public void io.prometheus.client.CollectorRegistry.unregister(Collector m)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "d30ddee5655a18f2b296b5f6380113fe76eb751d",
        "previous_commit": "ffb141640e33f79983c22f689f1b86939a0398f9",
        "date": 1639844717,
        "releases": {
            "previous": "d30ddee5655a18f2b296b5f6380113fe76eb751d",
            "next": "d30ddee5655a18f2b296b5f6380113fe76eb751d"
        },
        "commit_message": "Added cleaner SSL support to HTTPServer\n\nSigned-off-by: Doug Hoard <doug.hoard@gmail.com>\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "d30ddee5655a18f2b296b5f6380113fe76eb751d": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public HTTPServer io.prometheus.client.exporter.HTTPServer.build()"
                ]
            },
            "ffb141640e33f79983c22f689f1b86939a0398f9": {
                "simpleclient_httpserver/src/main/java/io/prometheus/client/exporter/HTTPServer.java": [
                    "public HTTPServer io.prometheus.client.exporter.HTTPServer.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    },
    {
        "commit": "60c2553663b0ca3c6defa1f6622473078f8a35b7",
        "previous_commit": "bc2244d635598813d0845900c4d4db94895ca224",
        "date": 1699785795,
        "releases": {
            "previous": "60c2553663b0ca3c6defa1f6622473078f8a35b7",
            "next": "60c2553663b0ca3c6defa1f6622473078f8a35b7"
        },
        "commit_message": "Fix metric name filter in MultiCollector #891 (#893)\n\nSigned-off-by: Fabian St\u00e4ber <fabian@fstab.de>",
        "jmh_dependency": {
            "benchmark_directory": "benchmarks",
            "benchmark_name": "${project.artifactId}.jar",
            "benchmark_module": "benchmarks"
        },
        "method_changes": {
            "60c2553663b0ca3c6defa1f6622473078f8a35b7": {
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/registry/PrometheusRegistry.java": [
                    "public MetricSnapshots io.prometheus.metrics.model.registry.PrometheusRegistry.scrape(Predicate<String> includedNames, PrometheusScrapeRequest scrapeRequest)"
                ]
            },
            "bc2244d635598813d0845900c4d4db94895ca224": {
                "prometheus-metrics-model/src/main/java/io/prometheus/metrics/model/registry/PrometheusRegistry.java": [
                    "public MetricSnapshots io.prometheus.metrics.model.registry.PrometheusRegistry.scrape(Predicate<String> includedNames, PrometheusScrapeRequest scrapeRequest)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e28b835a2f86a17100691f82df8223c0dbdd1ec6",
        "previous_commit": "62001352f37c22e01ff5c806148abca44b41ba81",
        "date": 1564396989,
        "releases": {
            "previous": "e28b835a2f86a17100691f82df8223c0dbdd1ec6",
            "next": "e28b835a2f86a17100691f82df8223c0dbdd1ec6"
        },
        "commit_message": "Handle slashes in pgw grouping label values. (#491)\n\nGood base64 support was only added in Java 8,\r\nwe support back to Java 6 so this is a little unclean.\r\n\r\nSigned-off-by: Brian Brazil <brian.brazil@robustperception.io>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar",
            "benchmark_module": "benchmark"
        },
        "method_changes": {
            "e28b835a2f86a17100691f82df8223c0dbdd1ec6": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "void io.prometheus.client.exporter.PushGateway.doRequest(CollectorRegistry registry, String job, Map<String, String> groupingKey, String method)"
                ]
            },
            "62001352f37c22e01ff5c806148abca44b41ba81": {
                "simpleclient_pushgateway/src/main/java/io/prometheus/client/exporter/PushGateway.java": [
                    "void io.prometheus.client.exporter.PushGateway.doRequest(CollectorRegistry registry, String job, Map<String, String> groupingKey, String method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": true
        }
    }
]