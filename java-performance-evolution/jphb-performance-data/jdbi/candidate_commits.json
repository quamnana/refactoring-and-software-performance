[
    {
        "commit": "49ae34ffafc78374f1f41fbc62a555683f271f9e",
        "previous_commit": "4a65630f13284720fe1eab7e8c14d78b5508b3db",
        "date": 1724087887,
        "releases": {
            "previous": "49ae34ffafc78374f1f41fbc62a555683f271f9e",
            "next": "49ae34ffafc78374f1f41fbc62a555683f271f9e"
        },
        "commit_message": "PMD 7 fixups\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "49ae34ffafc78374f1f41fbc62a555683f271f9e": {
                "core/src/main/java/org/jdbi/v3/core/argument/QualifiedArgumentFactory.java": [
                    "static QualifiedArgumentFactory.Preparable adapt(ConfigRegistry config, ArgumentFactory.Preparable factory)"
                ],
                "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java": [
                    "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)"
                ],
                "core/src/main/java/org/jdbi/v3/core/config/internal/ConfigCaches.java": [
                    "public static <K, V> ConfigCache<K, V> org.jdbi.v3.core.config.internal.ConfigCaches.declare(Function<K, ?> keyNormalizer, BiFunction<ConfigRegistry, K, V> computer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/ExtensionHandler.java": [
                    "static ExtensionHandler createForSpecialMethod(Method method)",
                    "static ExtensionHandler createForMethod(Method method)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerFactory.java": [
                    "public boolean org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerFactory.accepts(Class<?> extensionType, Method method)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "private Object org.jdbi.v3.core.internal.OnDemandExtensions.createProxy(Jdbi jdbi, Class<?> extensionType, Class<?>... extraTypes)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/ColumnMappers.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.ColumnMappers.findFor(Type type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/Mappers.java": [
                    "public <T> Optional<RowMapper<T>> org.jdbi.v3.core.mapper.Mappers.findFor(QualifiedType<T> type)",
                    "public Optional<RowMapper<?>> org.jdbi.v3.core.mapper.Mappers.findFor(Type type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/OptionalColumnMapperFactory.java": [
                    "private static ColumnMapper<?> org.jdbi.v3.core.mapper.OptionalColumnMapperFactory.create(Type type, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/OptionalRowMapperFactory.java": [
                    "private static Optional<RowMapper<?>> org.jdbi.v3.core.mapper.OptionalRowMapperFactory.create(Type type, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/BeanMapper.java": [
                    "public static <T> RowMapper<T> org.jdbi.v3.core.mapper.reflect.BeanMapper<T>.of(Class<T> type)",
                    "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.BeanMapper<T>.factory(Class<?> type)",
                    "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.BeanMapper<T>.factory(Class<?> type, String prefix)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "public static <T> RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.of(Constructor<T> constructor)",
                    "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.factory(Constructor<?> constructor, String prefix)",
                    "public static <T> RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.of(Class<T> type)",
                    "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.factory(Constructor<?> constructor)",
                    "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.factory(Class<?> clazz, String prefix)",
                    "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.factory(Class<?> clazz)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.factory(Class<?> type, String prefix)",
                    "public static <T> RowMapper<T> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.of(Class<T> type)",
                    "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.factory(Class<?> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoBuilderUtils.java": [
                    "public static MethodHandle org.jdbi.v3.core.mapper.reflect.internal.PojoBuilderUtils.findBuilderSetter(final Class<?> builderClass, String name, Method decl, Type type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "protected PojoMapper<?> createNestedMapper(StatementContext ctx, PojoProperty<T> property, String nestedPrefix)"
                ],
                "core/src/main/java/org/jdbi/v3/core/result/BatchResultIterable.java": [
                    "static <U> BatchResultIterable<U> of(ResultIterable<U> delegate, Supplier<int[]> modifiedRowCountsSupplier)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/ArgumentBinder.java": [
                    "void org.jdbi.v3.core.statement.ArgumentBinder.bindPositional(Binding binding)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "public ResultIterator<Integer> org.jdbi.v3.core.statement.PreparedBatch.executeAndGetModCount()"
                ],
                "postgis/src/main/java/org/jdbi/v3/postgis/PostgisCodec.java": [
                    "public ColumnMapper<Geometry> org.jdbi.v3.postgis.PostgisCodec.getColumnMapper()"
                ],
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlMethodHandlerFactory.java": [
                    "public boolean org.jdbi.v3.sqlobject.SqlMethodHandlerFactory.accepts(Class<?> extensionType, Method method)",
                    "public Optional<ExtensionHandler> org.jdbi.v3.sqlobject.SqlMethodHandlerFactory.createExtensionHandler(Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "public Object invoke(HandleSupplier handleSupplier, Object target, Object... args)",
                    "private Iterator<Object[]> zipArgs(Method method, Object[] args)"
                ]
            },
            "4a65630f13284720fe1eab7e8c14d78b5508b3db": {
                "core/src/main/java/org/jdbi/v3/core/argument/QualifiedArgumentFactory.java": [
                    "static QualifiedArgumentFactory.Preparable adapt(ConfigRegistry config, ArgumentFactory.Preparable factory)"
                ],
                "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java": [
                    "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)"
                ],
                "core/src/main/java/org/jdbi/v3/core/config/internal/ConfigCaches.java": [
                    "public static <K, V> ConfigCache<K, V> org.jdbi.v3.core.config.internal.ConfigCaches.declare(Function<K, ?> keyNormalizer, BiFunction<ConfigRegistry, K, V> computer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/ExtensionHandler.java": [
                    "static ExtensionHandler createForSpecialMethod(Method method)",
                    "static ExtensionHandler createForMethod(Method method)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerFactory.java": [
                    "public boolean org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerFactory.accepts(Class<?> extensionType, Method method)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "private Object org.jdbi.v3.core.internal.OnDemandExtensions.createProxy(Jdbi jdbi, Class<?> extensionType, Class<?>... extraTypes)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/ColumnMappers.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.ColumnMappers.findFor(Type type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/Mappers.java": [
                    "public <T> Optional<RowMapper<T>> org.jdbi.v3.core.mapper.Mappers.findFor(QualifiedType<T> type)",
                    "public Optional<RowMapper<?>> org.jdbi.v3.core.mapper.Mappers.findFor(Type type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/OptionalColumnMapperFactory.java": [
                    "private static ColumnMapper<?> org.jdbi.v3.core.mapper.OptionalColumnMapperFactory.create(Type type, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/OptionalRowMapperFactory.java": [
                    "private static Optional<RowMapper<?>> org.jdbi.v3.core.mapper.OptionalRowMapperFactory.create(Type type, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/BeanMapper.java": [
                    "public static <T> RowMapper<T> org.jdbi.v3.core.mapper.reflect.BeanMapper<T>.of(Class<T> type)",
                    "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.BeanMapper<T>.factory(Class<?> type)",
                    "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.BeanMapper<T>.factory(Class<?> type, String prefix)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "public static <T> RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.of(Constructor<T> constructor)",
                    "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.factory(Constructor<?> constructor, String prefix)",
                    "public static <T> RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.of(Class<T> type)",
                    "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.factory(Constructor<?> constructor)",
                    "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.factory(Class<?> clazz, String prefix)",
                    "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.factory(Class<?> clazz)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.factory(Class<?> type, String prefix)",
                    "public static <T> RowMapper<T> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.of(Class<T> type)",
                    "public static RowMapperFactory org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.factory(Class<?> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoBuilderUtils.java": [
                    "public static MethodHandle org.jdbi.v3.core.mapper.reflect.internal.PojoBuilderUtils.findBuilderSetter(final Class<?> builderClass, String name, Method decl, Type type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "protected PojoMapper<?> createNestedMapper(StatementContext ctx, PojoProperty<T> property, String nestedPrefix)"
                ],
                "core/src/main/java/org/jdbi/v3/core/result/BatchResultIterable.java": [
                    "static <U> BatchResultIterable<U> of(ResultIterable<U> delegate, Supplier<int[]> modifiedRowCountsSupplier)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/ArgumentBinder.java": [
                    "void org.jdbi.v3.core.statement.ArgumentBinder.bindPositional(Binding binding)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "public ResultIterator<Integer> org.jdbi.v3.core.statement.PreparedBatch.executeAndGetModCount()"
                ],
                "postgis/src/main/java/org/jdbi/v3/postgis/PostgisCodec.java": [
                    "public ColumnMapper<Geometry> org.jdbi.v3.postgis.PostgisCodec.getColumnMapper()"
                ],
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlMethodHandlerFactory.java": [
                    "public boolean org.jdbi.v3.sqlobject.SqlMethodHandlerFactory.accepts(Class<?> extensionType, Method method)",
                    "public Optional<ExtensionHandler> org.jdbi.v3.sqlobject.SqlMethodHandlerFactory.createExtensionHandler(Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "public Object invoke(HandleSupplier handleSupplier, Object target, Object... args)",
                    "private Iterator<Object[]> zipArgs(Method method, Object[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3ff1d141adf07ac7a4d0c3baecf6676c0c73be25",
        "previous_commit": "2f9d5887e749c5b81a86d9d6d3c93a5424e02511",
        "date": 1681275955,
        "releases": {
            "previous": "3ff1d141adf07ac7a4d0c3baecf6676c0c73be25",
            "next": "3ff1d141adf07ac7a4d0c3baecf6676c0c73be25"
        },
        "commit_message": "Some small changes to extension framework\n\n- extension factories are by default virtual, use NON_VIRTUAL_FACTORY\n  flag instead of VIRTUAL_FACTORY flag\n- use INSTANCE for all singletons, replace FACTORY and HANDLER\n- rename buildExtensionInitData to buildExtensionMetadata\n- extension factory attach method has a default implementation that says\n\"unimplemented\". This matches the \"default virtual factory\" change.\n- ExtensionHandlerFactory is now a toplevel class\n- rename buildExtensionHandler to createExtensionHandler\n- provide default (empty) default methods for ConfigCustomizer interface\n- remove config method parameter from Extensions#findMetadata\n- Rename `CLASSES_ARE_SUPPORTED` feature flag to `DONT_USE_PROXY`.\n- Make ExtensionFactory a functional interface with apply()\n- rename UseExtensionCustomizer to UseExtensionHandlerCustomizer\n- name the annotation factories more consistently\n- introduce SimpleExtensionConfigurer, make most extension configurers\n  that behave the same for instance and method use extend it\n- rename `ExtensionCustomizationOrder` to `ExtensionHandlerCustomizationOrder`\n- document `NoSuchExtensionException`\n- Filter synthetic and default methods for user factories\n- Rename UseAnnotationHandlerFactory -> UseAnnotationExtensionHandlerFactory\n- make configure method in SimpleExtensionConfigurer public\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3ff1d141adf07ac7a4d0c3baecf6676c0c73be25": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <E> E org.jdbi.v3.core.Jdbi.onDemand(Class<E> extensionType)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/ExtensionFactoryDelegate.java": [
                    "public Collection<ExtensionHandlerFactory> org.jdbi.v3.core.extension.ExtensionFactoryDelegate.getExtensionHandlerFactories(ConfigRegistry config)",
                    "public <E> E org.jdbi.v3.core.extension.ExtensionFactoryDelegate.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/ExtensionMetadata.java": [
                    "public ExtensionMetadata build()",
                    "private Optional<ExtensionHandler> findExtensionHandlerFor(Class<?> extensionType, Method method)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/Extensions.java": [
                    "public ExtensionMetadata org.jdbi.v3.core.extension.Extensions.findMetadata(Class<?> extensionType, ExtensionFactory extensionFactory)",
                    "public Extensions org.jdbi.v3.core.extension.Extensions.registerHandlerFactory(ExtensionHandlerFactory extensionHandlerFactory)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "private Object org.jdbi.v3.core.internal.OnDemandExtensions.createProxy(Jdbi jdbi, Class<?> extensionType, Class<?>... extraTypes)"
                ],
                "freemarker/src/main/java/org/jdbi/v3/freemarker/internal/UseFreemarkerSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.freemarker.internal.UseFreemarkerSqlLocatorImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/GeneratorSqlObjectFactory.java": [
                    "public Set<FactoryFlag> org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.getFactoryFlags()",
                    "public <E> E org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/KeyColumnImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.KeyColumnImpl.configureForMethod(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterArgumentFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterArgumentFactoryImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterBeanMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterBeanMapperImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterBeanMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterBeanMappersImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterCollectorFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterCollectorFactoryImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperFactoriesImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperFactoryImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMappersImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterConstructorMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterConstructorMappersImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterFieldMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterFieldMappersImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterObjectArgumentFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterObjectArgumentFactoriesImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterObjectArgumentFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterObjectArgumentFactoryImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperFactoriesImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperFactoryImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMappersImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/UseSqlParserImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.UseSqlParserImpl.configureForMethod(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/UseTemplateEngineImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.UseTemplateEngineImpl.configureForMethod(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType, @Nullable Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/ValueColumnImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.ValueColumnImpl.configureForMethod(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType, Method method)"
                ],
                "stringtemplate4/src/main/java/org/jdbi/v3/stringtemplate4/internal/UseStringTemplateSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.stringtemplate4.internal.UseStringTemplateSqlLocatorImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ]
            },
            "2f9d5887e749c5b81a86d9d6d3c93a5424e02511": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <E> E org.jdbi.v3.core.Jdbi.onDemand(Class<E> extensionType)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/ExtensionFactoryDelegate.java": [
                    "public Collection<ExtensionHandlerFactory> org.jdbi.v3.core.extension.ExtensionFactoryDelegate.getExtensionHandlerFactories(ConfigRegistry config)",
                    "public <E> E org.jdbi.v3.core.extension.ExtensionFactoryDelegate.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/ExtensionMetadata.java": [
                    "public ExtensionMetadata build()",
                    "private Optional<? extends ExtensionHandler> findExtensionHandlerFor(Class<?> extensionType, Method method)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/Extensions.java": [
                    "public ExtensionMetadata org.jdbi.v3.core.extension.Extensions.findMetadata(Class<?> extensionType, ConfigRegistry config, ExtensionFactory extensionFactory)",
                    "public Extensions org.jdbi.v3.core.extension.Extensions.registerHandlerFactory(ExtensionHandlerFactory extensionHandlerFactory)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "private Object org.jdbi.v3.core.internal.OnDemandExtensions.createProxy(Jdbi db, Class<?> extensionType, Class<?>... extraTypes)"
                ],
                "freemarker/src/main/java/org/jdbi/v3/freemarker/internal/UseFreemarkerSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.freemarker.internal.UseFreemarkerSqlLocatorImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/GeneratorSqlObjectFactory.java": [
                    "public Set<FactoryFlag> org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.getFactoryFlags()",
                    "public <E> E org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/KeyColumnImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.KeyColumnImpl.configureForMethod(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterArgumentFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterArgumentFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterBeanMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterBeanMapperImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterBeanMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterBeanMappersImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterCollectorFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterCollectorFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperFactoriesImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMappersImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterConstructorMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterConstructorMappersImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterFieldMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterFieldMappersImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterObjectArgumentFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterObjectArgumentFactoriesImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterObjectArgumentFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterObjectArgumentFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperFactoriesImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMappersImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/UseSqlParserImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.UseSqlParserImpl.configureForMethod(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/UseTemplateEngineImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.UseTemplateEngineImpl.configureForMethod(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType, @Nullable Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/ValueColumnImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.ValueColumnImpl.configureForMethod(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType, Method method)"
                ],
                "stringtemplate4/src/main/java/org/jdbi/v3/stringtemplate4/internal/UseStringTemplateSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.stringtemplate4.internal.UseStringTemplateSqlLocatorImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2e1d2244c8affd3aab76ec2b9dcbf898845343c0",
        "previous_commit": "88eeb97188f6bde7ea5654051591f9f03c16eb73",
        "date": 1678427974,
        "releases": {
            "previous": "2e1d2244c8affd3aab76ec2b9dcbf898845343c0",
            "next": "2e1d2244c8affd3aab76ec2b9dcbf898845343c0"
        },
        "commit_message": "Rewrite sqlobject extension\n\nUse the new extension framework, deprecate all the sqlobject specific\npieces. They still work fine, but new code should use the extension\nframework directly.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2e1d2244c8affd3aab76ec2b9dcbf898845343c0": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/GeneratorSqlObjectFactory.java": [
                    "public boolean org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.accepts(Class<?> extensionType)",
                    "public Optional<Object> org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.onDemand(Jdbi jdbi, Class<?> extensionType, Class<?>... extraTypes)",
                    "public <E> E org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlMethodAnnotatedHandlerDecorator.java": [
                    "public Handler org.jdbi.v3.sqlobject.SqlMethodAnnotatedHandlerDecorator.decorateHandler(Handler delegate, Class<?> sqlObjectType, Method method)",
                    "private static HandlerDecorator org.jdbi.v3.sqlobject.SqlMethodAnnotatedHandlerDecorator.buildDecorator(Class<? extends HandlerDecorator> decoratorClass)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public boolean org.jdbi.v3.sqlobject.SqlObjectFactory.accepts(Class<?> extensionType)",
                    "public Set<FactoryFlag> org.jdbi.v3.sqlobject.SqlObjectFactory.getFactoryFlags()",
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterArgumentFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterArgumentFactoriesImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterArgumentFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterArgumentFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterBeanMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterBeanMappersImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterCollectorFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterCollectorFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperFactoriesImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMappersImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterConstructorMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterConstructorMappersImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterFieldMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterFieldMappersImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterObjectArgumentFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterObjectArgumentFactoriesImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperFactoriesImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMappersImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java": [
                    "static RowMapper<?> rowMapperFor(UseRowMapper annotation)",
                    "static RowReducer<?, ?> rowReducerFor(UseRowReducer annotation)",
                    "private static SqlStatementCustomizerFactory instantiateFactory(Annotation annotation)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "public Object invoke(HandleSupplier handleSupplier, Object target, Object... args)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/transaction/internal/TransactionDecorator.java": [
                    "public ExtensionHandler org.jdbi.v3.sqlobject.transaction.internal.TransactionDecorator.customize(ExtensionHandler delegate, Class<?> sqlObjectType, Method method)"
                ]
            },
            "88eeb97188f6bde7ea5654051591f9f03c16eb73": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/GeneratorSqlObjectFactory.java": [
                    "public boolean org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.accepts(Class<?> extensionType)",
                    "public Optional<Object> org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.onDemand(Jdbi jdbi, Class<?> extensionType, Class<?>... extraTypes)",
                    "public <E> E org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlMethodAnnotatedHandlerDecorator.java": [
                    "public Handler org.jdbi.v3.sqlobject.SqlMethodAnnotatedHandlerDecorator.decorateHandler(Handler delegate, Class<?> sqlObjectType, Method method)",
                    "private static HandlerDecorator org.jdbi.v3.sqlobject.SqlMethodAnnotatedHandlerDecorator.buildDecorator(Class<? extends HandlerDecorator> decoratorClass)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public boolean org.jdbi.v3.sqlobject.SqlObjectFactory.accepts(Class<?> extensionType)",
                    "public Set<FactoryFlag> org.jdbi.v3.sqlobject.SqlObjectFactory.getFactoryFlags()",
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterArgumentFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterArgumentFactoriesImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterArgumentFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterArgumentFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterBeanMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterBeanMappersImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterCollectorFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterCollectorFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperFactoriesImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMappersImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterConstructorMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterConstructorMappersImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterFieldMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterFieldMappersImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterObjectArgumentFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterObjectArgumentFactoriesImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperFactoriesImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMappersImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java": [
                    "static RowMapper<?> rowMapperFor(UseRowMapper annotation)",
                    "static RowReducer<?, ?> rowReducerFor(UseRowReducer annotation)",
                    "private static SqlStatementCustomizerFactory instantiateFactory(Annotation annotation)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "public Object invoke(Object target, Object[] args, HandleSupplier handleSupplier)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/transaction/internal/TransactionDecorator.java": [
                    "public Handler org.jdbi.v3.sqlobject.transaction.internal.TransactionDecorator.decorateHandler(Handler delegate, Class<?> sqlObjectType, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2ec145e817273a3795ee0157a46825f2ce46b7f9",
        "previous_commit": "c247ce52e9b852e6c7bbfcb3db7dc74cc648221c",
        "date": 1688240688,
        "releases": {
            "previous": "2ec145e817273a3795ee0157a46825f2ce46b7f9",
            "next": "2ec145e817273a3795ee0157a46825f2ce46b7f9"
        },
        "commit_message": "Update the remaining ExtensionConfigurer\n\nApply the patterns from #2416 to all the remaining configurers.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2ec145e817273a3795ee0157a46825f2ce46b7f9": {
                "commons-text/src/main/java/org/jdbi/v3/commonstext/internal/UseStringSubstitutorTemplateEngineImpl.java": [
                    "public void org.jdbi.v3.commonstext.internal.UseStringSubstitutorTemplateEngineImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java": [
                    "private static Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.buildConfigCustomizer(Class<?> extensionType, Method method, Stream<AnnotatedElement> elements, ConfigurerMethod consumer)",
                    "public Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionMethod(Class<?> extensionType, Method method)",
                    "public Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionType(Class<?> extensionType)"
                ],
                "freemarker/src/main/java/org/jdbi/v3/freemarker/internal/UseFreemarkerSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.freemarker.internal.UseFreemarkerSqlLocatorImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/KeyColumnImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.KeyColumnImpl.configureForMethod(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterBeanMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterBeanMapperImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterBeanMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterBeanMappersImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterCollectorFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterCollectorFactoryImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterCollectorImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterCollectorImpl.configure(final ConfigRegistry config, final Annotation annotation, final Class<?> extensionType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterConstructorMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterConstructorMapperImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterConstructorMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterConstructorMappersImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterFieldMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterFieldMapperImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterFieldMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterFieldMappersImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterJoinRowMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterJoinRowMapperImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterObjectArgumentFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterObjectArgumentFactoriesImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterObjectArgumentFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterObjectArgumentFactoryImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/UseEnumStrategyImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.UseEnumStrategyImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/ValueColumnImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.ValueColumnImpl.configureForMethod(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/internal/UseAnnotationSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.sqlobject.locator.internal.UseAnnotationSqlLocatorImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/internal/UseClasspathSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.sqlobject.locator.internal.UseClasspathSqlLocatorImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "stringtemplate4/src/main/java/org/jdbi/v3/stringtemplate4/internal/UseStringTemplateEngineImpl.java": [
                    "public void org.jdbi.v3.stringtemplate4.internal.UseStringTemplateEngineImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "stringtemplate4/src/main/java/org/jdbi/v3/stringtemplate4/internal/UseStringTemplateSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.stringtemplate4.internal.UseStringTemplateSqlLocatorImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ]
            },
            "c247ce52e9b852e6c7bbfcb3db7dc74cc648221c": {
                "commons-text/src/main/java/org/jdbi/v3/commonstext/internal/UseStringSubstitutorTemplateEngineImpl.java": [
                    "public void org.jdbi.v3.commonstext.internal.UseStringSubstitutorTemplateEngineImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java": [
                    "private static Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.buildConfigCustomizer(Class<?> extensionType, Stream<AnnotatedElement> elements, ConfigurerMethod consumer)",
                    "public Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionMethod(Class<?> extensionType, Method method)",
                    "public Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionType(Class<?> extensionType)"
                ],
                "freemarker/src/main/java/org/jdbi/v3/freemarker/internal/UseFreemarkerSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.freemarker.internal.UseFreemarkerSqlLocatorImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/KeyColumnImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.KeyColumnImpl.configureForMethod(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterBeanMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterBeanMapperImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterBeanMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterBeanMappersImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterCollectorFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterCollectorFactoryImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterCollectorImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterCollectorImpl.configure(final ConfigRegistry config, final Annotation annotation, final Class<?> extensionType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterConstructorMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterConstructorMapperImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterConstructorMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterConstructorMappersImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterFieldMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterFieldMapperImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterFieldMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterFieldMappersImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterJoinRowMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterJoinRowMapperImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterObjectArgumentFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterObjectArgumentFactoriesImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterObjectArgumentFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterObjectArgumentFactoryImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/UseEnumStrategyImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.UseEnumStrategyImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/ValueColumnImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.ValueColumnImpl.configureForMethod(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/internal/UseAnnotationSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.sqlobject.locator.internal.UseAnnotationSqlLocatorImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/internal/UseClasspathSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.sqlobject.locator.internal.UseClasspathSqlLocatorImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "stringtemplate4/src/main/java/org/jdbi/v3/stringtemplate4/internal/UseStringTemplateEngineImpl.java": [
                    "public void org.jdbi.v3.stringtemplate4.internal.UseStringTemplateEngineImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "stringtemplate4/src/main/java/org/jdbi/v3/stringtemplate4/internal/UseStringTemplateSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.stringtemplate4.internal.UseStringTemplateSqlLocatorImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3d67577f2ad8f507daa531b285b66bcdb65c1dd5",
        "previous_commit": "2803c0f757c3bde710c17949208479e78bf39518",
        "date": 1554413260,
        "releases": {
            "previous": "3d67577f2ad8f507daa531b285b66bcdb65c1dd5",
            "next": "3d67577f2ad8f507daa531b285b66bcdb65c1dd5"
        },
        "commit_message": "Remove ExpiringMap dependency; introduce JdbiCache\n\nUse either weak ClassLoader maps or new JdbiCache, which implements\na shared cache per Jdbi instance\n\nFixes #1453\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3d67577f2ad8f507daa531b285b66bcdb65c1dd5": {
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectFieldArguments.java": [
                    "protected Optional<TypedValue> org.jdbi.v3.core.argument.ObjectFieldArguments.getValue(String name, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectMethodArguments.java": [
                    "protected Optional<TypedValue> org.jdbi.v3.core.argument.ObjectMethodArguments.getValue(String name, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/QualifiedArgumentFactory.java": [
                    "static QualifiedArgumentFactory adapt(ArgumentFactory factory)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/internal/PojoPropertyArguments.java": [
                    "protected NamedArgumentFinder org.jdbi.v3.core.argument.internal.PojoPropertyArguments.getNestedArgumentFinder(Object o)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/EnumStrategies.java": [
                    "public <E extends Enum<E>> EnumStrategy org.jdbi.v3.core.internal.EnumStrategies.findStrategy(QualifiedType<E> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/locator/ClasspathSqlLocator.java": [
                    "public static String org.jdbi.v3.core.locator.ClasspathSqlLocator.getResourceOnClasspath(ClassLoader classLoader, String path)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/QualifiedColumnMapperFactory.java": [
                    "static QualifiedColumnMapperFactory adapt(ColumnMapperFactory factory)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "public PojoBuilder<T> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.create()",
                    "public QualifiedType<?> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.getQualifiedType()",
                    "public void org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.set(String property, Object value)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/ImmutablesPropertiesFactory.java": [],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private String debugName(PojoProperty<T> p)",
                    "protected PojoMapper<?> createNestedMapper(StatementContext ctx, PojoProperty<T> property, String nestedPrefix)",
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapperFactory.java": [
                    "public Optional<RowMapper<?>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapperFactory.build(Type type, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoTypes.java": [
                    "public Optional<PojoProperties<?>> org.jdbi.v3.core.mapper.reflect.internal.PojoTypes.findFor(Type type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/qualifier/Qualifiers.java": [
                    "private static Set<Annotation> org.jdbi.v3.core.qualifier.Qualifiers.getQualifiers(AnnotatedElement... elements)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java": [
                    "static ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(Class<?> extensionType, Method method)"
                ],
                "stringtemplate4/src/main/java/org/jdbi/v3/stringtemplate4/StringTemplateSqlLocator.java": [
                    "public static STGroup org.jdbi.v3.stringtemplate4.StringTemplateSqlLocator.findStringTemplateGroup(ClassLoader classLoader, String path)"
                ]
            },
            "2803c0f757c3bde710c17949208479e78bf39518": {
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectFieldArguments.java": [
                    "protected Optional<TypedValue> org.jdbi.v3.core.argument.ObjectFieldArguments.getValue(String name, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectMethodArguments.java": [
                    "protected Optional<TypedValue> org.jdbi.v3.core.argument.ObjectMethodArguments.getValue(String name, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/QualifiedArgumentFactory.java": [
                    "static QualifiedArgumentFactory adapt(ArgumentFactory factory)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/internal/PojoPropertyArguments.java": [
                    "protected NamedArgumentFinder org.jdbi.v3.core.argument.internal.PojoPropertyArguments.getNestedArgumentFinder(Object o)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/EnumStrategies.java": [
                    "public <E extends Enum<E>> EnumStrategy org.jdbi.v3.core.internal.EnumStrategies.findStrategy(QualifiedType<E> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/locator/ClasspathSqlLocator.java": [
                    "public static String org.jdbi.v3.core.locator.ClasspathSqlLocator.getResourceOnClasspath(ClassLoader classLoader, String path)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/QualifiedColumnMapperFactory.java": [
                    "static QualifiedColumnMapperFactory adapt(ColumnMapperFactory factory)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "public PojoBuilder<T> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.create()",
                    "public QualifiedType<?> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.getQualifiedType()",
                    "public void org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.set(String property, Object value)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/ImmutablesPropertiesFactory.java": [
                    "public PojoBuilder<T> org.jdbi.v3.core.mapper.reflect.internal.ImmutablesPropertiesFactory.create()",
                    "protected ImmutablesPojoProperty<T> org.jdbi.v3.core.mapper.reflect.internal.ImmutablesPropertiesFactory.createProperty(String name, Method m)",
                    "public void org.jdbi.v3.core.mapper.reflect.internal.ImmutablesPropertiesFactory.set(String property, Object value)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private String debugName(PojoProperty<T> p)",
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapperFactory.java": [
                    "public Optional<RowMapper<?>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapperFactory.build(Type type, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoTypes.java": [
                    "public Optional<PojoProperties<?>> org.jdbi.v3.core.mapper.reflect.internal.PojoTypes.findFor(Type type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/qualifier/Qualifiers.java": [
                    "public static Set<Annotation> org.jdbi.v3.core.qualifier.Qualifiers.getQualifiers(AnnotatedElement... elements)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java": [
                    "static ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(Class<?> extensionType, Method method)"
                ],
                "stringtemplate4/src/main/java/org/jdbi/v3/stringtemplate4/StringTemplateSqlLocator.java": [
                    "public static STGroup org.jdbi.v3.stringtemplate4.StringTemplateSqlLocator.findStringTemplateGroup(ClassLoader classLoader, String path)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "55f96d0ec8b012c7b30e2aee0091ab42e085826d",
        "previous_commit": "e850c56306ac49b425a605c82d3d1f71830fe6a9",
        "date": 1640499220,
        "releases": {
            "previous": "55f96d0ec8b012c7b30e2aee0091ab42e085826d",
            "next": "55f96d0ec8b012c7b30e2aee0091ab42e085826d"
        },
        "commit_message": "Infer: NULL_DEREFERENCE\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "55f96d0ec8b012c7b30e2aee0091ab42e085826d": {
                "core/src/main/java/org/jdbi/v3/core/statement/OutParameters.java": [
                    "public Float org.jdbi.v3.core.statement.OutParameters.getFloat(int pos)",
                    "private Number org.jdbi.v3.core.statement.OutParameters.getNumber(String name)",
                    "public byte[] org.jdbi.v3.core.statement.OutParameters.getBytes(int pos)",
                    "public Double org.jdbi.v3.core.statement.OutParameters.getDouble(int pos)",
                    "private Long org.jdbi.v3.core.statement.OutParameters.getEpoch(int pos)",
                    "public Long org.jdbi.v3.core.statement.OutParameters.getLong(String name)",
                    "public byte[] org.jdbi.v3.core.statement.OutParameters.getBytes(String name)",
                    "public Integer org.jdbi.v3.core.statement.OutParameters.getInt(int pos)",
                    "public String org.jdbi.v3.core.statement.OutParameters.getString(int pos)",
                    "public Short org.jdbi.v3.core.statement.OutParameters.getShort(String name)",
                    "public Integer org.jdbi.v3.core.statement.OutParameters.getInt(String name)",
                    "public Long org.jdbi.v3.core.statement.OutParameters.getLong(int pos)",
                    "public Float org.jdbi.v3.core.statement.OutParameters.getFloat(String name)",
                    "private Number org.jdbi.v3.core.statement.OutParameters.getNumber(int pos)",
                    "public String org.jdbi.v3.core.statement.OutParameters.getString(String name)",
                    "public Double org.jdbi.v3.core.statement.OutParameters.getDouble(String name)",
                    "public Short org.jdbi.v3.core.statement.OutParameters.getShort(int pos)",
                    "private Long org.jdbi.v3.core.statement.OutParameters.getEpoch(String name)"
                ]
            },
            "e850c56306ac49b425a605c82d3d1f71830fe6a9": {
                "core/src/main/java/org/jdbi/v3/core/statement/OutParameters.java": [
                    "public Float org.jdbi.v3.core.statement.OutParameters.getFloat(int pos)",
                    "private Number org.jdbi.v3.core.statement.OutParameters.getNumber(String name)",
                    "public byte[] org.jdbi.v3.core.statement.OutParameters.getBytes(int pos)",
                    "public Double org.jdbi.v3.core.statement.OutParameters.getDouble(int pos)",
                    "private Long org.jdbi.v3.core.statement.OutParameters.getEpoch(int pos)",
                    "public Long org.jdbi.v3.core.statement.OutParameters.getLong(String name)",
                    "public byte[] org.jdbi.v3.core.statement.OutParameters.getBytes(String name)",
                    "public Integer org.jdbi.v3.core.statement.OutParameters.getInt(int pos)",
                    "public String org.jdbi.v3.core.statement.OutParameters.getString(int pos)",
                    "public Short org.jdbi.v3.core.statement.OutParameters.getShort(String name)",
                    "public Integer org.jdbi.v3.core.statement.OutParameters.getInt(String name)",
                    "public Long org.jdbi.v3.core.statement.OutParameters.getLong(int pos)",
                    "public Float org.jdbi.v3.core.statement.OutParameters.getFloat(String name)",
                    "private Number org.jdbi.v3.core.statement.OutParameters.getNumber(int pos)",
                    "public String org.jdbi.v3.core.statement.OutParameters.getString(String name)",
                    "public Double org.jdbi.v3.core.statement.OutParameters.getDouble(String name)",
                    "public Short org.jdbi.v3.core.statement.OutParameters.getShort(int pos)",
                    "private Long org.jdbi.v3.core.statement.OutParameters.getEpoch(String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "627ab52d471ba92d69c7b278491ac571678236a1",
        "previous_commit": "9a1e91b8170f73d5185fee3f40c4801e4295528c",
        "date": 1703785386,
        "releases": {
            "previous": "627ab52d471ba92d69c7b278491ac571678236a1",
            "next": "627ab52d471ba92d69c7b278491ac571678236a1"
        },
        "commit_message": "Wrap outparameters into suppliers\n\nDefer the computation of the outparameters until actual use. This allows\nretrieving the result set from the PreparedCall and then calling the out\nparameters, which is necessary when a call returns both outparameters\nand a ResultSet.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "627ab52d471ba92d69c7b278491ac571678236a1": {
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public <T> T org.jdbi.v3.core.statement.Call.invoke(Function<OutParameters, T> resultComputer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/OutParameters.java": [
                    "public Object org.jdbi.v3.core.statement.OutParameters.getObject(String name)",
                    "public byte[] org.jdbi.v3.core.statement.OutParameters.getBytes(int pos)",
                    "private Number org.jdbi.v3.core.statement.OutParameters.getNumber(String name)",
                    "private Long org.jdbi.v3.core.statement.OutParameters.getEpoch(int pos)",
                    "public byte[] org.jdbi.v3.core.statement.OutParameters.getBytes(String name)",
                    "public Date org.jdbi.v3.core.statement.OutParameters.getDate(int pos)",
                    "public String org.jdbi.v3.core.statement.OutParameters.getString(int pos)",
                    "public Object org.jdbi.v3.core.statement.OutParameters.getObject(int position)",
                    "public Timestamp org.jdbi.v3.core.statement.OutParameters.getTimestamp(String name)",
                    "private Number org.jdbi.v3.core.statement.OutParameters.getNumber(int pos)",
                    "private Long org.jdbi.v3.core.statement.OutParameters.getEpoch(String name)",
                    "public ResultBearing org.jdbi.v3.core.statement.OutParameters.getRowSet(int pos)",
                    "public ResultBearing org.jdbi.v3.core.statement.OutParameters.getRowSet(String name)",
                    "public String org.jdbi.v3.core.statement.OutParameters.getString(String name)",
                    "public Date org.jdbi.v3.core.statement.OutParameters.getDate(String name)",
                    "public Timestamp org.jdbi.v3.core.statement.OutParameters.getTimestamp(int pos)"
                ]
            },
            "9a1e91b8170f73d5185fee3f40c4801e4295528c": {
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public <T> T org.jdbi.v3.core.statement.Call.invoke(Function<OutParameters, T> resultComputer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/OutParameters.java": [
                    "public Object org.jdbi.v3.core.statement.OutParameters.getObject(String name)",
                    "public byte[] org.jdbi.v3.core.statement.OutParameters.getBytes(int pos)",
                    "private Number org.jdbi.v3.core.statement.OutParameters.getNumber(String name)",
                    "private Long org.jdbi.v3.core.statement.OutParameters.getEpoch(int pos)",
                    "public byte[] org.jdbi.v3.core.statement.OutParameters.getBytes(String name)",
                    "public Date org.jdbi.v3.core.statement.OutParameters.getDate(int pos)",
                    "public String org.jdbi.v3.core.statement.OutParameters.getString(int pos)",
                    "public Object org.jdbi.v3.core.statement.OutParameters.getObject(int position)",
                    "public Timestamp org.jdbi.v3.core.statement.OutParameters.getTimestamp(String name)",
                    "private Number org.jdbi.v3.core.statement.OutParameters.getNumber(int pos)",
                    "private Long org.jdbi.v3.core.statement.OutParameters.getEpoch(String name)",
                    "public ResultBearing org.jdbi.v3.core.statement.OutParameters.getRowSet(int pos)",
                    "public ResultBearing org.jdbi.v3.core.statement.OutParameters.getRowSet(String name)",
                    "public String org.jdbi.v3.core.statement.OutParameters.getString(String name)",
                    "public Date org.jdbi.v3.core.statement.OutParameters.getDate(String name)",
                    "public Timestamp org.jdbi.v3.core.statement.OutParameters.getTimestamp(int pos)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b546d20f25f21f617d08c310d3589b614e37f74a",
        "previous_commit": "2f5422e9388865b08d31b48b46faa2cff8faf5e9",
        "date": 1569734316,
        "releases": {
            "previous": "b546d20f25f21f617d08c310d3589b614e37f74a",
            "next": "b546d20f25f21f617d08c310d3589b614e37f74a"
        },
        "commit_message": "Introduce (Qualified)ArgumentFactory.Preparable for performance improvements\nConvert most of the built in argument factories to be preparable\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b546d20f25f21f617d08c310d3589b614e37f74a": {
                "core/src/main/java/org/jdbi/v3/core/argument/DelegatingArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.DelegatingArgumentFactory.build(Type expectedType, Object value, ConfigRegistry config)",
                    "<T> void org.jdbi.v3.core.argument.DelegatingArgumentFactory.register(Class<T> klass, int sqlType, StatementBinder<T> binder)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectFieldArguments.java": [
                    "protected Optional<TypedValue> getValue(String name, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectMethodArguments.java": [],
                "core/src/main/java/org/jdbi/v3/core/argument/QualifiedArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument..build(QualifiedType<?> type, Object value, ConfigRegistry config)",
                    "static QualifiedArgumentFactory adapt(ArgumentFactory factory)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/SetObjectArgumentFactory.java": [
                    "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.SetObjectArgumentFactory.prepare(Type type, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Binding.java": [
                    "public Optional<Argument> org.jdbi.v3.core.statement.Binding.findForPosition(int position)",
                    "public void org.jdbi.v3.core.statement.Binding.addNamed(String name, Argument argument)",
                    "public void org.jdbi.v3.core.statement.Binding.addPositional(int position, Argument argument)",
                    "public String org.jdbi.v3.core.statement.Binding.toString()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
                    "public PreparedBatch org.jdbi.v3.core.statement.PreparedBatch.add()"
                ]
            },
            "2f5422e9388865b08d31b48b46faa2cff8faf5e9": {
                "core/src/main/java/org/jdbi/v3/core/argument/DelegatingArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.DelegatingArgumentFactory.build(Type expectedType, Object value, ConfigRegistry config)",
                    "<T> void org.jdbi.v3.core.argument.DelegatingArgumentFactory.register(Class<T> klass, int sqlType, StatementBinder<T> binder)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectFieldArguments.java": [
                    "protected Optional<TypedValue> org.jdbi.v3.core.argument.ObjectFieldArguments.getValue(String name, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectMethodArguments.java": [
                    "protected Optional<TypedValue> org.jdbi.v3.core.argument.ObjectMethodArguments.getValue(String name, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/QualifiedArgumentFactory.java": [
                    "static QualifiedArgumentFactory adapt(ArgumentFactory factory)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/SetObjectArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.SetObjectArgumentFactory.build(Type type, Object value, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Binding.java": [
                    "public Optional<Argument> org.jdbi.v3.core.statement.Binding.findForPosition(int position)",
                    "public void org.jdbi.v3.core.statement.Binding.addNamed(String name, Argument argument)",
                    "public void org.jdbi.v3.core.statement.Binding.addPositional(int position, Argument argument)",
                    "public String org.jdbi.v3.core.statement.Binding.toString()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
                    "public PreparedBatch org.jdbi.v3.core.statement.PreparedBatch.add()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a8ab6dab3e8e3d0874246e6ad4c31637b2781fc1",
        "previous_commit": "f21ebd26cbc30085d6af26ef70b940e44c5c25f0",
        "date": 1668024501,
        "releases": {
            "previous": "a8ab6dab3e8e3d0874246e6ad4c31637b2781fc1",
            "next": "a8ab6dab3e8e3d0874246e6ad4c31637b2781fc1"
        },
        "commit_message": "Replace handle thread locals\n\nRemove the convoluted thread local code in the handle, replace with a\nsimple stack structure in the handle suppliers. This also gets rid of\nthe undocumented and needlessly complicated Invocations class.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a8ab6dab3e8e3d0874246e6ad4c31637b2781fc1": {
                "core/src/main/java/org/jdbi/v3/core/ConstantHandleSupplier.java": [
                    "public <V> V org.jdbi.v3.core.ConstantHandleSupplier.invokeInContext(ExtensionMethod extensionMethod, ConfigRegistry config, Callable<V> task)"
                ],
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public ExtensionMethod org.jdbi.v3.core.Handle.getExtensionMethod()",
                    "public ConfigRegistry org.jdbi.v3.core.Handle.getConfig()",
                    "public void org.jdbi.v3.core.Handle.close()"
                ],
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Jdbi.withHandle(HandleCallback<R, X> callback)",
                    "public <R, E, X extends Exception> R org.jdbi.v3.core.Jdbi.withExtension(Class<E> extensionType, ExtensionCallback<R, E, X> callback)"
                ],
                "core/src/main/java/org/jdbi/v3/core/LazyHandleSupplier.java": [
                    "public void org.jdbi.v3.core.LazyHandleSupplier.close()",
                    "public ConfigRegistry org.jdbi.v3.core.LazyHandleSupplier.getConfig()",
                    "public <V> V org.jdbi.v3.core.LazyHandleSupplier.invokeInContext(ExtensionMethod extensionMethod, ConfigRegistry config, Callable<V> task)",
                    "public Handle org.jdbi.v3.core.LazyHandleSupplier.getHandle()"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/WithHandleMethodHandlerFactory.java": [
                    "public Optional<Handler> org.jdbi.v3.sqlobject.WithHandleMethodHandlerFactory.buildHandler(Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "public Supplier<InContextInvoker> org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lazyInvoker(Object target, Method method, HandleSupplier handle, ConfigRegistry instanceConfig)"
                ]
            },
            "f21ebd26cbc30085d6af26ef70b940e44c5c25f0": {
                "core/src/main/java/org/jdbi/v3/core/ConstantHandleSupplier.java": [
                    "public <V> V org.jdbi.v3.core.ConstantHandleSupplier.invokeInContext(ExtensionMethod extensionMethod, ConfigRegistry config, Callable<V> task)"
                ],
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public ExtensionMethod org.jdbi.v3.core.Handle.getExtensionMethod()",
                    "public ConfigRegistry org.jdbi.v3.core.Handle.getConfig()",
                    "public void org.jdbi.v3.core.Handle.close()"
                ],
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Jdbi.withHandle(HandleCallback<R, X> callback)",
                    "public <R, E, X extends Exception> R org.jdbi.v3.core.Jdbi.withExtension(Class<E> extensionType, ExtensionCallback<R, E, X> callback)"
                ],
                "core/src/main/java/org/jdbi/v3/core/LazyHandleSupplier.java": [
                    "public void org.jdbi.v3.core.LazyHandleSupplier.close()",
                    "public ConfigRegistry org.jdbi.v3.core.LazyHandleSupplier.getConfig()",
                    "public <V> V org.jdbi.v3.core.LazyHandleSupplier.invokeInContext(ExtensionMethod extensionMethod, ConfigRegistry config, Callable<V> task)",
                    "public Handle org.jdbi.v3.core.LazyHandleSupplier.getHandle()"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/WithHandleMethodHandlerFactory.java": [
                    "public Optional<Handler> org.jdbi.v3.sqlobject.WithHandleMethodHandlerFactory.buildHandler(Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "public Supplier<InContextInvoker> org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lazyInvoker(Object target, Method method, HandleSupplier handle, ConfigRegistry instanceConfig)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f4df5c78432d3aa787ccda9f226eb968b8320f3a",
        "previous_commit": "a4f874e0aa3681825e5ee2f0ebd8855be2d877d3",
        "date": 1688151077,
        "releases": {
            "previous": "f4df5c78432d3aa787ccda9f226eb968b8320f3a",
            "next": "f4df5c78432d3aa787ccda9f226eb968b8320f3a"
        },
        "commit_message": "Improve config customizer performance\n\nAllow config customizers that do not need the config object itself to\ncreate internal state at metadata creation time and cache that state as\npart of the extension type metadata. This moves the creation of a\nclass (and potentially other expensive operations) away from the\ninvocation of extension methods.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f4df5c78432d3aa787ccda9f226eb968b8320f3a": {
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java": [
                    "public Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionMethod(Class<?> extensionType, Method method)",
                    "public Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionType(Class<?> extensionType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterArgumentFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterArgumentFactoriesImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterArgumentFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterArgumentFactoryImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperFactoriesImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperFactoryImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMappersImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperFactoriesImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperFactoryImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMappersImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ]
            },
            "a4f874e0aa3681825e5ee2f0ebd8855be2d877d3": {
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java": [
                    "public Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionMethod(Class<?> extensionType, Method method)",
                    "public Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.forExtensionType(Class<?> extensionType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterArgumentFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterArgumentFactoriesImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterArgumentFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterArgumentFactoryImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperFactoriesImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperFactoryImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMappersImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperFactoriesImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperFactoriesImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperFactoryImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMappersImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMappersImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ea2b134b0e51adff268c9c3bffe14509aefd9cb8",
        "previous_commit": "4385e2b21e790541f9d36cae07162385620fa217",
        "date": 1640484738,
        "releases": {
            "previous": "ea2b134b0e51adff268c9c3bffe14509aefd9cb8",
            "next": "ea2b134b0e51adff268c9c3bffe14509aefd9cb8"
        },
        "commit_message": "error-prone: ClassNewInstance fixes\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ea2b134b0e51adff268c9c3bffe14509aefd9cb8": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private T construct()"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "static Configurer getConfigurer(Class<? extends Configurer> factoryClass)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterArgumentFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterArgumentFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterCollectorFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterCollectorFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java": [
                    "static RowMapper<?> rowMapperFor(UseRowMapper annotation)",
                    "static RowReducer<?, ?> rowReducerFor(UseRowReducer annotation)",
                    "private static SqlStatementCustomizerFactory instantiateFactory(Annotation annotation)"
                ]
            },
            "4385e2b21e790541f9d36cae07162385620fa217": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private T construct()"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "static Configurer getConfigurer(Class<? extends Configurer> factoryClass)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterArgumentFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterArgumentFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterCollectorFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterCollectorFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterColumnMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterColumnMapperImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperFactoryImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperFactoryImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/RegisterRowMapperImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.RegisterRowMapperImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java": [
                    "static RowMapper<?> rowMapperFor(UseRowMapper annotation)",
                    "static RowReducer<?, ?> rowReducerFor(UseRowReducer annotation)",
                    "private static SqlStatementCustomizerFactory instantiateFactory(Annotation annotation)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4e7db1a29ddc0d8f14a89a470c24f8b78ef33a71",
        "previous_commit": "7e8090d9a5d50bd14acf776f4b3382842668f7a5",
        "date": 1703785387,
        "releases": {
            "previous": "4e7db1a29ddc0d8f14a89a470c24f8b78ef33a71",
            "next": "4e7db1a29ddc0d8f14a89a470c24f8b78ef33a71"
        },
        "commit_message": "update docs\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4e7db1a29ddc0d8f14a89a470c24f8b78ef33a71": {
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public <T> T org.jdbi.v3.core.statement.Call.invoke(Function<OutParameters, T> resultComputer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/OutParameters.java": [
                    "private Number org.jdbi.v3.core.statement.OutParameters.getNumber(String name)",
                    "public byte[] org.jdbi.v3.core.statement.OutParameters.getBytes(int pos)",
                    "private Long org.jdbi.v3.core.statement.OutParameters.getEpoch(int pos)",
                    "public Timestamp org.jdbi.v3.core.statement.OutParameters.getTimestamp(String name)",
                    "public byte[] org.jdbi.v3.core.statement.OutParameters.getBytes(String name)",
                    "public Date org.jdbi.v3.core.statement.OutParameters.getDate(int pos)",
                    "private Number org.jdbi.v3.core.statement.OutParameters.getNumber(int pos)",
                    "private Long org.jdbi.v3.core.statement.OutParameters.getEpoch(String name)",
                    "public Date org.jdbi.v3.core.statement.OutParameters.getDate(String name)",
                    "public Timestamp org.jdbi.v3.core.statement.OutParameters.getTimestamp(int pos)"
                ]
            },
            "7e8090d9a5d50bd14acf776f4b3382842668f7a5": {
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public <T> T org.jdbi.v3.core.statement.Call.invoke(Function<OutParameters, T> resultComputer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/OutParameters.java": [
                    "private Number org.jdbi.v3.core.statement.OutParameters.getNumber(String name)",
                    "public byte[] org.jdbi.v3.core.statement.OutParameters.getBytes(int pos)",
                    "private Long org.jdbi.v3.core.statement.OutParameters.getEpoch(int pos)",
                    "public Timestamp org.jdbi.v3.core.statement.OutParameters.getTimestamp(String name)",
                    "public byte[] org.jdbi.v3.core.statement.OutParameters.getBytes(String name)",
                    "public Date org.jdbi.v3.core.statement.OutParameters.getDate(int pos)",
                    "private Number org.jdbi.v3.core.statement.OutParameters.getNumber(int pos)",
                    "private Long org.jdbi.v3.core.statement.OutParameters.getEpoch(String name)",
                    "public Date org.jdbi.v3.core.statement.OutParameters.getDate(String name)",
                    "public Timestamp org.jdbi.v3.core.statement.OutParameters.getTimestamp(int pos)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3bc60f46fe9f8907681b56e736678da25f5b6b52",
        "previous_commit": "3a8b8cc0bf7cb5821a8dae9c7d2975808f6931bb",
        "date": 1688432836,
        "releases": {
            "previous": "3bc60f46fe9f8907681b56e736678da25f5b6b52",
            "next": "3bc60f46fe9f8907681b56e736678da25f5b6b52"
        },
        "commit_message": "Make object creation more efficient\n\nCentralize c'tor lookup algorithms and object instantiation, choose\nc'tor explicitly, not by try-and-exception.\n\nRemoves a large amount of reflection-related code from all over core\nand sqlobject.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3bc60f46fe9f8907681b56e736678da25f5b6b52": {
                "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java": [
                    "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java": [
                    "private static Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.buildConfigCustomizer(Class<?> extensionType, Method method, Stream<AnnotatedElement> elements, ConfigurerMethod consumer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerCustomizer.java": [
                    "public ExtensionHandler org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerCustomizer.customize(ExtensionHandler delegate, Class<?> extensionType, Method method)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerFactory.java": [
                    "public Optional<ExtensionHandler> org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerFactory.createExtensionHandler(Class<?> extensionType, Method method)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "public PojoBuilder<T> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.create()"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlMethodAnnotatedHandlerDecorator.java": [
                    "public Handler org.jdbi.v3.sqlobject.SqlMethodAnnotatedHandlerDecorator.decorateHandler(Handler delegate, Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlMethodHandlerFactory.java": [
                    "public Optional<ExtensionHandler> org.jdbi.v3.sqlobject.SqlMethodHandlerFactory.createExtensionHandler(Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectCustomizerFactory.java": [
                    "private static Collection<ConfigCustomizer> org.jdbi.v3.sqlobject.SqlObjectCustomizerFactory.buildConfigCustomizer(Stream<AnnotatedElement> elements, ConfigurerMethod consumer)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/UseSqlParserImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.UseSqlParserImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java": [
                    "public Object invoke(HandleSupplier handleSupplier, Object target, Object... args)",
                    "private static SqlStatementCustomizerFactory instantiateFactory(Annotation annotation)"
                ]
            },
            "3a8b8cc0bf7cb5821a8dae9c7d2975808f6931bb": {
                "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java": [
                    "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java": [
                    "private static Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.buildConfigCustomizer(Class<?> extensionType, Method method, Stream<AnnotatedElement> elements, ConfigurerMethod consumer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerCustomizer.java": [
                    "public ExtensionHandler org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerCustomizer.customize(ExtensionHandler delegate, Class<?> extensionType, Method method)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerFactory.java": [
                    "public Optional<ExtensionHandler> org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerFactory.createExtensionHandler(Class<?> extensionType, Method method)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "public PojoBuilder<T> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.create()"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlMethodAnnotatedHandlerDecorator.java": [
                    "public Handler org.jdbi.v3.sqlobject.SqlMethodAnnotatedHandlerDecorator.decorateHandler(Handler delegate, Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlMethodHandlerFactory.java": [
                    "public Optional<ExtensionHandler> org.jdbi.v3.sqlobject.SqlMethodHandlerFactory.createExtensionHandler(Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectCustomizerFactory.java": [
                    "private static Collection<ConfigCustomizer> org.jdbi.v3.sqlobject.SqlObjectCustomizerFactory.buildConfigCustomizer(Stream<AnnotatedElement> elements, ConfigurerMethod consumer)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/UseSqlParserImpl.java": [
                    "public void org.jdbi.v3.sqlobject.config.internal.UseSqlParserImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java": [
                    "public Object invoke(HandleSupplier handleSupplier, Object target, Object... args)",
                    "private static SqlStatementCustomizerFactory instantiateFactory(Annotation annotation)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "636df165577a7d79d5345ff41f71d9d748289804",
        "previous_commit": "97ea85393712bd44d1b3116dec37352b08098d6a",
        "date": 1550874664,
        "releases": {
            "previous": "636df165577a7d79d5345ff41f71d9d748289804",
            "next": "636df165577a7d79d5345ff41f71d9d748289804"
        },
        "commit_message": "support collection<class<>>\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "636df165577a7d79d5345ff41f71d9d748289804": {
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectFieldArguments.java": [
                    "protected Optional<TypedValue> org.jdbi.v3.core.argument.ObjectFieldArguments.getValue(String name, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectMethodArguments.java": [
                    "protected Optional<TypedValue> org.jdbi.v3.core.argument.ObjectMethodArguments.getValue(String name, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/EnumStrategies.java": [
                    "public <E extends Enum<E>> EnumStrategy org.jdbi.v3.core.internal.EnumStrategies.findStrategy(QualifiedType<E> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "public QualifiedType<?> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.getQualifiedType()"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/ImmutablesPropertiesFactory.java": [
                    "protected ImmutablesPojoProperty<T> org.jdbi.v3.core.mapper.reflect.internal.ImmutablesPropertiesFactory.createProperty(String name, Method m)"
                ],
                "core/src/main/java/org/jdbi/v3/core/qualifier/QualifiedType.java": [
                    "public final QualifiedType<T> org.jdbi.v3.core.qualifier.QualifiedType<T>.with(Class<? extends Annotation>... qualifiers)",
                    "public QualifiedType<T> org.jdbi.v3.core.qualifier.QualifiedType<T>.with(Annotation... qualifiers)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java": [
                    "static ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(Class<?> extensionType, Method method)"
                ]
            },
            "97ea85393712bd44d1b3116dec37352b08098d6a": {
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectFieldArguments.java": [
                    "protected Optional<TypedValue> org.jdbi.v3.core.argument.ObjectFieldArguments.getValue(String name, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectMethodArguments.java": [
                    "protected Optional<TypedValue> org.jdbi.v3.core.argument.ObjectMethodArguments.getValue(String name, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/EnumStrategies.java": [
                    "public <E extends Enum<E>> EnumStrategy org.jdbi.v3.core.internal.EnumStrategies.findStrategy(QualifiedType<E> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "public QualifiedType<?> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.getQualifiedType()"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/ImmutablesPropertiesFactory.java": [
                    "protected ImmutablesPojoProperty<T> org.jdbi.v3.core.mapper.reflect.internal.ImmutablesPropertiesFactory.createProperty(String name, Method m)"
                ],
                "core/src/main/java/org/jdbi/v3/core/qualifier/QualifiedType.java": [
                    "public final QualifiedType<T> org.jdbi.v3.core.qualifier.QualifiedType<T>.with(Class<? extends Annotation>... qualifiers)",
                    "public QualifiedType<T> org.jdbi.v3.core.qualifier.QualifiedType<T>.with(Annotation... qualifiers)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java": [
                    "static ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(Class<?> extensionType, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c3c40e8759e9cfee20fe1bb55a4f95e0411eb0f8",
        "previous_commit": "da9ea8f3f682f46ed60c6a8bfbbc392ec9115371",
        "date": 1668758869,
        "releases": {
            "previous": "c3c40e8759e9cfee20fe1bb55a4f95e0411eb0f8",
            "next": "c3c40e8759e9cfee20fe1bb55a4f95e0411eb0f8"
        },
        "commit_message": "More doc changes\n\n- add a transaction chapter for handle operations\n- reshuffle sections a bit\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c3c40e8759e9cfee20fe1bb55a4f95e0411eb0f8": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "static Handle org.jdbi.v3.core.Handle.createHandle(Jdbi jdbi, Cleanable connectionCleaner, TransactionHandler transactionHandler, StatementBuilder statementBuilder, Connection connection)",
                    "public <R, X extends Exception> R org.jdbi.v3.core.Handle.inTransaction(HandleCallback<R, X> callback)",
                    "public Handle org.jdbi.v3.core.Handle.savepoint(String name)",
                    "public Handle org.jdbi.v3.core.Handle.rollback()",
                    "public Handle org.jdbi.v3.core.Handle.rollbackToSavepoint(String savepointName)",
                    "public Handle org.jdbi.v3.core.Handle.begin()",
                    "public Handle org.jdbi.v3.core.Handle.release(String savepointName)",
                    "public Handle org.jdbi.v3.core.Handle.commit()",
                    "public <R, X extends Exception> R org.jdbi.v3.core.Handle.inTransaction(TransactionIsolationLevel level, HandleCallback<R, X> callback)",
                    "public boolean org.jdbi.v3.core.Handle.isInTransaction()"
                ]
            },
            "da9ea8f3f682f46ed60c6a8bfbbc392ec9115371": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Handle.inTransaction(HandleCallback<R, X> callback)",
                    "public Handle org.jdbi.v3.core.Handle.savepoint(String name)",
                    "public Handle org.jdbi.v3.core.Handle.rollback()",
                    "public Handle org.jdbi.v3.core.Handle.rollbackToSavepoint(String savepointName)",
                    "public Handle org.jdbi.v3.core.Handle.begin()",
                    "public Handle org.jdbi.v3.core.Handle.release(String savepointName)",
                    "public Handle org.jdbi.v3.core.Handle.commit()",
                    "public <R, X extends Exception> R org.jdbi.v3.core.Handle.inTransaction(TransactionIsolationLevel level, HandleCallback<R, X> callback)",
                    "static Handle org.jdbi.v3.core.Handle.createHandle(Jdbi jdbi, Cleanable connectionCleaner, TransactionHandler transactions, StatementBuilder statementBuilder, Connection connection)",
                    "public boolean org.jdbi.v3.core.Handle.isInTransaction()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "102876d0470d99bb45765a798bb9eaf4bc05674d",
        "previous_commit": "944192da9b5c605d83648e1a5a1b8fc461d28f0a",
        "date": 1675917016,
        "releases": {
            "previous": "102876d0470d99bb45765a798bb9eaf4bc05674d",
            "next": "102876d0470d99bb45765a798bb9eaf4bc05674d"
        },
        "commit_message": "Refactor the SqlObjectFactory\n\n- factor all the Generator specific code into\n  GeneratorSqlObjectFactory, a new ExtensionFactory that deals\n  specifically with the generated classes.\n- strip all code that is not specific to the SqlObject Proxy\n  extensions out of SqlObjectFactory\n- register both factories in SqlObjectModule, so no user visible changes\n- remove the specific code for generated classes (initData and lookupMethod)\n  out of the SqlObjectInitData, this is now in the generator factory. Leave deprecated\n  stubs in place for old, non-compiled classes. Those stubs will go away\n- move the threadlocal that holds the init data into the generator factory\n- move all init code for SqlObjectInitData into the class itself\n- move duplicate superTypes code also into JdbiClassUtils\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "102876d0470d99bb45765a798bb9eaf4bc05674d": {
                "core/src/main/java/org/jdbi/v3/core/internal/JdbiClassUtils.java": [
                    "public static Method org.jdbi.v3.core.internal.JdbiClassUtils.methodLookup(Class<?> klass, String methodName, Class<?>... parameterTypes)",
                    "public static Optional<Method> org.jdbi.v3.core.internal.JdbiClassUtils.safeMethodLookup(Class<?> klass, String methodName, Class<?>... parameterTypes)"
                ],
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "private void org.jdbi.v3.generator.GenerateSqlObjectProcessor.generate(Element sqlObjE)",
                    "private MethodSpec org.jdbi.v3.generator.GenerateSqlObjectProcessor.generateMethod(TypeSpec.Builder typeBuilder, CodeBlock.Builder staticInit, CodeBlock.Builder init, Element el)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public boolean org.jdbi.v3.sqlobject.SqlObjectFactory.accepts(Class<?> extensionType)",
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectPlugin.java": [
                    "public void org.jdbi.v3.sqlobject.SqlObjectPlugin.customizeJdbi(Jdbi db)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "SqlObjectInitData org.jdbi.v3.sqlobject.internal.SqlObjectInitData.initData()",
                    "public static Method org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lookupMethod(String methodName, Class<?>... parameterTypes)"
                ]
            },
            "944192da9b5c605d83648e1a5a1b8fc461d28f0a": {
                "core/src/main/java/org/jdbi/v3/core/internal/JdbiClassUtils.java": [
                    "public static Method org.jdbi.v3.core.internal.JdbiClassUtils.methodLookup(Class<?> klass, String methodName, Class<?>... parameterTypes)",
                    "public static Optional<Method> org.jdbi.v3.core.internal.JdbiClassUtils.safeMethodLookup(Class<?> klass, String methodName, Class<?>... parameterTypes)"
                ],
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "private void org.jdbi.v3.generator.GenerateSqlObjectProcessor.generate(Element sqlObjE)",
                    "private MethodSpec org.jdbi.v3.generator.GenerateSqlObjectProcessor.generateMethod(TypeSpec.Builder typeBuilder, CodeBlock.Builder staticInit, CodeBlock.Builder init, Element el)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public boolean org.jdbi.v3.sqlobject.SqlObjectFactory.accepts(Class<?> extensionType)",
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectPlugin.java": [
                    "public void org.jdbi.v3.sqlobject.SqlObjectPlugin.customizeJdbi(Jdbi db)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "public static SqlObjectInitData org.jdbi.v3.sqlobject.internal.SqlObjectInitData.initData()",
                    "public static Method org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lookupMethod(String methodName, Class<?>... parameterTypes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cd2e442d0b62e32be40ae814457b82cd81407edc",
        "previous_commit": "3b0b5c60f6a5838d13a73a76b9196cbbef63bd2e",
        "date": 1640499365,
        "releases": {
            "previous": "cd2e442d0b62e32be40ae814457b82cd81407edc",
            "next": "cd2e442d0b62e32be40ae814457b82cd81407edc"
        },
        "commit_message": "error-prone: InlineFormatString fixes\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "cd2e442d0b62e32be40ae814457b82cd81407edc": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
                    "private String org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.debugName(Parameter parameter)",
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private T construct()",
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
                    "private String debugName(Field field)",
                    "private void writeField(T obj, Field field, Object value)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            },
            "3b0b5c60f6a5838d13a73a76b9196cbbef63bd2e": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
                    "private String org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.debugName(Parameter parameter)",
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private T construct()",
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
                    "private String debugName(Field field)",
                    "private void writeField(T obj, Field field, Object value)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "332c97f566d31a8a511562d1124628fe87b2cc3e",
        "previous_commit": "c29349291c97dd2746dbebf88a8e820b85273e36",
        "date": 1664389434,
        "releases": {
            "previous": "332c97f566d31a8a511562d1124628fe87b2cc3e",
            "next": "332c97f566d31a8a511562d1124628fe87b2cc3e"
        },
        "commit_message": "Mapper reworking\n\n- add tons of tests for PropagateNull so that it works in any given condition\n- align the logic in FieldMapper, Bean(Pojo)Mapper, ConstructorMapper and KotlinMapper\n- make PropagateNull logic much more readable, factor out helper functions and a null delegating mapper\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "332c97f566d31a8a511562d1124628fe87b2cc3e": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
                    "public T org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.map(ResultSet rs, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "public T org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.map(ResultSet rs, StatementContext ctx)",
                    "public T org.jdbi.v3.core.mapper.reflect.BoundFieldMapper.map(ResultSet rs, StatementContext ctx)",
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize(ResultSet rs, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private String debugName(PojoProperty<T> p)",
                    "public T org.jdbi.v3.core.mapper.reflect.internal.BoundPojoMapper.map(ResultSet rs, StatementContext ctx)",
                    "public T org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.map(ResultSet rs, StatementContext ctx)",
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize(ResultSet rs, StatementContext ctx)"
                ]
            },
            "c29349291c97dd2746dbebf88a8e820b85273e36": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
                    "public T org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.map(ResultSet rs, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "public T org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.map(ResultSet rs, StatementContext ctx)",
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize(ResultSet rs, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private String debugName(PojoProperty<T> p)",
                    "public T org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.map(ResultSet rs, StatementContext ctx)",
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize(ResultSet rs, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8bfe50b0bbea1b92dfa7c453a1b9c8cffe4ab7c5",
        "previous_commit": "5d6107f6451b73d0fa513aaaf01caf192f204038",
        "date": 1601670852,
        "releases": {
            "previous": "8bfe50b0bbea1b92dfa7c453a1b9c8cffe4ab7c5",
            "next": "8bfe50b0bbea1b92dfa7c453a1b9c8cffe4ab7c5"
        },
        "commit_message": "SqlObject: warm up argument bindings and return / collected types on first method call\n\nThis avoids needing to re-build argument preparers, collectors, and RowMapper / ColumnMappers on every new dao instance\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8bfe50b0bbea1b92dfa7c453a1b9c8cffe4ab7c5": {
                "core/src/main/java/org/jdbi/v3/core/collector/JdbiCollectors.java": [
                    "public JdbiCollectors org.jdbi.v3.core.collector.JdbiCollectors.register(CollectorFactory factory)",
                    "private Optional<CollectorFactory> org.jdbi.v3.core.collector.JdbiCollectors.findFactoryFor(Type containerType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindBeanFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindBeanFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindPojoFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindPojoFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "public Supplier<InContextInvoker> org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lazyInvoker(Object target, Method method, HandleSupplier handle, ConfigRegistry instanceConfig)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java": [
                    "BoundCustomizer defaultParameterCustomizer(Parameter parameter, Integer i)",
                    "public void org.jdbi.v3.sqlobject.statement.internal..apply(SqlStatement<?> stmt, Object[] args)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlQueryHandler.java": [
                    "void org.jdbi.v3.sqlobject.statement.internal.SqlQueryHandler.configureReturner(Query q, SqlObjectStatementConfiguration cfg)"
                ]
            },
            "5d6107f6451b73d0fa513aaaf01caf192f204038": {
                "core/src/main/java/org/jdbi/v3/core/collector/JdbiCollectors.java": [
                    "public JdbiCollectors org.jdbi.v3.core.collector.JdbiCollectors.register(CollectorFactory factory)",
                    "private Optional<CollectorFactory> org.jdbi.v3.core.collector.JdbiCollectors.findFactoryFor(Type containerType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindBeanFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindBeanFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindPojoFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindPojoFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "public Supplier<InContextInvoker> org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lazyInvoker(Object target, Method method, HandleSupplier handle, ConfigRegistry instanceConfig)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java": [],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlQueryHandler.java": [
                    "void org.jdbi.v3.sqlobject.statement.internal.SqlQueryHandler.configureReturner(Query q, SqlObjectStatementConfiguration cfg)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bdac3454eae590af783ecd62fca1aefa36783a27",
        "previous_commit": "e5df2de9e67f8ef6f12db1f739d7519a9dc6e597",
        "date": 1677167605,
        "releases": {
            "previous": "bdac3454eae590af783ecd62fca1aefa36783a27",
            "next": "bdac3454eae590af783ecd62fca1aefa36783a27"
        },
        "commit_message": "address more PR comments\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bdac3454eae590af783ecd62fca1aefa36783a27": {
                "core/src/main/java/org/jdbi/v3/core/async/AbstractJdbiExecutor.java": [
                    "public <E, X extends Exception> CompletionStage<Void> org.jdbi.v3.core.async.AbstractJdbiExecutor.useExtension(final Class<E> extensionType, final ExtensionConsumer<E, X> callback)",
                    "public <R, X extends Exception> CompletionStage<R> org.jdbi.v3.core.async.AbstractJdbiExecutor.withHandle(final HandleCallback<R, X> callback)",
                    "public <R, X extends Exception> CompletionStage<R> org.jdbi.v3.core.async.AbstractJdbiExecutor.inTransaction(final HandleCallback<R, X> callback)",
                    "public <X extends Exception> CompletionStage<Void> org.jdbi.v3.core.async.AbstractJdbiExecutor.useTransaction(final HandleConsumer<X> callback)",
                    "public <X extends Exception> CompletionStage<Void> org.jdbi.v3.core.async.AbstractJdbiExecutor.useTransaction(final TransactionIsolationLevel level, final HandleConsumer<X> callback)",
                    "public <X extends Exception> CompletionStage<Void> org.jdbi.v3.core.async.AbstractJdbiExecutor.useHandle(final HandleConsumer<X> consumer)",
                    "public <R, X extends Exception> CompletionStage<R> org.jdbi.v3.core.async.AbstractJdbiExecutor.inTransaction(final TransactionIsolationLevel level, final HandleCallback<R, X> callback)",
                    "public <R, E, X extends Exception> CompletionStage<R> org.jdbi.v3.core.async.AbstractJdbiExecutor.withExtension(final Class<E> extensionType, final ExtensionCallback<R, E, X> callback)"
                ]
            },
            "e5df2de9e67f8ef6f12db1f739d7519a9dc6e597": {
                "core/src/main/java/org/jdbi/v3/core/async/AbstractJdbiExecutor.java": [
                    "public <E, X extends Exception> CompletionStage<Void> org.jdbi.v3.core.async.AbstractJdbiExecutor.useExtension(final Class<E> extensionType, final ExtensionConsumer<E, X> callback)",
                    "public <R, X extends Exception> CompletionStage<R> org.jdbi.v3.core.async.AbstractJdbiExecutor.withHandle(final HandleCallback<R, X> callback)",
                    "public <R, X extends Exception> CompletionStage<R> org.jdbi.v3.core.async.AbstractJdbiExecutor.inTransaction(final HandleCallback<R, X> callback)",
                    "public <X extends Exception> CompletionStage<Void> org.jdbi.v3.core.async.AbstractJdbiExecutor.useTransaction(final HandleConsumer<X> callback)",
                    "public <X extends Exception> CompletionStage<Void> org.jdbi.v3.core.async.AbstractJdbiExecutor.useTransaction(final TransactionIsolationLevel level, final HandleConsumer<X> callback)",
                    "public <X extends Exception> CompletionStage<Void> org.jdbi.v3.core.async.AbstractJdbiExecutor.useHandle(final HandleConsumer<X> consumer)",
                    "public <R, X extends Exception> CompletionStage<R> org.jdbi.v3.core.async.AbstractJdbiExecutor.inTransaction(final TransactionIsolationLevel level, final HandleCallback<R, X> callback)",
                    "public <R, E, X extends Exception> CompletionStage<R> org.jdbi.v3.core.async.AbstractJdbiExecutor.withExtension(final Class<E> extensionType, final ExtensionCallback<R, E, X> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fd7458fffbf80d054c8654c971019330c9958cbf",
        "previous_commit": "26a03d3479daead969d1010d893b91fb13af0af2",
        "date": 1649336632,
        "releases": {
            "previous": "fd7458fffbf80d054c8654c971019330c9958cbf",
            "next": "fd7458fffbf80d054c8654c971019330c9958cbf"
        },
        "commit_message": "Java language migration updates (use Java functional primitives, statement lambdas, method references, avoid unneccessary boxing, use Objects.equals, diamond operator without explicit type where permitted, fix raw usage of parametrized classes)\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fd7458fffbf80d054c8654c971019330c9958cbf": {
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectArgumentFactory.java": [
                    "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.ObjectArgumentFactory.prepare(Type expectedType, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/array/SqlArrayType.java": [
                    "static <T> SqlArrayType<T> of(String typeName, Function<T, ?> conversion)"
                ],
                "core/src/main/java/org/jdbi/v3/core/enums/internal/EnumMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.enums.internal.EnumMapperFactory.build(QualifiedType<?> givenType, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/enums/internal/EnumSqlArrayTypeFactory.java": [
                    "public Optional<SqlArrayType<?>> org.jdbi.v3.core.enums.internal.EnumSqlArrayTypeFactory.build(Type elementType, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/DefineNamedBindingsFactory.java": [
                    "public SqlStatementCustomizer org.jdbi.v3.sqlobject.customizer.internal.DefineNamedBindingsFactory.createForType(Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlScriptsHandler.java": [
                    "void org.jdbi.v3.sqlobject.statement.internal.SqlScriptsHandler.configureReturner(Script stmt, SqlObjectStatementConfiguration cfg)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/transaction/internal/TransactionDecorator.java": [
                    "public Handler org.jdbi.v3.sqlobject.transaction.internal.TransactionDecorator.decorateHandler(Handler base, Class<?> sqlObjectType, Method method)"
                ]
            },
            "26a03d3479daead969d1010d893b91fb13af0af2": {
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectArgumentFactory.java": [
                    "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.ObjectArgumentFactory.prepare(Type expectedType, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/array/SqlArrayType.java": [
                    "static <T> SqlArrayType<T> of(String typeName, Function<T, ?> conversion)"
                ],
                "core/src/main/java/org/jdbi/v3/core/enums/internal/EnumMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.enums.internal.EnumMapperFactory.build(QualifiedType<?> givenType, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/enums/internal/EnumSqlArrayTypeFactory.java": [
                    "public Optional<SqlArrayType<?>> org.jdbi.v3.core.enums.internal.EnumSqlArrayTypeFactory.build(Type elementType, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/DefineNamedBindingsFactory.java": [
                    "public SqlStatementCustomizer org.jdbi.v3.sqlobject.customizer.internal.DefineNamedBindingsFactory.createForType(Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlScriptsHandler.java": [
                    "void org.jdbi.v3.sqlobject.statement.internal.SqlScriptsHandler.configureReturner(Script stmt, SqlObjectStatementConfiguration cfg)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/transaction/internal/TransactionDecorator.java": [
                    "public Handler org.jdbi.v3.sqlobject.transaction.internal.TransactionDecorator.decorateHandler(Handler base, Class<?> sqlObjectType, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9d2ec22c37878b602a8d8eb755924457db3521e3",
        "previous_commit": "c886fc2c4910bc822fa696e802aabc4373c5d306",
        "date": 1689438591,
        "releases": {
            "previous": "9d2ec22c37878b602a8d8eb755924457db3521e3",
            "next": "9d2ec22c37878b602a8d8eb755924457db3521e3"
        },
        "commit_message": "Iteration on the MethodHandle.invokeExact code\n\nMove all of the error handling into JdbiClassUtils, all places that\nneed to create an instance can do so by calling handle.invokeExact\nwith the right parameters as a lambda on all call sites.\n\nThis looks much cleaner code-wise but probably need some benchmarking\nto ensure that this does not lose performance.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9d2ec22c37878b602a8d8eb755924457db3521e3": {
                "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java": [
                    "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java": [
                    "private static Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.buildConfigCustomizer(Class<?> extensionType, Method method, Stream<AnnotatedElement> elements, ConfigurerMethod consumer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerCustomizer.java": [
                    "public ExtensionHandler org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerCustomizer.customize(ExtensionHandler delegate, Class<?> extensionType, Method method)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerFactory.java": [
                    "public Optional<ExtensionHandler> org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerFactory.createExtensionHandler(Class<?> extensionType, Method method)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/JdbiClassUtils.java": [
                    "public static <T> T org.jdbi.v3.core.internal.JdbiClassUtils.checkedCreateInstance(Class<T> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/exceptions/Sneaky.java": [
                    "public static DummyException org.jdbi.v3.core.internal.exceptions.Sneaky.throwAnyway(Throwable t)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "public PojoBuilder<T> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.create()"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlMethodHandlerFactory.java": [
                    "public Optional<ExtensionHandler> org.jdbi.v3.sqlobject.SqlMethodHandlerFactory.createExtensionHandler(Class<?> sqlObjectType, Method method)"
                ]
            },
            "c886fc2c4910bc822fa696e802aabc4373c5d306": {
                "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java": [
                    "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationConfigCustomizerFactory.java": [
                    "private static Collection<ConfigCustomizer> org.jdbi.v3.core.extension.UseAnnotationConfigCustomizerFactory.buildConfigCustomizer(Class<?> extensionType, Method method, Stream<AnnotatedElement> elements, ConfigurerMethod consumer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerCustomizer.java": [
                    "public ExtensionHandler org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerCustomizer.customize(ExtensionHandler delegate, Class<?> extensionType, Method method)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/UseAnnotationExtensionHandlerFactory.java": [
                    "public Optional<ExtensionHandler> org.jdbi.v3.core.extension.UseAnnotationExtensionHandlerFactory.createExtensionHandler(Class<?> extensionType, Method method)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/JdbiClassUtils.java": [
                    "public static <T> T org.jdbi.v3.core.internal.JdbiClassUtils.checkedCreateInstance(Class<T> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/exceptions/Sneaky.java": [
                    "public static DummyException org.jdbi.v3.core.internal.exceptions.Sneaky.throwAnyway(Throwable t)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "public PojoBuilder<T> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.create()"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlMethodHandlerFactory.java": [
                    "public Optional<ExtensionHandler> org.jdbi.v3.sqlobject.SqlMethodHandlerFactory.createExtensionHandler(Class<?> sqlObjectType, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "75c9675a789d7dd5e22a0ba1be4242052056de6f",
        "previous_commit": "aad0b605631763fa4262f43a960fc8c92f9ecc4f",
        "date": 1569743274,
        "releases": {
            "previous": "75c9675a789d7dd5e22a0ba1be4242052056de6f",
            "next": "75c9675a789d7dd5e22a0ba1be4242052056de6f"
        },
        "commit_message": "Replace classic reflection usage with MethodHandles to preflight access checks\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "75c9675a789d7dd5e22a0ba1be4242052056de6f": {
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectMethodArguments.java": [
                    "private static Map<String, Function<Object, TypedValue>> org.jdbi.v3.core.argument.ObjectMethodArguments.load(ConfigRegistry config, Class<?> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/StaticMethodInstanceFactory.java": [
                    "T org.jdbi.v3.core.mapper.reflect.StaticMethodInstanceFactory<T>.newInstance(Object... params)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "public <A extends Annotation> Optional<A> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.getAnnotation(Class<A> anno)",
                    "public PojoBuilder<T> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.create()",
                    "public void org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.set(String property, Object value)",
                    "public Map<String, BeanPojoProperty<T>> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.getProperties()",
                    "public Object org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.get(T pojo)"
                ]
            },
            "aad0b605631763fa4262f43a960fc8c92f9ecc4f": {
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectMethodArguments.java": [
                    "private static Map<String, Function<Object, TypedValue>> org.jdbi.v3.core.argument.ObjectMethodArguments.load(ConfigRegistry config, Class<?> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/StaticMethodInstanceFactory.java": [
                    "T org.jdbi.v3.core.mapper.reflect.StaticMethodInstanceFactory<T>.newInstance(Object... params)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "public <A extends Annotation> Optional<A> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.getAnnotation(Class<A> anno)",
                    "public PojoBuilder<T> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.create()",
                    "public void org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.set(String property, Object value)",
                    "public Map<String, BeanPojoProperty<T>> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.getProperties()",
                    "public Object org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.get(T pojo)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "aca3c61ae6408843cbeb810f5a176c0f7802f094",
        "previous_commit": "3bb9314c5a361282798c5ff93620b98ef19ddcc6",
        "date": 1662574772,
        "releases": {
            "previous": "aca3c61ae6408843cbeb810f5a176c0f7802f094",
            "next": "aca3c61ae6408843cbeb810f5a176c0f7802f094"
        },
        "commit_message": "CharSequence support for Sql statements (#2047)\n- Allow CharSequence rather than String to pass sql statements to the library.\n- Add class org.jdbi.v3.core.Sql to write easy-to-read inline sql statements.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "aca3c61ae6408843cbeb810f5a176c0f7802f094": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public Query org.jdbi.v3.core.Handle.createQuery(String sql)",
                    "public PreparedBatch org.jdbi.v3.core.Handle.prepareBatch(String sql)",
                    "public Query org.jdbi.v3.core.Handle.select(String sql, Object... args)",
                    "public Call org.jdbi.v3.core.Handle.createCall(String sql)",
                    "public int org.jdbi.v3.core.Handle.execute(String sql, Object... args)",
                    "public Script org.jdbi.v3.core.Handle.createScript(String sql)",
                    "public Update org.jdbi.v3.core.Handle.createUpdate(String sql)"
                ]
            },
            "3bb9314c5a361282798c5ff93620b98ef19ddcc6": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public Query org.jdbi.v3.core.Handle.createQuery(String sql)",
                    "public PreparedBatch org.jdbi.v3.core.Handle.prepareBatch(String sql)",
                    "public Query org.jdbi.v3.core.Handle.select(String sql, Object... args)",
                    "public Call org.jdbi.v3.core.Handle.createCall(String sql)",
                    "public int org.jdbi.v3.core.Handle.execute(String sql, Object... args)",
                    "public Script org.jdbi.v3.core.Handle.createScript(String sql)",
                    "public Update org.jdbi.v3.core.Handle.createUpdate(String sql)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7e48900b945d09d540239a57fe0cd6bb9e0e5809",
        "previous_commit": "41e36ac574c79074eaea77f6df2dd3ab31299417",
        "date": 1665710616,
        "releases": {
            "previous": "7e48900b945d09d540239a57fe0cd6bb9e0e5809",
            "next": "7e48900b945d09d540239a57fe0cd6bb9e0e5809"
        },
        "commit_message": "Prepare for possible removal of the Closeable interface\n\nClean up the close logic, apply some of the incontroversial changes\nto base statement. Defer the actual decision on whether to remove\nthe interface for later.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7e48900b945d09d540239a57fe0cd6bb9e0e5809": {
                "core/src/main/java/org/jdbi/v3/core/statement/BaseStatement.java": [
                    "public void org.jdbi.v3.core.statement.BaseStatement<This>.close()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Batch.java": [
                    "public int[] org.jdbi.v3.core.statement.Batch.execute()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public <T> T org.jdbi.v3.core.statement.Call.invoke(Function<OutParameters, T> resultComputer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private <R> R org.jdbi.v3.core.statement.PreparedBatch.execute(ResultProducer<R> producer, Consumer<ExecutedBatch> batchConsumer)",
                    "public int[] org.jdbi.v3.core.statement.PreparedBatch.execute()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Query.java": [
                    "public <R> R org.jdbi.v3.core.statement.Query.execute(ResultProducer<R> producer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Update.java": [
                    "public <R> R org.jdbi.v3.core.statement.Update.execute(ResultProducer<R> producer)"
                ]
            },
            "41e36ac574c79074eaea77f6df2dd3ab31299417": {
                "core/src/main/java/org/jdbi/v3/core/statement/BaseStatement.java": [
                    "public void org.jdbi.v3.core.statement.BaseStatement<This>.close()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Batch.java": [
                    "public int[] org.jdbi.v3.core.statement.Batch.execute()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public <T> T org.jdbi.v3.core.statement.Call.invoke(Function<OutParameters, T> resultComputer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private <R> R org.jdbi.v3.core.statement.PreparedBatch.execute(ResultProducer<R> producer, Consumer<ExecutedBatch> batchConsumer)",
                    "public int[] org.jdbi.v3.core.statement.PreparedBatch.execute()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Query.java": [
                    "public <R> R org.jdbi.v3.core.statement.Query.execute(ResultProducer<R> producer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Update.java": [
                    "public <R> R org.jdbi.v3.core.statement.Update.execute(ResultProducer<R> producer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "54aa57a1a019a8ec6eaef68f97511865e18202a2",
        "previous_commit": "78ec6aaebeeb55cbd5137e01d299237bd66ef539",
        "date": 1674712701,
        "releases": {
            "previous": "54aa57a1a019a8ec6eaef68f97511865e18202a2",
            "next": "54aa57a1a019a8ec6eaef68f97511865e18202a2"
        },
        "commit_message": "more readability changes\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "54aa57a1a019a8ec6eaef68f97511865e18202a2": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/BridgeMethodHandlerFactory.java": [
                    "public Optional<Handler> org.jdbi.v3.sqlobject.BridgeMethodHandlerFactory.buildHandler(Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "private static Map<Method, Handler> org.jdbi.v3.sqlobject.SqlObjectFactory.buildMethodHandlers( Class<?> sqlObjectType, Handlers registry, HandlerDecorators decorators)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/WithHandleMethodHandlerFactory.java": [
                    "public Optional<Handler> org.jdbi.v3.sqlobject.WithHandleMethodHandlerFactory.buildHandler(Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/MapToFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.statement.internal.MapToFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlQueryHandler.java": [
                    "public void org.jdbi.v3.sqlobject.statement.internal.SqlQueryHandler.warm(ConfigRegistry config)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlUpdateHandler.java": [
                    "void org.jdbi.v3.sqlobject.statement.internal.SqlUpdateHandler.configureReturner(Update u, SqlObjectStatementConfiguration cfg)",
                    "public void org.jdbi.v3.sqlobject.statement.internal.SqlUpdateHandler.warm(ConfigRegistry config)"
                ]
            },
            "78ec6aaebeeb55cbd5137e01d299237bd66ef539": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/BridgeMethodHandlerFactory.java": [
                    "public Optional<Handler> org.jdbi.v3.sqlobject.BridgeMethodHandlerFactory.buildHandler(Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "private static Map<Method, Handler> org.jdbi.v3.sqlobject.SqlObjectFactory.buildMethodHandlers( Class<?> sqlObjectType, Handlers registry, HandlerDecorators decorators)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/WithHandleMethodHandlerFactory.java": [
                    "public Optional<Handler> org.jdbi.v3.sqlobject.WithHandleMethodHandlerFactory.buildHandler(Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/MapToFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.statement.internal.MapToFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlQueryHandler.java": [
                    "public void org.jdbi.v3.sqlobject.statement.internal.SqlQueryHandler.warm(ConfigRegistry config)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlUpdateHandler.java": [
                    "void org.jdbi.v3.sqlobject.statement.internal.SqlUpdateHandler.configureReturner(Update u, SqlObjectStatementConfiguration cfg)",
                    "public void org.jdbi.v3.sqlobject.statement.internal.SqlUpdateHandler.warm(ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d94392caeb09d2bbd3e6959b2b92c468d8f7a941",
        "previous_commit": "7a44ae4074c5ff8546b5f5356a32f7c360e65694",
        "date": 1567392207,
        "releases": {
            "previous": "d94392caeb09d2bbd3e6959b2b92c468d8f7a941",
            "next": "d94392caeb09d2bbd3e6959b2b92c468d8f7a941"
        },
        "commit_message": "ClasspathSqlLocator: allow configuring comment parsing and deprecate static api\n\nFixes #1576\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d94392caeb09d2bbd3e6959b2b92c468d8f7a941": {
                "core/src/main/java/org/jdbi/v3/core/locator/ClasspathSqlLocator.java": [
                    "public static String org.jdbi.v3.core.locator.ClasspathSqlLocator.getResourceOnClasspath(ClassLoader classLoader, String path)",
                    "public static String org.jdbi.v3.core.locator.ClasspathSqlLocator.findSqlOnClasspath(Class<?> type, String methodName)",
                    "public static String org.jdbi.v3.core.locator.ClasspathSqlLocator.findSqlOnClasspath(String name)",
                    "private String org.jdbi.v3.core.locator.ClasspathSqlLocator.readResource(ClassLoader classLoader, String path)",
                    "public static String org.jdbi.v3.core.locator.ClasspathSqlLocator.getResourceOnClasspath(String path)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/SqlObjectClasspathSqlLocator.java": [
                    "public String org.jdbi.v3.sqlobject.locator.SqlObjectClasspathSqlLocator.locate(Class<?> sqlObjectType, Method method, ConfigRegistry config)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/internal/UseClasspathSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.sqlobject.locator.internal.UseClasspathSqlLocatorImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ]
            },
            "7a44ae4074c5ff8546b5f5356a32f7c360e65694": {
                "core/src/main/java/org/jdbi/v3/core/locator/ClasspathSqlLocator.java": [
                    "public static String org.jdbi.v3.core.locator.ClasspathSqlLocator.getResourceOnClasspath(ClassLoader classLoader, String path)",
                    "public static String org.jdbi.v3.core.locator.ClasspathSqlLocator.findSqlOnClasspath(Class<?> type, String methodName)",
                    "public static String org.jdbi.v3.core.locator.ClasspathSqlLocator.findSqlOnClasspath(String name)",
                    "private static String org.jdbi.v3.core.locator.ClasspathSqlLocator.readResource(ClassLoader classLoader, String path)",
                    "public static String org.jdbi.v3.core.locator.ClasspathSqlLocator.getResourceOnClasspath(String path)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/SqlObjectClasspathSqlLocator.java": [
                    "public String org.jdbi.v3.sqlobject.locator.SqlObjectClasspathSqlLocator.locate(Class<?> sqlObjectType, Method method, ConfigRegistry config)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/internal/UseClasspathSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.sqlobject.locator.internal.UseClasspathSqlLocatorImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7e8090d9a5d50bd14acf776f4b3382842668f7a5",
        "previous_commit": "627ab52d471ba92d69c7b278491ac571678236a1",
        "date": 1703785386,
        "releases": {
            "previous": "7e8090d9a5d50bd14acf776f4b3382842668f7a5",
            "next": "7e8090d9a5d50bd14acf776f4b3382842668f7a5"
        },
        "commit_message": "Support resultset and outparameters\n\nLifts the restriction of using either a ResultSet or out parameter\nvalues from the OutParameters object. The ResultSet must be consumed\nfirst, though (as dictated by JDBC 3.0).\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7e8090d9a5d50bd14acf776f4b3382842668f7a5": {
                "core/src/main/java/org/jdbi/v3/core/result/internal/ResultSetResultIterable.java": [
                    "public ResultIterator<T> org.jdbi.v3.core.result.internal.ResultSetResultIterable<T>.iterator()"
                ],
                "core/src/main/java/org/jdbi/v3/core/result/internal/ResultSetResultIterator.java": [
                    "public T org.jdbi.v3.core.result.internal.ResultSetResultIterator<T>.next()",
                    "public void org.jdbi.v3.core.result.internal.ResultSetResultIterator<T>.close()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public <T> T org.jdbi.v3.core.statement.Call.invoke(Function<OutParameters, T> resultComputer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/MetaData.java": [
                    "public <R> R org.jdbi.v3.core.statement.MetaData.scanResultSet(ResultSetScanner<R> resultSetScanner)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/OutParameters.java": [
                    "public ResultBearing org.jdbi.v3.core.statement.OutParameters.getRowSet(int pos)",
                    "public ResultBearing org.jdbi.v3.core.statement.OutParameters.getRowSet(String name)"
                ]
            },
            "627ab52d471ba92d69c7b278491ac571678236a1": {
                "core/src/main/java/org/jdbi/v3/core/result/internal/ResultSetResultIterable.java": [
                    "public ResultIterator<T> org.jdbi.v3.core.result.internal.ResultSetResultIterable<T>.iterator()"
                ],
                "core/src/main/java/org/jdbi/v3/core/result/internal/ResultSetResultIterator.java": [
                    "public T org.jdbi.v3.core.result.internal.ResultSetResultIterator<T>.next()",
                    "public void org.jdbi.v3.core.result.internal.ResultSetResultIterator<T>.close()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public <T> T org.jdbi.v3.core.statement.Call.invoke(Function<OutParameters, T> resultComputer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/MetaData.java": [
                    "public <R> R org.jdbi.v3.core.statement.MetaData.scanResultSet(ResultSetScanner<R> resultSetScanner)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/OutParameters.java": [
                    "public ResultBearing org.jdbi.v3.core.statement.OutParameters.getRowSet(int pos)",
                    "public ResultBearing org.jdbi.v3.core.statement.OutParameters.getRowSet(String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "57a93ae3fcd4165c0ede9a3af4566b8d933033ed",
        "previous_commit": "18958cb2ca00def74f1bedc29363a66ca1db98b5",
        "date": 1719547118,
        "releases": {
            "previous": "57a93ae3fcd4165c0ede9a3af4566b8d933033ed",
            "next": "57a93ae3fcd4165c0ede9a3af4566b8d933033ed"
        },
        "commit_message": "Replace JdbiOptionals.stream() with Optional.stream()\n\nOptional.stream() requires Java 9+, but since 3.40 JDBI has required Java 11+, so this compatibility code is no longer needed\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "57a93ae3fcd4165c0ede9a3af4566b8d933033ed": {
                "core/src/main/java/org/jdbi/v3/core/argument/BuiltInArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.BuiltInArgumentFactory.build(Type expectedType, Object value, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/array/SqlArrayTypes.java": [
                    "public Optional<SqlArrayType<?>> org.jdbi.v3.core.array.SqlArrayTypes.findFor(Type elementType)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/JdbiOptionals.java": [
                    "public static <T> Optional<T> org.jdbi.v3.core.internal.JdbiOptionals.findFirstPresent(Supplier<Optional<T>>... suppliers)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/BuiltInMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.BuiltInMapperFactory.build(Type type, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/ArgumentBinder.java": [
                    "private Consumer<PreparedBinding> org.jdbi.v3.core.statement.ArgumentBinder.prepareBinder(PreparedBinding preparedBindingTemplate)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Binding.java": [
                    "public Optional<Argument> org.jdbi.v3.core.statement.Binding.findForName(String name, StatementContext ctx2)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/Handlers.java": [
                    "public Optional<Handler> org.jdbi.v3.sqlobject.Handlers.findFor(Class<?> sqlObjectType, Method method)"
                ]
            },
            "18958cb2ca00def74f1bedc29363a66ca1db98b5": {
                "core/src/main/java/org/jdbi/v3/core/argument/BuiltInArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.BuiltInArgumentFactory.build(Type expectedType, Object value, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/array/SqlArrayTypes.java": [
                    "public Optional<SqlArrayType<?>> org.jdbi.v3.core.array.SqlArrayTypes.findFor(Type elementType)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/JdbiOptionals.java": [
                    "public static <T> Optional<T> org.jdbi.v3.core.internal.JdbiOptionals.findFirstPresent(Supplier<Optional<T>>... suppliers)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/BuiltInMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.BuiltInMapperFactory.build(Type type, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/ArgumentBinder.java": [
                    "private Consumer<PreparedBinding> org.jdbi.v3.core.statement.ArgumentBinder.prepareBinder(PreparedBinding preparedBindingTemplate)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Binding.java": [
                    "public Optional<Argument> org.jdbi.v3.core.statement.Binding.findForName(String name, StatementContext ctx2)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/Handlers.java": [
                    "public Optional<Handler> org.jdbi.v3.sqlobject.Handlers.findFor(Class<?> sqlObjectType, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c1c9a29c822350e6fbe113e36e9dfac383637141",
        "previous_commit": "6f160871a9944c946fe77495f4b4796a83c8b072",
        "date": 1551723584,
        "releases": {
            "previous": "c1c9a29c822350e6fbe113e36e9dfac383637141",
            "next": "c1c9a29c822350e6fbe113e36e9dfac383637141"
        },
        "commit_message": "antlr4!\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c1c9a29c822350e6fbe113e36e9dfac383637141": {
                "core/src/main/java/org/jdbi/v3/core/internal/SqlScriptParser.java": [
                    "public String org.jdbi.v3.core.internal.SqlScriptParser.parse(CharStream charStream)"
                ],
                "core/src/main/java/org/jdbi/v3/core/locator/ClasspathSqlLocator.java": [
                    "private static String org.jdbi.v3.core.locator.ClasspathSqlLocator.readResource(ClassLoader classLoader, String path)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/ColonPrefixSqlParser.java": [
                    "private ParsedSql org.jdbi.v3.core.statement.ColonPrefixSqlParser.internalParse(String sql)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/DefinedAttributeTemplateEngine.java": [
                    "public String org.jdbi.v3.core.statement.DefinedAttributeTemplateEngine.render(String template, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/HashPrefixSqlParser.java": [
                    "private ParsedSql org.jdbi.v3.core.statement.HashPrefixSqlParser.internalParse(final String sql)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Script.java": [
                    "private List<String> org.jdbi.v3.core.statement.Script.splitToStatements(String script)"
                ]
            },
            "6f160871a9944c946fe77495f4b4796a83c8b072": {
                "core/src/main/java/org/jdbi/v3/core/internal/SqlScriptParser.java": [
                    "public String org.jdbi.v3.core.internal.SqlScriptParser.parse(CharStream charStream)"
                ],
                "core/src/main/java/org/jdbi/v3/core/locator/ClasspathSqlLocator.java": [
                    "private static String org.jdbi.v3.core.locator.ClasspathSqlLocator.readResource(ClassLoader classLoader, String path)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/ColonPrefixSqlParser.java": [
                    "private ParsedSql org.jdbi.v3.core.statement.ColonPrefixSqlParser.internalParse(String sql)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/DefinedAttributeTemplateEngine.java": [
                    "public String org.jdbi.v3.core.statement.DefinedAttributeTemplateEngine.render(String template, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/HashPrefixSqlParser.java": [
                    "private ParsedSql org.jdbi.v3.core.statement.HashPrefixSqlParser.internalParse(final String sql)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Script.java": [
                    "private List<String> org.jdbi.v3.core.statement.Script.splitToStatements(String script)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2386b10a681474f11e926fa25560c57e698ebec8",
        "previous_commit": "ab2b33c46ab1d8be912de73d2a38c8149697c103",
        "date": 1668837396,
        "releases": {
            "previous": "2386b10a681474f11e926fa25560c57e698ebec8",
            "next": "2386b10a681474f11e926fa25560c57e698ebec8"
        },
        "commit_message": "Method updates on Handle and Transactional\n\n- deprecate misnamed `setTransactionIsolation` method, add `setTransactionIsolationLevel` to the handle\n- deprecate misnamed `release` method, add `releaseSavepoint` to the handle\n- add missing `isInTransaction` method to `Transactional`, bringing it to par to the handle set of methods\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2386b10a681474f11e926fa25560c57e698ebec8": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Handle.inTransaction(TransactionIsolationLevel level, HandleCallback<R, X> callback)",
                    "public Handle org.jdbi.v3.core.Handle.release(String savepointName)",
                    "public void org.jdbi.v3.core.Handle.setTransactionIsolation(int level)",
                    "public void org.jdbi.v3.core.Handle.setTransactionIsolation(TransactionIsolationLevel level)"
                ],
                "core/src/main/java/org/jdbi/v3/core/transaction/LocalTransactionHandler.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.transaction.LocalTransactionHandler.inTransaction(Handle handle, TransactionIsolationLevel level, HandleCallback<R, X> callback)"
                ],
                "core/src/main/java/org/jdbi/v3/core/transaction/SerializableTransactionRunner.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.transaction.SerializableTransactionRunner.inTransaction(Handle handle, TransactionIsolationLevel level, HandleCallback<R, X> callback)"
                ]
            },
            "ab2b33c46ab1d8be912de73d2a38c8149697c103": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Handle.inTransaction(TransactionIsolationLevel level, HandleCallback<R, X> callback)",
                    "public Handle org.jdbi.v3.core.Handle.release(String savepointName)",
                    "public void org.jdbi.v3.core.Handle.setTransactionIsolation(int level)",
                    "public void org.jdbi.v3.core.Handle.setTransactionIsolation(TransactionIsolationLevel level)"
                ],
                "core/src/main/java/org/jdbi/v3/core/transaction/LocalTransactionHandler.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.transaction.LocalTransactionHandler.inTransaction(Handle handle, TransactionIsolationLevel level, HandleCallback<R, X> callback)"
                ],
                "core/src/main/java/org/jdbi/v3/core/transaction/SerializableTransactionRunner.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.transaction.SerializableTransactionRunner.inTransaction(Handle handle, TransactionIsolationLevel level, HandleCallback<R, X> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0728ee7be782cf80b7f7aba4e38c60e1113b746c",
        "previous_commit": "068a2d3d3fe510bf3d473ffec7b5c7139506d9be",
        "date": 1565942627,
        "releases": {
            "previous": "0728ee7be782cf80b7f7aba4e38c60e1113b746c",
            "next": "0728ee7be782cf80b7f7aba4e38c60e1113b746c"
        },
        "commit_message": "Generator now also generates OnDemand classes\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0728ee7be782cf80b7f7aba4e38c60e1113b746c": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <E> E org.jdbi.v3.core.Jdbi.onDemand(Class<E> extensionType)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "public <E> E org.jdbi.v3.core.internal.OnDemandExtensions.create(Jdbi db, Class<E> extensionType, Class<?>... extraTypes)"
                ],
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "private void org.jdbi.v3.generator.GenerateSqlObjectProcessor.generate0(Element e)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handle)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectPlugin.java": [
                    "public void org.jdbi.v3.sqlobject.SqlObjectPlugin.customizeJdbi(Jdbi db)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/CreateSqlObjectHandler.java": [
                    "public Object org.jdbi.v3.sqlobject.internal.CreateSqlObjectHandler.invoke(Object target, Object[] args, HandleSupplier handle)"
                ]
            },
            "068a2d3d3fe510bf3d473ffec7b5c7139506d9be": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <E> E org.jdbi.v3.core.Jdbi.onDemand(Class<E> extensionType)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "public static <E> E org.jdbi.v3.core.internal.OnDemandExtensions.create(Jdbi db, Class<E> extensionType, Class<?>... extraTypes)"
                ],
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "private void org.jdbi.v3.generator.GenerateSqlObjectProcessor.generate0(Element e)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handle)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectPlugin.java": [
                    "public void org.jdbi.v3.sqlobject.SqlObjectPlugin.customizeJdbi(Jdbi db)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/CreateSqlObjectHandler.java": [
                    "public Object org.jdbi.v3.sqlobject.internal.CreateSqlObjectHandler.invoke(Object target, Object[] args, HandleSupplier handle)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5f02c66125f8788894d8c668027be35f9630d72d",
        "previous_commit": "4f14361e438671dac36cc5ff5da41bc0fa9ed439",
        "date": 1605992079,
        "releases": {
            "previous": "5f02c66125f8788894d8c668027be35f9630d72d",
            "next": "5f02c66125f8788894d8c668027be35f9630d72d"
        },
        "commit_message": "Object Field/Method arguments: use generic type to capture things like List<T>\n\nHopefully fixes #1784\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5f02c66125f8788894d8c668027be35f9630d72d": {
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectMethodArguments.java": [
                    "private static Map<String, Function<Object, TypedValue>> org.jdbi.v3.core.argument.ObjectMethodArguments.load(ConfigRegistry config, Class<?> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/h2/H2DatabasePlugin.java": [
                    "public void org.jdbi.v3.core.h2.H2DatabasePlugin.customizeJdbi(Jdbi db)"
                ],
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "private MethodSpec org.jdbi.v3.generator.GenerateSqlObjectProcessor.generateOnDemand(TypeElement sqlObjectType, ExecutableElement method)",
                    "private void org.jdbi.v3.generator.GenerateSqlObjectProcessor.generate(Element sqlObjE)"
                ],
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "private static Method org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lookupMethod(Class<?> klass, String methodName, Class<?>... parameterTypes)"
                ]
            },
            "4f14361e438671dac36cc5ff5da41bc0fa9ed439": {
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectMethodArguments.java": [
                    "private static Map<String, Function<Object, TypedValue>> org.jdbi.v3.core.argument.ObjectMethodArguments.load(ConfigRegistry config, Class<?> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/h2/H2DatabasePlugin.java": [
                    "public void org.jdbi.v3.core.h2.H2DatabasePlugin.customizeJdbi(Jdbi db)"
                ],
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "private MethodSpec org.jdbi.v3.generator.GenerateSqlObjectProcessor.generateOnDemand(TypeElement sqlObjectType, ExecutableElement method)",
                    "private void org.jdbi.v3.generator.GenerateSqlObjectProcessor.generate(Element sqlObjE)"
                ],
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "private static Method org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lookupMethod(Class<?> klass, String methodName, Class<?>... parameterTypes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a1f5596dfa40202cbe01f93d4e3f43d88551e90a",
        "previous_commit": "c048190ef53df9e46469d1c8b51cc8ea534eca2b",
        "date": 1664993848,
        "releases": {
            "previous": "a1f5596dfa40202cbe01f93d4e3f43d88551e90a",
            "next": "a1f5596dfa40202cbe01f93d4e3f43d88551e90a"
        },
        "commit_message": "Replace Unmappable with JdbiProperty for skipping binding / mapping\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a1f5596dfa40202cbe01f93d4e3f43d88551e90a": {
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectMethodArguments.java": [
                    "private static Map<String, Function<Object, TypedValue>> org.jdbi.v3.core.argument.ObjectMethodArguments.load(ConfigRegistry config, Class<?> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/internal/NamedArgumentFinderFactory.java": [
                    "Function<String, Optional<Function<Object, Argument>>> org.jdbi.v3.core.argument.internal.Pojo.forPojoProps( Function<QualifiedType<?>, Function<Object, Argument>> argumentFactoryLookup, PojoPropertyArguments ppa)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/internal/PojoPropertyArguments.java": [
                    "protected Optional<TypedValue> org.jdbi.v3.core.argument.internal.PojoPropertyArguments.getValue(String name, StatementContext ctx)",
                    "public Collection<String> org.jdbi.v3.core.argument.internal.PojoPropertyArguments.getNames()"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.createSpecializedRowMapper(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.createSpecializedRowMapper(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            },
            "c048190ef53df9e46469d1c8b51cc8ea534eca2b": {
                "core/src/main/java/org/jdbi/v3/core/argument/ObjectMethodArguments.java": [
                    "private static Map<String, Function<Object, TypedValue>> org.jdbi.v3.core.argument.ObjectMethodArguments.load(ConfigRegistry config, Class<?> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/internal/NamedArgumentFinderFactory.java": [
                    "Function<String, Optional<Function<Object, Argument>>> org.jdbi.v3.core.argument.internal.Pojo.forPojoProps( Function<QualifiedType<?>, Function<Object, Argument>> argumentFactoryLookup, PojoPropertyArguments ppa)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/internal/PojoPropertyArguments.java": [
                    "protected Optional<TypedValue> org.jdbi.v3.core.argument.internal.PojoPropertyArguments.getValue(String name, StatementContext ctx)",
                    "public Collection<String> org.jdbi.v3.core.argument.internal.PojoPropertyArguments.getNames()"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.createSpecializedRowMapper(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.createSpecializedRowMapper(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6b79aadaf8606fdf003b9daedabdd2b2f1681c35",
        "previous_commit": "6a790dbf776e9ee119469ccb32c620338fa61bad",
        "date": 1693505441,
        "releases": {
            "previous": "6b79aadaf8606fdf003b9daedabdd2b2f1681c35",
            "next": "6b79aadaf8606fdf003b9daedabdd2b2f1681c35"
        },
        "commit_message": "Use a state machine for transaction handler\n\nreplace the three booleans with a simple state machine:\n\n1) \"OUTSIDE_TRANSACTION\" -- begin(Handle) --> \"AFTER_BEGIN\".\n   Idempotent operation, can be called many times.\n\n2) \"AFTER_BEGIN\" -- inTransaction(Handle) --> \"OUTSIDE_TRANSACTION\".\n    Wraps the SQL operation, executes it and then commits or rolls back.\n    Goes through an intermediate state \"IN_TRANSACTION\" that only exists\n    between the begin of the SQL operation and commit/rollback\n\n3) \"AFTER_BEGIN\" | \"IN_TRANSACTION\" -- commit(Handle) | rollback(Handle) --> \"OUTSIDE_TRANSACTION\".\n   Either operation move the state back to the initial state and restore the auto commit state.\n   Calling rollback() after commit() has no effect.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6b79aadaf8606fdf003b9daedabdd2b2f1681c35": {
                "core/src/main/java/org/jdbi/v3/core/transaction/LocalTransactionHandler.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.transaction.LocalTransactionHandler.inTransaction(Handle handle, HandleCallback<R, X> callback)",
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.rollback(Handle handle)",
                    "public boolean org.jdbi.v3.core.transaction.LocalTransactionHandler.isInTransaction(Handle handle)",
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.commit(Handle handle)",
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.begin(Handle handle)",
                    "private void org.jdbi.v3.core.transaction.LocalTransactionHandler.restoreAutoCommitState(Handle handle)"
                ]
            },
            "6a790dbf776e9ee119469ccb32c620338fa61bad": {
                "core/src/main/java/org/jdbi/v3/core/transaction/LocalTransactionHandler.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.transaction.LocalTransactionHandler.inTransaction(Handle handle, HandleCallback<R, X> callback)",
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.rollback(Handle handle)",
                    "public boolean org.jdbi.v3.core.transaction.LocalTransactionHandler.isInTransaction(Handle handle)",
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.commit(Handle handle)",
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.begin(Handle handle)",
                    "private void org.jdbi.v3.core.transaction.LocalTransactionHandler.restoreAutoCommitState(Handle handle)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "36d796beb5d3cb46d9da341803eae84cd1e6d4d0",
        "previous_commit": "277b2dcf75b798bb89889ac925fb034c37079527",
        "date": 1591378790,
        "releases": {
            "previous": "36d796beb5d3cb46d9da341803eae84cd1e6d4d0",
            "next": "36d796beb5d3cb46d9da341803eae84cd1e6d4d0"
        },
        "commit_message": "TransactionHandler: allow specializing to Handle\n\nthis fixes memory leak reported as #1697\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "36d796beb5d3cb46d9da341803eae84cd1e6d4d0": {
                "core/src/main/java/org/jdbi/v3/core/transaction/LocalTransactionHandler.java": [
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.releaseSavepoint(Handle handle, String name)",
                    "public <R, X extends Exception> R org.jdbi.v3.core.transaction.LocalTransactionHandler.inTransaction(Handle handle, HandleCallback<R, X> callback)",
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.rollback(Handle handle)",
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.begin(Handle handle)",
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.savepoint(Handle handle, String name)",
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.rollbackToSavepoint(Handle handle, String name)"
                ]
            },
            "277b2dcf75b798bb89889ac925fb034c37079527": {
                "core/src/main/java/org/jdbi/v3/core/transaction/LocalTransactionHandler.java": [
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.releaseSavepoint(Handle handle, String name)",
                    "public <R, X extends Exception> R org.jdbi.v3.core.transaction.LocalTransactionHandler.inTransaction(Handle handle, HandleCallback<R, X> callback)",
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.rollback(Handle handle)",
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.begin(Handle handle)",
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.savepoint(Handle handle, String name)",
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.rollbackToSavepoint(Handle handle, String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "85c18c88da28fd65f6509227ab28bb7e83a5c641",
        "previous_commit": "a3cbcb6cec1310351ccc73f3200e2fd13837c4ac",
        "date": 1565942627,
        "releases": {
            "previous": "85c18c88da28fd65f6509227ab28bb7e83a5c641",
            "next": "85c18c88da28fd65f6509227ab28bb7e83a5c641"
        },
        "commit_message": "Introduce @Generate annotation processor that generates concrete SqlObject\n\nAllows use of abstract classes and package-private or protected methods.\n\nSee #840\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "85c18c88da28fd65f6509227ab28bb7e83a5c641": {
                "core/src/main/java/org/jdbi/v3/core/config/JdbiCaches.java": [
                    "public static <K, V> JdbiCache<K, V> org.jdbi.v3.core.config.JdbiCaches.declare(Function<K, ?> keyNormalizer, Function<K, V> computer)",
                    "public static <K, V> JdbiCache<K, V> org.jdbi.v3.core.config.JdbiCaches.declare(Function<K, ?> keyNormalizer, BiFunction<ConfigRegistry, K, V> computer)",
                    "public V org.jdbi.v3.core.config.JdbiCaches.get(K key, ConfigRegistry config)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handle)",
                    "public boolean org.jdbi.v3.sqlobject.SqlObjectFactory.accepts(Class<?> extensionType)",
                    "static Configurer getConfigurer(Class<? extends Configurer> factoryClass)"
                ]
            },
            "a3cbcb6cec1310351ccc73f3200e2fd13837c4ac": {
                "core/src/main/java/org/jdbi/v3/core/config/JdbiCaches.java": [
                    "public static <K, V> JdbiCache<K, V> org.jdbi.v3.core.config.JdbiCaches.declare(Function<K, ?> keyNormalizer, Function<K, V> computer)",
                    "public V org.jdbi.v3.core.config.JdbiCaches.get(K key, ConfigRegistry config)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "Configurer getConfigurer(Class<? extends Configurer> factoryClass)",
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handle)",
                    "public boolean org.jdbi.v3.sqlobject.SqlObjectFactory.accepts(Class<?> extensionType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a4c8a06909e6c884010eaecbe69cf071142c6ec0",
        "previous_commit": "4eeb8346d00d2e87456444ad84e6c1c535a12baf",
        "date": 1576352784,
        "releases": {
            "previous": "a4c8a06909e6c884010eaecbe69cf071142c6ec0",
            "next": "a4c8a06909e6c884010eaecbe69cf071142c6ec0"
        },
        "commit_message": "Enum types: don't use isEnum, check assignability instead\n\nit doesn't behave like you expect\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a4c8a06909e6c884010eaecbe69cf071142c6ec0": {
                "core/src/main/java/org/jdbi/v3/core/argument/EnumArgumentFactory.java": [
                    "static <E extends Enum<E>> Optional<Class<E>> org.jdbi.v3.core.argument.EnumArgumentFactory.ifEnum(Type type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/enums/internal/EnumMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.enums.internal.EnumMapperFactory.build(QualifiedType<?> givenType, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/enums/internal/EnumSqlArrayTypeFactory.java": [
                    "public Optional<SqlArrayType<?>> org.jdbi.v3.core.enums.internal.EnumSqlArrayTypeFactory.build(Type elementType, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/EnumByNameMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.EnumByNameMapperFactory.build(Type type, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/EnumByOrdinalMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.EnumByOrdinalMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            },
            "4eeb8346d00d2e87456444ad84e6c1c535a12baf": {
                "core/src/main/java/org/jdbi/v3/core/argument/EnumArgumentFactory.java": [
                    "static <E extends Enum<E>> Optional<Class<E>> org.jdbi.v3.core.argument.EnumArgumentFactory.ifEnum(Type type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/enums/internal/EnumMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.enums.internal.EnumMapperFactory.build(QualifiedType<?> givenType, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/enums/internal/EnumSqlArrayTypeFactory.java": [
                    "public Optional<SqlArrayType<?>> org.jdbi.v3.core.enums.internal.EnumSqlArrayTypeFactory.build(Type elementType, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/EnumByNameMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.EnumByNameMapperFactory.build(Type type, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/EnumByOrdinalMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.EnumByOrdinalMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3fc3b74c1199ed4b8fbc59dd52eb61a4d7cc4c8c",
        "previous_commit": "a16675cba7415c61dd15004183d1ad4551c3c145",
        "date": 1601665378,
        "releases": {
            "previous": "3fc3b74c1199ed4b8fbc59dd52eb61a4d7cc4c8c",
            "next": "3fc3b74c1199ed4b8fbc59dd52eb61a4d7cc4c8c"
        },
        "commit_message": "QualifiedType: use new Java 10+ collection collectors if available, they're much faster\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3fc3b74c1199ed4b8fbc59dd52eb61a4d7cc4c8c": {
                "core/src/main/java/org/jdbi/v3/core/qualifier/QualifiedType.java": [
                    "public QualifiedType<T> org.jdbi.v3.core.qualifier.QualifiedType<T>.withAnnotations(Iterable<? extends Annotation> newQualifiers)",
                    "public QualifiedType<T> org.jdbi.v3.core.qualifier.QualifiedType<T>.with(Annotation... newQualifiers)",
                    "public final QualifiedType<T> org.jdbi.v3.core.qualifier.QualifiedType<T>.with(Class<? extends Annotation>... newQualifiers)",
                    "public QualifiedType<T> org.jdbi.v3.core.qualifier.QualifiedType<T>.withAnnotationClasses(Iterable<Class<? extends Annotation>> newQualifiers)"
                ],
                "core/src/main/java/org/jdbi/v3/core/qualifier/Qualifiers.java": [
                    "private static Set<Annotation> org.jdbi.v3.core.qualifier.Qualifiers.getQualifiers(AnnotatedElement... elements)"
                ]
            },
            "a16675cba7415c61dd15004183d1ad4551c3c145": {
                "core/src/main/java/org/jdbi/v3/core/qualifier/QualifiedType.java": [
                    "public QualifiedType<T> org.jdbi.v3.core.qualifier.QualifiedType<T>.withAnnotations(Iterable<? extends Annotation> newQualifiers)",
                    "public QualifiedType<T> org.jdbi.v3.core.qualifier.QualifiedType<T>.with(Annotation... newQualifiers)",
                    "public final QualifiedType<T> org.jdbi.v3.core.qualifier.QualifiedType<T>.with(Class<? extends Annotation>... newQualifiers)",
                    "public QualifiedType<T> org.jdbi.v3.core.qualifier.QualifiedType<T>.withAnnotationClasses(Iterable<Class<? extends Annotation>> newQualifiers)"
                ],
                "core/src/main/java/org/jdbi/v3/core/qualifier/Qualifiers.java": [
                    "private static Set<Annotation> org.jdbi.v3.core.qualifier.Qualifiers.getQualifiers(AnnotatedElement... elements)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c46b9bbd82fab5f7caa0c5cec5a8457a889a1222",
        "previous_commit": "b3bb5037c4b8e29711456a6b84c3530a9a970cb8",
        "date": 1552435461,
        "releases": {
            "previous": "c46b9bbd82fab5f7caa0c5cec5a8457a889a1222",
            "next": "c46b9bbd82fab5f7caa0c5cec5a8457a889a1222"
        },
        "commit_message": "Remove Guava reflection code, use GeAnTyRef instead!\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c46b9bbd82fab5f7caa0c5cec5a8457a889a1222": {
                "core/src/main/java/org/jdbi/v3/core/generic/GenericTypes.java": [
                    "public static Optional<Type> org.jdbi.v3.core.generic.GenericTypes.findGenericParameter(Type type, Class<?> parameterizedSupertype, int n)",
                    "public static Class<?> org.jdbi.v3.core.generic.GenericTypes.getErasedType(Type type)",
                    "public static Type org.jdbi.v3.core.generic.GenericTypes.resolveType(Type type, Type contextType)",
                    "public static Type org.jdbi.v3.core.generic.GenericTypes.resolveMapEntryType(Type keyType, Type valueType)"
                ],
                "vavr/src/main/java/org/jdbi/v3/vavr/VavrCollectorFactory.java": [
                    "public Optional<Type> org.jdbi.v3.vavr.VavrCollectorFactory.elementType(Type containerType)"
                ]
            },
            "b3bb5037c4b8e29711456a6b84c3530a9a970cb8": {
                "core/src/main/java/org/jdbi/v3/core/generic/GenericTypes.java": [
                    "public static Optional<Type> org.jdbi.v3.core.generic.GenericTypes.findGenericParameter(Type type, Class<?> parameterizedSupertype, int n)",
                    "public static Class<?> org.jdbi.v3.core.generic.GenericTypes.getErasedType(Type type)",
                    "public static Type org.jdbi.v3.core.generic.GenericTypes.resolveType(Type type, Type contextType)",
                    "public static Type org.jdbi.v3.core.generic.GenericTypes.resolveMapEntryType(Type keyType, Type valueType)"
                ],
                "vavr/src/main/java/org/jdbi/v3/vavr/VavrCollectorFactory.java": [
                    "public Optional<Type> org.jdbi.v3.vavr.VavrCollectorFactory.elementType(Type containerType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "afc8e6e42a0fdd6c41623ae8e78217f868dabdee",
        "previous_commit": "a852cf142032c67cb98bf4da3ce55240376a5508",
        "date": 1668637191,
        "releases": {
            "previous": "afc8e6e42a0fdd6c41623ae8e78217f868dabdee",
            "next": "afc8e6e42a0fdd6c41623ae8e78217f868dabdee"
        },
        "commit_message": "Use 'handleSupplier' consistently\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "afc8e6e42a0fdd6c41623ae8e78217f868dabdee": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "private <R, E, X extends Exception> R org.jdbi.v3.core.Jdbi.callWithExtension(Class<E> extensionType, ExtensionCallback<R, E, X> callback, HandleSupplier handleSupplier)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlMethodAnnotatedHandlerDecorator.java": [
                    "public Handler org.jdbi.v3.sqlobject.SqlMethodAnnotatedHandlerDecorator.decorateHandler(Handler delegate, Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "public <E> E org.jdbi.v3.sqlobject.internal.SqlObjectInitData.instantiate(Class<E> passExtensionType, HandleSupplier handleSupplier, ConfigRegistry instanceConfig)",
                    "public Supplier<InContextInvoker> org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lazyInvoker(Object target, Method method, HandleSupplier handleSupplier, ConfigRegistry instanceConfig)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/transaction/internal/TransactionDecorator.java": [
                    "public Handler org.jdbi.v3.sqlobject.transaction.internal.TransactionDecorator.decorateHandler(Handler delegate, Class<?> sqlObjectType, Method method)"
                ]
            },
            "a852cf142032c67cb98bf4da3ce55240376a5508": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "private <R, E, X extends Exception> R org.jdbi.v3.core.Jdbi.callWithExtension(Class<E> extensionType, ExtensionCallback<R, E, X> callback, HandleSupplier handle)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlMethodAnnotatedHandlerDecorator.java": [
                    "public Handler org.jdbi.v3.sqlobject.SqlMethodAnnotatedHandlerDecorator.decorateHandler(Handler base, Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "public Supplier<InContextInvoker> org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lazyInvoker(Object target, Method method, HandleSupplier handle, ConfigRegistry instanceConfig)",
                    "public <E> E org.jdbi.v3.sqlobject.internal.SqlObjectInitData.instantiate(Class<E> passExtensionType, HandleSupplier handle, ConfigRegistry instanceConfig)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/transaction/internal/TransactionDecorator.java": [
                    "public Handler org.jdbi.v3.sqlobject.transaction.internal.TransactionDecorator.decorateHandler(Handler base, Class<?> sqlObjectType, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d01bea0b55162a9e6f29f817b83067876a0a4969",
        "previous_commit": "0728ee7be782cf80b7f7aba4e38c60e1113b746c",
        "date": 1566369907,
        "releases": {
            "previous": "d01bea0b55162a9e6f29f817b83067876a0a4969",
            "next": "d01bea0b55162a9e6f29f817b83067876a0a4969"
        },
        "commit_message": "Code review\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d01bea0b55162a9e6f29f817b83067876a0a4969": {
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "public <E> E org.jdbi.v3.core.internal.OnDemandExtensions.create(Jdbi db, Class<E> extensionType, Class<?>... extraTypes)"
                ],
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "public boolean org.jdbi.v3.generator.GenerateSqlObjectProcessor.process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public Optional<Object> org.jdbi.v3.sqlobject.SqlObjectFactory.onDemand(Jdbi db, Class<?> extensionType, Class<?>... extraTypes)",
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handle)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "public static Method org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lookupMethod(String methodName, Class<?>... parameterTypes)"
                ]
            },
            "0728ee7be782cf80b7f7aba4e38c60e1113b746c": {
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "public <E> E org.jdbi.v3.core.internal.OnDemandExtensions.create(Jdbi db, Class<E> extensionType, Class<?>... extraTypes)"
                ],
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "public boolean org.jdbi.v3.generator.GenerateSqlObjectProcessor.process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public Optional<Object> org.jdbi.v3.sqlobject.SqlObjectFactory.onDemand(Jdbi db, Class<?> extensionType, Class<?>... extraTypes)",
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handle)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "public static Method org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lookupMethod(String methodName, Class<?>... parameterTypes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "42c85599a32b6daed0c6bcca4313f2da0e2d0e3f",
        "previous_commit": "6206b0dad5cfbb737b550b690ed750a2a95270a0",
        "date": 1565214557,
        "releases": {
            "previous": "42c85599a32b6daed0c6bcca4313f2da0e2d0e3f",
            "next": "42c85599a32b6daed0c6bcca4313f2da0e2d0e3f"
        },
        "commit_message": "fixes after rebase and review\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "42c85599a32b6daed0c6bcca4313f2da0e2d0e3f": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public ExtensionMethod org.jdbi.v3.core.Handle.getExtensionMethod()",
                    "public ConfigRegistry org.jdbi.v3.core.Handle.getConfig()",
                    "void org.jdbi.v3.core.Handle.setExtensionMethod(ExtensionMethod extensionMethod)",
                    "void org.jdbi.v3.core.Handle.setConfig(ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/LazyHandleSupplier.java": [
                    "private void org.jdbi.v3.core.LazyHandleSupplier.initHandle()"
                ]
            },
            "6206b0dad5cfbb737b550b690ed750a2a95270a0": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public ExtensionMethod org.jdbi.v3.core.Handle.getExtensionMethod()",
                    "public ConfigRegistry org.jdbi.v3.core.Handle.getConfig()",
                    "void org.jdbi.v3.core.Handle.setExtensionMethod(ExtensionMethod extensionMethod)",
                    "void org.jdbi.v3.core.Handle.setConfig(ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/LazyHandleSupplier.java": [
                    "private void org.jdbi.v3.core.LazyHandleSupplier.initHandle()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e9899d5985a918d19d3d4177e422c78bbbd93636",
        "previous_commit": "1450f9cc9385a5ad78cbfe3788a6355d77974575",
        "date": 1675535524,
        "releases": {
            "previous": "e9899d5985a918d19d3d4177e422c78bbbd93636",
            "next": "e9899d5985a918d19d3d4177e422c78bbbd93636"
        },
        "commit_message": "Factor out common code in HandleSupplier\n\nStarting to reduce the code sprawl around HandleSupplier. Remove the\nconvoluted back and forth between the invokeInContext methods that\nno user can actually get right and the only implementations are in Jdbi\nanyway.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e9899d5985a918d19d3d4177e422c78bbbd93636": {
                "core/src/main/java/org/jdbi/v3/core/LazyHandleSupplier.java": [
                    "public void org.jdbi.v3.core.LazyHandleSupplier.close()",
                    "public ConfigRegistry org.jdbi.v3.core.LazyHandleSupplier.getConfig()",
                    "public Jdbi org.jdbi.v3.core.LazyHandleSupplier.getJdbi()",
                    "private Handle org.jdbi.v3.core.LazyHandleSupplier.createHandle()"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/CreateSqlObjectHandler.java": [
                    "public Object org.jdbi.v3.sqlobject.internal.CreateSqlObjectHandler.invoke(Object target, Object[] args, HandleSupplier handleSupplier)"
                ]
            },
            "1450f9cc9385a5ad78cbfe3788a6355d77974575": {
                "core/src/main/java/org/jdbi/v3/core/LazyHandleSupplier.java": [
                    "public void org.jdbi.v3.core.LazyHandleSupplier.close()",
                    "public ConfigRegistry org.jdbi.v3.core.LazyHandleSupplier.getConfig()",
                    "public Jdbi org.jdbi.v3.core.LazyHandleSupplier.getJdbi()",
                    "private Handle org.jdbi.v3.core.LazyHandleSupplier.createHandle()"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/CreateSqlObjectHandler.java": [
                    "public Object org.jdbi.v3.sqlobject.internal.CreateSqlObjectHandler.invoke(Object target, Object[] args, HandleSupplier handleSupplier)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "35b33600afe69dade1c67096bf0bccee58eeb27a",
        "previous_commit": "6aa339523e6ce5e75173f42eebd0ad632ea85d67",
        "date": 1669172286,
        "releases": {
            "previous": "35b33600afe69dade1c67096bf0bccee58eeb27a",
            "next": "35b33600afe69dade1c67096bf0bccee58eeb27a"
        },
        "commit_message": "more renames\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "35b33600afe69dade1c67096bf0bccee58eeb27a": {
                "core/src/main/java/org/jdbi/v3/core/result/ResultProducers.java": [
                    "public static ResultProducer<ResultBearing> org.jdbi.v3.core.result.ResultProducers.returningGeneratedKeys(String... generatedKeyColumnNames)"
                ],
                "core/src/main/java/org/jdbi/v3/core/result/ResultSetResultIterator.java": [
                    "public T org.jdbi.v3.core.result.ResultSetResultIterator<T>.next()",
                    "private boolean org.jdbi.v3.core.result.ResultSetResultIterator<T>.safeNext()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/MetaData.java": [
                    "private Supplier<ResultSet> org.jdbi.v3.core.statement.MetaData.getResultSetSupplier()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private <R> R org.jdbi.v3.core.statement.PreparedBatch.execute(ResultProducer<R> producer, Consumer<ExecutedBatch> batchConsumer)"
                ]
            },
            "6aa339523e6ce5e75173f42eebd0ad632ea85d67": {
                "core/src/main/java/org/jdbi/v3/core/result/ResultProducers.java": [
                    "public static ResultProducer<ResultBearing> org.jdbi.v3.core.result.ResultProducers.returningGeneratedKeys(String... generatedKeyColumnNames)"
                ],
                "core/src/main/java/org/jdbi/v3/core/result/ResultSetResultIterator.java": [
                    "public T org.jdbi.v3.core.result.ResultSetResultIterator<T>.next()",
                    "private boolean org.jdbi.v3.core.result.ResultSetResultIterator<T>.safeNext()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/MetaData.java": [
                    "private Supplier<ResultSet> org.jdbi.v3.core.statement.MetaData.getResultSetSupplier()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private <R> R org.jdbi.v3.core.statement.PreparedBatch.execute(ResultProducer<R> producer, Consumer<ExecutedBatch> batchConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "18837218030f0549307e53fa73375fe5b0fd2ff2",
        "previous_commit": "f1eb375a715e918aee2db407523ee63443d02e94",
        "date": 1696644991,
        "releases": {
            "previous": "18837218030f0549307e53fa73375fe5b0fd2ff2",
            "next": "18837218030f0549307e53fa73375fe5b0fd2ff2"
        },
        "commit_message": "Add support for function arguments\n\nSimilar to `Consumer<...>` arguments, a function argument consumes the\nresults of a SQL query. The return value from applying the function is\nreturned by the SQL object method. This is especially useful for\ncollecting and managing streaming data as the function is called while\nthe database connection is live.\n\nAddresses #2326\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "18837218030f0549307e53fa73375fe5b0fd2ff2": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java": [
                    "protected Void org.jdbi.v3.sqlobject.statement.internal.ResultReturner.mappedResult(ResultIterable<?> iterable, StatementContext ctx)",
                    "protected Void org.jdbi.v3.sqlobject.statement.internal.ResultReturner.reducedResult(Stream<?> stream, StatementContext ctx)",
                    "static ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(Class<?> extensionType, Method method)",
                    "protected Object org.jdbi.v3.sqlobject.statement.internal.ResultReturner.reducedResult(Stream<?> stream, StatementContext ctx)",
                    "protected Object org.jdbi.v3.sqlobject.statement.internal.ResultReturner.mappedResult(ResultIterable<?> iterable, StatementContext ctx)"
                ]
            },
            "f1eb375a715e918aee2db407523ee63443d02e94": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java": [
                    "protected Void org.jdbi.v3.sqlobject.statement.internal.ResultReturner.mappedResult(ResultIterable<?> iterable, StatementContext ctx)",
                    "protected Void org.jdbi.v3.sqlobject.statement.internal.ResultReturner.reducedResult(Stream<?> stream, StatementContext ctx)",
                    "static ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(Class<?> extensionType, Method method)",
                    "protected Object org.jdbi.v3.sqlobject.statement.internal.ResultReturner.reducedResult(Stream<?> stream, StatementContext ctx)",
                    "protected Object org.jdbi.v3.sqlobject.statement.internal.ResultReturner.mappedResult(ResultIterable<?> iterable, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "88eeb97188f6bde7ea5654051591f9f03c16eb73",
        "previous_commit": "365986b0670080b9025001ca472a9b0064b41b53",
        "date": 1678420626,
        "releases": {
            "previous": "88eeb97188f6bde7ea5654051591f9f03c16eb73",
            "next": "88eeb97188f6bde7ea5654051591f9f03c16eb73"
        },
        "commit_message": "Rewrite of the core extension framework (#2285)\n\n* Rewrite of the core extension framework\r\n\r\nThe current extension framework is relatively simple. It supports\r\nattaching an extension interface which looks up a factory that then\r\nhas the responsibility of either looking up an implementation class or\r\ncreate a proxy to execute code for each method.\r\n\r\nDue to that simple structure, there are a number of inconsistencies,\r\nespecially around the extension context and wrapping each method from\r\nan interface.\r\n\r\nThe main reason for this is that most of the interesting functionality\r\nfor the extension code is not actually in the core/extension package\r\nbut in sqlobject. Extension is little more than just a scaffold that\r\nwas designed with sqlobject in mind.\r\n\r\nThere is nothing wrong with this. However, it is possible to move a\r\nlot of the \"interesting\" functionality from the sqlobject code into\r\nthe core package without losing backwards compatibility and then\r\nmaking it possible to implement additional functionality using\r\nextensions.\r\n\r\nSQL Objects uses three concepts:\r\n\r\n* Handlers. These are code pieces that are executed when an extension\r\n  method is called. This is the code for SQLUpdate, SQLQuery etc.\r\n* HandlerDecorators. These code pieces change the behavior of a\r\n  handler. Transactions are implemented as a decorator.\r\n* Configurers. These code pieces add or change the configuration for a\r\n  method before it is called. This configuration is then spliced into\r\n  the Handle through the ExtensionContext so that all code that runs\r\n  within the Handler method uses that modified\r\n  configuration. Configurers are used for the \"Use...\" annotations.\r\n\r\nNone of these concepts is SQLObject specific. This is generic code\r\nthat can be used for any extension. But by being split out of the core\r\nand part of the sqlobject module, it is not available to any other\r\nextension or has to be copied and pasted.\r\n\r\nWhile the change looks big, it is mostly moving existing code around\r\nand cleaning it up. It introduces three new concepts to the core:\r\n\r\n`ExtensionHandler` - This is equivalent to the SqlObject Handler\r\nclass.\r\n\r\n`ExtensionHandler.Factory` - SqlObject HandlerFactory, but with the\r\n`accepts / build` pattern.\r\n\r\n`@UseExtensionHandler` annotation - equivalent to `@SqlOperation`. It\r\nalso provides an `id` attribute to allow multiple extensions to\r\ndifferentiate between `@UseExtensionHandler` instances intended for\r\nthem or for another extension.\r\n\r\n`ExtensionHandlerCustomizer` - This is the equivalent of the SqlObject\r\n`HandleDecorator`\r\n\r\n`@UseExtensionCustomizer` - This is the equivalent of the SqlObject\r\n`@SqlMethodDecoratingAnnotation` annotation.\r\n\r\n`@ExtensionCustomizationOrder` - This is the equivalent of the\r\nSqlObject `@DecoratorOrder` annotation.\r\n\r\n`ExtensionConfigurer` - This is the equivalent of SqlObject\r\n`Configurer`. Literally.\r\n\r\n`ConfigCustomizer` - This is an explicit interface where the SqlObject\r\ncode uses `Consumer<ConfigRegistry>`. We are not consuming the\r\nregistry, but customizing it. Makes code more readable.\r\n\r\n`ConfigCustomizerFactory` - A factory class that creates a collection\r\nof `ConfigCustomizer` elements for an extension type or an extension\r\ntype method. That concept existed sprawled out in the\r\n`SqlObjectInitData` class but was not pluggable and hardcoded to the\r\n`Configurer` interface.\r\n\r\n`@UseExtensionCustomizer` - This is the equivalent of the SqlObject\r\n`@ConfiguringAnnotation`\r\n\r\n`ExtensionFactory` gets a lot of new things, all of them with defaults\r\nthat match the current code.\r\n* a set of flags to control extension factory behavior\r\n* bunch of getters for custom ExtensionHandlerFactories,\r\n  ExtensionHandlerCustomizers and ExtensionConfigurerFactories\r\n\r\nThe `Extensions` configuration gets some new things:\r\n* methods to register ExtensionHandlerFactories,\r\n  ExtensionHandlerCustomizers and ExtensionConfigurerFactories\r\n  globally\r\n* a method to retrieve metadata for a given extension type\r\n\r\n`ExtensionHandlerInvoker` takes the role of `InContextInvoker`. All\r\ninvokers are managed by the `ExtensionMetadata` class\r\n\r\n`ExtensionMetadata` takes the role of `SqlObjectInitData`. It contains\r\nall of the discovered functionality from an extension type. It builds\r\na map of `ExtensionHandler` objects that can be wrapped into an\r\n`ExtensionInvoker` with all customizers and configurers added. Those\r\n`ExtensionInvoker` classes are called through the Proxy when a method\r\nis invoked.\r\n\r\n`ExtensionFactoryDelegate` wraps the functionality of the old\r\nSqlObjectFactory code. It may simply delegate to the actual factory\r\ngenerated object or create the map of ExtensionHandlers with\r\ncorresponding ExtensionHandlerInvokers and wrap them into a proxy\r\nobject.\r\n\r\nSimilar to the SqlObject code, a number of \"glue\"\r\n`ExtensionHandlerFactory` instances are used to create method handlers\r\nthat are not managed by the extension specific code:\r\n\r\n* bridge methods\r\n* interface default methods\r\n* direct method invocations if the factory provides an actual object to attach to\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "88eeb97188f6bde7ea5654051591f9f03c16eb73": {
                "core/src/main/java/org/jdbi/v3/core/extension/Extensions.java": [
                    "public Extensions org.jdbi.v3.core.extension.Extensions.register(ExtensionFactory factory)",
                    "private Optional<ExtensionFactory> org.jdbi.v3.core.extension.Extensions.findFactoryFor(Class<?> extensionType)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private T org.jdbi.v3.core.mapper.reflect.BoundFieldMapper.construct()"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "private static Map<Method, Handler> org.jdbi.v3.sqlobject.internal.SqlObjectInitData.buildMethodHandlers( ConfigRegistry config, Class<?> sqlObjectType)",
                    "private static UnaryOperator<ConfigRegistry> buildConfigurers(Stream<AnnotatedElement> elements, ConfigurerMethod consumer)"
                ]
            },
            "365986b0670080b9025001ca472a9b0064b41b53": {
                "core/src/main/java/org/jdbi/v3/core/extension/Extensions.java": [
                    "public Extensions org.jdbi.v3.core.extension.Extensions.register(ExtensionFactory factory)",
                    "private Optional<ExtensionFactory> org.jdbi.v3.core.extension.Extensions.findFactoryFor(Class<?> extensionType)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private T org.jdbi.v3.core.mapper.reflect.BoundFieldMapper.construct()"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "private static Map<Method, Handler> org.jdbi.v3.sqlobject.internal.SqlObjectInitData.buildMethodHandlers( ConfigRegistry config, Class<?> sqlObjectType)",
                    "private static UnaryOperator<ConfigRegistry> buildConfigurers(Stream<AnnotatedElement> elements, ConfigurerMethod consumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ad92f3f4c1f90ed5dd6027ad50bbaae20e796df2",
        "previous_commit": "8ae6d5a570090606921558c4e5a5484105563985",
        "date": 1666133677,
        "releases": {
            "previous": "ad92f3f4c1f90ed5dd6027ad50bbaae20e796df2",
            "next": "ad92f3f4c1f90ed5dd6027ad50bbaae20e796df2"
        },
        "commit_message": "BaseStatement: why do we need a helper method for close()?\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ad92f3f4c1f90ed5dd6027ad50bbaae20e796df2": {
                "core/src/main/java/org/jdbi/v3/core/statement/BaseStatement.java": [
                    "public void org.jdbi.v3.core.statement.BaseStatement<This>.close()",
                    "protected final void org.jdbi.v3.core.statement.BaseStatement<This>.cleanUpForException(SQLException e)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Batch.java": [
                    "public int[] org.jdbi.v3.core.statement.Batch.execute()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public <T> T org.jdbi.v3.core.statement.Call.invoke(Function<OutParameters, T> resultComputer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "public int[] org.jdbi.v3.core.statement.PreparedBatch.execute()"
                ]
            },
            "8ae6d5a570090606921558c4e5a5484105563985": {
                "core/src/main/java/org/jdbi/v3/core/statement/BaseStatement.java": [
                    "public void org.jdbi.v3.core.statement.BaseStatement<This>.close()",
                    "protected final void org.jdbi.v3.core.statement.BaseStatement<This>.cleanUpForException(SQLException e)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Batch.java": [
                    "public int[] org.jdbi.v3.core.statement.Batch.execute()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public <T> T org.jdbi.v3.core.statement.Call.invoke(Function<OutParameters, T> resultComputer)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "public int[] org.jdbi.v3.core.statement.PreparedBatch.execute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bdcfdbb3a37b32cbadd456f6b669fa91dcb7e550",
        "previous_commit": "907b3ade6dbf1d7289e0b52fae4f701c64d0adf7",
        "date": 1565213544,
        "releases": {
            "previous": "bdcfdbb3a37b32cbadd456f6b669fa91dcb7e550",
            "next": "bdcfdbb3a37b32cbadd456f6b669fa91dcb7e550"
        },
        "commit_message": "fix fields\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bdcfdbb3a37b32cbadd456f6b669fa91dcb7e550": {
                "core/src/main/java/org/jdbi/v3/core/LazyHandleSupplier.java": [
                    "public void org.jdbi.v3.core.LazyHandleSupplier.close()",
                    "public ConfigRegistry org.jdbi.v3.core.LazyHandleSupplier.getConfig()",
                    "public <V> V org.jdbi.v3.core.LazyHandleSupplier.invokeInContext(ExtensionMethod extensionMethod, ConfigRegistry config, Callable<V> task)",
                    "private void org.jdbi.v3.core.LazyHandleSupplier.initHandle()"
                ],
                "core/src/main/java/org/jdbi/v3/core/array/InferredSqlArrayTypeFactory.java": [
                    "public Optional<SqlArrayType<?>> org.jdbi.v3.core.array.InferredSqlArrayTypeFactory.build(Type elementType, ConfigRegistry config)"
                ]
            },
            "907b3ade6dbf1d7289e0b52fae4f701c64d0adf7": {
                "core/src/main/java/org/jdbi/v3/core/LazyHandleSupplier.java": [
                    "public void org.jdbi.v3.core.LazyHandleSupplier.close()",
                    "public ConfigRegistry org.jdbi.v3.core.LazyHandleSupplier.getConfig()",
                    "public <V> V org.jdbi.v3.core.LazyHandleSupplier.invokeInContext(ExtensionMethod extensionMethod, ConfigRegistry config, Callable<V> task)",
                    "private void org.jdbi.v3.core.LazyHandleSupplier.initHandle()"
                ],
                "core/src/main/java/org/jdbi/v3/core/array/InferredSqlArrayTypeFactory.java": [
                    "public Optional<SqlArrayType<?>> org.jdbi.v3.core.array.InferredSqlArrayTypeFactory.build(Type elementType, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4385e2b21e790541f9d36cae07162385620fa217",
        "previous_commit": "97bb752eba3dfe8ea17c2bc36c7f93d722496943",
        "date": 1640484738,
        "releases": {
            "previous": "4385e2b21e790541f9d36cae07162385620fa217",
            "next": "4385e2b21e790541f9d36cae07162385620fa217"
        },
        "commit_message": "error-prone: OperatorPrecedence fixes\n\nPMD and error prone disagree over parentheses, see also https://xkcd.com/297/\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4385e2b21e790541f9d36cae07162385620fa217": {
                "core/src/main/java/org/jdbi/v3/core/internal/IterableLike.java": [
                    "public static boolean org.jdbi.v3.core.internal.IterableLike.isIterable(Object maybeIterable)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            },
            "97bb752eba3dfe8ea17c2bc36c7f93d722496943": {
                "core/src/main/java/org/jdbi/v3/core/internal/IterableLike.java": [
                    "public static boolean org.jdbi.v3.core.internal.IterableLike.isIterable(Object maybeIterable)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3a412462c8eaa96558bd7d585a7fbc6a3302361e",
        "previous_commit": "646ccb570d88e7811a86b327b344f104aba96812",
        "date": 1664663247,
        "releases": {
            "previous": "3a412462c8eaa96558bd7d585a7fbc6a3302361e",
            "next": "3a412462c8eaa96558bd7d585a7fbc6a3302361e"
        },
        "commit_message": "Clarify uppercase/lowercase conversions\n\n- Make row name conversions configurable (same as MapMapper) with the current strategy being the default.\n- Replace one String#toUpperCase use with Character.toUpperCase, to match Introspector#decapitalize\n- Use Locale.ROOT in all the tests.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3a412462c8eaa96558bd7d585a7fbc6a3302361e": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize(ResultSet rs, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize(ResultSet rs, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ReflectionMapperUtil.java": [
                    "public static List<String> org.jdbi.v3.core.mapper.reflect.ReflectionMapperUtil.getColumnNames(ResultSet rs)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize(ResultSet rs, StatementContext ctx)"
                ]
            },
            "646ccb570d88e7811a86b327b344f104aba96812": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize(ResultSet rs, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize(ResultSet rs, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ReflectionMapperUtil.java": [
                    "public static List<String> org.jdbi.v3.core.mapper.reflect.ReflectionMapperUtil.getColumnNames(ResultSet rs)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize(ResultSet rs, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5db5d130637dabdd93cae7fb506722ff670bed7b",
        "previous_commit": "76df0bb175537381391988854eeb4aa0b85f2eb8",
        "date": 1619131360,
        "releases": {
            "previous": "5db5d130637dabdd93cae7fb506722ff670bed7b",
            "next": "5db5d130637dabdd93cae7fb506722ff670bed7b"
        },
        "commit_message": "Add one-time init methods to row and column mappers (#1863)\n\nAdd one-time init methods to row and column mappers\r\n\r\nAllow creation-time initialization of row and column mappers. Also\r\nmake the config registry available to the factory methods on the\r\ncodec interface.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5db5d130637dabdd93cae7fb506722ff670bed7b": {
                "core/src/main/java/org/jdbi/v3/core/codec/CodecFactory.java": [
                    "public final Optional<ColumnMapper<?>> org.jdbi.v3.core.codec.CodecFactory.build(final QualifiedType<?> type, final ConfigRegistry config)",
                    "public final Optional<Function<Object, Argument>> org.jdbi.v3.core.codec.CodecFactory.prepare(final QualifiedType<?> type, final ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/ColumnMappers.java": [
                    "public <T> Optional<ColumnMapper<T>> org.jdbi.v3.core.mapper.ColumnMappers.findFor(QualifiedType<T> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/RowMappers.java": [
                    "public Optional<RowMapper<?>> org.jdbi.v3.core.mapper.RowMappers.findFor(Type type)"
                ]
            },
            "76df0bb175537381391988854eeb4aa0b85f2eb8": {
                "core/src/main/java/org/jdbi/v3/core/codec/CodecFactory.java": [
                    "public final Optional<ColumnMapper<?>> org.jdbi.v3.core.codec.CodecFactory.build(final QualifiedType<?> type, final ConfigRegistry config)",
                    "public final Optional<Function<Object, Argument>> org.jdbi.v3.core.codec.CodecFactory.prepare(final QualifiedType<?> type, final ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/ColumnMappers.java": [
                    "public <T> Optional<ColumnMapper<T>> org.jdbi.v3.core.mapper.ColumnMappers.findFor(QualifiedType<T> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/RowMappers.java": [
                    "public Optional<RowMapper<?>> org.jdbi.v3.core.mapper.RowMappers.findFor(Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "aa2c7fb5f4825ec029818d4d1db17dca3f0a8dcf",
        "previous_commit": "67ab4cb83cd95122ebc7775f50f77bcbf49f1435",
        "date": 1668640916,
        "releases": {
            "previous": "aa2c7fb5f4825ec029818d4d1db17dca3f0a8dcf",
            "next": "aa2c7fb5f4825ec029818d4d1db17dca3f0a8dcf"
        },
        "commit_message": "SqlObject Consumer: accept Stream, Iterator consumer types\n\nFixes #2169\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "aa2c7fb5f4825ec029818d4d1db17dca3f0a8dcf": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java": [
                    "protected Void org.jdbi.v3.sqlobject.statement.internal.ResultReturner.reducedResult(Stream<?> stream, StatementContext ctx)",
                    "static ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(Class<?> extensionType, Method method)",
                    "protected Void org.jdbi.v3.sqlobject.statement.internal.ResultReturner.mappedResult(ResultIterable<?> iterable, StatementContext ctx)",
                    "static Optional<ResultReturner> org.jdbi.v3.sqlobject.statement.internal.ResultReturner.findConsumer(Method method)"
                ]
            },
            "67ab4cb83cd95122ebc7775f50f77bcbf49f1435": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java": [
                    "protected Void org.jdbi.v3.sqlobject.statement.internal.ResultReturner.reducedResult(Stream<?> stream, StatementContext ctx)",
                    "static ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(Class<?> extensionType, Method method)",
                    "protected Void org.jdbi.v3.sqlobject.statement.internal.ResultReturner.mappedResult(ResultIterable<?> iterable, StatementContext ctx)",
                    "static Optional<ResultReturner> org.jdbi.v3.sqlobject.statement.internal.ResultReturner.findConsumer(Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ea941be912e3d2aa9176d3b5c25c23f95f3c03df",
        "previous_commit": "17aab72a4b4751947b28b52aa7bd12d973acfcfd",
        "date": 1552449936,
        "releases": {
            "previous": "ea941be912e3d2aa9176d3b5c25c23f95f3c03df",
            "next": "ea941be912e3d2aa9176d3b5c25c23f95f3c03df"
        },
        "commit_message": "Move nested transaction support from SQL Object TransactionDecorator to Handle.inTransaction()\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ea941be912e3d2aa9176d3b5c25c23f95f3c03df": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Handle.inTransaction(TransactionIsolationLevel level, HandleCallback<R, X> callback)",
                    "public <X extends Exception> void org.jdbi.v3.core.Handle.useTransaction(final HandleConsumer<X> callback)",
                    "public <R, X extends Exception> R org.jdbi.v3.core.Handle.inTransaction(HandleCallback<R, X> callback)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/transaction/internal/TransactionDecorator.java": [
                    "public Handler org.jdbi.v3.sqlobject.transaction.internal.TransactionDecorator.decorateHandler(Handler base, Class<?> sqlObjectType, Method method)"
                ]
            },
            "17aab72a4b4751947b28b52aa7bd12d973acfcfd": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Handle.inTransaction(TransactionIsolationLevel level, HandleCallback<R, X> callback)",
                    "public <X extends Exception> void org.jdbi.v3.core.Handle.useTransaction(final HandleConsumer<X> callback)",
                    "public <R, X extends Exception> R org.jdbi.v3.core.Handle.inTransaction(HandleCallback<R, X> callback)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/transaction/internal/TransactionDecorator.java": [
                    "public Handler org.jdbi.v3.sqlobject.transaction.internal.TransactionDecorator.decorateHandler(Handler base, Class<?> sqlObjectType, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c29349291c97dd2746dbebf88a8e820b85273e36",
        "previous_commit": "e61a03e2e9057ef1db1a438596b795d2f11fd648",
        "date": 1664389401,
        "releases": {
            "previous": "c29349291c97dd2746dbebf88a8e820b85273e36",
            "next": "c29349291c97dd2746dbebf88a8e820b85273e36"
        },
        "commit_message": "Clarify prefix/name work for bean mappers\n\nFix the prefix addition for Field/Constructor/Bean mappers so that the name matchers can\ndifferentiate between prefixes and names. This fixes #2105. Also add a test for this.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c29349291c97dd2746dbebf88a8e820b85273e36": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private ColumnMapper<?> defaultColumnMapper(PojoProperty<T> property)",
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            },
            "e61a03e2e9057ef1db1a438596b795d2f11fd648": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private ColumnMapper<?> defaultColumnMapper(PojoProperty<T> property)",
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "37b8329ccc9e5332b01445413af1cd74e9f9da26",
        "previous_commit": "e47563598f53387c6406c558a23ae66deaaaff1e",
        "date": 1600287188,
        "releases": {
            "previous": "37b8329ccc9e5332b01445413af1cd74e9f9da26",
            "next": "37b8329ccc9e5332b01445413af1cd74e9f9da26"
        },
        "commit_message": "Arguments: don't prePrepare types, it's too expensive in the common case\n\n~20% improvement on H2.fluentSelectOne\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "37b8329ccc9e5332b01445413af1cd74e9f9da26": {
                "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java": [
                    "public Arguments org.jdbi.v3.core.argument.Arguments.register(QualifiedArgumentFactory factory)",
                    "public Optional<Argument> org.jdbi.v3.core.argument.Arguments.findFor(QualifiedType<?> type, Object value)",
                    "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.Arguments.prepareFor(QualifiedType<?> type)",
                    "public void org.jdbi.v3.core.argument.Arguments.setRegistry(ConfigRegistry registry)"
                ]
            },
            "e47563598f53387c6406c558a23ae66deaaaff1e": {
                "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java": [
                    "public Arguments org.jdbi.v3.core.argument.Arguments.register(QualifiedArgumentFactory factory)",
                    "public Optional<Argument> org.jdbi.v3.core.argument.Arguments.findFor(QualifiedType<?> type, Object value)",
                    "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.Arguments.prepareFor(QualifiedType<?> type)",
                    "public void org.jdbi.v3.core.argument.Arguments.setRegistry(ConfigRegistry registry)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "76c5b28d04d59fe9f7b4f92e0f116f67a13517ca",
        "previous_commit": "13e914fb96d44a706cd0b601da007e6e599097d2",
        "date": 1548151671,
        "releases": {
            "previous": "76c5b28d04d59fe9f7b4f92e0f116f67a13517ca",
            "next": "76c5b28d04d59fe9f7b4f92e0f116f67a13517ca"
        },
        "commit_message": "simplify, naming, testing\n\nconsistent naming\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "76c5b28d04d59fe9f7b4f92e0f116f67a13517ca": {
                "core/src/main/java/org/jdbi/v3/core/Enums.java": [
                    "public Enums org.jdbi.v3.core.Enums.defaultByName()",
                    "public Enums org.jdbi.v3.core.Enums.defaultByOrdinal()"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/QualifiedEnumArgumentFactory.java": [
                    "private static <E extends Enum<E>> Optional<Argument> org.jdbi.v3.core.internal.QualifiedEnumArgumentFactory.makeEnumArgument(QualifiedType<E> givenType, E value, Class<E> enumClass, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/QualifiedEnumMapperFactory.java": [
                    "private static <E extends Enum<E>> Optional<ColumnMapper<?>> org.jdbi.v3.core.internal.QualifiedEnumMapperFactory.makeEnumArgument(QualifiedType<E> givenType, Class<E> enumClass, ConfigRegistry config)"
                ]
            },
            "13e914fb96d44a706cd0b601da007e6e599097d2": {
                "core/src/main/java/org/jdbi/v3/core/Enums.java": [
                    "public Enums org.jdbi.v3.core.Enums.defaultByName()",
                    "public Enums org.jdbi.v3.core.Enums.defaultByOrdinal()"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/QualifiedEnumArgumentFactory.java": [
                    "private static <E extends Enum<E>> Optional<Argument> org.jdbi.v3.core.internal.QualifiedEnumArgumentFactory.makeEnumArgument(QualifiedType<E> givenType, E value, Class<E> enumClass, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/QualifiedEnumMapperFactory.java": [
                    "private static <E extends Enum<E>> Optional<ColumnMapper<?>> org.jdbi.v3.core.internal.QualifiedEnumMapperFactory.makeEnumArgument(QualifiedType<E> givenType, Class<E> enumClass, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ed140144cc7ae7d85f5647a94c07b400d4e0b012",
        "previous_commit": "33a5a653467467a2b28bf1b94a7d5b70726aef4f",
        "date": 1569734877,
        "releases": {
            "previous": "ed140144cc7ae7d85f5647a94c07b400d4e0b012",
            "next": "ed140144cc7ae7d85f5647a94c07b400d4e0b012"
        },
        "commit_message": "Complete NamedArgumentFinder preparation work\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ed140144cc7ae7d85f5647a94c07b400d4e0b012": {
                "core/src/main/java/org/jdbi/v3/core/statement/Binding.java": [
                    "public Optional<Argument> org.jdbi.v3.core.statement.Binding.findForPosition(int position)",
                    "public Optional<Argument> org.jdbi.v3.core.statement.Binding.findForName(String name, StatementContext ctx2)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
                    "public PreparedBatch org.jdbi.v3.core.statement.PreparedBatch.add()"
                ]
            },
            "33a5a653467467a2b28bf1b94a7d5b70726aef4f": {
                "core/src/main/java/org/jdbi/v3/core/statement/Binding.java": [
                    "public Optional<Argument> org.jdbi.v3.core.statement.Binding.findForPosition(int position)",
                    "public Optional<Argument> org.jdbi.v3.core.statement.Binding.findForName(String name, StatementContext ctx2)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
                    "public PreparedBatch org.jdbi.v3.core.statement.PreparedBatch.add()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f2eb8dc4dccba41ffe546b2afdf0e95e19009488",
        "previous_commit": "ed5f7daeca2588256e66f7003a0ef4029af100dd",
        "date": 1653783487,
        "releases": {
            "previous": "f2eb8dc4dccba41ffe546b2afdf0e95e19009488",
            "next": "f2eb8dc4dccba41ffe546b2afdf0e95e19009488"
        },
        "commit_message": "some minor fixes based on sonarqube\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f2eb8dc4dccba41ffe546b2afdf0e95e19009488": {
                "core/src/main/java/org/jdbi/v3/core/internal/AnnotationFactory.java": [
                    "public static <T extends Annotation> T org.jdbi.v3.core.internal.AnnotationFactory.create(Class<T> annotationType, Map<String, ?> values)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Binding.java": [
                    "public Optional<Argument> org.jdbi.v3.core.statement.Binding.findForPosition(int position)",
                    "public Optional<Argument> org.jdbi.v3.core.statement.Binding.findForName(String name, StatementContext ctx2)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()"
                ]
            },
            "ed5f7daeca2588256e66f7003a0ef4029af100dd": {
                "core/src/main/java/org/jdbi/v3/core/internal/AnnotationFactory.java": [
                    "public static <T extends Annotation> T org.jdbi.v3.core.internal.AnnotationFactory.create(Class<T> annotationType, Map<String, ?> values)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Binding.java": [
                    "public Optional<Argument> org.jdbi.v3.core.statement.Binding.findForPosition(int position)",
                    "public Optional<Argument> org.jdbi.v3.core.statement.Binding.findForName(String name, StatementContext ctx2)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9a894afbc39951fc1f54672c3acfb18f9152374e",
        "previous_commit": "a3f48cac3f734722c550209e3693f1ed77a7c8e8",
        "date": 1618008896,
        "releases": {
            "previous": "9a894afbc39951fc1f54672c3acfb18f9152374e",
            "next": "9a894afbc39951fc1f54672c3acfb18f9152374e"
        },
        "commit_message": "Add CodecFactory that can resolve subtypes.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9a894afbc39951fc1f54672c3acfb18f9152374e": {
                "core/src/main/java/org/jdbi/v3/core/codec/CodecFactory.java": [
                    "public static Builder org.jdbi.v3.core.codec.CodecFactory.builder()",
                    "public CodecFactory org.jdbi.v3.core.codec.CodecFactory.build()",
                    "public final Optional<ColumnMapper<?>> org.jdbi.v3.core.codec.CodecFactory.build(final QualifiedType<?> type, final ConfigRegistry config)",
                    "public final Optional<Function<Object, Argument>> org.jdbi.v3.core.codec.CodecFactory.prepare(final QualifiedType<?> type, final ConfigRegistry config)"
                ]
            },
            "a3f48cac3f734722c550209e3693f1ed77a7c8e8": {
                "core/src/main/java/org/jdbi/v3/core/codec/CodecFactory.java": [
                    "public static Builder org.jdbi.v3.core.codec.CodecFactory.builder()",
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.codec.CodecFactory.build(final QualifiedType<?> type, final ConfigRegistry config)",
                    "public CodecFactory org.jdbi.v3.core.codec.CodecFactory.build()",
                    "public Optional<Function<Object, Argument>> org.jdbi.v3.core.codec.CodecFactory.prepare(final QualifiedType<?> type, final ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "97d8768f05a47008ed61e0ca763f632b95476bce",
        "previous_commit": "4f29b913546a83e1ede46a7332823e37fb332d5a",
        "date": 1567555748,
        "releases": {
            "previous": "97d8768f05a47008ed61e0ca763f632b95476bce",
            "next": "97d8768f05a47008ed61e0ca763f632b95476bce"
        },
        "commit_message": "Freemarker: allow customizing configuration\n\nFixes #1222\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "97d8768f05a47008ed61e0ca763f632b95476bce": {
                "freemarker/src/main/java/org/jdbi/v3/freemarker/FreemarkerEngine.java": [
                    "public String org.jdbi.v3.freemarker.FreemarkerEngine.render(String sql, StatementContext ctx)"
                ],
                "freemarker/src/main/java/org/jdbi/v3/freemarker/FreemarkerSqlLocator.java": [
                    "public static Template org.jdbi.v3.freemarker.FreemarkerSqlLocator.findTemplate(Class<?> type, String templateName)",
                    "public static Template org.jdbi.v3.freemarker.FreemarkerSqlLocator.findTemplate(Configuration config, Class<?> type, String templateName)"
                ],
                "freemarker/src/main/java/org/jdbi/v3/freemarker/internal/UseFreemarkerSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.freemarker.internal.UseFreemarkerSqlLocatorImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ]
            },
            "4f29b913546a83e1ede46a7332823e37fb332d5a": {
                "freemarker/src/main/java/org/jdbi/v3/freemarker/FreemarkerEngine.java": [
                    "public String org.jdbi.v3.freemarker.FreemarkerEngine.render(String sql, StatementContext ctx)"
                ],
                "freemarker/src/main/java/org/jdbi/v3/freemarker/FreemarkerSqlLocator.java": [
                    "public static Template org.jdbi.v3.freemarker.FreemarkerSqlLocator.findTemplate(Class<?> type, String templateName)"
                ],
                "freemarker/src/main/java/org/jdbi/v3/freemarker/internal/UseFreemarkerSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.freemarker.internal.UseFreemarkerSqlLocatorImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "23195040b5ab492c97dad48f2c7ba962861e6231",
        "previous_commit": "afc6bc9e975d2d4edf27b5f242b51d4109a9e361",
        "date": 1587520339,
        "releases": {
            "previous": "23195040b5ab492c97dad48f2c7ba962861e6231",
            "next": "23195040b5ab492c97dad48f2c7ba962861e6231"
        },
        "commit_message": "Re-prepare factories on each copy of Arguments, so that they can get updated configuration\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "23195040b5ab492c97dad48f2c7ba962861e6231": {
                "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java": [
                    "public Arguments org.jdbi.v3.core.argument.Arguments.register(QualifiedArgumentFactory factory)",
                    "public void org.jdbi.v3.core.argument.Arguments.setRegistry(ConfigRegistry registry)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/PrimitivesArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.PrimitivesArgumentFactory.build(Type expectedType, Object value, ConfigRegistry config)",
                    "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.PrimitivesArgumentFactory.prepare(Type type, ConfigRegistry config)"
                ]
            },
            "afc6bc9e975d2d4edf27b5f242b51d4109a9e361": {
                "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java": [
                    "public Arguments org.jdbi.v3.core.argument.Arguments.register(QualifiedArgumentFactory factory)",
                    "public void org.jdbi.v3.core.argument.Arguments.setRegistry(ConfigRegistry registry)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/PrimitivesArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.PrimitivesArgumentFactory.build(Type expectedType, Object value, ConfigRegistry config)",
                    "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.PrimitivesArgumentFactory.prepare(Type type, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bbd2fadbadc040a80fc674287a5b69a42c63c2e1",
        "previous_commit": "cda95e82dd4f1e495b7fc557c62caedfe00eadef",
        "date": 1548719098,
        "releases": {
            "previous": "bbd2fadbadc040a80fc674287a5b69a42c63c2e1",
            "next": "bbd2fadbadc040a80fc674287a5b69a42c63c2e1"
        },
        "commit_message": "fix #1388\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bbd2fadbadc040a80fc674287a5b69a42c63c2e1": {
                "freemarker/src/main/java/org/jdbi/v3/freemarker/internal/UseFreemarkerSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.freemarker.internal.UseFreemarkerSqlLocatorImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/AnnotationSqlLocator.java": [
                    "public String org.jdbi.v3.sqlobject.locator.AnnotationSqlLocator.locate(Class<?> sqlObjectType, Method method, ConfigRegistry config)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/internal/UseClasspathSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.sqlobject.locator.internal.UseClasspathSqlLocatorImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "stringtemplate4/src/main/java/org/jdbi/v3/stringtemplate4/internal/UseStringTemplateSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.stringtemplate4.internal.UseStringTemplateSqlLocatorImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ]
            },
            "cda95e82dd4f1e495b7fc557c62caedfe00eadef": {
                "freemarker/src/main/java/org/jdbi/v3/freemarker/internal/UseFreemarkerSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.freemarker.internal.UseFreemarkerSqlLocatorImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/AnnotationSqlLocator.java": [
                    "public String org.jdbi.v3.sqlobject.locator.AnnotationSqlLocator.locate(Class<?> sqlObjectType, Method method, ConfigRegistry config)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/internal/UseClasspathSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.sqlobject.locator.internal.UseClasspathSqlLocatorImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ],
                "stringtemplate4/src/main/java/org/jdbi/v3/stringtemplate4/internal/UseStringTemplateSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.stringtemplate4.internal.UseStringTemplateSqlLocatorImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ca0bf68014866c16e37e3fe8383281d22e3f5c17",
        "previous_commit": "9960d4202ef646cccc9a1d302399b5b3378f6ccb",
        "date": 1643055852,
        "releases": {
            "previous": "ca0bf68014866c16e37e3fe8383281d22e3f5c17",
            "next": "ca0bf68014866c16e37e3fe8383281d22e3f5c17"
        },
        "commit_message": "Checkstyle formatting on imports. Create an array of sharedArgs before zipping it.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ca0bf68014866c16e37e3fe8383281d22e3f5c17": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "public Object[] org.jdbi.v3.sqlobject.statement.internal..next()",
                    "public Object invoke(Object target, Object[] args, HandleSupplier h)",
                    "private Iterator<Object[]> zipArgs(Method method, Object[] args)",
                    "private ResultIterator<?> org.jdbi.v3.sqlobject.statement.internal.BatchChunkIterator.loadChunk()"
                ]
            },
            "9960d4202ef646cccc9a1d302399b5b3378f6ccb": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "public Object[] org.jdbi.v3.sqlobject.statement.internal..next()",
                    "public Object invoke(Object target, Object[] args, HandleSupplier h)",
                    "private Iterator<Object[]> zipArgs(Method method, Object[] args)",
                    "private ResultIterator<?> org.jdbi.v3.sqlobject.statement.internal.BatchChunkIterator.loadChunk()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3b8c2705e408cc49edf7d1c31c771a4283202bda",
        "previous_commit": "bdcfdbb3a37b32cbadd456f6b669fa91dcb7e550",
        "date": 1565213573,
        "releases": {
            "previous": "3b8c2705e408cc49edf7d1c31c771a4283202bda",
            "next": "3b8c2705e408cc49edf7d1c31c771a4283202bda"
        },
        "commit_message": "fix variables\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3b8c2705e408cc49edf7d1c31c771a4283202bda": {
                "core/src/main/java/org/jdbi/v3/core/LazyHandleSupplier.java": [
                    "private void org.jdbi.v3.core.LazyHandleSupplier.initHandle()"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Binding.java": [
                    "public String org.jdbi.v3.core.statement.Binding.toString()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/StatementContext.java": [
                    "public void org.jdbi.v3.core.statement.StatementContext.close()"
                ]
            },
            "bdcfdbb3a37b32cbadd456f6b669fa91dcb7e550": {
                "core/src/main/java/org/jdbi/v3/core/LazyHandleSupplier.java": [
                    "private void org.jdbi.v3.core.LazyHandleSupplier.initHandle()"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Binding.java": [
                    "public String org.jdbi.v3.core.statement.Binding.toString()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/StatementContext.java": [
                    "public void org.jdbi.v3.core.statement.StatementContext.close()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "390b18cf63ec71c3821578d7554c65d4c46b5793",
        "previous_commit": "a8a6b98320be8a2ff65bdbdafe64293ec643dd4f",
        "date": 1569734877,
        "releases": {
            "previous": "390b18cf63ec71c3821578d7554c65d4c46b5793",
            "next": "390b18cf63ec71c3821578d7554c65d4c46b5793"
        },
        "commit_message": "Pre-register prepared argument factories\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "390b18cf63ec71c3821578d7554c65d4c46b5793": {
                "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java": [
                    "public Arguments org.jdbi.v3.core.argument.Arguments.register(QualifiedArgumentFactory factory)",
                    "public Optional<Argument> org.jdbi.v3.core.argument.Arguments.findFor(QualifiedType<?> type, Object value)",
                    "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.Arguments.prepareFor(QualifiedType<?> type)",
                    "public Arguments org.jdbi.v3.core.argument.Arguments.register(ArgumentFactory factory)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/QualifiedArgumentFactory.java": []
            },
            "a8a6b98320be8a2ff65bdbdafe64293ec643dd4f": {
                "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java": [
                    "public Arguments org.jdbi.v3.core.argument.Arguments.register(QualifiedArgumentFactory factory)",
                    "public Optional<Argument> org.jdbi.v3.core.argument.Arguments.findFor(QualifiedType<?> type, Object value)",
                    "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.Arguments.prepareFor(QualifiedType<?> type)",
                    "public Arguments org.jdbi.v3.core.argument.Arguments.register(ArgumentFactory factory)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/QualifiedArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument..build(QualifiedType<?> type, Object value, ConfigRegistry config)",
                    "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument..prepare(QualifiedType<?> type, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d27dcc7f2ff392c960237fb35ede34499c3e51ca",
        "previous_commit": "b02f31c288a366ab9c3d2cbd589ee4ae314d590a",
        "date": 1705534370,
        "releases": {
            "previous": "d27dcc7f2ff392c960237fb35ede34499c3e51ca",
            "next": "d27dcc7f2ff392c960237fb35ede34499c3e51ca"
        },
        "commit_message": "Ensure that failure while calling commit does not call commit anyway\n\nWhen the commit() operation fails, explicitly call rollback.\n\nFixes #2595\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d27dcc7f2ff392c960237fb35ede34499c3e51ca": {
                "core/src/main/java/org/jdbi/v3/core/transaction/LocalTransactionHandler.java": [
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.commit(Handle handle)",
                    "public <R, X extends Exception> R org.jdbi.v3.core.transaction.LocalTransactionHandler.inTransaction(Handle handle, HandleCallback<R, X> callback)",
                    "private void org.jdbi.v3.core.transaction.LocalTransactionHandler.restoreAutoCommitState(Handle handle)"
                ]
            },
            "b02f31c288a366ab9c3d2cbd589ee4ae314d590a": {
                "core/src/main/java/org/jdbi/v3/core/transaction/LocalTransactionHandler.java": [
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.commit(Handle handle)",
                    "public <R, X extends Exception> R org.jdbi.v3.core.transaction.LocalTransactionHandler.inTransaction(Handle handle, HandleCallback<R, X> callback)",
                    "private void org.jdbi.v3.core.transaction.LocalTransactionHandler.restoreAutoCommitState(Handle handle)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fbf2a34799632d10d205ba5783d0d6ce50e4a013",
        "previous_commit": "4e7db1a29ddc0d8f14a89a470c24f8b78ef33a71",
        "date": 1704258869,
        "releases": {
            "previous": "fbf2a34799632d10d205ba5783d0d6ce50e4a013",
            "next": "fbf2a34799632d10d205ba5783d0d6ce50e4a013"
        },
        "commit_message": "Code review feedback\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fbf2a34799632d10d205ba5783d0d6ce50e4a013": {
                "core/src/main/java/org/jdbi/v3/core/result/internal/ResultSetResultIterator.java": [
                    "public T org.jdbi.v3.core.result.internal.ResultSetResultIterator<T>.next()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/OutParameters.java": [
                    "Object org.jdbi.v3.core.statement.OutParameters.getValue(int index)",
                    "Object org.jdbi.v3.core.statement.OutParameters.getValue(String name)"
                ]
            },
            "4e7db1a29ddc0d8f14a89a470c24f8b78ef33a71": {
                "core/src/main/java/org/jdbi/v3/core/result/internal/ResultSetResultIterator.java": [
                    "public T org.jdbi.v3.core.result.internal.ResultSetResultIterator<T>.next()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/OutParameters.java": [
                    "Object org.jdbi.v3.core.statement.OutParameters.getValue(int index)",
                    "Object org.jdbi.v3.core.statement.OutParameters.getValue(String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8dc19062a993729c19426ef5210597261a0eb4d7",
        "previous_commit": "db75869225ef066d8f0061826614e0f413fb81df",
        "date": 1563992553,
        "releases": {
            "previous": "8dc19062a993729c19426ef5210597261a0eb4d7",
            "next": "8dc19062a993729c19426ef5210597261a0eb4d7"
        },
        "commit_message": "PropagateNull: allow class-level annotation for unrelated column\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8dc19062a993729c19426ef5210597261a0eb4d7": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            },
            "db75869225ef066d8f0061826614e0f413fb81df": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e24d27ffcbc8624f2139226e9fd757bfa6e6191f",
        "previous_commit": "0b5ec3e9f89d0c737c1a5478ebe5931b1b69dcb2",
        "date": 1669323714,
        "releases": {
            "previous": "e24d27ffcbc8624f2139226e9fd757bfa6e6191f",
            "next": "e24d27ffcbc8624f2139226e9fd757bfa6e6191f"
        },
        "commit_message": "FieldMapper: make constructor accessible, make accessibility strategy configurable (#2193)\n\nFieldMapper accessibility improvements\r\n\r\n- allow FieldMappers to set accessibility of c'tors as well\r\n- add strategy configuration to manage accessibility\r\n- add tests\r\n\r\nCo-authored-by: Daniel Pierce <dpierce@phdata.io>\r\nCo-authored-by: Henning P. Schmiedehausen <henning@schmiedehausen.org>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e24d27ffcbc8624f2139226e9fd757bfa6e6191f": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private void org.jdbi.v3.core.mapper.reflect.BoundFieldMapper.writeField(T obj, Field field, Object value)",
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.createSpecializedRowMapper(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
                    "private T org.jdbi.v3.core.mapper.reflect.BoundFieldMapper.construct()"
                ]
            },
            "0b5ec3e9f89d0c737c1a5478ebe5931b1b69dcb2": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private void org.jdbi.v3.core.mapper.reflect.BoundFieldMapper.writeField(T obj, Field field, Object value)",
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.createSpecializedRowMapper(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)",
                    "private T org.jdbi.v3.core.mapper.reflect.BoundFieldMapper.construct()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3e802fe235a322339c6ad64a987bc818dc916aa3",
        "previous_commit": "2f734d4c7b167b4429d88b0677a4a412e625b345",
        "date": 1688147479,
        "releases": {
            "previous": "3e802fe235a322339c6ad64a987bc818dc916aa3",
            "next": "3e802fe235a322339c6ad64a987bc818dc916aa3"
        },
        "commit_message": "Simplify the default method logic\n\nInterfaces can not override any method from Object and the extension\nmetadata is only created for interfaces. So there is no need to do any\nchecking.\n\nRip out all of the check logic, add constant methods (except for\ntoString).\n\nCache the finalizer if present in extension metadata.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3e802fe235a322339c6ad64a987bc818dc916aa3": {
                "core/src/main/java/org/jdbi/v3/core/extension/ExtensionFactoryDelegate.java": [
                    "public <E> E org.jdbi.v3.core.extension.ExtensionFactoryDelegate.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/ExtensionMetadata.java": [
                    "public ExtensionMetadata build()"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "private Object org.jdbi.v3.core.internal.OnDemandExtensions.createProxy(Jdbi jdbi, Class<?> extensionType, Class<?>... extraTypes)"
                ]
            },
            "2f734d4c7b167b4429d88b0677a4a412e625b345": {
                "core/src/main/java/org/jdbi/v3/core/extension/ExtensionFactoryDelegate.java": [
                    "public <E> E org.jdbi.v3.core.extension.ExtensionFactoryDelegate.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "core/src/main/java/org/jdbi/v3/core/extension/ExtensionMetadata.java": [
                    "public ExtensionMetadata build()"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "private Object org.jdbi.v3.core.internal.OnDemandExtensions.createProxy(Jdbi jdbi, Class<?> extensionType, Class<?>... extraTypes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "12f32ef772ebd1201b264a9be7cb66ccf25d8c01",
        "previous_commit": "da7e51f7bd51b2638e4e439e1016db236f9bc349",
        "date": 1686706094,
        "releases": {
            "previous": "12f32ef772ebd1201b264a9be7cb66ccf25d8c01",
            "next": "12f32ef772ebd1201b264a9be7cb66ccf25d8c01"
        },
        "commit_message": "Implement @RegisterCollector with tests and short doc (#2377)\n\nimpl annotation based collector registry\r\n\r\n---------\r\n\r\nCo-authored-by: TheRealRyGuy <git@ryguy.me>",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "12f32ef772ebd1201b264a9be7cb66ccf25d8c01": {
                "core/src/main/java/org/jdbi/v3/core/collector/SimpleCollectorFactory.java": [
                    "public Optional<Type> org.jdbi.v3.core.collector.SimpleCollectorFactory.elementType(Type containerType)",
                    "public boolean org.jdbi.v3.core.collector.SimpleCollectorFactory.accepts(Type containerType)",
                    "public String org.jdbi.v3.core.collector.SimpleCollectorFactory.toString()"
                ]
            },
            "da7e51f7bd51b2638e4e439e1016db236f9bc349": {
                "core/src/main/java/org/jdbi/v3/core/collector/SimpleCollectorFactory.java": [
                    "public Optional<Type> org.jdbi.v3.core.collector.SimpleCollectorFactory.elementType(Type containerType)",
                    "public boolean org.jdbi.v3.core.collector.SimpleCollectorFactory.accepts(Type containerType)",
                    "public String org.jdbi.v3.core.collector.SimpleCollectorFactory.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e7a819593ff7bdcf71aa8ff8fe2a8ac7f95972c0",
        "previous_commit": "3171d4e11f228fa5620e55e5fe6e5f50a3e06027",
        "date": 1602807574,
        "releases": {
            "previous": "e7a819593ff7bdcf71aa8ff8fe2a8ac7f95972c0",
            "next": "e7a819593ff7bdcf71aa8ff8fe2a8ac7f95972c0"
        },
        "commit_message": "@BindPojo: support binding Pojo<T> properties of type T\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e7a819593ff7bdcf71aa8ff8fe2a8ac7f95972c0": {
                "core/src/main/java/org/jdbi/v3/core/argument/internal/ObjectPropertyNamedArgumentFinder.java": [
                    "private NamedArgumentFinder org.jdbi.v3.core.argument.internal.ObjectPropertyNamedArgumentFinder.getValueNested(TypedValue typedValue, String parentName, String childName)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "PreparedBatch org.jdbi.v3.core.statement.PreparedBatch.bindNamedArgumentFinder(NamedArgumentFinderFactory<?> factory, String prefix, Object value, Type type, Supplier<NamedArgumentFinder> backupArgumentFinder)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindPojoFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindPojoFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ]
            },
            "3171d4e11f228fa5620e55e5fe6e5f50a3e06027": {
                "core/src/main/java/org/jdbi/v3/core/argument/internal/ObjectPropertyNamedArgumentFinder.java": [
                    "private NamedArgumentFinder org.jdbi.v3.core.argument.internal.ObjectPropertyNamedArgumentFinder.getValueNested(TypedValue typedValue, String parentName, String childName)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "PreparedBatch org.jdbi.v3.core.statement.PreparedBatch.bindNamedArgumentFinder(NamedArgumentFinderFactory<?> factory, String prefix, Object value, Supplier<NamedArgumentFinder> backupArgumentFinder)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindPojoFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindPojoFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5e6eaf628ac16cf7c725d5bf871dd5cbfd1f7ef5",
        "previous_commit": "6cb9ff7b1ca7998d5fa77e1d7d0058d6eea9b4aa",
        "date": 1567318276,
        "releases": {
            "previous": "5e6eaf628ac16cf7c725d5bf871dd5cbfd1f7ef5",
            "next": "5e6eaf628ac16cf7c725d5bf871dd5cbfd1f7ef5"
        },
        "commit_message": "Code review\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5e6eaf628ac16cf7c725d5bf871dd5cbfd1f7ef5": {
                "core/src/main/java/org/jdbi/v3/core/LazyHandleSupplier.java": [
                    "private void org.jdbi.v3.core.LazyHandleSupplier.initHandle()"
                ],
                "core/src/main/java/org/jdbi/v3/core/array/InferredSqlArrayTypeFactory.java": [
                    "public Optional<SqlArrayType<?>> org.jdbi.v3.core.array.InferredSqlArrayTypeFactory.build(Type elementType, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public OutParameters org.jdbi.v3.core.statement.Call.invoke()"
                ]
            },
            "6cb9ff7b1ca7998d5fa77e1d7d0058d6eea9b4aa": {
                "core/src/main/java/org/jdbi/v3/core/LazyHandleSupplier.java": [
                    "private void org.jdbi.v3.core.LazyHandleSupplier.initHandle()"
                ],
                "core/src/main/java/org/jdbi/v3/core/array/InferredSqlArrayTypeFactory.java": [
                    "public Optional<SqlArrayType<?>> org.jdbi.v3.core.array.InferredSqlArrayTypeFactory.build(Type elementType, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public OutParameters org.jdbi.v3.core.statement.Call.invoke()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4f6d0373abb68b1398ae84257955dda5c54fc94f",
        "previous_commit": "6ad098ae3fb4ce283cbfa59d39027edefb9f81e4",
        "date": 1565891599,
        "releases": {
            "previous": "4f6d0373abb68b1398ae84257955dda5c54fc94f",
            "next": "4f6d0373abb68b1398ae84257955dda5c54fc94f"
        },
        "commit_message": "bikeshedding\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4f6d0373abb68b1398ae84257955dda5c54fc94f": {
                "core/src/main/java/org/jdbi/v3/core/ConstantHandleSupplier.java": [
                    "public <V> V org.jdbi.v3.core.ConstantHandleSupplier.invokeInContext(ExtensionMethod extensionMethod, ConfigRegistry config, Callable<V> task)"
                ],
                "core/src/main/java/org/jdbi/v3/core/LazyHandleSupplier.java": [
                    "public <V> V org.jdbi.v3.core.LazyHandleSupplier.invokeInContext(ExtensionMethod extensionMethod, ConfigRegistry config, Callable<V> task)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/WithHandleMethodHandlerFactory.java": [
                    "public Optional<Handler> org.jdbi.v3.sqlobject.WithHandleMethodHandlerFactory.buildHandler(Class<?> sqlObjectType, Method method)"
                ]
            },
            "6ad098ae3fb4ce283cbfa59d39027edefb9f81e4": {
                "core/src/main/java/org/jdbi/v3/core/ConstantHandleSupplier.java": [
                    "public <V> V org.jdbi.v3.core.ConstantHandleSupplier.invokeInContext(ExtensionMethod extensionMethod, ConfigRegistry config, Callable<V> task)"
                ],
                "core/src/main/java/org/jdbi/v3/core/LazyHandleSupplier.java": [
                    "public <V> V org.jdbi.v3.core.LazyHandleSupplier.invokeInContext(ExtensionMethod extensionMethod, ConfigRegistry config, Callable<V> task)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/WithHandleMethodHandlerFactory.java": [
                    "public Optional<Handler> org.jdbi.v3.sqlobject.WithHandleMethodHandlerFactory.buildHandler(Class<?> sqlObjectType, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ad50180e635eaac36ec67f4b24553fa09d38130a",
        "previous_commit": "ad52d5549b1c7e8dd83fd0e9b0c10c4454ef1e62",
        "date": 1677297911,
        "releases": {
            "previous": "ad50180e635eaac36ec67f4b24553fa09d38130a",
            "next": "ad50180e635eaac36ec67f4b24553fa09d38130a"
        },
        "commit_message": "Remove visible supplier for InContextInvoker\n\nMove the memoizing supplier inside the InContextInvoker, allowing\ncallers to just hold an instance that wraps a supplier, not a supplier\nthat creates an instance. As all parameters for the supplier are locked\ndown at creation time anyway, this makes no difference but replaces\nvarious Supplier<InContextInvoker> fields that need get() methods with\nsimpler code.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ad50180e635eaac36ec67f4b24553fa09d38130a": {
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "private void org.jdbi.v3.generator.GenerateSqlObjectProcessor.addImplementationMethod(ExecutableElement method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "public Object org.jdbi.v3.sqlobject.internal.InContextInvoker.invoke(Object... args)"
                ]
            },
            "ad52d5549b1c7e8dd83fd0e9b0c10c4454ef1e62": {
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "private void org.jdbi.v3.generator.GenerateSqlObjectProcessor.addImplementationMethod(ExecutableElement method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "public Object org.jdbi.v3.sqlobject.internal.InContextInvoker.invoke(Object... args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5cf399f31fd7f3283f08542493251208d09e6251",
        "previous_commit": "5a7120a7614cf28d6370ba2ae2a7104ceebaf4c1",
        "date": 1682396094,
        "releases": {
            "previous": "5cf399f31fd7f3283f08542493251208d09e6251",
            "next": "5cf399f31fd7f3283f08542493251208d09e6251"
        },
        "commit_message": "Support Consumer<Iterable<T>> as well\n\nWe support Consumer<Stream<T>> and Consumer<Iterator<T>> already.\n\nThis is a \"one-shot\" iterable, so the iterator can be consumed only\nonce. There is precedent in the JDK (DirectoryStream) that this is\nacceptable if documented.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5cf399f31fd7f3283f08542493251208d09e6251": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java": [
                    "protected Void org.jdbi.v3.sqlobject.statement.internal.ResultReturner.reducedResult(Stream<?> stream, StatementContext ctx)",
                    "static ConsumerResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.of(Method method, int consumerIndex)",
                    "protected Void org.jdbi.v3.sqlobject.statement.internal.ResultReturner.mappedResult(ResultIterable<?> iterable, StatementContext ctx)"
                ]
            },
            "5a7120a7614cf28d6370ba2ae2a7104ceebaf4c1": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java": [
                    "protected Void org.jdbi.v3.sqlobject.statement.internal.ResultReturner.reducedResult(Stream<?> stream, StatementContext ctx)",
                    "static ConsumerResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.of(Method method, int consumerIndex)",
                    "protected Void org.jdbi.v3.sqlobject.statement.internal.ResultReturner.mappedResult(ResultIterable<?> iterable, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8debeafc0bb1275f5bb989d311b4cc88bdcd88bc",
        "previous_commit": "17d4da9a7227a1604ce569e8180691282867c3c1",
        "date": 1700796474,
        "releases": {
            "previous": "8debeafc0bb1275f5bb989d311b4cc88bdcd88bc",
            "next": "8debeafc0bb1275f5bb989d311b4cc88bdcd88bc"
        },
        "commit_message": "Fix script parsing for END with semicolon\n\nScript parsing raises its ugly head again. Again. Allow for `END;`\nas it is used within MySQL scripts.\n\nFixes #2535\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8debeafc0bb1275f5bb989d311b4cc88bdcd88bc": {
                "core/src/main/java/org/jdbi/v3/core/internal/SqlScriptParser.java": [
                    "public void org.jdbi.v3.core.internal.SqlScriptParser.handle(Token t, StringBuilder sb)",
                    "public String org.jdbi.v3.core.internal.SqlScriptParser.parse(CharStream charStream)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Script.java": [
                    "private List<String> org.jdbi.v3.core.statement.Script.splitToStatements(String script)"
                ]
            },
            "17d4da9a7227a1604ce569e8180691282867c3c1": {
                "core/src/main/java/org/jdbi/v3/core/internal/SqlScriptParser.java": [
                    "public String org.jdbi.v3.core.internal.SqlScriptParser.parse(CharStream charStream)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Script.java": [
                    "private List<String> org.jdbi.v3.core.statement.Script.splitToStatements(String script)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a70b453c219e44548be867bd9844afa7efacf6b7",
        "previous_commit": "c12e440f8bce7808fa955dbab72fa24f87c4a9e5",
        "date": 1675404761,
        "releases": {
            "previous": "a70b453c219e44548be867bd9844afa7efacf6b7",
            "next": "a70b453c219e44548be867bd9844afa7efacf6b7"
        },
        "commit_message": "Clean up extension context and invoker\n\n- Simplify code, make more readable.\n\n- Remove anonymous implementation of InContextInvoker, use a concrete class.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a70b453c219e44548be867bd9844afa7efacf6b7": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/WithHandleMethodHandlerFactory.java": [
                    "public Optional<Handler> org.jdbi.v3.sqlobject.WithHandleMethodHandlerFactory.buildHandler(Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "public Object org.jdbi.v3.sqlobject.internal.SqlObjectInitData.invoke(Object[] args)",
                    "public Supplier<InContextInvoker> org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lazyInvoker(Object target, Method method, HandleSupplier handleSupplier, ConfigRegistry instanceConfig)"
                ]
            },
            "c12e440f8bce7808fa955dbab72fa24f87c4a9e5": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/WithHandleMethodHandlerFactory.java": [
                    "public Optional<Handler> org.jdbi.v3.sqlobject.WithHandleMethodHandlerFactory.buildHandler(Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "public Object org.jdbi.v3.sqlobject.internal.SqlObjectInitData.invoke(Object[] args)",
                    "public Supplier<InContextInvoker> org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lazyInvoker(Object target, Method method, HandleSupplier handleSupplier, ConfigRegistry instanceConfig)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d5baaec29f4c11bacc7e68581b4642848b886640",
        "previous_commit": "4477ee05a3f3444c1c4d075dbfe7d79fff352f32",
        "date": 1635793420,
        "releases": {
            "previous": "d5baaec29f4c11bacc7e68581b4642848b886640",
            "next": "d5baaec29f4c11bacc7e68581b4642848b886640"
        },
        "commit_message": "Add inference interception code.\n\nAdd interceptor chains for the data types that support inference (row\nmappers, column mappers, sql array types). Use the standard behavior\nas default.\n\nThis allows other modules (or user code) to register interceptors with\nthe different config objects to change the way Jdbi uses inference to\ndetermine factories.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d5baaec29f4c11bacc7e68581b4642848b886640": {
                "core/src/main/java/org/jdbi/v3/core/array/SqlArrayTypes.java": [
                    "public SqlArrayTypes org.jdbi.v3.core.array.SqlArrayTypes.register(SqlArrayType<?> arrayType)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/ColumnMappers.java": [
                    "public ColumnMappers org.jdbi.v3.core.mapper.ColumnMappers.register(ColumnMapper<?> mapper)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/RowMappers.java": [
                    "public RowMappers org.jdbi.v3.core.mapper.RowMappers.register(RowMapper<?> mapper)"
                ]
            },
            "4477ee05a3f3444c1c4d075dbfe7d79fff352f32": {
                "core/src/main/java/org/jdbi/v3/core/array/SqlArrayTypes.java": [
                    "public SqlArrayTypes org.jdbi.v3.core.array.SqlArrayTypes.register(SqlArrayType<?> arrayType)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/ColumnMappers.java": [
                    "public ColumnMappers org.jdbi.v3.core.mapper.ColumnMappers.register(ColumnMapper<?> mapper)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/RowMappers.java": [
                    "public RowMappers org.jdbi.v3.core.mapper.RowMappers.register(RowMapper<?> mapper)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1952c9bbf6f0e3a077319c5f348147d8f74fe0ca",
        "previous_commit": "3e87d847592475d2b13e3d01a14c22e773077deb",
        "date": 1674666010,
        "releases": {
            "previous": "1952c9bbf6f0e3a077319c5f348147d8f74fe0ca",
            "next": "1952c9bbf6f0e3a077319c5f348147d8f74fe0ca"
        },
        "commit_message": "Code readability changes\n\nReplace a number of single-letter variables with more speaking names.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1952c9bbf6f0e3a077319c5f348147d8f74fe0ca": {
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "public <E> E org.jdbi.v3.core.internal.OnDemandExtensions.create(Jdbi db, Class<E> extensionType, Class<?>... extraTypes)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectPlugin.java": [
                    "public void org.jdbi.v3.sqlobject.SqlObjectPlugin.customizeJdbi(Jdbi db)"
                ]
            },
            "3e87d847592475d2b13e3d01a14c22e773077deb": {
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "public <E> E org.jdbi.v3.core.internal.OnDemandExtensions.create(Jdbi db, Class<E> extensionType, Class<?>... extraTypes)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectPlugin.java": [
                    "public void org.jdbi.v3.sqlobject.SqlObjectPlugin.customizeJdbi(Jdbi db)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e344a717c7c09fba3f3b59b81d31c4b2c98e9d01",
        "previous_commit": "30bd11b4525536c835c6e80eeb501bec510c0179",
        "date": 1563992553,
        "releases": {
            "previous": "e344a717c7c09fba3f3b59b81d31c4b2c98e9d01",
            "next": "e344a717c7c09fba3f3b59b81d31c4b2c98e9d01"
        },
        "commit_message": "PropagateNull annotation for BeanMapper, ConstructorMapper, and FieldMapper\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e344a717c7c09fba3f3b59b81d31c4b2c98e9d01": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            },
            "30bd11b4525536c835c6e80eeb501bec510c0179": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0634052524cf5b229be3852fd90eaf141925f082",
        "previous_commit": "3abb4aeabbbd38193f203e4d813a95bb2243de65",
        "date": 1554398426,
        "releases": {
            "previous": "0634052524cf5b229be3852fd90eaf141925f082",
            "next": "0634052524cf5b229be3852fd90eaf141925f082"
        },
        "commit_message": "add `@Unmappable` to disable property mapping of read-only properties like `@Value.Derived`\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0634052524cf5b229be3852fd90eaf141925f082": {
                "core/src/main/java/org/jdbi/v3/core/internal/AnnotationFactory.java": [
                    "public static <T extends Annotation> T org.jdbi.v3.core.internal.AnnotationFactory.create(Class<T> annotationType)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/ImmutablesPropertiesFactory.java": [
                    "private MethodHandle org.jdbi.v3.core.mapper.reflect.internal.ImmutablesPropertiesFactory.findBuilderSetter(final Class<?> builderClass, String name, Type type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            },
            "3abb4aeabbbd38193f203e4d813a95bb2243de65": {
                "core/src/main/java/org/jdbi/v3/core/internal/AnnotationFactory.java": [
                    "public static <T extends Annotation> T org.jdbi.v3.core.internal.AnnotationFactory.create(Class<T> annotationType)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/ImmutablesPropertiesFactory.java": [
                    "private MethodHandle org.jdbi.v3.core.mapper.reflect.internal.ImmutablesPropertiesFactory.findBuilderSetter(final Class<?> builderClass, String name, Type type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2e32aca8e753b81d7a315c91c85cd327686f9e5f",
        "previous_commit": "e24d27ffcbc8624f2139226e9fd757bfa6e6191f",
        "date": 1669328746,
        "releases": {
            "previous": "2e32aca8e753b81d7a315c91c85cd327686f9e5f",
            "next": "2e32aca8e753b81d7a315c91c85cd327686f9e5f"
        },
        "commit_message": "Enforce exact signatures for consumer arguments\n\nOnly allow exact Consumer<Stream<T>> and Consumer<Iterator<T>> argument types,\nadd reasonable error messages.\n\nAdd a minor correctness change for the consumers (close the stream right after stream/iterator callback ends).\n\nAdd a bunch of tests\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2e32aca8e753b81d7a315c91c85cd327686f9e5f": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java": [
                    "static ConsumerResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.of(Method method, int consumerIndex)",
                    "static ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(Class<?> extensionType, Method method)",
                    "private static Object org.jdbi.v3.sqlobject.statement.internal.ResultReturner.checkResult(Object result, QualifiedType<?> type)"
                ]
            },
            "e24d27ffcbc8624f2139226e9fd757bfa6e6191f": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java": [
                    "static ConsumerResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.of(Method method, int consumerIndex)",
                    "static ResultReturner org.jdbi.v3.sqlobject.statement.internal.ResultReturner.forMethod(Class<?> extensionType, Method method)",
                    "private static Object org.jdbi.v3.sqlobject.statement.internal.ResultReturner.checkResult(Object result, QualifiedType<?> type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f6ecd6bba12b50c8172d48e888fb8559e3489098",
        "previous_commit": "b9dd1f3e9929f8c8177649a7b3bd5db3054134dd",
        "date": 1548300670,
        "releases": {
            "previous": "f6ecd6bba12b50c8172d48e888fb8559e3489098",
            "next": "f6ecd6bba12b50c8172d48e888fb8559e3489098"
        },
        "commit_message": "Refactoring\n\n- Rename QualifiedEnumArgumentFactory to EnumArgumentFactory\n- Made EnumStrategy top level class\n- Moved EnumByName, EnumByOrdinal, Enums, and EnumStrategy to\n  org.jdbi.v3.core.enums\n- Removed Enums.defaultByName() and .defaultByOrdinal() in favor of\n  .setDefaultStrategy(EnumStrategy)\n- Moved Enums.findStrategy() to separate config class in an internal\n  package.\n- Rename QualifiedEnumMapperFactory to EnumMapperFactory, move it to\n  org.jdbi.v3.core.mapper, and make it package private\n- Un-deprecate EnumMapper, and move byName() and byOrdinal()\n  static factory methods back from EnumMapperFactory to EnumMapper.\n- Add API alternative messages to EnumByOrdinalMapperFactory\n  and EnumByNameMapperFactory\n- Use an expiring cache for EnumMapper.byName()\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f6ecd6bba12b50c8172d48e888fb8559e3489098": {
                "core/src/main/java/org/jdbi/v3/core/argument/BuiltInArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.BuiltInArgumentFactory.build(Type expectedType, Object rawValue, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/EnumByNameMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.EnumByNameMapperFactory.build(Type type, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/EnumByOrdinalMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.EnumByOrdinalMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            },
            "b9dd1f3e9929f8c8177649a7b3bd5db3054134dd": {
                "core/src/main/java/org/jdbi/v3/core/argument/BuiltInArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.BuiltInArgumentFactory.build(Type expectedType, Object rawValue, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/EnumByNameMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.EnumByNameMapperFactory.build(Type type, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/EnumByOrdinalMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.EnumByOrdinalMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "73e848b941e198e6a195230343d2aa20404f1b14",
        "previous_commit": "036e41878e9edde3345af5237dd4820aa5efa722",
        "date": 1552954785,
        "releases": {
            "previous": "73e848b941e198e6a195230343d2aa20404f1b14",
            "next": "73e848b941e198e6a195230343d2aa20404f1b14"
        },
        "commit_message": "Json support: map sql 'null' to and from json 'null'\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "73e848b941e198e6a195230343d2aa20404f1b14": {
                "core/src/main/java/org/jdbi/v3/core/mapper/OptionalMapperFactory.java": [
                    "private static <Opt, Box> ColumnMapper<?> org.jdbi.v3.core.mapper.OptionalMapperFactory.optionalMapper(ColumnGetter<Box> columnGetter, Supplier<Opt> empty, Function<Box, Opt> present)"
                ],
                "json/src/main/java/org/jdbi/v3/json/internal/JsonArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.json.internal.JsonArgumentFactory.build(Type type, Object value, ConfigRegistry config)"
                ],
                "json/src/main/java/org/jdbi/v3/json/internal/JsonColumnMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.json.internal.JsonColumnMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            },
            "036e41878e9edde3345af5237dd4820aa5efa722": {
                "core/src/main/java/org/jdbi/v3/core/mapper/OptionalMapperFactory.java": [
                    "private static <Opt, Box> ColumnMapper<?> org.jdbi.v3.core.mapper.OptionalMapperFactory.optionalMapper(ColumnGetter<Box> columnGetter, Supplier<Opt> empty, Function<Box, Opt> present)"
                ],
                "json/src/main/java/org/jdbi/v3/json/internal/JsonArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.json.internal.JsonArgumentFactory.build(Type type, Object value, ConfigRegistry config)"
                ],
                "json/src/main/java/org/jdbi/v3/json/internal/JsonColumnMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.json.internal.JsonColumnMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "911beea21bbf94d7929f28cfe468a7aa534bd940",
        "previous_commit": "157c83b86b209b3e549e6f8caa5618b6008ce3e4",
        "date": 1591895850,
        "releases": {
            "previous": "911beea21bbf94d7929f28cfe468a7aa534bd940",
            "next": "911beea21bbf94d7929f28cfe468a7aa534bd940"
        },
        "commit_message": "fixup deviations from copy-constructor config pattern",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "911beea21bbf94d7929f28cfe468a7aa534bd940": {
                "core/src/main/java/org/jdbi/v3/core/qualifier/Qualifiers.java": [
                    "public Qualifiers org.jdbi.v3.core.qualifier.Qualifiers.createCopy()"
                ],
                "core/src/main/java/org/jdbi/v3/core/result/ResultProducers.java": [
                    "public ResultProducers org.jdbi.v3.core.result.ResultProducers.createCopy()"
                ],
                "core/src/main/java/org/jdbi/v3/core/transaction/SerializableTransactionRunner.java": [
                    "public Configuration org.jdbi.v3.core.transaction.SerializableTransactionRunner.createCopy()"
                ]
            },
            "157c83b86b209b3e549e6f8caa5618b6008ce3e4": {
                "core/src/main/java/org/jdbi/v3/core/qualifier/Qualifiers.java": [
                    "public Qualifiers org.jdbi.v3.core.qualifier.Qualifiers.createCopy()"
                ],
                "core/src/main/java/org/jdbi/v3/core/result/ResultProducers.java": [
                    "public ResultProducers org.jdbi.v3.core.result.ResultProducers.createCopy()"
                ],
                "core/src/main/java/org/jdbi/v3/core/transaction/SerializableTransactionRunner.java": [
                    "public Configuration org.jdbi.v3.core.transaction.SerializableTransactionRunner.createCopy()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "538cc46baba7f964d0741b46ae27179085bf4457",
        "previous_commit": "f493bb46fa1ed075e977fbc60ffe966f0a068e10",
        "date": 1668666078,
        "releases": {
            "previous": "538cc46baba7f964d0741b46ae27179085bf4457",
            "next": "538cc46baba7f964d0741b46ae27179085bf4457"
        },
        "commit_message": "Make proxy code more readable\n\n- add useful toString() method output to the proxies\n- rework the methodhandler code for the sqlobject proxy\n- some minor readability changes (variable names etc.)\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "538cc46baba7f964d0741b46ae27179085bf4457": {
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "private Object org.jdbi.v3.core.internal.OnDemandExtensions.createProxy(Jdbi db, Class<?> extensionType, Class<?>... extraTypes)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)",
                    "private static Map<Method, Handler> org.jdbi.v3.sqlobject.SqlObjectFactory.buildMethodHandlers( Class<?> sqlObjectType, Handlers registry, HandlerDecorators decorators)"
                ]
            },
            "f493bb46fa1ed075e977fbc60ffe966f0a068e10": {
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "private Object org.jdbi.v3.core.internal.OnDemandExtensions.createProxy(Jdbi db, Class<?> extensionType, Class<?>... extraTypes)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)",
                    "private static Map<Method, Handler> org.jdbi.v3.sqlobject.SqlObjectFactory.buildMethodHandlers( Class<?> sqlObjectType, Handlers registry, HandlerDecorators decorators)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e4fce760983a508ca1797c390972f5a1ce661e20",
        "previous_commit": "8dc19062a993729c19426ef5210597261a0eb4d7",
        "date": 1563992553,
        "releases": {
            "previous": "e4fce760983a508ca1797c390972f5a1ce661e20",
            "next": "e4fce760983a508ca1797c390972f5a1ce661e20"
        },
        "commit_message": "handle PropagateNull properties first, clean up zipped arrays into a little struct\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e4fce760983a508ca1797c390972f5a1ce661e20": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            },
            "8dc19062a993729c19426ef5210597261a0eb4d7": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c886fc2c4910bc822fa696e802aabc4373c5d306",
        "previous_commit": "d5de5b062b2cc6100eb08e34f22ddfd697fd285c",
        "date": 1689407083,
        "releases": {
            "previous": "c886fc2c4910bc822fa696e802aabc4373c5d306",
            "next": "c886fc2c4910bc822fa696e802aabc4373c5d306"
        },
        "commit_message": "JdbiClassUtils: add a MethodHandle based findConstructor\n\nFixes #2427\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c886fc2c4910bc822fa696e802aabc4373c5d306": {
                "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java": [
                    "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/JdbiClassUtils.java": [
                    "public static <T> T org.jdbi.v3.core.internal.JdbiClassUtils.findConstructorAndCreateInstance(Class<T> type, Class<?>[] types, Object... parameters)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "public PojoBuilder<T> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.create()"
                ]
            },
            "d5de5b062b2cc6100eb08e34f22ddfd697fd285c": {
                "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java": [
                    "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/JdbiClassUtils.java": [
                    "public static <T> T org.jdbi.v3.core.internal.JdbiClassUtils.findConstructorAndCreateInstance(Class<T> type, Class<?>[] types, Object... parameters)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "public PojoBuilder<T> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.create()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6a790dbf776e9ee119469ccb32c620338fa61bad",
        "previous_commit": "2f64af082783ea2101c86445cd06b4ac74e5acef",
        "date": 1693505441,
        "releases": {
            "previous": "6a790dbf776e9ee119469ccb32c620338fa61bad",
            "next": "6a790dbf776e9ee119469ccb32c620338fa61bad"
        },
        "commit_message": "Handle.afterCommit: if callback throws after we've already committed, don't try to rollback\n\nFixes #2478\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6a790dbf776e9ee119469ccb32c620338fa61bad": {
                "core/src/main/java/org/jdbi/v3/core/transaction/LocalTransactionHandler.java": [
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.commit(Handle handle)",
                    "public <R, X extends Exception> R org.jdbi.v3.core.transaction.LocalTransactionHandler.inTransaction(Handle handle, HandleCallback<R, X> callback)",
                    "private void org.jdbi.v3.core.transaction.LocalTransactionHandler.restoreAutoCommitState(Handle handle)"
                ]
            },
            "2f64af082783ea2101c86445cd06b4ac74e5acef": {
                "core/src/main/java/org/jdbi/v3/core/transaction/LocalTransactionHandler.java": [
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.commit(Handle handle)",
                    "public <R, X extends Exception> R org.jdbi.v3.core.transaction.LocalTransactionHandler.inTransaction(Handle handle, HandleCallback<R, X> callback)",
                    "private void org.jdbi.v3.core.transaction.LocalTransactionHandler.restoreAutoCommitState(Handle handle)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "55ae3628f95a17f4ad6443e1c46cdd1bb7efc400",
        "previous_commit": "75c9675a789d7dd5e22a0ba1be4242052056de6f",
        "date": 1574035129,
        "releases": {
            "previous": "55ae3628f95a17f4ad6443e1c46cdd1bb7efc400",
            "next": "55ae3628f95a17f4ad6443e1c46cdd1bb7efc400"
        },
        "commit_message": "code review, thanks @Alexey1Gavrilov\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "55ae3628f95a17f4ad6443e1c46cdd1bb7efc400": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "protected Function<Object, Object> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.getter()",
                    "protected BiConsumer<Object, Object> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.setter()"
                ],
                "core/src/main/java/org/jdbi/v3/core/qualifier/QualifiedType.java": [
                    "public int org.jdbi.v3.core.qualifier.QualifiedType<T>.hashCode()"
                ]
            },
            "75c9675a789d7dd5e22a0ba1be4242052056de6f": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "protected Function<Object, Object> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.getter()",
                    "protected BiConsumer<Object, Object> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.setter()"
                ],
                "core/src/main/java/org/jdbi/v3/core/qualifier/QualifiedType.java": [
                    "public int org.jdbi.v3.core.qualifier.QualifiedType<T>.hashCode()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2a913a79e9795ae88515d15722d4d76b41219017",
        "previous_commit": "ed8ef0047044e0bf65be53926ddecd8b4afff329",
        "date": 1548445621,
        "releases": {
            "previous": "2a913a79e9795ae88515d15722d4d76b41219017",
            "next": "2a913a79e9795ae88515d15722d4d76b41219017"
        },
        "commit_message": "stop using MessageFormat\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2a913a79e9795ae88515d15722d4d76b41219017": {
                "core/src/main/java/org/jdbi/v3/core/mapper/GenericMapMapperFactory.java": [
                    "private static List<String> org.jdbi.v3.core.mapper.GenericMapMapperFactory.getMapKeys(ResultSetMetaData meta, UnaryOperator<String> caseChange)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/MaxRowsFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.MaxRowsFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)",
                    "public SqlStatementCustomizer org.jdbi.v3.sqlobject.customizer.internal.MaxRowsFactory.createForMethod(Annotation annotation, Class<?> sqlObjectType, Method method)"
                ]
            },
            "ed8ef0047044e0bf65be53926ddecd8b4afff329": {
                "core/src/main/java/org/jdbi/v3/core/mapper/GenericMapMapperFactory.java": [
                    "private static List<String> org.jdbi.v3.core.mapper.GenericMapMapperFactory.getMapKeys(ResultSetMetaData meta, UnaryOperator<String> caseChange)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/MaxRowsFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.MaxRowsFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)",
                    "public SqlStatementCustomizer org.jdbi.v3.sqlobject.customizer.internal.MaxRowsFactory.createForMethod(Annotation annotation, Class<?> sqlObjectType, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0ef4bd2346f2d648def055f81dfc5a829ed64699",
        "previous_commit": "f79c83244b07f5112f1e0d429dfa938530e556f0",
        "date": 1687814559,
        "releases": {
            "previous": "0ef4bd2346f2d648def055f81dfc5a829ed64699",
            "next": "0ef4bd2346f2d648def055f81dfc5a829ed64699"
        },
        "commit_message": "Remove JDK 8 code workarounds and kludges\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0ef4bd2346f2d648def055f81dfc5a829ed64699": {
                "core/src/main/java/org/jdbi/v3/core/extension/ExtensionHandler.java": [
                    "static ExtensionHandler createForSpecialMethod(Method method)",
                    "static ExtensionHandler createForMethod(Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java": [
                    "protected Void org.jdbi.v3.sqlobject.statement.internal.ResultReturner.reducedResult(Stream<?> stream, StatementContext ctx)"
                ]
            },
            "f79c83244b07f5112f1e0d429dfa938530e556f0": {
                "core/src/main/java/org/jdbi/v3/core/extension/ExtensionHandler.java": [
                    "static ExtensionHandler createForSpecialMethod(Method method)",
                    "static ExtensionHandler createForMethod(Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java": [
                    "protected Void org.jdbi.v3.sqlobject.statement.internal.ResultReturner.reducedResult(Stream<?> stream, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6854aa2394af75b99fce23c90e71ac6446a5de9e",
        "previous_commit": "36a7882b2199e929c8eec92710ed881a23299935",
        "date": 1664859224,
        "releases": {
            "previous": "6854aa2394af75b99fce23c90e71ac6446a5de9e",
            "next": "6854aa2394af75b99fce23c90e71ac6446a5de9e"
        },
        "commit_message": "Remove handle references from the BaseStatement subclasses\n\nThose probably should not have been there in the first place.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6854aa2394af75b99fce23c90e71ac6446a5de9e": {
                "core/src/main/java/org/jdbi/v3/core/statement/MetaData.java": [
                    "public <R> R org.jdbi.v3.core.statement.MetaData.execute()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Script.java": [
                    "public void org.jdbi.v3.core.statement.Script.executeAsSeparateStatements()",
                    "public int[] org.jdbi.v3.core.statement.Script.execute()"
                ]
            },
            "36a7882b2199e929c8eec92710ed881a23299935": {
                "core/src/main/java/org/jdbi/v3/core/statement/MetaData.java": [
                    "public <R> R org.jdbi.v3.core.statement.MetaData.execute()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Script.java": [
                    "public void org.jdbi.v3.core.statement.Script.executeAsSeparateStatements()",
                    "public int[] org.jdbi.v3.core.statement.Script.execute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "84143048e2a0366b3c9ef6f2d558815b3627cc6d",
        "previous_commit": "391d7e62938d8b3f27dd0883d8956c04b8e62ae2",
        "date": 1641328815,
        "releases": {
            "previous": "84143048e2a0366b3c9ef6f2d558815b3627cc6d",
            "next": "84143048e2a0366b3c9ef6f2d558815b3627cc6d"
        },
        "commit_message": "Transaction callbacks: move from Handles to Handle, so nested transactions work correctly\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "84143048e2a0366b3c9ef6f2d558815b3627cc6d": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "Handle org.jdbi.v3.core.Handle.addTransactionCallback(TransactionCallback cb)",
                    "public Handle org.jdbi.v3.core.Handle.rollback()",
                    "public Handle org.jdbi.v3.core.Handle.commit()"
                ]
            },
            "391d7e62938d8b3f27dd0883d8956c04b8e62ae2": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "Handle org.jdbi.v3.core.Handle.addTransactionCallback(TransactionCallback cb)",
                    "public Handle org.jdbi.v3.core.Handle.rollback()",
                    "public Handle org.jdbi.v3.core.Handle.commit()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "42ce608d94c73c6c41e9f760c268fe591288ae6e",
        "previous_commit": "84582815ab23e76eed61cf6c6c6a6f0319bc0d79",
        "date": 1688250781,
        "releases": {
            "previous": "42ce608d94c73c6c41e9f760c268fe591288ae6e",
            "next": "42ce608d94c73c6c41e9f760c268fe591288ae6e"
        },
        "commit_message": "Remove JSR 305 annotations\n\nThe findbugs jsr305 annotations jar uses annotations in the\njavax.annotation namespace, which causes problems with JPMS.\n\nRemove the annotations from the code base. The Jdbi code itself\ntransitions to error prone and spotbugs.\n\nFor code that uses Jdbi (and all tests), the Jakarta annotation-api\n`jakarta.annotation.Nullable` is used as\nother candidates either do not have Runtime retention (spotbugs,\njetbrains), have problems with JPMS (jsr305), or are very\nspecialized (spring) or obscure (checker framework).\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "42ce608d94c73c6c41e9f760c268fe591288ae6e": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private static String org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.paramName(Parameter[] parameters, int position, ConstructorProperties parameterNames)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoBuilderUtils.java": [
                    "public static String org.jdbi.v3.core.mapper.reflect.internal.PojoBuilderUtils.propertyName(Method m)",
                    "public static MethodHandle org.jdbi.v3.core.mapper.reflect.internal.PojoBuilderUtils.findBuilderSetter(final Class<?> builderClass, String name, Method decl, Type type)"
                ]
            },
            "84582815ab23e76eed61cf6c6c6a6f0319bc0d79": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private static String org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.paramName(Parameter[] parameters, int position, ConstructorProperties parameterNames)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoBuilderUtils.java": [
                    "public static String org.jdbi.v3.core.mapper.reflect.internal.PojoBuilderUtils.propertyName(Method m)",
                    "public static MethodHandle org.jdbi.v3.core.mapper.reflect.internal.PojoBuilderUtils.findBuilderSetter(final Class<?> builderClass, String name, Method decl, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ea1870c7e279f91483d3edb5f26f5167dd1efdaa",
        "previous_commit": "79d769cc1f69a739d6df052a914ec25504f640f4",
        "date": 1666921183,
        "releases": {
            "previous": "ea1870c7e279f91483d3edb5f26f5167dd1efdaa",
            "next": "ea1870c7e279f91483d3edb5f26f5167dd1efdaa"
        },
        "commit_message": "Add a listener for statment context operations\n\nThis listener allows notifications for specific operations on the\nStatement context, most notably the adding and removing of cleanable\nobjects.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ea1870c7e279f91483d3edb5f26f5167dd1efdaa": {
                "core/src/main/java/org/jdbi/v3/core/statement/StatementContext.java": [
                    "public void org.jdbi.v3.core.statement.StatementContext.close()",
                    "public void org.jdbi.v3.core.statement.StatementContext.addCleanable(Cleanable cleanable)",
                    "boolean org.jdbi.v3.core.statement.StatementContext.isClosed()"
                ]
            },
            "79d769cc1f69a739d6df052a914ec25504f640f4": {
                "core/src/main/java/org/jdbi/v3/core/statement/StatementContext.java": [
                    "public void org.jdbi.v3.core.statement.StatementContext.close()",
                    "public void org.jdbi.v3.core.statement.StatementContext.addCleanable(Cleanable cleanable)",
                    "boolean org.jdbi.v3.core.statement.StatementContext.isClosed()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2f90ea8e744833f1cb8257d9ecb76727f9e1e2ad",
        "previous_commit": "b3bb5037c4b8e29711456a6b84c3530a9a970cb8",
        "date": 1552012674,
        "releases": {
            "previous": "2f90ea8e744833f1cb8257d9ecb76727f9e1e2ad",
            "next": "2f90ea8e744833f1cb8257d9ecb76727f9e1e2ad"
        },
        "commit_message": "Reuse handles in nested `withHandle`, `withExtension` and on-demand extension calls\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2f90ea8e744833f1cb8257d9ecb76727f9e1e2ad": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Jdbi.withHandle(HandleCallback<R, X> callback)",
                    "public <R, E, X extends Exception> R org.jdbi.v3.core.Jdbi.withExtension(Class<E> extensionType, ExtensionCallback<R, E, X> callback)"
                ],
                "core/src/main/java/org/jdbi/v3/core/OnDemandExtensions.java": [
                    "static <E> E org.jdbi.v3.core.OnDemandExtensions.create(Jdbi db, Class<E> extensionType)"
                ]
            },
            "b3bb5037c4b8e29711456a6b84c3530a9a970cb8": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Jdbi.withHandle(HandleCallback<R, X> callback)",
                    "public <R, E, X extends Exception> R org.jdbi.v3.core.Jdbi.withExtension(Class<E> extensionType, ExtensionCallback<R, E, X> callback)"
                ],
                "core/src/main/java/org/jdbi/v3/core/OnDemandExtensions.java": [
                    "static <E> E org.jdbi.v3.core.OnDemandExtensions.create(Jdbi db, Class<E> extensionType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2b1941dbdbcf3b7b28f7cf82e1c876c25471aa82",
        "previous_commit": "6456b974f9acbdc8cc04c84ac87be63b2ca809df",
        "date": 1702262741,
        "releases": {
            "previous": "2b1941dbdbcf3b7b28f7cf82e1c876c25471aa82",
            "next": "2b1941dbdbcf3b7b28f7cf82e1c876c25471aa82"
        },
        "commit_message": "Make trailing semicolons in scripts configurable\n\nTurns out that MySQL and Oracle simply have differing ideas on what a\nstatement in a script should be. Oracle needs the trailing semicolons,\nMySQL throws syntax errors (when using the\nrewriteBatchedStatements=true setting, otherwise it reports a much\nsaner \"cannot issue select statements with update\" type of error\nmessage.\n\nAdded a switch that retains the default behavior but can be flipped\nto allow the error case described in #2554 to work.\n\nReported by @IrinaTerlizhenko, thank you for this!\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2b1941dbdbcf3b7b28f7cf82e1c876c25471aa82": {
                "core/src/main/java/org/jdbi/v3/core/internal/SqlScriptParser.java": [
                    "public void org.jdbi.v3.core.internal.SqlScriptParser.handle(Token t, StringBuilder sb)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Script.java": [
                    "private List<String> org.jdbi.v3.core.statement.Script.splitToStatements(String script)",
                    "public List<String> org.jdbi.v3.core.statement.Script.getStatements()"
                ]
            },
            "6456b974f9acbdc8cc04c84ac87be63b2ca809df": {
                "core/src/main/java/org/jdbi/v3/core/internal/SqlScriptParser.java": [
                    "public void org.jdbi.v3.core.internal.SqlScriptParser.handle(Token t, StringBuilder sb)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Script.java": [
                    "private List<String> org.jdbi.v3.core.statement.Script.splitToStatements(String script)",
                    "public List<String> org.jdbi.v3.core.statement.Script.getStatements()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2f5422e9388865b08d31b48b46faa2cff8faf5e9",
        "previous_commit": "65d627d2c113a8c58cfde0dfd2f567a1fbe85d8b",
        "date": 1569720116,
        "releases": {
            "previous": "2f5422e9388865b08d31b48b46faa2cff8faf5e9",
            "next": "2f5422e9388865b08d31b48b46faa2cff8faf5e9"
        },
        "commit_message": "IterableLike: add Stream support\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2f5422e9388865b08d31b48b46faa2cff8faf5e9": {
                "core/src/main/java/org/jdbi/v3/core/internal/IterableLike.java": [
                    "public static Iterator<Object> org.jdbi.v3.core.internal.IterableLike.of(Object iterable)",
                    "private static String org.jdbi.v3.core.internal.IterableLike.getTypeWarning(final Class<?> type)"
                ]
            },
            "65d627d2c113a8c58cfde0dfd2f567a1fbe85d8b": {
                "core/src/main/java/org/jdbi/v3/core/internal/IterableLike.java": [
                    "public static Iterator<Object> org.jdbi.v3.core.internal.IterableLike.of(Object iterable)",
                    "private static String org.jdbi.v3.core.internal.IterableLike.getTypeWarning(final Class<?> type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "678b43eb2fb5e350b6927055d0e3d82045d0cde0",
        "previous_commit": "c8b60d877551d05d9e8a9481a247e3591b969f89",
        "date": 1667685587,
        "releases": {
            "previous": "678b43eb2fb5e350b6927055d0e3d82045d0cde0",
            "next": "678b43eb2fb5e350b6927055d0e3d82045d0cde0"
        },
        "commit_message": "fix handle javadoc\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "678b43eb2fb5e350b6927055d0e3d82045d0cde0": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Handle.inTransaction(TransactionIsolationLevel level, HandleCallback<R, X> callback)",
                    "public void org.jdbi.v3.core.Handle.close()"
                ]
            },
            "c8b60d877551d05d9e8a9481a247e3591b969f89": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Handle.inTransaction(TransactionIsolationLevel level, HandleCallback<R, X> callback)",
                    "public void org.jdbi.v3.core.Handle.close()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ecfa24bec3ec9a4b1b9e1a7a82313c8085e5cefe",
        "previous_commit": "6a68f8fc5d1dc2c160cb991aba106494cafd6bbc",
        "date": 1565906592,
        "releases": {
            "previous": "ecfa24bec3ec9a4b1b9e1a7a82313c8085e5cefe",
            "next": "ecfa24bec3ec9a4b1b9e1a7a82313c8085e5cefe"
        },
        "commit_message": "dedupe impl\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ecfa24bec3ec9a4b1b9e1a7a82313c8085e5cefe": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/BindList.java": [
                    "public void define(SqlStatement stmt, String name)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindListFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindListFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ]
            },
            "6a68f8fc5d1dc2c160cb991aba106494cafd6bbc": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/BindList.java": [],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/BindListFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.BindListFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fcf111b1ed4a9e380095eb84457a9126fbe5a0d7",
        "previous_commit": "7ebe0347cc657ecea00b8d9bfe70b0ab99122586",
        "date": 1640461849,
        "releases": {
            "previous": "fcf111b1ed4a9e380095eb84457a9126fbe5a0d7",
            "next": "fcf111b1ed4a9e380095eb84457a9126fbe5a0d7"
        },
        "commit_message": "clean up TypedValue a bit\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fcf111b1ed4a9e380095eb84457a9126fbe5a0d7": {
                "core/src/main/java/org/jdbi/v3/core/argument/internal/ObjectPropertyNamedArgumentFinder.java": [
                    "private NamedArgumentFinder org.jdbi.v3.core.argument.internal.ObjectPropertyNamedArgumentFinder.getValueNested(TypedValue typedValue, String parentName, String childName)",
                    "public final Optional<Argument> org.jdbi.v3.core.argument.internal.ObjectPropertyNamedArgumentFinder.find(String name, StatementContext ctx)"
                ]
            },
            "7ebe0347cc657ecea00b8d9bfe70b0ab99122586": {
                "core/src/main/java/org/jdbi/v3/core/argument/internal/ObjectPropertyNamedArgumentFinder.java": [
                    "private NamedArgumentFinder org.jdbi.v3.core.argument.internal.ObjectPropertyNamedArgumentFinder.getValueNested(TypedValue typedValue, String parentName, String childName)",
                    "public final Optional<Argument> org.jdbi.v3.core.argument.internal.ObjectPropertyNamedArgumentFinder.find(String name, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "320164473d02fd6905cf73ba8cd35ee91f16adde",
        "previous_commit": "065703a91b6e682904babe5a398cbd63d938d8dd",
        "date": 1602281149,
        "releases": {
            "previous": "320164473d02fd6905cf73ba8cd35ee91f16adde",
            "next": "320164473d02fd6905cf73ba8cd35ee91f16adde"
        },
        "commit_message": "SqlObject decorators, @Transactional: support annotating types\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "320164473d02fd6905cf73ba8cd35ee91f16adde": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlMethodAnnotatedHandlerDecorator.java": [
                    "public Handler org.jdbi.v3.sqlobject.SqlMethodAnnotatedHandlerDecorator.decorateHandler(Handler base, Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/transaction/internal/TransactionDecorator.java": [
                    "public Handler org.jdbi.v3.sqlobject.transaction.internal.TransactionDecorator.decorateHandler(Handler base, Class<?> sqlObjectType, Method method)"
                ]
            },
            "065703a91b6e682904babe5a398cbd63d938d8dd": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlMethodAnnotatedHandlerDecorator.java": [
                    "public Handler org.jdbi.v3.sqlobject.SqlMethodAnnotatedHandlerDecorator.decorateHandler(Handler base, Class<?> sqlObjectType, Method method)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/transaction/internal/TransactionDecorator.java": [
                    "public Handler org.jdbi.v3.sqlobject.transaction.internal.TransactionDecorator.decorateHandler(Handler base, Class<?> sqlObjectType, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "214adffa372cf96af9abb6c46a09652b5669b859",
        "previous_commit": "6d5cb88becd002c7ec71b67599d482f795b91044",
        "date": 1667686648,
        "releases": {
            "previous": "214adffa372cf96af9abb6c46a09652b5669b859",
            "next": "214adffa372cf96af9abb6c46a09652b5669b859"
        },
        "commit_message": "Fix resource leaks in script and sqlobject\n\n    - close the internal batch statement inside the script statement\n    - attach all generated statements to the handle. They will be cleaned\n      when the handle is cleaned up\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "214adffa372cf96af9abb6c46a09652b5669b859": {
                "core/src/main/java/org/jdbi/v3/core/statement/Script.java": [
                    "public int[] org.jdbi.v3.core.statement.Script.execute()"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java": [
                    "public Object invoke(Object target, Object[] args, HandleSupplier hs)"
                ]
            },
            "6d5cb88becd002c7ec71b67599d482f795b91044": {
                "core/src/main/java/org/jdbi/v3/core/statement/Script.java": [
                    "public int[] org.jdbi.v3.core.statement.Script.execute()"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java": [
                    "public Object invoke(Object target, Object[] args, HandleSupplier hs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4fc6e88df93939f8f549612dbaef687101684753",
        "previous_commit": "07d4d6701c4fde8c753ee4ae01213b10b6b16c55",
        "date": 1710384098,
        "releases": {
            "previous": "4fc6e88df93939f8f549612dbaef687101684753",
            "next": "4fc6e88df93939f8f549612dbaef687101684753"
        },
        "commit_message": "Cache types in ConstructorMapper\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4fc6e88df93939f8f549612dbaef687101684753": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorInstanceFactory.java": [
                    "T org.jdbi.v3.core.mapper.reflect.ConstructorInstanceFactory<T>.newInstance(Object... params)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.createSpecializedRowMapper(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            },
            "07d4d6701c4fde8c753ee4ae01213b10b6b16c55": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorInstanceFactory.java": [
                    "T org.jdbi.v3.core.mapper.reflect.ConstructorInstanceFactory<T>.newInstance(Object... params)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.createSpecializedRowMapper(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "db28c1873deb1ae802dfb50fb68388f389724f0e",
        "previous_commit": "acfcaf797bf646ba57d22109ab8a6163d979863d",
        "date": 1549572942,
        "releases": {
            "previous": "db28c1873deb1ae802dfb50fb68388f389724f0e",
            "next": "db28c1873deb1ae802dfb50fb68388f389724f0e"
        },
        "commit_message": "RowView: add support for columns with QualifiedType\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "db28c1873deb1ae802dfb50fb68388f389724f0e": {
                "core/src/main/java/org/jdbi/v3/core/result/RowView.java": [
                    "public Object org.jdbi.v3.core.result.RowView.getColumn(String column, Type type)",
                    "public Object org.jdbi.v3.core.result.RowView.getColumn(int column, Type type)"
                ]
            },
            "acfcaf797bf646ba57d22109ab8a6163d979863d": {
                "core/src/main/java/org/jdbi/v3/core/result/RowView.java": [
                    "public Object org.jdbi.v3.core.result.RowView.getColumn(String column, Type type)",
                    "public Object org.jdbi.v3.core.result.RowView.getColumn(int column, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f7908a11f09b53650168aeee02da689c9ef4e7ba",
        "previous_commit": "b2f18bd91ff4a6b4bd6de88f445503b78c3ad2a3",
        "date": 1666671466,
        "releases": {
            "previous": "f7908a11f09b53650168aeee02da689c9ef4e7ba",
            "next": "f7908a11f09b53650168aeee02da689c9ef4e7ba"
        },
        "commit_message": "Fix resource leaks\n\n- Metadata must be closed, otherwise it will leak StatementContext objects.\n- ensure that a Script, when closed, releases its wrapped Batch.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f7908a11f09b53650168aeee02da689c9ef4e7ba": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public <T> T org.jdbi.v3.core.Handle.queryMetadata(MetaData.MetaDataValueProvider<T> metadataFunction)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Script.java": [
                    "public int[] org.jdbi.v3.core.statement.Script.execute()"
                ]
            },
            "b2f18bd91ff4a6b4bd6de88f445503b78c3ad2a3": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public <T> T org.jdbi.v3.core.Handle.queryMetadata(MetaData.MetaDataValueProvider<T> metadataFunction)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/Script.java": [
                    "public int[] org.jdbi.v3.core.statement.Script.execute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5415b129eddc97c03c2e7da20f6ab887bbb68cd3",
        "previous_commit": "0dabe5cb869bdd1ed2636747656191a904fd5a76",
        "date": 1567546834,
        "releases": {
            "previous": "5415b129eddc97c03c2e7da20f6ab887bbb68cd3",
            "next": "5415b129eddc97c03c2e7da20f6ab887bbb68cd3"
        },
        "commit_message": "SqlCall: OutParameters processing in Consumer or Function callback\n\nAdd test showing multiple result sets from Postgres\n\nFixes #1392\nFixes #76\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5415b129eddc97c03c2e7da20f6ab887bbb68cd3": {
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public OutParameters org.jdbi.v3.core.statement.Call.invoke()"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlCallHandler.java": [
                    "void org.jdbi.v3.sqlobject.statement.internal.SqlCallHandler.configureReturner(Call c, SqlObjectStatementConfiguration cfg)"
                ]
            },
            "0dabe5cb869bdd1ed2636747656191a904fd5a76": {
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public OutParameters org.jdbi.v3.core.statement.Call.invoke()"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlCallHandler.java": [
                    "void org.jdbi.v3.sqlobject.statement.internal.SqlCallHandler.configureReturner(Call c, SqlObjectStatementConfiguration cfg)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2d0529f39ec39b3cecb04c8a63f29a39e704d796",
        "previous_commit": "35aa64682c4197a1f5dbb844e1119da7bc89f187",
        "date": 1667797255,
        "releases": {
            "previous": "2d0529f39ec39b3cecb04c8a63f29a39e704d796",
            "next": "2d0529f39ec39b3cecb04c8a63f29a39e704d796"
        },
        "commit_message": "Call HandleSuppliers 'handleSupplier'\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2d0529f39ec39b3cecb04c8a63f29a39e704d796": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java": [
                    "public Object invoke(Object target, Object[] args, HandleSupplier handleSupplier)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "public Object invoke(Object target, Object[] args, HandleSupplier handleSupplier)"
                ]
            },
            "35aa64682c4197a1f5dbb844e1119da7bc89f187": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java": [
                    "public Object invoke(Object target, Object[] args, HandleSupplier hs)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "public Object invoke(Object target, Object[] args, HandleSupplier h)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5b8f1c11d34dac98e19eedb5ad226834a5a83983",
        "previous_commit": "56262920d3d34383ec8e211d4a32b875fcc55c2b",
        "date": 1667674486,
        "releases": {
            "previous": "5b8f1c11d34dac98e19eedb5ad226834a5a83983",
            "next": "5b8f1c11d34dac98e19eedb5ad226834a5a83983"
        },
        "commit_message": "Rewrite handle in cleanable style\n\nAllow registration of cleanables, unwind the connection closing through\na separate cleanable.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5b8f1c11d34dac98e19eedb5ad226834a5a83983": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public boolean org.jdbi.v3.core.Handle.isClosed()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/StatementContext.java": [
                    "public void org.jdbi.v3.core.statement.StatementContext.close()"
                ]
            },
            "56262920d3d34383ec8e211d4a32b875fcc55c2b": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public boolean org.jdbi.v3.core.Handle.isClosed()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/StatementContext.java": [
                    "public void org.jdbi.v3.core.statement.StatementContext.close()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cad9c8fe6fa09502d4f642357e188d8f0644ac27",
        "previous_commit": "a5642b2d4d9a6cdd22d78eeff14dc16c501ad26f",
        "date": 1686199491,
        "releases": {
            "previous": "cad9c8fe6fa09502d4f642357e188d8f0644ac27",
            "next": "cad9c8fe6fa09502d4f642357e188d8f0644ac27"
        },
        "commit_message": "small style fixes\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "cad9c8fe6fa09502d4f642357e188d8f0644ac27": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "public Object invoke(HandleSupplier handleSupplier, Object target, Object... args)",
                    "public void org.jdbi.v3.sqlobject.statement.internal.SqlBatchHandler.warm(ConfigRegistry config)"
                ]
            },
            "a5642b2d4d9a6cdd22d78eeff14dc16c501ad26f": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "public Object invoke(HandleSupplier handleSupplier, Object target, Object... args)",
                    "public void org.jdbi.v3.sqlobject.statement.internal.SqlBatchHandler.warm(ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6c7584c6de2621f6453d97cc7b965bd269a0bb0f",
        "previous_commit": "9d120950ce802efc216665b82b829fe9ff98616e",
        "date": 1548100382,
        "releases": {
            "previous": "6c7584c6de2621f6453d97cc7b965bd269a0bb0f",
            "next": "6c7584c6de2621f6453d97cc7b965bd269a0bb0f"
        },
        "commit_message": "encapsulate\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6c7584c6de2621f6453d97cc7b965bd269a0bb0f": {
                "core/src/main/java/org/jdbi/v3/core/mapper/EnumByNameMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.EnumByNameMapperFactory.build(Type type, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/EnumByOrdinalMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.EnumByOrdinalMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            },
            "9d120950ce802efc216665b82b829fe9ff98616e": {
                "core/src/main/java/org/jdbi/v3/core/mapper/EnumByNameMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.EnumByNameMapperFactory.build(Type type, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/EnumByOrdinalMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.EnumByOrdinalMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1f00a3599e934f5eb221747ac58a7ffdd6091b4b",
        "previous_commit": "485daed744305de2c67ba56f755dc5ef79591ae5",
        "date": 1669097653,
        "releases": {
            "previous": "1f00a3599e934f5eb221747ac58a7ffdd6091b4b",
            "next": "1f00a3599e934f5eb221747ac58a7ffdd6091b4b"
        },
        "commit_message": "More parameter renames to make code readable\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1f00a3599e934f5eb221747ac58a7ffdd6091b4b": {
                "core/src/main/java/org/jdbi/v3/core/result/ResultBearing.java": [
                    "static ResultBearing of(Supplier<ResultSet> resultSetSupplier, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/result/ResultProducers.java": [
                    "public static ResultProducer<ResultBearing> org.jdbi.v3.core.result.ResultProducers.returningResults()"
                ]
            },
            "485daed744305de2c67ba56f755dc5ef79591ae5": {
                "core/src/main/java/org/jdbi/v3/core/result/ResultBearing.java": [
                    "static ResultBearing of(Supplier<ResultSet> resultSetSupplier, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/result/ResultProducers.java": [
                    "public static ResultProducer<ResultBearing> org.jdbi.v3.core.result.ResultProducers.returningResults()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "19ad4a7994360d87927bf908a810173529e1d2f0",
        "previous_commit": "96a16d181fc32142ad6fbc39180818b5fde40969",
        "date": 1552458530,
        "releases": {
            "previous": "19ad4a7994360d87927bf908a810173529e1d2f0",
            "next": "19ad4a7994360d87927bf908a810173529e1d2f0"
        },
        "commit_message": "Add simple support for Jackson `@JsonView`\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "19ad4a7994360d87927bf908a810173529e1d2f0": {
                "jackson2/src/main/java/org/jdbi/v3/jackson2/JacksonJsonMapper.java": [
                    "public Object org.jdbi.v3.jackson2.JacksonJsonMapper.fromJson(Type type, String json, ConfigRegistry config)",
                    "public String org.jdbi.v3.jackson2.JacksonJsonMapper.toJson(Type type, Object value, ConfigRegistry config)"
                ]
            },
            "96a16d181fc32142ad6fbc39180818b5fde40969": {
                "jackson2/src/main/java/org/jdbi/v3/jackson2/JacksonJsonMapper.java": [
                    "public Object org.jdbi.v3.jackson2.JacksonJsonMapper.fromJson(Type type, String json, ConfigRegistry config)",
                    "public String org.jdbi.v3.jackson2.JacksonJsonMapper.toJson(Type type, Object value, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ea2876f09153eb9a93873b89c8895f813cb8102f",
        "previous_commit": "0be21f87a79ffe957472fc0aec29869103742db1",
        "date": 1689539688,
        "releases": {
            "previous": "ea2876f09153eb9a93873b89c8895f813cb8102f",
            "next": "ea2876f09153eb9a93873b89c8895f813cb8102f"
        },
        "commit_message": "Use the jcu.findConstructor code for generator caching\n\nUse the new code from #2441 to improve Sql generator method lookup and on demand\nattachment.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ea2876f09153eb9a93873b89c8895f813cb8102f": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/GeneratorSqlObjectFactory.java": [
                    "public Optional<Object> org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.onDemand(Jdbi jdbi, Class<?> extensionType, Class<?>... extraTypes)",
                    "public <E> E org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ]
            },
            "0be21f87a79ffe957472fc0aec29869103742db1": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/GeneratorSqlObjectFactory.java": [
                    "public Optional<Object> org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.onDemand(Jdbi jdbi, Class<?> extensionType, Class<?>... extraTypes)",
                    "public <E> E org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a1d9933f8c9854dd587ca4f685b29d9f9ad029a7",
        "previous_commit": "dc56c4f203c13fca1dda08dfe02bdadd7ef51f7d",
        "date": 1591994929,
        "releases": {
            "previous": "a1d9933f8c9854dd587ca4f685b29d9f9ad029a7",
            "next": "a1d9933f8c9854dd587ca4f685b29d9f9ad029a7"
        },
        "commit_message": "Refactor immutable implementation to use a more generically named BuilderPojoPropertiesFactory. This factory should be reusable as is with other implementors of the builder pattern\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a1d9933f8c9854dd587ca4f685b29d9f9ad029a7": {
                "core/src/main/java/org/jdbi/v3/core/mapper/immutables/JdbiImmutables.java": [
                    "public <S, M extends S> JdbiImmutables org.jdbi.v3.core.mapper.immutables.JdbiImmutables.registerModifiable(Class<S> spec, Class<M> impl, Supplier<?> constructor)",
                    "public <S, I extends S> JdbiImmutables org.jdbi.v3.core.mapper.immutables.JdbiImmutables.registerImmutable(Class<S> spec, Class<I> impl, Supplier<?> builder)"
                ]
            },
            "dc56c4f203c13fca1dda08dfe02bdadd7ef51f7d": {
                "core/src/main/java/org/jdbi/v3/core/mapper/immutables/JdbiImmutables.java": [
                    "public <S, M extends S> JdbiImmutables org.jdbi.v3.core.mapper.immutables.JdbiImmutables.registerModifiable(Class<S> spec, Class<M> impl, Supplier<?> constructor)",
                    "public <S, I extends S> JdbiImmutables org.jdbi.v3.core.mapper.immutables.JdbiImmutables.registerImmutable(Class<S> spec, Class<I> impl, Supplier<?> builder)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8ee2a6b64c51e3d65177f917b535ed2af680ac43",
        "previous_commit": "25f933878793853a216530155f0202b80034210b",
        "date": 1574981570,
        "releases": {
            "previous": "8ee2a6b64c51e3d65177f917b535ed2af680ac43",
            "next": "8ee2a6b64c51e3d65177f917b535ed2af680ac43"
        },
        "commit_message": "Improve NoSuchExtensionException message per #1610\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8ee2a6b64c51e3d65177f917b535ed2af680ac43": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public <T> T org.jdbi.v3.core.Handle.attach(Class<T> extensionType)"
                ],
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "private <R, E, X extends Exception> R org.jdbi.v3.core.Jdbi.callWithExtension(Class<E> extensionType, ExtensionCallback<R, E, X> callback, HandleSupplier handle)"
                ]
            },
            "25f933878793853a216530155f0202b80034210b": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public <T> T org.jdbi.v3.core.Handle.attach(Class<T> extensionType)"
                ],
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "private <R, E, X extends Exception> R org.jdbi.v3.core.Jdbi.callWithExtension(Class<E> extensionType, ExtensionCallback<R, E, X> callback, HandleSupplier handle)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ef3b9eb31557ba34c06ff62c127b2d4ca4ad836d",
        "previous_commit": "33571778c0a1b3997847557ead84b41eef316776",
        "date": 1658265940,
        "releases": {
            "previous": "ef3b9eb31557ba34c06ff62c127b2d4ca4ad836d",
            "next": "ef3b9eb31557ba34c06ff62c127b2d4ca4ad836d"
        },
        "commit_message": "Batch ops should give access to modified row count (#2069)\n\nAdd `executePreparedBatch` to supersede `executeAndReturnGeneratedKeys`,\r\nwhich allows access to the modified row count after execution. Also add\r\na convenience method to the iterable that allows splitting up the list\r\nof results into per-batch sets.\r\n\r\nAddresses the problems described in #2060\r\n\r\nBased on a proposal by @doppelrittberger (Markus Ritter)",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ef3b9eb31557ba34c06ff62c127b2d4ca4ad836d": {
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
                    "public <R> R org.jdbi.v3.core.statement.PreparedBatch.execute(ResultProducer<R> producer)"
                ]
            },
            "33571778c0a1b3997847557ead84b41eef316776": {
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()",
                    "public <R> R org.jdbi.v3.core.statement.PreparedBatch.execute(ResultProducer<R> producer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6306a1c3dc65c7a0fd3c71dc54bc6cf607cb238e",
        "previous_commit": "bc2323980f7a957a238366c8c882a5fa44834c0d",
        "date": 1645210372,
        "releases": {
            "previous": "6306a1c3dc65c7a0fd3c71dc54bc6cf607cb238e",
            "next": "6306a1c3dc65c7a0fd3c71dc54bc6cf607cb238e"
        },
        "commit_message": "Fix NPE for Slf4JSqlLogger#logAfterExecution\n\nStatementContext for Batch does not have ParsedSql. Both\nlogAfterExecution and logException checks whether\nStatementContext#getParsedSql returns null or not to avoid an NPE.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6306a1c3dc65c7a0fd3c71dc54bc6cf607cb238e": {
                "core/src/main/java/org/jdbi/v3/core/statement/Slf4JSqlLogger.java": [
                    "public void org.jdbi.v3.core.statement.Slf4JSqlLogger.logException(StatementContext context, SQLException ex)",
                    "public void org.jdbi.v3.core.statement.Slf4JSqlLogger.logAfterExecution(StatementContext context)"
                ]
            },
            "bc2323980f7a957a238366c8c882a5fa44834c0d": {
                "core/src/main/java/org/jdbi/v3/core/statement/Slf4JSqlLogger.java": [
                    "public void org.jdbi.v3.core.statement.Slf4JSqlLogger.logException(StatementContext context, SQLException ex)",
                    "public void org.jdbi.v3.core.statement.Slf4JSqlLogger.logAfterExecution(StatementContext context)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6a1a3d87e984e6ddfc8b861acca39376a9b1a043",
        "previous_commit": "b2f18bd91ff4a6b4bd6de88f445503b78c3ad2a3",
        "date": 1666671407,
        "releases": {
            "previous": "6a1a3d87e984e6ddfc8b861acca39376a9b1a043",
            "next": "6a1a3d87e984e6ddfc8b861acca39376a9b1a043"
        },
        "commit_message": "remove BaseStatement#addCleanable\n\nthis is only a passthru for getContext().addCleanable() and provides no\nvalue. As this is an internal method, we can just remove it.\n\nUse getContext().addCleanable() directly.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6a1a3d87e984e6ddfc8b861acca39376a9b1a043": {
                "core/src/main/java/org/jdbi/v3/core/statement/Batch.java": [
                    "public int[] org.jdbi.v3.core.statement.Batch.execute()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()"
                ]
            },
            "b2f18bd91ff4a6b4bd6de88f445503b78c3ad2a3": {
                "core/src/main/java/org/jdbi/v3/core/statement/Batch.java": [
                    "public int[] org.jdbi.v3.core.statement.Batch.execute()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "151a6943fc4465c8340f2efbcab936244d0bb066",
        "previous_commit": "8dfffc7b7b3d545df6d0d0abce3a2920dc9292cb",
        "date": 1688151467,
        "releases": {
            "previous": "151a6943fc4465c8340f2efbcab936244d0bb066",
            "next": "151a6943fc4465c8340f2efbcab936244d0bb066"
        },
        "commit_message": "CustomizingStatementHandler: re-use parameter type\n\nrunning type resolution is relatively expensive\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "151a6943fc4465c8340f2efbcab936244d0bb066": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java": [
                    "BoundCustomizer defaultParameterCustomizer(Parameter parameter, Integer i)",
                    "private SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.statement.internal..create(ConfigRegistry config)"
                ]
            },
            "8dfffc7b7b3d545df6d0d0abce3a2920dc9292cb": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/CustomizingStatementHandler.java": [
                    "BoundCustomizer defaultParameterCustomizer(Parameter parameter, Integer i)",
                    "private SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.statement.internal..create(ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "55658d06b2d78785e553b0ecf3fd15d1bfdc7351",
        "previous_commit": "1e8c3cad133292315771a138b2ca87224049ed79",
        "date": 1548380861,
        "releases": {
            "previous": "55658d06b2d78785e553b0ecf3fd15d1bfdc7351",
            "next": "55658d06b2d78785e553b0ecf3fd15d1bfdc7351"
        },
        "commit_message": "json: remove use of StatementContext, simplify mapper / argument lambdas\n\nwe actually only need the ConfigRegistry instead, and that lets us move\na fair amount of work out of the lambdas in the json handling\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "55658d06b2d78785e553b0ecf3fd15d1bfdc7351": {
                "json/src/main/java/org/jdbi/v3/json/internal/JsonArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.json.internal.JsonArgumentFactory.build(Type type, Object value, ConfigRegistry config)"
                ],
                "json/src/main/java/org/jdbi/v3/json/internal/JsonColumnMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.json.internal.JsonColumnMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            },
            "1e8c3cad133292315771a138b2ca87224049ed79": {
                "json/src/main/java/org/jdbi/v3/json/internal/JsonArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.json.internal.JsonArgumentFactory.build(Type type, Object value, ConfigRegistry config)"
                ],
                "json/src/main/java/org/jdbi/v3/json/internal/JsonColumnMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.json.internal.JsonColumnMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a6f471849d0daafcf70994fdc68494e8e3a72193",
        "previous_commit": "9bf400e3570a2037a47a43644e017f59c5b04782",
        "date": 1675925472,
        "releases": {
            "previous": "a6f471849d0daafcf70994fdc68494e8e3a72193",
            "next": "a6f471849d0daafcf70994fdc68494e8e3a72193"
        },
        "commit_message": "Rewrite the SqlObject code generator\n\n- make execution more robust, use init() method\n- don't fail on IOException, makes it possible to debug generated code\n- resolve static method fields at build time, no need for the thread\n  local anymore\n- omit object creation if arrays are empty\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a6f471849d0daafcf70994fdc68494e8e3a72193": {
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "public boolean org.jdbi.v3.generator.GenerateSqlObjectProcessor.process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/GeneratorSqlObjectFactory.java": [
                    "public <E> E org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ]
            },
            "9bf400e3570a2037a47a43644e017f59c5b04782": {
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "public boolean org.jdbi.v3.generator.GenerateSqlObjectProcessor.process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/GeneratorSqlObjectFactory.java": [
                    "public <E> E org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "49498d0456ef9dbfe5611df4f7ee5a50c6f3a98b",
        "previous_commit": "97f2bac90ada5f5eb4aeb37f632581979d0cf084",
        "date": 1666837515,
        "releases": {
            "previous": "49498d0456ef9dbfe5611df4f7ee5a50c6f3a98b",
            "next": "49498d0456ef9dbfe5611df4f7ee5a50c6f3a98b"
        },
        "commit_message": "Clean up statement builder usage\n\n- Call close methods consistently on all paths in BAtch, Call and SqlStatement\n- deprecate statement/sql close method, replace with specific close methods for\n  PreparedStatement and Statement that also take the StatementContext\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "49498d0456ef9dbfe5611df4f7ee5a50c6f3a98b": {
                "core/src/main/java/org/jdbi/v3/core/statement/Batch.java": [
                    "public int[] org.jdbi.v3.core.statement.Batch.execute()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()"
                ]
            },
            "97f2bac90ada5f5eb4aeb37f632581979d0cf084": {
                "core/src/main/java/org/jdbi/v3/core/statement/Batch.java": [
                    "public int[] org.jdbi.v3.core.statement.Batch.execute()"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2a1c58f3e1591f3ecbb1002bc83acb58a980b00f",
        "previous_commit": "80c7c32ca5735204ad3878f94c90d97f1d59497a",
        "date": 1548285947,
        "releases": {
            "previous": "2a1c58f3e1591f3ecbb1002bc83acb58a980b00f",
            "next": "2a1c58f3e1591f3ecbb1002bc83acb58a980b00f"
        },
        "commit_message": "review remark\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2a1c58f3e1591f3ecbb1002bc83acb58a980b00f": {
                "core/src/main/java/org/jdbi/v3/core/argument/BuiltInArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.BuiltInArgumentFactory.build(Type expectedType, Object rawValue, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/QualifiedEnumArgumentFactory.java": [
                    "private static <E extends Enum<E>> Optional<Argument> org.jdbi.v3.core.internal.QualifiedEnumArgumentFactory.makeEnumArgument(QualifiedType<E> givenType, E value, Class<E> enumClass, ConfigRegistry config)"
                ]
            },
            "80c7c32ca5735204ad3878f94c90d97f1d59497a": {
                "core/src/main/java/org/jdbi/v3/core/argument/BuiltInArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.BuiltInArgumentFactory.build(Type expectedType, Object rawValue, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/QualifiedEnumArgumentFactory.java": [
                    "private static <E extends Enum<E>> Optional<Argument> org.jdbi.v3.core.internal.QualifiedEnumArgumentFactory.makeEnumArgument(QualifiedType<E> givenType, E value, Class<E> enumClass, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "024d231930f81d7cd2c104f981be31652ede20a7",
        "previous_commit": "f6ecd6bba12b50c8172d48e888fb8559e3489098",
        "date": 1548302131,
        "releases": {
            "previous": "024d231930f81d7cd2c104f981be31652ede20a7",
            "next": "024d231930f81d7cd2c104f981be31652ede20a7"
        },
        "commit_message": "Refactoring\n\n- Refactor EnumArgumentFactory to just return an Argument instead of\n  building an ephemeral delegate factory\n- Make LegacyEnumByNameArgumentFactory delegate to EnumArgumentFactory\n  with an explicit qualifier\n- Remove use of exceptions for flow control in EnumByNameColumnMapper\n- Rename SqlobjectEnumQualifierTest to SqlObjectEnumQualifierTest\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "024d231930f81d7cd2c104f981be31652ede20a7": {
                "core/src/main/java/org/jdbi/v3/core/argument/BuiltInArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.BuiltInArgumentFactory.build(Type expectedType, Object rawValue, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/EnumArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.EnumArgumentFactory.build(QualifiedType<?> givenType, Object value, ConfigRegistry config)"
                ]
            },
            "f6ecd6bba12b50c8172d48e888fb8559e3489098": {
                "core/src/main/java/org/jdbi/v3/core/argument/BuiltInArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.BuiltInArgumentFactory.build(Type expectedType, Object rawValue, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/EnumArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.EnumArgumentFactory.build(QualifiedType<?> givenType, Object value, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "86568c62a3ab945314db7a2e630456ddcd66b7bb",
        "previous_commit": "6f7be8640a08ed1efabe4755bb8a60c9be5a2bcb",
        "date": 1669181960,
        "releases": {
            "previous": "86568c62a3ab945314db7a2e630456ddcd66b7bb",
            "next": "86568c62a3ab945314db7a2e630456ddcd66b7bb"
        },
        "commit_message": "Review ResultSet cleanup management\n\n* Add cleanup registration in all places where Supplier<ResultSet>.get()\n  is called.\n* Ensure that all result sets are registered for cleanup before they are\n  passed to ResultSetScanner.scanResultSet\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "86568c62a3ab945314db7a2e630456ddcd66b7bb": {
                "core/src/main/java/org/jdbi/v3/core/statement/OutParameters.java": [
                    "public ResultBearing org.jdbi.v3.core.statement.OutParameters.getRowSet(int pos)",
                    "public ResultBearing org.jdbi.v3.core.statement.OutParameters.getRowSet(String name)"
                ]
            },
            "6f7be8640a08ed1efabe4755bb8a60c9be5a2bcb": {
                "core/src/main/java/org/jdbi/v3/core/statement/OutParameters.java": [
                    "public ResultBearing org.jdbi.v3.core.statement.OutParameters.getRowSet(int pos)",
                    "public ResultBearing org.jdbi.v3.core.statement.OutParameters.getRowSet(String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f18eaaf9f16ae9499d98e584738be9327ea3b424",
        "previous_commit": "722c4ddcb5aad57364d7803061afa0b56d6c5911",
        "date": 1569734877,
        "releases": {
            "previous": "f18eaaf9f16ae9499d98e584738be9327ea3b424",
            "next": "f18eaaf9f16ae9499d98e584738be9327ea3b424"
        },
        "commit_message": "TemplateEngines: cache\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f18eaaf9f16ae9499d98e584738be9327ea3b424": {
                "core/src/main/java/org/jdbi/v3/core/statement/DefinedAttributeTemplateEngine.java": [
                    "public String org.jdbi.v3.core.statement.DefinedAttributeTemplateEngine.render(String template, StatementContext ctx)"
                ],
                "freemarker/src/main/java/org/jdbi/v3/freemarker/FreemarkerEngine.java": [
                    "public String org.jdbi.v3.freemarker.FreemarkerEngine.render(String sql, StatementContext ctx)"
                ]
            },
            "722c4ddcb5aad57364d7803061afa0b56d6c5911": {
                "core/src/main/java/org/jdbi/v3/core/statement/DefinedAttributeTemplateEngine.java": [
                    "public String org.jdbi.v3.core.statement.DefinedAttributeTemplateEngine.render(String template, StatementContext ctx)"
                ],
                "freemarker/src/main/java/org/jdbi/v3/freemarker/FreemarkerEngine.java": [
                    "public String org.jdbi.v3.freemarker.FreemarkerEngine.render(String sql, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ab0b3710a0a209df8eaab9a69e93f1a9a870bc2a",
        "previous_commit": "7131783d84c1b01dc73096d93d814adc36a964fe",
        "date": 1600219421,
        "releases": {
            "previous": "ab0b3710a0a209df8eaab9a69e93f1a9a870bc2a",
            "next": "ab0b3710a0a209df8eaab9a69e93f1a9a870bc2a"
        },
        "commit_message": "*Mappers: cache misses as well as hits\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ab0b3710a0a209df8eaab9a69e93f1a9a870bc2a": {
                "core/src/main/java/org/jdbi/v3/core/mapper/ColumnMappers.java": [
                    "public <T> Optional<ColumnMapper<T>> org.jdbi.v3.core.mapper.ColumnMappers.findFor(QualifiedType<T> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/RowMappers.java": [
                    "public Optional<RowMapper<?>> org.jdbi.v3.core.mapper.RowMappers.findFor(Type type)"
                ]
            },
            "7131783d84c1b01dc73096d93d814adc36a964fe": {
                "core/src/main/java/org/jdbi/v3/core/mapper/ColumnMappers.java": [
                    "public <T> Optional<ColumnMapper<T>> org.jdbi.v3.core.mapper.ColumnMappers.findFor(QualifiedType<T> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/RowMappers.java": [
                    "public Optional<RowMapper<?>> org.jdbi.v3.core.mapper.RowMappers.findFor(Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9fb92ba1b6e5a0de10c0a585f733f77b24d94884",
        "previous_commit": "d2d84add45e46a5d99ea04eecefba82417bb222a",
        "date": 1643055852,
        "releases": {
            "previous": "9fb92ba1b6e5a0de10c0a585f733f77b24d94884",
            "next": "9fb92ba1b6e5a0de10c0a585f733f77b24d94884"
        },
        "commit_message": "Hold PreparedBatch for SqlBatchHandler until it is successful\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9fb92ba1b6e5a0de10c0a585f733f77b24d94884": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "public Object invoke(Object target, Object[] args, HandleSupplier h)",
                    "private ResultIterator<?> org.jdbi.v3.sqlobject.statement.internal.BatchChunkIterator.loadChunk()"
                ]
            },
            "d2d84add45e46a5d99ea04eecefba82417bb222a": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "public Object invoke(Object target, Object[] args, HandleSupplier h)",
                    "private ResultIterator<?> org.jdbi.v3.sqlobject.statement.internal.BatchChunkIterator.loadChunk()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c6069234bc5793f1410a78860f7a3dc738a8b2b1",
        "previous_commit": "948dbed26f588ad2edf70064f073bf295d3105dd",
        "date": 1591375258,
        "releases": {
            "previous": "c6069234bc5793f1410a78860f7a3dc738a8b2b1",
            "next": "c6069234bc5793f1410a78860f7a3dc738a8b2b1"
        },
        "commit_message": "Postgres: add simple LargeObject CRUD support\n\nhttps://github.com/jdbi/jdbi/issues/1706\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c6069234bc5793f1410a78860f7a3dc738a8b2b1": {
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public Handle org.jdbi.v3.postgres.PostgresPlugin.customizeHandle(Handle handle)",
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            },
            "948dbed26f588ad2edf70064f073bf295d3105dd": {
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public Handle org.jdbi.v3.postgres.PostgresPlugin.customizeHandle(Handle handle)",
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a137852d7c25d4966771be957d8e6e86b7435cb8",
        "previous_commit": "20bd75c9a581d547a9dda956e64e871b62b90e54",
        "date": 1600187735,
        "releases": {
            "previous": "a137852d7c25d4966771be957d8e6e86b7435cb8",
            "next": "a137852d7c25d4966771be957d8e6e86b7435cb8"
        },
        "commit_message": "PMD\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a137852d7c25d4966771be957d8e6e86b7435cb8": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public int org.jdbi.v3.core.Handle.execute(String sql, Object... args)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/DefineNamedBindingsStatementCustomizer.java": [
                    "public Object org.jdbi.v3.core.statement.DefineNamedBindingsStatementCustomizer.invoke(Object proxy, Method method, Object[] args)"
                ]
            },
            "20bd75c9a581d547a9dda956e64e871b62b90e54": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public int org.jdbi.v3.core.Handle.execute(String sql, Object... args)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/DefineNamedBindingsStatementCustomizer.java": [
                    "public Object org.jdbi.v3.core.statement.DefineNamedBindingsStatementCustomizer.invoke(Object proxy, Method method, Object[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f20a302da6daa1790e11bc09b3ecfecef09a3b3d",
        "previous_commit": "ea1e427227f2286cb63fc2169e7c7568abfde87e",
        "date": 1556818305,
        "releases": {
            "previous": "f20a302da6daa1790e11bc09b3ecfecef09a3b3d",
            "next": "f20a302da6daa1790e11bc09b3ecfecef09a3b3d"
        },
        "commit_message": "Wrap Lexer exceptions\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f20a302da6daa1790e11bc09b3ecfecef09a3b3d": {
                "core/src/main/java/org/jdbi/v3/core/statement/ColonPrefixSqlParser.java": [
                    "public ParsedSql org.jdbi.v3.core.statement.ColonPrefixSqlParser.parse(String sql, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/HashPrefixSqlParser.java": [
                    "public ParsedSql org.jdbi.v3.core.statement.HashPrefixSqlParser.parse(String sql, StatementContext ctx)"
                ]
            },
            "ea1e427227f2286cb63fc2169e7c7568abfde87e": {
                "core/src/main/java/org/jdbi/v3/core/statement/ColonPrefixSqlParser.java": [
                    "public ParsedSql org.jdbi.v3.core.statement.ColonPrefixSqlParser.parse(String sql, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/HashPrefixSqlParser.java": [
                    "public ParsedSql org.jdbi.v3.core.statement.HashPrefixSqlParser.parse(String sql, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cc3847b646d2e71b80624e86428af4cab2c95f68",
        "previous_commit": "773dc9edefcda3e6439af2c7368c0b5717f607ec",
        "date": 1687805395,
        "releases": {
            "previous": "cc3847b646d2e71b80624e86428af4cab2c95f68",
            "next": "cc3847b646d2e71b80624e86428af4cab2c95f68"
        },
        "commit_message": "RowMapper, ColumnMapper.findFor: reduce Stream usage in hot path\n\nThis showed up as an allocation hotspot in our app since finding mappers is one of the most common Jdbi ops\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "cc3847b646d2e71b80624e86428af4cab2c95f68": {
                "core/src/main/java/org/jdbi/v3/core/mapper/ColumnMappers.java": [
                    "public <T> Optional<ColumnMapper<T>> org.jdbi.v3.core.mapper.ColumnMappers.findFor(QualifiedType<T> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/RowMappers.java": [
                    "public Optional<RowMapper<?>> org.jdbi.v3.core.mapper.RowMappers.findFor(Type type)"
                ]
            },
            "773dc9edefcda3e6439af2c7368c0b5717f607ec": {
                "core/src/main/java/org/jdbi/v3/core/mapper/ColumnMappers.java": [
                    "public <T> Optional<ColumnMapper<T>> org.jdbi.v3.core.mapper.ColumnMappers.findFor(QualifiedType<T> type)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/RowMappers.java": [
                    "public Optional<RowMapper<?>> org.jdbi.v3.core.mapper.RowMappers.findFor(Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "deee60221263a7ca7e0350559d90f94bdac1c24d",
        "previous_commit": "0ed8cee3ed834b733e68588f48d0380ef4c2097d",
        "date": 1698874618,
        "releases": {
            "previous": "deee60221263a7ca7e0350559d90f94bdac1c24d",
            "next": "deee60221263a7ca7e0350559d90f94bdac1c24d"
        },
        "commit_message": "Refactor HandleSupplier management\n\nPull the thread local into a pluggable object. This will open the path\nto more sophisticated ways of managing handles across different execution\npaths than just \"by thread\". This is most interesting right now for Kotlin\ncoroutines but also future structured concurrency will benefit from this.\n\nThis is a core piece of Jdbi, so basically every test checks whether this\nchange breaks anything. So there are no explicit tests.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "deee60221263a7ca7e0350559d90f94bdac1c24d": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Jdbi.withHandle(HandleCallback<R, X> callback)",
                    "public <R, E, X extends Exception> R org.jdbi.v3.core.Jdbi.withExtension(Class<E> extensionType, ExtensionCallback<R, E, X> callback)"
                ]
            },
            "0ed8cee3ed834b733e68588f48d0380ef4c2097d": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Jdbi.withHandle(HandleCallback<R, X> callback)",
                    "public <R, E, X extends Exception> R org.jdbi.v3.core.Jdbi.withExtension(Class<E> extensionType, ExtensionCallback<R, E, X> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1f75fb63fba1ed131ee3f0d1d0b682850c4cfdbc",
        "previous_commit": "bed76121bfc27906e520968b353a63192641a727",
        "date": 1549869536,
        "releases": {
            "previous": "1f75fb63fba1ed131ee3f0d1d0b682850c4cfdbc",
            "next": "1f75fb63fba1ed131ee3f0d1d0b682850c4cfdbc"
        },
        "commit_message": "fix #1459 and clean up test\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1f75fb63fba1ed131ee3f0d1d0b682850c4cfdbc": {
                "vavr/src/main/java/org/jdbi/v3/vavr/VavrValueArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.vavr.VavrValueArgumentFactory.build(Type type, Object value, ConfigRegistry config)",
                    "private static Optional<Argument> org.jdbi.v3.vavr.VavrValueArgumentFactory.buildValueArgument(Type type, ConfigRegistry config, Value<?> value)"
                ]
            },
            "bed76121bfc27906e520968b353a63192641a727": {
                "vavr/src/main/java/org/jdbi/v3/vavr/VavrValueArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.vavr.VavrValueArgumentFactory.build(Type type, Object value, ConfigRegistry config)",
                    "private Optional<Argument> org.jdbi.v3.vavr.VavrValueArgumentFactory.buildValueArgument(Type type, ConfigRegistry config, Value<?> value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "068a2d3d3fe510bf3d473ffec7b5c7139506d9be",
        "previous_commit": "85c18c88da28fd65f6509227ab28bb7e83a5c641",
        "date": 1565942627,
        "releases": {
            "previous": "068a2d3d3fe510bf3d473ffec7b5c7139506d9be",
            "next": "068a2d3d3fe510bf3d473ffec7b5c7139506d9be"
        },
        "commit_message": "GenerateSqlObject: handle default and private interface methods\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "068a2d3d3fe510bf3d473ffec7b5c7139506d9be": {
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "private MethodSpec org.jdbi.v3.generator.GenerateSqlObjectProcessor.generateMethod(TypeSpec.Builder typeBuilder, CodeBlock.Builder staticInit, CodeBlock.Builder init, Element e)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "private static Map<Method, Handler> org.jdbi.v3.sqlobject.SqlObjectFactory.buildMethodHandlers( Class<?> sqlObjectType, Handlers registry, HandlerDecorators decorators)"
                ]
            },
            "85c18c88da28fd65f6509227ab28bb7e83a5c641": {
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "private MethodSpec org.jdbi.v3.generator.GenerateSqlObjectProcessor.generateMethod(TypeSpec.Builder typeBuilder, CodeBlock.Builder staticInit, CodeBlock.Builder init, Element e)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "private static Map<Method, Handler> org.jdbi.v3.sqlobject.SqlObjectFactory.buildMethodHandlers( Class<?> sqlObjectType, Handlers registry, HandlerDecorators decorators)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c283af4884c4ac9996e23b4d6c776cd426a66148",
        "previous_commit": "ca0bf68014866c16e37e3fe8383281d22e3f5c17",
        "date": 1643055852,
        "releases": {
            "previous": "c283af4884c4ac9996e23b4d6c776cd426a66148",
            "next": "c283af4884c4ac9996e23b4d6c776cd426a66148"
        },
        "commit_message": "Rename sharedArgs to argsArray as it's initialized everytime\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c283af4884c4ac9996e23b4d6c776cd426a66148": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "public Object[] org.jdbi.v3.sqlobject.statement.internal..next()",
                    "private Iterator<Object[]> zipArgs(Method method, Object[] args)"
                ]
            },
            "ca0bf68014866c16e37e3fe8383281d22e3f5c17": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "public Object[] org.jdbi.v3.sqlobject.statement.internal..next()",
                    "private Iterator<Object[]> zipArgs(Method method, Object[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bb32ed307c20a2bed6c86847a1bfc5602c9d12fa",
        "previous_commit": "c9a6a4e022355726af26dcd8e3a539d36b2c4eb8",
        "date": 1638910106,
        "releases": {
            "previous": "bb32ed307c20a2bed6c86847a1bfc5602c9d12fa",
            "next": "bb32ed307c20a2bed6c86847a1bfc5602c9d12fa"
        },
        "commit_message": "Json: rework inner @Json String binding to be @EncodedJson String\n\nThis allows you to actually bind a @Json String\nFixes #1953\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bb32ed307c20a2bed6c86847a1bfc5602c9d12fa": {
                "json/src/main/java/org/jdbi/v3/json/internal/JsonArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.json.internal.JsonArgumentFactory.build(Type type, Object value, ConfigRegistry config)"
                ],
                "json/src/main/java/org/jdbi/v3/json/internal/JsonColumnMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.json.internal.JsonColumnMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            },
            "c9a6a4e022355726af26dcd8e3a539d36b2c4eb8": {
                "json/src/main/java/org/jdbi/v3/json/internal/JsonArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.json.internal.JsonArgumentFactory.build(Type type, Object value, ConfigRegistry config)"
                ],
                "json/src/main/java/org/jdbi/v3/json/internal/JsonColumnMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.json.internal.JsonColumnMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "da5247fc6b18a84b7583cfd61eeac70aabb0f97f",
        "previous_commit": "919d593a170ff3c3fae30d15403596f63ef61230",
        "date": 1617729630,
        "releases": {
            "previous": "da5247fc6b18a84b7583cfd61eeac70aabb0f97f",
            "next": "da5247fc6b18a84b7583cfd61eeac70aabb0f97f"
        },
        "commit_message": "Register boolean array types\n\nPull common array type configuration with SQL standard names up to base SqlArraytypes\nThey can always be overridden anyway\n\nFixes #1802\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "da5247fc6b18a84b7583cfd61eeac70aabb0f97f": {
                "core/src/main/java/org/jdbi/v3/core/h2/H2DatabasePlugin.java": [
                    "public void org.jdbi.v3.core.h2.H2DatabasePlugin.customizeJdbi(Jdbi db)"
                ],
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            },
            "919d593a170ff3c3fae30d15403596f63ef61230": {
                "core/src/main/java/org/jdbi/v3/core/h2/H2DatabasePlugin.java": [
                    "public void org.jdbi.v3.core.h2.H2DatabasePlugin.customizeJdbi(Jdbi db)"
                ],
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "49ff905d2e6d57023815c22891c6162ab8581b05",
        "previous_commit": "52d6e7f7110d60dc082bdef4183e0015fa677f63",
        "date": 1554418511,
        "releases": {
            "previous": "49ff905d2e6d57023815c22891c6162ab8581b05",
            "next": "49ff905d2e6d57023815c22891c6162ab8581b05"
        },
        "commit_message": "Address code review comments\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "49ff905d2e6d57023815c22891c6162ab8581b05": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Handle.inTransaction(HandleCallback<R, X> callback)"
                ],
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <R, E, X extends Exception> R org.jdbi.v3.core.Jdbi.withExtension(Class<E> extensionType, ExtensionCallback<R, E, X> callback)"
                ]
            },
            "52d6e7f7110d60dc082bdef4183e0015fa677f63": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Handle.inTransaction(HandleCallback<R, X> callback)"
                ],
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <R, E, X extends Exception> R org.jdbi.v3.core.Jdbi.withExtension(Class<E> extensionType, ExtensionCallback<R, E, X> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "aad0b605631763fa4262f43a960fc8c92f9ecc4f",
        "previous_commit": "7e17875ad4d061a31c1c9cd04ce31b7433831509",
        "date": 1569734877,
        "releases": {
            "previous": "aad0b605631763fa4262f43a960fc8c92f9ecc4f",
            "next": "aad0b605631763fa4262f43a960fc8c92f9ecc4f"
        },
        "commit_message": "AbstractArgumentFactory: factor out instance test\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "aad0b605631763fa4262f43a960fc8c92f9ecc4f": {
                "core/src/main/java/org/jdbi/v3/core/argument/AbstractArgumentFactory.java": [
                    "public final Optional<Argument> org.jdbi.v3.core.argument.AbstractArgumentFactory<T>.build(Type type, Object value, ConfigRegistry config)",
                    "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.AbstractArgumentFactory<T>.prepare(Type type, ConfigRegistry config)"
                ]
            },
            "7e17875ad4d061a31c1c9cd04ce31b7433831509": {
                "core/src/main/java/org/jdbi/v3/core/argument/AbstractArgumentFactory.java": [
                    "public final Optional<Argument> org.jdbi.v3.core.argument.AbstractArgumentFactory<T>.build(Type type, Object value, ConfigRegistry config)",
                    "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.AbstractArgumentFactory<T>.prepare(Type type, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "524bedc8dae34549b5336df85a1ce90ffd7320b2",
        "previous_commit": "7acbddb662d778035c678a53409a96f590c99ef9",
        "date": 1565886575,
        "releases": {
            "previous": "524bedc8dae34549b5336df85a1ce90ffd7320b2",
            "next": "524bedc8dae34549b5336df85a1ce90ffd7320b2"
        },
        "commit_message": "reuse invocation wrapper\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "524bedc8dae34549b5336df85a1ce90ffd7320b2": {
                "core/src/main/java/org/jdbi/v3/core/ConstantHandleSupplier.java": [
                    "public <V> V org.jdbi.v3.core.ConstantHandleSupplier.invokeInContext(ExtensionMethod extensionMethod, ConfigRegistry config, Callable<V> task)"
                ],
                "core/src/main/java/org/jdbi/v3/core/LazyHandleSupplier.java": [
                    "public <V> V org.jdbi.v3.core.LazyHandleSupplier.invokeInContext(ExtensionMethod extensionMethod, ConfigRegistry config, Callable<V> task)"
                ]
            },
            "7acbddb662d778035c678a53409a96f590c99ef9": {
                "core/src/main/java/org/jdbi/v3/core/ConstantHandleSupplier.java": [
                    "public <V> V org.jdbi.v3.core.ConstantHandleSupplier.invokeInContext(ExtensionMethod extensionMethod, ConfigRegistry config, Callable<V> task)"
                ],
                "core/src/main/java/org/jdbi/v3/core/LazyHandleSupplier.java": [
                    "public <V> V org.jdbi.v3.core.LazyHandleSupplier.invokeInContext(ExtensionMethod extensionMethod, ConfigRegistry config, Callable<V> task)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bf99f9d7867dd0dddb5a501a50e5f7a81f88c26b",
        "previous_commit": "c12e440f8bce7808fa955dbab72fa24f87c4a9e5",
        "date": 1675404876,
        "releases": {
            "previous": "bf99f9d7867dd0dddb5a501a50e5f7a81f88c26b",
            "next": "bf99f9d7867dd0dddb5a501a50e5f7a81f88c26b"
        },
        "commit_message": "remove cache hit for concrete methods\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bf99f9d7867dd0dddb5a501a50e5f7a81f88c26b": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public Optional<Object> org.jdbi.v3.sqlobject.SqlObjectFactory.onDemand(Jdbi jdbi, Class<?> extensionType, Class<?>... extraTypes)",
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ]
            },
            "c12e440f8bce7808fa955dbab72fa24f87c4a9e5": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public Optional<Object> org.jdbi.v3.sqlobject.SqlObjectFactory.onDemand(Jdbi jdbi, Class<?> extensionType, Class<?>... extraTypes)",
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e83fc9b77e8dc211b1f9557406df144e8188de2e",
        "previous_commit": "bdd6f529c31324202ccf443d57999758f3b314d7",
        "date": 1722446325,
        "releases": {
            "previous": "e83fc9b77e8dc211b1f9557406df144e8188de2e",
            "next": "e83fc9b77e8dc211b1f9557406df144e8188de2e"
        },
        "commit_message": "Fix handling multiple commits on same handle when autocommit disabled\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e83fc9b77e8dc211b1f9557406df144e8188de2e": {
                "core/src/main/java/org/jdbi/v3/core/transaction/LocalTransactionHandler.java": [
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.commit(Handle handle)",
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.rollback(Handle handle)"
                ]
            },
            "bdd6f529c31324202ccf443d57999758f3b314d7": {
                "core/src/main/java/org/jdbi/v3/core/transaction/LocalTransactionHandler.java": [
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.commit(Handle handle)",
                    "public void org.jdbi.v3.core.transaction.LocalTransactionHandler.rollback(Handle handle)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f4b2dd6afe076c7f8967ff90b2e06f37b0efc85a",
        "previous_commit": "b9fe27d7885f578013b5c30c8d2412c96696ab40",
        "date": 1598030277,
        "releases": {
            "previous": "f4b2dd6afe076c7f8967ff90b2e06f37b0efc85a",
            "next": "f4b2dd6afe076c7f8967ff90b2e06f37b0efc85a"
        },
        "commit_message": "QualifiedArgumentFactory$Preparable: only compute prePreparedTypes once\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f4b2dd6afe076c7f8967ff90b2e06f37b0efc85a": {
                "core/src/main/java/org/jdbi/v3/core/argument/QualifiedArgumentFactory.java": [
                    "static QualifiedArgumentFactory.Preparable adapt(ConfigRegistry config, ArgumentFactory.Preparable factory)",
                    "public Collection<QualifiedType<?>> org.jdbi.v3.core.argument..prePreparedTypes()"
                ]
            },
            "b9fe27d7885f578013b5c30c8d2412c96696ab40": {
                "core/src/main/java/org/jdbi/v3/core/argument/QualifiedArgumentFactory.java": [
                    "static QualifiedArgumentFactory.Preparable adapt(ConfigRegistry config, ArgumentFactory.Preparable factory)",
                    "public Collection<QualifiedType<?>> org.jdbi.v3.core.argument..prePreparedTypes()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3c1a53624454bbdb1b466fd56e2bc9f837893cd7",
        "previous_commit": "8c1228a27b25ca3bd285f76c3a3d0ed092b61195",
        "date": 1563992553,
        "releases": {
            "previous": "3c1a53624454bbdb1b466fd56e2bc9f837893cd7",
            "next": "3c1a53624454bbdb1b466fd56e2bc9f837893cd7"
        },
        "commit_message": "Clean up a couple of warnings\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3c1a53624454bbdb1b466fd56e2bc9f837893cd7": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/UseSqlParserImpl.java": [
                    "private static <T extends SqlParser> Supplier<T> org.jdbi.v3.sqlobject.config.internal.UseSqlParserImpl.tryConstructor(Class<T> clazz, Object... args)"
                ]
            },
            "8c1228a27b25ca3bd285f76c3a3d0ed092b61195": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/config/internal/UseSqlParserImpl.java": [
                    "private static <T extends SqlParser> Supplier<T> org.jdbi.v3.sqlobject.config.internal.UseSqlParserImpl.tryConstructor(Class<T> clazz, Object... args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0c65565694bac835e312b28896724ad217d48daa",
        "previous_commit": "a22374be76f1cc98de3a0eb59b4cc2f0d3af59d3",
        "date": 1683508092,
        "releases": {
            "previous": "0c65565694bac835e312b28896724ad217d48daa",
            "next": "0c65565694bac835e312b28896724ad217d48daa"
        },
        "commit_message": "Handle.inTransaction: improve exception when isolation restore fails\n\nFixes #2343\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0c65565694bac835e312b28896724ad217d48daa": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Handle.inTransaction(TransactionIsolationLevel level, HandleCallback<R, X> callback)",
                    "public void org.jdbi.v3.core.Handle.close()"
                ]
            },
            "a22374be76f1cc98de3a0eb59b4cc2f0d3af59d3": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Handle.inTransaction(TransactionIsolationLevel level, HandleCallback<R, X> callback)",
                    "public void org.jdbi.v3.core.Handle.close()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0be21f87a79ffe957472fc0aec29869103742db1",
        "previous_commit": "bc0c916aa3e06d1debee236408663d6798a950af",
        "date": 1689536644,
        "releases": {
            "previous": "0be21f87a79ffe957472fc0aec29869103742db1",
            "next": "0be21f87a79ffe957472fc0aec29869103742db1"
        },
        "commit_message": "Generator: improve performance of creating instances\n\nRight now, every time you call attach or onDemand we repeatedly lookup the class and methods we use to construct them.\nNow, hold a cache of the lookups so we can re-use them.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0be21f87a79ffe957472fc0aec29869103742db1": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/GeneratorSqlObjectFactory.java": [
                    "public Optional<Object> org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.onDemand(Jdbi jdbi, Class<?> extensionType, Class<?>... extraTypes)",
                    "public <E> E org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ]
            },
            "bc0c916aa3e06d1debee236408663d6798a950af": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/GeneratorSqlObjectFactory.java": [
                    "public Optional<Object> org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.onDemand(Jdbi jdbi, Class<?> extensionType, Class<?>... extraTypes)",
                    "public <E> E org.jdbi.v3.sqlobject.GeneratorSqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a25f93f66eb528a5d2817ba693c3f7f474369e94",
        "previous_commit": "76c5b28d04d59fe9f7b4f92e0f116f67a13517ca",
        "date": 1548250575,
        "releases": {
            "previous": "a25f93f66eb528a5d2817ba693c3f7f474369e94",
            "next": "a25f93f66eb528a5d2817ba693c3f7f474369e94"
        },
        "commit_message": "some review remarks\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a25f93f66eb528a5d2817ba693c3f7f474369e94": {
                "core/src/main/java/org/jdbi/v3/core/internal/QualifiedEnumMapperFactory.java": [
                    "public static <E extends Enum<E>> ColumnMapper<E> org.jdbi.v3.core.internal.QualifiedEnumMapperFactory.byName(Class<E> enumClass)",
                    "private static <E extends Enum<E>> Optional<ColumnMapper<?>> org.jdbi.v3.core.internal.QualifiedEnumMapperFactory.makeEnumArgument(QualifiedType<E> givenType, Class<E> enumClass, ConfigRegistry config)"
                ]
            },
            "76c5b28d04d59fe9f7b4f92e0f116f67a13517ca": {
                "core/src/main/java/org/jdbi/v3/core/internal/QualifiedEnumMapperFactory.java": [
                    "public static <E extends Enum<E>> ColumnMapper<E> org.jdbi.v3.core.internal.QualifiedEnumMapperFactory.byName(Class<E> enumClass)",
                    "private static <E extends Enum<E>> Optional<ColumnMapper<?>> org.jdbi.v3.core.internal.QualifiedEnumMapperFactory.makeEnumArgument(QualifiedType<E> givenType, Class<E> enumClass, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2f734d4c7b167b4429d88b0677a4a412e625b345",
        "previous_commit": "a4f874e0aa3681825e5ee2f0ebd8855be2d877d3",
        "date": 1688102907,
        "releases": {
            "previous": "2f734d4c7b167b4429d88b0677a4a412e625b345",
            "next": "2f734d4c7b167b4429d88b0677a4a412e625b345"
        },
        "commit_message": "move method reflection from ExtensionFactoryDelegate to ExtensionMetadata\n\nfixes #2413\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2f734d4c7b167b4429d88b0677a4a412e625b345": {
                "core/src/main/java/org/jdbi/v3/core/extension/ExtensionFactoryDelegate.java": [
                    "public <E> E org.jdbi.v3.core.extension.ExtensionFactoryDelegate.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "private Object org.jdbi.v3.core.internal.OnDemandExtensions.createProxy(Jdbi jdbi, Class<?> extensionType, Class<?>... extraTypes)"
                ]
            },
            "a4f874e0aa3681825e5ee2f0ebd8855be2d877d3": {
                "core/src/main/java/org/jdbi/v3/core/extension/ExtensionFactoryDelegate.java": [
                    "public <E> E org.jdbi.v3.core.extension.ExtensionFactoryDelegate.attach(Class<E> extensionType, HandleSupplier handleSupplier)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "private Object org.jdbi.v3.core.internal.OnDemandExtensions.createProxy(Jdbi jdbi, Class<?> extensionType, Class<?>... extraTypes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "26159736986126ea04e6b647804e5b1da586e4e9",
        "previous_commit": "ae0ef89b14adb4ef7c10e45b44756820aec5ae70",
        "date": 1632395005,
        "releases": {
            "previous": "26159736986126ea04e6b647804e5b1da586e4e9",
            "next": "26159736986126ea04e6b647804e5b1da586e4e9"
        },
        "commit_message": "Some tweaks to the guice module.\n\n- javadoc fixes and clarifications\n- add createKey() methods to AbstractJdbiConfigurationModule\n- add default \"no op\" GuiceJdbiCustomizer\n- rework binding import logic to support regular and loose imports\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "26159736986126ea04e6b647804e5b1da586e4e9": {
                "guice/src/main/java/org/jdbi/v3/guice/AbstractJdbiDefinitionModule.java": [
                    "public final <T> void org.jdbi.v3.guice.AbstractJdbiDefinitionModule.exposeBinding(TypeLiteral<T> type)",
                    "protected final void org.jdbi.v3.guice.AbstractJdbiDefinitionModule.configure()"
                ]
            },
            "ae0ef89b14adb4ef7c10e45b44756820aec5ae70": {
                "guice/src/main/java/org/jdbi/v3/guice/AbstractJdbiDefinitionModule.java": [
                    "public final <T> void org.jdbi.v3.guice.AbstractJdbiDefinitionModule.exposeBinding(TypeLiteral<T> type)",
                    "protected final void org.jdbi.v3.guice.AbstractJdbiDefinitionModule.configure()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9571fb7441a21cbd1828f3c2a955de941246910f",
        "previous_commit": "8380ab2a62ab44d606c8f04bf5e183df7ae40ed4",
        "date": 1638914381,
        "releases": {
            "previous": "9571fb7441a21cbd1828f3c2a955de941246910f",
            "next": "9571fb7441a21cbd1828f3c2a955de941246910f"
        },
        "commit_message": "Handle: add new onCommit and onRollback transactional callbacks\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9571fb7441a21cbd1828f3c2a955de941246910f": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public Handle org.jdbi.v3.core.Handle.rollback()",
                    "public Handle org.jdbi.v3.core.Handle.commit()"
                ]
            },
            "8380ab2a62ab44d606c8f04bf5e183df7ae40ed4": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public Handle org.jdbi.v3.core.Handle.rollback()",
                    "public Handle org.jdbi.v3.core.Handle.commit()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f6b4bf5920021ad5605e5920c12d3f5f27c17d88",
        "previous_commit": "3420e888bf8e8fe70d55f81be0e92c7e587f560d",
        "date": 1549352749,
        "releases": {
            "previous": "f6b4bf5920021ad5605e5920c12d3f5f27c17d88",
            "next": "f6b4bf5920021ad5605e5920c12d3f5f27c17d88"
        },
        "commit_message": "add support for postgres custom types (#1425)\n\nadd support for postgres custom types",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f6b4bf5920021ad5605e5920c12d3f5f27c17d88": {
                "core/src/main/java/org/jdbi/v3/core/array/ArrayColumnMapper.java": [
                    "private Object org.jdbi.v3.core.array.ArrayColumnMapper.buildArray(java.sql.Array array, StatementContext ctx)"
                ],
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            },
            "3420e888bf8e8fe70d55f81be0e92c7e587f560d": {
                "core/src/main/java/org/jdbi/v3/core/array/ArrayColumnMapper.java": [
                    "private Object org.jdbi.v3.core.array.ArrayColumnMapper.buildArray(java.sql.Array array, StatementContext ctx)"
                ],
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "043c5c2b095ea2bc3775a37f4d71bae9aa608a91",
        "previous_commit": "acfcaf797bf646ba57d22109ab8a6163d979863d",
        "date": 1549570650,
        "releases": {
            "previous": "043c5c2b095ea2bc3775a37f4d71bae9aa608a91",
            "next": "043c5c2b095ea2bc3775a37f4d71bae9aa608a91"
        },
        "commit_message": "pass generic types to jackson\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "043c5c2b095ea2bc3775a37f4d71bae9aa608a91": {
                "jackson2/src/main/java/org/jdbi/v3/jackson2/JacksonJsonMapper.java": [
                    "public Object org.jdbi.v3.jackson2.JacksonJsonMapper.fromJson(Type type, String json, ConfigRegistry config)",
                    "public String org.jdbi.v3.jackson2.JacksonJsonMapper.toJson(Type type, Object value, ConfigRegistry config)"
                ]
            },
            "acfcaf797bf646ba57d22109ab8a6163d979863d": {
                "jackson2/src/main/java/org/jdbi/v3/jackson2/JacksonJsonMapper.java": [
                    "public Object org.jdbi.v3.jackson2.JacksonJsonMapper.fromJson(Type type, String json, ConfigRegistry config)",
                    "public String org.jdbi.v3.jackson2.JacksonJsonMapper.toJson(Type type, Object value, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c78f03a0d428abb1089cace2f363c11a57e4f1f0",
        "previous_commit": "2f90ea8e744833f1cb8257d9ecb76727f9e1e2ad",
        "date": 1552446164,
        "releases": {
            "previous": "c78f03a0d428abb1089cace2f363c11a57e4f1f0",
            "next": "c78f03a0d428abb1089cace2f363c11a57e4f1f0"
        },
        "commit_message": "Ensure that lazily generated handles are shared in nested Jdbi calls\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c78f03a0d428abb1089cace2f363c11a57e4f1f0": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Jdbi.withHandle(HandleCallback<R, X> callback)",
                    "public <R, E, X extends Exception> R org.jdbi.v3.core.Jdbi.withExtension(Class<E> extensionType, ExtensionCallback<R, E, X> callback)"
                ]
            },
            "2f90ea8e744833f1cb8257d9ecb76727f9e1e2ad": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Jdbi.withHandle(HandleCallback<R, X> callback)",
                    "public <R, E, X extends Exception> R org.jdbi.v3.core.Jdbi.withExtension(Class<E> extensionType, ExtensionCallback<R, E, X> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b9dd1f3e9929f8c8177649a7b3bd5db3054134dd",
        "previous_commit": "2a1c58f3e1591f3ecbb1002bc83acb58a980b00f",
        "date": 1548287179,
        "releases": {
            "previous": "b9dd1f3e9929f8c8177649a7b3bd5db3054134dd",
            "next": "b9dd1f3e9929f8c8177649a7b3bd5db3054134dd"
        },
        "commit_message": "hollow out legacy factory\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b9dd1f3e9929f8c8177649a7b3bd5db3054134dd": {
                "core/src/main/java/org/jdbi/v3/core/argument/BuiltInArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.BuiltInArgumentFactory.build(Type expectedType, Object rawValue, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/QualifiedEnumArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.internal.QualifiedEnumArgumentFactory.build(QualifiedType<?> givenType, Object value, ConfigRegistry config)"
                ]
            },
            "2a1c58f3e1591f3ecbb1002bc83acb58a980b00f": {
                "core/src/main/java/org/jdbi/v3/core/argument/BuiltInArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.BuiltInArgumentFactory.build(Type expectedType, Object rawValue, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/internal/QualifiedEnumArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.core.internal.QualifiedEnumArgumentFactory.build(QualifiedType<?> givenType, Object value, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1f2f8c421a2d33149af914ef93d3d4719a631ac1",
        "previous_commit": "3dda65db640ace6bb404a3a561c85645eea1ef26",
        "date": 1549584566,
        "releases": {
            "previous": "1f2f8c421a2d33149af914ef93d3d4719a631ac1",
            "next": "1f2f8c421a2d33149af914ef93d3d4719a631ac1"
        },
        "commit_message": "DefineNamedBindings: check getConnction works (e.g. sql array uses it)\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1f2f8c421a2d33149af914ef93d3d4719a631ac1": {
                "core/src/main/java/org/jdbi/v3/core/statement/DefineNamedBindingsStatementCustomizer.java": [
                    "public void org.jdbi.v3.core.statement.DefineNamedBindingsStatementCustomizer.beforeTemplating(PreparedStatement stmt, StatementContext ctx)",
                    "public Object org.jdbi.v3.core.statement.DefineNamedBindingsStatementCustomizer.invoke(Object proxy, Method method, Object[] args)"
                ]
            },
            "3dda65db640ace6bb404a3a561c85645eea1ef26": {
                "core/src/main/java/org/jdbi/v3/core/statement/DefineNamedBindingsStatementCustomizer.java": [
                    "public void org.jdbi.v3.core.statement.DefineNamedBindingsStatementCustomizer.beforeTemplating(PreparedStatement stmt, StatementContext ctx)",
                    "public Object org.jdbi.v3.core.statement.DefineNamedBindingsStatementCustomizer.invoke(Object proxy, Method method, Object[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "25f933878793853a216530155f0202b80034210b",
        "previous_commit": "6d159dbc3c5ba08c90aaf9578041cb1396598e27",
        "date": 1574808833,
        "releases": {
            "previous": "25f933878793853a216530155f0202b80034210b",
            "next": "25f933878793853a216530155f0202b80034210b"
        },
        "commit_message": "Fix Parentheses. Use BigDecimal for floating point math in DurationArgumentFactory\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "25f933878793853a216530155f0202b80034210b": {
                "postgres/src/main/java/org/jdbi/v3/postgres/DurationArgumentFactory.java": [
                    "public Argument org.jdbi.v3.postgres.DurationArgumentFactory.build(Duration duration, ConfigRegistry config)"
                ],
                "postgres/src/main/java/org/jdbi/v3/postgres/DurationColumnMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.postgres.DurationColumnMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            },
            "6d159dbc3c5ba08c90aaf9578041cb1396598e27": {
                "postgres/src/main/java/org/jdbi/v3/postgres/DurationArgumentFactory.java": [
                    "public Argument org.jdbi.v3.postgres.DurationArgumentFactory.build(Duration duration, ConfigRegistry config)"
                ],
                "postgres/src/main/java/org/jdbi/v3/postgres/DurationColumnMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.postgres.DurationColumnMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4eeb8346d00d2e87456444ad84e6c1c535a12baf",
        "previous_commit": "1fdb5a32a4044e33f6f20a32ddd78887f2796b4f",
        "date": 1576352713,
        "releases": {
            "previous": "4eeb8346d00d2e87456444ad84e6c1c535a12baf",
            "next": "4eeb8346d00d2e87456444ad84e6c1c535a12baf"
        },
        "commit_message": "QualifiedArgumentFactory: fix typo\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4eeb8346d00d2e87456444ad84e6c1c535a12baf": {
                "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java": [
                    "public Arguments org.jdbi.v3.core.argument.Arguments.register(QualifiedArgumentFactory factory)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/QualifiedArgumentFactory.java": [
                    "static QualifiedArgumentFactory.Preparable adapt(ConfigRegistry config, ArgumentFactory.Preparable factory)"
                ]
            },
            "1fdb5a32a4044e33f6f20a32ddd78887f2796b4f": {
                "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java": [
                    "public Arguments org.jdbi.v3.core.argument.Arguments.register(QualifiedArgumentFactory factory)"
                ],
                "core/src/main/java/org/jdbi/v3/core/argument/QualifiedArgumentFactory.java": [
                    "static QualifiedArgumentFactory.Preparable adapt(ConfigRegistry config, ArgumentFactory.Preparable factory)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3d4f00664113bf7f4f2add6cf6be197016c9ffbe",
        "previous_commit": "e4a149a3ac476eb29bdd533c1390a2f9ab84f883",
        "date": 1673490437,
        "releases": {
            "previous": "3d4f00664113bf7f4f2add6cf6be197016c9ffbe",
            "next": "3d4f00664113bf7f4f2add6cf6be197016c9ffbe"
        },
        "commit_message": "Clarify the logic for AbstractArgumentFactory.\n\nDocument that the abstract build method must return an argument\ninstance. Align the implementation of build() and prepare().\n\nAddresses #2249\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3d4f00664113bf7f4f2add6cf6be197016c9ffbe": {
                "core/src/main/java/org/jdbi/v3/core/argument/AbstractArgumentFactory.java": [
                    "public final Optional<Argument> org.jdbi.v3.core.argument.AbstractArgumentFactory<T>.build(Type type, Object value, ConfigRegistry config)",
                    "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.AbstractArgumentFactory<T>.prepare(Type type, ConfigRegistry config)"
                ]
            },
            "e4a149a3ac476eb29bdd533c1390a2f9ab84f883": {
                "core/src/main/java/org/jdbi/v3/core/argument/AbstractArgumentFactory.java": [
                    "public final Optional<Argument> org.jdbi.v3.core.argument.AbstractArgumentFactory<T>.build(Type type, Object value, ConfigRegistry config)",
                    "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.AbstractArgumentFactory<T>.prepare(Type type, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b67e223d4f21d3f57a45eedacdf4535adae109b1",
        "previous_commit": "059422d24a0a814b0f08b4d7d7b168d5c9d39826",
        "date": 1670134257,
        "releases": {
            "previous": "b67e223d4f21d3f57a45eedacdf4535adae109b1",
            "next": "b67e223d4f21d3f57a45eedacdf4535adae109b1"
        },
        "commit_message": "Refactor ResultProducers\n\n- Unify the methods returning ResultProducer<ResultBearing>\n- expose createResultBearing which can be used in other places to create\n  ResultSet objects (e.g. in the Oracle code)\n\nFixes #2222\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b67e223d4f21d3f57a45eedacdf4535adae109b1": {
                "core/src/main/java/org/jdbi/v3/core/result/ResultProducers.java": [
                    "public static ResultProducer<ResultBearing> org.jdbi.v3.core.result.ResultProducers.returningResults()",
                    "public static ResultProducer<ResultBearing> org.jdbi.v3.core.result.ResultProducers.returningGeneratedKeys(String... generatedKeyColumnNames)"
                ]
            },
            "059422d24a0a814b0f08b4d7d7b168d5c9d39826": {
                "core/src/main/java/org/jdbi/v3/core/result/ResultProducers.java": [
                    "public static ResultProducer<ResultBearing> org.jdbi.v3.core.result.ResultProducers.returningResults()",
                    "public static ResultProducer<ResultBearing> org.jdbi.v3.core.result.ResultProducers.returningGeneratedKeys(String... generatedKeyColumnNames)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c0db3a3ac3250f41b15f7f35da890f48bf513698",
        "previous_commit": "8c4cf8de1afb880889d8c84424dd74b83ec6c057",
        "date": 1635113423,
        "releases": {
            "previous": "c0db3a3ac3250f41b15f7f35da890f48bf513698",
            "next": "c0db3a3ac3250f41b15f7f35da890f48bf513698"
        },
        "commit_message": "Add Arguments.setPreparedArgumentsEnabled to disable new prepared arguments feature\n\nFixes #1915\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c0db3a3ac3250f41b15f7f35da890f48bf513698": {
                "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.Arguments.findFor(final QualifiedType<?> type, final Object value)",
                    "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.Arguments.prepareFor(final QualifiedType<?> type)"
                ]
            },
            "8c4cf8de1afb880889d8c84424dd74b83ec6c057": {
                "core/src/main/java/org/jdbi/v3/core/argument/Arguments.java": [
                    "public Optional<Argument> org.jdbi.v3.core.argument.Arguments.findFor(QualifiedType<?> type, Object value)",
                    "public Optional<Function<Object, Argument>> org.jdbi.v3.core.argument.Arguments.prepareFor(QualifiedType<?> type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f3f33441300044935be9ffbe5a472cd1cdf1c7a4",
        "previous_commit": "2e1d2244c8affd3aab76ec2b9dcbf898845343c0",
        "date": 1678427974,
        "releases": {
            "previous": "f3f33441300044935be9ffbe5a472cd1cdf1c7a4",
            "next": "f3f33441300044935be9ffbe5a472cd1cdf1c7a4"
        },
        "commit_message": "Rewrite code generator\n\nChange the generated code to use the new extension framework directly.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f3f33441300044935be9ffbe5a472cd1cdf1c7a4": {
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "private void org.jdbi.v3.generator.GenerateSqlObjectProcessor.addImplementationMethod(ExecutableElement method)",
                    "private void org.jdbi.v3.generator.GenerateSqlObjectProcessor.writeFile()"
                ]
            },
            "2e1d2244c8affd3aab76ec2b9dcbf898845343c0": {
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "private void org.jdbi.v3.generator.GenerateSqlObjectProcessor.addImplementationMethod(ExecutableElement method)",
                    "private void org.jdbi.v3.generator.GenerateSqlObjectProcessor.writeFile()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c74cf4b6c69b01e9e72d4c2cf206a27b022f68cf",
        "previous_commit": "d61fca55c875178c6849d2043c67c61e73cc2f29",
        "date": 1707413086,
        "releases": {
            "previous": "c74cf4b6c69b01e9e72d4c2cf206a27b022f68cf",
            "next": "c74cf4b6c69b01e9e72d4c2cf206a27b022f68cf"
        },
        "commit_message": "New `@Definition` feature also supports definitions from supertypes\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c74cf4b6c69b01e9e72d4c2cf206a27b022f68cf": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/AbstractSqlObjectFactory.java": [
                    "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(ExtensionMetadata.Builder builder)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/DefinitionsFactory.java": [
                    "private void org.jdbi.v3.sqlobject.DefinitionsFactory.configureMethodDefinitions(Class<?> type)"
                ]
            },
            "d61fca55c875178c6849d2043c67c61e73cc2f29": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/AbstractSqlObjectFactory.java": [
                    "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(ExtensionMetadata.Builder builder)"
                ],
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/DefinitionsFactory.java": [
                    "private void org.jdbi.v3.sqlobject.DefinitionsFactory.configureMethodDefinitions()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "541ba7feecac0fdd794aad39eff71d43724eb080",
        "previous_commit": "00172225de8f2feb165c5832d382620391d0217e",
        "date": 1638913676,
        "releases": {
            "previous": "541ba7feecac0fdd794aad39eff71d43724eb080",
            "next": "541ba7feecac0fdd794aad39eff71d43724eb080"
        },
        "commit_message": "ConstructorMapper: defer throwing exception about missing columns until we actually see rows (#1955)\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "541ba7feecac0fdd794aad39eff71d43724eb080": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
                    "public T org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.map(ResultSet rs, StatementContext ctx)"
                ]
            },
            "00172225de8f2feb165c5832d382620391d0217e": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "public RowMapper<T> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.specialize(ResultSet rs, StatementContext ctx)",
                    "public T org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.map(ResultSet rs, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "97a58df8b9714978c93f6907bf74a3b65ccf6710",
        "previous_commit": "c53def5f79f28649ad96caa4d61198f02a685f4b",
        "date": 1667790474,
        "releases": {
            "previous": "97a58df8b9714978c93f6907bf74a3b65ccf6710",
            "next": "97a58df8b9714978c93f6907bf74a3b65ccf6710"
        },
        "commit_message": "Remove redundant parameter from Handle c'tor\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "97a58df8b9714978c93f6907bf74a3b65ccf6710": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "static Handle org.jdbi.v3.core.Handle.createHandle(Jdbi jdbi, Cleanable connectionCleaner, TransactionHandler transactions, StatementBuilder statementBuilder, Connection connection)"
                ],
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Handle org.jdbi.v3.core.Jdbi.open()"
                ]
            },
            "c53def5f79f28649ad96caa4d61198f02a685f4b": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "static Handle org.jdbi.v3.core.Handle.createHandle(Jdbi jdbi, ConfigRegistry config, Cleanable connectionCleaner, TransactionHandler transactions, StatementBuilder statementBuilder, Connection connection)"
                ],
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Handle org.jdbi.v3.core.Jdbi.open()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2987af0a60fb40f2367e71ef0fb0802bdc54f4b1",
        "previous_commit": "a7883744758b3cd19195eaaa206e7bdb029b45f6",
        "date": 1679275135,
        "releases": {
            "previous": "2987af0a60fb40f2367e71ef0fb0802bdc54f4b1",
            "next": "2987af0a60fb40f2367e71ef0fb0802bdc54f4b1"
        },
        "commit_message": "Adds `setAttachCallbackStatementsForCleanup` flag\n\nAllows all statements created within Jdbi callback methods to be attached to their handle\nby default and cleaned up when the handle closes. This flag is set by default and must be\nexplicitly cleared if the behavior is not desired.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2987af0a60fb40f2367e71ef0fb0802bdc54f4b1": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Jdbi.withHandle(HandleCallback<R, X> callback)",
                    "public <R, X extends Exception> R org.jdbi.v3.core.Jdbi.inTransaction(final HandleCallback<R, X> callback)"
                ]
            },
            "a7883744758b3cd19195eaaa206e7bdb029b45f6": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Jdbi.withHandle(HandleCallback<R, X> callback)",
                    "public <R, X extends Exception> R org.jdbi.v3.core.Jdbi.inTransaction(final HandleCallback<R, X> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "35ea5811b146bf09713b05a0a5cf8fbbaeb6d924",
        "previous_commit": "d24238c5b46b5f58f769390c1214565f89b737c6",
        "date": 1548059872,
        "releases": {
            "previous": "35ea5811b146bf09713b05a0a5cf8fbbaeb6d924",
            "next": "35ea5811b146bf09713b05a0a5cf8fbbaeb6d924"
        },
        "commit_message": "#1273 matt\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "35ea5811b146bf09713b05a0a5cf8fbbaeb6d924": {
                "core/src/main/java/org/jdbi/v3/core/mapper/EnumByNameMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.EnumByNameMapperFactory.build(Type type, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/EnumByOrdinalMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.EnumByOrdinalMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            },
            "d24238c5b46b5f58f769390c1214565f89b737c6": {
                "core/src/main/java/org/jdbi/v3/core/mapper/EnumByNameMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.EnumByNameMapperFactory.build(Type type, ConfigRegistry config)"
                ],
                "core/src/main/java/org/jdbi/v3/core/mapper/EnumByOrdinalMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.EnumByOrdinalMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "70e4b871b9d457060eac1dab9dc0ccbdb20d3048",
        "previous_commit": "6a34c1dcdde88da59a1e74997896298c8d25f742",
        "date": 1556815271,
        "releases": {
            "previous": "70e4b871b9d457060eac1dab9dc0ccbdb20d3048",
            "next": "70e4b871b9d457060eac1dab9dc0ccbdb20d3048"
        },
        "commit_message": "Parsers use JdbiCaches instead of internal cache\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "70e4b871b9d457060eac1dab9dc0ccbdb20d3048": {
                "core/src/main/java/org/jdbi/v3/core/statement/ColonPrefixSqlParser.java": [
                    "public ParsedSql org.jdbi.v3.core.statement.ColonPrefixSqlParser.parse(String sql, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/HashPrefixSqlParser.java": [
                    "public ParsedSql org.jdbi.v3.core.statement.HashPrefixSqlParser.parse(String sql, StatementContext ctx)"
                ]
            },
            "6a34c1dcdde88da59a1e74997896298c8d25f742": {
                "core/src/main/java/org/jdbi/v3/core/statement/ColonPrefixSqlParser.java": [
                    "public ParsedSql org.jdbi.v3.core.statement.ColonPrefixSqlParser.parse(String sql, StatementContext ctx)"
                ],
                "core/src/main/java/org/jdbi/v3/core/statement/HashPrefixSqlParser.java": [
                    "public ParsedSql org.jdbi.v3.core.statement.HashPrefixSqlParser.parse(String sql, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7d311d52a921e7c239beaba9a9c91776204a72ee",
        "previous_commit": "ba54798a6a8955deafa25d8239cba8248dcffed6",
        "date": 1581468616,
        "releases": {
            "previous": "7d311d52a921e7c239beaba9a9c91776204a72ee",
            "next": "7d311d52a921e7c239beaba9a9c91776204a72ee"
        },
        "commit_message": "BindBean: ignore getter methods with parameters\n\nFixes #1642\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7d311d52a921e7c239beaba9a9c91776204a72ee": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "private static boolean org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.shouldSeeProperty(PropertyDescriptor pd)"
                ]
            },
            "ba54798a6a8955deafa25d8239cba8248dcffed6": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "private static boolean org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.shouldSeeProperty(PropertyDescriptor pd)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bd5c8151acd3c5e52e1889fb912587572b27375c",
        "previous_commit": "36af2cb44fb4bd8883ddc991031ce37e40e932b1",
        "date": 1664900289,
        "releases": {
            "previous": "bd5c8151acd3c5e52e1889fb912587572b27375c",
            "next": "bd5c8151acd3c5e52e1889fb912587572b27375c"
        },
        "commit_message": "Some improvements to the Sql wrapper\n\n- #of(Collection<CharSequence>) should be of(Iterable<? extends CharSequence>)\n- use a constant for empty Sql\n\nThese changes are backwards incompatible; this is ok as Sql is still\nmarked as @Beta.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bd5c8151acd3c5e52e1889fb912587572b27375c": {
                "core/src/main/java/org/jdbi/v3/core/Sql.java": [
                    "public static Sql org.jdbi.v3.core.Sql.of(CharSequence... tokens)"
                ]
            },
            "36af2cb44fb4bd8883ddc991031ce37e40e932b1": {
                "core/src/main/java/org/jdbi/v3/core/Sql.java": [
                    "public static Sql org.jdbi.v3.core.Sql.of(CharSequence... tokens)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "51cd7293b5efc7e99e539a08dae54f213856aa51",
        "previous_commit": "c1c1134d138f0e66bad777cac226447737c88a9b",
        "date": 1609963420,
        "releases": {
            "previous": "51cd7293b5efc7e99e539a08dae54f213856aa51",
            "next": "51cd7293b5efc7e99e539a08dae54f213856aa51"
        },
        "commit_message": "Handle open: check ConnectionFactory return for null values eagerly\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "51cd7293b5efc7e99e539a08dae54f213856aa51": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Handle org.jdbi.v3.core.Jdbi.open()"
                ]
            },
            "c1c1134d138f0e66bad777cac226447737c88a9b": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Handle org.jdbi.v3.core.Jdbi.open()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "05e90faa036e326e5d34f0fec2c819d00031be32",
        "previous_commit": "f3ba0e6b51a0f96985c416ff81e3db0212d51975",
        "date": 1657070691,
        "releases": {
            "previous": "05e90faa036e326e5d34f0fec2c819d00031be32",
            "next": "05e90faa036e326e5d34f0fec2c819d00031be32"
        },
        "commit_message": "SqlScriptLexer/SqlScriptParser: Enhance to properly deal with BEGIN...END blocks in sql scripts\n\nAdd JUnit test testOracleScriptWithBeginEndBlock\n\nAdd test script received by bug reporter (amended)\n\nClarify JavaDoc\n\nFixes #2021\n\nIncorporate pr feedback by Steven Schlansker\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "05e90faa036e326e5d34f0fec2c819d00031be32": {
                "core/src/main/java/org/jdbi/v3/core/internal/SqlScriptParser.java": [
                    "public String org.jdbi.v3.core.internal.SqlScriptParser.parse(CharStream charStream)"
                ]
            },
            "f3ba0e6b51a0f96985c416ff81e3db0212d51975": {
                "core/src/main/java/org/jdbi/v3/core/internal/SqlScriptParser.java": [
                    "public String org.jdbi.v3.core.internal.SqlScriptParser.parse(CharStream charStream)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8364511476d7788be617339319fb4b24f782a476",
        "previous_commit": "accfed6fb3993a20a97c9a117309eaadacc038ee",
        "date": 1688161344,
        "releases": {
            "previous": "8364511476d7788be617339319fb4b24f782a476",
            "next": "8364511476d7788be617339319fb4b24f782a476"
        },
        "commit_message": "Json plugin: do json type resolution during prepare stage for arguments and column mappers\n\nThis allows type lookup and object reader / writer to be reused\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8364511476d7788be617339319fb4b24f782a476": {
                "json/src/main/java/org/jdbi/v3/json/internal/JsonColumnMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.json.internal.JsonColumnMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            },
            "accfed6fb3993a20a97c9a117309eaadacc038ee": {
                "json/src/main/java/org/jdbi/v3/json/internal/JsonColumnMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.json.internal.JsonColumnMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3484d749d083458840fecd0b62345dabeee8b5e4",
        "previous_commit": "bef09f7fcaaa2109b67944a01242a92534766ea6",
        "date": 1591994929,
        "releases": {
            "previous": "3484d749d083458840fecd0b62345dabeee8b5e4",
            "next": "3484d749d083458840fecd0b62345dabeee8b5e4"
        },
        "commit_message": "Update builderSetter method finder to respect column name.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3484d749d083458840fecd0b62345dabeee8b5e4": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoBuilderUtils.java": [
                    "public static MethodHandle org.jdbi.v3.core.mapper.reflect.internal.PojoBuilderUtils.findBuilderSetter(final Class<?> builderClass, String name, Method decl, Type type)"
                ]
            },
            "bef09f7fcaaa2109b67944a01242a92534766ea6": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoBuilderUtils.java": [
                    "public static MethodHandle org.jdbi.v3.core.mapper.reflect.internal.PojoBuilderUtils.findBuilderSetter(final Class<?> builderClass, String name, Method decl, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "993941f0e6f9bfe2c44bb484359abd2b029294da",
        "previous_commit": "e4fce760983a508ca1797c390972f5a1ce661e20",
        "date": 1563992572,
        "releases": {
            "previous": "993941f0e6f9bfe2c44bb484359abd2b029294da",
            "next": "993941f0e6f9bfe2c44bb484359abd2b029294da"
        },
        "commit_message": "New @DatabaseValue for setting enum values\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "993941f0e6f9bfe2c44bb484359abd2b029294da": {
                "core/src/main/java/org/jdbi/v3/core/argument/EnumArgumentFactory.java": [
                    "private static <E extends Enum<E>> Optional<Argument> org.jdbi.v3.core.argument.EnumArgumentFactory.byName(E value, ConfigRegistry config)"
                ]
            },
            "e4fce760983a508ca1797c390972f5a1ce661e20": {
                "core/src/main/java/org/jdbi/v3/core/argument/EnumArgumentFactory.java": [
                    "private static <E extends Enum<E>> Optional<Argument> org.jdbi.v3.core.argument.EnumArgumentFactory.byName(E value, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "36852221831215eccbe54e2d79ac8626fa069030",
        "previous_commit": "299268ba7b00a2845e05f7942fb416147d603f18",
        "date": 1691519620,
        "releases": {
            "previous": "36852221831215eccbe54e2d79ac8626fa069030",
            "next": "36852221831215eccbe54e2d79ac8626fa069030"
        },
        "commit_message": "Handle: unconditionally close Connection\n\nRight now, we check if a connection is closed before closing it. Also, if a plugin\nfails to customize a Handle, the connection can leak\n\nHowever, this isn't good enough: even if the server closed the connection,\nwe might have borrowed this from a pool, which needs to know we've returned it.\n\nConnection.close is specified to no-op if called more than once, so it's safe to just do it regardless.\n\nFixes #2446\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "36852221831215eccbe54e2d79ac8626fa069030": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "private void org.jdbi.v3.core.Handle.cleanConnection(boolean doForceEndTransactions)"
                ]
            },
            "299268ba7b00a2845e05f7942fb416147d603f18": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "private void org.jdbi.v3.core.Handle.cleanConnection(boolean doForceEndTransactions)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "00172225de8f2feb165c5832d382620391d0217e",
        "previous_commit": "127fda14d9875518670a4b568fdd84688a2a95ea",
        "date": 1638910792,
        "releases": {
            "previous": "00172225de8f2feb165c5832d382620391d0217e",
            "next": "00172225de8f2feb165c5832d382620391d0217e"
        },
        "commit_message": "Slf4JSqlLogger: avoid NPE when used with Script\n\nFixes #1961\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "00172225de8f2feb165c5832d382620391d0217e": {
                "core/src/main/java/org/jdbi/v3/core/statement/Slf4JSqlLogger.java": [
                    "public void org.jdbi.v3.core.statement.Slf4JSqlLogger.logException(StatementContext context, SQLException ex)"
                ]
            },
            "127fda14d9875518670a4b568fdd84688a2a95ea": {
                "core/src/main/java/org/jdbi/v3/core/statement/Slf4JSqlLogger.java": [
                    "public void org.jdbi.v3.core.statement.Slf4JSqlLogger.logException(StatementContext context, SQLException ex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bad4768ffac9735d57d6dd8d68774ed3353d72d9",
        "previous_commit": "77908a93147708eaf13010bff4d2a2a868a2220f",
        "date": 1658705838,
        "releases": {
            "previous": "bad4768ffac9735d57d6dd8d68774ed3353d72d9",
            "next": "bad4768ffac9735d57d6dd8d68774ed3353d72d9"
        },
        "commit_message": "Add new example for custom sql array types\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bad4768ffac9735d57d6dd8d68774ed3353d72d9": {
                "examples/src/main/java/org/jdbi/v3/examples/order/OrderSupport.java": [
                    "public static void org.jdbi.v3.examples.order.OrderSupport.withOrders(Consumer<Jdbi> jdbiConsumer)"
                ]
            },
            "77908a93147708eaf13010bff4d2a2a868a2220f": {
                "examples/src/main/java/org/jdbi/v3/examples/order/OrderSupport.java": [
                    "public static void org.jdbi.v3.examples.order.OrderSupport.withOrders(Consumer<Jdbi> jdbiConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c54319f7b116b9c2114bd646273e2ef181716715",
        "previous_commit": "9ffec885f85fe10e6ee9def613ac777122148424",
        "date": 1548181832,
        "releases": {
            "previous": "c54319f7b116b9c2114bd646273e2ef181716715",
            "next": "c54319f7b116b9c2114bd646273e2ef181716715"
        },
        "commit_message": "Unused bindings hint in exception message, refs #1418\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c54319f7b116b9c2114bd646273e2ef181716715": {
                "core/src/main/java/org/jdbi/v3/core/statement/ArgumentBinder.java": [
                    "private static void org.jdbi.v3.core.statement.ArgumentBinder.bindNamed(ParsedParameters params, Binding binding, PreparedStatement statement, StatementContext context)"
                ]
            },
            "9ffec885f85fe10e6ee9def613ac777122148424": {
                "core/src/main/java/org/jdbi/v3/core/statement/ArgumentBinder.java": [
                    "private static void org.jdbi.v3.core.statement.ArgumentBinder.bindNamed(ParsedParameters params, Binding binding, PreparedStatement statement, StatementContext context)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7f0ea6425a5e23db918c67bee469c36663efc4ef",
        "previous_commit": "83ab88929442cc2e6a817967e1799a3630b04056",
        "date": 1681763090,
        "releases": {
            "previous": "7f0ea6425a5e23db918c67bee469c36663efc4ef",
            "next": "7f0ea6425a5e23db918c67bee469c36663efc4ef"
        },
        "commit_message": "Clean up #2306\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7f0ea6425a5e23db918c67bee469c36663efc4ef": {
                "core/src/main/java/org/jdbi/v3/core/generic/GenericTypes.java": [
                    "public static Optional<Type> org.jdbi.v3.core.generic.GenericTypes.findGenericParameter(Type type, Class<?> parameterizedSupertype, int n)"
                ]
            },
            "83ab88929442cc2e6a817967e1799a3630b04056": {
                "core/src/main/java/org/jdbi/v3/core/generic/GenericTypes.java": [
                    "public static Optional<Type> org.jdbi.v3.core.generic.GenericTypes.findGenericParameter(Type type, Class<?> parameterizedSupertype, int n)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a968d7f3d36c455e28883313424cb1aeb4933d83",
        "previous_commit": "c6e243cc4c374fe3510b3b3a967bc4c8f6e31cdc",
        "date": 1564574038,
        "releases": {
            "previous": "a968d7f3d36c455e28883313424cb1aeb4933d83",
            "next": "a968d7f3d36c455e28883313424cb1aeb4933d83"
        },
        "commit_message": "StatementExceptions: Deal with null RenderedSql\n\nI bumped into this when using `@SqlScript` with a resources file - `getRenderedSql()` returns null which causes an NPE and masks the proper exception (very confusing)\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a968d7f3d36c455e28883313424cb1aeb4933d83": {
                "core/src/main/java/org/jdbi/v3/core/statement/StatementExceptions.java": [
                    "protected static String org.jdbi.v3.core.statement.StatementExceptions.limit(String s, int len)"
                ]
            },
            "c6e243cc4c374fe3510b3b3a967bc4c8f6e31cdc": {
                "core/src/main/java/org/jdbi/v3/core/statement/StatementExceptions.java": [
                    "protected static String org.jdbi.v3.core.statement.StatementExceptions.limit(String s, int len)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f086bca107157c8f0bdddd81dd1113b83c788d5d",
        "previous_commit": "c53def5f79f28649ad96caa4d61198f02a685f4b",
        "date": 1667790566,
        "releases": {
            "previous": "f086bca107157c8f0bdddd81dd1113b83c788d5d",
            "next": "f086bca107157c8f0bdddd81dd1113b83c788d5d"
        },
        "commit_message": "Remove invocations execution\n\nThis code is needlessly complex, it stores an init value in a thread\nlocal so it can be picked up through a static initializer method. Using\nthe Invocations class makes this code next to unreadable so unwind this.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f086bca107157c8f0bdddd81dd1113b83c788d5d": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "public <E> E org.jdbi.v3.sqlobject.internal.SqlObjectInitData.instantiate(Class<E> passExtensionType, HandleSupplier handle, ConfigRegistry instanceConfig)"
                ]
            },
            "c53def5f79f28649ad96caa4d61198f02a685f4b": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "public <E> E org.jdbi.v3.sqlobject.internal.SqlObjectInitData.instantiate(Class<E> passExtensionType, HandleSupplier handle, ConfigRegistry instanceConfig)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "323ed18c8eb307e0e96ab99bec6eff4ed9de2a03",
        "previous_commit": "21860e0f9dd2088435e9eb84957f20b68c87866a",
        "date": 1653780175,
        "releases": {
            "previous": "323ed18c8eb307e0e96ab99bec6eff4ed9de2a03",
            "next": "323ed18c8eb307e0e96ab99bec6eff4ed9de2a03"
        },
        "commit_message": "fix bugs flagged by sonarqube\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "323ed18c8eb307e0e96ab99bec6eff4ed9de2a03": {
                "core/src/main/java/org/jdbi/v3/core/statement/StatementContext.java": [
                    "public void org.jdbi.v3.core.statement.StatementContext.close()"
                ]
            },
            "21860e0f9dd2088435e9eb84957f20b68c87866a": {
                "core/src/main/java/org/jdbi/v3/core/statement/StatementContext.java": [
                    "public void org.jdbi.v3.core.statement.StatementContext.close()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "110b71d27f398f8e44e09fff8e228aa59d9cb394",
        "previous_commit": "e802af792b4c5480d9dadc29bc4b0aaa50a6ef6a",
        "date": 1640483561,
        "releases": {
            "previous": "110b71d27f398f8e44e09fff8e228aa59d9cb394",
            "next": "110b71d27f398f8e44e09fff8e228aa59d9cb394"
        },
        "commit_message": "Rework the SqlBatchHandler\n\nGet rid of the blank \"hasNext()\" call, clarify the logic and factor\nout the anonymous inner class into a method local inner class (yes,\nsuch a thing exists).\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "110b71d27f398f8e44e09fff8e228aa59d9cb394": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "public Object invoke(Object target, Object[] args, HandleSupplier h)"
                ]
            },
            "e802af792b4c5480d9dadc29bc4b0aaa50a6ef6a": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "public Object invoke(Object target, Object[] args, HandleSupplier h)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bed76121bfc27906e520968b353a63192641a727",
        "previous_commit": "87d0446eae9bc0e867dbc28ab3108bb97417d3b4",
        "date": 1549648913,
        "releases": {
            "previous": "bed76121bfc27906e520968b353a63192641a727",
            "next": "bed76121bfc27906e520968b353a63192641a727"
        },
        "commit_message": "Split SqlObject classpath locator to it's own class (#1452)\n\n* Split classpath SQL locator to it's own class\r\n\r\nThis allows setting it project-wide via the SqlObjects config.\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bed76121bfc27906e520968b353a63192641a727": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/internal/UseClasspathSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.sqlobject.locator.internal.UseClasspathSqlLocatorImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ]
            },
            "87d0446eae9bc0e867dbc28ab3108bb97417d3b4": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/internal/UseClasspathSqlLocatorImpl.java": [
                    "public void org.jdbi.v3.sqlobject.locator.internal.UseClasspathSqlLocatorImpl.configureForType(ConfigRegistry registry, Annotation annotation, Class<?> sqlObjectType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "94d22c6f706ab22ba7b281bc45a3ebd1c79cb485",
        "previous_commit": "c153940f581c0c7f6f748d9cff57efce9885ce2b",
        "date": 1686678747,
        "releases": {
            "previous": "94d22c6f706ab22ba7b281bc45a3ebd1c79cb485",
            "next": "94d22c6f706ab22ba7b281bc45a3ebd1c79cb485"
        },
        "commit_message": "Fix sonar reported bugs and critical issues\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "94d22c6f706ab22ba7b281bc45a3ebd1c79cb485": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "Type getParameterType(Parameter parameter)"
                ]
            },
            "c153940f581c0c7f6f748d9cff57efce9885ce2b": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "Type getParameterType(Parameter parameter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "78dbaf119bed28ccd3de304893ea3ac10a0b36e3",
        "previous_commit": "648740caa354f8de3e0fe8a48a44a4abba40941e",
        "date": 1706664067,
        "releases": {
            "previous": "78dbaf119bed28ccd3de304893ea3ac10a0b36e3",
            "next": "78dbaf119bed28ccd3de304893ea3ac10a0b36e3"
        },
        "commit_message": "SqlObject: add `@Definition` annotation for defining computed constants\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "78dbaf119bed28ccd3de304893ea3ac10a0b36e3": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/AbstractSqlObjectFactory.java": [
                    "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(ExtensionMetadata.Builder builder)"
                ]
            },
            "648740caa354f8de3e0fe8a48a44a4abba40941e": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/AbstractSqlObjectFactory.java": [
                    "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(ExtensionMetadata.Builder builder)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2395072d7ef43d078d341f6cb8099a1bd3ee0181",
        "previous_commit": "636df165577a7d79d5345ff41f71d9d748289804",
        "date": 1550879592,
        "releases": {
            "previous": "2395072d7ef43d078d341f6cb8099a1bd3ee0181",
            "next": "2395072d7ef43d078d341f6cb8099a1bd3ee0181"
        },
        "commit_message": "EnumSetCollectorFactory: ecj compile fix\n\nEclipse's `ecj` is unhappy with the `EnumSet::add` of a wildcard type and causes an error.\nFactoring it out into a named type `E` seems to make it happier.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2395072d7ef43d078d341f6cb8099a1bd3ee0181": {
                "core/src/main/java/org/jdbi/v3/core/collector/EnumSetCollectorFactory.java": [
                    "public Collector<?, ?, ?> org.jdbi.v3.core.collector.EnumSetCollectorFactory.build(Type containerType)"
                ]
            },
            "636df165577a7d79d5345ff41f71d9d748289804": {
                "core/src/main/java/org/jdbi/v3/core/collector/EnumSetCollectorFactory.java": [
                    "public Collector<?, ?, ?> org.jdbi.v3.core.collector.EnumSetCollectorFactory.build(Type containerType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7c9e5d515baaebbdb78c6febd59222a343a01ae7",
        "previous_commit": "d42faf8b0c3f715206061be92c2107a5aeb3e42d",
        "date": 1686864906,
        "releases": {
            "previous": "7c9e5d515baaebbdb78c6febd59222a343a01ae7",
            "next": "7c9e5d515baaebbdb78c6febd59222a343a01ae7"
        },
        "commit_message": "Fix null return values for outparameters\n\n- converted the procedure tests in TestCallable to postgres\n- enabled the disabled tests (pg has outparameters)\n- investigated #1813 (and added a test)\n\nTurns out that do not correctly return null values for outparameters\n(we always return the default value if an out parameter is null). Fix\nthat by calling #wasNull() on the statement. Add a test.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7c9e5d515baaebbdb78c6febd59222a343a01ae7": {
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public <T> T org.jdbi.v3.core.statement.Call.invoke(Function<OutParameters, T> resultComputer)"
                ]
            },
            "d42faf8b0c3f715206061be92c2107a5aeb3e42d": {
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public <T> T org.jdbi.v3.core.statement.Call.invoke(Function<OutParameters, T> resultComputer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1288ce9ddb493e388cc5fb7a15d6ebb0efd7530a",
        "previous_commit": "34fc3b4387fb3eee4c1addaa7e38a2d0ccca0bac",
        "date": 1636504970,
        "releases": {
            "previous": "1288ce9ddb493e388cc5fb7a15d6ebb0efd7530a",
            "next": "1288ce9ddb493e388cc5fb7a15d6ebb0efd7530a"
        },
        "commit_message": "Primitives argument factory: also check for NullArgument\n\nFixes #1901\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1288ce9ddb493e388cc5fb7a15d6ebb0efd7530a": {
                "core/src/main/java/org/jdbi/v3/core/argument/PrimitivesArgumentFactory.java": [
                    "private Object org.jdbi.v3.core.argument.PrimitivesArgumentFactory.checkForNull(ConfigRegistry cfg, Type type, Object value)"
                ]
            },
            "34fc3b4387fb3eee4c1addaa7e38a2d0ccca0bac": {
                "core/src/main/java/org/jdbi/v3/core/argument/PrimitivesArgumentFactory.java": [
                    "private Object org.jdbi.v3.core.argument.PrimitivesArgumentFactory.checkForNull(ConfigRegistry cfg, Type type, Object value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "611c8ba9c77447bbf1053d5d9859e869b5f24d9b",
        "previous_commit": "92d76f1d2b36fe94a9390f112dd139f0f8a35b60",
        "date": 1562235756,
        "releases": {
            "previous": "611c8ba9c77447bbf1053d5d9859e869b5f24d9b",
            "next": "611c8ba9c77447bbf1053d5d9859e869b5f24d9b"
        },
        "commit_message": "review remarks\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "611c8ba9c77447bbf1053d5d9859e869b5f24d9b": {
                "core/src/main/java/org/jdbi/v3/core/mapper/PrimitiveMapperFactory.java": [
                    "private static <T> ColumnMapper<T> org.jdbi.v3.core.mapper.PrimitiveMapperFactory.primitiveMapper(ColumnGetter<T> getter)"
                ]
            },
            "92d76f1d2b36fe94a9390f112dd139f0f8a35b60": {
                "core/src/main/java/org/jdbi/v3/core/mapper/PrimitiveMapperFactory.java": [
                    "private static <T> ColumnMapper<T> org.jdbi.v3.core.mapper.PrimitiveMapperFactory.primitiveMapper(ColumnGetter<T> getter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7e35db3d6305a1fbfff45025666c9bec005873a1",
        "previous_commit": "75f4507d63b23fce8170de7d7dc197614ba06ff7",
        "date": 1554876642,
        "releases": {
            "previous": "7e35db3d6305a1fbfff45025666c9bec005873a1",
            "next": "7e35db3d6305a1fbfff45025666c9bec005873a1"
        },
        "commit_message": "Detect ambiguous interface multiple inheritance\n\nFixes #1497\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7e35db3d6305a1fbfff45025666c9bec005873a1": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "private Map<Method, Handler> org.jdbi.v3.sqlobject.SqlObjectFactory.methodHandlersFor(Class<?> sqlObjectType, Handlers registry, HandlerDecorators decorators)"
                ]
            },
            "75f4507d63b23fce8170de7d7dc197614ba06ff7": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "private Map<Method, Handler> org.jdbi.v3.sqlobject.SqlObjectFactory.methodHandlersFor(Class<?> sqlObjectType, Handlers registry, HandlerDecorators decorators)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "849006140a0b2f853ec97f4ca1b1ba6fc5ea2030",
        "previous_commit": "da0c4935b72564c722a0d16179e0a0a1918dbed5",
        "date": 1559848437,
        "releases": {
            "previous": "849006140a0b2f853ec97f4ca1b1ba6fc5ea2030",
            "next": "849006140a0b2f853ec97f4ca1b1ba6fc5ea2030"
        },
        "commit_message": "GenericTypes.box; QualifiedType.mapType cleanup\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "849006140a0b2f853ec97f4ca1b1ba6fc5ea2030": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            },
            "da0c4935b72564c722a0d16179e0a0a1918dbed5": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8f134c42f04f889ba252352548e77875f207cb27",
        "previous_commit": "b19c1fb06f1ad978caea2ff0bbfabb5061fadb09",
        "date": 1668120055,
        "releases": {
            "previous": "8f134c42f04f889ba252352548e77875f207cb27",
            "next": "8f134c42f04f889ba252352548e77875f207cb27"
        },
        "commit_message": "Fix bad concurrent test in stringtemplate4\n\nThis was hidden by the handle threadlocal and started popping up\nonce they were removed.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8f134c42f04f889ba252352548e77875f207cb27": {
                "core/src/main/java/org/jdbi/v3/core/statement/SqlStatements.java": [
                    "String org.jdbi.v3.core.statement.SqlStatements.preparedRender(String template, StatementContext ctx)"
                ]
            },
            "b19c1fb06f1ad978caea2ff0bbfabb5061fadb09": {
                "core/src/main/java/org/jdbi/v3/core/statement/SqlStatements.java": [
                    "String org.jdbi.v3.core.statement.SqlStatements.preparedRender(String template, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0b6f04d04011b1dcc28a0dfbbe6c8eb06562bd73",
        "previous_commit": "7ab58945bc0e85916aa6861f899385f0bd9977b9",
        "date": 1559851745,
        "releases": {
            "previous": "0b6f04d04011b1dcc28a0dfbbe6c8eb06562bd73",
            "next": "0b6f04d04011b1dcc28a0dfbbe6c8eb06562bd73"
        },
        "commit_message": "PreparedBatch: allow empty batches\n\nThis mirrors the behavior of normal `Batch`, and eliminates an error case\nthat is already otherwise correctly handled (by returning a no-element ResultBearing.)\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0b6f04d04011b1dcc28a0dfbbe6c8eb06562bd73": {
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()"
                ]
            },
            "7ab58945bc0e85916aa6861f899385f0bd9977b9": {
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6d159dbc3c5ba08c90aaf9578041cb1396598e27",
        "previous_commit": "a445a044e794e85692c1cdcb7a20e02feda638ff",
        "date": 1574808833,
        "releases": {
            "previous": "6d159dbc3c5ba08c90aaf9578041cb1396598e27",
            "next": "6d159dbc3c5ba08c90aaf9578041cb1396598e27"
        },
        "commit_message": "DurationColumnMapperFactory uses BigDecimal for math operations to avoid floating point precision issues\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6d159dbc3c5ba08c90aaf9578041cb1396598e27": {
                "postgres/src/main/java/org/jdbi/v3/postgres/DurationColumnMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.postgres.DurationColumnMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            },
            "a445a044e794e85692c1cdcb7a20e02feda638ff": {
                "postgres/src/main/java/org/jdbi/v3/postgres/DurationColumnMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.postgres.DurationColumnMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "97894d20866d2a57c07abd83e67f6e8f68f42dea",
        "previous_commit": "993941f0e6f9bfe2c44bb484359abd2b029294da",
        "date": 1563995980,
        "releases": {
            "previous": "97894d20866d2a57c07abd83e67f6e8f68f42dea",
            "next": "97894d20866d2a57c07abd83e67f6e8f68f42dea"
        },
        "commit_message": "Code review\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "97894d20866d2a57c07abd83e67f6e8f68f42dea": {
                "core/src/main/java/org/jdbi/v3/core/argument/EnumArgumentFactory.java": [
                    "private static <E extends Enum<E>> Optional<Argument> org.jdbi.v3.core.argument.EnumArgumentFactory.byName(E value, ConfigRegistry config)"
                ]
            },
            "993941f0e6f9bfe2c44bb484359abd2b029294da": {
                "core/src/main/java/org/jdbi/v3/core/argument/EnumArgumentFactory.java": [
                    "private static <E extends Enum<E>> Optional<Argument> org.jdbi.v3.core.argument.EnumArgumentFactory.byName(E value, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a4651ce31650cbe95713adc86762cf2f3b615652",
        "previous_commit": "cedfb9831bfc2efc04fcdb91328483a9f9342d94",
        "date": 1720212158,
        "releases": {
            "previous": "a4651ce31650cbe95713adc86762cf2f3b615652",
            "next": "a4651ce31650cbe95713adc86762cf2f3b615652"
        },
        "commit_message": "Fix close behavior of customized Connection\n\nFixes #2676\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a4651ce31650cbe95713adc86762cf2f3b615652": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Handle org.jdbi.v3.core.Jdbi.open()"
                ]
            },
            "cedfb9831bfc2efc04fcdb91328483a9f9342d94": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Handle org.jdbi.v3.core.Jdbi.open()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "94f3560d04f1832ef909d4b1a8d641935f65b102",
        "previous_commit": "b3954e729fb86c7f4fd31e2f80c7fb02eb8ae567",
        "date": 1681357487,
        "releases": {
            "previous": "94f3560d04f1832ef909d4b1a8d641935f65b102",
            "next": "94f3560d04f1832ef909d4b1a8d641935f65b102"
        },
        "commit_message": "Provide collect methods on ResultIterable\n\nThis is the first piece to address #2262\n\n- ResultIterable#set()\n- ResultIterable#collectToMap(keyFunction, valueFunction)\n\n- add test suite\n- some code reshuffling\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "94f3560d04f1832ef909d4b1a8d641935f65b102": {
                "core/src/main/java/org/jdbi/v3/core/result/ResultIterable.java": [
                    "static <T> ResultIterable<T> of(Supplier<ResultSet> resultSetSupplier, RowMapper<T> mapper, StatementContext ctx)"
                ]
            },
            "b3954e729fb86c7f4fd31e2f80c7fb02eb8ae567": {
                "core/src/main/java/org/jdbi/v3/core/result/ResultIterable.java": [
                    "static <T> ResultIterable<T> of(Supplier<ResultSet> resultSetSupplier, RowMapper<T> mapper, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e6e6d893c16cf4eb32823fdee60417fc32aa66df",
        "previous_commit": "f96376d73cb2455d535c8e6de2bc16543802dcb5",
        "date": 1551578554,
        "releases": {
            "previous": "e6e6d893c16cf4eb32823fdee60417fc32aa66df",
            "next": "e6e6d893c16cf4eb32823fdee60417fc32aa66df"
        },
        "commit_message": "Convert postgres plugin to use new get/set object factories\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e6e6d893c16cf4eb32823fdee60417fc32aa66df": {
                "core/src/main/java/org/jdbi/v3/core/mapper/GetObjectColumnMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.GetObjectColumnMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            },
            "f96376d73cb2455d535c8e6de2bc16543802dcb5": {
                "core/src/main/java/org/jdbi/v3/core/mapper/GetObjectColumnMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.GetObjectColumnMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9f823afd66bc552998b5cf27b645fc9fcd908e2a",
        "previous_commit": "82047081bb0f9f21f4b83be0cccdc5adf242c347",
        "date": 1686437694,
        "releases": {
            "previous": "9f823afd66bc552998b5cf27b645fc9fcd908e2a",
            "next": "9f823afd66bc552998b5cf27b645fc9fcd908e2a"
        },
        "commit_message": "fix sonar flagged code smells\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9f823afd66bc552998b5cf27b645fc9fcd908e2a": {
                "core/src/main/java/org/jdbi/v3/core/internal/exceptions/Unchecked.java": [
                    "public static <T> Consumer<T> org.jdbi.v3.core.internal.exceptions.Unchecked.consumer(CheckedConsumer<T> checkedConsumer)"
                ]
            },
            "82047081bb0f9f21f4b83be0cccdc5adf242c347": {
                "core/src/main/java/org/jdbi/v3/core/internal/exceptions/Unchecked.java": [
                    "public static <T> Consumer<T> org.jdbi.v3.core.internal.exceptions.Unchecked.consumer(CheckedConsumer<T> checkedConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5c18e5e4717629d8206849c52185e879cacdbede",
        "previous_commit": "731356ca3d58ed8782c6290f785555fd74aad787",
        "date": 1560467794,
        "releases": {
            "previous": "5c18e5e4717629d8206849c52185e879cacdbede",
            "next": "5c18e5e4717629d8206849c52185e879cacdbede"
        },
        "commit_message": "Allow configuring StatementException message generation\n\nFixes #1532\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5c18e5e4717629d8206849c52185e879cacdbede": {
                "core/src/main/java/org/jdbi/v3/core/statement/StatementException.java": [
                    "public String org.jdbi.v3.core.statement.StatementException.getMessage()"
                ]
            },
            "731356ca3d58ed8782c6290f785555fd74aad787": {
                "core/src/main/java/org/jdbi/v3/core/statement/StatementException.java": [
                    "public String org.jdbi.v3.core.statement.StatementException.getMessage()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "563240d50d60eed0c811e565a694d49ae477cab3",
        "previous_commit": "8f74600d14ebf55794eddc9a130a0613b82b178d",
        "date": 1689281471,
        "releases": {
            "previous": "563240d50d60eed0c811e565a694d49ae477cab3",
            "next": "563240d50d60eed0c811e565a694d49ae477cab3"
        },
        "commit_message": "AbstractSqlObjectFactory: extract constants\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "563240d50d60eed0c811e565a694d49ae477cab3": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/AbstractSqlObjectFactory.java": [
                    "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(ExtensionMetadata.Builder builder)"
                ]
            },
            "8f74600d14ebf55794eddc9a130a0613b82b178d": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/AbstractSqlObjectFactory.java": [
                    "public void org.jdbi.v3.sqlobject.AbstractSqlObjectFactory.buildExtensionMetadata(ExtensionMetadata.Builder builder)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a31e1a7fac39b44115cf30b5b803e9844bd25d68",
        "previous_commit": "f6daf82e502235668e48de22ca26f809e7d8dc1f",
        "date": 1640287894,
        "releases": {
            "previous": "a31e1a7fac39b44115cf30b5b803e9844bd25d68",
            "next": "a31e1a7fac39b44115cf30b5b803e9844bd25d68"
        },
        "commit_message": "Use instance configured ConfigRegistry correctly\n\nThere is a minor correctness issue if a caller would register an\ninstance configurer that does not return itself but e.g. a modified\ncopy of the registry. This was actually found by error prone.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a31e1a7fac39b44115cf30b5b803e9844bd25d68": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handle)"
                ]
            },
            "f6daf82e502235668e48de22ca26f809e7d8dc1f": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "public <E> E org.jdbi.v3.sqlobject.SqlObjectFactory.attach(Class<E> extensionType, HandleSupplier handle)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ad2ccfcc82cc05cf1a5a99d7fab7e705cc133bed",
        "previous_commit": "37b8329ccc9e5332b01445413af1cd74e9f9da26",
        "date": 1600316263,
        "releases": {
            "previous": "ad2ccfcc82cc05cf1a5a99d7fab7e705cc133bed",
            "next": "ad2ccfcc82cc05cf1a5a99d7fab7e705cc133bed"
        },
        "commit_message": "ConfigRegistry: use new MethodHandle lookup and memoize supplier\n\n~ 20% increase in H2.fluentSelectOne benchmark\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ad2ccfcc82cc05cf1a5a99d7fab7e705cc133bed": {
                "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java": [
                    "public <C extends JdbiConfig<C>> C org.jdbi.v3.core.config.ConfigRegistry.get(Class<C> configClass)"
                ]
            },
            "37b8329ccc9e5332b01445413af1cd74e9f9da26": {
                "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java": [
                    "public <C extends JdbiConfig<C>> C org.jdbi.v3.core.config.ConfigRegistry.get(Class<C> configClass)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a8c5444c4941edf39c3a06857197a98b8254a91f",
        "previous_commit": "cda95e82dd4f1e495b7fc557c62caedfe00eadef",
        "date": 1548805745,
        "releases": {
            "previous": "a8c5444c4941edf39c3a06857197a98b8254a91f",
            "next": "a8c5444c4941edf39c3a06857197a98b8254a91f"
        },
        "commit_message": "LocalTransactionHandler: handle Error thrown from txn\n\nFixes #1405\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a8c5444c4941edf39c3a06857197a98b8254a91f": {
                "core/src/main/java/org/jdbi/v3/core/transaction/LocalTransactionHandler.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.transaction.LocalTransactionHandler.inTransaction(Handle handle, HandleCallback<R, X> callback)"
                ]
            },
            "cda95e82dd4f1e495b7fc557c62caedfe00eadef": {
                "core/src/main/java/org/jdbi/v3/core/transaction/LocalTransactionHandler.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.transaction.LocalTransactionHandler.inTransaction(Handle handle, HandleCallback<R, X> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "15fd470a4d240b291d08061441a30ca2db6b6642",
        "previous_commit": "61252c02adc475f3a714f38cfdc1824a7bad5877",
        "date": 1548964089,
        "releases": {
            "previous": "15fd470a4d240b291d08061441a30ca2db6b6642",
            "next": "15fd470a4d240b291d08061441a30ca2db6b6642"
        },
        "commit_message": "DefineNamedBindings: use a proxy Statement rather than inspecting for `NullArgument`\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "15fd470a4d240b291d08061441a30ca2db6b6642": {
                "core/src/main/java/org/jdbi/v3/core/statement/DefineNamedBindingsStatementCustomizer.java": [
                    "public void org.jdbi.v3.core.statement.DefineNamedBindingsStatementCustomizer.beforeTemplating(PreparedStatement stmt, StatementContext ctx)"
                ]
            },
            "61252c02adc475f3a714f38cfdc1824a7bad5877": {
                "core/src/main/java/org/jdbi/v3/core/statement/DefineNamedBindingsStatementCustomizer.java": [
                    "public void org.jdbi.v3.core.statement.DefineNamedBindingsStatementCustomizer.beforeTemplating(PreparedStatement stmt, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8be51a575680889ef6f6af562a7a50bc18af75f9",
        "previous_commit": "7a17d5090c4b2e358d2306d859a1ac1f7b927c43",
        "date": 1666920055,
        "releases": {
            "previous": "8be51a575680889ef6f6af562a7a50bc18af75f9",
            "next": "8be51a575680889ef6f6af562a7a50bc18af75f9"
        },
        "commit_message": "Replace ConnectionCloser with Cleanable\n\nRemove a single-use interface that works just as well with a lambda.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8be51a575680889ef6f6af562a7a50bc18af75f9": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Handle org.jdbi.v3.core.Jdbi.open()"
                ]
            },
            "7a17d5090c4b2e358d2306d859a1ac1f7b927c43": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Handle org.jdbi.v3.core.Jdbi.open()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e08ddf2bc5cc1ce25e3005930d292caa49839616",
        "previous_commit": "ea1870c7e279f91483d3edb5f26f5167dd1efdaa",
        "date": 1666921184,
        "releases": {
            "previous": "e08ddf2bc5cc1ce25e3005930d292caa49839616",
            "next": "e08ddf2bc5cc1ce25e3005930d292caa49839616"
        },
        "commit_message": "Add HandleListener to monitor the handle lifecycle\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e08ddf2bc5cc1ce25e3005930d292caa49839616": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Handle org.jdbi.v3.core.Jdbi.open()"
                ]
            },
            "ea1870c7e279f91483d3edb5f26f5167dd1efdaa": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Handle org.jdbi.v3.core.Jdbi.open()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9091ae4d463cf7069b23870dc614ccf72428f2c5",
        "previous_commit": "712e9c0ecc5dd1034e68dd9f4e4641ceb0c46dfb",
        "date": 1557272877,
        "releases": {
            "previous": "9091ae4d463cf7069b23870dc614ccf72428f2c5",
            "next": "9091ae4d463cf7069b23870dc614ccf72428f2c5"
        },
        "commit_message": "Upgrade PMD, remove workaround for PMD bogus error\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9091ae4d463cf7069b23870dc614ccf72428f2c5": {
                "core/src/main/java/org/jdbi/v3/core/internal/IterableLike.java": [
                    "public static List<Object> org.jdbi.v3.core.internal.IterableLike.toList(Object iterable)"
                ]
            },
            "712e9c0ecc5dd1034e68dd9f4e4641ceb0c46dfb": {
                "core/src/main/java/org/jdbi/v3/core/internal/IterableLike.java": [
                    "public static List<Object> org.jdbi.v3.core.internal.IterableLike.toList(Object iterable)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ff59914dec3c02baf5b473d450c107b886c6d3e0",
        "previous_commit": "f9c6e26e2847cc82c879d1190e5f85df0125ffde",
        "date": 1622589722,
        "releases": {
            "previous": "ff59914dec3c02baf5b473d450c107b886c6d3e0",
            "next": "ff59914dec3c02baf5b473d450c107b886c6d3e0"
        },
        "commit_message": "Unchecked Sneaky: improve code flow analysis by not returning spurious null\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ff59914dec3c02baf5b473d450c107b886c6d3e0": {
                "core/src/main/java/org/jdbi/v3/core/internal/exceptions/Sneaky.java": [
                    "public static DummyException org.jdbi.v3.core.internal.exceptions.Sneaky.throwAnyway(Throwable t)"
                ]
            },
            "f9c6e26e2847cc82c879d1190e5f85df0125ffde": {
                "core/src/main/java/org/jdbi/v3/core/internal/exceptions/Sneaky.java": [
                    "public static DummyException org.jdbi.v3.core.internal.exceptions.Sneaky.throwAnyway(Throwable t)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ccaa6e56e497e9c82756b54df154dc9ddd5d9c2d",
        "previous_commit": "b546d20f25f21f617d08c310d3589b614e37f74a",
        "date": 1569734316,
        "releases": {
            "previous": "ccaa6e56e497e9c82756b54df154dc9ddd5d9c2d",
            "next": "ccaa6e56e497e9c82756b54df154dc9ddd5d9c2d"
        },
        "commit_message": "Extract MemoizingSupplier\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ccaa6e56e497e9c82756b54df154dc9ddd5d9c2d": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "public Supplier<InContextInvoker> org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lazyInvoker(Object target, Method method, HandleSupplier handle, ConfigRegistry instanceConfig)"
                ]
            },
            "b546d20f25f21f617d08c310d3589b614e37f74a": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "public Supplier<InContextInvoker> org.jdbi.v3.sqlobject.internal.SqlObjectInitData.lazyInvoker(Object target, Method method, HandleSupplier handle, ConfigRegistry instanceConfig)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2db70ef664628c66e1496de135259a0390dea1f6",
        "previous_commit": "10ff3192606d0288efecd38fbf7e5b687450a8c0",
        "date": 1554414350,
        "releases": {
            "previous": "2db70ef664628c66e1496de135259a0390dea1f6",
            "next": "2db70ef664628c66e1496de135259a0390dea1f6"
        },
        "commit_message": "@Unmappable: skip property entirely\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2db70ef664628c66e1496de135259a0390dea1f6": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            },
            "10ff3192606d0288efecd38fbf7e5b687450a8c0": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3c0c481236dddaba8c8d92618272325efd86e33c",
        "previous_commit": "00efbd11ad8551dd3704670cd00f1691f2c00693",
        "date": 1562655489,
        "releases": {
            "previous": "3c0c481236dddaba8c8d92618272325efd86e33c",
            "next": "3c0c481236dddaba8c8d92618272325efd86e33c"
        },
        "commit_message": "fix: NPE if @DefineList annotated parameter is supplied with an ImmutableList, see https://docs.oracle.com/javase/8/docs/api/java/util/List.html#contains-java.lang.Object-\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3c0c481236dddaba8c8d92618272325efd86e33c": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/DefineListFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.DefineListFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ]
            },
            "00efbd11ad8551dd3704670cd00f1691f2c00693": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/DefineListFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.customizer.internal.DefineListFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a16675cba7415c61dd15004183d1ad4551c3c145",
        "previous_commit": "d3c5a658e0055039aa47447f177de4e92e366176",
        "date": 1601665378,
        "releases": {
            "previous": "a16675cba7415c61dd15004183d1ad4551c3c145",
            "next": "a16675cba7415c61dd15004183d1ad4551c3c145"
        },
        "commit_message": "Qualifiers: add a qualified type cache\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a16675cba7415c61dd15004183d1ad4551c3c145": {
                "core/src/main/java/org/jdbi/v3/core/qualifier/Qualifiers.java": [
                    "public <ELEM extends AnnotatedElement & Type> QualifiedType<?> org.jdbi.v3.core.qualifier.Qualifiers.qualifiedTypeOf(ELEM type)"
                ]
            },
            "d3c5a658e0055039aa47447f177de4e92e366176": {
                "core/src/main/java/org/jdbi/v3/core/qualifier/Qualifiers.java": [
                    "public <ELEM extends AnnotatedElement & Type> QualifiedType<?> org.jdbi.v3.core.qualifier.Qualifiers.qualifiedTypeOf(ELEM type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "714825ac090c2be9076304a1196e28d0ef40587f",
        "previous_commit": "66c469ec3a197ce1cbc1a72972aabd83ce491295",
        "date": 1562608967,
        "releases": {
            "previous": "714825ac090c2be9076304a1196e28d0ef40587f",
            "next": "714825ac090c2be9076304a1196e28d0ef40587f"
        },
        "commit_message": "Prettify truncated StatementExceptionS to signal modifications\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "714825ac090c2be9076304a1196e28d0ef40587f": {
                "core/src/main/java/org/jdbi/v3/core/statement/StatementExceptions.java": [
                    "protected static String org.jdbi.v3.core.statement.StatementExceptions.limit(String s, int len)"
                ]
            },
            "66c469ec3a197ce1cbc1a72972aabd83ce491295": {
                "core/src/main/java/org/jdbi/v3/core/statement/StatementExceptions.java": [
                    "private static String org.jdbi.v3.core.statement.StatementExceptions.limit(String s, int len)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "da0c4935b72564c722a0d16179e0a0a1918dbed5",
        "previous_commit": "7ab58945bc0e85916aa6861f899385f0bd9977b9",
        "date": 1559848437,
        "releases": {
            "previous": "da0c4935b72564c722a0d16179e0a0a1918dbed5",
            "next": "da0c4935b72564c722a0d16179e0a0a1918dbed5"
        },
        "commit_message": "Immutables: respect `@Value.Default` when mapping nulled primitives\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "da0c4935b72564c722a0d16179e0a0a1918dbed5": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            },
            "7ab58945bc0e85916aa6861f899385f0bd9977b9": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/PojoMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.internal.PojoMapper<T>.specialize0(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "97f2bac90ada5f5eb4aeb37f632581979d0cf084",
        "previous_commit": "cb89fca6014abf3ca8a1f86320ca966819c962cf",
        "date": 1666837122,
        "releases": {
            "previous": "97f2bac90ada5f5eb4aeb37f632581979d0cf084",
            "next": "97f2bac90ada5f5eb4aeb37f632581979d0cf084"
        },
        "commit_message": "Use statement builder for cleanup\n\nSimilar to SqlStatement#internalExecute, the statement should be cleaned by the\nstatement builder that created it, not just closed. This gives the builder a chance\nto do anything with it if necessary.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "97f2bac90ada5f5eb4aeb37f632581979d0cf084": {
                "core/src/main/java/org/jdbi/v3/core/statement/Batch.java": [
                    "public int[] org.jdbi.v3.core.statement.Batch.execute()"
                ]
            },
            "cb89fca6014abf3ca8a1f86320ca966819c962cf": {
                "core/src/main/java/org/jdbi/v3/core/statement/Batch.java": [
                    "public int[] org.jdbi.v3.core.statement.Batch.execute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c8a61ef8beecded05067da9f5259ea19418cb468",
        "previous_commit": "20ddfdecd761b21bdad41b3ce38ccd659bfd54bd",
        "date": 1565213573,
        "releases": {
            "previous": "c8a61ef8beecded05067da9f5259ea19418cb468",
            "next": "c8a61ef8beecded05067da9f5259ea19418cb468"
        },
        "commit_message": "stop returning to yourself\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c8a61ef8beecded05067da9f5259ea19418cb468": {
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public OutParameters org.jdbi.v3.core.statement.Call.invoke()"
                ]
            },
            "20ddfdecd761b21bdad41b3ce38ccd659bfd54bd": {
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public OutParameters org.jdbi.v3.core.statement.Call.invoke()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7e511593f4c3fc75f98809f8b1ab2db54c45bdf2",
        "previous_commit": "da7e51f7bd51b2638e4e439e1016db236f9bc349",
        "date": 1686705431,
        "releases": {
            "previous": "7e511593f4c3fc75f98809f8b1ab2db54c45bdf2",
            "next": "7e511593f4c3fc75f98809f8b1ab2db54c45bdf2"
        },
        "commit_message": "fix potential NPE\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7e511593f4c3fc75f98809f8b1ab2db54c45bdf2": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "Type getParameterType(Parameter parameter)"
                ]
            },
            "da7e51f7bd51b2638e4e439e1016db236f9bc349": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlBatchHandler.java": [
                    "Type getParameterType(Parameter parameter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fea9f716d920b37603b62400d2b93388a785211b",
        "previous_commit": "31dc574a0f36795e9bacfdd64d5f6e575fedb7a4",
        "date": 1640499292,
        "releases": {
            "previous": "fea9f716d920b37603b62400d2b93388a785211b",
            "next": "fea9f716d920b37603b62400d2b93388a785211b"
        },
        "commit_message": "error-prone: DoNotClaimAnnotations fixes\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fea9f716d920b37603b62400d2b93388a785211b": {
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "public boolean org.jdbi.v3.generator.GenerateSqlObjectProcessor.process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)"
                ]
            },
            "31dc574a0f36795e9bacfdd64d5f6e575fedb7a4": {
                "generator/src/main/java/org/jdbi/v3/generator/GenerateSqlObjectProcessor.java": [
                    "public boolean org.jdbi.v3.generator.GenerateSqlObjectProcessor.process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b8daf66c887a7be9a9f49cf4f94ddaaa47fc7167",
        "previous_commit": "e931519ecb67b9f8ff286c605c560006b971f9b7",
        "date": 1708584763,
        "releases": {
            "previous": "b8daf66c887a7be9a9f49cf4f94ddaaa47fc7167",
            "next": "b8daf66c887a7be9a9f49cf4f94ddaaa47fc7167"
        },
        "commit_message": "Handle constructing record classes\n\nGet paramater types for records from declared fields.\nRecord constructors lose generic type information.\nThis is due to https://bugs.openjdk.org/browse/JDK-8320575.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b8daf66c887a7be9a9f49cf4f94ddaaa47fc7167": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.createSpecializedRowMapper(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            },
            "e931519ecb67b9f8ff286c605c560006b971f9b7": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.ConstructorMapper<T>.createSpecializedRowMapper(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "04af1c60e4edbfa7f5c3a7772751cad00f70cc41",
        "previous_commit": "c0676175aeaf3e8ed5fba7e4fbbd1c0b2c644ecc",
        "date": 1556530684,
        "releases": {
            "previous": "04af1c60e4edbfa7f5c3a7772751cad00f70cc41",
            "next": "04af1c60e4edbfa7f5c3a7772751cad00f70cc41"
        },
        "commit_message": "fix #1516\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "04af1c60e4edbfa7f5c3a7772751cad00f70cc41": {
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()"
                ]
            },
            "c0676175aeaf3e8ed5fba7e4fbbd1c0b2c644ecc": {
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4bdb57bea4075dbabad97c5d6f3fc16da2b95b89",
        "previous_commit": "5a81f192f2e85cebbb3cbab88fa6d083d23122a5",
        "date": 1617324280,
        "releases": {
            "previous": "4bdb57bea4075dbabad97c5d6f3fc16da2b95b89",
            "next": "4bdb57bea4075dbabad97c5d6f3fc16da2b95b89"
        },
        "commit_message": "replace string with char usage.\n\nHighlighted by newer versions of spotbugs.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4bdb57bea4075dbabad97c5d6f3fc16da2b95b89": {
                "core/src/main/java/org/jdbi/v3/core/qualifier/QualifiedType.java": [
                    "public String org.jdbi.v3.core.qualifier.QualifiedType<T>.toString()"
                ]
            },
            "5a81f192f2e85cebbb3cbab88fa6d083d23122a5": {
                "core/src/main/java/org/jdbi/v3/core/qualifier/QualifiedType.java": [
                    "public String org.jdbi.v3.core.qualifier.QualifiedType<T>.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c7959142ab00486003fc1991bf14b0c6a6d08359",
        "previous_commit": "448e5b71914f29ee04cf49bf73e8f25b3ada5496",
        "date": 1691555452,
        "releases": {
            "previous": "c7959142ab00486003fc1991bf14b0c6a6d08359",
            "next": "c7959142ab00486003fc1991bf14b0c6a6d08359"
        },
        "commit_message": "Revise the HandleCallback decorator code\n\n- Rename \"Handler\" to \"HandleCallbackDecorator\".\n  \"Handler\" is a way too generic name and there is potential for\n  confusion with \"Handle\" which is a main concept in Jdbi while this\n  change introduces a minor feature.\n- Mark the added code with `@Alpha` annotation, as the API should not\n  have been set in stone.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c7959142ab00486003fc1991bf14b0c6a6d08359": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Jdbi.withHandle(HandleCallback<R, X> callback)"
                ]
            },
            "448e5b71914f29ee04cf49bf73e8f25b3ada5496": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Jdbi.withHandle(HandleCallback<R, X> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e40dec19c8459f4c4e2a6f6477531661e149d5e2",
        "previous_commit": "3dda65db640ace6bb404a3a561c85645eea1ef26",
        "date": 1549647008,
        "releases": {
            "previous": "e40dec19c8459f4c4e2a6f6477531661e149d5e2",
            "next": "e40dec19c8459f4c4e2a6f6477531661e149d5e2"
        },
        "commit_message": "pass the type arg to gson for serialization\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e40dec19c8459f4c4e2a6f6477531661e149d5e2": {
                "gson2/src/main/java/org/jdbi/v3/gson2/GsonJsonMapper.java": [
                    "public String org.jdbi.v3.gson2.GsonJsonMapper.toJson(Type type, Object value, ConfigRegistry config)"
                ]
            },
            "3dda65db640ace6bb404a3a561c85645eea1ef26": {
                "gson2/src/main/java/org/jdbi/v3/gson2/GsonJsonMapper.java": [
                    "public String org.jdbi.v3.gson2.GsonJsonMapper.toJson(Type type, Object value, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5cfe3721cc6630dbef6eb0e8bf691c8bdc563aad",
        "previous_commit": "270d158e4a3f00f5a81fdd22931f707f000ea8cc",
        "date": 1699271481,
        "releases": {
            "previous": "5cfe3721cc6630dbef6eb0e8bf691c8bdc563aad",
            "next": "5cfe3721cc6630dbef6eb0e8bf691c8bdc563aad"
        },
        "commit_message": "Spring Jdbi repositories:\n- add @EnableJdbiRepositories and @JdbiRepository annotations\n- add jdbi repository scanner and jdbi repository bean factory\n- proxy created extensions for spring transaction support\n- (bug fix) close handler when spring transaction is closed\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5cfe3721cc6630dbef6eb0e8bf691c8bdc563aad": {
                "spring5/src/main/java/org/jdbi/v3/spring5/JdbiUtil.java": [
                    "public void org.jdbi.v3.spring5.JdbiUtil.beforeCompletion()"
                ]
            },
            "270d158e4a3f00f5a81fdd22931f707f000ea8cc": {
                "spring5/src/main/java/org/jdbi/v3/spring5/JdbiUtil.java": [
                    "public void org.jdbi.v3.spring5.JdbiUtil.beforeCompletion()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "506b8d28fd110728410f8b5f950e7bfa7c349fe8",
        "previous_commit": "17d347a65d94ba557e40c2e6c37675e6651f6e32",
        "date": 1569720116,
        "releases": {
            "previous": "506b8d28fd110728410f8b5f950e7bfa7c349fe8",
            "next": "506b8d28fd110728410f8b5f950e7bfa7c349fe8"
        },
        "commit_message": "BeanPropertyArguments: use bean property cache\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "506b8d28fd110728410f8b5f950e7bfa7c349fe8": {
                "core/src/main/java/org/jdbi/v3/core/argument/BeanPropertyArguments.java": [
                    "protected NamedArgumentFinder org.jdbi.v3.core.argument.BeanPropertyArguments.getNestedArgumentFinder(Object o)"
                ]
            },
            "17d347a65d94ba557e40c2e6c37675e6651f6e32": {
                "core/src/main/java/org/jdbi/v3/core/argument/BeanPropertyArguments.java": [
                    "protected NamedArgumentFinder org.jdbi.v3.core.argument.BeanPropertyArguments.getNestedArgumentFinder(Object o)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6a37d647977a24bc1befb4a688f2aeec1ebd1af2",
        "previous_commit": "0fb59dbbbe5054364d23fe16967511f52f951d22",
        "date": 1674341166,
        "releases": {
            "previous": "6a37d647977a24bc1befb4a688f2aeec1ebd1af2",
            "next": "6a37d647977a24bc1befb4a688f2aeec1ebd1af2"
        },
        "commit_message": "Remove caffeine dependency from core\n\nReplace the direct caffeine reference with an internal cache object\nand provide a simple FIFO cache implementation.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6a37d647977a24bc1befb4a688f2aeec1ebd1af2": {
                "core/src/main/java/org/jdbi/v3/core/statement/SqlStatements.java": [
                    "String org.jdbi.v3.core.statement.SqlStatements.preparedRender(String template, StatementContext ctx)"
                ]
            },
            "0fb59dbbbe5054364d23fe16967511f52f951d22": {
                "core/src/main/java/org/jdbi/v3/core/statement/SqlStatements.java": [
                    "String org.jdbi.v3.core.statement.SqlStatements.preparedRender(String template, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "77869416c2cb9542829c77b65f8a1ea15222d5cd",
        "previous_commit": "4f6d0373abb68b1398ae84257955dda5c54fc94f",
        "date": 1565891599,
        "releases": {
            "previous": "77869416c2cb9542829c77b65f8a1ea15222d5cd",
            "next": "77869416c2cb9542829c77b65f8a1ea15222d5cd"
        },
        "commit_message": "OnDemand: include all declared interfaces\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "77869416c2cb9542829c77b65f8a1ea15222d5cd": {
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "public static <E> E org.jdbi.v3.core.internal.OnDemandExtensions.create(Jdbi db, Class<E> extensionType, Class<?>... extraTypes)"
                ]
            },
            "4f6d0373abb68b1398ae84257955dda5c54fc94f": {
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "public static <E> E org.jdbi.v3.core.internal.OnDemandExtensions.create(Jdbi db, Class<E> extensionType, Class<?>... extraTypes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7131783d84c1b01dc73096d93d814adc36a964fe",
        "previous_commit": "a137852d7c25d4966771be957d8e6e86b7435cb8",
        "date": 1600218184,
        "releases": {
            "previous": "7131783d84c1b01dc73096d93d814adc36a964fe",
            "next": "7131783d84c1b01dc73096d93d814adc36a964fe"
        },
        "commit_message": "AnnotationSqlLocator: computation is surprisingly expensive due to annotation and stream usage, so cache it\n~20% improvement on H2 sqlobject insert bean benchmark\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7131783d84c1b01dc73096d93d814adc36a964fe": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/AnnotationSqlLocator.java": [
                    "public String org.jdbi.v3.sqlobject.locator.AnnotationSqlLocator.locate(Class<?> sqlObjectType, Method method, ConfigRegistry config)"
                ]
            },
            "a137852d7c25d4966771be957d8e6e86b7435cb8": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/locator/AnnotationSqlLocator.java": [
                    "public String org.jdbi.v3.sqlobject.locator.AnnotationSqlLocator.locate(Class<?> sqlObjectType, Method method, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b38160c0d5c5044b944544112853f8333dcc0bb5",
        "previous_commit": "2583c158f56e0158e1bd0da3835d41f7c6655d1c",
        "date": 1566371586,
        "releases": {
            "previous": "b38160c0d5c5044b944544112853f8333dcc0bb5",
            "next": "b38160c0d5c5044b944544112853f8333dcc0bb5"
        },
        "commit_message": "ambiguous api change?\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b38160c0d5c5044b944544112853f8333dcc0bb5": {
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            },
            "2583c158f56e0158e1bd0da3835d41f7c6655d1c": {
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1a6f069e7b216f5141d5fd8b6d65f6710e454af9",
        "previous_commit": "6aa339523e6ce5e75173f42eebd0ad632ea85d67",
        "date": 1669172384,
        "releases": {
            "previous": "1a6f069e7b216f5141d5fd8b6d65f6710e454af9",
            "next": "1a6f069e7b216f5141d5fd8b6d65f6710e454af9"
        },
        "commit_message": "Performance fix for StatementContext#close\n\nSkip most of the execution if there are no cleanables.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1a6f069e7b216f5141d5fd8b6d65f6710e454af9": {
                "core/src/main/java/org/jdbi/v3/core/statement/StatementContext.java": [
                    "public void org.jdbi.v3.core.statement.StatementContext.close()"
                ]
            },
            "6aa339523e6ce5e75173f42eebd0ad632ea85d67": {
                "core/src/main/java/org/jdbi/v3/core/statement/StatementContext.java": [
                    "public void org.jdbi.v3.core.statement.StatementContext.close()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f280dd2ceae04635c999a0345b5129a5464f7c54",
        "previous_commit": "b53a2fa07cdf05c44ab577b742a8a03f1f718a17",
        "date": 1710433581,
        "releases": {
            "previous": "f280dd2ceae04635c999a0345b5129a5464f7c54",
            "next": "f280dd2ceae04635c999a0345b5129a5464f7c54"
        },
        "commit_message": "ConstructorInstanceFactory: clean up some warnings and flatten stack a bit\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f280dd2ceae04635c999a0345b5129a5464f7c54": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorInstanceFactory.java": [
                    "T org.jdbi.v3.core.mapper.reflect.ConstructorInstanceFactory<T>.newInstance(Object... params)"
                ]
            },
            "b53a2fa07cdf05c44ab577b742a8a03f1f718a17": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/ConstructorInstanceFactory.java": [
                    "T org.jdbi.v3.core.mapper.reflect.ConstructorInstanceFactory<T>.newInstance(Object... params)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6cbc9f1927ba63d83e15ed12cd773206046f6b40",
        "previous_commit": "d2d00d8646458057094390597d713fe6470a10a4",
        "date": 1637111054,
        "releases": {
            "previous": "6cbc9f1927ba63d83e15ed12cd773206046f6b40",
            "next": "6cbc9f1927ba63d83e15ed12cd773206046f6b40"
        },
        "commit_message": "Resolve generic types on bean property arguments when the bean itself is generic\n\nFixes #1914\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6cbc9f1927ba63d83e15ed12cd773206046f6b40": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "private QualifiedType<?> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.determineQualifiedType()"
                ]
            },
            "d2d00d8646458057094390597d713fe6470a10a4": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "private QualifiedType<?> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.determineQualifiedType()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "657125f80f5f0044c5ab945238ca350807aa16c4",
        "previous_commit": "f268e3a5a4315bd649c5bd8ecf7ae5ba631cc2d6",
        "date": 1664407563,
        "releases": {
            "previous": "657125f80f5f0044c5ab945238ca350807aa16c4",
            "next": "657125f80f5f0044c5ab945238ca350807aa16c4"
        },
        "commit_message": "Alternate fix for Issue 2109\n\nExtend the SqlArrayType class to provide information for the element type of\nthe backing array. Use a byte[] for bytea arrays, fall back to Object otherwise.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "657125f80f5f0044c5ab945238ca350807aa16c4": {
                "postgres/src/main/java/org/jdbi/v3/postgres/internal/ByteaArrayType.java": [
                    "public Object org.jdbi.v3.postgres.internal.ByteaArrayType.convertArrayElement(byte[] element)"
                ]
            },
            "f268e3a5a4315bd649c5bd8ecf7ae5ba631cc2d6": {
                "postgres/src/main/java/org/jdbi/v3/postgres/internal/ByteaArrayType.java": [
                    "public Object org.jdbi.v3.postgres.internal.ByteaArrayType.convertArrayElement(byte[] element)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9658e6ce0b4110e9eb48f095b15e73d95288dcd7",
        "previous_commit": "471d28ff6e833900b116c68e91c71a61ec67692f",
        "date": 1547257500,
        "releases": {
            "previous": "9658e6ce0b4110e9eb48f095b15e73d95288dcd7",
            "next": "9658e6ce0b4110e9eb48f095b15e73d95288dcd7"
        },
        "commit_message": "caching strategy 2\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9658e6ce0b4110e9eb48f095b15e73d95288dcd7": {
                "core/src/main/java/org/jdbi/v3/core/qualifier/Qualifiers.java": [
                    "public static Set<Annotation> org.jdbi.v3.core.qualifier.Qualifiers.getQualifiers(AnnotatedElement... elements)"
                ]
            },
            "471d28ff6e833900b116c68e91c71a61ec67692f": {
                "core/src/main/java/org/jdbi/v3/core/qualifier/Qualifiers.java": [
                    "public static Set<Annotation> org.jdbi.v3.core.qualifier.Qualifiers.getQualifiers(AnnotatedElement... elements)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "be553b71e9ad0393042b7e3a541dcc719663a6db",
        "previous_commit": "581a51eb373693d30cd9e6b7e5ce8c736a80e2d2",
        "date": 1662958974,
        "releases": {
            "previous": "be553b71e9ad0393042b7e3a541dcc719663a6db",
            "next": "be553b71e9ad0393042b7e3a541dcc719663a6db"
        },
        "commit_message": "prefer setter annotations over getter annotations\n\nAs all of the mappers deal with mapping data onto beans (which they use the setters for),\nthey should also prefer the annotations found on the setter over the annotations on the getter.\n\nThis PR also splits the very unwieldy and confusing BeanMapperTest into three separate tests,\none focusing on general bean mapper properties, one for the PropagateNullable tests and one for\nNested tests.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "be553b71e9ad0393042b7e3a541dcc719663a6db": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "public <A extends Annotation> Optional<A> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.getAnnotation(Class<A> anno)"
                ]
            },
            "581a51eb373693d30cd9e6b7e5ce8c736a80e2d2": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "public <A extends Annotation> Optional<A> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.getAnnotation(Class<A> anno)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d3bc0298cc01edd3614e951fd9ec7a31dd873d28",
        "previous_commit": "a4c8a06909e6c884010eaecbe69cf071142c6ec0",
        "date": 1576353427,
        "releases": {
            "previous": "d3bc0298cc01edd3614e951fd9ec7a31dd873d28",
            "next": "d3bc0298cc01edd3614e951fd9ec7a31dd873d28"
        },
        "commit_message": "ArgumentFactory.Preparable: make prePreparedTypes default\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d3bc0298cc01edd3614e951fd9ec7a31dd873d28": {
                "core/src/main/java/org/jdbi/v3/core/argument/BuiltInArgumentFactory.java": [
                    "public Collection<? extends Type> org.jdbi.v3.core.argument.BuiltInArgumentFactory.prePreparedTypes()"
                ]
            },
            "a4c8a06909e6c884010eaecbe69cf071142c6ec0": {
                "core/src/main/java/org/jdbi/v3/core/argument/BuiltInArgumentFactory.java": [
                    "public Collection<? extends Type> org.jdbi.v3.core.argument.BuiltInArgumentFactory.prePreparedTypes()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c88238ba88dfadbadfdb45ebfb967a91a788e06a",
        "previous_commit": "7649c21738ed3a3a414a4a909fe615af1bf428cf",
        "date": 1724098413,
        "releases": {
            "previous": "c88238ba88dfadbadfdb45ebfb967a91a788e06a",
            "next": "c88238ba88dfadbadfdb45ebfb967a91a788e06a"
        },
        "commit_message": "Use Lock instead of synchronized block in MemoizingSupplier to prevent pinning\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c88238ba88dfadbadfdb45ebfb967a91a788e06a": {
                "core/src/main/java/org/jdbi/v3/core/internal/MemoizingSupplier.java": [
                    "private T org.jdbi.v3.core.internal.MemoizingSupplier<T>.init()"
                ]
            },
            "7649c21738ed3a3a414a4a909fe615af1bf428cf": {
                "core/src/main/java/org/jdbi/v3/core/internal/MemoizingSupplier.java": [
                    "private T org.jdbi.v3.core.internal.MemoizingSupplier<T>.init()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d521e640310419e9941b1b3083d2dc1d710999ef",
        "previous_commit": "c5a35e7acd6ade685a4ed166c8e00057b0b265ce",
        "date": 1695194744,
        "releases": {
            "previous": "d521e640310419e9941b1b3083d2dc1d710999ef",
            "next": "d521e640310419e9941b1b3083d2dc1d710999ef"
        },
        "commit_message": "Fix transactions for non-autocommitting handles\n\nIf a handle is by default using autocommit == false, then transactions\ncould be commited (or rolled back) without having to call\nHandle#begin() first. This broke in 3.41.1.\n\nRestore the old behavior. Fixes #2491\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d521e640310419e9941b1b3083d2dc1d710999ef": {
                "core/src/main/java/org/jdbi/v3/core/transaction/LocalTransactionHandler.java": [
                    "private void org.jdbi.v3.core.transaction.LocalTransactionHandler.restoreAutoCommitState(Handle handle)"
                ]
            },
            "c5a35e7acd6ade685a4ed166c8e00057b0b265ce": {
                "core/src/main/java/org/jdbi/v3/core/transaction/LocalTransactionHandler.java": [
                    "private void org.jdbi.v3.core.transaction.LocalTransactionHandler.restoreAutoCommitState(Handle handle)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "68b8c4f24be74eb82acb94f63a15f5f61ec715d3",
        "previous_commit": "f17241947135e1d17eb71763773b7bedd2287868",
        "date": 1547992967,
        "releases": {
            "previous": "68b8c4f24be74eb82acb94f63a15f5f61ec715d3",
            "next": "68b8c4f24be74eb82acb94f63a15f5f61ec715d3"
        },
        "commit_message": "improve MockClock design, remove timing uncertainty from test\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "68b8c4f24be74eb82acb94f63a15f5f61ec715d3": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/TimestampedFactory.java": [
                    "public SqlStatementCustomizer org.jdbi.v3.sqlobject.customizer.internal.TimestampedFactory.createForMethod(Annotation annotation, Class<?> sqlObjectType, Method method)"
                ]
            },
            "f17241947135e1d17eb71763773b7bedd2287868": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/customizer/internal/TimestampedFactory.java": [
                    "public SqlStatementCustomizer org.jdbi.v3.sqlobject.customizer.internal.TimestampedFactory.createForMethod(Annotation annotation, Class<?> sqlObjectType, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d87e0f53d00f4fcb5721516787cc10723a6e741d",
        "previous_commit": "312a140d3d2a0a71789dee8f892995319a9918bc",
        "date": 1593736040,
        "releases": {
            "previous": "d87e0f53d00f4fcb5721516787cc10723a6e741d",
            "next": "d87e0f53d00f4fcb5721516787cc10723a6e741d"
        },
        "commit_message": "Fix #1729 - jdbi-jpa produces NullPointerException when deserializing class.\n\nThis fixes the issue by ignoring any property that doesn't have a way of setting itself.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d87e0f53d00f4fcb5721516787cc10723a6e741d": {
                "jpa/src/main/java/org/jdbi/v3/jpa/internal/JpaClass.java": [
                    "private static void org.jdbi.v3.jpa.internal.JpaClass<C>.inspectProperties(Class<?> clazz, Map<String, JpaMember> members, boolean hasColumnAnnotation)"
                ]
            },
            "312a140d3d2a0a71789dee8f892995319a9918bc": {
                "jpa/src/main/java/org/jdbi/v3/jpa/internal/JpaClass.java": [
                    "private static void org.jdbi.v3.jpa.internal.JpaClass<C>.inspectProperties(Class<?> clazz, Map<String, JpaMember> members, boolean hasColumnAnnotation)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bc86d99bdb06428d18c948a9cfe7f0395eb2f7fa",
        "previous_commit": "118c1cce647dc717961ac66392f0ea8f77cc1eb9",
        "date": 1679689362,
        "releases": {
            "previous": "bc86d99bdb06428d18c948a9cfe7f0395eb2f7fa",
            "next": "bc86d99bdb06428d18c948a9cfe7f0395eb2f7fa"
        },
        "commit_message": "StringTemplate engine: handle st4 errors, allow configuring missing attribute as error\n\nFixes #1556\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bc86d99bdb06428d18c948a9cfe7f0395eb2f7fa": {
                "stringtemplate4/src/main/java/org/jdbi/v3/stringtemplate4/StringTemplateEngine.java": [
                    "public String org.jdbi.v3.stringtemplate4.StringTemplateEngine.render(String sql, StatementContext ctx)"
                ]
            },
            "118c1cce647dc717961ac66392f0ea8f77cc1eb9": {
                "stringtemplate4/src/main/java/org/jdbi/v3/stringtemplate4/StringTemplateEngine.java": [
                    "public String org.jdbi.v3.stringtemplate4.StringTemplateEngine.render(String sql, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cf126e45e1b5717d803e7c2a2300b2c01836f5e6",
        "previous_commit": "b1d0a22eb114ab768ca8a6f897865e35a143bb4c",
        "date": 1596650819,
        "releases": {
            "previous": "cf126e45e1b5717d803e7c2a2300b2c01836f5e6",
            "next": "cf126e45e1b5717d803e7c2a2300b2c01836f5e6"
        },
        "commit_message": "Avoid tomcat warnings about thread-local leak.\n\nRemoves localConfig thread-local before discarding the reference.\nThe JDK ThreadLocal implementation uses weak references, which persist\nuntil garbage collector actually removes the objects. Therefore Tomcat\nleak detector discovers these thread-local objects and gives\nunnecessary warnings.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "cf126e45e1b5717d803e7c2a2300b2c01836f5e6": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "void org.jdbi.v3.core.Handle.setLocalConfig(ThreadLocal<ConfigRegistry> configThreadLocal)"
                ]
            },
            "b1d0a22eb114ab768ca8a6f897865e35a143bb4c": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "void org.jdbi.v3.core.Handle.setLocalConfig(ThreadLocal<ConfigRegistry> configThreadLocal)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f1893bbcb40efee8ec1272cc2642560203bcec7b",
        "previous_commit": "759eaa680b9d3a440639680be6e21c1fba1b7293",
        "date": 1703223169,
        "releases": {
            "previous": "f1893bbcb40efee8ec1272cc2642560203bcec7b",
            "next": "f1893bbcb40efee8ec1272cc2642560203bcec7b"
        },
        "commit_message": "Add row support for vavr `Option`\n\nAllow wrapping of arbitrary row types into vavr `Option` objects.\n\nAddresses #2558\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f1893bbcb40efee8ec1272cc2642560203bcec7b": {
                "vavr/src/main/java/org/jdbi/v3/vavr/VavrPlugin.java": [
                    "public void org.jdbi.v3.vavr.VavrPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            },
            "759eaa680b9d3a440639680be6e21c1fba1b7293": {
                "vavr/src/main/java/org/jdbi/v3/vavr/VavrPlugin.java": [
                    "public void org.jdbi.v3.vavr.VavrPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "722c4ddcb5aad57364d7803061afa0b56d6c5911",
        "previous_commit": "0d3903d819631d3e7a1f9f8c000e91f4b9e14306",
        "date": 1569734877,
        "releases": {
            "previous": "722c4ddcb5aad57364d7803061afa0b56d6c5911",
            "next": "722c4ddcb5aad57364d7803061afa0b56d6c5911"
        },
        "commit_message": "QualifiedType: cache hashCode\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "722c4ddcb5aad57364d7803061afa0b56d6c5911": {
                "core/src/main/java/org/jdbi/v3/core/qualifier/QualifiedType.java": [
                    "public int org.jdbi.v3.core.qualifier.QualifiedType<T>.hashCode()"
                ]
            },
            "0d3903d819631d3e7a1f9f8c000e91f4b9e14306": {
                "core/src/main/java/org/jdbi/v3/core/qualifier/QualifiedType.java": [
                    "public int org.jdbi.v3.core.qualifier.QualifiedType<T>.hashCode()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2fdd455ab4fda7ea99add7074f3c930384ccac11",
        "previous_commit": "17d4da9a7227a1604ce569e8180691282867c3c1",
        "date": 1700878839,
        "releases": {
            "previous": "2fdd455ab4fda7ea99add7074f3c930384ccac11",
            "next": "2fdd455ab4fda7ea99add7074f3c930384ccac11"
        },
        "commit_message": "Fix vavr arguments for sqlobjects\n\nTurns out, this has never worked before. To work with SqlObjects,\nthe argument factory needs to implement ArgumentFactory.Preparable,\notherwise another factory (in this case one that accepts anything\niterable) would take precedence.\n\nRewrite the factory to support Preparable, add unit tests suggested\nby @diversit.\n\nFixes #2529\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2fdd455ab4fda7ea99add7074f3c930384ccac11": {
                "vavr/src/main/java/org/jdbi/v3/vavr/VavrValueArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.vavr.VavrValueArgumentFactory.build(Type type, Object value, ConfigRegistry config)"
                ]
            },
            "17d4da9a7227a1604ce569e8180691282867c3c1": {
                "vavr/src/main/java/org/jdbi/v3/vavr/VavrValueArgumentFactory.java": [
                    "public Optional<Argument> org.jdbi.v3.vavr.VavrValueArgumentFactory.build(Type type, Object value, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4edb12622c54cc0d2becf8223dcdbba927b93bdf",
        "previous_commit": "5c18e5e4717629d8206849c52185e879cacdbede",
        "date": 1561150408,
        "releases": {
            "previous": "4edb12622c54cc0d2becf8223dcdbba927b93bdf",
            "next": "4edb12622c54cc0d2becf8223dcdbba927b93bdf"
        },
        "commit_message": "satisfy spotbugs\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4edb12622c54cc0d2becf8223dcdbba927b93bdf": {
                "core/src/main/java/org/jdbi/v3/core/statement/StatementExceptions.java": [
                    "public String org.jdbi.v3.core.statement.StatementExceptions.apply(StatementException exc)"
                ]
            },
            "5c18e5e4717629d8206849c52185e879cacdbede": {
                "core/src/main/java/org/jdbi/v3/core/statement/StatementExceptions.java": [
                    "public String org.jdbi.v3.core.statement.StatementExceptions.apply(StatementException exc)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f066ae831b5b54e4f95c352adb89631c4c76b6bb",
        "previous_commit": "df7bfe455b4dc7ca17feea11f2eaedd983b1ced8",
        "date": 1678427974,
        "releases": {
            "previous": "f066ae831b5b54e4f95c352adb89631c4c76b6bb",
            "next": "f066ae831b5b54e4f95c352adb89631c4c76b6bb"
        },
        "commit_message": "Small changes in remaining modules\n\nSome minor alignment in the other modules to accommodate the framework\nchanges.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f066ae831b5b54e4f95c352adb89631c4c76b6bb": {
                "jpa/src/main/java/org/jdbi/v3/jpa/JpaMapper.java": [
                    "public RowMapper<C> org.jdbi.v3.jpa.JpaMapper<C>.specialize(ResultSet rs, StatementContext ctx)"
                ]
            },
            "df7bfe455b4dc7ca17feea11f2eaedd983b1ced8": {
                "jpa/src/main/java/org/jdbi/v3/jpa/JpaMapper.java": [
                    "public RowMapper<C> org.jdbi.v3.jpa.JpaMapper<C>.specialize(ResultSet rs, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2dcf91d11d745809ec5a0cb7e993ac8a053908dc",
        "previous_commit": "67ab4cb83cd95122ebc7775f50f77bcbf49f1435",
        "date": 1668643167,
        "releases": {
            "previous": "2dcf91d11d745809ec5a0cb7e993ac8a053908dc",
            "next": "2dcf91d11d745809ec5a0cb7e993ac8a053908dc"
        },
        "commit_message": "Make the memoizer value inspectable\n\nWith the existing code, it is impossible to inspect a memoizer instance\nfor the value that it contains which makes debugging really hard.\n\nThis makes the value explicit and replaces the lambda with a method reference.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2dcf91d11d745809ec5a0cb7e993ac8a053908dc": {
                "core/src/main/java/org/jdbi/v3/core/internal/MemoizingSupplier.java": [
                    "private T org.jdbi.v3.core.internal.MemoizingSupplier<T>.init()"
                ]
            },
            "67ab4cb83cd95122ebc7775f50f77bcbf49f1435": {
                "core/src/main/java/org/jdbi/v3/core/internal/MemoizingSupplier.java": [
                    "private T org.jdbi.v3.core.internal.MemoizingSupplier<T>.init()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4ed203c87ecb5627140dd452d833cfc9b61f592a",
        "previous_commit": "2e3e2e7bfe0ff64e253cf5f13d62b3a0d5196160",
        "date": 1703785385,
        "releases": {
            "previous": "4ed203c87ecb5627140dd452d833cfc9b61f592a",
            "next": "4ed203c87ecb5627140dd452d833cfc9b61f592a"
        },
        "commit_message": "Support a result set for Call\n\nSome database drivers do not use out parameters but an actual result\nset to return data from stored procedures. Expose the result set\nthrough the `OutParameters` object.\n\nUnfortunately, this means that it is no longer possible to close the\n`CallableStatement` at the end of the operation but it now must be\nresource managed unless the ResultSet is used (and iterated all the\nway to the end).\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4ed203c87ecb5627140dd452d833cfc9b61f592a": {
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public <T> T org.jdbi.v3.core.statement.Call.invoke(Function<OutParameters, T> resultComputer)"
                ]
            },
            "2e3e2e7bfe0ff64e253cf5f13d62b3a0d5196160": {
                "core/src/main/java/org/jdbi/v3/core/statement/Call.java": [
                    "public <T> T org.jdbi.v3.core.statement.Call.invoke(Function<OutParameters, T> resultComputer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "492a2ad44bdb226edfd0182742fab82d74bf7dfc",
        "previous_commit": "f918910e60500c661054bdb10d9a1ab1ccca5b42",
        "date": 1550617689,
        "releases": {
            "previous": "492a2ad44bdb226edfd0182742fab82d74bf7dfc",
            "next": "492a2ad44bdb226edfd0182742fab82d74bf7dfc"
        },
        "commit_message": "Fix Immutables byte[] properties\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "492a2ad44bdb226edfd0182742fab82d74bf7dfc": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/ImmutablesPropertiesFactory.java": [
                    "protected ImmutablesPojoProperty<T> org.jdbi.v3.core.mapper.reflect.internal.ImmutablesPropertiesFactory.createProperty(String name, Method m)"
                ]
            },
            "f918910e60500c661054bdb10d9a1ab1ccca5b42": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/ImmutablesPropertiesFactory.java": [
                    "protected ImmutablesPojoProperty<T> org.jdbi.v3.core.mapper.reflect.internal.ImmutablesPropertiesFactory.createProperty(String name, Method m)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "31ab949cc1336d9f3aa70e281e6f6d336c7977af",
        "previous_commit": "390b18cf63ec71c3821578d7554c65d4c46b5793",
        "date": 1569734877,
        "releases": {
            "previous": "31ab949cc1336d9f3aa70e281e6f6d336c7977af",
            "next": "31ab949cc1336d9f3aa70e281e6f6d336c7977af"
        },
        "commit_message": "ConfigRegistry: optionally initialize with registry itself\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "31ab949cc1336d9f3aa70e281e6f6d336c7977af": {
                "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java": [
                    "public <C extends JdbiConfig<C>> C org.jdbi.v3.core.config.ConfigRegistry.get(Class<C> configClass)"
                ]
            },
            "390b18cf63ec71c3821578d7554c65d4c46b5793": {
                "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java": [
                    "public <C extends JdbiConfig<C>> C org.jdbi.v3.core.config.ConfigRegistry.get(Class<C> configClass)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "37d7251dadc96ea8a7c80154b35c779a9efd1288",
        "previous_commit": "4ece5146c9c62a3405b2c6c2a167b84c9220c179",
        "date": 1564594329,
        "releases": {
            "previous": "37d7251dadc96ea8a7c80154b35c779a9efd1288",
            "next": "37d7251dadc96ea8a7c80154b35c779a9efd1288"
        },
        "commit_message": "PreparedBatch.execute() closes context\n\nNote that previously, the batch (per jdbc) would still be closed with the Handle.\nBut of course we can do better.\n\nFixes #1567\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "37d7251dadc96ea8a7c80154b35c779a9efd1288": {
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "public int[] org.jdbi.v3.core.statement.PreparedBatch.execute()"
                ]
            },
            "4ece5146c9c62a3405b2c6c2a167b84c9220c179": {
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "public int[] org.jdbi.v3.core.statement.PreparedBatch.execute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2395a79ae0cd5a9791f26c4a748d53aea1a01122",
        "previous_commit": "a59660be115ab4bfb4ce61bbba9ad92f5c01f3db",
        "date": 1565886575,
        "releases": {
            "previous": "2395a79ae0cd5a9791f26c4a748d53aea1a01122",
            "next": "2395a79ae0cd5a9791f26c4a748d53aea1a01122"
        },
        "commit_message": "Handle: getJdbi\n\nFixes #1534\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2395a79ae0cd5a9791f26c4a748d53aea1a01122": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Handle org.jdbi.v3.core.Jdbi.open()"
                ]
            },
            "a59660be115ab4bfb4ce61bbba9ad92f5c01f3db": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Handle org.jdbi.v3.core.Jdbi.open()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e61a03e2e9057ef1db1a438596b795d2f11fd648",
        "previous_commit": "5e617ffd1591f3586bd8a5dac9f4f295cc505c2d",
        "date": 1664389400,
        "releases": {
            "previous": "e61a03e2e9057ef1db1a438596b795d2f11fd648",
            "next": "e61a03e2e9057ef1db1a438596b795d2f11fd648"
        },
        "commit_message": "Clarify the column to java name matcher\n\nRework the snakecase matcher to really deal with prefixes correctly, add lots of tests for it.\n\nRework the case insensitive matcher to not look at snake case but deal with prefixed java names.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e61a03e2e9057ef1db1a438596b795d2f11fd648": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/CaseInsensitiveColumnNameMatcher.java": [
                    "public boolean org.jdbi.v3.core.mapper.reflect.CaseInsensitiveColumnNameMatcher.columnNameStartsWith(String columnName, String prefix)"
                ]
            },
            "5e617ffd1591f3586bd8a5dac9f4f295cc505c2d": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/CaseInsensitiveColumnNameMatcher.java": [
                    "public boolean org.jdbi.v3.core.mapper.reflect.CaseInsensitiveColumnNameMatcher.columnNameStartsWith(String columnName, String prefix)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d5df6a3753459cc375b9021b0836ef4843b5410b",
        "previous_commit": "ad2ccfcc82cc05cf1a5a99d7fab7e705cc133bed",
        "date": 1600977564,
        "releases": {
            "previous": "d5df6a3753459cc375b9021b0836ef4843b5410b",
            "next": "d5df6a3753459cc375b9021b0836ef4843b5410b"
        },
        "commit_message": "Batch insert: fix inserting constant 'null'\n\nFixes #1761\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d5df6a3753459cc375b9021b0836ef4843b5410b": {
                "core/src/main/java/org/jdbi/v3/core/internal/IterableLike.java": [
                    "public static boolean org.jdbi.v3.core.internal.IterableLike.isIterable(Object maybeIterable)"
                ]
            },
            "ad2ccfcc82cc05cf1a5a99d7fab7e705cc133bed": {
                "core/src/main/java/org/jdbi/v3/core/internal/IterableLike.java": [
                    "public static boolean org.jdbi.v3.core.internal.IterableLike.isIterable(Object maybeIterable)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c05f5782d9517eeae37c3cd9bf7f73781566b686",
        "previous_commit": "506b8d28fd110728410f8b5f950e7bfa7c349fe8",
        "date": 1569720116,
        "releases": {
            "previous": "c05f5782d9517eeae37c3cd9bf7f73781566b686",
            "next": "c05f5782d9517eeae37c3cd9bf7f73781566b686"
        },
        "commit_message": "EnumArgumentFactory: skip computing erased type since any generic type is definitionally not an Enum\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c05f5782d9517eeae37c3cd9bf7f73781566b686": {
                "core/src/main/java/org/jdbi/v3/core/argument/EnumArgumentFactory.java": [
                    "static <E extends Enum<E>> Optional<Class<E>> org.jdbi.v3.core.argument.EnumArgumentFactory.ifEnum(Type type)"
                ]
            },
            "506b8d28fd110728410f8b5f950e7bfa7c349fe8": {
                "core/src/main/java/org/jdbi/v3/core/argument/EnumArgumentFactory.java": [
                    "static <E extends Enum<E>> Optional<Class<E>> org.jdbi.v3.core.argument.EnumArgumentFactory.ifEnum(Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a69eb568c0446da46e0211e927bb87d92023df8e",
        "previous_commit": "bcd059fc64030e61901d594e4de88770416b8b4a",
        "date": 1664388517,
        "releases": {
            "previous": "a69eb568c0446da46e0211e927bb87d92023df8e",
            "next": "a69eb568c0446da46e0211e927bb87d92023df8e"
        },
        "commit_message": "Support Postgres BYTEA as array type\n\nAdd an explicit array type that creates the postgres internal BYTEA\nformat so that the driver is willing to write arrays. Fixes #2109,\nworkaround for the problem in\nhttps://github.com/pgjdbc/pgjdbc/issues/2630\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a69eb568c0446da46e0211e927bb87d92023df8e": {
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            },
            "bcd059fc64030e61901d594e4de88770416b8b4a": {
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "01a4ad161cf4f1351ef6a116086b566fdc4080e5",
        "previous_commit": "351647ecb40be715c56c2f2e527334063880951f",
        "date": 1689370899,
        "releases": {
            "previous": "01a4ad161cf4f1351ef6a116086b566fdc4080e5",
            "next": "01a4ad161cf4f1351ef6a116086b566fdc4080e5"
        },
        "commit_message": "OnDemandExtensions: flatten stack a bit by inlining Unchecked\n\nWe call Unchecked three times, and this ends up adding a number of stack frames\nin the debugger or profiler any time you are looking at an ondemand sqlobject\n\nThis fights back just a little bit against ever-deepening stack traces,\nand makes the logic easier to read too without the distracting Unchecked signatures in the middle\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "01a4ad161cf4f1351ef6a116086b566fdc4080e5": {
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "private static Object org.jdbi.v3.core.internal.OnDemandExtensions.invoke(Object target, Method method, Object[] args)"
                ]
            },
            "351647ecb40be715c56c2f2e527334063880951f": {
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "private static Object org.jdbi.v3.core.internal.OnDemandExtensions.invoke(Object target, Method method, Object[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "be9a4e7ce2e3b01aa6df6400b512727b272053e7",
        "previous_commit": "d3f89859e3395a6e31ec57eb3544b5c8cc82f13a",
        "date": 1574197135,
        "releases": {
            "previous": "be9a4e7ce2e3b01aa6df6400b512727b272053e7",
            "next": "be9a4e7ce2e3b01aa6df6400b512727b272053e7"
        },
        "commit_message": "PreparedBatch: Correct context lookup\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "be9a4e7ce2e3b01aa6df6400b512727b272053e7": {
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "Function<Object, Argument> org.jdbi.v3.core.statement.PreparedBatch.buildArgument(QualifiedType<?> type)"
                ]
            },
            "d3f89859e3395a6e31ec57eb3544b5c8cc82f13a": {
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "Function<Object, Argument> org.jdbi.v3.core.statement.PreparedBatch.buildArgument(QualifiedType<?> type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a81d06f36cb1979140a5c023d043841d903cc6e8",
        "previous_commit": "15fd470a4d240b291d08061441a30ca2db6b6642",
        "date": 1549061769,
        "releases": {
            "previous": "a81d06f36cb1979140a5c023d043841d903cc6e8",
            "next": "a81d06f36cb1979140a5c023d043841d903cc6e8"
        },
        "commit_message": "DefineNamedBindings - fixes from PR comments\n\n- Throw informative exception if Wrapper.unwrap() is called on the non-null detecting statement proxy\n- Return primitive false/zero values instead of null depending on method return type\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a81d06f36cb1979140a5c023d043841d903cc6e8": {
                "core/src/main/java/org/jdbi/v3/core/statement/DefineNamedBindingsStatementCustomizer.java": [
                    "public Object org.jdbi.v3.core.statement.DefineNamedBindingsStatementCustomizer.invoke(Object proxy, Method method, Object[] args)"
                ]
            },
            "15fd470a4d240b291d08061441a30ca2db6b6642": {
                "core/src/main/java/org/jdbi/v3/core/statement/DefineNamedBindingsStatementCustomizer.java": [
                    "public Object org.jdbi.v3.core.statement.DefineNamedBindingsStatementCustomizer.invoke(Object proxy, Method method, Object[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "55b809ecd9a08af5123704ae8d506d7267b238d8",
        "previous_commit": "cc162c5c47c76f5f803b0fd4f95b553331a37bae",
        "date": 1686520139,
        "releases": {
            "previous": "55b809ecd9a08af5123704ae8d506d7267b238d8",
            "next": "55b809ecd9a08af5123704ae8d506d7267b238d8"
        },
        "commit_message": "remove some noise from sonar\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "55b809ecd9a08af5123704ae8d506d7267b238d8": {
                "core/src/main/java/org/jdbi/v3/core/argument/QualifiedArgumentFactory.java": [
                    "static QualifiedArgumentFactory.Preparable adapt(ConfigRegistry config, ArgumentFactory.Preparable factory)"
                ]
            },
            "cc162c5c47c76f5f803b0fd4f95b553331a37bae": {
                "core/src/main/java/org/jdbi/v3/core/argument/QualifiedArgumentFactory.java": [
                    "static QualifiedArgumentFactory.Preparable adapt(ConfigRegistry config, ArgumentFactory.Preparable factory)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "af08340a55dcd6b42feb2e08a459b79313f029d6",
        "previous_commit": "2779940ccc965f196de31c82dadc9141d2671deb",
        "date": 1674757182,
        "releases": {
            "previous": "af08340a55dcd6b42feb2e08a459b79313f029d6",
            "next": "af08340a55dcd6b42feb2e08a459b79313f029d6"
        },
        "commit_message": "Add null safety to PostGISCodec\n\nIf a column contained a null geometry the registered Geometry ColumnMapper would throw a NPE while trying to convert the null value to a byte array. If a null value is now processed by the ColumnMapper a null value is returned\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "af08340a55dcd6b42feb2e08a459b79313f029d6": {
                "postgis/src/main/java/org/jdbi/v3/postgis/PostgisCodec.java": [
                    "private static byte[] org.jdbi.v3.postgis.PostgisCodec.hexStringToByteArray(String s)"
                ]
            },
            "2779940ccc965f196de31c82dadc9141d2671deb": {
                "postgis/src/main/java/org/jdbi/v3/postgis/PostgisCodec.java": [
                    "private static byte[] org.jdbi.v3.postgis.PostgisCodec.hexStringToByteArray(String s)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7e13a4078e938b8b91ad049b6116a671fe209a9e",
        "previous_commit": "471ddbe74c322c76b0d218cdcaa0cd1317298b69",
        "date": 1602869269,
        "releases": {
            "previous": "7e13a4078e938b8b91ad049b6116a671fe209a9e",
            "next": "7e13a4078e938b8b91ad049b6116a671fe209a9e"
        },
        "commit_message": "TemplateEngine: use size-limited Caffeine cache so we don't keep an unbounded number of templates\n\nFixes #1776\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7e13a4078e938b8b91ad049b6116a671fe209a9e": {
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()"
                ]
            },
            "471ddbe74c322c76b0d218cdcaa0cd1317298b69": {
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "private ExecutedBatch org.jdbi.v3.core.statement.PreparedBatch.internalBatchExecute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b074c8d411963855c28a0fbbb47ccfa213d08eaa",
        "previous_commit": "bb02b6c6c92da4a496c3d5eb9f838f188552eeec",
        "date": 1602022647,
        "releases": {
            "previous": "b074c8d411963855c28a0fbbb47ccfa213d08eaa",
            "next": "b074c8d411963855c28a0fbbb47ccfa213d08eaa"
        },
        "commit_message": "JdbiConfig: MethodHandle lookup cannot be public since it loads user code\n\nthis causes a LinkageError:\n\n```\nCaused by: java.lang.LinkageError: loader constraint violation:\n  when resolving method 'void org.jdbi.v3.core.argument.Arguments.<init>(org.jdbi.v3.core.config.ConfigRegistry)'\n  the class loader 'bootstrap' of the current class, java/lang/Object, and the class loader\n  com.paywholesail.components.testutil.IntegrationRuleClassLoader @7b222230 for the method's defining class,\n  org/jdbi/v3/core/argument/Arguments, have different Class objects for the type org/jdbi/v3/core/config/ConfigRegistry\n  used in the signature (java.lang.Object is in module java.base of loader 'bootstrap';\n  org.jdbi.v3.core.argument.Arguments is in unnamed module of loader\n  com.paywholesail.components.testutil.IntegrationRuleClassLoader @7b222230, parent loader 'platform')\n```\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b074c8d411963855c28a0fbbb47ccfa213d08eaa": {
                "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java": [
                    "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)"
                ]
            },
            "bb02b6c6c92da4a496c3d5eb9f838f188552eeec": {
                "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java": [
                    "private Function<ConfigRegistry, JdbiConfig<?>> org.jdbi.v3.core.config.ConfigRegistry.configFactory(Class<? extends JdbiConfig<?>> configClass)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2347c767096f8a8636431c0294e56f6b8da2cd63",
        "previous_commit": "01a4ad161cf4f1351ef6a116086b566fdc4080e5",
        "date": 1689370899,
        "releases": {
            "previous": "2347c767096f8a8636431c0294e56f6b8da2cd63",
            "next": "2347c767096f8a8636431c0294e56f6b8da2cd63"
        },
        "commit_message": "OnDemandExtensions.createProxy: Replace streams usage with simpler flat code\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2347c767096f8a8636431c0294e56f6b8da2cd63": {
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "private Object org.jdbi.v3.core.internal.OnDemandExtensions.createProxy(Jdbi jdbi, Class<?> extensionType, Class<?>... extraTypes)"
                ]
            },
            "01a4ad161cf4f1351ef6a116086b566fdc4080e5": {
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "private Object org.jdbi.v3.core.internal.OnDemandExtensions.createProxy(Jdbi jdbi, Class<?> extensionType, Class<?>... extraTypes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "efe05cea987dbbc21155f0914ad60de83a33a3d0",
        "previous_commit": "1952c9bbf6f0e3a077319c5f348147d8f74fe0ca",
        "date": 1674666010,
        "releases": {
            "previous": "efe05cea987dbbc21155f0914ad60de83a33a3d0",
            "next": "efe05cea987dbbc21155f0914ad60de83a33a3d0"
        },
        "commit_message": "Parse annotations in c'tor\n\ndon't need to wait until runtime to throw error.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "efe05cea987dbbc21155f0914ad60de83a33a3d0": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlQueryHandler.java": [
                    "void org.jdbi.v3.sqlobject.statement.internal.SqlQueryHandler.configureReturner(Query q, SqlObjectStatementConfiguration cfg)"
                ]
            },
            "1952c9bbf6f0e3a077319c5f348147d8f74fe0ca": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/SqlQueryHandler.java": [
                    "void org.jdbi.v3.sqlobject.statement.internal.SqlQueryHandler.configureReturner(Query q, SqlObjectStatementConfiguration cfg)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2513227afc55f8261a70092fb0582a89e6c6f5c0",
        "previous_commit": "57a93ae3fcd4165c0ede9a3af4566b8d933033ed",
        "date": 1719594240,
        "releases": {
            "previous": "2513227afc55f8261a70092fb0582a89e6c6f5c0",
            "next": "2513227afc55f8261a70092fb0582a89e6c6f5c0"
        },
        "commit_message": "Raise exception if a positional query param is missing\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2513227afc55f8261a70092fb0582a89e6c6f5c0": {
                "core/src/main/java/org/jdbi/v3/core/statement/ArgumentBinder.java": [
                    "void org.jdbi.v3.core.statement.ArgumentBinder.bindPositional(Binding binding)"
                ]
            },
            "57a93ae3fcd4165c0ede9a3af4566b8d933033ed": {
                "core/src/main/java/org/jdbi/v3/core/statement/ArgumentBinder.java": [
                    "void org.jdbi.v3.core.statement.ArgumentBinder.bindPositional(Binding binding)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5a33a0fa036d47920deba8cc0e1aa00312b90036",
        "previous_commit": "68c5edb7c0bc33aa99ecd4827a98b873e68a4ca0",
        "date": 1705012234,
        "releases": {
            "previous": "5a33a0fa036d47920deba8cc0e1aa00312b90036",
            "next": "5a33a0fa036d47920deba8cc0e1aa00312b90036"
        },
        "commit_message": "Switch Mockito to proxy-only mode and disable byte-buddy agent\n\nAlternative approach to 22-ea\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5a33a0fa036d47920deba8cc0e1aa00312b90036": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public Connection org.jdbi.v3.core.Handle.getConnection()"
                ]
            },
            "68c5edb7c0bc33aa99ecd4827a98b873e68a4ca0": {
                "core/src/main/java/org/jdbi/v3/core/Handle.java": [
                    "public Connection org.jdbi.v3.core.Handle.getConnection()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a8daa89c784dca865a92ee20d2747cda625be326",
        "previous_commit": "9de046f425e0fe0e1c0b6242d24717003632e6cd",
        "date": 1565107432,
        "releases": {
            "previous": "a8daa89c784dca865a92ee20d2747cda625be326",
            "next": "a8daa89c784dca865a92ee20d2747cda625be326"
        },
        "commit_message": "OptionalMapperFactory: specialize created OptionalMappers so they don't lookup the mapper every row\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a8daa89c784dca865a92ee20d2747cda625be326": {
                "core/src/main/java/org/jdbi/v3/core/mapper/OptionalMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.OptionalMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            },
            "9de046f425e0fe0e1c0b6242d24717003632e6cd": {
                "core/src/main/java/org/jdbi/v3/core/mapper/OptionalMapperFactory.java": [
                    "public Optional<ColumnMapper<?>> org.jdbi.v3.core.mapper.OptionalMapperFactory.build(Type type, ConfigRegistry config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e3de95e3757c38272ae6525ee80b02a886929033",
        "previous_commit": "18fbf27be546957f0a5b7009580de99d22327259",
        "date": 1567351314,
        "releases": {
            "previous": "e3de95e3757c38272ae6525ee80b02a886929033",
            "next": "e3de95e3757c38272ae6525ee80b02a886929033"
        },
        "commit_message": "Change most JdbiPlugins to be single-install\nKotlinSqlObjectPlugin installs SqlObjectPlugin\n\nFixes #1495\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e3de95e3757c38272ae6525ee80b02a886929033": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Jdbi org.jdbi.v3.core.Jdbi.installPlugin(JdbiPlugin plugin)"
                ]
            },
            "18fbf27be546957f0a5b7009580de99d22327259": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Jdbi org.jdbi.v3.core.Jdbi.installPlugin(JdbiPlugin plugin)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ac97d3bc79a2e4630c0ec36fb1200e96c1ebd1a4",
        "previous_commit": "7fe13eaf45309d1d419cc5bbbac5530a4090f5fe",
        "date": 1675535474,
        "releases": {
            "previous": "ac97d3bc79a2e4630c0ec36fb1200e96c1ebd1a4",
            "next": "ac97d3bc79a2e4630c0ec36fb1200e96c1ebd1a4"
        },
        "commit_message": "Refactor method lookup methods\n\nThere is a random helper in Handlers, move that to a core class\nand use it across the codebase.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ac97d3bc79a2e4630c0ec36fb1200e96c1ebd1a4": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "static void addMethodHandler(Map<Method, Handler> handlerMap, Handler handler, Class<?> klass, String methodName, Class<?>... parameterTypes)"
                ]
            },
            "7fe13eaf45309d1d419cc5bbbac5530a4090f5fe": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "static void addMethodHandler(Map<Method, Handler> handlerMap, Handler handler, Class<?> klass, String methodName, Class<?>... parameterTypes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4dca923143887ef14518992b9a3a93d8daef05a6",
        "previous_commit": "009343bb197b00d0b6b2c487fa68dc1924f794e7",
        "date": 1654194234,
        "releases": {
            "previous": "4dca923143887ef14518992b9a3a93d8daef05a6",
            "next": "4dca923143887ef14518992b9a3a93d8daef05a6"
        },
        "commit_message": "Remove redundant member String sql from Script\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4dca923143887ef14518992b9a3a93d8daef05a6": {
                "core/src/main/java/org/jdbi/v3/core/statement/Script.java": [
                    "public List<String> org.jdbi.v3.core.statement.Script.getStatements()"
                ]
            },
            "009343bb197b00d0b6b2c487fa68dc1924f794e7": {
                "core/src/main/java/org/jdbi/v3/core/statement/Script.java": [
                    "public List<String> org.jdbi.v3.core.statement.Script.getStatements()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cbb1910461481b9538bc613de68c129f90781473",
        "previous_commit": "ffd756adc63d5178bdc2b6084fccd969f26b23b4",
        "date": 1550944954,
        "releases": {
            "previous": "cbb1910461481b9538bc613de68c129f90781473",
            "next": "cbb1910461481b9538bc613de68c129f90781473"
        },
        "commit_message": "suppress exception if Statement close method raises\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "cbb1910461481b9538bc613de68c129f90781473": {
                "core/src/main/java/org/jdbi/v3/core/result/ResultProducers.java": [
                    "public static ResultProducer<Integer> org.jdbi.v3.core.result.ResultProducers.returningUpdateCount()"
                ]
            },
            "ffd756adc63d5178bdc2b6084fccd969f26b23b4": {
                "core/src/main/java/org/jdbi/v3/core/result/ResultProducers.java": [
                    "public static ResultProducer<Integer> org.jdbi.v3.core.result.ResultProducers.returningUpdateCount()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d28a127946cbc8ea8a17b711bffdf681df958609",
        "previous_commit": "20ef4339030cde273b5935ff9dbdd2618647e7ef",
        "date": 1567878177,
        "releases": {
            "previous": "d28a127946cbc8ea8a17b711bffdf681df958609",
            "next": "d28a127946cbc8ea8a17b711bffdf681df958609"
        },
        "commit_message": "wip: Support for enum Sets as bit strings\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d28a127946cbc8ea8a17b711bffdf681df958609": {
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            },
            "20ef4339030cde273b5935ff9dbdd2618647e7ef": {
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e943bb1bda14e8626984b6a57a4a8520ddf67d86",
        "previous_commit": "d28a127946cbc8ea8a17b711bffdf681df958609",
        "date": 1567883658,
        "releases": {
            "previous": "e943bb1bda14e8626984b6a57a4a8520ddf67d86",
            "next": "e943bb1bda14e8626984b6a57a4a8520ddf67d86"
        },
        "commit_message": "rename\n\n\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e943bb1bda14e8626984b6a57a4a8520ddf67d86": {
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            },
            "d28a127946cbc8ea8a17b711bffdf681df958609": {
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "22d23b4b5bc318ccce0610b3ebbdc86f139d1f9a",
        "previous_commit": "4d38cea4b75cf7c7a2d2a37406b98d3ff3c5cfaa",
        "date": 1677290303,
        "releases": {
            "previous": "22d23b4b5bc318ccce0610b3ebbdc86f139d1f9a",
            "next": "22d23b4b5bc318ccce0610b3ebbdc86f139d1f9a"
        },
        "commit_message": "add withHandle unconditionally as a method handler\n\nGenerated classes always implement SqlObject, but if the interface from\nwhich they were created does not, they actually call a non-existent\nhandler that throws a NPE. Adding the method unconditionally allows this\ncall to succeed. It also removes the WithHandleMethodHandlerFactory that\nis no longer needed.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "22d23b4b5bc318ccce0610b3ebbdc86f139d1f9a": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "private static Map<Method, Handler> org.jdbi.v3.sqlobject.internal.SqlObjectInitData.buildMethodHandlers( ConfigRegistry config, Class<?> sqlObjectType)"
                ]
            },
            "4d38cea4b75cf7c7a2d2a37406b98d3ff3c5cfaa": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/SqlObjectInitData.java": [
                    "private static Map<Method, Handler> org.jdbi.v3.sqlobject.internal.SqlObjectInitData.buildMethodHandlers( ConfigRegistry config, Class<?> sqlObjectType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "97ea85393712bd44d1b3116dec37352b08098d6a",
        "previous_commit": "e7209469ce1bb5dd8f63aaa8853ad05e855a3612",
        "date": 1550868804,
        "releases": {
            "previous": "97ea85393712bd44d1b3116dec37352b08098d6a",
            "next": "97ea85393712bd44d1b3116dec37352b08098d6a"
        },
        "commit_message": "fix #1295\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "97ea85393712bd44d1b3116dec37352b08098d6a": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/JdbiConstructors.java": [
                    "static <T> InstanceFactory<T> org.jdbi.v3.core.mapper.reflect.JdbiConstructors.findFactoryFor(Class<T> type)"
                ]
            },
            "e7209469ce1bb5dd8f63aaa8853ad05e855a3612": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/JdbiConstructors.java": [
                    "static <T> InstanceFactory<T> org.jdbi.v3.core.mapper.reflect.JdbiConstructors.findFactoryFor(Class<T> type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7acbddb662d778035c678a53409a96f590c99ef9",
        "previous_commit": "1f9f750f58fdebae2434a6d2b01ac6b57e51731d",
        "date": 1565886575,
        "releases": {
            "previous": "7acbddb662d778035c678a53409a96f590c99ef9",
            "next": "7acbddb662d778035c678a53409a96f590c99ef9"
        },
        "commit_message": "SqlObject.withHandle, Transactional: implement with proper callback implementation so scoping works as expected\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7acbddb662d778035c678a53409a96f590c99ef9": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "private static Map<Method, Handler> handlerEntry(Handler handler, Class<?> klass, String methodName, Class<?>... parameterTypes)"
                ]
            },
            "1f9f750f58fdebae2434a6d2b01ac6b57e51731d": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "private static Map<Method, Handler> handlerEntry(Handler handler, Class<?> klass, String methodName, Class<?>... parameterTypes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ffb90260de874e318ac1e01d14d9cf21392ab5d5",
        "previous_commit": "36852221831215eccbe54e2d79ac8626fa069030",
        "date": 1691519620,
        "releases": {
            "previous": "ffb90260de874e318ac1e01d14d9cf21392ab5d5",
            "next": "ffb90260de874e318ac1e01d14d9cf21392ab5d5"
        },
        "commit_message": "Manage in-ctor exceptions\n\nIf the c'tor of a handle throws an exception, ensure that the underlying\nconnection is closed as the caller will not have a chance to do so with\ntry-with-resources\n\nThis fixes the cause of #2446\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ffb90260de874e318ac1e01d14d9cf21392ab5d5": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Handle org.jdbi.v3.core.Jdbi.open()"
                ]
            },
            "36852221831215eccbe54e2d79ac8626fa069030": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Handle org.jdbi.v3.core.Jdbi.open()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8f74600d14ebf55794eddc9a130a0613b82b178d",
        "previous_commit": "a444d1dac1fef938c4f2564c2ef42707a7746626",
        "date": 1689281444,
        "releases": {
            "previous": "8f74600d14ebf55794eddc9a130a0613b82b178d",
            "next": "8f74600d14ebf55794eddc9a130a0613b82b178d"
        },
        "commit_message": "MapToFactory: reuse a single ResultReturner, rather than re-creating it each time\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8f74600d14ebf55794eddc9a130a0613b82b178d": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/MapToFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.statement.internal.MapToFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ]
            },
            "a444d1dac1fef938c4f2564c2ef42707a7746626": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/MapToFactory.java": [
                    "public SqlStatementParameterCustomizer org.jdbi.v3.sqlobject.statement.internal.MapToFactory.createForParameter(Annotation annotation, Class<?> sqlObjectType, Method method, Parameter param, int index, Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "82182f70ff2ecdf424f58f30fffd7446ae330cfe",
        "previous_commit": "5c254c5dc7f6fbfbc016e9ace3ddd0ba1cd21e4a",
        "date": 1622581779,
        "releases": {
            "previous": "82182f70ff2ecdf424f58f30fffd7446ae330cfe",
            "next": "82182f70ff2ecdf424f58f30fffd7446ae330cfe"
        },
        "commit_message": "Make legacy bindings configurable. (#1875)\n\nMake unqualified bindings configurable.\r\n\r\nThe postgres plugin binds some hstore related things unqualified for legacy reasons.\r\nThis interferes with custom bindings. This change makes the legacy bindings configurable.\r\n\r\nBy default they are still enabled (backwards compatible).\r\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "82182f70ff2ecdf424f58f30fffd7446ae330cfe": {
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            },
            "5c254c5dc7f6fbfbc016e9ace3ddd0ba1cd21e4a": {
                "postgres/src/main/java/org/jdbi/v3/postgres/PostgresPlugin.java": [
                    "public void org.jdbi.v3.postgres.PostgresPlugin.customizeJdbi(Jdbi jdbi)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1f9f750f58fdebae2434a6d2b01ac6b57e51731d",
        "previous_commit": "2395a79ae0cd5a9791f26c4a748d53aea1a01122",
        "date": 1565886575,
        "releases": {
            "previous": "1f9f750f58fdebae2434a6d2b01ac6b57e51731d",
            "next": "1f9f750f58fdebae2434a6d2b01ac6b57e51731d"
        },
        "commit_message": "@CreateSqlObject propagates on-demandness\n\nFixes #1382\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1f9f750f58fdebae2434a6d2b01ac6b57e51731d": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/CreateSqlObjectHandler.java": [
                    "public Object org.jdbi.v3.sqlobject.internal.CreateSqlObjectHandler.invoke(Object target, Object[] args, HandleSupplier handle)"
                ]
            },
            "2395a79ae0cd5a9791f26c4a748d53aea1a01122": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/CreateSqlObjectHandler.java": [
                    "public Object org.jdbi.v3.sqlobject.internal.CreateSqlObjectHandler.invoke(Object target, Object[] args, HandleSupplier handle)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a33056d5d3adaf8fdaf91b99dcb00bb5a66d3fcc",
        "previous_commit": "7f89eb60d14b87565ec3cabce22bdfe3de48c4f6",
        "date": 1633714972,
        "releases": {
            "previous": "a33056d5d3adaf8fdaf91b99dcb00bb5a66d3fcc",
            "next": "a33056d5d3adaf8fdaf91b99dcb00bb5a66d3fcc"
        },
        "commit_message": "Fix annotation inheritance for non-direct supertypes\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a33056d5d3adaf8fdaf91b99dcb00bb5a66d3fcc": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "static SqlObjectInitData initDataFor(ConfigRegistry handlersConfig, Class<?> sqlObjectType)"
                ]
            },
            "7f89eb60d14b87565ec3cabce22bdfe3de48c4f6": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "static SqlObjectInitData initDataFor(ConfigRegistry handlersConfig, Class<?> sqlObjectType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ebe8747a3f2020deb34f04f24abcf9a7fd437848",
        "previous_commit": "bf026d233f675a9b09527b6a971797701f28140d",
        "date": 1682035363,
        "releases": {
            "previous": "ebe8747a3f2020deb34f04f24abcf9a7fd437848",
            "next": "ebe8747a3f2020deb34f04f24abcf9a7fd437848"
        },
        "commit_message": "Enforce single Consumer argument\n\nMake sure that there can not be multiple consumer arguments for\na SQL object method.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ebe8747a3f2020deb34f04f24abcf9a7fd437848": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java": [
                    "static Optional<ResultReturner> org.jdbi.v3.sqlobject.statement.internal.ResultReturner.findConsumer(Method method)"
                ]
            },
            "bf026d233f675a9b09527b6a971797701f28140d": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/statement/internal/ResultReturner.java": [
                    "static Optional<ResultReturner> org.jdbi.v3.sqlobject.statement.internal.ResultReturner.findConsumer(Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6ad098ae3fb4ce283cbfa59d39027edefb9f81e4",
        "previous_commit": "67b533bb54de3d133703e80b9fc184710d12e18b",
        "date": 1565886575,
        "releases": {
            "previous": "6ad098ae3fb4ce283cbfa59d39027edefb9f81e4",
            "next": "6ad098ae3fb4ce283cbfa59d39027edefb9f81e4"
        },
        "commit_message": "comply with SqlObject doc\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6ad098ae3fb4ce283cbfa59d39027edefb9f81e4": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/CreateSqlObjectHandler.java": [
                    "public Object org.jdbi.v3.sqlobject.internal.CreateSqlObjectHandler.invoke(Object target, Object[] args, HandleSupplier handle)"
                ]
            },
            "67b533bb54de3d133703e80b9fc184710d12e18b": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/internal/CreateSqlObjectHandler.java": [
                    "public Object org.jdbi.v3.sqlobject.internal.CreateSqlObjectHandler.invoke(Object target, Object[] args, HandleSupplier handle)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a53d152527e7faa4e91553a0625235024b2da862",
        "previous_commit": "118c1cce647dc717961ac66392f0ea8f77cc1eb9",
        "date": 1679675208,
        "releases": {
            "previous": "a53d152527e7faa4e91553a0625235024b2da862",
            "next": "a53d152527e7faa4e91553a0625235024b2da862"
        },
        "commit_message": "Fix GenericType resolution in parameterized classes\n\nPort the code from geantryref.TypeToken#extractType for classes passed\ninto GenericType.\n\nFixes #2305\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a53d152527e7faa4e91553a0625235024b2da862": {
                "core/src/main/java/org/jdbi/v3/core/generic/GenericTypes.java": [
                    "public static Optional<Type> org.jdbi.v3.core.generic.GenericTypes.findGenericParameter(Type type, Class<?> parameterizedSupertype, int n)"
                ]
            },
            "118c1cce647dc717961ac66392f0ea8f77cc1eb9": {
                "core/src/main/java/org/jdbi/v3/core/generic/GenericTypes.java": [
                    "public static Optional<Type> org.jdbi.v3.core.generic.GenericTypes.findGenericParameter(Type type, Class<?> parameterizedSupertype, int n)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "928920c818b35a77e9c02d8930951ae538361088",
        "previous_commit": "01cecc5a87545bd5b6d4f00f18d16fc04887f88f",
        "date": 1548887377,
        "releases": {
            "previous": "928920c818b35a77e9c02d8930951ae538361088",
            "next": "928920c818b35a77e9c02d8930951ae538361088"
        },
        "commit_message": "JdbiPlugin throws SqlException\n\nFixes #1440\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "928920c818b35a77e9c02d8930951ae538361088": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Jdbi org.jdbi.v3.core.Jdbi.installPlugin(JdbiPlugin plugin)"
                ]
            },
            "01cecc5a87545bd5b6d4f00f18d16fc04887f88f": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public Jdbi org.jdbi.v3.core.Jdbi.installPlugin(JdbiPlugin plugin)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "65d627d2c113a8c58cfde0dfd2f567a1fbe85d8b",
        "previous_commit": "c2373ac0b07728b9301422c002413ee1b3b49f01",
        "date": 1569720116,
        "releases": {
            "previous": "65d627d2c113a8c58cfde0dfd2f567a1fbe85d8b",
            "next": "65d627d2c113a8c58cfde0dfd2f567a1fbe85d8b"
        },
        "commit_message": "Improve Binding.findForName\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "65d627d2c113a8c58cfde0dfd2f567a1fbe85d8b": {
                "core/src/main/java/org/jdbi/v3/core/statement/Binding.java": [
                    "public Optional<Argument> org.jdbi.v3.core.statement.Binding.findForName(String name, StatementContext ctx)"
                ]
            },
            "c2373ac0b07728b9301422c002413ee1b3b49f01": {
                "core/src/main/java/org/jdbi/v3/core/statement/Binding.java": [
                    "public Optional<Argument> org.jdbi.v3.core.statement.Binding.findForName(String name, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d9cb04e81cb1feac3a676b1da829e3f95df8a029",
        "previous_commit": "a4848d506b4979bc07effbd14b49c82aa93df0d1",
        "date": 1574192017,
        "releases": {
            "previous": "d9cb04e81cb1feac3a676b1da829e3f95df8a029",
            "next": "d9cb04e81cb1feac3a676b1da829e3f95df8a029"
        },
        "commit_message": "PreparedBatch: test and fix nested non-prepareable arguments\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d9cb04e81cb1feac3a676b1da829e3f95df8a029": {
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "Function<Object, Argument> org.jdbi.v3.core.statement.PreparedBatch.buildArgument(QualifiedType<?> type)"
                ]
            },
            "a4848d506b4979bc07effbd14b49c82aa93df0d1": {
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "Function<Object, Argument> org.jdbi.v3.core.statement.PreparedBatch.buildArgument(QualifiedType<?> type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "36d49988b8822241ad5f0e4b9898d4de49500ee4",
        "previous_commit": "421e4b81e85b80ff727525d4031282ef80b1b634",
        "date": 1565893402,
        "releases": {
            "previous": "36d49988b8822241ad5f0e4b9898d4de49500ee4",
            "next": "36d49988b8822241ad5f0e4b9898d4de49500ee4"
        },
        "commit_message": "no I want it purple!!!\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "36d49988b8822241ad5f0e4b9898d4de49500ee4": {
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "public static <E> E org.jdbi.v3.core.internal.OnDemandExtensions.create(Jdbi db, Class<E> extensionType, Class<?>... extraTypes)"
                ]
            },
            "421e4b81e85b80ff727525d4031282ef80b1b634": {
                "core/src/main/java/org/jdbi/v3/core/internal/OnDemandExtensions.java": [
                    "public static <E> E org.jdbi.v3.core.internal.OnDemandExtensions.create(Jdbi db, Class<E> extensionType, Class<?>... extraTypes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "67101259a4b20cbd319609febde15db33573f977",
        "previous_commit": "f6b4bf5920021ad5605e5920c12d3f5f27c17d88",
        "date": 1549361499,
        "releases": {
            "previous": "67101259a4b20cbd319609febde15db33573f977",
            "next": "67101259a4b20cbd319609febde15db33573f977"
        },
        "commit_message": "Mapify\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "67101259a4b20cbd319609febde15db33573f977": {
                "core/src/main/java/org/jdbi/v3/core/statement/DefineNamedBindingsStatementCustomizer.java": [
                    "public Object org.jdbi.v3.core.statement.DefineNamedBindingsStatementCustomizer.invoke(Object proxy, Method method, Object[] args)"
                ]
            },
            "f6b4bf5920021ad5605e5920c12d3f5f27c17d88": {
                "core/src/main/java/org/jdbi/v3/core/statement/DefineNamedBindingsStatementCustomizer.java": [
                    "public Object org.jdbi.v3.core.statement.DefineNamedBindingsStatementCustomizer.invoke(Object proxy, Method method, Object[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "82872f54c3a005bfac3f4d3f0ef97004f6140616",
        "previous_commit": "ac8fd08a6171cb0d27d3ca861af7055ae8e49335",
        "date": 1581620165,
        "releases": {
            "previous": "82872f54c3a005bfac3f4d3f0ef97004f6140616",
            "next": "82872f54c3a005bfac3f4d3f0ef97004f6140616"
        },
        "commit_message": "Properties: use getExactReturnType instead of resolving the type as it seems to be more reliable\n\nFixes #1646\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "82872f54c3a005bfac3f4d3f0ef97004f6140616": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "private QualifiedType<?> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.determineQualifiedType()"
                ]
            },
            "ac8fd08a6171cb0d27d3ca861af7055ae8e49335": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "private QualifiedType<?> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.determineQualifiedType()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "46d3724d0be480cfc145196eca420cc52499e10f",
        "previous_commit": "ed140144cc7ae7d85f5647a94c07b400d4e0b012",
        "date": 1569734877,
        "releases": {
            "previous": "46d3724d0be480cfc145196eca420cc52499e10f",
            "next": "46d3724d0be480cfc145196eca420cc52499e10f"
        },
        "commit_message": "Pre-allocate some important config objects so they can share caches if there's no statement-level configuration\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "46d3724d0be480cfc145196eca420cc52499e10f": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectPlugin.java": [
                    "public void org.jdbi.v3.sqlobject.SqlObjectPlugin.customizeJdbi(Jdbi db)"
                ]
            },
            "ed140144cc7ae7d85f5647a94c07b400d4e0b012": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectPlugin.java": [
                    "public void org.jdbi.v3.sqlobject.SqlObjectPlugin.customizeJdbi(Jdbi db)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "18fbf27be546957f0a5b7009580de99d22327259",
        "previous_commit": "1ebac3ffe0e6a1cb50bce988a3483b292e43783a",
        "date": 1567351199,
        "releases": {
            "previous": "18fbf27be546957f0a5b7009580de99d22327259",
            "next": "18fbf27be546957f0a5b7009580de99d22327259"
        },
        "commit_message": "Improve SqlObject method error messaging and upgrade Kotlin\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "18fbf27be546957f0a5b7009580de99d22327259": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "private static Map<Method, Handler> org.jdbi.v3.sqlobject.SqlObjectFactory.buildMethodHandlers( Class<?> sqlObjectType, Handlers registry, HandlerDecorators decorators)"
                ]
            },
            "1ebac3ffe0e6a1cb50bce988a3483b292e43783a": {
                "sqlobject/src/main/java/org/jdbi/v3/sqlobject/SqlObjectFactory.java": [
                    "private static Map<Method, Handler> org.jdbi.v3.sqlobject.SqlObjectFactory.buildMethodHandlers( Class<?> sqlObjectType, Handlers registry, HandlerDecorators decorators)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b241bd338fc9ee981dd2dde890fe4e1266155a91",
        "previous_commit": "87a6b20b5ec7d0c17a266ab60e40064133d9c772",
        "date": 1665808954,
        "releases": {
            "previous": "b241bd338fc9ee981dd2dde890fe4e1266155a91",
            "next": "b241bd338fc9ee981dd2dde890fe4e1266155a91"
        },
        "commit_message": "style fix\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b241bd338fc9ee981dd2dde890fe4e1266155a91": {
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "public int[] org.jdbi.v3.core.statement.PreparedBatch.execute()"
                ]
            },
            "87a6b20b5ec7d0c17a266ab60e40064133d9c772": {
                "core/src/main/java/org/jdbi/v3/core/statement/PreparedBatch.java": [
                    "public int[] org.jdbi.v3.core.statement.PreparedBatch.execute()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5d6107f6451b73d0fa513aaaf01caf192f204038",
        "previous_commit": "3fc3b74c1199ed4b8fbc59dd52eb61a4d7cc4c8c",
        "date": 1601665378,
        "releases": {
            "previous": "5d6107f6451b73d0fa513aaaf01caf192f204038",
            "next": "5d6107f6451b73d0fa513aaaf01caf192f204038"
        },
        "commit_message": "Fix NPE in AnnotationFactory proxy annotation equals\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5d6107f6451b73d0fa513aaaf01caf192f204038": {
                "core/src/main/java/org/jdbi/v3/core/internal/AnnotationFactory.java": [
                    "static <T extends Annotation> InvocationHandler getInvocationHandler(Class<T> annotationType, Map<String, ?> values)"
                ]
            },
            "3fc3b74c1199ed4b8fbc59dd52eb61a4d7cc4c8c": {
                "core/src/main/java/org/jdbi/v3/core/internal/AnnotationFactory.java": [
                    "static <T extends Annotation> InvocationHandler getInvocationHandler(Class<T> annotationType, Map<String, ?> values)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "37f4bcce158acc4472dbefdaf0220068da0018f1",
        "previous_commit": "731356ca3d58ed8782c6290f785555fd74aad787",
        "date": 1562011302,
        "releases": {
            "previous": "37f4bcce158acc4472dbefdaf0220068da0018f1",
            "next": "37f4bcce158acc4472dbefdaf0220068da0018f1"
        },
        "commit_message": "fix #1270: forbid nulls for primitives\n\n\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "37f4bcce158acc4472dbefdaf0220068da0018f1": {
                "core/src/main/java/org/jdbi/v3/core/mapper/PrimitiveMapperFactory.java": [
                    "private static <T> ColumnMapper<T> org.jdbi.v3.core.mapper.PrimitiveMapperFactory.primitiveMapper(ColumnGetter<T> getter)"
                ]
            },
            "731356ca3d58ed8782c6290f785555fd74aad787": {
                "core/src/main/java/org/jdbi/v3/core/mapper/PrimitiveMapperFactory.java": [
                    "private static <T> ColumnMapper<T> org.jdbi.v3.core.mapper.PrimitiveMapperFactory.primitiveMapper(ColumnGetter<T> getter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a911f61a2505c1690f6d5905d7b404b5eefb7e47",
        "previous_commit": "93b78649bd00a04218d53df43282b17d0b1c379d",
        "date": 1706135715,
        "releases": {
            "previous": "a911f61a2505c1690f6d5905d7b404b5eefb7e47",
            "next": "a911f61a2505c1690f6d5905d7b404b5eefb7e47"
        },
        "commit_message": "FieldMapper: skip static fields\n\nFixes #2607\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a911f61a2505c1690f6d5905d7b404b5eefb7e47": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.createSpecializedRowMapper(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            },
            "93b78649bd00a04218d53df43282b17d0b1c379d": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/FieldMapper.java": [
                    "private Optional<RowMapper<T>> org.jdbi.v3.core.mapper.reflect.FieldMapper<T>.createSpecializedRowMapper(StatementContext ctx, List<String> columnNames, List<ColumnNameMatcher> columnNameMatchers, List<String> unmatchedColumns)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ce8e86eff92abc6d24a0997bebc37c36ba98cdd3",
        "previous_commit": "ef984dd650f4ee177f1ad06cc01a547d7abc94bd",
        "date": 1551589414,
        "releases": {
            "previous": "ce8e86eff92abc6d24a0997bebc37c36ba98cdd3",
            "next": "ce8e86eff92abc6d24a0997bebc37c36ba98cdd3"
        },
        "commit_message": "Replace synchronized WeakHashMap with ConcurrentHashMap\n\nFixes #1103\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ce8e86eff92abc6d24a0997bebc37c36ba98cdd3": {
                "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java": [
                    "public <C extends JdbiConfig<C>> C org.jdbi.v3.core.config.ConfigRegistry.get(Class<C> configClass)"
                ]
            },
            "ef984dd650f4ee177f1ad06cc01a547d7abc94bd": {
                "core/src/main/java/org/jdbi/v3/core/config/ConfigRegistry.java": [
                    "public <C extends JdbiConfig<C>> C org.jdbi.v3.core.config.ConfigRegistry.get(Class<C> configClass)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "112df406ddfdf8edde82e771442223e96e5df903",
        "previous_commit": "c9ce24fc5079d36c4d81be3b767a8705a6776006",
        "date": 1701137912,
        "releases": {
            "previous": "112df406ddfdf8edde82e771442223e96e5df903",
            "next": "112df406ddfdf8edde82e771442223e96e5df903"
        },
        "commit_message": "Spring Jdbi repositories:\n- reduced use of reflection\n- documented use\n- fixed minor bug\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "112df406ddfdf8edde82e771442223e96e5df903": {
                "spring5/src/main/java/org/jdbi/v3/spring5/JdbiRepositoryRegistrar.java": [
                    "public void org.jdbi.v3.spring5.JdbiRepositoryRegistrar.registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry)"
                ]
            },
            "c9ce24fc5079d36c4d81be3b767a8705a6776006": {
                "spring5/src/main/java/org/jdbi/v3/spring5/JdbiRepositoryRegistrar.java": [
                    "public void org.jdbi.v3.spring5.JdbiRepositoryRegistrar.registerBeanDefinitions(AnnotationMetadata metadata, BeanDefinitionRegistry registry)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "262096beaa54aaa6b2b87baabde4ea0eac2eef53",
        "previous_commit": "a8390d3444d3ee1aa8c3fe429e2b6bf98422e4ac",
        "date": 1681933429,
        "releases": {
            "previous": "262096beaa54aaa6b2b87baabde4ea0eac2eef53",
            "next": "262096beaa54aaa6b2b87baabde4ea0eac2eef53"
        },
        "commit_message": "FreemarkerEngine: singleton instance so caching works\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "262096beaa54aaa6b2b87baabde4ea0eac2eef53": {
                "freemarker/src/main/java/org/jdbi/v3/freemarker/internal/UseFreemarkerEngineImpl.java": [
                    "public void org.jdbi.v3.freemarker.internal.UseFreemarkerEngineImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ]
            },
            "a8390d3444d3ee1aa8c3fe429e2b6bf98422e4ac": {
                "freemarker/src/main/java/org/jdbi/v3/freemarker/internal/UseFreemarkerEngineImpl.java": [
                    "public void org.jdbi.v3.freemarker.internal.UseFreemarkerEngineImpl.configure(ConfigRegistry config, Annotation annotation, Class<?> sqlObjectType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2ef03ee227223fae48a7bd4f73f0661faaba0603",
        "previous_commit": "aaac18e638f782b3803f35b40c11a6a946101f6d",
        "date": 1690755396,
        "releases": {
            "previous": "2ef03ee227223fae48a7bd4f73f0661faaba0603",
            "next": "2ef03ee227223fae48a7bd4f73f0661faaba0603"
        },
        "commit_message": "Support custom callback handlers\n\nIntroduce new interface that is an analog of `TransactionHandler`\nbut for all callbacks, not just transactions. This interface,\n`Handler` is used to invoke the callback passed to JDBI's\n`useHandle`, `withHandle`, `inTransaction` and `withTransaction`.\nThis gives users a chance to global patch callbacks for all\nJDBI uses not just transactions.\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2ef03ee227223fae48a7bd4f73f0661faaba0603": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Jdbi.withHandle(HandleCallback<R, X> callback)"
                ]
            },
            "aaac18e638f782b3803f35b40c11a6a946101f6d": {
                "core/src/main/java/org/jdbi/v3/core/Jdbi.java": [
                    "public <R, X extends Exception> R org.jdbi.v3.core.Jdbi.withHandle(HandleCallback<R, X> callback)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a3b4ab730c7d2af6f8a6357fad67373d07ef9a23",
        "previous_commit": "5a9a11f6f7b61c2219f82cababad50415eeace29",
        "date": 1597353116,
        "releases": {
            "previous": "a3b4ab730c7d2af6f8a6357fad67373d07ef9a23",
            "next": "a3b4ab730c7d2af6f8a6357fad67373d07ef9a23"
        },
        "commit_message": "AnnotationFactory: prefer class's ClassLoader to TCCL\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a3b4ab730c7d2af6f8a6357fad67373d07ef9a23": {
                "core/src/main/java/org/jdbi/v3/core/internal/AnnotationFactory.java": [
                    "public static <T extends Annotation> T org.jdbi.v3.core.internal.AnnotationFactory.create(Class<T> annotationType, Map<String, ?> values)"
                ]
            },
            "5a9a11f6f7b61c2219f82cababad50415eeace29": {
                "core/src/main/java/org/jdbi/v3/core/internal/AnnotationFactory.java": [
                    "public static <T extends Annotation> T org.jdbi.v3.core.internal.AnnotationFactory.create(Class<T> annotationType, Map<String, ?> values)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c2373ac0b07728b9301422c002413ee1b3b49f01",
        "previous_commit": "c05f5782d9517eeae37c3cd9bf7f73781566b686",
        "date": 1569720116,
        "releases": {
            "previous": "c2373ac0b07728b9301422c002413ee1b3b49f01",
            "next": "c2373ac0b07728b9301422c002413ee1b3b49f01"
        },
        "commit_message": "BeanPojoProperty: compute qualified type only once\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c2373ac0b07728b9301422c002413ee1b3b49f01": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "public QualifiedType<?> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.getQualifiedType()"
                ]
            },
            "c05f5782d9517eeae37c3cd9bf7f73781566b686": {
                "core/src/main/java/org/jdbi/v3/core/mapper/reflect/internal/BeanPropertiesFactory.java": [
                    "public QualifiedType<?> org.jdbi.v3.core.mapper.reflect.internal.BeanPropertiesFactory.getQualifiedType()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "76c4513387337d0483d794cd39baea13d6877302",
        "previous_commit": "e943bb1bda14e8626984b6a57a4a8520ddf67d86",
        "date": 1567883658,
        "releases": {
            "previous": "76c4513387337d0483d794cd39baea13d6877302",
            "next": "76c4513387337d0483d794cd39baea13d6877302"
        },
        "commit_message": "refactor\n\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "76c4513387337d0483d794cd39baea13d6877302": {
                "postgres/src/main/java/org/jdbi/v3/postgres/internal/BitStringEnumSetArgument.java": []
            },
            "e943bb1bda14e8626984b6a57a4a8520ddf67d86": {
                "postgres/src/main/java/org/jdbi/v3/postgres/internal/BitStringEnumSetArgument.java": [
                    "public void org.jdbi.v3.postgres.internal.BitStringEnumSetArgument.apply(int position, PreparedStatement statement, StatementContext ctx)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7cd29fcfc6aa3418d00e82173745c16eb7e8662c",
        "previous_commit": "61d4a79d35c6433fd8cf4ddeb6820b8edf83c94a",
        "date": 1556054014,
        "releases": {
            "previous": "7cd29fcfc6aa3418d00e82173745c16eb7e8662c",
            "next": "7cd29fcfc6aa3418d00e82173745c16eb7e8662c"
        },
        "commit_message": "RowViewMapper: high-level map operation over RowView\n",
        "jmh_dependency": {
            "benchmark_directory": "benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7cd29fcfc6aa3418d00e82173745c16eb7e8662c": {
                "core/src/main/java/org/jdbi/v3/core/result/RowView.java": []
            },
            "61d4a79d35c6433fd8cf4ddeb6820b8edf83c94a": {
                "core/src/main/java/org/jdbi/v3/core/result/RowView.java": [
                    "public <T> T org.jdbi.v3.core.result.RowView.getColumn(String column, QualifiedType<T> type)",
                    "public Object org.jdbi.v3.core.result.RowView.getRow(Type type)",
                    "public <T> T org.jdbi.v3.core.result.RowView.getColumn(int column, QualifiedType<T> type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    }
]