[
    {
        "commit": "fcff9cda52c5e8206c704725fa5cf4440ac9bc5d",
        "previous_commit": "1f4b1d18aee2f9ec3fa89c1af676b6fe1759ad2b",
        "date": 1471382098,
        "releases": {
            "previous": "fcff9cda52c5e8206c704725fa5cf4440ac9bc5d",
            "next": "fcff9cda52c5e8206c704725fa5cf4440ac9bc5d"
        },
        "commit_message": "consolidate AsmUtils\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fcff9cda52c5e8206c704725fa5cf4440ac9bc5d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/asm/CsvMapperCellHandlerBuilder.java": [
                    "private static <T> void org.simpleflatmapper.csv.impl.asm.CsvMapperCellHandlerBuilder.appendPeekDelayedCellSetterValue(final DelayedCellSetterFactory<T, ?>[] delayedCellSetters, final ClassWriter cw, final String classType, final int maxMethodSize)",
                    "public static byte[] org.simpleflatmapper.csv.impl.asm.CsvMapperCellHandlerBuilder.createTargetSetterFactory(String factoryName, String className, Type target)",
                    "private static <T> void org.simpleflatmapper.csv.impl.asm.CsvMapperCellHandlerBuilder.appendInit(DelayedCellSetterFactory<T, ?>[] delayedCellSetters, CellSetter<T>[] setters, ClassWriter cw, String targetType, String classType, int maxSize)",
                    "private static <T> void org.simpleflatmapper.csv.impl.asm.CsvMapperCellHandlerBuilder.append_cellValue(final DelayedCellSetterFactory<T, ?>[] delayedCellSetters, final CellSetter<T>[] setters, ClassWriter cw, final String classType, final int maxMethodSize)",
                    "public static <T> byte[] org.simpleflatmapper.csv.impl.asm.CsvMapperCellHandlerBuilder.createTargetSetterClass(String className, DelayedCellSetterFactory<T, ?>[] delayedCellSetters, CellSetter<T>[] setters, Type type, boolean ignoreException, int maxMethodSize)",
                    "private static <T> void org.simpleflatmapper.csv.impl.asm.CsvMapperCellHandlerBuilder.append_delayedCellValue(final DelayedCellSetterFactory<T, ?>[] delayedCellSetters, final ClassWriter cw, final String classType, final int maxMethodSize)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/property/CustomReaderProperty.java": [
                    "public Type org.simpleflatmapper.csv.property.CustomReaderProperty.getReturnType()"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "public <P> Setter<SettableByIndexData, P> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey, ? extends ColumnDefinition<DatastaxColumnKey, ?>> arg)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmBuilder.java": [
                    "private static <S, T> void org.simpleflatmapper.map.asm.MapperAsmBuilder.declareConstructorMapperFields(ClassWriter cw, FieldMapper<S, T> mapper, int index)",
                    "private static <S, T> void org.simpleflatmapper.map.asm.MapperAsmBuilder.generateMappingCall(MethodVisitor mv, FieldMapper<S, T> mapper, int index, String classType, String sourceType, String targetType, String variablePrefix)",
                    "private static <S, T> void org.simpleflatmapper.map.asm.MapperAsmBuilder.declareMapperFields(ClassWriter cw,\t\t\tFieldMapper<S, T> mapper, int index)",
                    "public static <S,T> byte[] org.simpleflatmapper.map.asm.MapperAsmBuilder.dump( final String className, final FieldMapper<S, T>[] mappers, final FieldMapper<S, T>[] constructorMappers, final Class<? super S> sourceClass, final Class<T> target )"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/GetterProperty.java": [
                    "public static Type org.simpleflatmapper.map.property.GetterProperty.getReturnType(Getter<?, ?> getter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static String org.simpleflatmapper.reflect.asm.AsmUtils.toWrapperType(Type type)",
                    "public static String org.simpleflatmapper.reflect.asm.AsmUtils.toSignature(Method exec)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/ConstructorBuilder.java": [
                    "public static byte[] org.simpleflatmapper.reflect.asm.ConstructorBuilder.createEmptyConstructor(final String className, final Class<?> sourceClass,\t\t\tfinal Class<?> targetClass)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/GetterBuilder.java": [
                    "private static void org.simpleflatmapper.reflect.asm.GetterBuilder.appendBridge(ClassWriter cw, String targetType, String propertyType, String classType)",
                    "public static byte[] org.simpleflatmapper.reflect.asm.GetterBuilder.createPrimitiveGetter(String className, Field field)",
                    "public static byte[] org.simpleflatmapper.reflect.asm.GetterBuilder.createObjectGetter(final String className, final Field field)",
                    "public static byte[] org.simpleflatmapper.reflect.asm.GetterBuilder.createPrimitiveGetter(String className, Method method)",
                    "public static byte[] org.simpleflatmapper.reflect.asm.GetterBuilder.createObjectGetter(final String className, final Method method)",
                    "private static void org.simpleflatmapper.reflect.asm.GetterBuilder.appendPrimitiveBridges(ClassWriter cw, Class<?> primitive, String targetType, String primitiveType, String propertyType, String classType, String getMethod)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorBuilder.java": [
                    "public static <S> byte[] org.simpleflatmapper.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass, final Instantiator<Void, ?> builderInstantiator, final BuilderInstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendInit(Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String sourceType, String classType)",
                    "public static <S> byte[] org.simpleflatmapper.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass, final ExecutableInstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)",
                    "private static void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendBridgeMethod(ClassWriter cw, String targetType, String sourceType, String classType)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendNewInstance(Class<?> sourceClass, BuilderInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Map<Parameter, Method> setters)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendInitBuilder(Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String sourceType, String classType, BuilderInstantiatorDefinition instantiatorDefinition)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendNewInstance(Class<?> sourceClass, ExecutableInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Parameter[] parameters)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendGetters(Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/SetterBuilder.java": [
                    "public static byte[] org.simpleflatmapper.reflect.asm.SetterBuilder.createPrimitiveSetter(String className, Field field)",
                    "private static void org.simpleflatmapper.reflect.asm.SetterBuilder.appendPrimitiveSynthetic(ClassWriter cw, String targetType, String primitiveType, String propertyType, String classType, String setMethod, int primitiveLoadOp)",
                    "public static byte[] org.simpleflatmapper.reflect.asm.SetterBuilder.createObjectSetter(final String className, final Method method)",
                    "private static void org.simpleflatmapper.reflect.asm.SetterBuilder.appendSet(Method method, ClassWriter cw, Class<?> target, String targetType, String propertyType, String classType)",
                    "public static byte[] org.simpleflatmapper.reflect.asm.SetterBuilder.createPrimitiveSetter(String className, Method method)",
                    "public static byte[] org.simpleflatmapper.reflect.asm.SetterBuilder.createObjectSetter(final String className, final Field field)",
                    "private static void org.simpleflatmapper.reflect.asm.SetterBuilder.appendSynthetic(ClassWriter cw, String targetType, String propertyType, String classType)",
                    "private static void org.simpleflatmapper.reflect.asm.SetterBuilder.appendSet(Field field, ClassWriter cw, Class<?> target, String targetType, String propertyType, String classType)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private List<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.listProperties(final ReflectionService reflectService, Type targetType)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static Type[] org.simpleflatmapper.util.TypeHelper.getGenericParameterForClass(Type type, Class<?> interfaceClass)",
                    "private static Type org.simpleflatmapper.util.TypeHelper.getGenericSuperType(Type t)",
                    "public static <T> Class<T> org.simpleflatmapper.util.TypeHelper.toClass(Type target)",
                    "public static <T> Map<TypeVariable<?>, Type> org.simpleflatmapper.util.TypeHelper.getTypesMap(Type targetType)",
                    "private static Type org.simpleflatmapper.util.TypeHelper.getGenericInterface(Type t, Class<?> i)"
                ]
            },
            "1f4b1d18aee2f9ec3fa89c1af676b6fe1759ad2b": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/asm/CsvMapperCellHandlerBuilder.java": [
                    "private static <T> void org.simpleflatmapper.csv.impl.asm.CsvMapperCellHandlerBuilder.appendPeekDelayedCellSetterValue(final DelayedCellSetterFactory<T, ?>[] delayedCellSetters, final ClassWriter cw, final String classType, final int maxMethodSize)",
                    "public static byte[] org.simpleflatmapper.csv.impl.asm.CsvMapperCellHandlerBuilder.createTargetSetterFactory(String factoryName, String className, Type target)",
                    "private static <T> void org.simpleflatmapper.csv.impl.asm.CsvMapperCellHandlerBuilder.appendInit(DelayedCellSetterFactory<T, ?>[] delayedCellSetters, CellSetter<T>[] setters, ClassWriter cw, String targetType, String classType, int maxSize)",
                    "private static <T> void org.simpleflatmapper.csv.impl.asm.CsvMapperCellHandlerBuilder.append_cellValue(final DelayedCellSetterFactory<T, ?>[] delayedCellSetters, final CellSetter<T>[] setters, ClassWriter cw, final String classType, final int maxMethodSize)",
                    "public static <T> byte[] org.simpleflatmapper.csv.impl.asm.CsvMapperCellHandlerBuilder.createTargetSetterClass(String className, DelayedCellSetterFactory<T, ?>[] delayedCellSetters, CellSetter<T>[] setters, Type type, boolean ignoreException, int maxMethodSize)",
                    "private static <T> void org.simpleflatmapper.csv.impl.asm.CsvMapperCellHandlerBuilder.append_delayedCellValue(final DelayedCellSetterFactory<T, ?>[] delayedCellSetters, final ClassWriter cw, final String classType, final int maxMethodSize)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/property/CustomReaderProperty.java": [
                    "public Type org.simpleflatmapper.csv.property.CustomReaderProperty.getReturnType()"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "public <P> Setter<SettableByIndexData, P> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey, ? extends ColumnDefinition<DatastaxColumnKey, ?>> arg)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmBuilder.java": [
                    "private static <S, T> void org.simpleflatmapper.map.asm.MapperAsmBuilder.declareConstructorMapperFields(ClassWriter cw, FieldMapper<S, T> mapper, int index)",
                    "private static <S, T> void org.simpleflatmapper.map.asm.MapperAsmBuilder.generateMappingCall(MethodVisitor mv, FieldMapper<S, T> mapper, int index, String classType, String sourceType, String targetType, String variablePrefix)",
                    "private static <S, T> void org.simpleflatmapper.map.asm.MapperAsmBuilder.declareMapperFields(ClassWriter cw,\t\t\tFieldMapper<S, T> mapper, int index)",
                    "public static <S,T> byte[] org.simpleflatmapper.map.asm.MapperAsmBuilder.dump( final String className, final FieldMapper<S, T>[] mappers, final FieldMapper<S, T>[] constructorMappers, final Class<? super S> sourceClass, final Class<T> target )"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/GetterProperty.java": [
                    "public static Type org.simpleflatmapper.map.property.GetterProperty.getReturnType(Getter<?, ?> getter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static String org.simpleflatmapper.reflect.asm.AsmUtils.toWrapperType(Type type)",
                    "public static String org.simpleflatmapper.reflect.asm.AsmUtils.toSignature(Method exec)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/ConstructorBuilder.java": [
                    "public static byte[] org.simpleflatmapper.reflect.asm.ConstructorBuilder.createEmptyConstructor(final String className, final Class<?> sourceClass,\t\t\tfinal Class<?> targetClass)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/GetterBuilder.java": [
                    "private static void org.simpleflatmapper.reflect.asm.GetterBuilder.appendBridge(ClassWriter cw, String targetType, String propertyType, String classType)",
                    "public static byte[] org.simpleflatmapper.reflect.asm.GetterBuilder.createPrimitiveGetter(String className, Field field)",
                    "public static byte[] org.simpleflatmapper.reflect.asm.GetterBuilder.createObjectGetter(final String className, final Field field)",
                    "public static byte[] org.simpleflatmapper.reflect.asm.GetterBuilder.createPrimitiveGetter(String className, Method method)",
                    "public static byte[] org.simpleflatmapper.reflect.asm.GetterBuilder.createObjectGetter(final String className, final Method method)",
                    "private static void org.simpleflatmapper.reflect.asm.GetterBuilder.appendPrimitiveBridges(ClassWriter cw, Class<?> primitive, String targetType, String primitiveType, String propertyType, String classType, String getMethod)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorBuilder.java": [
                    "public static <S> byte[] org.simpleflatmapper.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass, final Instantiator<Void, ?> builderInstantiator, final BuilderInstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendInit(Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String sourceType, String classType)",
                    "public static <S> byte[] org.simpleflatmapper.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass, final ExecutableInstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)",
                    "private static void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendBridgeMethod(ClassWriter cw, String targetType, String sourceType, String classType)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendNewInstance(Class<?> sourceClass, BuilderInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Map<Parameter, Method> setters)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendInitBuilder(Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String sourceType, String classType, BuilderInstantiatorDefinition instantiatorDefinition)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendNewInstance(Class<?> sourceClass, ExecutableInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Parameter[] parameters)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendGetters(Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/SetterBuilder.java": [
                    "public static byte[] org.simpleflatmapper.reflect.asm.SetterBuilder.createPrimitiveSetter(String className, Field field)",
                    "private static void org.simpleflatmapper.reflect.asm.SetterBuilder.appendPrimitiveSynthetic(ClassWriter cw, String targetType, String primitiveType, String propertyType, String classType, String setMethod, int primitiveLoadOp)",
                    "public static byte[] org.simpleflatmapper.reflect.asm.SetterBuilder.createObjectSetter(final String className, final Method method)",
                    "private static void org.simpleflatmapper.reflect.asm.SetterBuilder.appendSet(Method method, ClassWriter cw, Class<?> target, String targetType, String propertyType, String classType)",
                    "public static byte[] org.simpleflatmapper.reflect.asm.SetterBuilder.createPrimitiveSetter(String className, Method method)",
                    "public static byte[] org.simpleflatmapper.reflect.asm.SetterBuilder.createObjectSetter(final String className, final Field field)",
                    "private static void org.simpleflatmapper.reflect.asm.SetterBuilder.appendSynthetic(ClassWriter cw, String targetType, String propertyType, String classType)",
                    "private static void org.simpleflatmapper.reflect.asm.SetterBuilder.appendSet(Field field, ClassWriter cw, Class<?> target, String targetType, String propertyType, String classType)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private List<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.listProperties(final ReflectionService reflectService, Type targetType)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static Type[] org.simpleflatmapper.util.TypeHelper.getGenericParameterForClass(Type type, Class<?> interfaceClass)",
                    "private static Type org.simpleflatmapper.util.TypeHelper.getGenericSuperType(Type t)",
                    "public static <T> Class<T> org.simpleflatmapper.util.TypeHelper.toClass(Type target)",
                    "public static <T> Map<TypeVariable<?>, Type> org.simpleflatmapper.util.TypeHelper.getTypesMap(Type targetType, Class<T> targetClass)",
                    "private static Type org.simpleflatmapper.util.TypeHelper.getGenericInterface(Type t, Class<?> i)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "04ad08aca425ca736fadab9449c9ec8ea604ad7c",
        "previous_commit": "21dda592a1b8abdd4ea008bc1e7a6aee9f9d7eef",
        "date": 1535578169,
        "releases": {
            "previous": "04ad08aca425ca736fadab9449c9ec8ea604ad7c",
            "next": "04ad08aca425ca736fadab9449c9ec8ea604ad7c"
        },
        "commit_message": "some more progress\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "04ad08aca425ca736fadab9449c9ec8ea604ad7c": {
                "sfm-converter-joda-time/src/main/java/org/simpleflatmapper/converter/joda/JodaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, ContextFactoryBuilder contextFactoryBuilder, Object... params)",
                    "public Converter<? super I, ? extends O> org.simpleflatmapper.converter.ConverterService.newConverter(ConvertingTypes targetedTypes, ContextFactoryBuilder contextFactoryBuilder, Object... params)",
                    "public List<ScoredConverterFactory> org.simpleflatmapper.converter.ConverterService.findConverterFactories(Type inType, Type outType, Object... params)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/CharSequenceToDateConverter.java": [
                    "public Date org.simpleflatmapper.converter.impl.CharSequenceToDateConverter.convert(CharSequence in, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/MultiFormatCharSequenceToDateConverter.java": [
                    "public Date org.simpleflatmapper.converter.impl.MultiFormatCharSequenceToDateConverter.convert(CharSequence in, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/JavaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.time.JavaTimeConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "private static <P, E> boolean org.simpleflatmapper.csv.CsvWriter<T>.canWrite(Type type)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/RowGetterFactory.java": [
                    "private Converter<?, ?> org.simpleflatmapper.datastax.impl.RowGetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "private Converter<?, ?> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt, ColumnDefinition<DatastaxColumnKey, ?> columnDefinition, ContextFactoryBuilder contextFactoryBuilder)",
                    "public <P> Setter<SettableByIndexData, P> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey> arg)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newInstance(DatastaxMapperFactory factory, Type target, UserType tt, int index)",
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperBuilder.java": [
                    "public JdbcMapper<T> org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.apply(SetRowMapper<ResultSet, ResultSet, T, SQLException> setRowMapper, List<JdbcColumnKey> keys)",
                    "public JdbcSourceFieldMapper<T> org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.newSourceFieldMapper()"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers(final ContextFactoryBuilder contextFactoryBuilder)",
                    "private QueryPreparer<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.preparedStatementMapper(NamedSqlQuery query, String[] generatedKeys)",
                    "private <P, C> MultiIndexFieldMapper<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey> pm)",
                    "private <P, C> ContextualIndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.getSetter(PropertyMapping<C, P, JdbcColumnKey> pm)",
                    "private <P, C> ContextualIndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.indexedSetterFactory(PropertyMapping<C, P, JdbcColumnKey> pm)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/converter/JdbcConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jdbc.converter.JdbcConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/AbstractBatchInsertQueryExecutor.java": [
                    "private void org.simpleflatmapper.jdbc.impl.AbstractBatchInsertQueryExecutor<T>.bindTo(PreparedStatement preparedStatement, Collection<T> values)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudFactory.java": [
                    "private static <T, K> KeyTupleQueryPreparer<K> org.simpleflatmapper.jdbc.impl.CrudFactory.buildKeyTupleQueryPreparer(ClassMeta<K> keyTarget, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/KeyTupleQueryPreparer.java": [
                    "public void org.simpleflatmapper.jdbc.impl.KeyTupleQueryPreparer<T>.bindTo(Collection<T> values, PreparedStatement ps, int offset)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/MultiIndexQueryPreparer.java": [
                    "public PreparedStatement org.simpleflatmapper.jdbc.impl.MultiIndexQueryPreparer<T>.bind(T value)",
                    "public QueryBinder<T> org.simpleflatmapper.jdbc.impl.MultiIndexQueryPreparer<T>.prepare(Connection connection)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/MysqlCrudFactory.java": [
                    "private static <T, K> BatchQueryExecutor<T> org.simpleflatmapper.jdbc.impl.MysqlCrudFactory.buildBatchInsert( ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory, boolean onDuplicateKeyUpdate)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PostgresqlCrudFactory.java": [
                    "private static <T, K> BatchQueryExecutor<T> org.simpleflatmapper.jdbc.impl.PostgresqlCrudFactory.buildBatchInsert( ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory, boolean onDuplicateKeyUpdate)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementIndexedSetterFactory.java": [
                    "protected <T> ContextualIndexedSetter<PreparedStatement, T> org.simpleflatmapper.jdbc.impl.PreparedStatementIndexedSetterFactory.getIndexedSetter(Type propertyType, PropertyMapping<?, ?, JdbcColumnKey> arg, ContextFactoryBuilder contextFactoryBuilder)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <P> ContextualSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getSetter(PropertyMapping<?, ?, JdbcColumnKey> pm, ContextFactoryBuilder contextFactoryBuilder)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/property/IndexedSetterFactoryProperty.java": [
                    "public <P> Setter<PreparedStatement, P> org.simpleflatmapper.jdbc.property.IndexedSetterFactoryProperty.getSetter(A arg)",
                    "private static <A> SetterFactory<PreparedStatement, A> org.simpleflatmapper.jdbc.property.IndexedSetterFactoryProperty.getSetterFactory(final IndexedSetterFactory<PreparedStatement, A> setterFactory)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/property/IndexedSetterProperty.java": [
                    "public <PP> Setter<PreparedStatement, PP> org.simpleflatmapper.jdbc.property.IndexedSetterProperty.getSetter(Object arg)"
                ],
                "sfm-jdbi/src/main/java/org/simpleflatmapper/jdbi/DynamicSfmResultSetMapper.java": [
                    "public T org.simpleflatmapper.jdbi.DynamicSfmResultSetMapper<T>.map(int i, ResultSet resultSet, StatementContext statementContext)"
                ],
                "sfm-jdbi/src/main/java/org/simpleflatmapper/jdbi/SfmResultSetMapperFactory.java": [
                    "public ResultSetMapper org.simpleflatmapper.jdbi.SfmResultSetMapperFactory.mapperFor(Class aClass, StatementContext statementContext)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordMapperProvider.java": [
                    "public <R extends Record, E> RecordMapper<R, E> org.simpleflatmapper.jooq.SfmRecordMapperProvider.provide(RecordType<R> recordType, Class<? extends E> type)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperBiInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>> BiInstantiator<S, MappingContext<?>, T> org.simpleflatmapper.map.mapper.MapperBiInstantiatorFactory.getBiInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K> propertyMappingsBuilder, Map<Parameter, ContextualGetter<? super S, ?>> constructorParameterGetterMap, final ContextualGetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled, boolean builderIgnoresNullValues, MappingContextFactoryBuilder<? super S, K> mappingContextFactoryBuilder)"
                ],
                "sfm-querydsl/src/main/java/org/simpleflatmapper/querydsl/QueryDslMappingProjection.java": [
                    "protected T org.simpleflatmapper.querydsl.QueryDslMappingProjection<T>.map(Tuple row)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public void org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.handle(PropertyMapping<T, ?, JdbcColumnKey> pm)",
                    "public PlaceHolderValueGetterSource<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.buildSource()"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceImpl.java": [
                    "public Object org.simpleflatmapper.jdbc.spring.SqlParameterSourceImpl<T>.getValue(String column)"
                ]
            },
            "21dda592a1b8abdd4ea008bc1e7a6aee9f9d7eef": {
                "sfm-converter-joda-time/src/main/java/org/simpleflatmapper/converter/joda/JodaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public Converter<? super I, ? extends O> org.simpleflatmapper.converter.ConverterService.newConverter(ConvertingTypes targetedTypes, Object... params)",
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, Object... params)",
                    "public List<ScoredConverterFactory> org.simpleflatmapper.converter.ConverterService.findConverterFactories(Type inType, Type outType, Object... params)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/CharSequenceToDateConverter.java": [
                    "public Date org.simpleflatmapper.converter.impl.CharSequenceToDateConverter.convert(CharSequence in, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/MultiFormatCharSequenceToDateConverter.java": [
                    "public Date org.simpleflatmapper.converter.impl.MultiFormatCharSequenceToDateConverter.convert(CharSequence in, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/JavaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.time.JavaTimeConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "private static <P, E> boolean org.simpleflatmapper.csv.CsvWriter<T>.canWrite(Type type)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/RowGetterFactory.java": [
                    "private Converter<?, ?> org.simpleflatmapper.datastax.impl.RowGetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "public <P> Setter<SettableByIndexData, P> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey> arg)",
                    "private Converter<?, ?> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt, ColumnDefinition<DatastaxColumnKey, ?> columnDefinition)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newInstance(DatastaxMapperFactory factory, Type target, UserType tt, int index)",
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperBuilder.java": [
                    "public JdbcMapper<T> org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.apply(SetRowMapper<ResultSet, ResultSet, T, SQLException> setRowMapper, List<JdbcColumnKey> keys)",
                    "public JdbcSourceFieldMapper<T> org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.newSourceFieldMapper()"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()",
                    "private <P, C> IndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.getSetter(PropertyMapping<C, P, JdbcColumnKey> pm)",
                    "private QueryPreparer<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.preparedStatementMapper(NamedSqlQuery query, String[] generatedKeys)",
                    "private <P, C> MultiIndexFieldMapper<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey> pm)",
                    "private <P, C> IndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.indexedSetterFactory(PropertyMapping<C, P, JdbcColumnKey> pm)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/converter/JdbcConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jdbc.converter.JdbcConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/AbstractBatchInsertQueryExecutor.java": [
                    "private void org.simpleflatmapper.jdbc.impl.AbstractBatchInsertQueryExecutor<T>.bindTo(PreparedStatement preparedStatement, Collection<T> values)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudFactory.java": [
                    "private static <T, K> KeyTupleQueryPreparer<K> org.simpleflatmapper.jdbc.impl.CrudFactory.buildKeyTupleQueryPreparer(ClassMeta<K> keyTarget, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/KeyTupleQueryPreparer.java": [
                    "public void org.simpleflatmapper.jdbc.impl.KeyTupleQueryPreparer<T>.bindTo(Collection<T> values, PreparedStatement ps, int offset)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/MultiIndexQueryPreparer.java": [
                    "public PreparedStatement org.simpleflatmapper.jdbc.impl.MultiIndexQueryPreparer<T>.bind(T value)",
                    "public QueryBinder<T> org.simpleflatmapper.jdbc.impl.MultiIndexQueryPreparer<T>.prepare(Connection connection)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/MysqlCrudFactory.java": [
                    "private static <T, K> BatchQueryExecutor<T> org.simpleflatmapper.jdbc.impl.MysqlCrudFactory.buildBatchInsert( ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory, boolean onDuplicateKeyUpdate)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PostgresqlCrudFactory.java": [
                    "private static <T, K> BatchQueryExecutor<T> org.simpleflatmapper.jdbc.impl.PostgresqlCrudFactory.buildBatchInsert( ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory, boolean onDuplicateKeyUpdate)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementIndexedSetterFactory.java": [
                    "protected <T> IndexedSetter<PreparedStatement, T> org.simpleflatmapper.jdbc.impl.PreparedStatementIndexedSetterFactory.getIndexedSetter(Type propertyType, PropertyMapping<?, ?, JdbcColumnKey> arg)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <P> Setter<PreparedStatement, P> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getSetter(PropertyMapping<?, ?, JdbcColumnKey> pm)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/property/IndexedSetterFactoryProperty.java": [
                    "public <P> Setter<PreparedStatement, P> org.simpleflatmapper.jdbc.property.IndexedSetterFactoryProperty.getSetter(A arg)",
                    "private static <A> SetterFactory<PreparedStatement, A> org.simpleflatmapper.jdbc.property.IndexedSetterFactoryProperty.getSetterFactory(final IndexedSetterFactory<PreparedStatement, A> setterFactory)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/property/IndexedSetterProperty.java": [
                    "public <PP> Setter<PreparedStatement, PP> org.simpleflatmapper.jdbc.property.IndexedSetterProperty.getSetter(Object arg)"
                ],
                "sfm-jdbi/src/main/java/org/simpleflatmapper/jdbi/DynamicSfmResultSetMapper.java": [
                    "public T org.simpleflatmapper.jdbi.DynamicSfmResultSetMapper<T>.map(int i, ResultSet resultSet, StatementContext statementContext)"
                ],
                "sfm-jdbi/src/main/java/org/simpleflatmapper/jdbi/SfmResultSetMapperFactory.java": [
                    "public ResultSetMapper org.simpleflatmapper.jdbi.SfmResultSetMapperFactory.mapperFor(Class aClass, StatementContext statementContext)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordMapperProvider.java": [
                    "public <R extends Record, E> RecordMapper<R, E> org.simpleflatmapper.jooq.SfmRecordMapperProvider.provide(RecordType<R> recordType, Class<? extends E> type)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperBiInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>> BiInstantiator<S, MappingContext<?>, T> org.simpleflatmapper.map.mapper.MapperBiInstantiatorFactory.getBiInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K> propertyMappingsBuilder, Map<Parameter, FieldMapperGetter<? super S, ?>> constructorParameterGetterMap, final FieldMapperGetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled, boolean builderIgnoresNullValues, MappingContextFactoryBuilder<? super S, K> mappingContextFactoryBuilder)"
                ],
                "sfm-querydsl/src/main/java/org/simpleflatmapper/querydsl/QueryDslMappingProjection.java": [
                    "protected T org.simpleflatmapper.querydsl.QueryDslMappingProjection<T>.map(Tuple row)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public void org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.handle(PropertyMapping<T, ?, JdbcColumnKey> pm)",
                    "public PlaceHolderValueGetterSource<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.buildSource()"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceImpl.java": [
                    "public Object org.simpleflatmapper.jdbc.spring.SqlParameterSourceImpl<T>.getValue(String column)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f1626820b8c8272624aa1fab1ca34a08db22e081",
        "previous_commit": "b1c1c3b7eb4d40ad827f9b9be23d18851080d6d8",
        "date": 1534882832,
        "releases": {
            "previous": "f1626820b8c8272624aa1fab1ca34a08db22e081",
            "next": "f1626820b8c8272624aa1fab1ca34a08db22e081"
        },
        "commit_message": " #545 remove old base, start adding new version\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f1626820b8c8272624aa1fab1ca34a08db22e081": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public CsvMapperFactory org.simpleflatmapper.csv.CsvMapperFactory.addCustomValueReader(String key, CellValueReader<?> cellValueReader)",
                    "public <T> CsvMapper<Result<T,CsvColumnKey>> org.simpleflatmapper.csv.CsvMapperFactory.newErrorCollectingMapper(final Type target)",
                    "public <T> CsvMapperBuilder<T> org.simpleflatmapper.csv.CsvMapperFactory.newBuilder(final ClassMeta<T> classMeta)",
                    "public CsvMapperFactory org.simpleflatmapper.csv.CsvMapperFactory.addCustomValueReader(String key, StringReader<?> stringReader)",
                    "public <T> CsvMapper<T> org.simpleflatmapper.csv.CsvMapperFactory.newMapper(final ClassMeta<T> classMeta)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private static <T> CsvMapper<T> org.simpleflatmapper.csv.CsvParser.newDefaultStaticMapper(Type mapToClass, ClassMeta<T> classMeta, CsvColumnDefinitionProviderImpl columnDefinitionProvider)",
                    "public StaticMapToDSL<T> org.simpleflatmapper.csv.CsvParser.addKey(String key)",
                    "public StaticMapToDSL<T> org.simpleflatmapper.csv.CsvParser.addMapping(String column)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "protected CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.newColumnMapDSL( ClassMeta<T> classMeta, Column[] columns, MapperConfig<CsvColumnKey> mapperConfig, CellWriter cellWriter, boolean skipHeaders)",
                    "public static <T> CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.from(Type type)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriterBuilder.java": [
                    "public static <T> CsvWriterBuilder<T> org.simpleflatmapper.csv.CsvWriterBuilder<T>.newBuilder(ClassMeta<T> classMeta, CellWriter cellWriter)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvColumnDefinitionProviderImpl.java": [
                    "public CsvColumnDefinitionProviderImpl org.simpleflatmapper.csv.impl.CsvColumnDefinitionProviderImpl.copy()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvMapperImpl.java": [
                    "public Stream<T> org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.stream(Reader reader, int skip)",
                    "public <H extends CheckedConsumer<? super T>> H org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.forEach(CsvReader reader, H handle)",
                    "public Stream<T> org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.stream(Reader reader)",
                    "public <H extends CheckedConsumer<? super T>> H org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.forEach(CsvReader reader, H handle, int limit)",
                    "public Iterator<T> org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.iterator(Reader reader, int skip)",
                    "public Iterator<T> org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.iterator(Reader reader)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "private <S, P> Setter<Appendable, ? super P> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.setterFromFactory(PropertyMapping<S, P, CsvColumnKey> pm)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperFactory.java": [
                    "public <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilderFrom(ClassMeta<T> classMeta)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "public <P> Setter<SettableByIndexData, P> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey> arg)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "protected JdbcColumnKey org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.newKey(String column, int i, FieldMapperColumnDefinition<JdbcColumnKey> columnDefinition)",
                    "private <P, C> IndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.indexedSetterFactory(PropertyMapping<C, P, JdbcColumnKey> pm)",
                    "private QueryPreparer<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.preparedStatementMapper(NamedSqlQuery query, String[] generatedKeys)",
                    "private <P, C> MultiIndexFieldMapper<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey> pm)",
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudMeta.java": [
                    "private static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.getCrudMeta(Connection connection, String _table, ColumnDefinitionProvider<JdbcColumnKey> columnDefinitionProvider, ResultSet resultSet, DatabaseMeta databaseMeta)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperBiInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>> BiInstantiator<S, MappingContext<? super S>, T> org.simpleflatmapper.map.mapper.MapperBiInstantiatorFactory.getBiInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K> propertyMappingsBuilder, Map<Parameter, BiFunction<? super S, ? super MappingContext<? super S>, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/SheetMapperFactory.java": [
                    "public <T> SheetMapperBuilder<T> org.simpleflatmapper.poi.SheetMapperFactory.newBuilder(Type type)",
                    "public <T> SheetMapper<T> org.simpleflatmapper.poi.SheetMapperFactory.newMapper(Type type)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public PlaceHolderValueGetterSource<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.buildSource()"
                ]
            },
            "b1c1c3b7eb4d40ad827f9b9be23d18851080d6d8": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public CsvMapperFactory org.simpleflatmapper.csv.CsvMapperFactory.addCustomValueReader(String key, CellValueReader<?> cellValueReader)",
                    "public <T> CsvMapper<Result<T,CsvColumnKey>> org.simpleflatmapper.csv.CsvMapperFactory.newErrorCollectingMapper(final Type target)",
                    "public <T> CsvMapperBuilder<T> org.simpleflatmapper.csv.CsvMapperFactory.newBuilder(final ClassMeta<T> classMeta)",
                    "public CsvMapperFactory org.simpleflatmapper.csv.CsvMapperFactory.addCustomValueReader(String key, StringReader<?> stringReader)",
                    "public <T> CsvMapper<T> org.simpleflatmapper.csv.CsvMapperFactory.newMapper(final ClassMeta<T> classMeta)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private static <T> CsvMapper<T> org.simpleflatmapper.csv.CsvParser.newDefaultStaticMapper(Type mapToClass, ClassMeta<T> classMeta, CsvColumnDefinitionProviderImpl columnDefinitionProvider)",
                    "public StaticMapToDSL<T> org.simpleflatmapper.csv.CsvParser.addKey(String key)",
                    "public StaticMapToDSL<T> org.simpleflatmapper.csv.CsvParser.addMapping(String column)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "protected CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.newMapDSL( ClassMeta<T> classMeta, Column[] columns, MapperConfig<CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> mapperConfig, CellWriter cellWriter, boolean skipHeaders)",
                    "public static <T> CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.from(Type type)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriterBuilder.java": [
                    "public static <T> CsvWriterBuilder<T> org.simpleflatmapper.csv.CsvWriterBuilder<T>.newBuilder(ClassMeta<T> classMeta, CellWriter cellWriter)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvColumnDefinitionProviderImpl.java": [
                    "public CsvColumnDefinitionProviderImpl org.simpleflatmapper.csv.impl.CsvColumnDefinitionProviderImpl.copy()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvMapperImpl.java": [
                    "public Stream<T> org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.stream(Reader reader, int skip)",
                    "public <H extends CheckedConsumer<? super T>> H org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.forEach(CsvReader reader, H handle)",
                    "public Stream<T> org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.stream(Reader reader)",
                    "public final <H extends CheckedConsumer<? super T>> H org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.forEach(CsvReader reader, H handle, int limit)",
                    "public Iterator<T> org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.iterator(Reader reader, int skip)",
                    "public Iterator<T> org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.iterator(Reader reader)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "private <S, P> Setter<Appendable, ? super P> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.setterFromFactory(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperFactory.java": [
                    "public <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilderFrom(ClassMeta<T> classMeta)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "public <P> Setter<SettableByIndexData, P> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey, ? extends ColumnDefinition<DatastaxColumnKey, ?>> arg)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "protected JdbcColumnKey org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.newKey(String column, int i, FieldMapperColumnDefinition<JdbcColumnKey> columnDefinition)",
                    "private <P, C> IndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.indexedSetterFactory(PropertyMapping<C, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "private <P, C> MultiIndexFieldMapper<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "private QueryPreparer<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.preparedStatementMapper(NamedSqlQuery query, String[] generatedKeys)",
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudMeta.java": [
                    "private static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.getCrudMeta(Connection connection, String _table, ColumnDefinitionProvider<FieldMapperColumnDefinition<JdbcColumnKey>, JdbcColumnKey> columnDefinitionProvider, ResultSet resultSet, DatabaseMeta databaseMeta)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperBiInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> BiInstantiator<S, MappingContext<? super S>, T> org.simpleflatmapper.map.mapper.MapperBiInstantiatorFactory.getBiInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, BiFunction<? super S, ? super MappingContext<? super S>, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/SheetMapperFactory.java": [
                    "public <T> SheetMapperBuilder<T> org.simpleflatmapper.poi.SheetMapperFactory.newBuilder(Type type)",
                    "public <T> SheetMapper<T> org.simpleflatmapper.poi.SheetMapperFactory.newMapper(Type type)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public PlaceHolderValueGetterSource<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.buildSource()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4cb57425d91bfed31f213651f7750877af108cdf",
        "previous_commit": "f1626820b8c8272624aa1fab1ca34a08db22e081",
        "date": 1534967109,
        "releases": {
            "previous": "4cb57425d91bfed31f213651f7750877af108cdf",
            "next": "4cb57425d91bfed31f213651f7750877af108cdf"
        },
        "commit_message": " #545 make base test case pass\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4cb57425d91bfed31f213651f7750877af108cdf": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public <H extends CheckedConsumer<? super T>> H org.simpleflatmapper.csv.CsvMapperFactory.forEach(Reader reader, H handle)",
                    "public <H extends CheckedConsumer<? super T>> H org.simpleflatmapper.csv.CsvMapperFactory.forEach(Reader reader, H handle, int skip)",
                    "public MapperKey<CsvColumnKey> org.simpleflatmapper.csv.CsvMapperFactory.newInstance(CsvRowSet csvRowSet)",
                    "public MapperKey<CsvColumnKey> org.simpleflatmapper.csv.CsvMapperFactory.newInstance(CsvRow csvRow)",
                    "public Iterator<T> org.simpleflatmapper.csv.CsvMapperFactory.iterator(CsvReader reader)",
                    "public Iterator<T> org.simpleflatmapper.csv.CsvMapperFactory.iterator(Reader reader)",
                    "public <H extends CheckedConsumer<? super T>> H org.simpleflatmapper.csv.CsvMapperFactory.forEach(Reader reader, H handle, int skip, int limit)",
                    "public Stream<T> org.simpleflatmapper.csv.CsvMapperFactory.stream(Reader reader)",
                    "public Iterator<T> org.simpleflatmapper.csv.CsvMapperFactory.iterator(Reader reader, int skip)",
                    "public Stream<T> org.simpleflatmapper.csv.CsvMapperFactory.stream(CsvReader reader)",
                    "public Stream<T> org.simpleflatmapper.csv.CsvMapperFactory.stream(Reader reader, int skip)",
                    "public <H extends CheckedConsumer<? super T>> H org.simpleflatmapper.csv.CsvMapperFactory.forEach(CsvReader reader, H handle)",
                    "public <H extends CheckedConsumer<? super T>> H org.simpleflatmapper.csv.CsvMapperFactory.forEach(CsvReader reader, H handle, int limit)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private StaticMapToDSL<T> org.simpleflatmapper.csv.CsvParser.defaultHeaders(org.simpleflatmapper.lightningcsv.CsvParser.AbstractDSL csvDsl)",
                    "public MapWithDSL<T> org.simpleflatmapper.csv.CsvParser.addKeys(String... keys)",
                    "private static <T> CsvMapper<T> org.simpleflatmapper.csv.CsvParser.newStaticMapper(ClassMeta<T> classMeta, List<Tuple2<String, ColumnDefinition<CsvColumnKey, ?>>> columns, CsvColumnDefinitionProviderImpl columnDefinitionProvider)",
                    "private CsvColumnDefinitionProviderImpl org.simpleflatmapper.csv.CsvParser.newColumnDefinitionProvider(Predicate<? super CsvColumnKey> predicate, ColumnDefinition<CsvColumnKey, ?> columnDefinition)",
                    "private CsvColumnDefinitionProviderImpl org.simpleflatmapper.csv.CsvParser.newColumnDefinitionProvider(String name, ColumnDefinition<CsvColumnKey, ?> columnDefinition)",
                    "private static <T> CsvMapper<T> org.simpleflatmapper.csv.CsvParser.newDefaultStaticMapper(ClassMeta<T> classMeta, CsvColumnDefinitionProviderImpl columnDefinitionProvider)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRow.java": [
                    "public boolean org.simpleflatmapper.csv.CsvRow.getBoolean(int i)",
                    "public void org.simpleflatmapper.csv.CsvRow.addValue(char[] buffer, int offset, int length)",
                    "public String org.simpleflatmapper.csv.CsvRow.getString(int i)",
                    "public void org.simpleflatmapper.csv.CsvRow.reset()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRowSet.java": [
                    "public boolean org.simpleflatmapper.csv.CsvRowSet.next()",
                    "public void org.simpleflatmapper.csv.CsvRowSet.newCell(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvMapperImpl.java": [
                    "private CsvRowSet org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.toCsvRowSet(CsvReader reader, int skip, int limit)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvRowGetterFactory.java": [
                    "public <P> Getter<CsvRow, P> org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.newGetter(Type target, CsvColumnKey key, Object... properties)"
                ]
            },
            "f1626820b8c8272624aa1fab1ca34a08db22e081": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public <H extends CheckedConsumer<? super T>> H org.simpleflatmapper.csv.CsvMapperFactory.forEach(Reader reader, H handle)",
                    "public <H extends CheckedConsumer<? super T>> H org.simpleflatmapper.csv.CsvMapperFactory.forEach(Reader reader, H handle, int skip)",
                    "public MapperKey<CsvColumnKey> org.simpleflatmapper.csv.CsvMapperFactory.newInstance(CsvRowSet csvRowSet)",
                    "public MapperKey<CsvColumnKey> org.simpleflatmapper.csv.CsvMapperFactory.newInstance(CsvRow csvRow)",
                    "public Iterator<T> org.simpleflatmapper.csv.CsvMapperFactory.iterator(CsvReader reader)",
                    "public Iterator<T> org.simpleflatmapper.csv.CsvMapperFactory.iterator(Reader reader)",
                    "public <H extends CheckedConsumer<? super T>> H org.simpleflatmapper.csv.CsvMapperFactory.forEach(Reader reader, H handle, int skip, int limit)",
                    "public Stream<T> org.simpleflatmapper.csv.CsvMapperFactory.stream(Reader reader)",
                    "public Iterator<T> org.simpleflatmapper.csv.CsvMapperFactory.iterator(Reader reader, int skip)",
                    "public Stream<T> org.simpleflatmapper.csv.CsvMapperFactory.stream(CsvReader reader)",
                    "public Stream<T> org.simpleflatmapper.csv.CsvMapperFactory.stream(Reader reader, int skip)",
                    "public <H extends CheckedConsumer<? super T>> H org.simpleflatmapper.csv.CsvMapperFactory.forEach(CsvReader reader, H handle)",
                    "public <H extends CheckedConsumer<? super T>> H org.simpleflatmapper.csv.CsvMapperFactory.forEach(CsvReader reader, H handle, int limit)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private StaticMapToDSL<T> org.simpleflatmapper.csv.CsvParser.defaultHeaders(org.simpleflatmapper.lightningcsv.CsvParser.AbstractDSL csvDsl)",
                    "private static <T> CsvMapper<T> org.simpleflatmapper.csv.CsvParser.newDefaultStaticMapper(Type mapToClass, ClassMeta<T> classMeta, CsvColumnDefinitionProviderImpl columnDefinitionProvider)",
                    "public MapWithDSL<T> org.simpleflatmapper.csv.CsvParser.addKeys(String... keys)",
                    "private CsvColumnDefinitionProviderImpl org.simpleflatmapper.csv.CsvParser.newColumnDefinitionProvider(Predicate<? super CsvColumnKey> predicate, ColumnDefinition<CsvColumnKey, ?> columnDefinition)",
                    "private CsvColumnDefinitionProviderImpl org.simpleflatmapper.csv.CsvParser.newColumnDefinitionProvider(String name, ColumnDefinition<CsvColumnKey, ?> columnDefinition)",
                    "private static <T> CsvMapper<T> org.simpleflatmapper.csv.CsvParser.newStaticMapper(Type mapToClass, ClassMeta<T> classMeta, List<Tuple2<String, ColumnDefinition<CsvColumnKey, ?>>> columns, CsvColumnDefinitionProviderImpl columnDefinitionProvider)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRow.java": [
                    "public boolean org.simpleflatmapper.csv.CsvRow.getBoolean(int i)",
                    "public void org.simpleflatmapper.csv.CsvRow.addValue(char[] buffer, int offset, int length)",
                    "public String org.simpleflatmapper.csv.CsvRow.getString(int i)",
                    "public void org.simpleflatmapper.csv.CsvRow.reset()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRowSet.java": [
                    "public boolean org.simpleflatmapper.csv.CsvRowSet.next()",
                    "public void org.simpleflatmapper.csv.CsvRowSet.newCell(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvMapperImpl.java": [
                    "private CsvRowSet org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.toCsvRowSet(CsvReader reader, int skip, int limit)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvRowGetterFactory.java": [
                    "public <P> Getter<CsvRow, P> org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.newGetter(Type target, CsvColumnKey key, Object... properties)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8ca97c231168f3990d0beee05d2d2bafda31e87d",
        "previous_commit": "8879f62e1bfebeb39d3cb2e8522961d1df53057a",
        "date": 1496941274,
        "releases": {
            "previous": "8ca97c231168f3990d0beee05d2d2bafda31e87d",
            "next": "8ca97c231168f3990d0beee05d2d2bafda31e87d"
        },
        "commit_message": "#445 configurable null check\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8ca97c231168f3990d0beee05d2d2bafda31e87d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "private Instantiator<CsvMapperCellHandler<T>, T> org.simpleflatmapper.csv.CsvMapperBuilder<T>.getInstantiator(Map<Parameter, Getter<? super CsvMapperCellHandler<T>, ?>> params)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.cellValueReaderFromFactory(PropertyMeta<?, ?> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/MapperInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> Instantiator<S,T> org.simpleflatmapper.csv.impl.MapperInstantiatorFactory.getInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, Getter<? super S, ?>> constructorParameterGetterMap, GetterFactory<? super S, K> getterFactory, boolean builderIgnoresNullValues)",
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> Instantiator<S,T> org.simpleflatmapper.csv.impl.MapperInstantiatorFactory.getInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, Getter<? super S, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperBiInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> BiInstantiator<S, MappingContext<? super S>,T> org.simpleflatmapper.map.mapper.MapperBiInstantiatorFactory.getBiInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, BiFunction<? super S, ? super MappingContext<? super S>, ?>> constructorParameterGetterMap, GetterFactory<? super S, K> getterFactory, boolean builderIgnoresNullValues)",
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> BiInstantiator<S, MappingContext<? super S>, T> org.simpleflatmapper.map.mapper.MapperBiInstantiatorFactory.getBiInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, BiFunction<? super S, ? super MappingContext<? super S>, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.getBiInstantiator(Type target, final Class<?> s1, final Class<?> s2, List<InstantiatorDefinition> constructors, Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)",
                    "private <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.builderInstantiator(BuilderInstantiatorDefinition instantiatorDefinition,\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)",
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.getBiInstantiator(InstantiatorDefinition instantiatorDefinition, Class<?> s1, Class<?> s2, Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getInstantiator(InstantiatorDefinition instantiatorDefinition, Class<S> source, Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getOneArgIdentityInstantiator(InstantiatorDefinition id, boolean builderIgnoresNullValues)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getInstantiator(Type target, final Class<S> source, List<InstantiatorDefinition> constructors, Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)",
                    "private <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.builderBiInstantiator(BuilderInstantiatorDefinition instantiatorDefinition,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "public ReflectionService org.simpleflatmapper.reflect.ReflectionService.withAliasProvider(AliasProvider aliasProvider)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.asm.AsmFactory.createInstantiator(final Class<S> source, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections, boolean builderIgnoresNullValues)",
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.asm.AsmFactory.createBiInstantiator(final Class<?> s1, final Class<?> s2, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean builderIgnoresNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "public static <S1, S2> byte[] org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.createInstantiator(final String className, final Class<?> s1, final Class<?> s2, final Instantiator<Void, ?> builderInstantiator, final BuilderInstantiatorDefinition instantiatorDefinition, final Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injectionsMap, boolean ignoreNullValues)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstanceBuilder(Class<?> s1, Class<?> s2, BuilderInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Map<Parameter, Method> setters, boolean ignoreNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorBuilder.java": [
                    "public static <S> byte[] org.simpleflatmapper.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass, final BuilderInstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections, boolean ignoreNullValues)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendNewInstanceBuilderOnBuilder(Class<?> sourceClass, BuilderInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Map<Parameter, Method> setters, boolean ignoreNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/ParamNameDeductor.java": [
                    "private Map<Parameter, Getter<? super Object, ?>> org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.parametersWithExpectedValue(InstantiatorDefinition instantiatorDefinition, Parameter param, boolean allowNull, boolean builderIgnoresNullValues)",
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.markValue(Type type, boolean builderIgnoresNullValues)",
                    "public String org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.findParamName(InstantiatorDefinition instantiatorDefinition, Parameter param, boolean builderIgnoresNullValues)",
                    "private Map<Parameter, Getter<? super Object, ?>> org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.parameters(InstantiatorDefinition instantiatorDefinition, boolean allowNull, boolean builderIgnoresNullValues)",
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.createValueFromInstantiator(Type type, boolean builderIgnoresNullValues)",
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.neutralValue(Type type, boolean allowNull, boolean builderIgnoresNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private List<ConstructorPropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.listConstructorProperties(List<InstantiatorDefinition> instantiatorDefinitions, boolean builderIgnoresNullValues)"
                ]
            },
            "8879f62e1bfebeb39d3cb2e8522961d1df53057a": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "private Instantiator<CsvMapperCellHandler<T>, T> org.simpleflatmapper.csv.CsvMapperBuilder<T>.getInstantiator(Map<Parameter, Getter<? super CsvMapperCellHandler<T>, ?>> params)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.cellValueReaderFromFactory(PropertyMeta<?, ?> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/MapperInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> Instantiator<S,T> org.simpleflatmapper.csv.impl.MapperInstantiatorFactory.getInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, Getter<? super S, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled)",
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> Instantiator<S,T> org.simpleflatmapper.csv.impl.MapperInstantiatorFactory.getInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, Getter<? super S, ?>> constructorParameterGetterMap, GetterFactory<? super S, K> getterFactory)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperBiInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> BiInstantiator<S, MappingContext<? super S>, T> org.simpleflatmapper.map.mapper.MapperBiInstantiatorFactory.getBiInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, BiFunction<? super S, ? super MappingContext<? super S>, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled)",
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> BiInstantiator<S, MappingContext<? super S>,T> org.simpleflatmapper.map.mapper.MapperBiInstantiatorFactory.getBiInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, BiFunction<? super S, ? super MappingContext<? super S>, ?>> constructorParameterGetterMap, GetterFactory<? super S, K> getterFactory)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getInstantiator(Type target, final Class<S> source, List<InstantiatorDefinition> constructors, Map<org.simpleflatmapper.reflect.Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled)",
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.getBiInstantiator(InstantiatorDefinition instantiatorDefinition, Class<?> s1, Class<?> s2, Map<org.simpleflatmapper.reflect.Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled)",
                    "private <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.builderInstantiator(BuilderInstantiatorDefinition instantiatorDefinition,\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<org.simpleflatmapper.reflect.Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getOneArgIdentityInstantiator(InstantiatorDefinition id)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getInstantiator(InstantiatorDefinition instantiatorDefinition, Class<S> source, Map<org.simpleflatmapper.reflect.Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled)",
                    "private <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.builderBiInstantiator(BuilderInstantiatorDefinition instantiatorDefinition,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<org.simpleflatmapper.reflect.Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled)",
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.getBiInstantiator(Type target, final Class<?> s1, final Class<?> s2, List<InstantiatorDefinition> constructors, Map<org.simpleflatmapper.reflect.Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "public ReflectionService org.simpleflatmapper.reflect.ReflectionService.withAliasProvider(AliasProvider aliasProvider)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.asm.AsmFactory.createBiInstantiator(final Class<?> s1, final Class<?> s2, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.asm.AsmFactory.createInstantiator(final Class<S> source, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "public static <S1, S2> byte[] org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.createInstantiator(final String className, final Class<?> s1, final Class<?> s2, final Instantiator<Void, ?> builderInstantiator, final BuilderInstantiatorDefinition instantiatorDefinition, final Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injectionsMap)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstanceBuilder(Class<?> s1, Class<?> s2, BuilderInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Map<Parameter, Method> setters)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorBuilder.java": [
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendNewInstanceBuilderOnBuilder(Class<?> sourceClass, BuilderInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Map<Parameter, Method> setters)",
                    "public static <S> byte[] org.simpleflatmapper.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass, final BuilderInstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/ParamNameDeductor.java": [
                    "private Map<Parameter, Getter<? super Object, ?>> org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.parameters(InstantiatorDefinition instantiatorDefinition, boolean allowNull)",
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.neutralValue(Type type, boolean allowNull)",
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.createValueFromInstantiator(Type type)",
                    "public String org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.findParamName(InstantiatorDefinition instantiatorDefinition, Parameter param)",
                    "private Map<Parameter, Getter<? super Object, ?>> org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.parametersWithExpectedValue(InstantiatorDefinition instantiatorDefinition, Parameter param, boolean allowNull)",
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.markValue(Type type)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private List<ConstructorPropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.listConstructorProperties(List<InstantiatorDefinition> instantiatorDefinitions)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3f9ce0649e8acbd3d2fcc5d614a310772caa590b",
        "previous_commit": "0c1d49ab7b12a1d89ea868624d4ba427ab608c62",
        "date": 1553692009,
        "releases": {
            "previous": "3f9ce0649e8acbd3d2fcc5d614a310772caa590b",
            "next": "3f9ce0649e8acbd3d2fcc5d614a310772caa590b"
        },
        "commit_message": " #623 keep asm factory per classloader, only keep static ref to sfm CL to avoid mem leak\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3f9ce0649e8acbd3d2fcc5d614a310772caa590b": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmFactory.java": [
                    "public <S, T> AbstractMapper<S, T> org.simpleflatmapper.map.asm.MapperAsmFactory.createMapper(final FieldKey<?>[] keys, final FieldMapper<S, T>[] mappers, final FieldMapper<S, T>[] constructorMappers, final BiInstantiator<S, MappingContext<? super S>, T> instantiator, final Class<? super S> source, final Class<T> target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/DefaultReflectionService.java": [
                    "public boolean org.simpleflatmapper.reflect.DefaultReflectionService.isAsmActivated()",
                    "public DefaultReflectionService org.simpleflatmapper.reflect.DefaultReflectionService.withSelfScoreFullName(boolean selfScoreFullName)",
                    "public ObjectSetterFactory org.simpleflatmapper.reflect.DefaultReflectionService.getObjectSetterFactory()",
                    "public DefaultReflectionService org.simpleflatmapper.reflect.DefaultReflectionService.withBuilderIgnoresNullValues(boolean builderIgnoresNullValues)",
                    "public InstantiatorFactory org.simpleflatmapper.reflect.DefaultReflectionService.getInstantiatorFactory()",
                    "public ObjectGetterFactory org.simpleflatmapper.reflect.DefaultReflectionService.getObjectGetterFactory()",
                    "public DefaultReflectionService org.simpleflatmapper.reflect.DefaultReflectionService.withAliasProvider(AliasProvider aliasProvider)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.getBiInstantiator(InstantiatorDefinition instantiatorDefinition, Class<?> s1, Class<?> s2, Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getInstantiator(InstantiatorDefinition instantiatorDefinition, Class<S> source, Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ObjectGetterFactory.java": [
                    "public <T, P> Getter<T, P> org.simpleflatmapper.reflect.ObjectGetterFactory.getMethodGetter(final Method method)",
                    "public <T, P> Getter<T, P> org.simpleflatmapper.reflect.ObjectGetterFactory.getFieldGetter(Field field)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ObjectSetterFactory.java": [
                    "public <T, P> Setter<T, P> org.simpleflatmapper.reflect.ObjectSetterFactory.getFieldSetter(Field field)",
                    "public <T, P> Setter<T, P> org.simpleflatmapper.reflect.ObjectSetterFactory.getMethodSetter(final Method method)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "public static ReflectionService org.simpleflatmapper.reflect.ReflectionService.newInstance(boolean useAsmGeneration)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.asm.AsmFactory.createEmptyArgsInstantiator(final Class<S> source, final Class<? extends T> target)",
                    "public Object org.simpleflatmapper.reflect.asm.AsmFactory.createClass(String className, byte[] bytes, ClassLoader classLoader)",
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.asm.AsmFactory.createBiInstantiator(final Class<?> s1, final Class<?> s2, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean builderIgnoresNullValues)",
                    "public <T, P> Setter<T,P> org.simpleflatmapper.reflect.asm.AsmFactory.createSetter(final Method m)",
                    "public <T, P> Getter<T,P> org.simpleflatmapper.reflect.asm.AsmFactory.createGetter(final Method m)",
                    "public <T, P> Setter<T,P> org.simpleflatmapper.reflect.asm.AsmFactory.createSetter(Field field)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.asm.AsmFactory.createInstantiator(final Class<S> source, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections, boolean builderIgnoresNullValues)",
                    "public <T, P> Getter<T,P> org.simpleflatmapper.reflect.asm.AsmFactory.createGetter(final Field m)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorKey.java": [
                    "public Class<?> org.simpleflatmapper.reflect.asm.BiInstantiatorKey.getDeclaringClass()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorKey.java": [
                    "public Class<?> org.simpleflatmapper.reflect.asm.InstantiatorKey<S>.getDeclaringClass()"
                ]
            },
            "0c1d49ab7b12a1d89ea868624d4ba427ab608c62": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmFactory.java": [
                    "public <S, T> AbstractMapper<S, T> org.simpleflatmapper.map.asm.MapperAsmFactory.createMapper(final FieldKey<?>[] keys, final FieldMapper<S, T>[] mappers, final FieldMapper<S, T>[] constructorMappers, final BiInstantiator<S, MappingContext<? super S>, T> instantiator, final Class<? super S> source, final Class<T> target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/DefaultReflectionService.java": [
                    "public boolean org.simpleflatmapper.reflect.DefaultReflectionService.isAsmActivated()",
                    "public DefaultReflectionService org.simpleflatmapper.reflect.DefaultReflectionService.withSelfScoreFullName(boolean selfScoreFullName)",
                    "public ObjectSetterFactory org.simpleflatmapper.reflect.DefaultReflectionService.getObjectSetterFactory()",
                    "public DefaultReflectionService org.simpleflatmapper.reflect.DefaultReflectionService.withBuilderIgnoresNullValues(boolean builderIgnoresNullValues)",
                    "public InstantiatorFactory org.simpleflatmapper.reflect.DefaultReflectionService.getInstantiatorFactory()",
                    "public ObjectGetterFactory org.simpleflatmapper.reflect.DefaultReflectionService.getObjectGetterFactory()",
                    "public DefaultReflectionService org.simpleflatmapper.reflect.DefaultReflectionService.withAliasProvider(AliasProvider aliasProvider)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.getBiInstantiator(InstantiatorDefinition instantiatorDefinition, Class<?> s1, Class<?> s2, Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getInstantiator(InstantiatorDefinition instantiatorDefinition, Class<S> source, Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ObjectGetterFactory.java": [
                    "public <T, P> Getter<T, P> org.simpleflatmapper.reflect.ObjectGetterFactory.getMethodGetter(final Method method)",
                    "public <T, P> Getter<T, P> org.simpleflatmapper.reflect.ObjectGetterFactory.getFieldGetter(Field field)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ObjectSetterFactory.java": [
                    "public <T, P> Setter<T, P> org.simpleflatmapper.reflect.ObjectSetterFactory.getFieldSetter(Field field)",
                    "public <T, P> Setter<T, P> org.simpleflatmapper.reflect.ObjectSetterFactory.getMethodSetter(final Method method)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "public static ReflectionService org.simpleflatmapper.reflect.ReflectionService.newInstance(boolean useAsmGeneration)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.asm.AsmFactory.createEmptyArgsInstantiator(final Class<S> source, final Class<? extends T> target)",
                    "public Object org.simpleflatmapper.reflect.asm.AsmFactory.createClass(String className, byte[] bytes, ClassLoader classLoader)",
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.asm.AsmFactory.createBiInstantiator(final Class<?> s1, final Class<?> s2, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean builderIgnoresNullValues)",
                    "public <T, P> Setter<T,P> org.simpleflatmapper.reflect.asm.AsmFactory.createSetter(final Method m)",
                    "public <T, P> Getter<T,P> org.simpleflatmapper.reflect.asm.AsmFactory.createGetter(final Method m)",
                    "public <T, P> Setter<T,P> org.simpleflatmapper.reflect.asm.AsmFactory.createSetter(Field field)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.asm.AsmFactory.createInstantiator(final Class<S> source, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections, boolean builderIgnoresNullValues)",
                    "public <T, P> Getter<T,P> org.simpleflatmapper.reflect.asm.AsmFactory.createGetter(final Field m)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorKey.java": [
                    "public Class<?> org.simpleflatmapper.reflect.asm.BiInstantiatorKey.getDeclaringClass()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorKey.java": [
                    "public Class<?> org.simpleflatmapper.reflect.asm.InstantiatorKey<S>.getDeclaringClass()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ca2f7043352bdfdef018bc42b66834ab14dd7ecc",
        "previous_commit": "2fcf361985d36d995bf713e553e91c768f672b15",
        "date": 1470938111,
        "releases": {
            "previous": "ca2f7043352bdfdef018bc42b66834ab14dd7ecc",
            "next": "ca2f7043352bdfdef018bc42b66834ab14dd7ecc"
        },
        "commit_message": "fix warnings\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ca2f7043352bdfdef018bc42b66834ab14dd7ecc": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "private <P> Getter<CsvMapperCellHandler<T>, P> org.simpleflatmapper.csv.CsvMapperBuilder<T>.newDelayedGetter(Type propertyType, CsvColumnKey key, Object... properties)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "public <T,P> CellSetter<T> org.simpleflatmapper.csv.impl.CellSetterFactory.getPrimitiveCellSetter(Class<?> clazz, CellValueReader<? extends P> reader, Setter<? super T, ? super P> setter)",
                    "public <T, P> Getter<CsvMapperCellHandler<T>, P> org.simpleflatmapper.csv.impl.CellSetterFactory.newDelayedGetter(CsvColumnKey key, Type type)",
                    "private <T,P> DelayedCellSetterFactory<T, P> org.simpleflatmapper.csv.impl.CellSetterFactory.getPrimitiveDelayedCellSetter(Class<?> clazz, CellValueReader<? extends P> reader, Setter<? super T, ? super P> setter)",
                    "public <T, P> DelayedCellSetterFactory<T, P> org.simpleflatmapper.csv.impl.CellSetterFactory.getDelayedCellSetter(PropertyMeta<T, P> prop, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)",
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.cellValueReaderFromFactory(PropertyMeta<?, ?> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/DelayedGetter.java": [],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "private <S, P> Setter<Appendable, ? super P> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.setterFromFactory(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm)",
                    "private <S, P> Setter<Appendable, ? super P> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.getSetter(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, CellWriter cellWriter)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/converter/JdbcConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jdbc.converter.JdbcConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "private <P, I> IndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getSetterWithConvertion(Class<P> pclazz, Class<I> iclass, PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> Instantiator<S,T> org.simpleflatmapper.map.mapper.MapperInstantiatorFactory.getInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, Getter<? super S, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getOneArgIdentityInstantiator(InstantiatorDefinition id)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ObjectSetterFactory.java": [
                    "public static <T> IntSetter<? super T> org.simpleflatmapper.reflect.ObjectSetterFactory.toIntSetter(final Setter<? super T, ? super Integer> setter)",
                    "public static <T> LongSetter<? super T> org.simpleflatmapper.reflect.ObjectSetterFactory.toLongSetter(final Setter<? super T, ? super Long> setter)",
                    "public static <T> FloatSetter<? super T> org.simpleflatmapper.reflect.ObjectSetterFactory.toFloatSetter(final Setter<? super T, ? super Float> setter)",
                    "public static <T> BooleanSetter<? super T> org.simpleflatmapper.reflect.ObjectSetterFactory.toBooleanSetter(final Setter<? super T, ? super Boolean> setter)",
                    "public static <T> ShortSetter<? super T> org.simpleflatmapper.reflect.ObjectSetterFactory.toShortSetter(final Setter<? super T, ? super Short> setter)",
                    "public static <T> CharacterSetter<? super T> org.simpleflatmapper.reflect.ObjectSetterFactory.toCharacterSetter(final Setter<? super T, ? super Character> setter)",
                    "public static <T> DoubleSetter<? super T> org.simpleflatmapper.reflect.ObjectSetterFactory.toDoubleSetter(final Setter<? super T, ? super Double> setter)",
                    "public static <T> ByteSetter<? super T> org.simpleflatmapper.reflect.ObjectSetterFactory.toByteSetter(final Setter<? super T, ? super Byte> setter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.asm.AsmFactory.createInstantiator(final Class<S> source, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorKey.java": [
                    "private static <S> InjectedParam[] org.simpleflatmapper.reflect.asm.InstantiatorKey<S>.paramAndGetterClass(Map<Parameter, Getter<? super S, ?>> injections)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/OptionalPropertyFinder.java": [
                    "public <E> PropertyMeta<Optional<T>, E> org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher)",
                    "public List<InstantiatorDefinition> org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.getEligibleInstantiatorDefinitions()",
                    "private <I, E> PropertyMeta<Optional<T>, E> org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.getSubPropertyMeta(PropertyMeta<I, ?> property)"
                ]
            },
            "2fcf361985d36d995bf713e553e91c768f672b15": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "private <P> Getter<CsvMapperCellHandler<T>, P> org.simpleflatmapper.csv.CsvMapperBuilder<T>.newDelayedGetter(Type propertyType, CsvColumnKey key, Object... properties)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "private <T,P> DelayedCellSetterFactory<T, P> org.simpleflatmapper.csv.impl.CellSetterFactory.getPrimitiveDelayedCellSetter(Class<?> clazz, CellValueReader<? extends P> reader, Setter<T, ? super P> setter)",
                    "public <T,P> CellSetter<T> org.simpleflatmapper.csv.impl.CellSetterFactory.getPrimitiveCellSetter(Class<?> clazz, CellValueReader<? extends P> reader, Setter<? super T, ? super P> setter)",
                    "public <T, P> Getter<CsvMapperCellHandler<T>, P> org.simpleflatmapper.csv.impl.CellSetterFactory.newDelayedGetter(CsvColumnKey key, Type type)",
                    "public <T, P> DelayedCellSetterFactory<T, P> org.simpleflatmapper.csv.impl.CellSetterFactory.getDelayedCellSetter(PropertyMeta<T, P> prop, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)",
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.cellValueReaderFromFactory(PropertyMeta<?, ?> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/DelayedGetter.java": [
                    "public T org.simpleflatmapper.csv.impl.DelayedGetter<T>.get(CsvMapperCellHandler<?> target)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "private <S, P> Setter<Appendable, ?> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.setterFromFactory(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm)",
                    "private <S, P> Setter<Appendable, ? super P> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.getSetter(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, CellWriter cellWriter)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/converter/JdbcConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jdbc.converter.JdbcConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "private <P, I> IndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getSetterWithConvertion(Class<P> pclazz, Class<I> iclass, PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> Instantiator<S,T> org.simpleflatmapper.map.mapper.MapperInstantiatorFactory.getInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, Getter<? super S, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getOneArgIdentityInstantiator(InstantiatorDefinition id)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ObjectSetterFactory.java": [
                    "public static <T> BooleanSetter<T> org.simpleflatmapper.reflect.ObjectSetterFactory.toBooleanSetter(final Setter<T, ? super Boolean> setter)",
                    "public static <T> FloatSetter<T> org.simpleflatmapper.reflect.ObjectSetterFactory.toFloatSetter(final Setter<T, ? super Float> setter)",
                    "public static <T> ShortSetter<T> org.simpleflatmapper.reflect.ObjectSetterFactory.toShortSetter(final Setter<T, ? super Short> setter)",
                    "public static <T> IntSetter<T> org.simpleflatmapper.reflect.ObjectSetterFactory.toIntSetter(final Setter<T, ? super Integer> setter)",
                    "public static <T> ByteSetter<T> org.simpleflatmapper.reflect.ObjectSetterFactory.toByteSetter(final Setter<T, ? super Byte> setter)",
                    "public static <T> CharacterSetter<T> org.simpleflatmapper.reflect.ObjectSetterFactory.toCharacterSetter(final Setter<T, ? super Character> setter)",
                    "public static <T> LongSetter<T> org.simpleflatmapper.reflect.ObjectSetterFactory.toLongSetter(final Setter<T, ? super Long> setter)",
                    "public static <T> DoubleSetter<T> org.simpleflatmapper.reflect.ObjectSetterFactory.toDoubleSetter(final Setter<T, ? super Double> setter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.asm.AsmFactory.createInstantiator(final Class<?> source, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorKey.java": [
                    "private static InjectedParam[] org.simpleflatmapper.reflect.asm.InstantiatorKey.paramAndGetterClass(Map<Parameter, Getter<?, ?>> injections)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/OptionalPropertyFinder.java": [
                    "public <E> PropertyMeta<Optional<T>, E> org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher)",
                    "public List<InstantiatorDefinition> org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.getEligibleInstantiatorDefinitions()",
                    "private <I, E> PropertyMeta<Optional<T>, E> org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.getSubPropertyMeta(PropertyMeta<I, ?> property)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f60f4691427c3e5b9516d9bafeff743a1aa98311",
        "previous_commit": "49a9e3d2925357c8108381166ec85bba3776c003",
        "date": 1572982307,
        "releases": {
            "previous": "f60f4691427c3e5b9516d9bafeff743a1aa98311",
            "next": "f60f4691427c3e5b9516d9bafeff743a1aa98311"
        },
        "commit_message": " #689 more consistent heuristic better handle selfscore full name\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f60f4691427c3e5b9516d9bafeff743a1aa98311": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorClassMeta.java": [
                    "public PropertyFinder<T> org.simpleflatmapper.map.impl.DiscriminatorClassMeta<T>.newPropertyFinder()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorReflectionService.java": [
                    "public DiscriminatorReflectionService org.simpleflatmapper.map.impl.DiscriminatorReflectionService.withSelfScoreFullName(boolean selfScoreFullName)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/ExtendPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.ExtendPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final boolean allowSelfReference, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/DefaultReflectionService.java": [
                    "public DefaultReflectionService org.simpleflatmapper.reflect.DefaultReflectionService.withAliasProvider(AliasProvider aliasProvider)",
                    "public DefaultReflectionService org.simpleflatmapper.reflect.DefaultReflectionService.withBuilderIgnoresNullValues(boolean builderIgnoresNullValues)",
                    "public boolean org.simpleflatmapper.reflect.DefaultReflectionService.selfScoreFullName()",
                    "public DefaultReflectionService org.simpleflatmapper.reflect.DefaultReflectionService.withSelfScoreFullName(boolean selfScoreFullName)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public IndexedColumn org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matchIndex()",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matches(final CharSequence property)",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.partialMatch(final CharSequence property)",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.speculativeMatch()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties, FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public PropertyMeta<T, ?> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.selectBestMatch()",
                    "public boolean org.simpleflatmapper.reflect.meta.PropertyFinder<T>.selfScoreFullName()",
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher, Object[] properties, TypeAffinityScorer typeAffinity, PropertyFinderProbe propertyFinderProbe, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculative()",
                    "public static PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.newInstance(boolean selfScoreFullName)",
                    "public String org.simpleflatmapper.reflect.meta.PropertyMatchingScore.toString()",
                    "public int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.compareTo(PropertyMatchingScore o)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ]
            },
            "49a9e3d2925357c8108381166ec85bba3776c003": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorClassMeta.java": [
                    "public PropertyFinder<T> org.simpleflatmapper.map.impl.DiscriminatorClassMeta<T>.newPropertyFinder()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorReflectionService.java": [
                    "public DiscriminatorReflectionService org.simpleflatmapper.map.impl.DiscriminatorReflectionService.withSelfScoreFullName(boolean selfScoreFullName)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/ExtendPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.ExtendPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final boolean allowSelfReference, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/DefaultReflectionService.java": [
                    "public DefaultReflectionService org.simpleflatmapper.reflect.DefaultReflectionService.withAliasProvider(AliasProvider aliasProvider)",
                    "public DefaultReflectionService org.simpleflatmapper.reflect.DefaultReflectionService.withBuilderIgnoresNullValues(boolean builderIgnoresNullValues)",
                    "public boolean org.simpleflatmapper.reflect.DefaultReflectionService.selfScoreFullName()",
                    "public DefaultReflectionService org.simpleflatmapper.reflect.DefaultReflectionService.withSelfScoreFullName(boolean selfScoreFullName)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public IndexedColumn org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matchIndex()",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matches(final CharSequence property)",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.partialMatch(final CharSequence property)",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.speculativeMatch()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties, FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public PropertyMeta<T, ?> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.selectBestMatch()",
                    "public boolean org.simpleflatmapper.reflect.meta.PropertyFinder<T>.selfScoreFullName()",
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher, Object[] properties, TypeAffinityScorer typeAffinity, PropertyFinderProbe propertyFinderProbe, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculative()",
                    "public static PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.newInstance(boolean selfScoreFullName)",
                    "public String org.simpleflatmapper.reflect.meta.PropertyMatchingScore.toString()",
                    "public int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.compareTo(PropertyMatchingScore o)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "424f69524cf5cee8452bf17c149a0d9f5f44a05f",
        "previous_commit": "6d419ed4fc66976e83ae734b9b79de191e32ef34",
        "date": 1529329278,
        "releases": {
            "previous": "424f69524cf5cee8452bf17c149a0d9f5f44a05f",
            "next": "424f69524cf5cee8452bf17c149a0d9f5f44a05f"
        },
        "commit_message": " #529 update cassandra driver\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "424f69524cf5cee8452bf17c149a0d9f5f44a05f": {
                "sfm-converter-joda-time/src/main/java/org/simpleflatmapper/converter/joda/JodaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, Object... params)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DataTypeHelper.java": [
                    "public static boolean org.simpleflatmapper.datastax.DataTypeHelper.isNumber(DataType.Name name)",
                    "public static Class<?> org.simpleflatmapper.datastax.DataTypeHelper.asJavaClass(DataType.Name name)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, Object... properties)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxByteGetter.java": [
                    "public byte org.simpleflatmapper.datastax.impl.getter.DatastaxByteGetter.getByte(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxGenericBigDecimalGetter.java": [
                    "public BigDecimal org.simpleflatmapper.datastax.impl.getter.DatastaxGenericBigDecimalGetter.get(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxGenericBigIntegerGetter.java": [
                    "public BigInteger org.simpleflatmapper.datastax.impl.getter.DatastaxGenericBigIntegerGetter.get(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxGenericByteGetter.java": [
                    "public byte org.simpleflatmapper.datastax.impl.getter.DatastaxGenericByteGetter.getByte(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxGenericDoubleGetter.java": [
                    "public double org.simpleflatmapper.datastax.impl.getter.DatastaxGenericDoubleGetter.getDouble(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxGenericFloatGetter.java": [
                    "public float org.simpleflatmapper.datastax.impl.getter.DatastaxGenericFloatGetter.getFloat(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxGenericIntegerGetter.java": [
                    "public int org.simpleflatmapper.datastax.impl.getter.DatastaxGenericIntegerGetter.getInt(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxGenericLongGetter.java": [
                    "public long org.simpleflatmapper.datastax.impl.getter.DatastaxGenericLongGetter.getLong(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxGenericShortGetter.java": [
                    "public short org.simpleflatmapper.datastax.impl.getter.DatastaxGenericShortGetter.getShort(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxShortGetter.java": [
                    "public short org.simpleflatmapper.datastax.impl.getter.DatastaxShortGetter.getShort(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxTimeGetter.java": [
                    "public long org.simpleflatmapper.datastax.impl.getter.DatastaxTimeGetter.getLong(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxTimestampGetter.java": [
                    "public Date org.simpleflatmapper.datastax.impl.getter.DatastaxTimestampGetter.get(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/ByteSettableDataSetter.java": [
                    "public void org.simpleflatmapper.datastax.impl.setter.ByteSettableDataSetter.set(SettableByIndexData target, Byte value)",
                    "public void org.simpleflatmapper.datastax.impl.setter.ByteSettableDataSetter.setByte(SettableByIndexData target, byte value)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/ShortSettableDataSetter.java": [
                    "public void org.simpleflatmapper.datastax.impl.setter.ShortSettableDataSetter.set(SettableByIndexData target, Short value)",
                    "public void org.simpleflatmapper.datastax.impl.setter.ShortSettableDataSetter.setShort(SettableByIndexData target, short value)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/TimeSettableDataSetter.java": [
                    "public void org.simpleflatmapper.datastax.impl.setter.TimeSettableDataSetter.setLong(SettableByIndexData target, long value)",
                    "public void org.simpleflatmapper.datastax.impl.setter.TimeSettableDataSetter.set(SettableByIndexData target, Long value)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/TimestampSettableDataSetter.java": [
                    "public void org.simpleflatmapper.datastax.impl.setter.TimestampSettableDataSetter.set(SettableByIndexData target, Date value)"
                ]
            },
            "6d419ed4fc66976e83ae734b9b79de191e32ef34": {
                "sfm-converter-joda-time/src/main/java/org/simpleflatmapper/converter/joda/JodaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, Object... params)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DataTypeHelper.java": [
                    "public static boolean org.simpleflatmapper.datastax.DataTypeHelper.isNumber(DataType.Name name)",
                    "public static Class<?> org.simpleflatmapper.datastax.DataTypeHelper.asJavaClass(DataType.Name name)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, Object... properties)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxByteGetter.java": [
                    "public byte org.simpleflatmapper.datastax.impl.getter.DatastaxByteGetter.getByte(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxGenericBigDecimalGetter.java": [
                    "public BigDecimal org.simpleflatmapper.datastax.impl.getter.DatastaxGenericBigDecimalGetter.get(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxGenericBigIntegerGetter.java": [
                    "public BigInteger org.simpleflatmapper.datastax.impl.getter.DatastaxGenericBigIntegerGetter.get(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxGenericByteGetter.java": [
                    "public byte org.simpleflatmapper.datastax.impl.getter.DatastaxGenericByteGetter.getByte(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxGenericDoubleGetter.java": [
                    "public double org.simpleflatmapper.datastax.impl.getter.DatastaxGenericDoubleGetter.getDouble(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxGenericFloatGetter.java": [
                    "public float org.simpleflatmapper.datastax.impl.getter.DatastaxGenericFloatGetter.getFloat(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxGenericIntegerGetter.java": [
                    "public int org.simpleflatmapper.datastax.impl.getter.DatastaxGenericIntegerGetter.getInt(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxGenericLongGetter.java": [
                    "public long org.simpleflatmapper.datastax.impl.getter.DatastaxGenericLongGetter.getLong(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxGenericShortGetter.java": [
                    "public short org.simpleflatmapper.datastax.impl.getter.DatastaxGenericShortGetter.getShort(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxShortGetter.java": [
                    "public short org.simpleflatmapper.datastax.impl.getter.DatastaxShortGetter.getShort(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxTimeGetter.java": [
                    "public long org.simpleflatmapper.datastax.impl.getter.DatastaxTimeGetter.getLong(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxTimestampGetter.java": [
                    "public Date org.simpleflatmapper.datastax.impl.getter.DatastaxTimestampGetter.get(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/ByteSettableDataSetter.java": [
                    "public void org.simpleflatmapper.datastax.impl.setter.ByteSettableDataSetter.set(SettableByIndexData target, Byte value)",
                    "public void org.simpleflatmapper.datastax.impl.setter.ByteSettableDataSetter.setByte(SettableByIndexData target, byte value)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/ShortSettableDataSetter.java": [
                    "public void org.simpleflatmapper.datastax.impl.setter.ShortSettableDataSetter.set(SettableByIndexData target, Short value)",
                    "public void org.simpleflatmapper.datastax.impl.setter.ShortSettableDataSetter.setShort(SettableByIndexData target, short value)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/TimeSettableDataSetter.java": [
                    "public void org.simpleflatmapper.datastax.impl.setter.TimeSettableDataSetter.setLong(SettableByIndexData target, long value)",
                    "public void org.simpleflatmapper.datastax.impl.setter.TimeSettableDataSetter.set(SettableByIndexData target, Long value)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/TimestampSettableDataSetter.java": [
                    "public void org.simpleflatmapper.datastax.impl.setter.TimestampSettableDataSetter.set(SettableByIndexData target, Date value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "eac5628291500bf3dfd846bd9477ccc010a3adbf",
        "previous_commit": "be3b6d1591053e3ccb831b8399b4e1ef32f2486d",
        "date": 1438804590,
        "releases": {
            "previous": "eac5628291500bf3dfd846bd9477ccc010a3adbf",
            "next": "eac5628291500bf3dfd846bd9477ccc010a3adbf"
        },
        "commit_message": " #219 remove source from column def\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "eac5628291500bf3dfd846bd9477ccc010a3adbf": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/DatastaxUDTGetter.java": [
                    "public static <P> Mapper<GettableByIndexData, P> org.sfm.datastax.impl.DatastaxUDTGetter<T>.newUDTMapper(Type target, UserType tt, DatastaxMapperFactory factory)",
                    "public static <P> FieldMapperMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.sfm.datastax.impl.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-jooq/src/main/java/org/sfm/jooq/JooqMapperBuilder.java": [
                    "public JooqMapperBuilder<E> org.sfm.jooq.JooqMapperBuilder<E>.addField(JooqFieldKey key)"
                ],
                "sfm-jooq/src/main/java/org/sfm/jooq/conv/JooqConverterFactory.java": [
                    "private static <F, P, E> Converter<F, P> org.sfm.jooq.conv.JooqConverterFactory.newArrayToListConverter(Type eltType)",
                    "private static <F, P, E> Converter<F, P> org.sfm.jooq.conv.JooqConverterFactory.newArrayConverter(Type eltType)"
                ],
                "sfm-poi/src/main/java/org/sfm/poi/SheetMapperFactory.java": [
                    "public <T> SheetMapper<T> org.sfm.poi.SheetMapperFactory.newMapper(Type type)",
                    "public <T> SheetMapperBuilder<T> org.sfm.poi.SheetMapperFactory.newBuilder(Type type)"
                ],
                "sfm-poi/src/main/java/org/sfm/poi/impl/DynamicSheetMapper.java": [
                    "private SheetMapper<T> org.sfm.poi.impl.DynamicSheetMapper<T>.getPoiMapper(MapperKey<CsvColumnKey> key)"
                ],
                "sfm-querydsl/src/main/java/org/sfm/querydsl/QueryDslMapperBuilder.java": [
                    "public <E> QueryDslMapperBuilder<T> org.sfm.querydsl.QueryDslMapperBuilder<T>.addMapping(Expression<?> expression, int i)"
                ],
                "sfm/src/main/java/org/sfm/csv/CsvWriter.java": [
                    "protected CsvWriterDSL<T> org.sfm.csv.CsvWriter<T>.newCsvWriterDSL(Tuple2<String, FieldMapperColumnDefinition<CsvColumnKey>>[] columns, CellWriter cellWriter, ContextualMapper<T, Appendable> mapper, ClassMeta<T> classMeta, DefaultFieldAppenderFactory fieldAppenderFactory, MapperConfig<CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> mapperConfig, boolean skipHeaders)",
                    "protected CsvWriterDSL<T> org.sfm.csv.CsvWriter<T>.newColumnMapDSL( ClassMeta<T> classMeta, Tuple2<String, FieldMapperColumnDefinition<CsvColumnKey>>[] columns, MapperConfig<CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> mapperConfig, DefaultFieldAppenderFactory fieldAppenderFactory, CellWriter cellWriter, boolean skipHeaders)",
                    "protected CsvWriterDSL<T> org.sfm.csv.CsvWriter<T>.newMapDSL( ClassMeta<T> classMeta, Tuple2<String, FieldMapperColumnDefinition<CsvColumnKey>>[] columns, MapperConfig<CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> mapperConfig, DefaultFieldAppenderFactory fieldAppenderFactory, CellWriter cellWriter, boolean skipHeaders)",
                    "public static <T> CsvWriterDSL<T> org.sfm.csv.CsvWriter<T>.from(Type type)",
                    "public CsvWriterDSL<T> org.sfm.csv.CsvWriter<T>.column(String column, ColumnProperty... property)",
                    "private static <T> Tuple2<String, FieldMapperColumnDefinition<CsvColumnKey>>[] org.sfm.csv.CsvWriter<T>.toColumnDefinitions(String[] header)"
                ],
                "sfm/src/main/java/org/sfm/csv/CsvWriterBuilder.java": [
                    "public CsvWriterBuilder<T> org.sfm.csv.CsvWriterBuilder<T>.addColumn(String column, ColumnProperty... properties)",
                    "public CsvWriterBuilder<T> org.sfm.csv.CsvWriterBuilder<T>.addColumn(String column)",
                    "public Mapper<T, Appendable> org.sfm.csv.CsvWriterBuilder<T>.mapper()",
                    "public static <T> CsvWriterBuilder<T> org.sfm.csv.CsvWriterBuilder<T>.newBuilder(ClassMeta<T> classMeta, CellWriter cellWriter)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/DiscriminatorJdbcBuilder.java": [
                    "public DiscriminatorJdbcSubBuilder org.sfm.jdbc.DiscriminatorJdbcBuilder<T>.addMapping(String column)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/JdbcMapperBuilder.java": [
                    "public JdbcMapperBuilder<T> org.sfm.jdbc.JdbcMapperBuilder<T>.addMapping(final String column, final int index, final int sqlType)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/JdbcMapperFactory.java": [
                    "public <T> DiscriminatorJdbcBuilder<T> org.sfm.jdbc.JdbcMapperFactory.newDiscriminator(String column)",
                    "public JdbcMapperFactory org.sfm.jdbc.JdbcMapperFactory.addCustomGetter(String key, Getter<ResultSet, ?> getter)",
                    "public JdbcMapperFactory org.sfm.jdbc.JdbcMapperFactory.addCustomFieldMapper(String key, FieldMapper<ResultSet, ?> fieldMapper)"
                ]
            },
            "be3b6d1591053e3ccb831b8399b4e1ef32f2486d": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/DatastaxUDTGetter.java": [
                    "public static <P> Mapper<GettableByIndexData, P> org.sfm.datastax.impl.DatastaxUDTGetter<T>.newUDTMapper(Type target, UserType tt, DatastaxMapperFactory factory)",
                    "public static <P> FieldMapperMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.sfm.datastax.impl.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-jooq/src/main/java/org/sfm/jooq/JooqMapperBuilder.java": [
                    "public JooqMapperBuilder<E> org.sfm.jooq.JooqMapperBuilder<E>.addField(JooqFieldKey key)"
                ],
                "sfm-jooq/src/main/java/org/sfm/jooq/conv/JooqConverterFactory.java": [
                    "private static <F, P, E> Converter<F, P> org.sfm.jooq.conv.JooqConverterFactory.newArrayToListConverter(Type eltType)",
                    "private static <F, P, E> Converter<F, P> org.sfm.jooq.conv.JooqConverterFactory.newArrayConverter(Type eltType)"
                ],
                "sfm-poi/src/main/java/org/sfm/poi/SheetMapperFactory.java": [
                    "public <T> SheetMapper<T> org.sfm.poi.SheetMapperFactory.newMapper(Type type)",
                    "public <T> SheetMapperBuilder<T> org.sfm.poi.SheetMapperFactory.newBuilder(Type type)"
                ],
                "sfm-poi/src/main/java/org/sfm/poi/impl/DynamicSheetMapper.java": [
                    "private SheetMapper<T> org.sfm.poi.impl.DynamicSheetMapper<T>.getPoiMapper(MapperKey<CsvColumnKey> key)"
                ],
                "sfm-querydsl/src/main/java/org/sfm/querydsl/QueryDslMapperBuilder.java": [
                    "public <E> QueryDslMapperBuilder<T> org.sfm.querydsl.QueryDslMapperBuilder<T>.addMapping(Expression<?> expression, int i)"
                ],
                "sfm/src/main/java/org/sfm/csv/CsvWriter.java": [
                    "private static <T> Tuple2<String, FieldMapperColumnDefinition<CsvColumnKey, T>>[] org.sfm.csv.CsvWriter<T>.toColumnDefinitions(String[] header)",
                    "protected NoColumnCsvWriterDSL<T> org.sfm.csv.CsvWriter<T>.newCsvWriterDSL(Tuple2<String, FieldMapperColumnDefinition<CsvColumnKey, T>>[] columns, CellWriter cellWriter, ContextualMapper<T, Appendable> mapper, ClassMeta<T> classMeta, DefaultFieldAppenderFactory fieldAppenderFactory, MapperConfig<CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey, T>> mapperConfig, boolean skipHeaders)",
                    "public static <T> CsvWriterDSL<T> org.sfm.csv.CsvWriter<T>.from(Type type)",
                    "protected CsvWriterDSL<T> org.sfm.csv.CsvWriter<T>.newColumnMapDSL( ClassMeta<T> classMeta, Tuple2<String, FieldMapperColumnDefinition<CsvColumnKey, T>>[] columns, MapperConfig<CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey, T>> mapperConfig, DefaultFieldAppenderFactory fieldAppenderFactory, CellWriter cellWriter, boolean skipHeaders)",
                    "public CsvWriterDSL<T> org.sfm.csv.CsvWriter<T>.column(String column, ColumnProperty... property)"
                ],
                "sfm/src/main/java/org/sfm/csv/CsvWriterBuilder.java": [
                    "public CsvWriterBuilder<T> org.sfm.csv.CsvWriterBuilder<T>.addColumn(String column, ColumnProperty... properties)",
                    "public CsvWriterBuilder<T> org.sfm.csv.CsvWriterBuilder<T>.addColumn(String column)",
                    "public Mapper<T, Appendable> org.sfm.csv.CsvWriterBuilder<T>.mapper()",
                    "public static <T> CsvWriterBuilder<T> org.sfm.csv.CsvWriterBuilder<T>.newBuilder(ClassMeta<T> classMeta, CellWriter cellWriter)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/DiscriminatorJdbcBuilder.java": [
                    "public DiscriminatorJdbcSubBuilder org.sfm.jdbc.DiscriminatorJdbcBuilder<T>.addMapping(String column)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/JdbcMapperBuilder.java": [
                    "public JdbcMapperBuilder<T> org.sfm.jdbc.JdbcMapperBuilder<T>.addMapping(final String column, final int index, final int sqlType)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/JdbcMapperFactory.java": [
                    "public <T> DiscriminatorJdbcBuilder<T> org.sfm.jdbc.JdbcMapperFactory.newDiscriminator(String column)",
                    "public JdbcMapperFactory org.sfm.jdbc.JdbcMapperFactory.addCustomGetter(String key, Getter<ResultSet, ?> getter)",
                    "public JdbcMapperFactory org.sfm.jdbc.JdbcMapperFactory.addCustomFieldMapper(String key, FieldMapper<ResultSet, ?> fieldMapper)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b796a5e2fe3f2da3175396694fedcea7f51e2c29",
        "previous_commit": "20957ba99859d9aa41d2331f9502886993686d59",
        "date": 1470350210,
        "releases": {
            "previous": "b796a5e2fe3f2da3175396694fedcea7f51e2c29",
            "next": "b796a5e2fe3f2da3175396694fedcea7f51e2c29"
        },
        "commit_message": "more granular module, build still failing\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b796a5e2fe3f2da3175396694fedcea7f51e2c29": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvColumnDefinition.java": [
                    "public String[] org.simpleflatmapper.csv.CsvColumnDefinition.dateFormats()",
                    "public TimeZone org.simpleflatmapper.csv.CsvColumnDefinition.getTimeZone()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "public void org.simpleflatmapper.csv.CsvMapperBuilder<T>.handle(PropertyMapping<T, ?, CsvColumnKey, CsvColumnDefinition> propMapping)",
                    "public final CsvMapper<T> org.simpleflatmapper.csv.CsvMapperBuilder<T>.mapper()",
                    "private Instantiator<CsvMapperCellHandler<T>, T> org.simpleflatmapper.csv.CsvMapperBuilder<T>.getInstantiator(Map<Parameter, Getter<? super CsvMapperCellHandler<T>, ?>> params)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public MapWithDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.addKeys(String... keys)",
                    "private CsvColumnDefinitionProviderImpl org.simpleflatmapper.csv.MapToDSL<T>.newColumnDefinitionProvider(Predicate<? super CsvColumnKey> predicate, CsvColumnDefinition columnDefinition)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "private void org.simpleflatmapper.csv.CsvWriter<T>.addHeaders(Appendable appendable)",
                    "public CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.column(String column, ColumnProperty... property)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)",
                    "private <T> CellValueReader<T> org.simpleflatmapper.csv.impl.CellValueReaderFactoryImpl.newJavaTime(CsvColumnDefinition csvColumnDefinition, UnaryFactory<DateTimeFormatter, CellValueReader<T>> unaryFactory)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/asm/CsvAsmFactory.java": [
                    "private <T> String org.simpleflatmapper.csv.impl.asm.CsvAsmFactory.generateClassNameCsvMapperCellHandler(Type target, DelayedCellSetterFactory<T, ?>[] delayedCellSetterFactories, CellSetter<T>[] setters)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/joda/JodaTimeCellValueReaderHelper.java": [
                    "private static CellValueReader<?> org.simpleflatmapper.csv.impl.cellreader.joda.JodaTimeCellValueReaderHelper.newJodaTime(CsvColumnDefinition csvColumnDefinition, UnaryFactory<DateTimeFormatter, CellValueReader<?>> unaryFactory)",
                    "public static CellValueReader<?> org.simpleflatmapper.csv.impl.cellreader.joda.JodaTimeCellValueReaderHelper.getReader(Type type, CsvColumnDefinition columnDefinition)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType, JdbcColumnKey key, Object... properties)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType,\t\t\t\t\t\t\t\t\t\t\t JdbcColumnKey key, Object... properties)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/DiscriminatorJdbcMapper.java": [
                    "protected JdbcMapper<T> org.simpleflatmapper.jdbc.impl.DiscriminatorJdbcMapper<T>.getMapper(final ResultSet rs)",
                    "protected DiscriminatorEnumerable<ResultSet, T> org.simpleflatmapper.jdbc.impl.DiscriminatorJdbcMapper<T>.newEnumarableOfT(ResultSet rs)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <T> IndexedSetter<PreparedStatement, T> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/setter/JodaTimePreparedStatementFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.setter.JodaTimePreparedStatementFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ]
            },
            "20957ba99859d9aa41d2331f9502886993686d59": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvColumnDefinition.java": [
                    "public String[] org.simpleflatmapper.csv.CsvColumnDefinition.dateFormats()",
                    "public TimeZone org.simpleflatmapper.csv.CsvColumnDefinition.getTimeZone()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "public void org.simpleflatmapper.csv.CsvMapperBuilder<T>.handle(PropertyMapping<T, ?, CsvColumnKey, CsvColumnDefinition> propMapping)",
                    "public final CsvMapper<T> org.simpleflatmapper.csv.CsvMapperBuilder<T>.mapper()",
                    "private Instantiator<CsvMapperCellHandler<T>, T> org.simpleflatmapper.csv.CsvMapperBuilder<T>.getInstantiator(Map<Parameter, Getter<? super CsvMapperCellHandler<T>, ?>> params)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public MapWithDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.addKeys(String... keys)",
                    "private CsvColumnDefinitionProviderImpl org.simpleflatmapper.csv.MapToDSL<T>.newColumnDefinitionProvider(Predicate<? super CsvColumnKey> predicate, CsvColumnDefinition columnDefinition)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "private void org.simpleflatmapper.csv.CsvWriter<T>.addHeaders(Appendable appendable)",
                    "public CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.column(String column, ColumnProperty... property)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)",
                    "private <T> CellValueReader<T> org.simpleflatmapper.csv.impl.CellValueReaderFactoryImpl.newJavaTime(CsvColumnDefinition csvColumnDefinition, UnaryFactory<DateTimeFormatter, CellValueReader<T>> unaryFactory)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/asm/CsvAsmFactory.java": [
                    "private <T> String org.simpleflatmapper.csv.impl.asm.CsvAsmFactory.generateClassNameCsvMapperCellHandler(Type target, DelayedCellSetterFactory<T, ?>[] delayedCellSetterFactories, CellSetter<T>[] setters)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/joda/JodaTimeCellValueReaderHelper.java": [
                    "private static CellValueReader<?> org.simpleflatmapper.csv.impl.cellreader.joda.JodaTimeCellValueReaderHelper.newJodaTime(CsvColumnDefinition csvColumnDefinition, UnaryFactory<DateTimeFormatter, CellValueReader<?>> unaryFactory)",
                    "public static CellValueReader<?> org.simpleflatmapper.csv.impl.cellreader.joda.JodaTimeCellValueReaderHelper.getReader(Type type, CsvColumnDefinition columnDefinition)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType,\t\t\t\t\t\t\t\t\t\t\t JdbcColumnKey key, ColumnDefinition<?, ?> columnDefinition)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType, JdbcColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/DiscriminatorJdbcMapper.java": [
                    "protected JdbcMapper<T> org.simpleflatmapper.jdbc.impl.DiscriminatorJdbcMapper<T>.getMapper(final ResultSet rs)",
                    "protected DiscriminatorEnumerable<ResultSet, T> org.simpleflatmapper.jdbc.impl.DiscriminatorJdbcMapper<T>.newEnumarableOfT(ResultSet rs)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <T> IndexedSetter<PreparedStatement, T> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/setter/JodaTimePreparedStatementFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.setter.JodaTimePreparedStatementFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8c5639beb1decb3e76a2b5f9164a7d3e23ed1119",
        "previous_commit": "4d222c86c0b794c97f2627afccbb29ad53e22d41",
        "date": 1481027717,
        "releases": {
            "previous": "8c5639beb1decb3e76a2b5f9164a7d3e23ed1119",
            "next": "8c5639beb1decb3e76a2b5f9164a7d3e23ed1119"
        },
        "commit_message": " #380 fix comment edge cases (#382)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8c5639beb1decb3e76a2b5f9164a7d3e23ed1119": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "protected DSL org.simpleflatmapper.csv.DSL.newDSL(char separatorChar, char quoteChar, int bufferSize, int skip, int limit, int maxBufferSize, StringPostProcessing stringPostProcessing, org.simpleflatmapper.util.Function<? super CellConsumer, ? extends CellConsumer> cellConsumerWrapper, boolean yamlComment)",
                    "public D limit(int limit)",
                    "public D bufferSize(int size)",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlComments()",
                    "public D skip(int skip)",
                    "protected TextFormat getTextFormat()",
                    "public DSL org.simpleflatmapper.csv.DSL.trimSpaces()",
                    "protected DSLYamlComment org.simpleflatmapper.csv.DSLYamlComment.newDSL(char separatorChar, char quoteChar, int bufferSize, int skip, int limit, int maxBufferSize, StringPostProcessing stringPostProcessing, org.simpleflatmapper.util.Function<? super CellConsumer, ? extends CellConsumer> cellConsumerWrapper, boolean yamlComment)",
                    "public D quote(char c)",
                    "public CellConsumer org.simpleflatmapper.csv.DSL.apply(CellConsumer cellConsumer)",
                    "private YamlCellPreProcessor.YamlCellConsumer org.simpleflatmapper.csv.DSLYamlComment.newYamlCellConsumer(CheckedConsumer<String[]> rowConsumer, CheckedConsumer<String> commentConsumer)",
                    "public DSL org.simpleflatmapper.csv.DSL.disableUnescaping()",
                    "public D separator(char c)",
                    "public D maxBufferSize(int maxBufferSize)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/YamlCellPreProcessor.java": [
                    "public boolean org.simpleflatmapper.csv.parser.YamlCellPreProcessor.endOfRow()",
                    "public void org.simpleflatmapper.csv.parser.YamlCellPreProcessor.newCell(char[] chars, int start, int end, int state)",
                    "public void org.simpleflatmapper.csv.parser.YamlCellPreProcessor.end()"
                ]
            },
            "4d222c86c0b794c97f2627afccbb29ad53e22d41": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public D limit(int limit)",
                    "public D bufferSize(int size)",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlComments()",
                    "protected DSL org.simpleflatmapper.csv.DSL.newDSL(char separatorChar, char quoteChar, int bufferSize, int skip, int limit, int maxBufferSize, StringPostProcessing stringPostProcessing, org.simpleflatmapper.util.Function<? super CellConsumer, ? extends CellConsumer> cellConsumerWrapper)",
                    "public D skip(int skip)",
                    "protected TextFormat getTextFormat()",
                    "public DSL org.simpleflatmapper.csv.DSL.trimSpaces()",
                    "public D quote(char c)",
                    "public CellConsumer org.simpleflatmapper.csv.DSL.apply(CellConsumer cellConsumer)",
                    "private YamlCellPreProcessor.YamlCellConsumer org.simpleflatmapper.csv.DSLYamlComment.newYamlCellConsumer(CheckedConsumer<String[]> rowConsumer, CheckedConsumer<String> commentConsumer)",
                    "protected DSLYamlComment org.simpleflatmapper.csv.DSLYamlComment.newDSL(char separatorChar, char quoteChar, int bufferSize, int skip, int limit, int maxBufferSize, StringPostProcessing stringPostProcessing, org.simpleflatmapper.util.Function<? super CellConsumer, ? extends CellConsumer> cellConsumerWrapper)",
                    "public DSL org.simpleflatmapper.csv.DSL.disableUnescaping()",
                    "public D separator(char c)",
                    "public D maxBufferSize(int maxBufferSize)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/YamlCellPreProcessor.java": [
                    "public boolean org.simpleflatmapper.csv.parser.YamlCellPreProcessor.endOfRow()",
                    "public void org.simpleflatmapper.csv.parser.YamlCellPreProcessor.newCell(char[] chars, int start, int end, int state)",
                    "public void org.simpleflatmapper.csv.parser.YamlCellPreProcessor.end()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5cd33950ca6daa0be29e1d08b91b682c26b9d0d2",
        "previous_commit": "4fbb3838951e514136b1f1dd27d79f0f576c2a81",
        "date": 1474114593,
        "releases": {
            "previous": "5cd33950ca6daa0be29e1d08b91b682c26b9d0d2",
            "next": "5cd33950ca6daa0be29e1d08b91b682c26b9d0d2"
        },
        "commit_message": " #336 support yaml comment\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5cd33950ca6daa0be29e1d08b91b682c26b9d0d2": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public final Stream<T> org.simpleflatmapper.csv.MapWithDSL<T>.stream(File file)",
                    "public final CloseableCsvReader org.simpleflatmapper.csv.CsvParser.reader(File file)",
                    "final CharConsumer charConsumer(CharBuffer charBuffer)",
                    "public static DSL org.simpleflatmapper.csv.CsvParser.separator(char c)",
                    "public static DSL org.simpleflatmapper.csv.CsvParser.bufferSize(int size)",
                    "public static CloseableIterator<String[]> org.simpleflatmapper.csv.CsvParser.iterator(File file)",
                    "public final CloseableIterator<String[]> org.simpleflatmapper.csv.CsvParser.iterator(File file)",
                    "public final Stream<String[]> org.simpleflatmapper.csv.CsvParser.stream(File file)",
                    "public DSL org.simpleflatmapper.csv.DSL.trimSpaces()",
                    "public final CloseableIterator<T> org.simpleflatmapper.csv.MapWithDSL<T>.iterator(File file)",
                    "public static CloseableCsvReader org.simpleflatmapper.csv.CsvParser.reader(File file)",
                    "public static DSL org.simpleflatmapper.csv.CsvParser.quote(char c)",
                    "protected final boolean isCsv()",
                    "public static DSL org.simpleflatmapper.csv.CsvParser.limit(int limit)",
                    "public static DSL org.simpleflatmapper.csv.CsvParser.skip(int skip)",
                    "public static Stream<String[]> org.simpleflatmapper.csv.CsvParser.stream(File file)",
                    "private CsvReader org.simpleflatmapper.csv.CsvParser.reader(CharBuffer charBuffer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/ColumnsMapperKeyBuilderCellConsumer.java": [
                    "public void org.simpleflatmapper.csv.impl.ColumnsMapperKeyBuilderCellConsumer.newCell(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CsvCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.csv.parser.CsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            },
            "4fbb3838951e514136b1f1dd27d79f0f576c2a81": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public CloseableIterator<String[]> org.simpleflatmapper.csv.CsvParser.iterator(File file)",
                    "public static CloseableCsvReader org.simpleflatmapper.csv.CsvParser.reader(File file)",
                    "public Stream<String[]> org.simpleflatmapper.csv.CsvParser.stream(File file)",
                    "public static DSL org.simpleflatmapper.csv.CsvParser.limit(int limit)",
                    "public DSL org.simpleflatmapper.csv.CsvParser.bufferSize(int size)",
                    "public CloseableCsvReader org.simpleflatmapper.csv.CsvParser.reader(File file)",
                    "public static CloseableIterator<String[]> org.simpleflatmapper.csv.CsvParser.iterator(File file)",
                    "public DSL org.simpleflatmapper.csv.CsvParser.limit(int limit)",
                    "public DSL org.simpleflatmapper.csv.CsvParser.skip(int skip)",
                    "public static DSL org.simpleflatmapper.csv.CsvParser.skip(int skip)",
                    "public static DSL org.simpleflatmapper.csv.CsvParser.separator(char c)",
                    "public static DSL org.simpleflatmapper.csv.CsvParser.bufferSize(int size)",
                    "private CharConsumer charConsumer(CharBuffer charBuffer)",
                    "public DSL org.simpleflatmapper.csv.CsvParser.separator(char c)",
                    "private CsvReader org.simpleflatmapper.csv.CsvParser.reader(CharBuffer charBuffer)",
                    "public final Stream<T> org.simpleflatmapper.csv.MapWithDSL<T>.stream(File file)",
                    "public DSL org.simpleflatmapper.csv.CsvParser.trimSpaces()",
                    "public final CloseableIterator<T> org.simpleflatmapper.csv.MapWithDSL<T>.iterator(File file)",
                    "public DSL org.simpleflatmapper.csv.CsvParser.quote(char c)",
                    "public static DSL org.simpleflatmapper.csv.CsvParser.quote(char c)",
                    "private boolean isCsv()",
                    "public static Stream<String[]> org.simpleflatmapper.csv.CsvParser.stream(File file)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/ColumnsMapperKeyBuilderCellConsumer.java": [
                    "public void org.simpleflatmapper.csv.impl.ColumnsMapperKeyBuilderCellConsumer.newCell(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CsvCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.csv.parser.CsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "411eaaf2317e429c70b6669c7611b9fb8636faed",
        "previous_commit": "9a2a2fb56b23d53fe40ccf950eecf5c5d3d12343",
        "date": 1523552242,
        "releases": {
            "previous": "411eaaf2317e429c70b6669c7611b9fb8636faed",
            "next": "411eaaf2317e429c70b6669c7611b9fb8636faed"
        },
        "commit_message": " #509 add type affinity on property finding\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "411eaaf2317e429c70b6669c7611b9fb8636faed": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.cellValueReaderFromFactory(PropertyMeta<?, ?> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "private <P, C> MultiIndexFieldMapper<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/ExtendPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.ExtendPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final boolean allowSelfReference, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)",
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)",
                    "private void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.speculativeMatching(PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)",
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.found(final PropertyMeta propertyMeta, final Runnable selectionCallback, final PropertyMatchingScore score, TypeAffinityScorer typeAffinityScorer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.found(final PropertyMeta propertyMeta, final Runnable selectionCallback, final PropertyMatchingScore score, TypeAffinityScorer typeAffinityScorer)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties, FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform, TypeAffinityScorer typeAffinityScorer)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForSubProperty(\t\t\tfinal PropertyNameMatcher propertyNameMatcher,\t\t\tObject[] properties, final PropertyMeta<T, ?> prop,\t\t\tfinal FoundProperty foundProperty,\t\t\tfinal PropertyMatchingScore score,\t\t\tfinal PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher, Object[] properties, TypeAffinityScorer typeAffinity)",
                    "public int org.simpleflatmapper.reflect.meta.PropertyFinder<T>.compareTo(MatchedProperty<T, ?> o)",
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher, Object[] properties, TypeAffinityScorer typeAffinity, PropertyFinderProbe propertyFinderProbe)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.found(final PropertyMeta propertyMeta, final Runnable selectionCallback, final PropertyMatchingScore score, TypeAffinityScorer typeAffinityScorer)",
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)"
                ]
            },
            "9a2a2fb56b23d53fe40ccf950eecf5c5d3d12343": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.cellValueReaderFromFactory(PropertyMeta<?, ?> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "private <P, C> MultiIndexFieldMapper<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/ExtendPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.ExtendPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final boolean allowSelfReference, final PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.speculativeMatching(PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)",
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.found(final PropertyMeta propertyMeta, final Runnable selectionCallback, final PropertyMatchingScore score)",
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer)",
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForSubProperty(\t\t\tfinal PropertyNameMatcher propertyNameMatcher,\t\t\tObject[] properties, final PropertyMeta<T, ?> prop,\t\t\tfinal FoundProperty foundProperty,\t\t\tfinal PropertyMatchingScore score,\t\t\tfinal PropertyFinderTransformer propertyFinderTransformer)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransform)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.found(final PropertyMeta propertyMeta, final Runnable selectionCallback, final PropertyMatchingScore score)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher, Object[] properties)",
                    "public int org.simpleflatmapper.reflect.meta.PropertyFinder<T>.compareTo(MatchedProperty<T, ?> o)",
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher, Object[] properties, PropertyFinderProbe propertyFinderProbe)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.found(final PropertyMeta propertyMeta, final Runnable selectionCallback, final PropertyMatchingScore score)",
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "45b89c0dc83c4c3535997f408e0bf66061371b2d",
        "previous_commit": "2d3d9098f3d71a354c5bcf2521fecfa993b160ac",
        "date": 1543878858,
        "releases": {
            "previous": "45b89c0dc83c4c3535997f408e0bf66061371b2d",
            "next": "45b89c0dc83c4c3535997f408e0bf66061371b2d"
        },
        "commit_message": "more aggressive inlining of getter/setter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "45b89c0dc83c4c3535997f408e0bf66061371b2d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvRowGetterFactory.java": [
                    "public CharSequence org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.get(CsvRow target, Context context)",
                    "public byte org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.getByte(CsvRow target, Context context)",
                    "public float org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.getFloat(CsvRow target, Context context)",
                    "public long org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.getLong(CsvRow target, Context context)",
                    "public double org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.getDouble(CsvRow target, Context context)",
                    "public String org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.get(CsvRow target, Context context)",
                    "public int org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.getInt(CsvRow target, Context context)",
                    "public char org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.getCharacter(CsvRow target, Context context)",
                    "public BigDecimal org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.get(CsvRow target, Context context)",
                    "public boolean org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.getBoolean(CsvRow target, Context context)",
                    "public short org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.getShort(CsvRow target, Context context)",
                    "public BigInteger org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.get(CsvRow target, Context context)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmBuilder.java": [
                    "public void org.simpleflatmapper.map.asm.MapperAsmBuilder.addMappingCall(MethodVisitor mv, String mapperClassType)",
                    "private static <S, T> MapperBuilder org.simpleflatmapper.map.asm.MapperAsmBuilder.newMapperBuilder(FieldMapper<? super S, ? super T> mapper, String fieldMapperPrefix, int i)",
                    "public void org.simpleflatmapper.map.asm.MapperAsmBuilder.addInit(MethodVisitor mv, String mapperClassType)",
                    "public void org.simpleflatmapper.map.asm.MapperAsmBuilder.addDeclaration(ClassWriter cw)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmFactory.java": [
                    "public <S, T> AbstractMapper<S, T> org.simpleflatmapper.map.asm.MapperAsmFactory.createMapper(final FieldKey<?>[] keys, final FieldMapper<S, T>[] mappers, final FieldMapper<S, T>[] constructorMappers, final BiInstantiator<S, MappingContext<? super S>, T> instantiator, final Class<? super S> source, final Class<T> target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static void org.simpleflatmapper.reflect.asm.AsmUtils.invoke(MethodVisitor mv, Type target, Method method)"
                ]
            },
            "2d3d9098f3d71a354c5bcf2521fecfa993b160ac": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvRowGetterFactory.java": [
                    "public CharSequence org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.get(CsvRow target, Context context)",
                    "public byte org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.getByte(CsvRow target, Context context)",
                    "public float org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.getFloat(CsvRow target, Context context)",
                    "public long org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.getLong(CsvRow target, Context context)",
                    "public double org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.getDouble(CsvRow target, Context context)",
                    "public String org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.get(CsvRow target, Context context)",
                    "public int org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.getInt(CsvRow target, Context context)",
                    "public char org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.getCharacter(CsvRow target, Context context)",
                    "public BigDecimal org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.get(CsvRow target, Context context)",
                    "public boolean org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.getBoolean(CsvRow target, Context context)",
                    "public short org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.getShort(CsvRow target, Context context)",
                    "public BigInteger org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.get(CsvRow target, Context context)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmBuilder.java": [
                    "public void org.simpleflatmapper.map.asm.MapperAsmBuilder.addMappingCall(MethodVisitor mv, String mapperClassType)",
                    "private static <S, T> MapperBuilder org.simpleflatmapper.map.asm.MapperAsmBuilder.newMapperBuilder(FieldMapper<? super S, ? super T> mapper, String fieldMapperPrefix, int i)",
                    "public void org.simpleflatmapper.map.asm.MapperAsmBuilder.addInit(MethodVisitor mv, String mapperClassType)",
                    "public void org.simpleflatmapper.map.asm.MapperAsmBuilder.addDeclaration(ClassWriter cw)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmFactory.java": [
                    "public <S, T> AbstractMapper<S, T> org.simpleflatmapper.map.asm.MapperAsmFactory.createMapper(final FieldKey<?>[] keys, final FieldMapper<S, T>[] mappers, final FieldMapper<S, T>[] constructorMappers, final BiInstantiator<S, MappingContext<? super S>, T> instantiator, final Class<? super S> source, final Class<T> target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static void org.simpleflatmapper.reflect.asm.AsmUtils.invoke(MethodVisitor mv, Type target, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9cc6457461a748daa9463727a296b66eea7d7cbc",
        "previous_commit": "d89f13d78e6c36178cf42f0195237791c789a174",
        "date": 1477430261,
        "releases": {
            "previous": "9cc6457461a748daa9463727a296b66eea7d7cbc",
            "next": "9cc6457461a748daa9463727a296b66eea7d7cbc"
        },
        "commit_message": " #353 does consider non leading quote has escaping (#354)\n\n* refactor parser\r\n\r\n* reduce stack space\r\n\r\n* update travis\r\n\r\n* update travis\r\n\r\n* update travis\r\n\r\n* refactor\r\n\r\n* refactor\r\n\r\n* fix test\r\n\r\n* more changes\r\n\r\n* move cellStart back to buffer\r\n\r\n* implement trim quote\r\n\r\n* fix diamond\r\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9cc6457461a748daa9463727a296b66eea7d7cbc": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private boolean isCsv()",
                    "protected final CharConsumer charConsumer(CharBuffer charBuffer)",
                    "public DSL org.simpleflatmapper.csv.DSL.trimSpaces()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvReader.java": [
                    "private <CC extends CellConsumer> void org.simpleflatmapper.csv.CsvReader._parseAll(CC cellConsumer)",
                    "private boolean org.simpleflatmapper.csv.CsvReader._parseRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/ColumnsMapperKeyBuilderCellConsumer.java": [
                    "public void org.simpleflatmapper.csv.impl.ColumnsMapperKeyBuilderCellConsumer.newCell(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/DateCellValueReader.java": [
                    "public Date org.simpleflatmapper.csv.impl.cellreader.DateCellValueReader.read(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/DateMultiFormatCellValueReader.java": [
                    "public Date org.simpleflatmapper.csv.impl.cellreader.DateMultiFormatCellValueReader.read(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/DoubleCellValueReaderImpl.java": [
                    "public static double org.simpleflatmapper.csv.impl.cellreader.DoubleCellValueReaderImpl.parseDouble(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/FloatCellValueReaderImpl.java": [
                    "public static float org.simpleflatmapper.csv.impl.cellreader.FloatCellValueReaderImpl.parseFloat(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/StringCellValueReader.java": [
                    "public String org.simpleflatmapper.csv.impl.cellreader.StringCellValueReader.read(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/UUIDCellValueReader.java": [
                    "public UUID org.simpleflatmapper.csv.impl.cellreader.UUIDCellValueReader.read(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.finish(CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CsvCharConsumer.java": [
                    "private int org.simpleflatmapper.csv.parser.CsvCharConsumer.unescape(final char[] chars, final int start, final int end)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/ReaderCharBuffer.java": [
                    "public final int org.simpleflatmapper.csv.parser.ReaderCharBuffer.shiftBufferToMark()"
                ]
            },
            "d89f13d78e6c36178cf42f0195237791c789a174": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public DSL org.simpleflatmapper.csv.DSL.trimSpaces()",
                    "protected final CharConsumer charConsumer(CharBuffer charBuffer)",
                    "protected final boolean isCsv()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvReader.java": [
                    "private <CC extends CellConsumer> void org.simpleflatmapper.csv.CsvReader._parseAll(CC cellConsumer)",
                    "private boolean org.simpleflatmapper.csv.CsvReader._parseRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/ColumnsMapperKeyBuilderCellConsumer.java": [
                    "public void org.simpleflatmapper.csv.impl.ColumnsMapperKeyBuilderCellConsumer.newCell(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/DateCellValueReader.java": [
                    "public Date org.simpleflatmapper.csv.impl.cellreader.DateCellValueReader.read(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/DateMultiFormatCellValueReader.java": [
                    "public Date org.simpleflatmapper.csv.impl.cellreader.DateMultiFormatCellValueReader.read(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/DoubleCellValueReaderImpl.java": [
                    "public static double org.simpleflatmapper.csv.impl.cellreader.DoubleCellValueReaderImpl.parseDouble(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/FloatCellValueReaderImpl.java": [
                    "public static float org.simpleflatmapper.csv.impl.cellreader.FloatCellValueReaderImpl.parseFloat(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/StringCellValueReader.java": [
                    "public String org.simpleflatmapper.csv.impl.cellreader.StringCellValueReader.read(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/UUIDCellValueReader.java": [
                    "public UUID org.simpleflatmapper.csv.impl.cellreader.UUIDCellValueReader.read(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.finish(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CsvCharConsumer.java": [
                    "protected final int org.simpleflatmapper.csv.parser.CsvCharConsumer.unescape(final char[] chars, final int start, final int end)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/ReaderCharBuffer.java": [
                    "public int org.simpleflatmapper.csv.parser.ReaderCharBuffer.shiftBufferToMark()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "50febb57f241f31f227a2888c51248d533bd1368",
        "previous_commit": "684ef81a6204eaebcd9167dfa6784e85c1e960eb",
        "date": 1529754364,
        "releases": {
            "previous": "50febb57f241f31f227a2888c51248d533bd1368",
            "next": "50febb57f241f31f227a2888c51248d533bd1368"
        },
        "commit_message": "reduce sfm-csv CsvParse surface by extending lightning\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "50febb57f241f31f227a2888c51248d533bd1368": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private <H extends CheckedConsumer<T>> H org.simpleflatmapper.csv.CsvParser.forEach(H consumer, CsvReader csvReader)",
                    "public static CloseableIterator<String[]> org.simpleflatmapper.csv.CsvParser.iterator(File file)",
                    "public static <R> R org.simpleflatmapper.csv.CsvParser.stream(File file, Function<Stream<String[]>, R> function)",
                    "public final CloseableIterator<T> org.simpleflatmapper.csv.CsvParser.iterator(File file)",
                    "public static <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvParser.parse(CharSequence content, CC cellConsumer)",
                    "public static <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvParser.parse(String content, CC cellConsumer)",
                    "public static <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvParser.parse(File file, CC cellConsumer)",
                    "public static Iterator<String[]> org.simpleflatmapper.csv.CsvParser.iterator(CharSequence content)",
                    "public static <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvParser.parse(Reader reader, CC cellConsumer)",
                    "public static Stream<String[]> org.simpleflatmapper.csv.CsvParser.stream(String content)",
                    "public static CloseableCsvReader org.simpleflatmapper.csv.CsvParser.reader(File file)",
                    "public final Stream<T> org.simpleflatmapper.csv.CsvParser.stream(File file)",
                    "public static CsvReader org.simpleflatmapper.csv.CsvParser.reader(Reader reader)",
                    "public static Iterator<String[]> org.simpleflatmapper.csv.CsvParser.iterator(Reader reader)",
                    "public static CsvReader org.simpleflatmapper.csv.CsvParser.reader(CharSequence content)",
                    "public static CsvReader org.simpleflatmapper.csv.CsvParser.reader(String content)",
                    "public static Stream<String[]> org.simpleflatmapper.csv.CsvParser.stream(File file)"
                ]
            },
            "684ef81a6204eaebcd9167dfa6784e85c1e960eb": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public final CloseableIterator<String[]> org.simpleflatmapper.csv.CsvParser.iterator(File file)",
                    "public final <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvParser.parse(File file, CC cellConsumer)",
                    "private <H extends CheckedConsumer<T>> H org.simpleflatmapper.csv.MapWithDSL<T>.forEach(H consumer, CsvReader csvReader)",
                    "public static CloseableCsvReader org.simpleflatmapper.csv.CsvParser.reader(File file)",
                    "public static <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvParser.parse(CharSequence content, CC cellConsumer)",
                    "public final <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvParser.parse(String content, CC cellConsumer)",
                    "public static CloseableIterator<String[]> org.simpleflatmapper.csv.CsvParser.iterator(File file)",
                    "public static Stream<String[]> org.simpleflatmapper.csv.CsvParser.stream(String content)",
                    "public final Iterator<String[]> org.simpleflatmapper.csv.CsvParser.iterator(Reader reader)",
                    "public static Iterator<String[]> org.simpleflatmapper.csv.CsvParser.iterator(CharSequence content)",
                    "public final <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvParser.parse(CharSequence content, CC cellConsumer)",
                    "public final CsvReader org.simpleflatmapper.csv.CsvParser.reader(Reader reader)",
                    "public static Iterator<String[]> org.simpleflatmapper.csv.CsvParser.iterator(Reader reader)",
                    "public static CsvReader org.simpleflatmapper.csv.CsvParser.reader(String content)",
                    "public final CloseableCsvReader org.simpleflatmapper.csv.CsvParser.reader(File file)",
                    "public final <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvParser.parse(Reader reader, CC cellConsumer)",
                    "public static <R> R org.simpleflatmapper.csv.CsvParser.stream(File file, Function<Stream<String[]>, R> function)",
                    "public final Iterator<String[]> org.simpleflatmapper.csv.CsvParser.iterator(CharSequence content)",
                    "public static CsvReader org.simpleflatmapper.csv.CsvParser.reader(CharSequence content)",
                    "public static <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvParser.parse(String content, CC cellConsumer)",
                    "public static <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvParser.parse(Reader reader, CC cellConsumer)",
                    "final <R> R stream(File file, Function<Stream<String[]>, R> function)",
                    "public final Stream<T> org.simpleflatmapper.csv.MapWithDSL<T>.stream(File file)",
                    "public final Stream<String[]> org.simpleflatmapper.csv.CsvParser.stream(File file)",
                    "public static <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvParser.parse(File file, CC cellConsumer)",
                    "public final CloseableIterator<T> org.simpleflatmapper.csv.MapWithDSL<T>.iterator(File file)",
                    "public final Stream<String[]> org.simpleflatmapper.csv.CsvParser.stream(String content)",
                    "public static CsvReader org.simpleflatmapper.csv.CsvParser.reader(Reader reader)",
                    "public final CsvReader org.simpleflatmapper.csv.CsvParser.reader(String content)",
                    "public final CsvReader org.simpleflatmapper.csv.CsvParser.reader(CharSequence content)",
                    "public static Stream<String[]> org.simpleflatmapper.csv.CsvParser.stream(File file)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "64226713fad98852964286fdfede19f39c50b95e",
        "previous_commit": "e96b310bf1f8d12f8ae1891f4a35f47b05b6e0a0",
        "date": 1536582094,
        "releases": {
            "previous": "64226713fad98852964286fdfede19f39c50b95e",
            "next": "64226713fad98852964286fdfede19f39c50b95e"
        },
        "commit_message": "remove need to copy chars\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "64226713fad98852964286fdfede19f39c50b95e": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/CsvReader.java": [
                    "private <CC extends CellConsumer> void org.simpleflatmapper.lightningcsv.CsvReader._parseRows(CC cellConsumer, int limit)",
                    "public boolean org.simpleflatmapper.lightningcsv.CsvReader.parseRow(CellConsumer cellConsumer)",
                    "public <CC extends CellConsumer> CC org.simpleflatmapper.lightningcsv.CsvReader.parseAll(CC cellConsumer)"
                ],
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)"
                ],
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ReaderCharBuffer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ReaderCharBuffer.shiftAndRead(int shiftFrom)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRow.java": [
                    "public boolean org.simpleflatmapper.csv.CsvRow.getBoolean(int i)",
                    "public CharSequence org.simpleflatmapper.csv.CsvRow.getCharSequence(int i)",
                    "public String org.simpleflatmapper.csv.CsvRow.getString(int i)",
                    "public byte org.simpleflatmapper.csv.CsvRow.getByte(int i)",
                    "public void org.simpleflatmapper.csv.CsvRow.reset()",
                    "public <T> T org.simpleflatmapper.csv.CsvRow.read(CellValueReader<T> cellValueReader, int i)",
                    "public int org.simpleflatmapper.csv.CsvRow.length(int i)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRowSet.java": [
                    "public boolean org.simpleflatmapper.csv.CsvRowSet.next()",
                    "public void org.simpleflatmapper.csv.CsvRowSet.end()",
                    "public boolean org.simpleflatmapper.csv.CsvRowSet.endOfRow()",
                    "public void org.simpleflatmapper.csv.CsvRowSet.newCell(char[] chars, int offset, int length)"
                ]
            },
            "e96b310bf1f8d12f8ae1891f4a35f47b05b6e0a0": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/CsvReader.java": [
                    "private <CC extends CellConsumer> void org.simpleflatmapper.lightningcsv.CsvReader._parseRows(CC cellConsumer, int limit)",
                    "public boolean org.simpleflatmapper.lightningcsv.CsvReader.parseRow(CellConsumer cellConsumer)",
                    "public <CC extends CellConsumer> CC org.simpleflatmapper.lightningcsv.CsvReader.parseAll(CC cellConsumer)"
                ],
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)"
                ],
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ReaderCharBuffer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ReaderCharBuffer.next()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRow.java": [
                    "public boolean org.simpleflatmapper.csv.CsvRow.getBoolean(int i)",
                    "public CharSequence org.simpleflatmapper.csv.CsvRow.getCharSequence(int i)",
                    "public String org.simpleflatmapper.csv.CsvRow.getString(int i)",
                    "public byte org.simpleflatmapper.csv.CsvRow.getByte(int i)",
                    "public void org.simpleflatmapper.csv.CsvRow.reset()",
                    "public <T> T org.simpleflatmapper.csv.CsvRow.read(CellValueReader<T> cellValueReader, int i)",
                    "public int org.simpleflatmapper.csv.CsvRow.length(int i)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRowSet.java": [
                    "public boolean org.simpleflatmapper.csv.CsvRowSet.next()",
                    "public void org.simpleflatmapper.csv.CsvRowSet.end()",
                    "public boolean org.simpleflatmapper.csv.CsvRowSet.endOfRow()",
                    "public void org.simpleflatmapper.csv.CsvRowSet.newCell(char[] chars, int offset, int length)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b2c3155e126097f7ed2bfc0ec03ad89e8444f31d",
        "previous_commit": "f3630dadeadbfe7888adb2a15302e60289b78dc4",
        "date": 1475006677,
        "releases": {
            "previous": "b2c3155e126097f7ed2bfc0ec03ad89e8444f31d",
            "next": "b2c3155e126097f7ed2bfc0ec03ad89e8444f31d"
        },
        "commit_message": "#82 remove direct class meta, and is direct\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b2c3155e126097f7ed2bfc0ec03ad89e8444f31d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "public void org.simpleflatmapper.csv.CsvMapperBuilder<T>.handle(PropertyMapping<T, ?, CsvColumnKey, CsvColumnDefinition> propMapping)",
                    "private CellSetter<T>[] org.simpleflatmapper.csv.CsvMapperBuilder<T>.getSetters(final ParsingContextFactoryBuilder parsingContextFactoryBuilder, final int delayedSetterEnd)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public StaticMapToDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.headers(String... headers)",
                    "public StaticMapToDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.overrideWithDefaultHeaders()",
                    "public StaticMapToDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.defaultHeaders()",
                    "private StaticMapToDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.staticMapper()",
                    "public StaticMapToDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.overrideHeaders(String... headers)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "public static <T> CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.from(Type type)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.cellValueReaderFromFactory(PropertyMeta<?, ?> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "private <S, P> Setter<Appendable, ? super P> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.setterFromFactory(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/getter/GetterHelper.java": [
                    "public static boolean org.simpleflatmapper.reflect.getter.GetterHelper.isGetter(Method method)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private List<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.listProperties(final ReflectionService reflectService, Type targetType)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.field(Field field)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.method(Method method)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.PropertyFinder<T>.select()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.compareTo(PropertyMatchingScore o)"
                ]
            },
            "f3630dadeadbfe7888adb2a15302e60289b78dc4": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "public void org.simpleflatmapper.csv.CsvMapperBuilder<T>.handle(PropertyMapping<T, ?, CsvColumnKey, CsvColumnDefinition> propMapping)",
                    "private CellSetter<T>[] org.simpleflatmapper.csv.CsvMapperBuilder<T>.getSetters(final ParsingContextFactoryBuilder parsingContextFactoryBuilder, final int delayedSetterEnd)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public StaticMapToDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.headers(String... headers)",
                    "public StaticMapToDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.overrideWithDefaultHeaders()",
                    "public StaticMapToDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.defaultHeaders()",
                    "private StaticMapToDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.staticMapper()",
                    "public StaticMapToDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.overrideHeaders(String... headers)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "public static <T> CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.from(Type type)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.cellValueReaderFromFactory(PropertyMeta<?, ?> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "private <S, P> Setter<Appendable, ? super P> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.setterFromFactory(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/getter/GetterHelper.java": [
                    "public static boolean org.simpleflatmapper.reflect.getter.GetterHelper.isGetter(Method method)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private List<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.listProperties(final ReflectionService reflectService, Type targetType)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.field(Field field)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.method(Method method)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.PropertyFinder<T>.select()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.compareTo(PropertyMatchingScore o)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bfeca5a50608a0553b6edf261366c75c1629a877",
        "previous_commit": "04c505bfd787a047cee7fe207df46c3a015b00b8",
        "date": 1439496173,
        "releases": {
            "previous": "bfeca5a50608a0553b6edf261366c75c1629a877",
            "next": "bfeca5a50608a0553b6edf261366c75c1629a877"
        },
        "commit_message": "#224 add limit on maxBufferSize default 8M\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "bfeca5a50608a0553b6edf261366c75c1629a877": {
                "sfm/src/main/java/org/sfm/csv/CsvParser.java": [
                    "public DSL org.sfm.csv.CsvParser.separator(char c)",
                    "public DSL org.sfm.csv.CsvParser.quote(char c)",
                    "public DSL org.sfm.csv.CsvParser.skip(int skip)",
                    "public static DSL org.sfm.csv.CsvParser.skip(int skip)",
                    "public DSL org.sfm.csv.CsvParser.limit(int limit)",
                    "public static DSL org.sfm.csv.CsvParser.quote(char c)",
                    "public static DSL org.sfm.csv.CsvParser.bufferSize(int size)",
                    "public static DSL org.sfm.csv.CsvParser.separator(char c)",
                    "public DSL org.sfm.csv.CsvParser.bufferSize(int size)",
                    "private CsvCharConsumer org.sfm.csv.CsvParser.charConsumer()",
                    "public static DSL org.sfm.csv.CsvParser.limit(int limit)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/AbstractCsvCharConsumer.java": [
                    "public final void org.sfm.csv.parser.AbstractCsvCharConsumer.parseAll(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/CharBuffer.java": [
                    "public boolean org.sfm.csv.parser.CharBuffer.fillBuffer(Reader reader)",
                    "public int org.sfm.csv.parser.CharBuffer.shiftBufferToMark()"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.ConfigurableCsvCharConsumer.nextRow(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.StandardCsvCharConsumer.nextRow(CellConsumer cellConsumer)"
                ]
            },
            "04c505bfd787a047cee7fe207df46c3a015b00b8": {
                "sfm/src/main/java/org/sfm/csv/CsvParser.java": [
                    "public DSL org.sfm.csv.CsvParser.separator(char c)",
                    "public DSL org.sfm.csv.CsvParser.quote(char c)",
                    "public DSL org.sfm.csv.CsvParser.skip(int skip)",
                    "public static DSL org.sfm.csv.CsvParser.skip(int skip)",
                    "public DSL org.sfm.csv.CsvParser.limit(int limit)",
                    "public static DSL org.sfm.csv.CsvParser.quote(char c)",
                    "public static DSL org.sfm.csv.CsvParser.bufferSize(int size)",
                    "public static DSL org.sfm.csv.CsvParser.separator(char c)",
                    "public DSL org.sfm.csv.CsvParser.bufferSize(int size)",
                    "private CsvCharConsumer org.sfm.csv.CsvParser.charConsumer()",
                    "public static DSL org.sfm.csv.CsvParser.limit(int limit)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/AbstractCsvCharConsumer.java": [
                    "public final void org.sfm.csv.parser.AbstractCsvCharConsumer.parseAll(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/CharBuffer.java": [
                    "public boolean org.sfm.csv.parser.CharBuffer.fillBuffer(Reader reader)",
                    "public int org.sfm.csv.parser.CharBuffer.shiftBufferToMark()"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.ConfigurableCsvCharConsumer.nextRow(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.StandardCsvCharConsumer.nextRow(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b66d0cf74b9089ec0a1085798a216390475d5d61",
        "previous_commit": "a8aeba957db4a4216f3c7c8e993ea13ae97ecb23",
        "date": 1522701899,
        "releases": {
            "previous": "b66d0cf74b9089ec0a1085798a216390475d5d61",
            "next": "b66d0cf74b9089ec0a1085798a216390475d5d61"
        },
        "commit_message": "#504 implement specialised consumer\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b66d0cf74b9089ec0a1085798a216390475d5d61": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "protected final AbstractCharConsumer charConsumer(CharBuffer charBuffer)",
                    "protected DSL org.simpleflatmapper.csv.DSL.newDSL(char separatorChar, char quoteChar, char escapeChar, int bufferSize, int skip, int limit, int maxBufferSize, StringPostProcessing stringPostProcessing, org.simpleflatmapper.util.Function<? super CellConsumer, ? extends CellConsumer> cellConsumerWrapper, boolean yamlComment, boolean parallelReader, boolean specialisedCharConsumer)",
                    "protected DSLYamlComment org.simpleflatmapper.csv.DSLYamlComment.newDSL(char separatorChar, char quoteChar, char escapeChar, int bufferSize, int skip, int limit, int maxBufferSize, StringPostProcessing stringPostProcessing, org.simpleflatmapper.util.Function<? super CellConsumer, ? extends CellConsumer> cellConsumerWrapper, boolean yamlComment, boolean parallelReader, boolean specialisedCharConsumer)",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlCommentsAsCell()",
                    "public D limit(int limit)",
                    "public D bufferSize(int size)",
                    "public D escape(char c)",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlComments()",
                    "public D skip(int skip)",
                    "public DSL org.simpleflatmapper.csv.DSL.trimSpaces()",
                    "public D parallelReader()",
                    "public D quote(char c)",
                    "public D serialReader()",
                    "public DSL org.simpleflatmapper.csv.DSL.disableUnescaping()",
                    "public D separator(char c)",
                    "public D maxBufferSize(int maxBufferSize)"
                ]
            },
            "a8aeba957db4a4216f3c7c8e993ea13ae97ecb23": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "protected final AbstractCharConsumer charConsumer(CharBuffer charBuffer)",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlCommentsAsCell()",
                    "public D limit(int limit)",
                    "public D bufferSize(int size)",
                    "public D escape(char c)",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlComments()",
                    "public D skip(int skip)",
                    "public DSL org.simpleflatmapper.csv.DSL.trimSpaces()",
                    "public D parallelReader()",
                    "public D quote(char c)",
                    "protected DSL org.simpleflatmapper.csv.DSL.newDSL(char separatorChar, char quoteChar, char escapeChar, int bufferSize, int skip, int limit, int maxBufferSize, StringPostProcessing stringPostProcessing, org.simpleflatmapper.util.Function<? super CellConsumer, ? extends CellConsumer> cellConsumerWrapper, boolean yamlComment, boolean parallelReader)",
                    "public D serialReader()",
                    "public DSL org.simpleflatmapper.csv.DSL.disableUnescaping()",
                    "public D separator(char c)",
                    "public D maxBufferSize(int maxBufferSize)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bb52d0df043d277424ca2059ca2d585c7c7868dc",
        "previous_commit": "4b075359ee3104d9ce29dab9e5b9a482de3a6aa5",
        "date": 1455224462,
        "releases": {
            "previous": "bb52d0df043d277424ca2059ca2d585c7c7868dc",
            "next": "bb52d0df043d277424ca2059ca2d585c7c7868dc"
        },
        "commit_message": " #287 add build instantiator\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bb52d0df043d277424ca2059ca2d585c7c7868dc": {
                "sfm/src/main/java/org/sfm/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.sfm.csv.impl.CellSetterFactory.getReader(ClassMeta<P> classMeta, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/JdbcMapperFactory.java": [
                    "public <T, K> CrudDSL<T, K> org.sfm.jdbc.JdbcMapperFactory.crud(final Type target, final Type keyTarget)"
                ],
                "sfm/src/main/java/org/sfm/reflect/InstantiatorDefinition.java": [],
                "sfm/src/main/java/org/sfm/reflect/InstantiatorFactory.java": [
                    "public <S, T> Instantiator<S, T> org.sfm.reflect.InstantiatorFactory.getInstantiator(InstantiatorDefinition instantiatorDefinition, Class<?> source, Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled)",
                    "public static InstantiatorDefinition org.sfm.reflect.InstantiatorFactory.getSmallerConstructor(final List<InstantiatorDefinition> constructors)"
                ],
                "sfm/src/main/java/org/sfm/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitionsWithParamNames(Type target)",
                    "public Parameter[] org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Method m, Type target)",
                    "public Parameter[] org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Constructor<?> c, Type target)",
                    "public static List<InstantiatorDefinition> org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitions(Type target, ParameterBuilder parameterBuilder)"
                ],
                "sfm/src/main/java/org/sfm/reflect/asm/AsmInstantiatorDefinitionFactory.java": [
                    "public void org.sfm.reflect.asm.AsmInstantiatorDefinitionFactory.visitEnd()",
                    "public static List<InstantiatorDefinition> org.sfm.reflect.asm.AsmInstantiatorDefinitionFactory.extractDefinitions(final Type target)",
                    "public MethodVisitor org.sfm.reflect.asm.AsmInstantiatorDefinitionFactory.visitMethod(int access, final String methodName, String desc, String signature, String[] exceptions)"
                ],
                "sfm/src/main/java/org/sfm/reflect/asm/InstantiatorBuilder.java": [
                    "public static <S> byte[] org.sfm.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass, final ExecutableInstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)"
                ],
                "sfm/src/main/java/org/sfm/reflect/meta/OptionalClassMeta.java": [
                    "private InstantiatorDefinition org.sfm.reflect.meta.OptionalClassMeta<T>.getInstantiatorDefinition(Type type)"
                ],
                "sfm/src/main/java/org/sfm/reflect/meta/TupleClassMeta.java": [
                    "private InstantiatorDefinition org.sfm.reflect.meta.TupleClassMeta<T>.getInstantiatorDefinition(Type type, ReflectionService reflectionService)",
                    "private InstantiatorDefinition org.sfm.reflect.meta.TupleClassMeta<T>.respecifyParameterNames(ExecutableInstantiatorDefinition definition)",
                    "private boolean org.sfm.reflect.meta.TupleClassMeta<T>.isTupleConstructor(Type type, InstantiatorDefinition definition)"
                ]
            },
            "4b075359ee3104d9ce29dab9e5b9a482de3a6aa5": {
                "sfm/src/main/java/org/sfm/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.sfm.csv.impl.CellSetterFactory.getReader(ClassMeta<P> classMeta, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/JdbcMapperFactory.java": [
                    "public <T, K> CrudDSL<T, K> org.sfm.jdbc.JdbcMapperFactory.crud(final Type target, final Type keyTarget)"
                ],
                "sfm/src/main/java/org/sfm/reflect/InstantiatorDefinition.java": [
                    "public boolean org.sfm.reflect.InstantiatorDefinition.hasParam(Parameter param)",
                    "public Parameter[] org.sfm.reflect.InstantiatorDefinition.getParameters()"
                ],
                "sfm/src/main/java/org/sfm/reflect/InstantiatorFactory.java": [
                    "public <S, T> Instantiator<S, T> org.sfm.reflect.InstantiatorFactory.getInstantiator(InstantiatorDefinition instantiatorDefinition, Class<?> source, Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled)",
                    "public static InstantiatorDefinition org.sfm.reflect.InstantiatorFactory.getSmallerConstructor(final List<InstantiatorDefinition> constructors)"
                ],
                "sfm/src/main/java/org/sfm/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitionsWithParamNames(Type target)",
                    "public Parameter[] org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Method m, Type target)",
                    "public Parameter[] org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Constructor<?> c, Type target)",
                    "public static List<InstantiatorDefinition> org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitions(Type target, ParameterBuilder parameterBuilder)"
                ],
                "sfm/src/main/java/org/sfm/reflect/asm/AsmInstantiatorDefinitionFactory.java": [
                    "public void org.sfm.reflect.asm.AsmInstantiatorDefinitionFactory.visitEnd()",
                    "public static List<InstantiatorDefinition> org.sfm.reflect.asm.AsmInstantiatorDefinitionFactory.extractDefinitions(final Type target)",
                    "public MethodVisitor org.sfm.reflect.asm.AsmInstantiatorDefinitionFactory.visitMethod(int access, final String methodName, String desc, String signature, String[] exceptions)"
                ],
                "sfm/src/main/java/org/sfm/reflect/asm/InstantiatorBuilder.java": [
                    "public static <S> byte[] org.sfm.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass,\t\t\t final InstantiatorDefinition instantiatorDefinition,final Map<Parameter, Getter<? super S, ?>> injections)"
                ],
                "sfm/src/main/java/org/sfm/reflect/meta/OptionalClassMeta.java": [
                    "private InstantiatorDefinition org.sfm.reflect.meta.OptionalClassMeta<T>.getInstantiatorDefinition(Type type)"
                ],
                "sfm/src/main/java/org/sfm/reflect/meta/TupleClassMeta.java": [
                    "private InstantiatorDefinition org.sfm.reflect.meta.TupleClassMeta<T>.getInstantiatorDefinition(Type type, ReflectionService reflectionService)",
                    "private InstantiatorDefinition org.sfm.reflect.meta.TupleClassMeta<T>.respecifyParameterNames(InstantiatorDefinition definition)",
                    "private boolean org.sfm.reflect.meta.TupleClassMeta<T>.isTupleConstructor(Type type, InstantiatorDefinition definition)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e206bf0831fef6010f4d93df36621c351a560dde",
        "previous_commit": "31f45e93c845f561fcdd803655ed21831c0b7c2c",
        "date": 1468594219,
        "releases": {
            "previous": "e206bf0831fef6010f4d93df36621c351a560dde",
            "next": "e206bf0831fef6010f4d93df36621c351a560dde"
        },
        "commit_message": " #328 datastax 2.1\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e206bf0831fef6010f4d93df36621c351a560dde": {
                "sfm-datastax/src/main/java/org/sfm/datastax/DataHelper.java": [
                    "public static Date org.sfm.datastax.DataHelper.getTimestamp(int index, GettableByIndexData data)",
                    "public static void org.sfm.datastax.DataHelper.setTimestamp(int index, Date date, SettableByIndexData data)",
                    "private static Method org.sfm.datastax.DataHelper.getSetDateMethod()",
                    "private static Method org.sfm.datastax.DataHelper.getGetDateMethod()"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/DataTypeHelper.java": [
                    "public static Class<?> org.sfm.datastax.DataTypeHelper.asJavaClass(DataType dataType)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericDoubleGetter.java": [
                    "public double org.sfm.datastax.impl.getter.DatastaxGenericDoubleGetter.getDouble(GettableByIndexData target)",
                    "private DataType.Name org.sfm.datastax.impl.getter.DatastaxGenericDoubleGetter.validateName(DataType dataType)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericFloatGetter.java": [
                    "private DataType.Name org.sfm.datastax.impl.getter.DatastaxGenericFloatGetter.validateName(DataType dataType)",
                    "public float org.sfm.datastax.impl.getter.DatastaxGenericFloatGetter.getFloat(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericIntegerGetter.java": [
                    "public int org.sfm.datastax.impl.getter.DatastaxGenericIntegerGetter.getInt(GettableByIndexData target)",
                    "private DataType.Name org.sfm.datastax.impl.getter.DatastaxGenericIntegerGetter.validateName(DataType dataType)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericLongGetter.java": [
                    "public long org.sfm.datastax.impl.getter.DatastaxGenericLongGetter.getLong(GettableByIndexData target)",
                    "private DataType.Name org.sfm.datastax.impl.getter.DatastaxGenericLongGetter.validateName(DataType dataType)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericShortGetter.java": [
                    "private DataType.Name org.sfm.datastax.impl.getter.DatastaxGenericShortGetter.validateName(DataType dataType)",
                    "public short org.sfm.datastax.impl.getter.DatastaxGenericShortGetter.getShort(GettableByIndexData target)"
                ]
            },
            "31f45e93c845f561fcdd803655ed21831c0b7c2c": {
                "sfm-datastax/src/main/java/org/sfm/datastax/DataHelper.java": [
                    "public static Date org.sfm.datastax.DataHelper.getTimestamp(int index, GettableByIndexData data)",
                    "public static void org.sfm.datastax.DataHelper.setTimestamp(int index, Date date, SettableByIndexData data)",
                    "private static Method org.sfm.datastax.DataHelper.getSetDateMethod()",
                    "private static Method org.sfm.datastax.DataHelper.getGetDateMethod()"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/DataTypeHelper.java": [
                    "public static Class<?> org.sfm.datastax.DataTypeHelper.asJavaClass(DataType dataType)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericDoubleGetter.java": [
                    "public double org.sfm.datastax.impl.getter.DatastaxGenericDoubleGetter.getDouble(GettableByIndexData target)",
                    "private DataType.Name org.sfm.datastax.impl.getter.DatastaxGenericDoubleGetter.validateName(DataType dataType)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericFloatGetter.java": [
                    "private DataType.Name org.sfm.datastax.impl.getter.DatastaxGenericFloatGetter.validateName(DataType dataType)",
                    "public float org.sfm.datastax.impl.getter.DatastaxGenericFloatGetter.getFloat(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericIntegerGetter.java": [
                    "public int org.sfm.datastax.impl.getter.DatastaxGenericIntegerGetter.getInt(GettableByIndexData target)",
                    "private DataType.Name org.sfm.datastax.impl.getter.DatastaxGenericIntegerGetter.validateName(DataType dataType)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericLongGetter.java": [
                    "public long org.sfm.datastax.impl.getter.DatastaxGenericLongGetter.getLong(GettableByIndexData target)",
                    "private DataType.Name org.sfm.datastax.impl.getter.DatastaxGenericLongGetter.validateName(DataType dataType)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericShortGetter.java": [
                    "private DataType.Name org.sfm.datastax.impl.getter.DatastaxGenericShortGetter.validateName(DataType dataType)",
                    "public short org.sfm.datastax.impl.getter.DatastaxGenericShortGetter.getShort(GettableByIndexData target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6add45632ba2885f6aad86d585f6934dd2789639",
        "previous_commit": "9950263ee98bdc1e94c7ffc2cd68d345f882a035",
        "date": 1537266878,
        "releases": {
            "previous": "6add45632ba2885f6aad86d585f6934dd2789639",
            "next": "6add45632ba2885f6aad86d585f6934dd2789639"
        },
        "commit_message": "backward compatible with converter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6add45632ba2885f6aad86d585f6934dd2789639": {
                "sfm-converter-joda-time/src/main/java/org/simpleflatmapper/converter/joda/JodaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.produce(Consumer<? super ContextualConverterFactory<?, ?>> consumer)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public ContextualConverter<? super I, ? extends O> org.simpleflatmapper.converter.ConverterService.newConverter(ConvertingTypes targetedTypes, ContextFactoryBuilder contextFactoryBuilder, Object... params)",
                    "public <F, P> ContextualConverter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, ContextFactoryBuilder contextFactoryBuilder, Object... params)",
                    "public List<ScoredConverterFactory> org.simpleflatmapper.converter.ConverterService.findConverterFactories(Type inType, Type outType, Object... params)",
                    "public void org.simpleflatmapper.converter.ConverterService.accept(ConverterFactory<?, ?> converterFactory)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/JavaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.time.JavaTimeConverterFactoryProducer.produce(Consumer<? super ContextualConverterFactory<?, ?>> consumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "private static <P, E> boolean org.simpleflatmapper.csv.CsvWriter<T>.canWrite(Type type)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, Object... properties)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "public <P> Setter<SettableByIndexData, P> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey> arg)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/converter/DatastaxConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.datastax.impl.converter.DatastaxConverterFactoryProducer.produce(Consumer<? super ContextualConverterFactory<?, ?>> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/converter/JdbcConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jdbc.converter.JdbcConverterFactoryProducer.produce(Consumer<? super ContextualConverterFactory<?, ?>> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementIndexedSetterFactory.java": [
                    "private <P, I> ContextualIndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.impl.PreparedStatementIndexedSetterFactory.getSetterWithConvertion(Class<P> pclazz, Class<I> iclass, ContextFactoryBuilder contextFactoryBuilder, PropertyMapping<?, ?, JdbcColumnKey> pm)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/converter/JooqConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jooq.converter.JooqConverterFactoryProducer.produce(Consumer<? super ContextualConverterFactory<?, ?>> consumer)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public void org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.handle(PropertyMapping<T, ?, JdbcColumnKey> pm)",
                    "public PlaceHolderValueGetterSource<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.buildSource()"
                ]
            },
            "9950263ee98bdc1e94c7ffc2cd68d345f882a035": {
                "sfm-converter-joda-time/src/main/java/org/simpleflatmapper/converter/joda/JodaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, ContextFactoryBuilder contextFactoryBuilder, Object... params)",
                    "public Converter<? super I, ? extends O> org.simpleflatmapper.converter.ConverterService.newConverter(ConvertingTypes targetedTypes, ContextFactoryBuilder contextFactoryBuilder, Object... params)",
                    "public List<ScoredConverterFactory> org.simpleflatmapper.converter.ConverterService.findConverterFactories(Type inType, Type outType, Object... params)",
                    "public void org.simpleflatmapper.converter.ConverterService.accept(ConverterFactory<?, ?> converterFactory)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/JavaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.time.JavaTimeConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "private static <P, E> boolean org.simpleflatmapper.csv.CsvWriter<T>.canWrite(Type type)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, Object... properties)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "public <P> Setter<SettableByIndexData, P> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey> arg)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/converter/DatastaxConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.datastax.impl.converter.DatastaxConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/converter/JdbcConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jdbc.converter.JdbcConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementIndexedSetterFactory.java": [
                    "private <P, I> ContextualIndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.impl.PreparedStatementIndexedSetterFactory.getSetterWithConvertion(Class<P> pclazz, Class<I> iclass, ContextFactoryBuilder contextFactoryBuilder, PropertyMapping<?, ?, JdbcColumnKey> pm)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/converter/JooqConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jooq.converter.JooqConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public void org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.handle(PropertyMapping<T, ?, JdbcColumnKey> pm)",
                    "public PlaceHolderValueGetterSource<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.buildSource()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "223ed1b2a7424b4fce1d14e7b85875987bcf04ae",
        "previous_commit": "dadd77818073d9828c062938a82fc4813f59ae5d",
        "date": 1545324667,
        "releases": {
            "previous": "223ed1b2a7424b4fce1d14e7b85875987bcf04ae",
            "next": "223ed1b2a7424b4fce1d14e7b85875987bcf04ae"
        },
        "commit_message": " #572 move filter outside the property finder instance\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "223ed1b2a7424b4fce1d14e7b85875987bcf04ae": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers(final ContextFactoryBuilder contextFactoryBuilder)",
                    "private <P, C> MultiIndexFieldMapper<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey> pm)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorPropertyFinder.java": [
                    "public PropertyFinder<?> org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.getOrCreateSubPropertyFinder(SubPropertyMeta<?, ?, ?> subPropertyMeta)",
                    "public void org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.lookForProperties(PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, Predicate<PropertyMeta<?, ?>> propertyFilter)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/ExtendPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.ExtendPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final boolean allowSelfReference, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, Predicate<PropertyMeta<?, ?>> propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, Predicate<PropertyMeta<?, ?>> propertyFilter)",
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, Predicate<PropertyMeta<?, ?>> propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "public PropertyFinder<?> org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.getOrCreateSubPropertyFinder(SubPropertyMeta<?, ?, ?> subPropertyMeta)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties, FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer, Predicate<PropertyMeta<?, ?>> propertyFilter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForSubProperty(\t\t\tfinal PropertyNameMatcher propertyNameMatcher,\t\t\tObject[] properties, final PropertyMeta<T, ?> prop,\t\t\tfinal FoundProperty foundProperty,\t\t\tfinal PropertyMatchingScore score,\t\t\tfinal PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, Predicate<PropertyMeta<?, ?>> propertyFilter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, Predicate<PropertyMeta<?, ?>> propertyFilter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, Predicate<PropertyMeta<?, ?>> propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/OptionalPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<Optional<T>> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, Predicate<PropertyMeta<?, ?>> propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher, Object[] properties, TypeAffinityScorer typeAffinity, PropertyFinderProbe propertyFinderProbe, Predicate<PropertyMeta<?, ?>> propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, Predicate<PropertyMeta<?, ?>> propertyFilter)",
                    "private <E> IndexedElement<T, E> org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.newIndexedElement(TupleClassMeta<T> tupleClassMeta, PropertyMeta<T, E> prop)"
                ]
            },
            "dadd77818073d9828c062938a82fc4813f59ae5d": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers(final ContextFactoryBuilder contextFactoryBuilder)",
                    "private <P, C> MultiIndexFieldMapper<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey> pm)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorPropertyFinder.java": [
                    "public PropertyFinder<?> org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.getOrCreateSubPropertyFinder(SubPropertyMeta<?, ?, ?> subPropertyMeta)",
                    "public void org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.lookForProperties(PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/ExtendPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.ExtendPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final boolean allowSelfReference, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)",
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)",
                    "public PropertyFinder<?> org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.getOrCreateSubPropertyFinder(SubPropertyMeta<?, ?, ?> subPropertyMeta)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties, FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform, TypeAffinityScorer typeAffinityScorer)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForSubProperty(\t\t\tfinal PropertyNameMatcher propertyNameMatcher,\t\t\tObject[] properties, final PropertyMeta<T, ?> prop,\t\t\tfinal FoundProperty foundProperty,\t\t\tfinal PropertyMatchingScore score,\t\t\tfinal PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/OptionalPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher, Object[] properties, TypeAffinityScorer typeAffinity, PropertyFinderProbe propertyFinderProbe)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)",
                    "private <E> IndexedElement<T, E> org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.newIndexedElement(TupleClassMeta<T> tupleClassMeta, PropertyMeta<T, E> prop)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "08b124086d5e262c643f0f3d62fdee3b40678713",
        "previous_commit": "a34e460699c508ab6d0b2f329facaa70039a3c85",
        "date": 1470687976,
        "releases": {
            "previous": "08b124086d5e262c643f0f3d62fdee3b40678713",
            "next": "08b124086d5e262c643f0f3d62fdee3b40678713"
        },
        "commit_message": "remove joda.time from all module appart converter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "08b124086d5e262c643f0f3d62fdee3b40678713": {
                "sfm-converter-joda-time/src/main/java/org/simpleflatmapper/converter/joda/JodaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/JavaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.time.JavaTimeConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/JavaTimeHelper.java": [
                    "public static DateTimeFormatter[] org.simpleflatmapper.converter.impl.time.JavaTimeHelper.getDateTimeFormatters(Object... properties)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "public final CsvMapper<T> org.simpleflatmapper.csv.CsvMapperBuilder<T>.mapper()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)",
                    "private <S, P> Setter<Appendable, ? super P> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.getSetter(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, CellWriter cellWriter)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperBuilder.java": [
                    "public DatastaxMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperBuilder<T>.addMapping(final ColumnDefinitions metaData)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/RowGetterFactory.java": [
                    "private <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.RowGetterFactory._newGetter(Type target, DatastaxColumnKey key, Object... properties)",
                    "public <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, Object... properties)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "private Converter<?, ?> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt, ColumnDefinition<DatastaxColumnKey, ?> columnDefinition)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType, JdbcColumnKey key, Object... properties)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType,\t\t\t\t\t\t\t\t\t\t\t JdbcColumnKey key, Object... properties)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <T> IndexedSetter<PreparedStatement, T> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg)"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/impl/RowGetterFactory.java": [
                    "public <P> Getter<Row, P> org.simpleflatmapper.poi.impl.RowGetterFactory.newGetter(Type target, CsvColumnKey key, Object... properties)"
                ]
            },
            "a34e460699c508ab6d0b2f329facaa70039a3c85": {
                "sfm-converter-joda-time/src/main/java/org/simpleflatmapper/converter/joda/JodaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/JavaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.time.JavaTimeConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/JavaTimeHelper.java": [
                    "public static DateTimeFormatter[] org.simpleflatmapper.converter.impl.time.JavaTimeHelper.getDateTimeFormatters(Object... properties)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "public final CsvMapper<T> org.simpleflatmapper.csv.CsvMapperBuilder<T>.mapper()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)",
                    "private <S, P> Setter<Appendable, ? super P> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.getSetter(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, CellWriter cellWriter)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperBuilder.java": [
                    "public DatastaxMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperBuilder<T>.addMapping(final ColumnDefinitions metaData)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, Object... properties)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "private Converter<?, ?> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt, ColumnDefinition<DatastaxColumnKey, ?> columnDefinition)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType, JdbcColumnKey key, Object... properties)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType,\t\t\t\t\t\t\t\t\t\t\t JdbcColumnKey key, Object... properties)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <T> IndexedSetter<PreparedStatement, T> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg)"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/impl/RowGetterFactory.java": [
                    "public <P> Getter<Row, P> org.simpleflatmapper.poi.impl.RowGetterFactory.newGetter(Type target, CsvColumnKey key, Object... properties)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4dc6bf853c3016133e21d0a12b8423b5a0020455",
        "previous_commit": "d05a7d8ada64facf336aaf760cabd84f064de960",
        "date": 1510596430,
        "releases": {
            "previous": "4dc6bf853c3016133e21d0a12b8423b5a0020455",
            "next": "4dc6bf853c3016133e21d0a12b8423b5a0020455"
        },
        "commit_message": " #459 introduce escape char without breaking current test\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4dc6bf853c3016133e21d0a12b8423b5a0020455": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlCommentsAsCell()",
                    "public D limit(int limit)",
                    "public D bufferSize(int size)",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlComments()",
                    "public D skip(int skip)",
                    "protected TextFormat getTextFormat()",
                    "public DSL org.simpleflatmapper.csv.DSL.trimSpaces()",
                    "public D quote(char c)",
                    "protected DSLYamlComment org.simpleflatmapper.csv.DSLYamlComment.newDSL(char separatorChar, char quoteChar, char escapeChar, int bufferSize, int skip, int limit, int maxBufferSize, StringPostProcessing stringPostProcessing, org.simpleflatmapper.util.Function<? super CellConsumer, ? extends CellConsumer> cellConsumerWrapper, boolean yamlComment)",
                    "protected DSL org.simpleflatmapper.csv.DSL.newDSL(char separatorChar, char quoteChar, char escapeChar, int bufferSize, int skip, int limit, int maxBufferSize, StringPostProcessing stringPostProcessing, org.simpleflatmapper.util.Function<? super CellConsumer, ? extends CellConsumer> cellConsumerWrapper, boolean yamlComment)",
                    "public DSL org.simpleflatmapper.csv.DSL.disableUnescaping()",
                    "public D separator(char c)",
                    "public D maxBufferSize(int maxBufferSize)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "public final void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.newCell(char[] chars, int start, int end, CellConsumer cellConsumer, int state)"
                ]
            },
            "d05a7d8ada64facf336aaf760cabd84f064de960": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlCommentsAsCell()",
                    "public D limit(int limit)",
                    "public D bufferSize(int size)",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlComments()",
                    "public D skip(int skip)",
                    "protected TextFormat getTextFormat()",
                    "public DSL org.simpleflatmapper.csv.DSL.trimSpaces()",
                    "protected DSLYamlComment org.simpleflatmapper.csv.DSLYamlComment.newDSL(char separatorChar, char quoteChar, int bufferSize, int skip, int limit, int maxBufferSize, StringPostProcessing stringPostProcessing, org.simpleflatmapper.util.Function<? super CellConsumer, ? extends CellConsumer> cellConsumerWrapper, boolean yamlComment)",
                    "public D quote(char c)",
                    "public DSL org.simpleflatmapper.csv.DSL.disableUnescaping()",
                    "public D separator(char c)",
                    "public D maxBufferSize(int maxBufferSize)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "public final void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.newCell(char[] chars, int start, int end, CellConsumer cellConsumer, int state)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a094ff893a37c7e3a22c30cff33bb2914e235b0a",
        "previous_commit": "b2f69702bdb9a9e5df934102505f7121ded21441",
        "date": 1573056864,
        "releases": {
            "previous": "a094ff893a37c7e3a22c30cff33bb2914e235b0a",
            "next": "a094ff893a37c7e3a22c30cff33bb2914e235b0a"
        },
        "commit_message": " first pass at #479\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a094ff893a37c7e3a22c30cff33bb2914e235b0a": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.lookForProperties(PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/ExtendPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.ExtendPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final boolean allowSelfReference, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.getBiInstantiator(InstantiatorDefinition instantiatorDefinition, Class<?> s1, Class<?> s2, Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getInstantiator(InstantiatorDefinition instantiatorDefinition, Class<S> source, Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.speculativeMatching(PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)",
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)",
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForSubProperty(\t\t\tfinal PropertyNameMatcher propertyNameMatcher,\t\t\tObject[] properties, final PropertyMeta<T, ?> prop,\t\t\tfinal FoundProperty foundProperty,\t\t\tfinal PropertyMatchingScore score,\t\t\tfinal PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/OptionalPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<Optional<T>> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public final void org.simpleflatmapper.reflect.meta.PropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer,\t\t\tPropertyFilter propertyFilter)",
                    "private int org.simpleflatmapper.reflect.meta.PropertyFinder<T>.nbGetterSetter(PropertyMeta<?, ?> p)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculative()",
                    "public int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.compareTo(PropertyMatchingScore o)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)"
                ]
            },
            "b2f69702bdb9a9e5df934102505f7121ded21441": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.lookForProperties(PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/ExtendPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.ExtendPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final boolean allowSelfReference, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.getBiInstantiator(InstantiatorDefinition instantiatorDefinition, Class<?> s1, Class<?> s2, Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getInstantiator(InstantiatorDefinition instantiatorDefinition, Class<S> source, Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "private void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.speculativeMatching(PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForSubProperty(\t\t\tfinal PropertyNameMatcher propertyNameMatcher,\t\t\tObject[] properties, final PropertyMeta<T, ?> prop,\t\t\tfinal FoundProperty foundProperty,\t\t\tfinal PropertyMatchingScore score,\t\t\tfinal PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/OptionalPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<Optional<T>> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "private int org.simpleflatmapper.reflect.meta.PropertyFinder<T>.nbGetterSetter(PropertyMeta<?, ?> p)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculative()",
                    "public int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.compareTo(PropertyMatchingScore o)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8767d012611c34d136fc66a4b48bb9eda2860c84",
        "previous_commit": "4cb57425d91bfed31f213651f7750877af108cdf",
        "date": 1535035290,
        "releases": {
            "previous": "8767d012611c34d136fc66a4b48bb9eda2860c84",
            "next": "8767d012611c34d136fc66a4b48bb9eda2860c84"
        },
        "commit_message": " #545 join cellvaluereader error handling fixes\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8767d012611c34d136fc66a4b48bb9eda2860c84": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/CharSequenceToDateConverter.java": [
                    "public Date org.simpleflatmapper.converter.impl.CharSequenceToDateConverter.convert(CharSequence in)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public Converter<? super CharSequence, ? extends Date> org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.newConverter(ConvertingTypes targetedTypes, Object... params)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public <T> CsvMapper<T> org.simpleflatmapper.csv.CsvMapperFactory.newMapper(final ClassMeta<T> classMeta)",
                    "public <T> CsvMapper<Result<T,CsvColumnKey>> org.simpleflatmapper.csv.CsvMapperFactory.newErrorCollectingMapper(final Type target)",
                    "public SetRowMapper<CsvRow, CsvRowSet,T,IOException> org.simpleflatmapper.csv.CsvMapperFactory.newInstance(MapperKey<CsvColumnKey> mapperKey)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private static <T> CsvMapper<T> org.simpleflatmapper.csv.CsvParser.newDefaultStaticMapper(ClassMeta<T> classMeta, CsvColumnDefinitionProviderImpl columnDefinitionProvider)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRow.java": [
                    "public long org.simpleflatmapper.csv.CsvRow.getLong(int i)",
                    "public float org.simpleflatmapper.csv.CsvRow.getFloat(int i)",
                    "public boolean org.simpleflatmapper.csv.CsvRow.getBoolean(int i)",
                    "public boolean org.simpleflatmapper.csv.CsvRow.hasData()",
                    "public char org.simpleflatmapper.csv.CsvRow.getChar(int i)",
                    "public short org.simpleflatmapper.csv.CsvRow.getShort(int i)",
                    "public int org.simpleflatmapper.csv.CsvRow.getInt(int i)",
                    "public double org.simpleflatmapper.csv.CsvRow.getDouble(int i)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvMappingContextFactoryBuilder.java": [
                    "public Object org.simpleflatmapper.csv.mapper.CsvMappingContextFactoryBuilder.getValue(CsvColumnKey key, CsvRow source)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvRowGetterFactory.java": [
                    "public <P> Getter<CsvRow, P> org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.newGetter(Type target, CsvColumnKey key, Object... properties)"
                ]
            },
            "4cb57425d91bfed31f213651f7750877af108cdf": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/CharSequenceToDateConverter.java": [
                    "public Date org.simpleflatmapper.converter.impl.CharSequenceToDateConverter.convert(CharSequence in)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public Converter<? super CharSequence, ? extends Date> org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.newConverter(ConvertingTypes targetedTypes, Object... params)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public <T> CsvMapper<T> org.simpleflatmapper.csv.CsvMapperFactory.newMapper(final ClassMeta<T> classMeta)",
                    "public <T> CsvMapper<Result<T,CsvColumnKey>> org.simpleflatmapper.csv.CsvMapperFactory.newErrorCollectingMapper(final Type target)",
                    "public SetRowMapper<CsvRow, CsvRowSet,T,IOException> org.simpleflatmapper.csv.CsvMapperFactory.newInstance(MapperKey<CsvColumnKey> mapperKey)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private static <T> CsvMapper<T> org.simpleflatmapper.csv.CsvParser.newDefaultStaticMapper(ClassMeta<T> classMeta, CsvColumnDefinitionProviderImpl columnDefinitionProvider)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRow.java": [
                    "public long org.simpleflatmapper.csv.CsvRow.getLong(int i)",
                    "public float org.simpleflatmapper.csv.CsvRow.getFloat(int i)",
                    "public boolean org.simpleflatmapper.csv.CsvRow.getBoolean(int i)",
                    "public boolean org.simpleflatmapper.csv.CsvRow.hasData()",
                    "public char org.simpleflatmapper.csv.CsvRow.getChar(int i)",
                    "public short org.simpleflatmapper.csv.CsvRow.getShort(int i)",
                    "public int org.simpleflatmapper.csv.CsvRow.getInt(int i)",
                    "public double org.simpleflatmapper.csv.CsvRow.getDouble(int i)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvMappingContextFactoryBuilder.java": [
                    "public Object org.simpleflatmapper.csv.mapper.CsvMappingContextFactoryBuilder.getValue(CsvColumnKey key, CsvRow source)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvRowGetterFactory.java": [
                    "public <P> Getter<CsvRow, P> org.simpleflatmapper.csv.mapper.CsvRowGetterFactory.newGetter(Type target, CsvColumnKey key, Object... properties)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c409213019cd5dbff049c4dcbcc52e65fa7b13c7",
        "previous_commit": "cb0b7b93f36fe297040084ee0e2cddac5e429f31",
        "date": 1475098127,
        "releases": {
            "previous": "c409213019cd5dbff049c4dcbcc52e65fa7b13c7",
            "next": "c409213019cd5dbff049c4dcbcc52e65fa7b13c7"
        },
        "commit_message": " #334 add source type constraint\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c409213019cd5dbff049c4dcbcc52e65fa7b13c7": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.getReader(PropertyMeta<?, P> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxBinder.java": [
                    "protected BoundStatementMapper<T> org.simpleflatmapper.datastax.DatastaxBinder<T>.createMapper(MapperKey<DatastaxColumnKey> mapperKey)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperFactory.java": [
                    "public <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilderFrom(ClassMeta<T> classMeta)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/TupleValueSettableDataSetter.java": [
                    "public static <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.impl.setter.TupleValueSettableDataSetter.newFieldMapperBuilder(MapperConfig<DatastaxColumnKey, FieldMapperColumnDefinition<DatastaxColumnKey>> config, ReflectionService reflectionService, Type target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/UDTObjectSettableDataSetter.java": [
                    "public static <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.impl.setter.UDTObjectSettableDataSetter<T>.newFieldMapperBuilder(MapperConfig<DatastaxColumnKey, FieldMapperColumnDefinition<DatastaxColumnKey>> config, ReflectionService reflectionService, Type target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperFactory.java": [
                    "public <T> PreparedStatementMapperBuilder<T> org.simpleflatmapper.jdbc.JdbcMapperFactory.buildFrom(final ClassMeta<T> classMeta)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.extractDefinitions(final Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/FastTupleClassMeta.java": [
                    "private static <T> ArrayList<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.FastTupleClassMeta<T>.getPropertyMetas(Type ownerType, ReflectionService reflectionService)",
                    "private static <T, P> ObjectPropertyMeta<T, P> org.simpleflatmapper.reflect.meta.FastTupleClassMeta<T>.newPropertyMethod(String field, Method getter, Method setter, ReflectionService reflectionService, Type ownerType)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private <P> ConstructorPropertyMeta<T, P> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.constructorMeta(org.simpleflatmapper.reflect.Parameter param, String paramName, InstantiatorDefinition instantiatorDefinition)",
                    "private List<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.listProperties(final ReflectionService reflectService, Type targetType)",
                    "private <P> void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.register(String propertyName, Type type, ScoredGetter<T, P> getter, ScoredSetter<T, P> setter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TupleClassMeta.java": [
                    "private static <T, E> ConstructorPropertyMeta<T, E> org.simpleflatmapper.reflect.meta.TupleClassMeta<T>.newConstructorPropertyMeta(InstantiatorDefinition instantiatorDefinition, int i, ReflectionService reflectionService, Type type)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public SqlParameterSourceBuilder<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.add(JdbcColumnKey key, FieldMapperColumnDefinition<JdbcColumnKey> columnDefinition)"
                ]
            },
            "cb0b7b93f36fe297040084ee0e2cddac5e429f31": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.getReader(PropertyMeta<?, P> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxBinder.java": [
                    "protected BoundStatementMapper<T> org.simpleflatmapper.datastax.DatastaxBinder<T>.createMapper(MapperKey<DatastaxColumnKey> mapperKey)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperFactory.java": [
                    "public <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilderFrom(ClassMeta<T> classMeta)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/TupleValueSettableDataSetter.java": [
                    "public static <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.impl.setter.TupleValueSettableDataSetter.newFieldMapperBuilder(MapperConfig<DatastaxColumnKey, FieldMapperColumnDefinition<DatastaxColumnKey>> config, ReflectionService reflectionService, Type target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/UDTObjectSettableDataSetter.java": [
                    "public static <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.impl.setter.UDTObjectSettableDataSetter<T>.newFieldMapperBuilder(MapperConfig<DatastaxColumnKey, FieldMapperColumnDefinition<DatastaxColumnKey>> config, ReflectionService reflectionService, Type target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperFactory.java": [
                    "public <T> PreparedStatementMapperBuilder<T> org.simpleflatmapper.jdbc.JdbcMapperFactory.buildFrom(final ClassMeta<T> classMeta)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.extractDefinitions(final Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/FastTupleClassMeta.java": [
                    "private ArrayList<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.FastTupleClassMeta<T>.getPropertyMetas(Class<T> clazz, ReflectionService reflectionService)",
                    "private <P> ObjectPropertyMeta<T, P> org.simpleflatmapper.reflect.meta.FastTupleClassMeta<T>.newPropertyMethod(String field, Method getter, Method setter, ReflectionService reflectionService)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private <P> ConstructorPropertyMeta<T, P> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.constructorMeta(org.simpleflatmapper.reflect.Parameter param, String paramName, InstantiatorDefinition instantiatorDefinition)",
                    "private List<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.listProperties(final ReflectionService reflectService, Type targetType)",
                    "private <P> void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.register(String propertyName, Type type, ScoredGetter<T, P> getter, ScoredSetter<T, P> setter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TupleClassMeta.java": [
                    "private static <T, E> ConstructorPropertyMeta<T, E> org.simpleflatmapper.reflect.meta.TupleClassMeta<T>.newConstructorPropertyMeta(InstantiatorDefinition instantiatorDefinition, int i, ReflectionService reflectionService, Type type)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public SqlParameterSourceBuilder<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.add(JdbcColumnKey key, FieldMapperColumnDefinition<JdbcColumnKey> columnDefinition)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3b8283c9af486788c993eccb822fdfb02f37bb91",
        "previous_commit": "b30e6cba2f0a38d83a91342aacde4d62035dc0a3",
        "date": 1556536759,
        "releases": {
            "previous": "3b8283c9af486788c993eccb822fdfb02f37bb91",
            "next": "3b8283c9af486788c993eccb822fdfb02f37bb91"
        },
        "commit_message": " #669 implement a way to specify properties for target type included addAliasForType\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3b8283c9af486788c993eccb822fdfb02f37bb91": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public <T> CsvMapperBuilder<T> org.simpleflatmapper.csv.CsvMapperFactory.newBuilder(final ClassMeta<T> classMeta)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvColumnDefinitionProviderImpl.java": [
                    "public AbstractColumnDefinitionProvider<CsvColumnKey> org.simpleflatmapper.csv.impl.CsvColumnDefinitionProviderImpl.copy()"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperFactory.java": [
                    "public <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilderFrom(ClassMeta<T> classMeta)",
                    "public <T> DatastaxMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilder(ClassMeta<T> classMeta)",
                    "public <T> DatastaxBinder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.mapFrom(Type type)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperFactory.java": [
                    "public <T> PreparedStatementMapperBuilder<T> org.simpleflatmapper.jdbc.JdbcMapperFactory.buildFrom(final ClassMeta<T> classMeta)",
                    "public <T> JdbcMapperBuilder<T> org.simpleflatmapper.jdbc.JdbcMapperFactory.newBuilder(ClassMeta<T> classMeta)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordMapperProvider.java": [
                    "public <R extends Record, E> RecordMapper<R, E> org.simpleflatmapper.jooq.SfmRecordMapperProvider.provide(RecordType<R> recordType, Class<? extends E> type)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordMapperProviderFactory.java": [
                    "public SfmRecordMapperProvider org.simpleflatmapper.jooq.SfmRecordMapperProviderFactory.newProvider()"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/SheetMapperFactory.java": [
                    "public <T> SheetMapperBuilder<T> org.simpleflatmapper.poi.SheetMapperFactory.newBuilder(Type type)",
                    "public <T> SheetMapper<T> org.simpleflatmapper.poi.SheetMapperFactory.newMapper(Type type)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/JdbcTemplateMapperFactory.java": [
                    "public <T> SqlParameterSourceFactory<T> org.simpleflatmapper.jdbc.spring.JdbcTemplateMapperFactory.newSqlParameterSourceFactory(Type target, String sql)",
                    "public <T> SqlParameterSourceFactory<T> org.simpleflatmapper.jdbc.spring.JdbcTemplateMapperFactory.newSqlParameterSourceFactory(Type target)"
                ],
                "sfm-sql2o/src/main/java/org/simpleflatmapper/sql2o/SfmResultSetHandlerFactoryBuilder.java": [
                    "public <E> ResultSetHandlerFactory<E> org.simpleflatmapper.sql2o.SfmResultSetHandlerFactoryBuilder.newFactory(Class<E> aClass)"
                ]
            },
            "b30e6cba2f0a38d83a91342aacde4d62035dc0a3": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public <T> CsvMapperBuilder<T> org.simpleflatmapper.csv.CsvMapperFactory.newBuilder(final ClassMeta<T> classMeta)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvColumnDefinitionProviderImpl.java": [
                    "public AbstractColumnDefinitionProvider<CsvColumnKey> org.simpleflatmapper.csv.impl.CsvColumnDefinitionProviderImpl.copy()"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperFactory.java": [
                    "public <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilderFrom(ClassMeta<T> classMeta)",
                    "public <T> DatastaxMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilder(ClassMeta<T> classMeta)",
                    "public <T> DatastaxBinder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.mapFrom(Type type)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperFactory.java": [
                    "public <T> PreparedStatementMapperBuilder<T> org.simpleflatmapper.jdbc.JdbcMapperFactory.buildFrom(final ClassMeta<T> classMeta)",
                    "public <T> JdbcMapperBuilder<T> org.simpleflatmapper.jdbc.JdbcMapperFactory.newBuilder(ClassMeta<T> classMeta)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordMapperProvider.java": [
                    "public <R extends Record, E> RecordMapper<R, E> org.simpleflatmapper.jooq.SfmRecordMapperProvider.provide(RecordType<R> recordType, Class<? extends E> type)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordMapperProviderFactory.java": [
                    "public SfmRecordMapperProvider org.simpleflatmapper.jooq.SfmRecordMapperProviderFactory.newProvider()"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/SheetMapperFactory.java": [
                    "public <T> SheetMapperBuilder<T> org.simpleflatmapper.poi.SheetMapperFactory.newBuilder(Type type)",
                    "public <T> SheetMapper<T> org.simpleflatmapper.poi.SheetMapperFactory.newMapper(Type type)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/JdbcTemplateMapperFactory.java": [
                    "public <T> SqlParameterSourceFactory<T> org.simpleflatmapper.jdbc.spring.JdbcTemplateMapperFactory.newSqlParameterSourceFactory(Type target, String sql)",
                    "public <T> SqlParameterSourceFactory<T> org.simpleflatmapper.jdbc.spring.JdbcTemplateMapperFactory.newSqlParameterSourceFactory(Type target)"
                ],
                "sfm-sql2o/src/main/java/org/simpleflatmapper/sql2o/SfmResultSetHandlerFactoryBuilder.java": [
                    "public <E> ResultSetHandlerFactory<E> org.simpleflatmapper.sql2o.SfmResultSetHandlerFactoryBuilder.newFactory(Class<E> aClass)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "54fa57add3d35eef4f1e7b305cd9961695c14c2c",
        "previous_commit": "dcaf0d9be7b965c6d7e7743382fd9a51899c03f2",
        "date": 1475009389,
        "releases": {
            "previous": "54fa57add3d35eef4f1e7b305cd9961695c14c2c",
            "next": "54fa57add3d35eef4f1e7b305cd9961695c14c2c"
        },
        "commit_message": "#82 limit self property to root or child of collection\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "54fa57add3d35eef4f1e7b305cd9961695c14c2c": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories(ServiceLoader<ConverterFactoryProducer> serviceLoader)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/converter/JdbcConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jdbc.converter.JdbcConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JDBCTypeHelper.java": [
                    "public static Class<?> org.simpleflatmapper.jdbc.impl.JDBCTypeHelper.toJavaType(int sqlType, Type propertyType)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementIndexedSetterFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.PreparedStatementIndexedSetterFactory.getIndexedSetter(JdbcColumnKey key)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "public Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Constructor<?> c, Type target)",
                    "public static InstantiatorDefinition org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.definition(Method m)",
                    "public static boolean org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.areParameterNamePresent(Type target)",
                    "public Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Method m, Type target)",
                    "private static List<InstantiatorDefinition> org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitionsWithParamNames(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, final FoundProperty<T> matchingProperties, PropertyMatchingScore score)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForSubProperty(\t\t\tfinal PropertyNameMatcher propertyNameMatcher,\t\t\tfinal PropertyMeta<T, ?> prop,\t\t\tfinal FoundProperty foundProperty,\t\t\tfinal PropertyMatchingScore score)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/OptionalPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, FoundProperty matchingProperties, PropertyMatchingScore score, boolean allowSelfReference)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, final FoundProperty foundProperty, PropertyMatchingScore score)"
                ]
            },
            "dcaf0d9be7b965c6d7e7743382fd9a51899c03f2": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories(ServiceLoader<ConverterFactoryProducer> serviceLoader)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/converter/JdbcConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jdbc.converter.JdbcConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JDBCTypeHelper.java": [
                    "public static Class<?> org.simpleflatmapper.jdbc.impl.JDBCTypeHelper.toJavaType(int sqlType, Type propertyType)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementIndexedSetterFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.PreparedStatementIndexedSetterFactory.getIndexedSetter(JdbcColumnKey key)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "public Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Constructor<?> c, Type target)",
                    "public static InstantiatorDefinition org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.definition(Method m)",
                    "public static boolean org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.areParameterNamePresent(Type target)",
                    "public Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Method m, Type target)",
                    "private static List<InstantiatorDefinition> org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitionsWithParamNames(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, final FoundProperty<T> matchingProperties, PropertyMatchingScore score)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForSubProperty(\t\t\tfinal PropertyNameMatcher propertyNameMatcher,\t\t\tfinal PropertyMeta<T, ?> prop,\t\t\tfinal FoundProperty foundProperty,\t\t\tfinal PropertyMatchingScore score)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/OptionalPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, FoundProperty matchingProperties, PropertyMatchingScore score)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, final FoundProperty foundProperty, PropertyMatchingScore score)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8e53556edb3e47b9200fddafff5ca063829a49eb",
        "previous_commit": "30e95b3a64dbcfdeed595518e0507ba586c8ccda",
        "date": 1568113811,
        "releases": {
            "previous": "8e53556edb3e47b9200fddafff5ca063829a49eb",
            "next": "8e53556edb3e47b9200fddafff5ca063829a49eb"
        },
        "commit_message": "fix #682 by tuning ranking when partial vs self\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8e53556edb3e47b9200fddafff5ca063829a49eb": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matches(final CharSequence property)",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.partialMatch(final CharSequence property)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties, FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public String org.simpleflatmapper.reflect.meta.PropertyMatchingScore.toString()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(int score)",
                    "public int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.compareTo(PropertyMatchingScore o)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.tupleIndex(int i)",
                    "public static PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.newInstance(boolean selfScoreFullName)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculative()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculativeArrayIndex(int i)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.notMatch()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(PropertyNameMatch property)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.self(int numberOfProperties, String propName)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.arrayIndex(int i)"
                ]
            },
            "30e95b3a64dbcfdeed595518e0507ba586c8ccda": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matches(final CharSequence property)",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.partialMatch(final CharSequence property)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties, FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public String org.simpleflatmapper.reflect.meta.PropertyMatchingScore.toString()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(int score)",
                    "public int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.compareTo(PropertyMatchingScore o)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.tupleIndex(int i)",
                    "public static PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.newInstance(boolean selfScoreFullName)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculative()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculativeArrayIndex(int i)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.notMatch()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(PropertyNameMatch property)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.self(int numberOfProperties, String propName)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.arrayIndex(int i)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5ae1769ed164b197ee4183e921fecfc585ad5ea0",
        "previous_commit": "f0fe0fc9081ab5601cf6a65a555f6def208d1f31",
        "date": 1528821270,
        "releases": {
            "previous": "5ae1769ed164b197ee4183e921fecfc585ad5ea0",
            "next": "5ae1769ed164b197ee4183e921fecfc585ad5ea0"
        },
        "commit_message": "start refactoring to allow for mutable builder support and eventually Immutable list\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5ae1769ed164b197ee4183e921fecfc585ad5ea0": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "protected CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.newMapDSL( ClassMeta<T> classMeta, Column[] columns, MapperConfig<CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> mapperConfig, CellWriter cellWriter, boolean skipHeaders)",
                    "public static <T> CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.from(Type type)",
                    "protected CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.newColumnMapDSL( ClassMeta<T> classMeta, Column[] columns, MapperConfig<CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> mapperConfig, CellWriter cellWriter, boolean skipHeaders)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "private Converter<?, ?> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt, ColumnDefinition<DatastaxColumnKey, ?> columnDefinition)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newInstance(DatastaxMapperFactory factory, Type target, UserType tt, int index)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/UDTObjectSettableDataSetter.java": [
                    "public static <T> Setter<SettableByIndexData, T> org.simpleflatmapper.datastax.impl.setter.UDTObjectSettableDataSetter<T>.newInstance(Type target, UserType tt, int index, MapperConfig<DatastaxColumnKey, FieldMapperColumnDefinition<DatastaxColumnKey>> config, ReflectionService reflectionService)"
                ],
                "sfm-jdbi/src/main/java/org/simpleflatmapper/jdbi/DynamicSfmResultSetMapper.java": [
                    "public T org.simpleflatmapper.jdbi.DynamicSfmResultSetMapper<T>.map(int i, ResultSet resultSet, StatementContext statementContext)"
                ],
                "sfm-jdbi/src/main/java/org/simpleflatmapper/jdbi/SfmResultSetMapperFactory.java": [
                    "public ResultSetMapper org.simpleflatmapper.jdbi.SfmResultSetMapperFactory.mapperFor(Class aClass, StatementContext statementContext)"
                ],
                "sfm-jdbi3/src/main/java/org/simpleflatmapper/jdbi3/SfmRowMapperFactory.java": [
                    "public Optional<RowMapper<?>> org.simpleflatmapper.jdbi3.SfmRowMapperFactory.build(Type type, ConfigRegistry configRegistry)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordMapperProvider.java": [
                    "public <R extends Record, E> RecordMapper<R, E> org.simpleflatmapper.jooq.SfmRecordMapperProvider.provide(RecordType<R> recordType, Class<? extends E> type)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/MappingContext.java": [
                    "public MappingContext org.simpleflatmapper.map.MappingContext<S>.newContext()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmFactory.java": [
                    "public <S, T> AbstractMapper<S, T> org.simpleflatmapper.map.asm.MapperAsmFactory.createMapper(final FieldKey<?>[] keys, final FieldMapper<S, T>[] mappers, final FieldMapper<S, T>[] constructorMappers, final BiInstantiator<S, MappingContext<? super S>, T> instantiator, final Class<? super S> source, final Class<T> target)"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/impl/StaticSheetMapper.java": [
                    "public <RH extends CheckedConsumer<T>> RH org.simpleflatmapper.poi.impl.StaticSheetMapper<T>.forEach(int startRow, Sheet sheet, RH consumer)"
                ]
            },
            "f0fe0fc9081ab5601cf6a65a555f6def208d1f31": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "protected CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.newMapDSL( ClassMeta<T> classMeta, Column[] columns, MapperConfig<CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> mapperConfig, CellWriter cellWriter, boolean skipHeaders)",
                    "public static <T> CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.from(Type type)",
                    "protected CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.newColumnMapDSL( ClassMeta<T> classMeta, Column[] columns, MapperConfig<CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> mapperConfig, CellWriter cellWriter, boolean skipHeaders)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "private Converter<?, ?> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt, ColumnDefinition<DatastaxColumnKey, ?> columnDefinition)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newInstance(DatastaxMapperFactory factory, Type target, UserType tt, int index)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/UDTObjectSettableDataSetter.java": [
                    "public static <T> Setter<SettableByIndexData, T> org.simpleflatmapper.datastax.impl.setter.UDTObjectSettableDataSetter<T>.newInstance(Type target, UserType tt, int index, MapperConfig<DatastaxColumnKey, FieldMapperColumnDefinition<DatastaxColumnKey>> config, ReflectionService reflectionService)"
                ],
                "sfm-jdbi/src/main/java/org/simpleflatmapper/jdbi/DynamicSfmResultSetMapper.java": [
                    "public T org.simpleflatmapper.jdbi.DynamicSfmResultSetMapper<T>.map(int i, ResultSet resultSet, StatementContext statementContext)"
                ],
                "sfm-jdbi/src/main/java/org/simpleflatmapper/jdbi/SfmResultSetMapperFactory.java": [
                    "public ResultSetMapper org.simpleflatmapper.jdbi.SfmResultSetMapperFactory.mapperFor(Class aClass, StatementContext statementContext)"
                ],
                "sfm-jdbi3/src/main/java/org/simpleflatmapper/jdbi3/SfmRowMapperFactory.java": [
                    "public Optional<RowMapper<?>> org.simpleflatmapper.jdbi3.SfmRowMapperFactory.build(Type type, ConfigRegistry configRegistry)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordMapperProvider.java": [
                    "public <R extends Record, E> RecordMapper<R, E> org.simpleflatmapper.jooq.SfmRecordMapperProvider.provide(RecordType<R> recordType, Class<? extends E> type)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/MappingContext.java": [
                    "public MappingContext org.simpleflatmapper.map.MappingContext<S>.newContext()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmFactory.java": [
                    "public <S, T> Mapper<S, T> org.simpleflatmapper.map.asm.MapperAsmFactory.createMapper(final FieldKey<?>[] keys, final FieldMapper<S, T>[] mappers, final FieldMapper<S, T>[] constructorMappers, final BiInstantiator<S, MappingContext<? super S>, T> instantiator, final Class<? super S> source, final Class<T> target)"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/impl/StaticSheetMapper.java": [
                    "public <RH extends CheckedConsumer<T>> RH org.simpleflatmapper.poi.impl.StaticSheetMapper<T>.forEach(int startRow, Sheet sheet, RH consumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "66f4a4b465d7d3be2822e3651f63f720a390fd24",
        "previous_commit": "2392de390f34499e8b4f9a0e6a58e770b6969e24",
        "date": 1480891854,
        "releases": {
            "previous": "66f4a4b465d7d3be2822e3651f63f720a390fd24",
            "next": "66f4a4b465d7d3be2822e3651f63f720a390fd24"
        },
        "commit_message": "Issue 365 (#378)\n\n* #365 introduced predicate in finder\r\n\r\n*  #365 wrapp meta/finder with static defined setter/getter\r\n\r\n*  #365 setter/getter work on sub prop\r\n\r\n*  #365 refactor transformer transform\r\n\r\n*  #365 add getter property test\r\n\r\n*  #365 refactor callback\r\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "66f4a4b465d7d3be2822e3651f63f720a390fd24": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "public void org.simpleflatmapper.csv.CsvWriter<T>.accept(PropertyMeta<P, ?> propertyMeta)",
                    "private static <P> void org.simpleflatmapper.csv.CsvWriter<T>.addDefaultHeaders(final ClassMeta<P> classMeta, final String prefix, final List<String> columns)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.cellValueReaderFromFactory(PropertyMeta<?, ?> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "private <P, C> MultiIndexFieldMapper<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)",
                    "private void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.speculativeMatching(PropertyNameMatcher propertyNameMatcher, FoundProperty foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.found(final PropertyMeta propertyMeta, final Runnable selectionCallback, final PropertyMatchingScore score)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForSubProperty(\t\t\tfinal PropertyNameMatcher propertyNameMatcher,\t\t\tfinal PropertyMeta<T, ?> prop,\t\t\tfinal FoundProperty foundProperty,\t\t\tfinal PropertyMatchingScore score,\t\t\tfinal PropertyFinderTransformer propertyFinderTransformer)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.run()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, final FoundProperty foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)",
                    "private <E> IndexedElement<T, E> org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.newIndexedElement(TupleClassMeta<T> tupleClassMeta, PropertyMeta<T, E> prop)"
                ]
            },
            "2392de390f34499e8b4f9a0e6a58e770b6969e24": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "public void org.simpleflatmapper.csv.CsvWriter<T>.accept(PropertyMeta<P, ?> propertyMeta)",
                    "private static <P> void org.simpleflatmapper.csv.CsvWriter<T>.addDefaultHeaders(final ClassMeta<P> classMeta, final String prefix, final List<String> columns)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.cellValueReaderFromFactory(PropertyMeta<?, ?> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "private <P, C> MultiIndexFieldMapper<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.speculativeMatching(PropertyNameMatcher propertyNameMatcher, FoundProperty foundProperty, PropertyMatchingScore score)",
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, final FoundProperty<T> matchingProperties, PropertyMatchingScore score)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.found(final PropertyMeta propertyMeta, final Runnable selectionCallback, final PropertyMatchingScore score)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForSubProperty(\t\t\tfinal PropertyNameMatcher propertyNameMatcher,\t\t\tfinal PropertyMeta<T, ?> prop,\t\t\tfinal FoundProperty foundProperty,\t\t\tfinal PropertyMatchingScore score)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.run()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, final FoundProperty foundProperty, PropertyMatchingScore score)",
                    "private <E> IndexedElement<T, E> org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.newIndexedElement(TupleClassMeta<T> tupleClassMeta, PropertyMeta<T, E> prop)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f12683e793a0ae17b5a6c1f8de603a33ec4a650d",
        "previous_commit": "80b454a416b51f5a1afa1b67245c876400604910",
        "date": 1499705468,
        "releases": {
            "previous": "f12683e793a0ae17b5a6c1f8de603a33ec4a650d",
            "next": "f12683e793a0ae17b5a6c1f8de603a33ec4a650d"
        },
        "commit_message": " #450 better scoring system\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f12683e793a0ae17b5a6c1f8de603a33ec4a650d": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/ExtendPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.ExtendPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final boolean allowSelfReference, final PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)",
                    "private void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.speculativeMatching(PropertyNameMatcher propertyNameMatcher, FoundProperty foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)",
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public IndexedColumn org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matchIndex()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher)",
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher, PropertyFinderProbe propertyFinderProbe)",
                    "public PropertyMeta<T, ?> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.selectBestMatch()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.compareTo(PropertyMatchingScore o)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, final FoundProperty foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)"
                ]
            },
            "80b454a416b51f5a1afa1b67245c876400604910": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/ExtendPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.ExtendPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final boolean allowSelfReference, final PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)",
                    "private void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.speculativeMatching(PropertyNameMatcher propertyNameMatcher, FoundProperty foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)",
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public IndexedColumn org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matchIndex()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher)",
                    "public PropertyMeta<T, ?> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.selectBestMatch()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.compareTo(PropertyMatchingScore o)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, final FoundProperty foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "34f7275e3ea42c74f313bc106933f9f05b4ee209",
        "previous_commit": "b1579a0fd14ff921294a3c053704ee17f6d591eb",
        "date": 1572639797,
        "releases": {
            "previous": "34f7275e3ea42c74f313bc106933f9f05b4ee209",
            "next": "34f7275e3ea42c74f313bc106933f9f05b4ee209"
        },
        "commit_message": "remake some test part of the build\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "34f7275e3ea42c74f313bc106933f9f05b4ee209": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public IndexedColumn org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matchIndex()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/IndexedColumn.java": [
                    "public IndexedColumn org.simpleflatmapper.reflect.meta.IndexedColumn.alignTo(int firstElementOffset)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public String org.simpleflatmapper.reflect.meta.PropertyMatchingScore.toString()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(int score)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.tupleIndex(int i)",
                    "private int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.selfNbMatch(int numberOfProperties, String propName)",
                    "public static PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.newInstance(boolean selfScoreFullName)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculative()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculativeArrayIndex(int i)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.notMatch()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.partialMatch(int score, int pScore)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.self(int numberOfProperties, String propName)"
                ]
            },
            "b1579a0fd14ff921294a3c053704ee17f6d591eb": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public IndexedColumn org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matchIndex()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/IndexedColumn.java": [
                    "public IndexedColumn org.simpleflatmapper.reflect.meta.IndexedColumn.alignTo(int firstElementOffset)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public String org.simpleflatmapper.reflect.meta.PropertyMatchingScore.toString()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(int score)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.tupleIndex(int i)",
                    "private int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.selfNbMatch(int numberOfProperties, String propName)",
                    "public static PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.newInstance(boolean selfScoreFullName)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculative()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculativeArrayIndex(int i)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.notMatch()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.partialMatch(int score, int pScore)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.self(int numberOfProperties, String propName)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "924c42267d33f36e352ad229bf93878decb32f86",
        "previous_commit": "854bc2ceffe2e5494b891229d1fb2ebbf700f5ce",
        "date": 1459762124,
        "releases": {
            "previous": "924c42267d33f36e352ad229bf93878decb32f86",
            "next": "924c42267d33f36e352ad229bf93878decb32f86"
        },
        "commit_message": " #312 fix java7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "924c42267d33f36e352ad229bf93878decb32f86": {
                "sfm-jooq/src/main/java/org/sfm/jooq/SfmRecordMapperProvider.java": [
                    "private <R extends Record, E> Mapper<Record, E> org.sfm.jooq.SfmRecordMapperProvider.buildMapper(RecordType<R> recordType, Class<? extends E> type)"
                ],
                "sfm/src/main/java/org/sfm/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.sfm.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm/src/main/java/org/sfm/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.sfm.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.sfm.jdbc.ResultSetGetterFactory.newGetter(Type target, JdbcColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.sfm.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)",
                    "public <T> IndexedSetter<PreparedStatement, T> org.sfm.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg)"
                ],
                "sfm/src/main/java/org/sfm/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "public static InstantiatorDefinition org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.definition(Method m)",
                    "public static boolean org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.areParameterNamePresent(Type target)",
                    "public Parameter[] org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Method m, Type target)",
                    "public Parameter[] org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Constructor<?> c, Type target)",
                    "public static List<InstantiatorDefinition> org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitionsWithParamNames(Type target)"
                ],
                "sfm/src/main/java/org/sfm/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.sfm.reflect.ReflectionService.newClassMeta(Type target)"
                ],
                "sfm/src/main/java/org/sfm/utils/conv/ConverterFactory.java": [
                    "public static <P, F> Converter<F, P> org.sfm.utils.conv.ConverterFactory.getConverter(Class<F> inType, Type outType, Object... params)"
                ]
            },
            "854bc2ceffe2e5494b891229d1fb2ebbf700f5ce": {
                "sfm-jooq/src/main/java/org/sfm/jooq/SfmRecordMapperProvider.java": [
                    "private <R extends Record, E> Mapper<Record, E> org.sfm.jooq.SfmRecordMapperProvider.buildMapper(RecordType<R> recordType, Class<? extends E> type)"
                ],
                "sfm/src/main/java/org/sfm/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.sfm.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm/src/main/java/org/sfm/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.sfm.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.sfm.jdbc.ResultSetGetterFactory.newGetter(Type target, JdbcColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.sfm.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)",
                    "public <T> IndexedSetter<PreparedStatement, T> org.sfm.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg)"
                ],
                "sfm/src/main/java/org/sfm/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "public static InstantiatorDefinition org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.definition(Method m)",
                    "public static boolean org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.areParameterNamePresent(Type target)",
                    "public Parameter[] org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Method m, Type target)",
                    "public Parameter[] org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Constructor<?> c, Type target)",
                    "public static List<InstantiatorDefinition> org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitionsWithParamNames(Type target)"
                ],
                "sfm/src/main/java/org/sfm/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.sfm.reflect.ReflectionService.newClassMeta(Type target)"
                ],
                "sfm/src/main/java/org/sfm/utils/conv/ConverterFactory.java": [
                    "public static <P, F> Converter<F, P> org.sfm.utils.conv.ConverterFactory.getConverter(Class<F> inType, Type outType, Object... params)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "65e2ee63ddef0a12a574fc6a752357cd71946bb6",
        "previous_commit": "e72046340a0b4fd478b6b419a2f93fb8afdd270b",
        "date": 1511823978,
        "releases": {
            "previous": "65e2ee63ddef0a12a574fc6a752357cd71946bb6",
            "next": "65e2ee63ddef0a12a574fc6a752357cd71946bb6"
        },
        "commit_message": " #424 pass column property to property finder to later enable key value via prop\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "65e2ee63ddef0a12a574fc6a752357cd71946bb6": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.cellValueReaderFromFactory(PropertyMeta<?, ?> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "private <P, C> MultiIndexFieldMapper<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/ExtendPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.ExtendPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final boolean allowSelfReference, final PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer)",
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForSubProperty(\t\t\tfinal PropertyNameMatcher propertyNameMatcher,\t\t\tObject[] properties, final PropertyMeta<T, ?> prop,\t\t\tfinal FoundProperty foundProperty,\t\t\tfinal PropertyMatchingScore score,\t\t\tfinal PropertyFinderTransformer propertyFinderTransformer)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransform)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/OptionalPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)"
                ]
            },
            "e72046340a0b4fd478b6b419a2f93fb8afdd270b": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.cellValueReaderFromFactory(PropertyMeta<?, ?> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "private <P, C> MultiIndexFieldMapper<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/ExtendPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.ExtendPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final boolean allowSelfReference, final PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)",
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForSubProperty(\t\t\tfinal PropertyNameMatcher propertyNameMatcher,\t\t\tfinal PropertyMeta<T, ?> prop,\t\t\tfinal FoundProperty foundProperty,\t\t\tfinal PropertyMatchingScore score,\t\t\tfinal PropertyFinderTransformer propertyFinderTransformer)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/OptionalPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, FoundProperty matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, final FoundProperty foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "22a25f5f2c213e698e85cc72ecb4ed040f46cd77",
        "previous_commit": "6fc2602138d61da7589e03c642625fef5e8d0962",
        "date": 1470766603,
        "releases": {
            "previous": "22a25f5f2c213e698e85cc72ecb4ed040f46cd77",
            "next": "22a25f5f2c213e698e85cc72ecb4ed040f46cd77"
        },
        "commit_message": "renaming  + test\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "22a25f5f2c213e698e85cc72ecb4ed040f46cd77": {
                "sfm-converter-joda-time/src/main/java/org/simpleflatmapper/converter/joda/JodaTimeConverterFactoryProducer.java": [
                    "protected Converter<CharSequence, LocalTime> org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.newConverter(DateTimeFormatter formatter)",
                    "protected Converter<CharSequence, Instant> org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.newConverter(DateTimeFormatter formatter)",
                    "protected Converter<CharSequence, DateTime> org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.newConverter(DateTimeFormatter formatter)",
                    "public void org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)",
                    "protected Converter<CharSequence, LocalDate> org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.newConverter(DateTimeFormatter formatter)",
                    "protected Converter<CharSequence, LocalDateTime> org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.newConverter(DateTimeFormatter formatter)"
                ],
                "sfm-converter-joda-time/src/main/java/org/simpleflatmapper/converter/joda/impl/JodaTimeHelper.java": [
                    "public static DateTimeFormatter[] org.simpleflatmapper.converter.joda.impl.JodaTimeHelper.getDateTimeFormatters(Object... properties)",
                    "public static DateTimeFormatter org.simpleflatmapper.converter.joda.impl.JodaTimeHelper.getDateTimeFormatter(Object... properties)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/JavaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.time.JavaTimeConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/JavaTimeHelper.java": [
                    "public static DateTimeFormatter[] org.simpleflatmapper.converter.impl.time.JavaTimeHelper.getDateTimeFormatters(Object... properties)",
                    "public static DateTimeFormatter org.simpleflatmapper.converter.impl.time.JavaTimeHelper.getDateTimeFormatter(Object... properties)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getOneArgIdentityInstantiator(InstantiatorDefinition id)"
                ]
            },
            "6fc2602138d61da7589e03c642625fef5e8d0962": {
                "sfm-converter-joda-time/src/main/java/org/simpleflatmapper/converter/joda/JodaTimeConverterFactoryProducer.java": [
                    "protected Converter<CharSequence, LocalTime> org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.newConverter(DateTimeFormatter formatter)",
                    "protected Converter<CharSequence, Instant> org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.newConverter(DateTimeFormatter formatter)",
                    "protected Converter<CharSequence, DateTime> org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.newConverter(DateTimeFormatter formatter)",
                    "public void org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)",
                    "protected Converter<CharSequence, LocalDate> org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.newConverter(DateTimeFormatter formatter)",
                    "protected Converter<CharSequence, LocalDateTime> org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.newConverter(DateTimeFormatter formatter)"
                ],
                "sfm-converter-joda-time/src/main/java/org/simpleflatmapper/converter/joda/impl/JodaTimeHelper.java": [
                    "public static DateTimeFormatter[] org.simpleflatmapper.converter.joda.impl.JodaTimeHelper.getDateTimeFormatters(Object... properties)",
                    "public static DateTimeFormatter org.simpleflatmapper.converter.joda.impl.JodaTimeHelper.getDateTimeFormatter(Object... properties)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/JavaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.time.JavaTimeConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/JavaTimeHelper.java": [
                    "public static DateTimeFormatter[] org.simpleflatmapper.converter.impl.time.JavaTimeHelper.getDateTimeFormatters(Object... properties)",
                    "public static DateTimeFormatter org.simpleflatmapper.converter.impl.time.JavaTimeHelper.getDateTimeFormatter(Object... properties)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getOneArgIdentityInstantiator(InstantiatorDefinition id)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "678d17d1deee12a08de8c46663b732ad6136827c",
        "previous_commit": "44a78cea35d7f234bd05cb1037167f714fd2e404",
        "date": 1586872108,
        "releases": {
            "previous": "678d17d1deee12a08de8c46663b732ad6136827c",
            "next": "678d17d1deee12a08de8c46663b732ad6136827c"
        },
        "commit_message": "#712 allow custom separator chars\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "678d17d1deee12a08de8c46663b732ad6136827c": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/DefaultPropertyNameMatcherFactory.java": [
                    "public DefaultPropertyNameMatcherFactory org.simpleflatmapper.map.mapper.DefaultPropertyNameMatcherFactory.caseSensitive(boolean caseSensitive)",
                    "public PropertyNameMatcher org.simpleflatmapper.map.mapper.DefaultPropertyNameMatcherFactory.newInstance(FieldKey<?> key)",
                    "public DefaultPropertyNameMatcherFactory org.simpleflatmapper.map.mapper.DefaultPropertyNameMatcherFactory.exactMatch(boolean exactMatch)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public List<PropertyNameMatcherKeyValuePair> keyValuePairs()",
                    "public IndexedColumn org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matchIndex()",
                    "public static int toScore(String property, int from, CharPredicate isSeparatorChar)",
                    "private int org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.lastNonIgnorableChar(String column)",
                    "public static int toScore(String property)",
                    "public int asScore()",
                    "public static int toScore(String property, int from)",
                    "private boolean ignoreCharacter(final char charColumn)",
                    "private boolean isEndOfWord(CharSequence property, int nextIndexProperty)"
                ]
            },
            "44a78cea35d7f234bd05cb1037167f714fd2e404": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/DefaultPropertyNameMatcherFactory.java": [
                    "public DefaultPropertyNameMatcherFactory org.simpleflatmapper.map.mapper.DefaultPropertyNameMatcherFactory.caseSensitive(boolean caseSensitive)",
                    "public PropertyNameMatcher org.simpleflatmapper.map.mapper.DefaultPropertyNameMatcherFactory.newInstance(FieldKey<?> key)",
                    "public DefaultPropertyNameMatcherFactory org.simpleflatmapper.map.mapper.DefaultPropertyNameMatcherFactory.exactMatch(boolean exactMatch)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public List<PropertyNameMatcherKeyValuePair> keyValuePairs()",
                    "public IndexedColumn org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matchIndex()",
                    "private int org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.lastNonIgnorableChar(String column)",
                    "public static int toScore(String property)",
                    "public int asScore()",
                    "public static int toScore(String property, int from)",
                    "private boolean ignoreCharacter(final char charColumn)",
                    "private boolean isEndOfWord(CharSequence property, int nextIndexProperty)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d5f4e2e83f4606749702ffcfffd4a4dd96a85476",
        "previous_commit": "6ca76e232eb98a0a9f25d356d1284d552dc84699",
        "date": 1499719489,
        "releases": {
            "previous": "d5f4e2e83f4606749702ffcfffd4a4dd96a85476",
            "next": "d5f4e2e83f4606749702ffcfffd4a4dd96a85476"
        },
        "commit_message": "fix java8 comment\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d5f4e2e83f4606749702ffcfffd4a4dd96a85476": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private static Reader org.simpleflatmapper.csv.CsvParser.newReader(File file, Charset charset)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/converter/JdbcConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jdbc.converter.JdbcConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JDBCTypeHelper.java": [
                    "public static Class<?> org.simpleflatmapper.jdbc.impl.JDBCTypeHelper.toJavaType(int sqlType, Type propertyType)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementIndexedSetterFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.PreparedStatementIndexedSetterFactory.getIndexedSetter(JdbcColumnKey key)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/SingleValueKey.java": [
                    "public boolean org.simpleflatmapper.map.context.impl.SingleValueKey.equals(Object o)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "public Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Constructor<?> c, Type target)",
                    "public static InstantiatorDefinition org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.definition(Method m)",
                    "public static boolean org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.areParameterNamePresent(Type target)",
                    "public Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Method m, Type target)",
                    "private static List<InstantiatorDefinition> org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitionsWithParamNames(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ]
            },
            "6ca76e232eb98a0a9f25d356d1284d552dc84699": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private static Reader org.simpleflatmapper.csv.CsvParser.newReader(File file, Charset charset)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/converter/JdbcConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jdbc.converter.JdbcConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JDBCTypeHelper.java": [
                    "public static Class<?> org.simpleflatmapper.jdbc.impl.JDBCTypeHelper.toJavaType(int sqlType, Type propertyType)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementIndexedSetterFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.PreparedStatementIndexedSetterFactory.getIndexedSetter(JdbcColumnKey key)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/SingleValueKey.java": [
                    "public boolean org.simpleflatmapper.map.context.impl.SingleValueKey.equals(Object o)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "public Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Constructor<?> c, Type target)",
                    "public static InstantiatorDefinition org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.definition(Method m)",
                    "public static boolean org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.areParameterNamePresent(Type target)",
                    "public Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Method m, Type target)",
                    "private static List<InstantiatorDefinition> org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitionsWithParamNames(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e83b0452cec2c2fd867a2ee7d247816746127311",
        "previous_commit": "924c42267d33f36e352ad229bf93878decb32f86",
        "date": 1459762422,
        "releases": {
            "previous": "e83b0452cec2c2fd867a2ee7d247816746127311",
            "next": "e83b0452cec2c2fd867a2ee7d247816746127311"
        },
        "commit_message": "fix java8 del\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e83b0452cec2c2fd867a2ee7d247816746127311": {
                "sfm/src/main/java/org/sfm/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.sfm.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm/src/main/java/org/sfm/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.sfm.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.sfm.jdbc.ResultSetGetterFactory.newGetter(Type target, JdbcColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.sfm.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)",
                    "public <T> IndexedSetter<PreparedStatement, T> org.sfm.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg)"
                ],
                "sfm/src/main/java/org/sfm/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "public static InstantiatorDefinition org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.definition(Method m)",
                    "public static boolean org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.areParameterNamePresent(Type target)",
                    "public Parameter[] org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Method m, Type target)",
                    "public Parameter[] org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Constructor<?> c, Type target)",
                    "public static List<InstantiatorDefinition> org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitionsWithParamNames(Type target)"
                ],
                "sfm/src/main/java/org/sfm/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.sfm.reflect.ReflectionService.newClassMeta(Type target)"
                ],
                "sfm/src/main/java/org/sfm/utils/conv/ConverterFactory.java": [
                    "public static <P, F> Converter<F, P> org.sfm.utils.conv.ConverterFactory.getConverter(Class<F> inType, Type outType, Object... params)"
                ]
            },
            "924c42267d33f36e352ad229bf93878decb32f86": {
                "sfm/src/main/java/org/sfm/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.sfm.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm/src/main/java/org/sfm/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.sfm.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.sfm.jdbc.ResultSetGetterFactory.newGetter(Type target, JdbcColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.sfm.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)",
                    "public <T> IndexedSetter<PreparedStatement, T> org.sfm.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg)"
                ],
                "sfm/src/main/java/org/sfm/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "public static InstantiatorDefinition org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.definition(Method m)",
                    "public static boolean org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.areParameterNamePresent(Type target)",
                    "public Parameter[] org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Method m, Type target)",
                    "public Parameter[] org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Constructor<?> c, Type target)",
                    "public static List<InstantiatorDefinition> org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitionsWithParamNames(Type target)"
                ],
                "sfm/src/main/java/org/sfm/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.sfm.reflect.ReflectionService.newClassMeta(Type target)"
                ],
                "sfm/src/main/java/org/sfm/utils/conv/ConverterFactory.java": [
                    "public static <P, F> Converter<F, P> org.sfm.utils.conv.ConverterFactory.getConverter(Class<F> inType, Type outType, Object... params)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ea977cda36a14ab445db42799bc78b98d81cc6e7",
        "previous_commit": "36a96b7f692a8dd12742b7c44deccd120ae81bb6",
        "date": 1459340973,
        "releases": {
            "previous": "ea977cda36a14ab445db42799bc78b98d81cc6e7",
            "next": "ea977cda36a14ab445db42799bc78b98d81cc6e7"
        },
        "commit_message": "#305 add char consumer with trim\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ea977cda36a14ab445db42799bc78b98d81cc6e7": {
                "sfm/src/main/java/org/sfm/csv/CsvParser.java": [
                    "public DSL org.sfm.csv.CsvParser.separator(char c)",
                    "public DSL org.sfm.csv.CsvParser.quote(char c)",
                    "public DSL org.sfm.csv.CsvParser.skip(int skip)",
                    "private CsvCharConsumer charConsumer(CharBuffer charBuffer)",
                    "public static DSL org.sfm.csv.CsvParser.skip(int skip)",
                    "public DSL org.sfm.csv.CsvParser.limit(int limit)",
                    "public static DSL org.sfm.csv.CsvParser.quote(char c)",
                    "public static DSL org.sfm.csv.CsvParser.bufferSize(int size)",
                    "public static DSL org.sfm.csv.CsvParser.separator(char c)",
                    "public DSL org.sfm.csv.CsvParser.bufferSize(int size)",
                    "public static DSL org.sfm.csv.CsvParser.limit(int limit)",
                    "public DSL org.sfm.csv.CsvParser.maxBufferSize(int maxBufferSize)"
                ]
            },
            "36a96b7f692a8dd12742b7c44deccd120ae81bb6": {
                "sfm/src/main/java/org/sfm/csv/CsvParser.java": [
                    "public DSL org.sfm.csv.CsvParser.separator(char c)",
                    "public DSL org.sfm.csv.CsvParser.quote(char c)",
                    "public DSL org.sfm.csv.CsvParser.skip(int skip)",
                    "private CsvCharConsumer charConsumer(CharBuffer charBuffer)",
                    "public static DSL org.sfm.csv.CsvParser.skip(int skip)",
                    "public DSL org.sfm.csv.CsvParser.limit(int limit)",
                    "public static DSL org.sfm.csv.CsvParser.quote(char c)",
                    "public static DSL org.sfm.csv.CsvParser.bufferSize(int size)",
                    "public static DSL org.sfm.csv.CsvParser.separator(char c)",
                    "public DSL org.sfm.csv.CsvParser.bufferSize(int size)",
                    "public static DSL org.sfm.csv.CsvParser.limit(int limit)",
                    "public DSL org.sfm.csv.CsvParser.maxBufferSize(int maxBufferSize)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "49606d8b5639bfafaf29779e7d0f027af830bd92",
        "previous_commit": "30383d253fcbfdb4728800880867f60245391337",
        "date": 1499717580,
        "releases": {
            "previous": "49606d8b5639bfafaf29779e7d0f027af830bd92",
            "next": "49606d8b5639bfafaf29779e7d0f027af830bd92"
        },
        "commit_message": "add some test\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "49606d8b5639bfafaf29779e7d0f027af830bd92": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private static Reader org.simpleflatmapper.csv.CsvParser.newReader(File file, Charset charset)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/converter/JdbcConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jdbc.converter.JdbcConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JDBCTypeHelper.java": [
                    "public static Class<?> org.simpleflatmapper.jdbc.impl.JDBCTypeHelper.toJavaType(int sqlType, Type propertyType)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementIndexedSetterFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.PreparedStatementIndexedSetterFactory.getIndexedSetter(JdbcColumnKey key)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/SingleValueKey.java": [
                    "public boolean org.simpleflatmapper.map.context.impl.SingleValueKey.equals(Object o)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "public Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Constructor<?> c, Type target)",
                    "public static InstantiatorDefinition org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.definition(Method m)",
                    "public static boolean org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.areParameterNamePresent(Type target)",
                    "public Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Method m, Type target)",
                    "private static List<InstantiatorDefinition> org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitionsWithParamNames(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ]
            },
            "30383d253fcbfdb4728800880867f60245391337": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private static Reader org.simpleflatmapper.csv.CsvParser.newReader(File file, Charset charset)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/converter/JdbcConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jdbc.converter.JdbcConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JDBCTypeHelper.java": [
                    "public static Class<?> org.simpleflatmapper.jdbc.impl.JDBCTypeHelper.toJavaType(int sqlType, Type propertyType)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementIndexedSetterFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.PreparedStatementIndexedSetterFactory.getIndexedSetter(JdbcColumnKey key)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/SingleValueKey.java": [
                    "public boolean org.simpleflatmapper.map.context.impl.SingleValueKey.equals(Object o)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "public Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Constructor<?> c, Type target)",
                    "public static InstantiatorDefinition org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.definition(Method m)",
                    "public static boolean org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.areParameterNamePresent(Type target)",
                    "public Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Method m, Type target)",
                    "private static List<InstantiatorDefinition> org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitionsWithParamNames(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f8ec22aea8cc6a127d754b16f21e7e912c227ad3",
        "previous_commit": "dbfdf5495ea399c503d1f21679195347a497b551",
        "date": 1473797297,
        "releases": {
            "previous": "f8ec22aea8cc6a127d754b16f21e7e912c227ad3",
            "next": "f8ec22aea8cc6a127d754b16f21e7e912c227ad3"
        },
        "commit_message": "deprecate rowhandler, add checked consumer, add forEach on CsvParser\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f8ec22aea8cc6a127d754b16f21e7e912c227ad3": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "public final CsvMapper<T> org.simpleflatmapper.csv.CsvMapperBuilder<T>.mapper()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvMapperImpl.java": [
                    "protected CsvMapperCellConsumer<T> org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.newCellConsumer(final CheckedConsumer<? super T> handler, BreakDetector parentBreakDetector)",
                    "public void org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.forEachRemaining(Consumer<? super T> action)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvMapperCellConsumer.java": [
                    "protected final void org.simpleflatmapper.csv.mapper.CsvMapperCellConsumer<T>.callHandler()"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperBuilder.java": [
                    "protected DatastaxMapper<T> org.simpleflatmapper.datastax.DatastaxMapperBuilder<T>.newJoinJdbcMapper(Mapper<Row, T> mapper)",
                    "protected DatastaxMapper<T> org.simpleflatmapper.datastax.DatastaxMapperBuilder<T>.newStaticJdbcMapper(Mapper<Row, T> mapper)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperBuilder.java": [
                    "protected JdbcMapper<T> org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.newStaticJdbcMapper(Mapper<ResultSet, T> mapper)",
                    "protected JdbcMapper<T> org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.newJoinJdbcMapper(Mapper<ResultSet, T> mapper)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/AbstractBatchInsertQueryExecutor.java": [
                    "public void org.simpleflatmapper.jdbc.impl.AbstractBatchInsertQueryExecutor<T>.insert(Connection connection, Collection<T> values, CheckedConsumer<PreparedStatement> postExecute)"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/SheetMapperBuilder.java": [
                    "protected RowMapper<T> org.simpleflatmapper.poi.SheetMapperBuilder<T>.newStaticJdbcMapper(Mapper<Row, T> mapper)",
                    "protected RowMapper<T> org.simpleflatmapper.poi.SheetMapperBuilder<T>.newJoinJdbcMapper(Mapper<Row, T> mapper)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/ResultSetExtractorImpl.java": [
                    "public List<T> org.simpleflatmapper.jdbc.spring.ResultSetExtractorImpl<T>.extractData(ResultSet rs)"
                ]
            },
            "dbfdf5495ea399c503d1f21679195347a497b551": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "public final CsvMapper<T> org.simpleflatmapper.csv.CsvMapperBuilder<T>.mapper()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvMapperImpl.java": [
                    "public void org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.forEachRemaining(Consumer<? super T> action)",
                    "protected CsvMapperCellConsumer<T> org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.newCellConsumer(final RowHandler<? super T> handler, BreakDetector parentBreakDetector)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvMapperCellConsumer.java": [
                    "protected final void org.simpleflatmapper.csv.mapper.CsvMapperCellConsumer<T>.callHandler()"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperBuilder.java": [
                    "protected DatastaxMapper<T> org.simpleflatmapper.datastax.DatastaxMapperBuilder<T>.newJoinJdbcMapper(Mapper<Row, T> mapper)",
                    "protected DatastaxMapper<T> org.simpleflatmapper.datastax.DatastaxMapperBuilder<T>.newStaticJdbcMapper(Mapper<Row, T> mapper)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperBuilder.java": [
                    "protected JdbcMapper<T> org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.newStaticJdbcMapper(Mapper<ResultSet, T> mapper)",
                    "protected JdbcMapper<T> org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.newJoinJdbcMapper(Mapper<ResultSet, T> mapper)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/AbstractBatchInsertQueryExecutor.java": [
                    "public void org.simpleflatmapper.jdbc.impl.AbstractBatchInsertQueryExecutor<T>.insert(Connection connection, Collection<T> values, RowHandler<PreparedStatement> postExecute)"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/SheetMapperBuilder.java": [
                    "protected RowMapper<T> org.simpleflatmapper.poi.SheetMapperBuilder<T>.newStaticJdbcMapper(Mapper<Row, T> mapper)",
                    "protected RowMapper<T> org.simpleflatmapper.poi.SheetMapperBuilder<T>.newJoinJdbcMapper(Mapper<Row, T> mapper)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/ResultSetExtractorImpl.java": [
                    "public List<T> org.simpleflatmapper.jdbc.spring.ResultSetExtractorImpl<T>.extractData(ResultSet rs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c70d4af0c8ea20ea1f0850e12ee9d1e756bcf782",
        "previous_commit": "55aa9a24cfbe75647b667aed4cd28d379a483277",
        "date": 1486057929,
        "releases": {
            "previous": "c70d4af0c8ea20ea1f0850e12ee9d1e756bcf782",
            "next": "c70d4af0c8ea20ea1f0850e12ee9d1e756bcf782"
        },
        "commit_message": " #400 unwrap BiFunction to Getter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c70d4af0c8ea20ea1f0850e12ee9d1e756bcf782": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> Instantiator<S,T> org.simpleflatmapper.map.mapper.MapperInstantiatorFactory.getInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, Getter<? super S, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.asm.AsmFactory.createBiInstantiator(final Class<?> s1, final Class<?> s2, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorKey.java": [
                    "private static <S1, S2> InjectedParam[] org.simpleflatmapper.reflect.asm.BiInstantiatorKey.paramAndBuilderFactoryClass(Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorBuilder.java": [
                    "public static <S> byte[] org.simpleflatmapper.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass, final Instantiator<Void, ?> builderInstantiator, final BuilderInstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendNewInstanceBuilder(Class<?> sourceClass, BuilderInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Map<Parameter, Method> setters)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendInit(Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String sourceType, String classType)",
                    "public static <S> byte[] org.simpleflatmapper.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass, final ExecutableInstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendNewInstanceBuilder(Class<?> sourceClass, ExecutableInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Parameter[] parameters)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendInitBuilder(Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String sourceType, String classType, BuilderInstantiatorDefinition instantiatorDefinition)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.invokeGetter(Parameter p, Getter<? super S, ?> getter, String classType, Class<?> sourceClass, MethodVisitor mv)",
                    "private static GetterCall org.simpleflatmapper.reflect.asm.InstantiatorBuilder.getGetterCall(Class<?> propertyType, Class<? extends Getter> getterClass)"
                ]
            },
            "55aa9a24cfbe75647b667aed4cd28d379a483277": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> Instantiator<S,T> org.simpleflatmapper.map.mapper.MapperInstantiatorFactory.getInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, Getter<? super S, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.asm.AsmFactory.createBiInstantiator(final Class<?> s1, final Class<?> s2, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, BiFactory<? super S1, ? super S2, ?>> injections)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorKey.java": [
                    "private static <S1, S2> InjectedParam[] org.simpleflatmapper.reflect.asm.BiInstantiatorKey.paramAndBuilderFactoryClass(Map<Parameter, BiFactory<? super S1, ? super S2, ?>> injections)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorBuilder.java": [
                    "public static <S> byte[] org.simpleflatmapper.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass, final Instantiator<Void, ?> builderInstantiator, final BuilderInstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendInit(Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String sourceType, String classType)",
                    "public static <S> byte[] org.simpleflatmapper.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass, final ExecutableInstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.invovkeGetter(Parameter p, Getter<? super S, ?> getter, String classType, Class<?> sourceClass, MethodVisitor mv)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendNewInstance(Class<?> sourceClass, BuilderInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Map<Parameter, Method> setters)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendInitBuilder(Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String sourceType, String classType, BuilderInstantiatorDefinition instantiatorDefinition)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendNewInstance(Class<?> sourceClass, ExecutableInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Parameter[] parameters)",
                    "private static GetterCall org.simpleflatmapper.reflect.asm.InstantiatorBuilder.getGetterCall(Class<?> propertyType, Class<? extends Getter> getterClass)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "74e8c79e1403ff0e51f322b366afc80bb2d6e37b",
        "previous_commit": "9bbf741b08b6a9e030feefe370cd5d29d1654a46",
        "date": 1539344244,
        "releases": {
            "previous": "74e8c79e1403ff0e51f322b366afc80bb2d6e37b",
            "next": "74e8c79e1403ff0e51f322b366afc80bb2d6e37b"
        },
        "commit_message": " #560 test run in java 9 10 11\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "74e8c79e1403ff0e51f322b366afc80bb2d6e37b": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ContextualConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories(ClassLoader classLoader)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/DefaultReflectionService.java": [
                    "private static Consumer<BiConsumer<String, UnaryFactory<Type, Member>>>[] org.simpleflatmapper.reflect.DefaultReflectionService.getPredifinedBuilderProducers()",
                    "private static UnaryFactory<ReflectionService, ClassMeta<?>>[] org.simpleflatmapper.reflect.DefaultReflectionService.getPredifinedClassMetaFactory()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.extractDefinitions(final Type target)",
                    "public void org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.visitEnd()",
                    "public MethodVisitor org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.visitMethod(int access, final String methodName, String desc, String signature, String[] exceptions)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/ParamNameDeductor.java": [
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.markValue(Type type, boolean builderIgnoresNullValues)",
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.neutralValue(Type type, boolean allowNull, boolean builderIgnoresNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AliasProviderService.java": [
                    "private static AliasProvider org.simpleflatmapper.reflect.meta.AliasProviderService.findAliasProviders()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AnnotationToPropertyUtil.java": [
                    "private static AnnotationToPropertyService org.simpleflatmapper.reflect.meta.AnnotationToPropertyUtil.findAnnotationToProperty()"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/EnumHelper.java": [
                    "public static <E extends Enum<E>> E[] org.simpleflatmapper.util.EnumHelper.getValues(Class<E> enumType)"
                ]
            },
            "9bbf741b08b6a9e030feefe370cd5d29d1654a46": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ContextualConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/DefaultReflectionService.java": [
                    "private static Consumer<BiConsumer<String, UnaryFactory<Type, Member>>>[] org.simpleflatmapper.reflect.DefaultReflectionService.getPredifinedBuilderProducers()",
                    "private static UnaryFactory<ReflectionService, ClassMeta<?>>[] org.simpleflatmapper.reflect.DefaultReflectionService.getPredifinedClassMetaFactory()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.extractDefinitions(final Type target)",
                    "public void org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.visitEnd()",
                    "public MethodVisitor org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.visitMethod(int access, final String methodName, String desc, String signature, String[] exceptions)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/ParamNameDeductor.java": [
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.markValue(Type type, boolean builderIgnoresNullValues)",
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.neutralValue(Type type, boolean allowNull, boolean builderIgnoresNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AliasProviderService.java": [
                    "private static AliasProvider org.simpleflatmapper.reflect.meta.AliasProviderService.findAliasProviders()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AnnotationToPropertyUtil.java": [
                    "private static AnnotationToPropertyService org.simpleflatmapper.reflect.meta.AnnotationToPropertyUtil.findAnnotationToProperty()"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/EnumHelper.java": [
                    "public static <E extends Enum<E>> E[] org.simpleflatmapper.util.EnumHelper.getValues(Class<E> enumType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0374be75817788ddff97993de6a51c221a36e096",
        "previous_commit": "db1acdca7f51eae83021d8669e4c507770d375a2",
        "date": 1468247959,
        "releases": {
            "previous": "0374be75817788ddff97993de6a51c221a36e096",
            "next": "0374be75817788ddff97993de6a51c221a36e096"
        },
        "commit_message": "transfer perf change, fix non push last empty cell\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0374be75817788ddff97993de6a51c221a36e096": {
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableCsvCharConsumer.java": [
                    "public final void org.sfm.csv.parser.ConfigurableCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)",
                    "public boolean org.sfm.csv.parser.ConfigurableCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.ConfigurableCsvCharConsumer.finish(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableTrimCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.finish(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.unescape(final char[] chars, final int offset, final int end)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)",
                    "public boolean org.sfm.csv.parser.StandardCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.removeEscapeChars(final char[] chars, final int end, final int firstEscapeChar)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.finish(CellConsumer cellConsumer)"
                ]
            },
            "db1acdca7f51eae83021d8669e4c507770d375a2": {
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableCsvCharConsumer.java": [
                    "public final void org.sfm.csv.parser.ConfigurableCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)",
                    "public boolean org.sfm.csv.parser.ConfigurableCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.ConfigurableCsvCharConsumer.finish(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableTrimCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.finish(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.unescape(final char[] chars, final int offset, final int end)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)",
                    "public boolean org.sfm.csv.parser.StandardCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.removeEscapeChars(final char[] chars, final int end, final int firstEscapeChar)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.finish(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a34e460699c508ab6d0b2f329facaa70039a3c85",
        "previous_commit": "d89d6df4002fc2b4a0508d7567cc769399ada909",
        "date": 1470603401,
        "releases": {
            "previous": "a34e460699c508ab6d0b2f329facaa70039a3c85",
            "next": "a34e460699c508ab6d0b2f329facaa70039a3c85"
        },
        "commit_message": "jodatime test\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a34e460699c508ab6d0b2f329facaa70039a3c85": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/JavaTimeConverterFactoryProducer.java": [
                    "public Converter<?, ?> org.simpleflatmapper.converter.impl.time.JavaTimeConverterFactoryProducer.newConverter(ConvertingTypes targetedTypes, Object... params)",
                    "public void org.simpleflatmapper.converter.impl.time.JavaTimeConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/RowGetterFactory.java": [
                    "private Converter<?, ?> org.simpleflatmapper.datastax.impl.RowGetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt)",
                    "public <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, Object... properties)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType, JdbcColumnKey key, Object... properties)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType,\t\t\t\t\t\t\t\t\t\t\t JdbcColumnKey key, Object... properties)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <T> IndexedSetter<PreparedStatement, T> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg)",
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/impl/RowGetterFactory.java": [
                    "public <P> Getter<Row, P> org.simpleflatmapper.poi.impl.RowGetterFactory.newGetter(Type target, CsvColumnKey key, Object... properties)"
                ]
            },
            "d89d6df4002fc2b4a0508d7567cc769399ada909": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/JavaTimeConverterFactoryProducer.java": [
                    "public Converter<?, ?> org.simpleflatmapper.converter.impl.time.JavaTimeConverterFactoryProducer.newConverter(ConvertingTypes targetedTypes, Object... params)",
                    "public void org.simpleflatmapper.converter.impl.time.JavaTimeConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/RowGetterFactory.java": [
                    "private Converter<?, ?> org.simpleflatmapper.datastax.impl.RowGetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt)",
                    "public <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, Object... properties)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType, JdbcColumnKey key, Object... properties)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType,\t\t\t\t\t\t\t\t\t\t\t JdbcColumnKey key, Object... properties)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <T> IndexedSetter<PreparedStatement, T> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg)",
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/impl/RowGetterFactory.java": [
                    "public <P> Getter<Row, P> org.simpleflatmapper.poi.impl.RowGetterFactory.newGetter(Type target, CsvColumnKey key, Object... properties)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3e8a7b042c3702114c3d6419cfab8b5057435c14",
        "previous_commit": "188cd7cfb1a55d3e4c72e4ed197b3246b515f0fd",
        "date": 1471549319,
        "releases": {
            "previous": "3e8a7b042c3702114c3d6419cfab8b5057435c14",
            "next": "3e8a7b042c3702114c3d6419cfab8b5057435c14"
        },
        "commit_message": "move converter call in CSFMF\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3e8a7b042c3702114c3d6419cfab8b5057435c14": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, Object... params)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public Converter<? super Object, ? extends Enum> org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.newConverter(ConvertingTypes targetedTypes, Object... params)",
                    "public void org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/RowGetterFactory.java": [
                    "private <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.RowGetterFactory.getterFromFactories(Type target, DatastaxColumnKey key, Object[] properties)",
                    "public <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, Object... properties)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type target, JdbcColumnKey key, Object... properties)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType, JdbcColumnKey key, Object... properties)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType,\t\t\t\t\t\t\t\t\t\t\t JdbcColumnKey key, Object... properties)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/converter/JdbcConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jdbc.converter.JdbcConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "private <P, I> IndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getSetterWithConvertion(Class<P> pclazz, Class<I> iclass, PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/impl/RowGetterFactory.java": [
                    "public <P> Getter<Row, P> org.simpleflatmapper.poi.impl.RowGetterFactory.newGetter(Type target, CsvColumnKey key, Object... properties)"
                ]
            },
            "188cd7cfb1a55d3e4c72e4ed197b3246b515f0fd": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, Object... params)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)",
                    "public Converter<? super CharSequence, ? extends Enum> org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.newConverter(ConvertingTypes targetedTypes, Object... params)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/RowGetterFactory.java": [
                    "private <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.RowGetterFactory.getterFromFactories(Type target, DatastaxColumnKey key, Object[] properties)",
                    "public <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, Object... properties)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type target, JdbcColumnKey key, Object... properties)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType, JdbcColumnKey key, Object... properties)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType,\t\t\t\t\t\t\t\t\t\t\t JdbcColumnKey key, Object... properties)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/converter/JdbcConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jdbc.converter.JdbcConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "private <P, I> IndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getSetterWithConvertion(Class<P> pclazz, Class<I> iclass, PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/impl/RowGetterFactory.java": [
                    "public <P> Getter<Row, P> org.simpleflatmapper.poi.impl.RowGetterFactory.newGetter(Type target, CsvColumnKey key, Object... properties)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f534a811adc7ffb139017fa927e527b1e59f4570",
        "previous_commit": "5321faf1608db91e706036215ca187fe24a368c6",
        "date": 1502660072,
        "releases": {
            "previous": "f534a811adc7ffb139017fa927e527b1e59f4570",
            "next": "f534a811adc7ffb139017fa927e527b1e59f4570"
        },
        "commit_message": " #453 add jooq converter for unsigned type\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f534a811adc7ffb139017fa927e527b1e59f4570": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "public ReflectionService org.simpleflatmapper.reflect.ReflectionService.withAliasProvider(AliasProvider aliasProvider)",
                    "public ReflectionService org.simpleflatmapper.reflect.ReflectionService.withBuilderIgnoresNullValues(boolean builderIgnoresNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "public PropertyFinder<T> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.newPropertyFinder(Predicate<PropertyMeta<?, ?>> propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/OptionalClassMeta.java": [
                    "public PropertyFinder<Optional<T>> org.simpleflatmapper.reflect.meta.OptionalClassMeta<T>.newPropertyFinder(Predicate<PropertyMeta<?, ?>> propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher, PropertyFinderProbe propertyFinderProbe)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.index(int i)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculative()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(String property)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.newIndex(int i)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.self(int numberOfProperties, String propName)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TupleClassMeta.java": [
                    "public PropertyFinder<T> org.simpleflatmapper.reflect.meta.TupleClassMeta<T>.newPropertyFinder(Predicate<PropertyMeta<?, ?>> propertyFilter)"
                ]
            },
            "5321faf1608db91e706036215ca187fe24a368c6": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "public ReflectionService org.simpleflatmapper.reflect.ReflectionService.withAliasProvider(AliasProvider aliasProvider)",
                    "public ReflectionService org.simpleflatmapper.reflect.ReflectionService.withBuilderIgnoresNullValues(boolean builderIgnoresNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "public PropertyFinder<T> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.newPropertyFinder(Predicate<PropertyMeta<?, ?>> propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/OptionalClassMeta.java": [
                    "public PropertyFinder<Optional<T>> org.simpleflatmapper.reflect.meta.OptionalClassMeta<T>.newPropertyFinder(Predicate<PropertyMeta<?, ?>> propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher, PropertyFinderProbe propertyFinderProbe)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.index(int i)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculative()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(String property)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.newIndex(int i)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.self(int numberOfProperties, String propName)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TupleClassMeta.java": [
                    "public PropertyFinder<T> org.simpleflatmapper.reflect.meta.TupleClassMeta<T>.newPropertyFinder(Predicate<PropertyMeta<?, ?>> propertyFilter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "116ce133c19bc7c2355c8dcdd5f81b20cb0da43d",
        "previous_commit": "8c857e92d8940764680b945fa276e849287b91e7",
        "date": 1522400919,
        "releases": {
            "previous": "116ce133c19bc7c2355c8dcdd5f81b20cb0da43d",
            "next": "116ce133c19bc7c2355c8dcdd5f81b20cb0da43d"
        },
        "commit_message": "#499 add parallel reader option\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "116ce133c19bc7c2355c8dcdd5f81b20cb0da43d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public D limit(int limit)",
                    "public D bufferSize(int size)",
                    "public D escape(char c)",
                    "public D skip(int skip)",
                    "public final CsvReader org.simpleflatmapper.csv.CsvParser.reader(Reader reader)",
                    "public D quote(char c)",
                    "protected DSL org.simpleflatmapper.csv.DSL.newDSL(char separatorChar, char quoteChar, char escapeChar, int bufferSize, int skip, int limit, int maxBufferSize, StringPostProcessing stringPostProcessing, org.simpleflatmapper.util.Function<? super CellConsumer, ? extends CellConsumer> cellConsumerWrapper, boolean yamlComment, boolean parallelReader)",
                    "public static CsvReader org.simpleflatmapper.csv.CsvParser.reader(Reader reader)",
                    "public D separator(char c)",
                    "public D maxBufferSize(int maxBufferSize)"
                ]
            },
            "8c857e92d8940764680b945fa276e849287b91e7": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public D limit(int limit)",
                    "public D bufferSize(int size)",
                    "public D escape(char c)",
                    "public D skip(int skip)",
                    "public final CsvReader org.simpleflatmapper.csv.CsvParser.reader(Reader reader)",
                    "public D quote(char c)",
                    "protected DSLYamlComment org.simpleflatmapper.csv.DSLYamlComment.newDSL(char separatorChar, char quoteChar, char escapeChar, int bufferSize, int skip, int limit, int maxBufferSize, StringPostProcessing stringPostProcessing, org.simpleflatmapper.util.Function<? super CellConsumer, ? extends CellConsumer> cellConsumerWrapper, boolean yamlComment)",
                    "public static CsvReader org.simpleflatmapper.csv.CsvParser.reader(Reader reader)",
                    "public D separator(char c)",
                    "public D maxBufferSize(int maxBufferSize)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "51de1dc00a965ab6492c2a10222d4d3a758c6e06",
        "previous_commit": "566eb372692e85239860716d2aaa5cc32ca0969e",
        "date": 1489865766,
        "releases": {
            "previous": "51de1dc00a965ab6492c2a10222d4d3a758c6e06",
            "next": "51de1dc00a965ab6492c2a10222d4d3a758c6e06"
        },
        "commit_message": " #427 allow for specified generation expression\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "51de1dc00a965ab6492c2a10222d4d3a758c6e06": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/AbstractBatchInsertQueryExecutor.java": [
                    "private void org.simpleflatmapper.jdbc.impl.AbstractBatchInsertQueryExecutor<T>.values(int size, StringBuilder sb)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/ColumnMeta.java": [
                    "public boolean org.simpleflatmapper.jdbc.impl.ColumnMeta.isGenerated()"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudFactory.java": [
                    "private static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.CrudFactory.buildInsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudMeta.java": [
                    "public void org.simpleflatmapper.jdbc.impl.CrudMeta.addColumnProperties(JdbcMapperFactory mapperFactory)",
                    "public static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.of(Connection connection, String table, ColumnDefinitionProvider<FieldMapperColumnDefinition<JdbcColumnKey>, JdbcColumnKey> columnDefinitionProvider)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/MysqlCrudFactory.java": [
                    "public static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.MysqlCrudFactory.buildUpsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> BatchQueryExecutor<T> org.simpleflatmapper.jdbc.impl.MysqlCrudFactory.buildBatchInsert( ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory, boolean onDuplicateKeyUpdate)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PostgresqlCrudFactory.java": [
                    "public static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.PostgresqlCrudFactory.buildUpsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> BatchQueryExecutor<T> org.simpleflatmapper.jdbc.impl.PostgresqlCrudFactory.buildBatchInsert( ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory, boolean onDuplicateKeyUpdate)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/AutoGeneratedProperty.java": [
                    "public String org.simpleflatmapper.map.property.AutoGeneratedProperty.toString()"
                ]
            },
            "566eb372692e85239860716d2aaa5cc32ca0969e": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/AbstractBatchInsertQueryExecutor.java": [
                    "private void org.simpleflatmapper.jdbc.impl.AbstractBatchInsertQueryExecutor<T>.values(int size, StringBuilder sb)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/ColumnMeta.java": [
                    "public boolean org.simpleflatmapper.jdbc.impl.ColumnMeta.isGenerated()"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudFactory.java": [
                    "private static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.CrudFactory.buildInsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudMeta.java": [
                    "public void org.simpleflatmapper.jdbc.impl.CrudMeta.addColumnProperties(JdbcMapperFactory mapperFactory)",
                    "public static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.of(Connection connection, String table, ColumnDefinitionProvider<FieldMapperColumnDefinition<JdbcColumnKey>, JdbcColumnKey> columnDefinitionProvider)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/MysqlCrudFactory.java": [
                    "public static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.MysqlCrudFactory.buildUpsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> BatchQueryExecutor<T> org.simpleflatmapper.jdbc.impl.MysqlCrudFactory.buildBatchInsert( ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory, boolean onDuplicateKeyUpdate)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PostgresqlCrudFactory.java": [
                    "public static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.PostgresqlCrudFactory.buildUpsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> BatchQueryExecutor<T> org.simpleflatmapper.jdbc.impl.PostgresqlCrudFactory.buildBatchInsert( ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory, boolean onDuplicateKeyUpdate)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/AutoGeneratedProperty.java": [
                    "public String org.simpleflatmapper.map.property.AutoGeneratedProperty.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2d2668937db512a4353bd1d81b4294038b2fea7d",
        "previous_commit": "b19f98f56d5ffb67288a17ebc20a3569b6d4c60c",
        "date": 1553638801,
        "releases": {
            "previous": "2d2668937db512a4353bd1d81b4294038b2fea7d",
            "next": "2d2668937db512a4353bd1d81b4294038b2fea7d"
        },
        "commit_message": " #623  fix classloader for spring boot dev tools\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2d2668937db512a4353bd1d81b4294038b2fea7d": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/impl/AsmCharConsumerFactory.java": [
                    "private static Constructor<? extends AbstractCharConsumer> org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.generateSpecialisedCharConsumer(final SpecialisationKey key)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmFactory.java": [
                    "public <S, T> AbstractMapper<S, T> org.simpleflatmapper.map.asm.MapperAsmFactory.createMapper(final FieldKey<?>[] keys, final FieldMapper<S, T>[] mappers, final FieldMapper<S, T>[] constructorMappers, final BiInstantiator<S, MappingContext<? super S>, T> instantiator, final Class<? super S> source, final Class<T> target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.asm.AsmFactory.createEmptyArgsInstantiator(final Class<S> source, final Class<? extends T> target)",
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.asm.AsmFactory.createBiInstantiator(final Class<?> s1, final Class<?> s2, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean builderIgnoresNullValues)",
                    "public <T, P> Setter<T,P> org.simpleflatmapper.reflect.asm.AsmFactory.createSetter(final Method m)",
                    "public <T, P> Getter<T,P> org.simpleflatmapper.reflect.asm.AsmFactory.createGetter(final Method m)",
                    "public <T, P> Setter<T,P> org.simpleflatmapper.reflect.asm.AsmFactory.createSetter(Field field)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.asm.AsmFactory.createInstantiator(final Class<S> source, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections, boolean builderIgnoresNullValues)",
                    "public <T, P> Getter<T,P> org.simpleflatmapper.reflect.asm.AsmFactory.createGetter(final Field m)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/FactoryClassLoader.java": [
                    "protected Class<?> org.simpleflatmapper.util.FactoryClassLoader.findClass(String name)"
                ]
            },
            "b19f98f56d5ffb67288a17ebc20a3569b6d4c60c": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/impl/AsmCharConsumerFactory.java": [
                    "private static Constructor<? extends AbstractCharConsumer> org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.generateSpecialisedCharConsumer(final SpecialisationKey key)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmFactory.java": [
                    "public <S, T> AbstractMapper<S, T> org.simpleflatmapper.map.asm.MapperAsmFactory.createMapper(final FieldKey<?>[] keys, final FieldMapper<S, T>[] mappers, final FieldMapper<S, T>[] constructorMappers, final BiInstantiator<S, MappingContext<? super S>, T> instantiator, final Class<? super S> source, final Class<T> target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.asm.AsmFactory.createEmptyArgsInstantiator(final Class<S> source, final Class<? extends T> target)",
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.asm.AsmFactory.createBiInstantiator(final Class<?> s1, final Class<?> s2, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean builderIgnoresNullValues)",
                    "public <T, P> Setter<T,P> org.simpleflatmapper.reflect.asm.AsmFactory.createSetter(final Method m)",
                    "public <T, P> Getter<T,P> org.simpleflatmapper.reflect.asm.AsmFactory.createGetter(final Method m)",
                    "public <T, P> Setter<T,P> org.simpleflatmapper.reflect.asm.AsmFactory.createSetter(Field field)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.asm.AsmFactory.createInstantiator(final Class<S> source, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections, boolean builderIgnoresNullValues)",
                    "public <T, P> Getter<T,P> org.simpleflatmapper.reflect.asm.AsmFactory.createGetter(final Field m)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/FactoryClassLoader.java": [
                    "protected Class<?> org.simpleflatmapper.util.FactoryClassLoader.findClass(String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b64fc34917bad69e44e965a4b79112bb9d7885ff",
        "previous_commit": "9d5567a35942b7fc7fb764b41ff0ecf223e213f1",
        "date": 1561451139,
        "releases": {
            "previous": "b64fc34917bad69e44e965a4b79112bb9d7885ff",
            "next": "b64fc34917bad69e44e965a4b79112bb9d7885ff"
        },
        "commit_message": "add non mapped property meta\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b64fc34917bad69e44e965a4b79112bb9d7885ff": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private boolean org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.disallowSelfReference(Object[] properties)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties, FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.compareTo(PropertyMatchingScore o)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.tupleIndex(int i)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.self(int numberOfProperties, String propName)",
                    "public static PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.newInstance(boolean selfScoreFullName)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculative()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculativeArrayIndex(int i)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(String property)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.arrayIndex(int i)"
                ]
            },
            "9d5567a35942b7fc7fb764b41ff0ecf223e213f1": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private boolean org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.disallowSelfReference(Object[] properties)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties, FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.compareTo(PropertyMatchingScore o)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.tupleIndex(int i)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.self(int numberOfProperties, String propName)",
                    "public static PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.newInstance(boolean selfScoreFullName)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculative()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculativeArrayIndex(int i)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(String property)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.arrayIndex(int i)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a85166a67a199a5a36d96a12030ba0e2b65f296e",
        "previous_commit": "505f0dea703b0d0786ed37bdc64b6e35d4649307",
        "date": 1468792652,
        "releases": {
            "previous": "a85166a67a199a5a36d96a12030ba0e2b65f296e",
            "next": "a85166a67a199a5a36d96a12030ba0e2b65f296e"
        },
        "commit_message": " #328 add full number test fix missings\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a85166a67a199a5a36d96a12030ba0e2b65f296e": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericBigDecimalGetter.java": [
                    "private DataType.Name org.sfm.datastax.impl.getter.DatastaxGenericBigDecimalGetter.validateName(DataType dataType)",
                    "public BigDecimal org.sfm.datastax.impl.getter.DatastaxGenericBigDecimalGetter.get(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericBigIntegerGetter.java": [
                    "private DataType.Name org.sfm.datastax.impl.getter.DatastaxGenericBigIntegerGetter.validateName(DataType dataType)",
                    "public BigInteger org.sfm.datastax.impl.getter.DatastaxGenericBigIntegerGetter.get(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericByteGetter.java": [
                    "public byte org.sfm.datastax.impl.getter.DatastaxGenericByteGetter.getByte(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericDoubleGetter.java": [
                    "public double org.sfm.datastax.impl.getter.DatastaxGenericDoubleGetter.getDouble(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericFloatGetter.java": [
                    "public float org.sfm.datastax.impl.getter.DatastaxGenericFloatGetter.getFloat(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericIntegerGetter.java": [
                    "public int org.sfm.datastax.impl.getter.DatastaxGenericIntegerGetter.getInt(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericLongGetter.java": [
                    "public long org.sfm.datastax.impl.getter.DatastaxGenericLongGetter.getLong(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericShortGetter.java": [
                    "public short org.sfm.datastax.impl.getter.DatastaxGenericShortGetter.getShort(GettableByIndexData target)"
                ]
            },
            "505f0dea703b0d0786ed37bdc64b6e35d4649307": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericBigDecimalGetter.java": [
                    "private DataType.Name org.sfm.datastax.impl.getter.DatastaxGenericBigDecimalGetter.validateName(DataType dataType)",
                    "public BigDecimal org.sfm.datastax.impl.getter.DatastaxGenericBigDecimalGetter.get(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericBigIntegerGetter.java": [
                    "private DataType.Name org.sfm.datastax.impl.getter.DatastaxGenericBigIntegerGetter.validateName(DataType dataType)",
                    "public BigInteger org.sfm.datastax.impl.getter.DatastaxGenericBigIntegerGetter.get(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericByteGetter.java": [
                    "public byte org.sfm.datastax.impl.getter.DatastaxGenericByteGetter.getByte(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericDoubleGetter.java": [
                    "public double org.sfm.datastax.impl.getter.DatastaxGenericDoubleGetter.getDouble(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericFloatGetter.java": [
                    "public float org.sfm.datastax.impl.getter.DatastaxGenericFloatGetter.getFloat(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericIntegerGetter.java": [
                    "public int org.sfm.datastax.impl.getter.DatastaxGenericIntegerGetter.getInt(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericLongGetter.java": [
                    "public long org.sfm.datastax.impl.getter.DatastaxGenericLongGetter.getLong(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxGenericShortGetter.java": [
                    "public short org.sfm.datastax.impl.getter.DatastaxGenericShortGetter.getShort(GettableByIndexData target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0e04a447b166672a5c6c19865f351edbe1b468f9",
        "previous_commit": "54fa57add3d35eef4f1e7b305cd9961695c14c2c",
        "date": 1475009716,
        "releases": {
            "previous": "0e04a447b166672a5c6c19865f351edbe1b468f9",
            "next": "0e04a447b166672a5c6c19865f351edbe1b468f9"
        },
        "commit_message": "restore filters\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0e04a447b166672a5c6c19865f351edbe1b468f9": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories(ServiceLoader<ConverterFactoryProducer> serviceLoader)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/converter/JdbcConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jdbc.converter.JdbcConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JDBCTypeHelper.java": [
                    "public static Class<?> org.simpleflatmapper.jdbc.impl.JDBCTypeHelper.toJavaType(int sqlType, Type propertyType)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementIndexedSetterFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.PreparedStatementIndexedSetterFactory.getIndexedSetter(JdbcColumnKey key)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "public Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Constructor<?> c, Type target)",
                    "public static InstantiatorDefinition org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.definition(Method m)",
                    "public static boolean org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.areParameterNamePresent(Type target)",
                    "public Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Method m, Type target)",
                    "private static List<InstantiatorDefinition> org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitionsWithParamNames(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ]
            },
            "54fa57add3d35eef4f1e7b305cd9961695c14c2c": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories(ServiceLoader<ConverterFactoryProducer> serviceLoader)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/converter/JdbcConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jdbc.converter.JdbcConverterFactoryProducer.produce(Consumer<ConverterFactory> consumer)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JDBCTypeHelper.java": [
                    "public static Class<?> org.simpleflatmapper.jdbc.impl.JDBCTypeHelper.toJavaType(int sqlType, Type propertyType)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementIndexedSetterFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.PreparedStatementIndexedSetterFactory.getIndexedSetter(JdbcColumnKey key)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "public Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Constructor<?> c, Type target)",
                    "public static InstantiatorDefinition org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.definition(Method m)",
                    "public static boolean org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.areParameterNamePresent(Type target)",
                    "public Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.getParameters(Method m, Type target)",
                    "private static List<InstantiatorDefinition> org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitionsWithParamNames(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "870cb6d487b4ca9be2eb64a660e09ef0c972c8c0",
        "previous_commit": "fe88ab5501841998377a0118c83c164491d78dcd",
        "date": 1466525803,
        "releases": {
            "previous": "870cb6d487b4ca9be2eb64a660e09ef0c972c8c0",
            "next": "870cb6d487b4ca9be2eb64a660e09ef0c972c8c0"
        },
        "commit_message": "reduce inheritance\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "870cb6d487b4ca9be2eb64a660e09ef0c972c8c0": {
                "sfm/src/main/java/org/sfm/csv/CsvParser.java": [
                    "public static Stream<String[]> org.sfm.csv.CsvParser.stream(String content)",
                    "public Stream<String[]> org.sfm.csv.CsvParser.stream(String content)",
                    "private CsvCharConsumer charConsumer(CharBuffer charBuffer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/AbstractCsvCharConsumer.java": [
                    "protected final void org.sfm.csv.parser.AbstractCsvCharConsumer.newCell(int end, final CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableCsvCharConsumer.java": [
                    "public final void org.sfm.csv.parser.ConfigurableCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)",
                    "public boolean org.sfm.csv.parser.ConfigurableCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableTrimCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.StandardCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)"
                ]
            },
            "fe88ab5501841998377a0118c83c164491d78dcd": {
                "sfm/src/main/java/org/sfm/csv/CsvParser.java": [
                    "public static Stream<String[]> org.sfm.csv.CsvParser.stream(String content)",
                    "private CsvCharConsumer charConsumer(CharBuffer charBuffer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/AbstractCsvCharConsumer.java": [
                    "protected void org.sfm.csv.parser.AbstractCsvCharConsumer.newCell(int end, final CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableCsvCharConsumer.java": [
                    "public final void org.sfm.csv.parser.ConfigurableCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)",
                    "public boolean org.sfm.csv.parser.ConfigurableCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableTrimCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.StandardCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d4a15750f16476a65624e58786e127df6b9d3ad0",
        "previous_commit": "08b65bfc62a6dfddb16704589705719596695b09",
        "date": 1518810287,
        "releases": {
            "previous": "d4a15750f16476a65624e58786e127df6b9d3ad0",
            "next": "d4a15750f16476a65624e58786e127df6b9d3ad0"
        },
        "commit_message": "fix #488\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d4a15750f16476a65624e58786e127df6b9d3ad0": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.extractDefinitions(final Type target)",
                    "public MethodVisitor org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.visitMethod(int access, final String methodName, String desc, String signature, String[] exceptions)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static Type org.simpleflatmapper.reflect.asm.AsmUtils.toGenericType(String sig, List<String> genericTypeNames, Type target)",
                    "private void org.simpleflatmapper.reflect.asm.AsmUtils.flush()",
                    "public void org.simpleflatmapper.reflect.asm.AsmUtils.visitTypeVariable(String name)",
                    "public void org.simpleflatmapper.reflect.asm.AsmUtils.visitClassType(String name)",
                    "public void org.simpleflatmapper.reflect.asm.AsmUtils.visitEnd()",
                    "public void org.simpleflatmapper.reflect.asm.AsmUtils.visitBaseType(char descriptor)",
                    "public SignatureVisitor org.simpleflatmapper.reflect.asm.AsmUtils.visitTypeArgument(char wildcard)"
                ]
            },
            "08b65bfc62a6dfddb16704589705719596695b09": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.extractDefinitions(final Type target)",
                    "public MethodVisitor org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.visitMethod(int access, final String methodName, String desc, String signature, String[] exceptions)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static Type org.simpleflatmapper.reflect.asm.AsmUtils.toGenericType(String sig, List<String> genericTypeNames, Type target)",
                    "private void org.simpleflatmapper.reflect.asm.AsmUtils.flush()",
                    "public void org.simpleflatmapper.reflect.asm.AsmUtils.visitTypeVariable(String name)",
                    "public void org.simpleflatmapper.reflect.asm.AsmUtils.visitClassType(String name)",
                    "public void org.simpleflatmapper.reflect.asm.AsmUtils.visitEnd()",
                    "public void org.simpleflatmapper.reflect.asm.AsmUtils.visitBaseType(char descriptor)",
                    "public SignatureVisitor org.simpleflatmapper.reflect.asm.AsmUtils.visitTypeArgument(char wildcard)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cc068e1a2dc10afe28d704a93c821621ed1583c8",
        "previous_commit": "04ad08aca425ca736fadab9449c9ec8ea604ad7c",
        "date": 1535648658,
        "releases": {
            "previous": "cc068e1a2dc10afe28d704a93c821621ed1583c8",
            "next": "cc068e1a2dc10afe28d704a93c821621ed1583c8"
        },
        "commit_message": "redisign interface and all done\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "cc068e1a2dc10afe28d704a93c821621ed1583c8": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "protected CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.newColumnMapDSL( ClassMeta<T> classMeta, Column[] columns, MapperConfig<CsvColumnKey> mapperConfig, CellWriter cellWriter, boolean skipHeaders)",
                    "public static <T> CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.from(Type type)",
                    "protected CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.newMapDSL( ClassMeta<T> classMeta, Column[] columns, MapperConfig<CsvColumnKey> mapperConfig, CellWriter cellWriter, boolean skipHeaders)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperFactory.java": [
                    "public ContextualSourceFieldMapper<ResultSet, T> org.simpleflatmapper.jdbc.JdbcMapperFactory.newInstance(MapperKey<JdbcColumnKey> jdbcColumnKeyMapperKey)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers(final ContextFactoryBuilder contextFactoryBuilder)",
                    "private <P, C> ContextualIndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.indexedSetterFactory(PropertyMapping<C, P, JdbcColumnKey> pm)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/property/IndexedSetterProperty.java": [
                    "public <PP> Setter<PreparedStatement, PP> org.simpleflatmapper.jdbc.property.IndexedSetterProperty.getSetter(Object arg)"
                ],
                "sfm-jdbi/src/main/java/org/simpleflatmapper/jdbi/SfmResultSetMapperFactory.java": [
                    "public ResultSetMapper org.simpleflatmapper.jdbi.SfmResultSetMapperFactory.mapperFor(Class aClass, StatementContext statementContext)"
                ],
                "sfm-jdbi3/src/main/java/org/simpleflatmapper/jdbi3/SfmRowMapperFactory.java": [
                    "public Optional<RowMapper<?>> org.simpleflatmapper.jdbi3.SfmRowMapperFactory.build(Type type, ConfigRegistry configRegistry)"
                ]
            },
            "04ad08aca425ca736fadab9449c9ec8ea604ad7c": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "protected CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.newColumnMapDSL( ClassMeta<T> classMeta, Column[] columns, MapperConfig<CsvColumnKey> mapperConfig, CellWriter cellWriter, boolean skipHeaders)",
                    "public static <T> CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.from(Type type)",
                    "protected CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.newMapDSL( ClassMeta<T> classMeta, Column[] columns, MapperConfig<CsvColumnKey> mapperConfig, CellWriter cellWriter, boolean skipHeaders)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperFactory.java": [
                    "public ContextualSourceFieldMapper<ResultSet, T> org.simpleflatmapper.jdbc.JdbcMapperFactory.newInstance(MapperKey<JdbcColumnKey> jdbcColumnKeyMapperKey)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers(final ContextFactoryBuilder contextFactoryBuilder)",
                    "private <P, C> ContextualIndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.indexedSetterFactory(PropertyMapping<C, P, JdbcColumnKey> pm)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/property/IndexedSetterProperty.java": [
                    "public <PP> Setter<PreparedStatement, PP> org.simpleflatmapper.jdbc.property.IndexedSetterProperty.getSetter(Object arg)"
                ],
                "sfm-jdbi/src/main/java/org/simpleflatmapper/jdbi/SfmResultSetMapperFactory.java": [
                    "public ResultSetMapper org.simpleflatmapper.jdbi.SfmResultSetMapperFactory.mapperFor(Class aClass, StatementContext statementContext)"
                ],
                "sfm-jdbi3/src/main/java/org/simpleflatmapper/jdbi3/SfmRowMapperFactory.java": [
                    "public Optional<RowMapper<?>> org.simpleflatmapper.jdbi3.SfmRowMapperFactory.build(Type type, ConfigRegistry configRegistry)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "85faa6c792c80ce8a490cb5851934fcc3e04b029",
        "previous_commit": "0b313b5b35e8df1b79f7cdf32e9103d852751734",
        "date": 1478124660,
        "releases": {
            "previous": "85faa6c792c80ce8a490cb5851934fcc3e04b029",
            "next": "85faa6c792c80ce8a490cb5851934fcc3e04b029"
        },
        "commit_message": " #356 remove cellutil, refactor CellTransformer hierarchy\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "85faa6c792c80ce8a490cb5851934fcc3e04b029": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlComments()",
                    "public CellConsumer org.simpleflatmapper.csv.DSL.apply(CellConsumer cellConsumer)",
                    "protected final CharConsumer charConsumer(CharBuffer charBuffer)",
                    "private YamlCommentUnescapeContentCellConsumer org.simpleflatmapper.csv.DSLYamlComment.newYamlCellConsumer(CheckedConsumer<String[]> rowConsumer, CheckedConsumer<String> commentConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/ConfigurableCharConsumer.java": [
                    "protected void org.simpleflatmapper.csv.parser.ConfigurableCharConsumer.pushCell(char[] chars, int start, int end, CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CsvCharConsumer.java": [
                    "protected void org.simpleflatmapper.csv.parser.CsvCharConsumer.pushCell(char[] chars, int start, int end, CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/YamlCommentUnescapeContentCellConsumer.java": [
                    "public void org.simpleflatmapper.csv.parser.YamlCommentUnescapeContentCellConsumer.newCell(char[] chars, int offset, int length)"
                ]
            },
            "0b313b5b35e8df1b79f7cdf32e9103d852751734": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlComments()",
                    "public CellConsumer org.simpleflatmapper.csv.DSL.apply(CellConsumer cellConsumer)",
                    "protected final CharConsumer charConsumer(CharBuffer charBuffer)",
                    "private YamlCommentUnescapeContentCellConsumer org.simpleflatmapper.csv.DSLYamlComment.newYamlCellConsumer(CheckedConsumer<String[]> rowConsumer, CheckedConsumer<String> commentConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/ConfigurableCharConsumer.java": [
                    "protected void org.simpleflatmapper.csv.parser.ConfigurableCharConsumer.pushCell(char[] chars, int start, int end, CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CsvCharConsumer.java": [
                    "protected final void org.simpleflatmapper.csv.parser.CsvCharConsumer.pushCell(char[] chars, int start, int end, CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/YamlCommentUnescapeContentCellConsumer.java": [
                    "public void org.simpleflatmapper.csv.parser.YamlCommentUnescapeContentCellConsumer.newCell(char[] chars, int offset, int length)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f0788cd403baf2853b369d01cd62c8cbc594836e",
        "previous_commit": "c681bae135529a1de377dc4b71056ba5f24bd9f7",
        "date": 1471461986,
        "releases": {
            "previous": "f0788cd403baf2853b369d01cd62c8cbc594836e",
            "next": "f0788cd403baf2853b369d01cd62c8cbc594836e"
        },
        "commit_message": "expand coverage fix map missbehavior and consolidate instantiator getter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f0788cd403baf2853b369d01cd62c8cbc594836e": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)",
                    "public static <P> Mapper<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newUDTMapper(Type target, UserType tt, DatastaxMapperFactory factory)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/JooqMapperBuilder.java": [
                    "public JooqMapperBuilder<E> org.simpleflatmapper.jooq.JooqMapperBuilder<E>.addField(JooqFieldKey key)",
                    "public Mapper<Record, E> org.simpleflatmapper.jooq.JooqMapperBuilder<E>.mapper()"
                ],
                "sfm-querydsl/src/main/java/org/simpleflatmapper/querydsl/QueryDslMapperBuilder.java": [
                    "public Mapper<Tuple, T> org.simpleflatmapper.querydsl.QueryDslMapperBuilder<T>.mapper()",
                    "public <E> QueryDslMapperBuilder<T> org.simpleflatmapper.querydsl.QueryDslMapperBuilder<T>.addMapping(Expression<?> expression, int i)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private List<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.listProperties(final ReflectionService reflectService, Type targetType)",
                    "private <P> void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.register(String propertyName, Type type, ScoredGetter<T, P> getter, ScoredSetter<T, P> setter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "private <E> ConstructorPropertyMeta<T, E> org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.newConstructorPropertyMeta(TupleClassMeta<T> tupleClassMeta, int i)"
                ]
            },
            "c681bae135529a1de377dc4b71056ba5f24bd9f7": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> FieldMapperMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)",
                    "public static <P> Mapper<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newUDTMapper(Type target, UserType tt, DatastaxMapperFactory factory)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/JooqMapperBuilder.java": [
                    "public JooqMapperBuilder<E> org.simpleflatmapper.jooq.JooqMapperBuilder<E>.addField(JooqFieldKey key)",
                    "public Mapper<Record, E> org.simpleflatmapper.jooq.JooqMapperBuilder<E>.mapper()"
                ],
                "sfm-querydsl/src/main/java/org/simpleflatmapper/querydsl/QueryDslMapperBuilder.java": [
                    "public Mapper<Tuple, T> org.simpleflatmapper.querydsl.QueryDslMapperBuilder<T>.mapper()",
                    "public <E> QueryDslMapperBuilder<T> org.simpleflatmapper.querydsl.QueryDslMapperBuilder<T>.addMapping(Expression<?> expression, int i)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private List<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.listProperties(final ReflectionService reflectService, Type targetType)",
                    "private <P> void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.register(String propertyName, Type type, ScoredGetter<T, P> getter, ScoredSetter<T, P> setter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "private <E> ConstructorPropertyMeta<T, E> org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.newConstructorPropertyMeta(TupleClassMeta<T> tupleClassMeta, int i)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e29e40286bfe725e3e8dddeffeff4838f6b56d75",
        "previous_commit": "410dd9063402151a8491eb4888eccf71fed27dd6",
        "date": 1468266066,
        "releases": {
            "previous": "e29e40286bfe725e3e8dddeffeff4838f6b56d75",
            "next": "e29e40286bfe725e3e8dddeffeff4838f6b56d75"
        },
        "commit_message": " #321 use state instead of last char\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e29e40286bfe725e3e8dddeffeff4838f6b56d75": {
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableCsvCharConsumer.java": [
                    "public final void org.sfm.csv.parser.ConfigurableCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)",
                    "public boolean org.sfm.csv.parser.ConfigurableCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.ConfigurableCsvCharConsumer.finish(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableTrimCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.finish(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.StandardCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.finish(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)"
                ]
            },
            "410dd9063402151a8491eb4888eccf71fed27dd6": {
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableCsvCharConsumer.java": [
                    "public final void org.sfm.csv.parser.ConfigurableCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)",
                    "public boolean org.sfm.csv.parser.ConfigurableCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.ConfigurableCsvCharConsumer.finish(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableTrimCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.finish(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.StandardCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.finish(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1635e5b50cc0516a61c77a9d9e0fd10d2d4532f7",
        "previous_commit": "2820ff89c94ef4971f04f6d0a57001c279280943",
        "date": 1552598070,
        "releases": {
            "previous": "1635e5b50cc0516a61c77a9d9e0fd10d2d4532f7",
            "next": "1635e5b50cc0516a61c77a9d9e0fd10d2d4532f7"
        },
        "commit_message": "Revert \" #616 hack to handle oracle jdbc special TIMESTAMPTZ\"\n\nThis reverts commit 2820ff89c94ef4971f04f6d0a57001c279280943.\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1635e5b50cc0516a61c77a9d9e0fd10d2d4532f7": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaInstantConverter.java": [
                    "public Instant org.simpleflatmapper.converter.impl.time.ObjectToJavaInstantConverter.convert(Object in, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaLocalDateConverter.java": [
                    "public LocalDate org.simpleflatmapper.converter.impl.time.ObjectToJavaLocalDateConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaLocalDateTimeConverter.java": [
                    "public LocalDateTime org.simpleflatmapper.converter.impl.time.ObjectToJavaLocalDateTimeConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaLocalTimeConverter.java": [
                    "public LocalTime org.simpleflatmapper.converter.impl.time.ObjectToJavaLocalTimeConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaOffsetDateTimeConverter.java": [
                    "public OffsetDateTime org.simpleflatmapper.converter.impl.time.ObjectToJavaOffsetDateTimeConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaOffsetTimeConverter.java": [
                    "public OffsetTime org.simpleflatmapper.converter.impl.time.ObjectToJavaOffsetTimeConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaYearConverter.java": [
                    "public Year org.simpleflatmapper.converter.impl.time.ObjectToJavaYearConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaYearMonthConverter.java": [
                    "public YearMonth org.simpleflatmapper.converter.impl.time.ObjectToJavaYearMonthConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaZonedDateTimeConverter.java": [
                    "public ZonedDateTime org.simpleflatmapper.converter.impl.time.ObjectToJavaZonedDateTimeConverter.convert(Object o, Context context)"
                ]
            },
            "2820ff89c94ef4971f04f6d0a57001c279280943": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaInstantConverter.java": [
                    "public Instant org.simpleflatmapper.converter.impl.time.ObjectToJavaInstantConverter.convert(Object in, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaLocalDateConverter.java": [
                    "public LocalDate org.simpleflatmapper.converter.impl.time.ObjectToJavaLocalDateConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaLocalDateTimeConverter.java": [
                    "public LocalDateTime org.simpleflatmapper.converter.impl.time.ObjectToJavaLocalDateTimeConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaLocalTimeConverter.java": [
                    "public LocalTime org.simpleflatmapper.converter.impl.time.ObjectToJavaLocalTimeConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaOffsetDateTimeConverter.java": [
                    "public OffsetDateTime org.simpleflatmapper.converter.impl.time.ObjectToJavaOffsetDateTimeConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaOffsetTimeConverter.java": [
                    "public OffsetTime org.simpleflatmapper.converter.impl.time.ObjectToJavaOffsetTimeConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaYearConverter.java": [
                    "public Year org.simpleflatmapper.converter.impl.time.ObjectToJavaYearConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaYearMonthConverter.java": [
                    "public YearMonth org.simpleflatmapper.converter.impl.time.ObjectToJavaYearMonthConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaZonedDateTimeConverter.java": [
                    "public ZonedDateTime org.simpleflatmapper.converter.impl.time.ObjectToJavaZonedDateTimeConverter.convert(Object o, Context context)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "21dda592a1b8abdd4ea008bc1e7a6aee9f9d7eef",
        "previous_commit": "e636fc06f8902102827af68323d22ef6b91d4602",
        "date": 1535471837,
        "releases": {
            "previous": "21dda592a1b8abdd4ea008bc1e7a6aee9f9d7eef",
            "next": "21dda592a1b8abdd4ea008bc1e7a6aee9f9d7eef"
        },
        "commit_message": "introduce context in the getter flow\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "21dda592a1b8abdd4ea008bc1e7a6aee9f9d7eef": {
                "sfm-converter-joda-time/src/main/java/org/simpleflatmapper/converter/joda/JodaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/converter/DatastaxConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.datastax.impl.converter.DatastaxConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/converter/JooqConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jooq.converter.JooqConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperBiInstantiatorFactory.java": [
                    "public void org.simpleflatmapper.map.mapper.MapperBiInstantiatorFactory.handle(PropertyMapping<T, ?, K> propertyMapping)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public void org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.handle(PropertyMapping<T, ?, JdbcColumnKey> pm)",
                    "public PlaceHolderValueGetterSource<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.buildSource()"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceImpl.java": [
                    "public Object org.simpleflatmapper.jdbc.spring.SqlParameterSourceImpl<T>.getValue(String column)"
                ]
            },
            "e636fc06f8902102827af68323d22ef6b91d4602": {
                "sfm-converter-joda-time/src/main/java/org/simpleflatmapper/converter/joda/JodaTimeConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.joda.JodaTimeConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/converter/DatastaxConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.datastax.impl.converter.DatastaxConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/converter/JooqConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jooq.converter.JooqConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperBiInstantiatorFactory.java": [
                    "public void org.simpleflatmapper.map.mapper.MapperBiInstantiatorFactory.handle(PropertyMapping<T, ?, K> propertyMapping)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public void org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.handle(PropertyMapping<T, ?, JdbcColumnKey> pm)",
                    "public PlaceHolderValueGetterSource<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.buildSource()"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceImpl.java": [
                    "public Object org.simpleflatmapper.jdbc.spring.SqlParameterSourceImpl<T>.getValue(String column)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bf528f4936c328f2faf621d32003eda5d54b7122",
        "previous_commit": "986dbc0cb77ac5e6867cb181a13ba3dd340244f9",
        "date": 1473524188,
        "releases": {
            "previous": "bf528f4936c328f2faf621d32003eda5d54b7122",
            "next": "bf528f4936c328f2faf621d32003eda5d54b7122"
        },
        "commit_message": "remove specialized consumer\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bf528f4936c328f2faf621d32003eda5d54b7122": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private CsvCharConsumer charConsumer(CharBuffer charBuffer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvReader.java": [
                    "public <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvReader.parseAll(CC cellConsumer)",
                    "public void org.simpleflatmapper.csv.CsvReader.skipRows(int n)",
                    "public boolean org.simpleflatmapper.csv.CsvReader.parseRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CsvCharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CsvCharConsumer.finish(CellConsumer cellConsumer)",
                    "private int org.simpleflatmapper.csv.parser.CsvCharConsumer.removeEscapeChars(final char[] chars, final int end, final int firstEscapeChar)",
                    "public final boolean org.simpleflatmapper.csv.parser.CsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.csv.parser.CsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)",
                    "protected void org.simpleflatmapper.csv.parser.CsvCharConsumer.newCell(int end, final CellConsumer cellConsumer)"
                ]
            },
            "986dbc0cb77ac5e6867cb181a13ba3dd340244f9": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private CsvCharConsumer charConsumer(CharBuffer charBuffer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvReader.java": [
                    "public <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvReader.parseAll(CC cellConsumer)",
                    "public void org.simpleflatmapper.csv.CsvReader.skipRows(int n)",
                    "public boolean org.simpleflatmapper.csv.CsvReader.parseRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CsvCharConsumer.java": [
                    "private int org.simpleflatmapper.csv.parser.CsvCharConsumer.removeEscapeChars(final char[] chars, final int end, final int firstEscapeChar)",
                    "public boolean org.simpleflatmapper.csv.parser.CsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.csv.parser.CsvCharConsumer.finish(CellConsumer cellConsumer)",
                    "private void org.simpleflatmapper.csv.parser.CsvCharConsumer.newCell(int end, final CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.csv.parser.CsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "32c065b28787dbc7028aeb2b61668a68370b906c",
        "previous_commit": "e10fd14974b769bb301ea301d8f8159b48206d5c",
        "date": 1526849669,
        "releases": {
            "previous": "32c065b28787dbc7028aeb2b61668a68370b906c",
            "next": "32c065b28787dbc7028aeb2b61668a68370b906c"
        },
        "commit_message": "#515 add schema name\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "32c065b28787dbc7028aeb2b61668a68370b906c": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/AbstractBatchInsertQueryExecutor.java": [
                    "private void org.simpleflatmapper.jdbc.impl.AbstractBatchInsertQueryExecutor<T>.insertInto(StringBuilder sb)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudFactory.java": [
                    "private static <T, K> Crud<T, K> org.simpleflatmapper.jdbc.impl.CrudFactory.createCrud(ClassMeta<T> target, ClassMeta<K> keyTarget, CrudMeta crudMeta, JdbcMapperFactory mapperFactory)",
                    "private static void org.simpleflatmapper.jdbc.impl.CrudFactory.appendTableName(StringBuilder sb, CrudMeta crudMeta)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudMeta.java": [
                    "private static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.getCrudMeta(Connection connection, String _table, ColumnDefinitionProvider<FieldMapperColumnDefinition<JdbcColumnKey>, JdbcColumnKey> columnDefinitionProvider, ResultSet resultSet, DatabaseMeta databaseMeta)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/MysqlCrudFactory.java": [
                    "public static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.MysqlCrudFactory.buildUpsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> BatchQueryExecutor<T> org.simpleflatmapper.jdbc.impl.MysqlCrudFactory.buildBatchInsert( ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory, boolean onDuplicateKeyUpdate)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PostgresqlCrudFactory.java": [
                    "public static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.PostgresqlCrudFactory.buildUpsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> BatchQueryExecutor<T> org.simpleflatmapper.jdbc.impl.PostgresqlCrudFactory.buildBatchInsert( ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory, boolean onDuplicateKeyUpdate)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/SelectQueryWhereFactory.java": [
                    "private String org.simpleflatmapper.jdbc.impl.SelectQueryWhereFactory<T>.sqlQuery(String whereClause)"
                ]
            },
            "e10fd14974b769bb301ea301d8f8159b48206d5c": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/AbstractBatchInsertQueryExecutor.java": [
                    "private void org.simpleflatmapper.jdbc.impl.AbstractBatchInsertQueryExecutor<T>.insertInto(StringBuilder sb)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudFactory.java": [
                    "private static <T, K> Crud<T, K> org.simpleflatmapper.jdbc.impl.CrudFactory.createCrud(ClassMeta<T> target, ClassMeta<K> keyTarget, CrudMeta crudMeta, JdbcMapperFactory mapperFactory)",
                    "private static void org.simpleflatmapper.jdbc.impl.CrudFactory.appendTableName(StringBuilder sb, CrudMeta crudMeta)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudMeta.java": [
                    "private static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.getCrudMeta(Connection connection, String _table, ColumnDefinitionProvider<FieldMapperColumnDefinition<JdbcColumnKey>, JdbcColumnKey> columnDefinitionProvider, ResultSet resultSet, DatabaseMeta databaseMeta)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/MysqlCrudFactory.java": [
                    "public static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.MysqlCrudFactory.buildUpsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> BatchQueryExecutor<T> org.simpleflatmapper.jdbc.impl.MysqlCrudFactory.buildBatchInsert( ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory, boolean onDuplicateKeyUpdate)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PostgresqlCrudFactory.java": [
                    "public static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.PostgresqlCrudFactory.buildUpsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> BatchQueryExecutor<T> org.simpleflatmapper.jdbc.impl.PostgresqlCrudFactory.buildBatchInsert( ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory, boolean onDuplicateKeyUpdate)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/SelectQueryWhereFactory.java": [
                    "private String org.simpleflatmapper.jdbc.impl.SelectQueryWhereFactory<T>.sqlQuery(String whereClause)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bebf57588d72debe6822a90e983f9ca6a49c23c5",
        "previous_commit": "bd55e093bc92a300328ec4bb4d5ecb6c96c0d889",
        "date": 1463325866,
        "releases": {
            "previous": "bebf57588d72debe6822a90e983f9ca6a49c23c5",
            "next": "bebf57588d72debe6822a90e983f9ca6a49c23c5"
        },
        "commit_message": "csv perf improvement\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bebf57588d72debe6822a90e983f9ca6a49c23c5": {
                "sfm/src/main/java/org/sfm/csv/parser/AbstractCsvCharConsumer.java": [
                    "protected final void org.sfm.csv.parser.AbstractCsvCharConsumer.newCellIfNotInQuote(int currentIndex, CellConsumer cellConsumer)",
                    "protected final boolean org.sfm.csv.parser.AbstractCsvCharConsumer.handleEndOfLineLF(int currentIndex, CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.AbstractCsvCharConsumer.finish(CellConsumer cellConsumer)",
                    "protected void org.sfm.csv.parser.AbstractCsvCharConsumer.quote(int currentIndex)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.ConfigurableCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableTrimCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "protected final void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.quote(int currentIndex)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ReaderCharBuffer.java": [
                    "public int org.sfm.csv.parser.ReaderCharBuffer.shiftBufferToMark()"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.StandardCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            },
            "bd55e093bc92a300328ec4bb4d5ecb6c96c0d889": {
                "sfm/src/main/java/org/sfm/csv/parser/AbstractCsvCharConsumer.java": [
                    "protected final void org.sfm.csv.parser.AbstractCsvCharConsumer.newCellIfNotInQuote(int currentIndex, CellConsumer cellConsumer)",
                    "protected final boolean org.sfm.csv.parser.AbstractCsvCharConsumer.handleEndOfLineLF(int currentIndex, CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.AbstractCsvCharConsumer.finish(CellConsumer cellConsumer)",
                    "protected void org.sfm.csv.parser.AbstractCsvCharConsumer.quote(int currentIndex)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.ConfigurableCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableTrimCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "protected final void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.quote(int currentIndex)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ReaderCharBuffer.java": [
                    "public int org.sfm.csv.parser.ReaderCharBuffer.shiftBufferToMark()"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.StandardCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8bc95e0f1054db1cc1dec85589f94738d620657d",
        "previous_commit": "6d50fd18d38cc6c8b80f4251d2bc9de28243e768",
        "date": 1456264809,
        "releases": {
            "previous": "8bc95e0f1054db1cc1dec85589f94738d620657d",
            "next": "8bc95e0f1054db1cc1dec85589f94738d620657d"
        },
        "commit_message": " #299 allow override of indexed setter and integrate is as a normal ps setter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8bc95e0f1054db1cc1dec85589f94738d620657d": {
                "sfm/src/main/java/org/sfm/csv/CsvMapperBuilder.java": [
                    "private DelayedCellSetterFactory<T, ?>[] org.sfm.csv.CsvMapperBuilder<T>.buildDelayedSetters(final ParsingContextFactoryBuilder parsingContextFactoryBuilder, int delayedSetterEnd, boolean hasKeys)",
                    "private CellSetter<T>[] org.sfm.csv.CsvMapperBuilder<T>.getSetters(final ParsingContextFactoryBuilder parsingContextFactoryBuilder, final int delayedSetterEnd)",
                    "private Instantiator<CsvMapperCellHandler<T>, T> org.sfm.csv.CsvMapperBuilder<T>.getInstantiator(Map<Parameter, Getter<? super CsvMapperCellHandler<T>, ?>> params)"
                ],
                "sfm/src/main/java/org/sfm/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.sfm.csv.impl.CellSetterFactory.getReader(PropertyMeta<?, P> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm/src/main/java/org/sfm/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "private <S, P> Setter<Appendable, ?> org.sfm.csv.mapper.FieldMapperToAppendableFactory.setterFromFactory(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/PreparedStatementMapperBuilder.java": [
                    "public MultiIndexFieldMapper<T>[] org.sfm.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()",
                    "private <P> MultiIndexFieldMapper<T> org.sfm.jdbc.PreparedStatementMapperBuilder<T>.newFieldMapper(PropertyMapping<T, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "private <P, C> MultiIndexFieldMapper<T> org.sfm.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <P> Setter<PreparedStatement, P> org.sfm.jdbc.impl.PreparedStatementSetterFactory.getSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ]
            },
            "6d50fd18d38cc6c8b80f4251d2bc9de28243e768": {
                "sfm/src/main/java/org/sfm/csv/CsvMapperBuilder.java": [
                    "private DelayedCellSetterFactory<T, ?>[] org.sfm.csv.CsvMapperBuilder<T>.buildDelayedSetters(final ParsingContextFactoryBuilder parsingContextFactoryBuilder, int delayedSetterEnd, boolean hasKeys)",
                    "private CellSetter<T>[] org.sfm.csv.CsvMapperBuilder<T>.getSetters(final ParsingContextFactoryBuilder parsingContextFactoryBuilder, final int delayedSetterEnd)",
                    "private Instantiator<CsvMapperCellHandler<T>, T> org.sfm.csv.CsvMapperBuilder<T>.getInstantiator(Map<Parameter, Getter<? super CsvMapperCellHandler<T>, ?>> params)"
                ],
                "sfm/src/main/java/org/sfm/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.sfm.csv.impl.CellSetterFactory.getReader(PropertyMeta<?, P> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm/src/main/java/org/sfm/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "private <S, P> Setter<Appendable, ?> org.sfm.csv.mapper.FieldMapperToAppendableFactory.setterFromFactory(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/PreparedStatementMapperBuilder.java": [
                    "public MultiIndexFieldMapper<T>[] org.sfm.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()",
                    "private <P> MultiIndexFieldMapper<T> org.sfm.jdbc.PreparedStatementMapperBuilder<T>.newFieldMapper(PropertyMapping<T, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "private <P, C> MultiIndexFieldMapper<T> org.sfm.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <P> Setter<PreparedStatement, P> org.sfm.jdbc.impl.PreparedStatementSetterFactory.getSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a1e2d2a1185dfd15bacd5813f772afdca86cfcb4",
        "previous_commit": "ea977cda36a14ab445db42799bc78b98d81cc6e7",
        "date": 1459362276,
        "releases": {
            "previous": "a1e2d2a1185dfd15bacd5813f772afdca86cfcb4",
            "next": "a1e2d2a1185dfd15bacd5813f772afdca86cfcb4"
        },
        "commit_message": " #305 fix trim non quote add test for trim\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a1e2d2a1185dfd15bacd5813f772afdca86cfcb4": {
                "sfm/src/main/java/org/sfm/csv/parser/AbstractCsvCharConsumer.java": [
                    "private boolean org.sfm.csv.parser.AbstractCsvCharConsumer.isInQuote()",
                    "protected final boolean org.sfm.csv.parser.AbstractCsvCharConsumer.handleEndOfLineLF(int currentIndex, CellConsumer cellConsumer)",
                    "protected final boolean org.sfm.csv.parser.AbstractCsvCharConsumer.handleEndOfLineCR(int currentIndex, CellConsumer cellConsumer)",
                    "protected void org.sfm.csv.parser.AbstractCsvCharConsumer.quote(int currentIndex)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.ConfigurableCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableTrimCsvCharConsumer.java": [
                    "private int org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.firstNonSpaceChar(char[] charBuffer, int start, int length)",
                    "public boolean org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "protected final void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.quote(int currentIndex)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.StandardCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            },
            "ea977cda36a14ab445db42799bc78b98d81cc6e7": {
                "sfm/src/main/java/org/sfm/csv/parser/AbstractCsvCharConsumer.java": [
                    "private boolean org.sfm.csv.parser.AbstractCsvCharConsumer.isInQuote()",
                    "protected final boolean org.sfm.csv.parser.AbstractCsvCharConsumer.handleEndOfLineLF(int currentIndex, CellConsumer cellConsumer)",
                    "protected final boolean org.sfm.csv.parser.AbstractCsvCharConsumer.handleEndOfLineCR(int currentIndex, CellConsumer cellConsumer)",
                    "protected void org.sfm.csv.parser.AbstractCsvCharConsumer.quote(int currentIndex)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.ConfigurableCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableTrimCsvCharConsumer.java": [
                    "private int org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.firstNonSpaceChar(char[] charBuffer, int start, int length)",
                    "public boolean org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "protected final void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.quote(int currentIndex)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.StandardCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f33699c072b8e589c00311f947ad7dd583ed374b",
        "previous_commit": "5200bb582d350e1e1ed2b6b4cac87c95b669b27c",
        "date": 1539080963,
        "releases": {
            "previous": "f33699c072b8e589c00311f947ad7dd583ed374b",
            "next": "f33699c072b8e589c00311f947ad7dd583ed374b"
        },
        "commit_message": " #558 remove need to implement meaningless function\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f33699c072b8e589c00311f947ad7dd583ed374b": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorPropertyFinder.java": [
                    "public boolean org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.isSubProperty()",
                    "public Setter<? super O, ? super P> org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.getSetter()",
                    "public boolean org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.isConstructorProperty()",
                    "public void org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.lookForProperties(PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)",
                    "public Getter<? super O, ? extends P> org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.getGetter()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/KeyProperty.java": [
                    "public boolean org.simpleflatmapper.map.property.KeyProperty.test(PropertyMeta<?, ?> propertyMeta)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher, Object[] properties, TypeAffinityScorer typeAffinity, PropertyFinderProbe propertyFinderProbe)"
                ]
            },
            "5200bb582d350e1e1ed2b6b4cac87c95b669b27c": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorPropertyFinder.java": [
                    "public boolean org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.isSubProperty()",
                    "public Setter<? super O, ? super P> org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.getSetter()",
                    "public boolean org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.isConstructorProperty()",
                    "public void org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.lookForProperties(PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)",
                    "public Getter<? super O, ? extends P> org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.getGetter()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/KeyProperty.java": [
                    "public boolean org.simpleflatmapper.map.property.KeyProperty.test(PropertyMeta<?, ?> propertyMeta)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher, Object[] properties, TypeAffinityScorer typeAffinity, PropertyFinderProbe propertyFinderProbe)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2820ff89c94ef4971f04f6d0a57001c279280943",
        "previous_commit": "53d5746b71cc143d4a53676569f1007e88399e2c",
        "date": 1552584626,
        "releases": {
            "previous": "2820ff89c94ef4971f04f6d0a57001c279280943",
            "next": "2820ff89c94ef4971f04f6d0a57001c279280943"
        },
        "commit_message": " #616 hack to handle oracle jdbc special TIMESTAMPTZ\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2820ff89c94ef4971f04f6d0a57001c279280943": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaInstantConverter.java": [
                    "public Instant org.simpleflatmapper.converter.impl.time.ObjectToJavaInstantConverter.convert(Object in, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaLocalDateConverter.java": [
                    "public LocalDate org.simpleflatmapper.converter.impl.time.ObjectToJavaLocalDateConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaLocalDateTimeConverter.java": [
                    "public LocalDateTime org.simpleflatmapper.converter.impl.time.ObjectToJavaLocalDateTimeConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaLocalTimeConverter.java": [
                    "public LocalTime org.simpleflatmapper.converter.impl.time.ObjectToJavaLocalTimeConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaOffsetDateTimeConverter.java": [
                    "public OffsetDateTime org.simpleflatmapper.converter.impl.time.ObjectToJavaOffsetDateTimeConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaOffsetTimeConverter.java": [
                    "public OffsetTime org.simpleflatmapper.converter.impl.time.ObjectToJavaOffsetTimeConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaYearConverter.java": [
                    "public Year org.simpleflatmapper.converter.impl.time.ObjectToJavaYearConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaYearMonthConverter.java": [
                    "public YearMonth org.simpleflatmapper.converter.impl.time.ObjectToJavaYearMonthConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaZonedDateTimeConverter.java": [
                    "public ZonedDateTime org.simpleflatmapper.converter.impl.time.ObjectToJavaZonedDateTimeConverter.convert(Object o, Context context)"
                ]
            },
            "53d5746b71cc143d4a53676569f1007e88399e2c": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaInstantConverter.java": [
                    "public Instant org.simpleflatmapper.converter.impl.time.ObjectToJavaInstantConverter.convert(Object in, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaLocalDateConverter.java": [
                    "public LocalDate org.simpleflatmapper.converter.impl.time.ObjectToJavaLocalDateConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaLocalDateTimeConverter.java": [
                    "public LocalDateTime org.simpleflatmapper.converter.impl.time.ObjectToJavaLocalDateTimeConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaLocalTimeConverter.java": [
                    "public LocalTime org.simpleflatmapper.converter.impl.time.ObjectToJavaLocalTimeConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaOffsetDateTimeConverter.java": [
                    "public OffsetDateTime org.simpleflatmapper.converter.impl.time.ObjectToJavaOffsetDateTimeConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaOffsetTimeConverter.java": [
                    "public OffsetTime org.simpleflatmapper.converter.impl.time.ObjectToJavaOffsetTimeConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaYearConverter.java": [
                    "public Year org.simpleflatmapper.converter.impl.time.ObjectToJavaYearConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaYearMonthConverter.java": [
                    "public YearMonth org.simpleflatmapper.converter.impl.time.ObjectToJavaYearMonthConverter.convert(Object o, Context context)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/time/ObjectToJavaZonedDateTimeConverter.java": [
                    "public ZonedDateTime org.simpleflatmapper.converter.impl.time.ObjectToJavaZonedDateTimeConverter.convert(Object o, Context context)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2dc62a1991621ad1adaaeef3d4cc8fff0dccdbc6",
        "previous_commit": "6b0c4d11527390d9f63cf971cb5284b48b3b3743",
        "date": 1520632145,
        "releases": {
            "previous": "2dc62a1991621ad1adaaeef3d4cc8fff0dccdbc6",
            "next": "2dc62a1991621ad1adaaeef3d4cc8fff0dccdbc6"
        },
        "commit_message": "#495 change heuristic to prefer horizontal to vertical shift\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2dc62a1991621ad1adaaeef3d4cc8fff0dccdbc6": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/ExtendPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.ExtendPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final boolean allowSelfReference, final PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public String org.simpleflatmapper.reflect.meta.PropertyMatchingScore.toString()",
                    "public int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.compareTo(PropertyMatchingScore o)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.self(int numberOfProperties, String propName)",
                    "public static PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.newInstance(boolean selfScoreFullName)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculative()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(String property)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)"
                ]
            },
            "6b0c4d11527390d9f63cf971cb5284b48b3b3743": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/ExtendPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.ExtendPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final boolean allowSelfReference, final PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public String org.simpleflatmapper.reflect.meta.PropertyMatchingScore.toString()",
                    "public int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.compareTo(PropertyMatchingScore o)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.self(int numberOfProperties, String propName)",
                    "public static PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.newInstance(boolean selfScoreFullName)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.speculative()",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(String property)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e10fd14974b769bb301ea301d8f8159b48206d5c",
        "previous_commit": "c39c2e8c7b9257d063d442917d1812e66dee5157",
        "date": 1526660265,
        "releases": {
            "previous": "e10fd14974b769bb301ea301d8f8159b48206d5c",
            "next": "e10fd14974b769bb301ea301d8f8159b48206d5c"
        },
        "commit_message": " #515 handle back tick instead of quote for mysql\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e10fd14974b769bb301ea301d8f8159b48206d5c": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudFactory.java": [
                    "private static void org.simpleflatmapper.jdbc.impl.CrudFactory.appendTableName(StringBuilder sb, CrudMeta crudMeta)",
                    "private static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.CrudFactory.buildInsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> QueryPreparer<K> org.simpleflatmapper.jdbc.impl.CrudFactory.buildSelect(ClassMeta<K> keyTarget, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.CrudFactory.buildUpdate(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> void org.simpleflatmapper.jdbc.impl.CrudFactory.addWhereOnPrimaryKeys(CrudMeta crudMeta, StringBuilder sb)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudMeta.java": [
                    "private static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.getCrudMeta(Connection connection, String _table, ColumnDefinitionProvider<FieldMapperColumnDefinition<JdbcColumnKey>, JdbcColumnKey> columnDefinitionProvider, ResultSet resultSet, DatabaseMeta databaseMeta)",
                    "public static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.of(Connection connection, String table, ColumnDefinitionProvider<FieldMapperColumnDefinition<JdbcColumnKey>, JdbcColumnKey> columnDefinitionProvider)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PostgresqlCrudFactory.java": [
                    "public static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.PostgresqlCrudFactory.buildUpsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/named/NamedParameter.java": [
                    "private String org.simpleflatmapper.jdbc.named.NamedParameter.stripQuotes(String name)"
                ]
            },
            "c39c2e8c7b9257d063d442917d1812e66dee5157": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudFactory.java": [
                    "private static void org.simpleflatmapper.jdbc.impl.CrudFactory.appendTableName(StringBuilder sb, CrudMeta crudMeta)",
                    "private static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.CrudFactory.buildInsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> QueryPreparer<K> org.simpleflatmapper.jdbc.impl.CrudFactory.buildSelect(ClassMeta<K> keyTarget, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.CrudFactory.buildUpdate(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> void org.simpleflatmapper.jdbc.impl.CrudFactory.addWhereOnPrimaryKeys(CrudMeta crudMeta, StringBuilder sb)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudMeta.java": [
                    "private static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.getCrudMeta(Connection connection, String _table, ColumnDefinitionProvider<FieldMapperColumnDefinition<JdbcColumnKey>, JdbcColumnKey> columnDefinitionProvider, ResultSet resultSet)",
                    "public static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.of(Connection connection, String table, ColumnDefinitionProvider<FieldMapperColumnDefinition<JdbcColumnKey>, JdbcColumnKey> columnDefinitionProvider)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PostgresqlCrudFactory.java": [
                    "public static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.PostgresqlCrudFactory.buildUpsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/named/NamedParameter.java": [
                    "private String org.simpleflatmapper.jdbc.named.NamedParameter.stripQuotes(String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "62d327bcd84abd3320a7f1d7eaefea1067df5dd0",
        "previous_commit": "3ff41b270cc058c407f75066d54777ed614e2f29",
        "date": 1572416364,
        "releases": {
            "previous": "62d327bcd84abd3320a7f1d7eaefea1067df5dd0",
            "next": "62d327bcd84abd3320a7f1d7eaefea1067df5dd0"
        },
        "commit_message": "java6\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "62d327bcd84abd3320a7f1d7eaefea1067df5dd0": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayBooleanResultSetGetter.java": [
                    "public boolean[] org.simpleflatmapper.jdbc.impl.getter.ArrayBooleanResultSetGetter.get(ResultSet target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayByteResultSetGetter.java": [
                    "public byte[] org.simpleflatmapper.jdbc.impl.getter.ArrayByteResultSetGetter.get(ResultSet target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayCharacterResultSetGetter.java": [
                    "public char[] org.simpleflatmapper.jdbc.impl.getter.ArrayCharacterResultSetGetter.get(ResultSet target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayDoubleResultSetGetter.java": [
                    "public double[] org.simpleflatmapper.jdbc.impl.getter.ArrayDoubleResultSetGetter.get(ResultSet target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayFloatResultSetGetter.java": [
                    "public float[] org.simpleflatmapper.jdbc.impl.getter.ArrayFloatResultSetGetter.get(ResultSet target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayIntegerResultSetGetter.java": [
                    "public int[] org.simpleflatmapper.jdbc.impl.getter.ArrayIntegerResultSetGetter.get(ResultSet target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayLongResultSetGetter.java": [
                    "public long[] org.simpleflatmapper.jdbc.impl.getter.ArrayLongResultSetGetter.get(ResultSet target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayResultSetGetter.java": [
                    "public T[] org.simpleflatmapper.jdbc.impl.getter.ArrayResultSetGetter<T>.get(ResultSet target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayShortResultSetGetter.java": [
                    "public short[] org.simpleflatmapper.jdbc.impl.getter.ArrayShortResultSetGetter.get(ResultSet target)"
                ]
            },
            "3ff41b270cc058c407f75066d54777ed614e2f29": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayBooleanResultSetGetter.java": [
                    "public boolean[] org.simpleflatmapper.jdbc.impl.getter.ArrayBooleanResultSetGetter.get(ResultSet target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayByteResultSetGetter.java": [
                    "public byte[] org.simpleflatmapper.jdbc.impl.getter.ArrayByteResultSetGetter.get(ResultSet target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayCharacterResultSetGetter.java": [
                    "public char[] org.simpleflatmapper.jdbc.impl.getter.ArrayCharacterResultSetGetter.get(ResultSet target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayDoubleResultSetGetter.java": [
                    "public double[] org.simpleflatmapper.jdbc.impl.getter.ArrayDoubleResultSetGetter.get(ResultSet target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayFloatResultSetGetter.java": [
                    "public float[] org.simpleflatmapper.jdbc.impl.getter.ArrayFloatResultSetGetter.get(ResultSet target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayIntegerResultSetGetter.java": [
                    "public int[] org.simpleflatmapper.jdbc.impl.getter.ArrayIntegerResultSetGetter.get(ResultSet target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayLongResultSetGetter.java": [
                    "public long[] org.simpleflatmapper.jdbc.impl.getter.ArrayLongResultSetGetter.get(ResultSet target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayResultSetGetter.java": [
                    "public T[] org.simpleflatmapper.jdbc.impl.getter.ArrayResultSetGetter<T>.get(ResultSet target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayShortResultSetGetter.java": [
                    "public short[] org.simpleflatmapper.jdbc.impl.getter.ArrayShortResultSetGetter.get(ResultSet target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ec6da2693c82cfcb006c228a2fd98f533a8deb8e",
        "previous_commit": "b0cf6deb3f37c91216e8e26279e8845bc45e792c",
        "date": 1543967116,
        "releases": {
            "previous": "ec6da2693c82cfcb006c228a2fd98f533a8deb8e",
            "next": "ec6da2693c82cfcb006c228a2fd98f533a8deb8e"
        },
        "commit_message": "specialized parser with cell consumer\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ec6da2693c82cfcb006c228a2fd98f533a8deb8e": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/impl/AsmCharConsumerFactory.java": [
                    "public AbstractCharConsumer org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.newCharConsumer(TextFormat textFormat, CharBuffer charBuffer, CellPreProcessor cellTransformer, boolean specialisedCharConsumer)",
                    "public void org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.visitFieldInsn(int opcode, String owner, String name, String desc)",
                    "public void org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf)",
                    "public MethodVisitor org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.visitMethod(int access, String name, String desc, String signature, String[] exceptions)",
                    "public boolean org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.equals(Object o)",
                    "private static Constructor<? extends AbstractCharConsumer> org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.generateSpecialisedCharConsumer(final SpecialisationKey key)",
                    "public int org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.hashCode()"
                ],
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/CharConsumerFactory.java": [
                    "public static CharConsumerFactory org.simpleflatmapper.lightningcsv.parser.CharConsumerFactory.newInstance()"
                ],
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            },
            "b0cf6deb3f37c91216e8e26279e8845bc45e792c": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/impl/AsmCharConsumerFactory.java": [
                    "public AbstractCharConsumer org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.newCharConsumer(TextFormat textFormat, CharBuffer charBuffer, CellPreProcessor cellTransformer, boolean specialisedCharConsumer)",
                    "public void org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.visitFieldInsn(int opcode, String owner, String name, String desc)",
                    "public void org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.visitMethodInsn(int opcode, String owner, String name, String desc, boolean itf)",
                    "public MethodVisitor org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.visitMethod(int access, String name, String desc, String signature, String[] exceptions)",
                    "public boolean org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.equals(Object o)",
                    "private static Constructor<? extends AbstractCharConsumer> org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.generateSpecialisedCharConsumer(final SpecialisationKey key)",
                    "public int org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.hashCode()"
                ],
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/CharConsumerFactory.java": [
                    "public static CharConsumerFactory org.simpleflatmapper.lightningcsv.parser.CharConsumerFactory.newInstance()"
                ],
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "df8b477517356ff79563f88509f458acf54c68aa",
        "previous_commit": "4fcca7bd086df70816b08dcdee40f618443db5a6",
        "date": 1489957633,
        "releases": {
            "previous": "df8b477517356ff79563f88509f458acf54c68aa",
            "next": "df8b477517356ff79563f88509f458acf54c68aa"
        },
        "commit_message": " #425 use channels\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "df8b477517356ff79563f88509f458acf54c68aa": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "final <R> R stream(File file, Function<Stream<String[]>, R> function)",
                    "public final <R> R org.simpleflatmapper.csv.MapWithDSL<T>.stream(File file, Function<Stream<T>, R> function)",
                    "public static <R> R org.simpleflatmapper.csv.CsvParser.stream(File file, Function<Stream<String[]>, R> function)",
                    "public final <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvParser.parse(File file, CC cellConsumer)",
                    "public static <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvParser.parse(File file, CC cellConsumer)",
                    "protected static <R, D extends AbstractDSL<?>> R onReader(File file, D dsl, OnReaderFactory<R, ? super D> factory)",
                    "public static <H extends CheckedConsumer<String[]>> H org.simpleflatmapper.csv.CsvParser.forEach(File file, H consumer)",
                    "public final <H extends CheckedConsumer<String[]>> H org.simpleflatmapper.csv.CsvParser.forEach(File file, H consumer)",
                    "public final <H extends CheckedConsumer<T>> H org.simpleflatmapper.csv.MapWithDSL<T>.forEach(File file, H consumer)"
                ]
            },
            "4fcca7bd086df70816b08dcdee40f618443db5a6": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "final <R> R stream(File file, Function<Stream<String[]>, R> function)",
                    "public final <R> R org.simpleflatmapper.csv.MapWithDSL<T>.stream(File file, Function<Stream<T>, R> function)",
                    "public static <R> R org.simpleflatmapper.csv.CsvParser.stream(File file, Function<Stream<String[]>, R> function)",
                    "public final <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvParser.parse(File file, CC cellConsumer)",
                    "public static <CC extends CellConsumer> CC org.simpleflatmapper.csv.CsvParser.parse(File file, CC cellConsumer)",
                    "protected static <R, D extends AbstractDSL<?>> R onReader(File file, D dsl, OnReaderFactory<R, ? super D> factory)",
                    "public static <H extends CheckedConsumer<String[]>> H org.simpleflatmapper.csv.CsvParser.forEach(File file, H consumer)",
                    "public final <H extends CheckedConsumer<String[]>> H org.simpleflatmapper.csv.CsvParser.forEach(File file, H consumer)",
                    "public final <H extends CheckedConsumer<T>> H org.simpleflatmapper.csv.MapWithDSL<T>.forEach(File file, H consumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bd55e093bc92a300328ec4bb4d5ecb6c96c0d889",
        "previous_commit": "b1fb17e93b8904eb0d707904b6a18efb8b048966",
        "date": 1463296975,
        "releases": {
            "previous": "bd55e093bc92a300328ec4bb4d5ecb6c96c0d889",
            "next": "bd55e093bc92a300328ec4bb4d5ecb6c96c0d889"
        },
        "commit_message": " #315 Array.copyOf\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bd55e093bc92a300328ec4bb4d5ecb6c96c0d889": {
                "sfm/src/main/java/org/sfm/csv/CsvWriter.java": [
                    "private static <T> Tuple2<String, FieldMapperColumnDefinition<CsvColumnKey>>[] org.sfm.csv.CsvWriter<T>.toColumnDefinitions(String[] header)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/AbstractCsvCharConsumer.java": [
                    "protected final void org.sfm.csv.parser.AbstractCsvCharConsumer.newCellIfNotInQuote(int currentIndex, CellConsumer cellConsumer)",
                    "protected void org.sfm.csv.parser.AbstractCsvCharConsumer.newCell(int currentIndex, CellConsumer cellConsumer)",
                    "protected final boolean org.sfm.csv.parser.AbstractCsvCharConsumer.handleEndOfLineLF(int currentIndex, CellConsumer cellConsumer)",
                    "protected final boolean org.sfm.csv.parser.AbstractCsvCharConsumer.handleEndOfLineCR(int currentIndex, CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableTrimCsvCharConsumer.java": [
                    "protected void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.newCell(int currentIndex, CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ReaderCharBuffer.java": [
                    "public int org.sfm.csv.parser.ReaderCharBuffer.shiftBufferToMark()"
                ],
                "sfm/src/main/java/org/sfm/reflect/meta/AliasProviderFactory.java": [
                    "public static void org.sfm.reflect.meta.AliasProviderFactory.register(AliasProvider aliasProvider)"
                ]
            },
            "b1fb17e93b8904eb0d707904b6a18efb8b048966": {
                "sfm/src/main/java/org/sfm/csv/CsvWriter.java": [
                    "private static <T> Tuple2<String, FieldMapperColumnDefinition<CsvColumnKey>>[] org.sfm.csv.CsvWriter<T>.toColumnDefinitions(String[] header)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/AbstractCsvCharConsumer.java": [
                    "protected final void org.sfm.csv.parser.AbstractCsvCharConsumer.newCellIfNotInQuote(int currentIndex, CellConsumer cellConsumer)",
                    "protected void org.sfm.csv.parser.AbstractCsvCharConsumer.newCell(int currentIndex, CellConsumer cellConsumer)",
                    "protected final boolean org.sfm.csv.parser.AbstractCsvCharConsumer.handleEndOfLineLF(int currentIndex, CellConsumer cellConsumer)",
                    "protected final boolean org.sfm.csv.parser.AbstractCsvCharConsumer.handleEndOfLineCR(int currentIndex, CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableTrimCsvCharConsumer.java": [
                    "protected void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.newCell(int currentIndex, CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ReaderCharBuffer.java": [
                    "public int org.sfm.csv.parser.ReaderCharBuffer.shiftBufferToMark()"
                ],
                "sfm/src/main/java/org/sfm/reflect/meta/AliasProviderFactory.java": [
                    "public static void org.sfm.reflect.meta.AliasProviderFactory.register(AliasProvider aliasProvider)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ca44e928461e9a00f6442203299f8915d98cfdb8",
        "previous_commit": "8b8bbc44fbb928b7beae179e8d8285ecccffb77d",
        "date": 1487872716,
        "releases": {
            "previous": "ca44e928461e9a00f6442203299f8915d98cfdb8",
            "next": "ca44e928461e9a00f6442203299f8915d98cfdb8"
        },
        "commit_message": " #408 add AnnotationToProperty service with impl for Key\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ca44e928461e9a00f6442203299f8915d98cfdb8": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/FastTupleClassMeta.java": [
                    "private static <T, P> ObjectPropertyMeta<T, P> org.simpleflatmapper.reflect.meta.FastTupleClassMeta<T>.newPropertyMethod(String field, Method getter, Method setter, ReflectionService reflectionService, Type ownerType)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private List<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.listProperties(final ReflectionService reflectService, final Type targetType)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.method(Method method)",
                    "private <P> void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.register(String propertyName, Type type, ScoredGetter<T, P> getter, ScoredSetter<T, P> setter, Object[] defineProperties)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.field(Field field)",
                    "private <P> ConstructorPropertyMeta<T, P> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.constructorMeta(org.simpleflatmapper.reflect.Parameter param, String paramName, InstantiatorDefinition instantiatorDefinition)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TupleClassMeta.java": [
                    "private static <T, E> ConstructorPropertyMeta<T, E> org.simpleflatmapper.reflect.meta.TupleClassMeta<T>.newConstructorPropertyMeta(InstantiatorDefinition instantiatorDefinition, int i, ReflectionService reflectionService, Type type)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public SqlParameterSourceBuilder<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.add(JdbcColumnKey key, FieldMapperColumnDefinition<JdbcColumnKey> columnDefinition)"
                ]
            },
            "8b8bbc44fbb928b7beae179e8d8285ecccffb77d": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/FastTupleClassMeta.java": [
                    "private static <T, P> ObjectPropertyMeta<T, P> org.simpleflatmapper.reflect.meta.FastTupleClassMeta<T>.newPropertyMethod(String field, Method getter, Method setter, ReflectionService reflectionService, Type ownerType)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private List<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.listProperties(final ReflectionService reflectService, final Type targetType)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.method(Method method)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.field(Field field)",
                    "private <P> ConstructorPropertyMeta<T, P> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.constructorMeta(org.simpleflatmapper.reflect.Parameter param, String paramName, InstantiatorDefinition instantiatorDefinition)",
                    "private <P> void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.register(String propertyName, Type type, ScoredGetter<T, P> getter, ScoredSetter<T, P> setter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TupleClassMeta.java": [
                    "private static <T, E> ConstructorPropertyMeta<T, E> org.simpleflatmapper.reflect.meta.TupleClassMeta<T>.newConstructorPropertyMeta(InstantiatorDefinition instantiatorDefinition, int i, ReflectionService reflectionService, Type type)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public SqlParameterSourceBuilder<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.add(JdbcColumnKey key, FieldMapperColumnDefinition<JdbcColumnKey> columnDefinition)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7d4720e003869abf570176bcfa44f94e192f8cb2",
        "previous_commit": "cac2765c2cb332498a08057d0023783f45c2a313",
        "date": 1542867883,
        "releases": {
            "previous": "7d4720e003869abf570176bcfa44f94e192f8cb2",
            "next": "7d4720e003869abf570176bcfa44f94e192f8cb2"
        },
        "commit_message": "optimised csv mapper\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7d4720e003869abf570176bcfa44f94e192f8cb2": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRow.java": [
                    "public void org.simpleflatmapper.csv.CsvRow.addValue(int offset, int length)",
                    "public CharSequence org.simpleflatmapper.csv.CsvRow.getCharSequence(int i)",
                    "public String org.simpleflatmapper.csv.CsvRow.getString(int i)",
                    "public int org.simpleflatmapper.csv.CsvRow.getInt(int i)",
                    "public void org.simpleflatmapper.csv.CsvRow.reset()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRowSet.java": [
                    "public void org.simpleflatmapper.csv.CsvRowSet.end()",
                    "public boolean org.simpleflatmapper.csv.CsvRowSet.endOfRow()",
                    "public void org.simpleflatmapper.csv.CsvRowSet.newCell(char[] chars, int offset, int length)"
                ]
            },
            "cac2765c2cb332498a08057d0023783f45c2a313": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRow.java": [
                    "public void org.simpleflatmapper.csv.CsvRow.addValue(int offset, int length)",
                    "public CharSequence org.simpleflatmapper.csv.CsvRow.getCharSequence(int i)",
                    "public String org.simpleflatmapper.csv.CsvRow.getString(int i)",
                    "public int org.simpleflatmapper.csv.CsvRow.getInt(int i)",
                    "public void org.simpleflatmapper.csv.CsvRow.reset()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRowSet.java": [
                    "public void org.simpleflatmapper.csv.CsvRowSet.end()",
                    "public boolean org.simpleflatmapper.csv.CsvRowSet.endOfRow()",
                    "public void org.simpleflatmapper.csv.CsvRowSet.newCell(char[] chars, int offset, int length)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e1ec132ff3283b13a57990f46134c8da65bee265",
        "previous_commit": "8d4f66afb06c963c9ce4360e7c7f0ac8336cce7a",
        "date": 1473429490,
        "releases": {
            "previous": "e1ec132ff3283b13a57990f46134c8da65bee265",
            "next": "e1ec132ff3283b13a57990f46134c8da65bee265"
        },
        "commit_message": "more test, refactor csv consumer\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e1ec132ff3283b13a57990f46134c8da65bee265": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CsvCharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CsvCharConsumer.finish(CellConsumer cellConsumer)",
                    "public boolean org.simpleflatmapper.csv.parser.CsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.csv.parser.CsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CsvCharConsumer.refillBuffer()"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/ErrorDoc.java": [
                    "public static String org.simpleflatmapper.util.ErrorDoc.toUrl(String errorCode)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/SupplierHelper.java": [
                    "public static boolean org.simpleflatmapper.util.SupplierHelper.isSupplierOf(Object potentialSupplier, Class<?> supplyClass)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static MapEntryTypes org.simpleflatmapper.util.TypeHelper.getKeyValueTypeOfMap(Type outType)",
                    "public static Type org.simpleflatmapper.util.TypeHelper.getComponentTypeOfListOrArray(Type outType)"
                ]
            },
            "8d4f66afb06c963c9ce4360e7c7f0ac8336cce7a": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CsvCharConsumer.java": [],
                "sfm-util/src/main/java/org/simpleflatmapper/util/ErrorDoc.java": [
                    "public static String org.simpleflatmapper.util.ErrorDoc.toUrl(String errorCode)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/SupplierHelper.java": [
                    "public static boolean org.simpleflatmapper.util.SupplierHelper.isSupplierOf(Object potentialSupplier, Class<?> supplyClass)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static MapEntryTypes org.simpleflatmapper.util.TypeHelper.getKeyValueTypeOfMap(Type outType)",
                    "public static Type org.simpleflatmapper.util.TypeHelper.getComponentTypeOfListOrArray(Type outType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c186b42143a6cb5cfe971ef9e3f2b32f6c3c26f4",
        "previous_commit": "12a30f60ac9f798489491d3a75603048ee68972f",
        "date": 1455993896,
        "releases": {
            "previous": "c186b42143a6cb5cfe971ef9e3f2b32f6c3c26f4",
            "next": "c186b42143a6cb5cfe971ef9e3f2b32f6c3c26f4"
        },
        "commit_message": " #289 make fieldkay abstract instead of interface\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c186b42143a6cb5cfe971ef9e3f2b32f6c3c26f4": {
                "sfm-datastax/src/main/java/org/sfm/datastax/DatastaxColumnKey.java": [
                    "public boolean org.sfm.datastax.DatastaxColumnKey.equals(Object o)",
                    "public DataType org.sfm.datastax.DatastaxColumnKey.getDataType()",
                    "public String org.sfm.datastax.DatastaxColumnKey.toString()",
                    "public int org.sfm.datastax.DatastaxColumnKey.hashCode()",
                    "public Class<?>[] org.sfm.datastax.DatastaxColumnKey.getAffinities()",
                    "public DatastaxColumnKey org.sfm.datastax.DatastaxColumnKey.alias(String alias)"
                ],
                "sfm-jooq/src/main/java/org/sfm/jooq/JooqFieldKey.java": [
                    "public JooqFieldKey org.sfm.jooq.JooqFieldKey.alias(String alias)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/JdbcColumnKey.java": [
                    "public int org.sfm.jdbc.JdbcColumnKey.hashCode()"
                ]
            },
            "12a30f60ac9f798489491d3a75603048ee68972f": {
                "sfm-datastax/src/main/java/org/sfm/datastax/DatastaxColumnKey.java": [
                    "public boolean org.sfm.datastax.DatastaxColumnKey.equals(Object o)",
                    "public DataType org.sfm.datastax.DatastaxColumnKey.getDataType()",
                    "public String org.sfm.datastax.DatastaxColumnKey.toString()",
                    "public int org.sfm.datastax.DatastaxColumnKey.hashCode()",
                    "public Class<?>[] org.sfm.datastax.DatastaxColumnKey.getAffinities()",
                    "public DatastaxColumnKey org.sfm.datastax.DatastaxColumnKey.alias(String alias)"
                ],
                "sfm-jooq/src/main/java/org/sfm/jooq/JooqFieldKey.java": [
                    "public JooqFieldKey org.sfm.jooq.JooqFieldKey.alias(String alias)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/JdbcColumnKey.java": [
                    "public int org.sfm.jdbc.JdbcColumnKey.hashCode()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f96449376531b8572bc94e70d7393250891abac9",
        "previous_commit": "86a92a5c5d712c922ccbcdff26dc4bea9aecefc4",
        "date": 1456093863,
        "releases": {
            "previous": "f96449376531b8572bc94e70d7393250891abac9",
            "next": "f96449376531b8572bc94e70d7393250891abac9"
        },
        "commit_message": "#296 unfold one prop objects\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f96449376531b8572bc94e70d7393250891abac9": {
                "sfm/src/main/java/org/sfm/csv/impl/CellSetterFactory.java": [
                    "public <T, P> CellSetter<T> org.sfm.csv.impl.CellSetterFactory.getCellSetter(PropertyMeta<T, P> prop, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)",
                    "public <T, P> DelayedCellSetterFactory<T, P> org.sfm.csv.impl.CellSetterFactory.getDelayedCellSetter(PropertyMeta<T, P> prop, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm/src/main/java/org/sfm/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.sfm.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/PreparedStatementMapperBuilder.java": [
                    "public MultiIndexFieldMapper<T>[] org.sfm.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()",
                    "private <P> MultiIndexFieldMapper<T> org.sfm.jdbc.PreparedStatementMapperBuilder<T>.newFieldMapper(PropertyMapping<T, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "private <P, C> MultiIndexFieldMapper<T> org.sfm.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public PreparedStatementIndexSetter org.sfm.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg, Type propertyType)",
                    "public <P> Setter<PreparedStatement, P> org.sfm.jdbc.impl.PreparedStatementSetterFactory.getSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ]
            },
            "86a92a5c5d712c922ccbcdff26dc4bea9aecefc4": {
                "sfm/src/main/java/org/sfm/csv/impl/CellSetterFactory.java": [
                    "public <T, P> CellSetter<T> org.sfm.csv.impl.CellSetterFactory.getCellSetter(PropertyMeta<T, P> prop, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)",
                    "public <T, P> DelayedCellSetterFactory<T, P> org.sfm.csv.impl.CellSetterFactory.getDelayedCellSetter(PropertyMeta<T, P> prop, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm/src/main/java/org/sfm/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.sfm.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/PreparedStatementMapperBuilder.java": [
                    "public MultiIndexFieldMapper<T>[] org.sfm.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()",
                    "private <P> MultiIndexFieldMapper<T> org.sfm.jdbc.PreparedStatementMapperBuilder<T>.newFieldMapper(PropertyMapping<T, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "private <P, C> MultiIndexFieldMapper<T> org.sfm.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <P> Setter<PreparedStatement, P> org.sfm.jdbc.impl.PreparedStatementSetterFactory.getSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)",
                    "public PreparedStatementIndexSetter org.sfm.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8879f62e1bfebeb39d3cb2e8522961d1df53057a",
        "previous_commit": "4af8c2cd854173fd7bf1777385d200a26628e5cb",
        "date": 1496941274,
        "releases": {
            "previous": "8879f62e1bfebeb39d3cb2e8522961d1df53057a",
            "next": "8879f62e1bfebeb39d3cb2e8522961d1df53057a"
        },
        "commit_message": "#445 add null check before calling builder\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8879f62e1bfebeb39d3cb2e8522961d1df53057a": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "private <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.builderBiInstantiator(BuilderInstantiatorDefinition instantiatorDefinition,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<org.simpleflatmapper.reflect.Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled)",
                    "private <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.builderInstantiator(BuilderInstantiatorDefinition instantiatorDefinition,\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<org.simpleflatmapper.reflect.Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.asm.AsmFactory.createInstantiator(final Class<S> source, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstanceBuilder(Class<?> s1, Class<?> s2, BuilderInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Map<Parameter, Method> setters)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstance(Class<?> s1, Class<?> s2, ExecutableInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Parameter[] parameters)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorBuilder.java": [
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendNewInstanceBuilderOnMethod(Class<?> sourceClass, ExecutableInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Parameter[] parameters)",
                    "public static <S> byte[] org.simpleflatmapper.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass, final BuilderInstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)",
                    "public static <S> byte[] org.simpleflatmapper.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass, final ExecutableInstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)"
                ]
            },
            "4af8c2cd854173fd7bf1777385d200a26628e5cb": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "private <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.builderBiInstantiator(BuilderInstantiatorDefinition instantiatorDefinition,\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<org.simpleflatmapper.reflect.Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled)",
                    "private <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.builderInstantiator(BuilderInstantiatorDefinition instantiatorDefinition,\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<org.simpleflatmapper.reflect.Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.asm.AsmFactory.createInstantiator(final Class<S> source, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstanceBuilder(Class<?> s1, Class<?> s2, BuilderInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Map<Parameter, Method> setters)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstance(Class<?> s1, Class<?> s2, ExecutableInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Parameter[] parameters)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorBuilder.java": [
                    "public static <S> byte[] org.simpleflatmapper.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass, final Instantiator<Void, ?> builderInstantiator, final BuilderInstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)",
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendNewInstanceBuilder(Class<?> sourceClass, ExecutableInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Parameter[] parameters)",
                    "public static <S> byte[] org.simpleflatmapper.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass, final ExecutableInstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "31f45e93c845f561fcdd803655ed21831c0b7c2c",
        "previous_commit": "f1205250a75ded07931ca3c573c786de88df8004",
        "date": 1468581117,
        "releases": {
            "previous": "31f45e93c845f561fcdd803655ed21831c0b7c2c",
            "next": "31f45e93c845f561fcdd803655ed21831c0b7c2c"
        },
        "commit_message": " #328 support 2.1 and 3.1 drivers\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "31f45e93c845f561fcdd803655ed21831c0b7c2c": {
                "sfm-datastax/src/main/java/org/sfm/datastax/DatastaxColumnKey.java": [
                    "public Class<?>[] org.sfm.datastax.DatastaxColumnKey.getAffinities()"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)",
                    "public <E extends Enum<E>> Getter<GettableByIndexData, E> org.sfm.datastax.impl.RowGetterFactory.enumGetter(DatastaxColumnKey key, Class<?> enumClass)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/SettableDataSetterFactory.java": [
                    "private boolean org.sfm.datastax.impl.SettableDataSetterFactory.areSame(DataType dtKeyType, Type element0)",
                    "public <P> Setter<SettableByIndexData, P> org.sfm.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey, ? extends ColumnDefinition<DatastaxColumnKey, ?>> arg)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxDateGetter.java": [
                    "public Date org.sfm.datastax.impl.getter.DatastaxDateGetter.get(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/setter/DateSettableDataSetter.java": [
                    "public void org.sfm.datastax.impl.setter.DateSettableDataSetter.set(SettableByIndexData target, Date value)"
                ]
            },
            "f1205250a75ded07931ca3c573c786de88df8004": {
                "sfm-datastax/src/main/java/org/sfm/datastax/DatastaxColumnKey.java": [
                    "public Class<?>[] org.sfm.datastax.DatastaxColumnKey.getAffinities()"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)",
                    "public <E extends Enum<E>> Getter<GettableByIndexData, E> org.sfm.datastax.impl.RowGetterFactory.enumGetter(DatastaxColumnKey key, Class<?> enumClass)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/SettableDataSetterFactory.java": [
                    "private boolean org.sfm.datastax.impl.SettableDataSetterFactory.areSame(DataType dtKeyType, Type element0)",
                    "public <P> Setter<SettableByIndexData, P> org.sfm.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey, ? extends ColumnDefinition<DatastaxColumnKey, ?>> arg)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxDateGetter.java": [
                    "public Date org.sfm.datastax.impl.getter.DatastaxDateGetter.get(GettableByIndexData target)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/setter/DateSettableDataSetter.java": [
                    "public void org.sfm.datastax.impl.setter.DateSettableDataSetter.set(SettableByIndexData target, Date value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c39c2e8c7b9257d063d442917d1812e66dee5157",
        "previous_commit": "fbdad426940ef3a1de1cdeb53d67644f2847ffe8",
        "date": 1526658868,
        "releases": {
            "previous": "c39c2e8c7b9257d063d442917d1812e66dee5157",
            "next": "c39c2e8c7b9257d063d442917d1812e66dee5157"
        },
        "commit_message": " #515 put table name, column name in quotes\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c39c2e8c7b9257d063d442917d1812e66dee5157": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudFactory.java": [
                    "private static void org.simpleflatmapper.jdbc.impl.CrudFactory.appendTableName(StringBuilder sb, CrudMeta crudMeta)",
                    "private static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.CrudFactory.buildInsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> QueryPreparer<K> org.simpleflatmapper.jdbc.impl.CrudFactory.buildSelect(ClassMeta<K> keyTarget, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.CrudFactory.buildUpdate(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> void org.simpleflatmapper.jdbc.impl.CrudFactory.addWhereOnPrimaryKeys(CrudMeta crudMeta, StringBuilder sb)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudMeta.java": [
                    "public static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.of(Connection connection, String table, ColumnDefinitionProvider<FieldMapperColumnDefinition<JdbcColumnKey>, JdbcColumnKey> columnDefinitionProvider)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PostgresqlCrudFactory.java": [
                    "public static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.PostgresqlCrudFactory.buildUpsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ]
            },
            "fbdad426940ef3a1de1cdeb53d67644f2847ffe8": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudFactory.java": [
                    "private static void org.simpleflatmapper.jdbc.impl.CrudFactory.appendTableName(StringBuilder sb, CrudMeta crudMeta)",
                    "private static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.CrudFactory.buildInsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> QueryPreparer<K> org.simpleflatmapper.jdbc.impl.CrudFactory.buildSelect(ClassMeta<K> keyTarget, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.CrudFactory.buildUpdate(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> void org.simpleflatmapper.jdbc.impl.CrudFactory.addWhereOnPrimaryKeys(CrudMeta crudMeta, StringBuilder sb)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudMeta.java": [
                    "public static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.of(Connection connection, String table, ColumnDefinitionProvider<FieldMapperColumnDefinition<JdbcColumnKey>, JdbcColumnKey> columnDefinitionProvider)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PostgresqlCrudFactory.java": [
                    "public static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.PostgresqlCrudFactory.buildUpsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "27493456464e3345a33cf4125712c78f757c465d",
        "previous_commit": "ac4d35a8a88ca9d7a0fdcc0706a3837c392c7d8d",
        "date": 1482422534,
        "releases": {
            "previous": "27493456464e3345a33cf4125712c78f757c465d",
            "next": "27493456464e3345a33cf4125712c78f757c465d"
        },
        "commit_message": " #385 support cosuming yaml comments as cell\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "27493456464e3345a33cf4125712c78f757c465d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private YamlCellPreProcessor.YamlCellConsumer org.simpleflatmapper.csv.DSLYamlComment.newYamlCellConsumer(CheckedConsumer<String[]> rowConsumer, CheckedConsumer<String> commentConsumer)",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlCommentsAsCell()",
                    "public CellConsumer org.simpleflatmapper.csv.DSL.apply(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/YamlCellPreProcessor.java": [
                    "public boolean org.simpleflatmapper.csv.parser.YamlCellPreProcessor.endOfRow()",
                    "public void org.simpleflatmapper.csv.parser.YamlCellPreProcessor.newCell(char[] chars, int start, int end, int state)",
                    "public void org.simpleflatmapper.csv.parser.YamlCellPreProcessor.end()"
                ]
            },
            "ac4d35a8a88ca9d7a0fdcc0706a3837c392c7d8d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private YamlCellPreProcessor.YamlCellConsumer org.simpleflatmapper.csv.DSLYamlComment.newYamlCellConsumer(CheckedConsumer<String[]> rowConsumer, CheckedConsumer<String> commentConsumer)",
                    "public CellConsumer org.simpleflatmapper.csv.DSL.apply(CellConsumer cellConsumer)",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlComments()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/YamlCellPreProcessor.java": [
                    "public boolean org.simpleflatmapper.csv.parser.YamlCellPreProcessor.endOfRow()",
                    "public void org.simpleflatmapper.csv.parser.YamlCellPreProcessor.newCell(char[] chars, int start, int end, int state)",
                    "public void org.simpleflatmapper.csv.parser.YamlCellPreProcessor.end()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "09948d95b918d7836a85af21ff013d5cd9e7c48b",
        "previous_commit": "2cfd20e24e7428d4f283344379b02d404950aae4",
        "date": 1459269406,
        "releases": {
            "previous": "09948d95b918d7836a85af21ff013d5cd9e7c48b",
            "next": "09948d95b918d7836a85af21ff013d5cd9e7c48b"
        },
        "commit_message": "#306 support direct string reading without going through a stringreader\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "09948d95b918d7836a85af21ff013d5cd9e7c48b": {
                "sfm/src/main/java/org/sfm/csv/CsvParser.java": [
                    "public final <H extends RowHandler<T>> H org.sfm.csv.MapWithDSL<T>.forEach(Reader reader, H rowHandler)",
                    "public CsvReader org.sfm.csv.CsvParser.reader(Reader reader)",
                    "public <CC extends CellConsumer> CC org.sfm.csv.CsvParser.parse(Reader reader, CC cellConsumer)",
                    "public static <CC extends CellConsumer> CC org.sfm.csv.CsvParser.parse(Reader reader, CC cellConsumer)",
                    "public static CsvReader org.sfm.csv.CsvParser.reader(Reader reader)"
                ],
                "sfm/src/main/java/org/sfm/csv/CsvReader.java": [
                    "public boolean org.sfm.csv.CsvReader.parseRow(CellConsumer cellConsumer)",
                    "public <CC extends CellConsumer> CC org.sfm.csv.CsvReader.parseAll(CC cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/CharBuffer.java": []
            },
            "2cfd20e24e7428d4f283344379b02d404950aae4": {
                "sfm/src/main/java/org/sfm/csv/CsvParser.java": [
                    "public final <H extends RowHandler<T>> H org.sfm.csv.MapWithDSL<T>.forEach(Reader reader, H rowHandler)",
                    "public CsvReader org.sfm.csv.CsvParser.reader(Reader reader)",
                    "public <CC extends CellConsumer> CC org.sfm.csv.CsvParser.parse(Reader reader, CC cellConsumer)",
                    "public static <CC extends CellConsumer> CC org.sfm.csv.CsvParser.parse(Reader reader, CC cellConsumer)",
                    "public static CsvReader org.sfm.csv.CsvParser.reader(Reader reader)"
                ],
                "sfm/src/main/java/org/sfm/csv/CsvReader.java": [
                    "public boolean org.sfm.csv.CsvReader.parseRow(CellConsumer cellConsumer)",
                    "public <CC extends CellConsumer> CC org.sfm.csv.CsvReader.parseAll(CC cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/CharBuffer.java": [
                    "public int org.sfm.csv.parser.CharBuffer.shiftBufferToMark()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "06c613a9cd609fe6920b9c813000b5a0fa2a7200",
        "previous_commit": "4f10c3ccdbf7d080246bc40d0002ec779e17da56",
        "date": 1573314531,
        "releases": {
            "previous": "06c613a9cd609fe6920b9c813000b5a0fa2a7200",
            "next": "06c613a9cd609fe6920b9c813000b5a0fa2a7200"
        },
        "commit_message": "#691 can match supporting singular to plural\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "06c613a9cd609fe6920b9c813000b5a0fa2a7200": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.partialMatch(final CharSequence property, boolean tryPlural)",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matches(final CharSequence property)",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matches(final CharSequence property, boolean tryPlural)",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.partialMatch(final CharSequence property)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructorSpeculative(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)"
                ]
            },
            "4f10c3ccdbf7d080246bc40d0002ec779e17da56": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matches(final CharSequence property)",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.partialMatch(final CharSequence property)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructorSpeculative(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a8aeba957db4a4216f3c7c8e993ea13ae97ecb23",
        "previous_commit": "b9ce829610bd30becb6140714da4ae7ddc7ee8c2",
        "date": 1522650327,
        "releases": {
            "previous": "a8aeba957db4a4216f3c7c8e993ea13ae97ecb23",
            "next": "a8aeba957db4a4216f3c7c8e993ea13ae97ecb23"
        },
        "commit_message": "specialised char consumer\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a8aeba957db4a4216f3c7c8e993ea13ae97ecb23": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/Rfc4180CharConsumer.java": [
                    "private char org.simpleflatmapper.csv.parser.Rfc4180CharConsumer.separatorChar()",
                    "private boolean org.simpleflatmapper.csv.parser.Rfc4180CharConsumer.yamlComment()",
                    "private char org.simpleflatmapper.csv.parser.Rfc4180CharConsumer.escapeChar()",
                    "private char org.simpleflatmapper.csv.parser.Rfc4180CharConsumer.quoteChar()",
                    "private boolean org.simpleflatmapper.csv.parser.Rfc4180CharConsumer.ignoreLeadingSpace()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "public final void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.newCell(char[] chars, int start, int end, CellConsumer cellConsumer, int state)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/YamlCellPreProcessor.java": [
                    "public void org.simpleflatmapper.csv.parser.YamlCellPreProcessor.newCell(char[] chars, int start, int end, int state)"
                ]
            },
            "b9ce829610bd30becb6140714da4ae7ddc7ee8c2": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/Rfc4180CharConsumer.java": [
                    "private boolean org.simpleflatmapper.csv.parser.ConfigurableCharConsumer.yamlComment()",
                    "private char org.simpleflatmapper.csv.parser.ConfigurableCharConsumer.separatorChar()",
                    "private char org.simpleflatmapper.csv.parser.ConfigurableCharConsumer.quoteChar()",
                    "private boolean org.simpleflatmapper.csv.parser.ConfigurableCharConsumer.ignoreLeadingSpace()",
                    "private char org.simpleflatmapper.csv.parser.ConfigurableCharConsumer.escapeChar()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "public final void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.newCell(char[] chars, int start, int end, CellConsumer cellConsumer, int state)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/YamlCellPreProcessor.java": [
                    "public void org.simpleflatmapper.csv.parser.YamlCellPreProcessor.newCell(char[] chars, int start, int end, int state)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "058ce7910c1c45f53faea713a05feb6842f2d527",
        "previous_commit": "b061727142a51ca99fad89578431919b6922e3ae",
        "date": 1473369943,
        "releases": {
            "previous": "058ce7910c1c45f53faea713a05feb6842f2d527",
            "next": "058ce7910c1c45f53faea713a05feb6842f2d527"
        },
        "commit_message": "add test for property\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "058ce7910c1c45f53faea713a05feb6842f2d527": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/FieldMapperProperty.java": [
                    "public String org.simpleflatmapper.map.property.FieldMapperProperty.toString()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/GetterFactoryProperty.java": [
                    "public String org.simpleflatmapper.map.property.GetterFactoryProperty.toString()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/GetterProperty.java": [
                    "public String org.simpleflatmapper.map.property.GetterProperty.toString()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/KeyProperty.java": [
                    "public String org.simpleflatmapper.map.property.KeyProperty.toString()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/SetterFactoryProperty.java": [
                    "public String org.simpleflatmapper.map.property.SetterFactoryProperty.toString()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/SetterProperty.java": [
                    "public String org.simpleflatmapper.map.property.SetterProperty.toString()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/TimeZoneProperty.java": [
                    "public String org.simpleflatmapper.map.property.TimeZoneProperty.toString()"
                ]
            },
            "b061727142a51ca99fad89578431919b6922e3ae": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/FieldMapperProperty.java": [
                    "public String org.simpleflatmapper.map.property.FieldMapperProperty.toString()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/GetterFactoryProperty.java": [
                    "public String org.simpleflatmapper.map.property.GetterFactoryProperty.toString()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/GetterProperty.java": [
                    "public String org.simpleflatmapper.map.property.GetterProperty.toString()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/KeyProperty.java": [
                    "public String org.simpleflatmapper.map.property.KeyProperty.toString()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/SetterFactoryProperty.java": [
                    "public String org.simpleflatmapper.map.property.SetterFactoryProperty.toString()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/SetterProperty.java": [
                    "public String org.simpleflatmapper.map.property.SetterProperty.toString()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/TimeZoneProperty.java": [
                    "public String org.simpleflatmapper.map.property.TimeZoneProperty.toString()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "23c6edcf7fe331cfa6967b9b577385f9af21f3e4",
        "previous_commit": "d7d330a26529b333435c039741da27aaceb4f4c2",
        "date": 1473198573,
        "releases": {
            "previous": "23c6edcf7fe331cfa6967b9b577385f9af21f3e4",
            "next": "23c6edcf7fe331cfa6967b9b577385f9af21f3e4"
        },
        "commit_message": "refactor, fixes, more test\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "23c6edcf7fe331cfa6967b9b577385f9af21f3e4": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperFactory.java": [
                    "public <T> PreparedStatementMapperBuilder<T> org.simpleflatmapper.jdbc.JdbcMapperFactory.buildFrom(final ClassMeta<T> classMeta)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "private <P, C> IndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.indexedSetterFactory(PropertyMapping<C, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JDBCTypeHelper.java": [
                    "public static Class<?> org.simpleflatmapper.jdbc.impl.JDBCTypeHelper.toJavaType(int sqlType, Type propertyType)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <P> Setter<PreparedStatement, P> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/ParamNameDeductor.java": [
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.markValue(Type type)",
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.neutralValue(Type type, boolean allowNull)"
                ]
            },
            "d7d330a26529b333435c039741da27aaceb4f4c2": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperFactory.java": [
                    "public <T> PreparedStatementMapperBuilder<T> org.simpleflatmapper.jdbc.JdbcMapperFactory.buildFrom(final ClassMeta<T> classMeta)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "private <P, C> IndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.indexedSetterFactory(PropertyMapping<C, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JDBCTypeHelper.java": [
                    "public static Class<?> org.simpleflatmapper.jdbc.impl.JDBCTypeHelper.toJavaType(int sqlType, Type propertyType)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <P> Setter<PreparedStatement, P> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/ParamNameDeductor.java": [
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.markValue(Type type)",
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.neutralValue(Type type, boolean allowNull)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4f6f6dcde20752e3aae98396559743bc05ca747b",
        "previous_commit": "a71312190565b569177bf092bd51bfe29d8e82aa",
        "date": 1510671478,
        "releases": {
            "previous": "4f6f6dcde20752e3aae98396559743bc05ca747b",
            "next": "4f6f6dcde20752e3aae98396559743bc05ca747b"
        },
        "commit_message": "move char to unescape processor\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4f6f6dcde20752e3aae98396559743bc05ca747b": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "protected CellPreProcessor getUnescapeCellTransformer(TextFormat textFormat)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/writer/CsvCellWriter.java": [
                    "public CsvCellWriter org.simpleflatmapper.csv.impl.writer.CsvCellWriter.alwaysEscape(boolean alwaysEscape)",
                    "private void org.simpleflatmapper.csv.impl.writer.CsvCellWriter.escapeCharSequence(CharSequence sequence, Appendable appendable)",
                    "public CsvCellWriter org.simpleflatmapper.csv.impl.writer.CsvCellWriter.separator(char separator)",
                    "public CsvCellWriter org.simpleflatmapper.csv.impl.writer.CsvCellWriter.quote(char quote)",
                    "public CsvCellWriter org.simpleflatmapper.csv.impl.writer.CsvCellWriter.endOfLine(String endOfLine)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, int start, int end, CellConsumer cellConsumer)"
                ]
            },
            "a71312190565b569177bf092bd51bfe29d8e82aa": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "protected CellPreProcessor getUnescapeCellTransformer(TextFormat textFormat)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/writer/CsvCellWriter.java": [
                    "public CsvCellWriter org.simpleflatmapper.csv.impl.writer.CsvCellWriter.alwaysEscape(boolean alwaysEscape)",
                    "private void org.simpleflatmapper.csv.impl.writer.CsvCellWriter.escapeCharSequence(CharSequence sequence, Appendable appendable)",
                    "public CsvCellWriter org.simpleflatmapper.csv.impl.writer.CsvCellWriter.separator(char separator)",
                    "public CsvCellWriter org.simpleflatmapper.csv.impl.writer.CsvCellWriter.quote(char quote)",
                    "public CsvCellWriter org.simpleflatmapper.csv.impl.writer.CsvCellWriter.endOfLine(String endOfLine)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, int start, int end, CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "989766fbe61ee613665d053eb924b779c289df54",
        "previous_commit": "b46c11409a4140d4687bfc9e7830a042a52d6514",
        "date": 1470778649,
        "releases": {
            "previous": "989766fbe61ee613665d053eb924b779c289df54",
            "next": "989766fbe61ee613665d053eb924b779c289df54"
        },
        "commit_message": "use service loader for AliasProvider\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "989766fbe61ee613665d053eb924b779c289df54": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/mapping/DatastaxAliasProvider.java": [
                    "public String org.simpleflatmapper.datastax.impl.mapping.DatastaxAliasProvider.getAliasForMethod(Method method)",
                    "public String org.simpleflatmapper.datastax.impl.mapping.DatastaxAliasProvider.getAliasForField(Field field)",
                    "public Table org.simpleflatmapper.datastax.impl.mapping.DatastaxAliasProvider.getTable(Class<?> target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JpaAliasProvider.java": [
                    "public String org.simpleflatmapper.jdbc.impl.JpaAliasProvider.getAliasForField(Field field)",
                    "public Table org.simpleflatmapper.jdbc.impl.JpaAliasProvider.getTable(Class<?> target)",
                    "public String org.simpleflatmapper.jdbc.impl.JpaAliasProvider.getAliasForMethod(Method method)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/SizeAdjusterBatchQueryExecutor.java": [
                    "public void org.simpleflatmapper.jdbc.impl.SizeAdjusterBatchQueryExecutor<T>.insert(Connection connection, Collection<T> values, RowHandler<PreparedStatement> postExecute)"
                ]
            },
            "b46c11409a4140d4687bfc9e7830a042a52d6514": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/mapping/DatastaxAliasProvider.java": [
                    "public String org.simpleflatmapper.datastax.impl.mapping.DatastaxAliasProvider.getAliasForMethod(Method method)",
                    "public String org.simpleflatmapper.datastax.impl.mapping.DatastaxAliasProvider.getAliasForField(Field field)",
                    "public Table org.simpleflatmapper.datastax.impl.mapping.DatastaxAliasProvider.getTable(Class<?> target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JpaAliasProvider.java": [
                    "public String org.simpleflatmapper.jdbc.impl.JpaAliasProvider.getAliasForField(Field field)",
                    "public Table org.simpleflatmapper.jdbc.impl.JpaAliasProvider.getTable(Class<?> target)",
                    "public String org.simpleflatmapper.jdbc.impl.JpaAliasProvider.getAliasForMethod(Method method)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/SizeAdjusterBatchQueryExecutor.java": [
                    "public void org.simpleflatmapper.jdbc.impl.SizeAdjusterBatchQueryExecutor<T>.insert(Connection connection, Collection<T> values, RowHandler<PreparedStatement> postExecute)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ebf111348701c1dcaa04e112971dec9f79834319",
        "previous_commit": "8aa0b1b17f2d9ae22ff358de22af58f9276efa04",
        "date": 1470860265,
        "releases": {
            "previous": "ebf111348701c1dcaa04e112971dec9f79834319",
            "next": "ebf111348701c1dcaa04e112971dec9f79834319"
        },
        "commit_message": "better types, more test\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ebf111348701c1dcaa04e112971dec9f79834319": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "private <I, P> void org.simpleflatmapper.csv.CsvMapperBuilder<T>.addSubPropertyDelayedSetter(\t\t\t\t\tMap<String, CsvMapperBuilder<?>> delegateMapperBuilders,\t\t\t\t\tDelayedCellSetterFactory<T, ?>[] delayedSetters,\t\t\t\t\tint setterIndex,\t\t\t\t\tPropertyMeta<T, P> prop)",
                    "private DelayedCellSetterFactory<T, ?>[] org.simpleflatmapper.csv.CsvMapperBuilder<T>.buildDelayedSetters(final ParsingContextFactoryBuilder parsingContextFactoryBuilder, int delayedSetterEnd, boolean hasKeys)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "public <T, P> DelayedCellSetterFactory<T, P> org.simpleflatmapper.csv.impl.CellSetterFactory.getDelayedCellSetter(PropertyMeta<T, P> prop, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> Instantiator<S,T> org.simpleflatmapper.map.mapper.MapperInstantiatorFactory.getInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, Getter<? super S, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getOneArgIdentityInstantiator(InstantiatorDefinition id)",
                    "private <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.builderInstantiator(BuilderInstantiatorDefinition instantiatorDefinition,\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<org.simpleflatmapper.reflect.Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled)"
                ]
            },
            "8aa0b1b17f2d9ae22ff358de22af58f9276efa04": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "private <I, P> void org.simpleflatmapper.csv.CsvMapperBuilder<T>.addSubPropertyDelayedSetter(\t\t\t\t\tMap<String, CsvMapperBuilder<?>> delegateMapperBuilders,\t\t\t\t\tDelayedCellSetterFactory<T, ?>[] delayedSetters,\t\t\t\t\tint setterIndex,\t\t\t\t\tPropertyMeta<T, P> prop)",
                    "private DelayedCellSetterFactory<T, ?>[] org.simpleflatmapper.csv.CsvMapperBuilder<T>.buildDelayedSetters(final ParsingContextFactoryBuilder parsingContextFactoryBuilder, int delayedSetterEnd, boolean hasKeys)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "public <T, P> DelayedCellSetterFactory<T, P> org.simpleflatmapper.csv.impl.CellSetterFactory.getDelayedCellSetter(PropertyMeta<T, P> prop, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> Instantiator<S,T> org.simpleflatmapper.map.mapper.MapperInstantiatorFactory.getInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, Getter<? super S, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "private <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.builderInstantiator(BuilderInstantiatorDefinition instantiatorDefinition,\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getOneArgIdentityInstantiator(InstantiatorDefinition id)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4d222c86c0b794c97f2627afccbb29ad53e22d41",
        "previous_commit": "c39fa59dc17f68c22f0f49d02808c34e6a1334b3",
        "date": 1481017524,
        "releases": {
            "previous": "4d222c86c0b794c97f2627afccbb29ad53e22d41",
            "next": "4d222c86c0b794c97f2627afccbb29ad53e22d41"
        },
        "commit_message": " #379 rely on state to check if unescape needed (#381)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4d222c86c0b794c97f2627afccbb29ad53e22d41": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "protected CellPreProcessor org.simpleflatmapper.csv.DSLYamlComment.getCellTransformer(TextFormat textFormat, StringPostProcessing stringPostProcessing)",
                    "public CellConsumer org.simpleflatmapper.csv.DSL.apply(CellConsumer cellConsumer)",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlComments()",
                    "protected CellPreProcessor getCellTransformer(TextFormat textFormat, StringPostProcessing stringPostProcessing)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.finish(CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            },
            "c39fa59dc17f68c22f0f49d02808c34e6a1334b3": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "protected CellPreProcessor org.simpleflatmapper.csv.DSLYamlComment.getCellTransformer(TextFormat textFormat, StringPostProcessing stringPostProcessing)",
                    "public CellConsumer org.simpleflatmapper.csv.DSL.apply(CellConsumer cellConsumer)",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlComments()",
                    "protected CellPreProcessor getCellTransformer(TextFormat textFormat, StringPostProcessing stringPostProcessing)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.finish(CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d4c63c54805fa7af59c043d005bbd322d9d47cec",
        "previous_commit": "0349c522afcc8a0fe2f2f53b51b3268382ae6a7d",
        "date": 1539091837,
        "releases": {
            "previous": "d4c63c54805fa7af59c043d005bbd322d9d47cec",
            "next": "d4c63c54805fa7af59c043d005bbd322d9d47cec"
        },
        "commit_message": " #558 add discrimitor api on mapperfactory\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d4c63c54805fa7af59c043d005bbd322d9d47cec": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "public static <T> CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.from(Type type)",
                    "protected CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.newColumnMapDSL( ClassMeta<T> classMeta, Column[] columns, MapperConfig<CsvColumnKey, ?> mapperConfig, CellWriter cellWriter, boolean skipHeaders)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriterBuilder.java": [
                    "public static <T> CsvWriterBuilder<T> org.simpleflatmapper.csv.CsvWriterBuilder<T>.newBuilder(ClassMeta<T> classMeta, CellWriter cellWriter)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperFactory.java": [
                    "public <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilderFrom(ClassMeta<T> classMeta)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/SheetMapperFactory.java": [
                    "public <T> SheetMapperBuilder<T> org.simpleflatmapper.poi.SheetMapperFactory.newBuilder(Type type)",
                    "public <T> SheetMapper<T> org.simpleflatmapper.poi.SheetMapperFactory.newMapper(Type type)"
                ]
            },
            "0349c522afcc8a0fe2f2f53b51b3268382ae6a7d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriter.java": [
                    "public static <T> CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.from(Type type)",
                    "protected CsvWriterDSL<T> org.simpleflatmapper.csv.CsvWriter<T>.newMapDSL( ClassMeta<T> classMeta, Column[] columns, MapperConfig<CsvColumnKey> mapperConfig, CellWriter cellWriter, boolean skipHeaders)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvWriterBuilder.java": [
                    "public static <T> CsvWriterBuilder<T> org.simpleflatmapper.csv.CsvWriterBuilder<T>.newBuilder(ClassMeta<T> classMeta, CellWriter cellWriter)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperFactory.java": [
                    "public <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilderFrom(ClassMeta<T> classMeta)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/SheetMapperFactory.java": [
                    "public <T> SheetMapperBuilder<T> org.simpleflatmapper.poi.SheetMapperFactory.newBuilder(Type type)",
                    "public <T> SheetMapper<T> org.simpleflatmapper.poi.SheetMapperFactory.newMapper(Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "44c4a25d2add7e3a225ed7167532c1818a2ba3d2",
        "previous_commit": "b4db72eb832949ebe354596e60542352f77c4fb8",
        "date": 1479331815,
        "releases": {
            "previous": "44c4a25d2add7e3a225ed7167532c1818a2ba3d2",
            "next": "44c4a25d2add7e3a225ed7167532c1818a2ba3d2"
        },
        "commit_message": " #363 Remove csv specific (#367)\n\n* refactor loop\r\n\r\n* revise\r\n\r\n* fix perf\r\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "44c4a25d2add7e3a225ed7167532c1818a2ba3d2": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "protected CellPreProcessor getUnescapeCellTransformer(TextFormat textFormat)",
                    "protected final CharConsumer charConsumer(CharBuffer charBuffer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.shiftBufferToMark()",
                    "private boolean org.simpleflatmapper.csv.parser.CharConsumer.hasUnconsumedData()",
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.finish(CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.refillBuffer()"
                ]
            },
            "b4db72eb832949ebe354596e60542352f77c4fb8": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "protected CellPreProcessor getUnescapeCellTransformer(TextFormat textFormat)",
                    "protected final CharConsumer charConsumer(CharBuffer charBuffer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.shiftBufferToMark()",
                    "private boolean org.simpleflatmapper.csv.parser.CharConsumer.hasUnconsumedData()",
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.finish(CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.refillBuffer()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "70ea034333aa47e5e54753f764ae4d493f13e03d",
        "previous_commit": "67228004fe96be0d974fa76efe234dc6609cde09",
        "date": 1480342034,
        "releases": {
            "previous": "70ea034333aa47e5e54753f764ae4d493f13e03d",
            "next": "70ea034333aa47e5e54753f764ae4d493f13e03d"
        },
        "commit_message": " #370 optimise escape path  #369 (#371)\n\n* try difference escape path\r\n\r\n* opt\r\n\r\n* next\r\n\r\n* better unescape, fix versions\r\n\r\n* updates\r\n\r\n* updates\r\n\r\n* travis\r\n\r\n*  link\r\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "70ea034333aa47e5e54753f764ae4d493f13e03d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvReader.java": [
                    "private <CC extends CellConsumer> void org.simpleflatmapper.csv.CsvReader._parseAll(CC cellConsumer)",
                    "private boolean org.simpleflatmapper.csv.CsvReader._parseRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.finish(CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private int org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, final int start, final int end, final int escapeChar)",
                    "public final void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.newCell(char[] chars, int start, int end, CellConsumer cellConsumer)"
                ]
            },
            "67228004fe96be0d974fa76efe234dc6609cde09": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvReader.java": [
                    "private <CC extends CellConsumer> void org.simpleflatmapper.csv.CsvReader._parseAll(CC cellConsumer)",
                    "private boolean org.simpleflatmapper.csv.CsvReader._parseRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.finish(CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private int org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, final int start, final int end)",
                    "public final void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.newCell(char[] chars, int start, int end, CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a4efaaf2867e9153cbf976da119e983ae09821f0",
        "previous_commit": "bf60ddf0ec98face9bfe8e6c3fe91c3aee22db5a",
        "date": 1534329301,
        "releases": {
            "previous": "a4efaaf2867e9153cbf976da119e983ae09821f0",
            "next": "a4efaaf2867e9153cbf976da119e983ae09821f0"
        },
        "commit_message": "fix #543\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a4efaaf2867e9153cbf976da119e983ae09821f0": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.getReader(PropertyMeta<?, P> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "private <P, C> IndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.getSetter(PropertyMapping<C, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/error/LogMapperBuilderErrorHandler.java": [
                    "public void org.simpleflatmapper.map.error.LogMapperBuilderErrorHandler.propertyNotFound(final Type target, final String property)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/error/RethrowMapperBuilderErrorHandler.java": [
                    "public void org.simpleflatmapper.map.error.RethrowMapperBuilderErrorHandler.propertyNotFound(final Type target, final String property)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private boolean org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.disallowSelfReference(Object[] properties)"
                ]
            },
            "bf60ddf0ec98face9bfe8e6c3fe91c3aee22db5a": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.getReader(PropertyMeta<?, P> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "private <P, C> IndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.getSetter(PropertyMapping<C, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/error/LogMapperBuilderErrorHandler.java": [
                    "public void org.simpleflatmapper.map.error.LogMapperBuilderErrorHandler.propertyNotFound(final Type target, final String property)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/error/RethrowMapperBuilderErrorHandler.java": [
                    "public void org.simpleflatmapper.map.error.RethrowMapperBuilderErrorHandler.propertyNotFound(final Type target, final String property)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private boolean org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.disallowSelfReference(Object[] properties)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7321f1d7d599c27dd58f5bf4c9979836d199fc6d",
        "previous_commit": "8e59e25af9ba48954e74722a088df1d90240f9f3",
        "date": 1522255247,
        "releases": {
            "previous": "7321f1d7d599c27dd58f5bf4c9979836d199fc6d",
            "next": "7321f1d7d599c27dd58f5bf4c9979836d199fc6d"
        },
        "commit_message": "#498 support sql type override\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7321f1d7d599c27dd58f5bf4c9979836d199fc6d": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type target, JdbcColumnKey key, Object... properties)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType, JdbcColumnKey key, Object... properties)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType,\t\t\t\t\t\t\t\t\t\t\t JdbcColumnKey key, Object... properties)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JdbcColumnKeyMapperKeyComparator.java": [
                    "protected int org.simpleflatmapper.jdbc.impl.JdbcColumnKeyMapperKeyComparator.compare(JdbcColumnKey k1, JdbcColumnKey k2)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementIndexedSetterFactory.java": [
                    "protected <T> IndexedSetter<PreparedStatement, T> org.simpleflatmapper.jdbc.impl.PreparedStatementIndexedSetterFactory.getIndexedSetter(Type propertyType, PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg)",
                    "public <T> IndexedSetter<PreparedStatement, T> org.simpleflatmapper.jdbc.impl.PreparedStatementIndexedSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg, Object... properties)"
                ]
            },
            "8e59e25af9ba48954e74722a088df1d90240f9f3": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type target, JdbcColumnKey key, Object... properties)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType, JdbcColumnKey key, Object... properties)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType,\t\t\t\t\t\t\t\t\t\t\t JdbcColumnKey key, Object... properties)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JdbcColumnKeyMapperKeyComparator.java": [
                    "protected int org.simpleflatmapper.jdbc.impl.JdbcColumnKeyMapperKeyComparator.compare(JdbcColumnKey k1, JdbcColumnKey k2)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementIndexedSetterFactory.java": [
                    "public <T> IndexedSetter<PreparedStatement, T> org.simpleflatmapper.jdbc.impl.PreparedStatementIndexedSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg)",
                    "protected <T> IndexedSetter<PreparedStatement, T> org.simpleflatmapper.jdbc.impl.PreparedStatementIndexedSetterFactory.getIndexedSetter(Type propertyType, PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "88ef1d58e5be7e88c53983c06ffe4e5360fe2fb7",
        "previous_commit": "1e7bcdaa47c91821a1339210cd7ec0150f4646ca",
        "date": 1548172377,
        "releases": {
            "previous": "88ef1d58e5be7e88c53983c06ffe4e5360fe2fb7",
            "next": "88ef1d58e5be7e88c53983c06ffe4e5360fe2fb7"
        },
        "commit_message": " #604 do not ignore root key on unordered join\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "88ef1d58e5be7e88c53983c06ffe4e5360fe2fb7": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public <T> CsvMapperBuilder<T> org.simpleflatmapper.csv.CsvMapperFactory.newBuilder(final ClassMeta<T> classMeta)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperFactory.java": [
                    "public <T> DatastaxMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilder(ClassMeta<T> classMeta)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperFactory.java": [
                    "public <T> JdbcMapperBuilder<T> org.simpleflatmapper.jdbc.JdbcMapperFactory.newBuilder(ClassMeta<T> classMeta)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "private QueryPreparer<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.preparedStatementMapper(NamedSqlQuery query, String[] generatedKeys)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordMapperProvider.java": [
                    "public <R extends Record, E> RecordMapper<R, E> org.simpleflatmapper.jooq.SfmRecordMapperProvider.provide(RecordType<R> recordType, Class<? extends E> type)"
                ]
            },
            "1e7bcdaa47c91821a1339210cd7ec0150f4646ca": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public <T> CsvMapperBuilder<T> org.simpleflatmapper.csv.CsvMapperFactory.newBuilder(final ClassMeta<T> classMeta)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperFactory.java": [
                    "public <T> DatastaxMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilder(ClassMeta<T> classMeta)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperFactory.java": [
                    "public <T> JdbcMapperBuilder<T> org.simpleflatmapper.jdbc.JdbcMapperFactory.newBuilder(ClassMeta<T> classMeta)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "private QueryPreparer<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.preparedStatementMapper(NamedSqlQuery query, String[] generatedKeys)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordMapperProvider.java": [
                    "public <R extends Record, E> RecordMapper<R, E> org.simpleflatmapper.jooq.SfmRecordMapperProvider.provide(RecordType<R> recordType, Class<? extends E> type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ac96d3b459d85cb0131119c81e6e48190be37905",
        "previous_commit": "64d24a2ceef868a529de59a6b95da8945a614e82",
        "date": 1539461011,
        "releases": {
            "previous": "ac96d3b459d85cb0131119c81e6e48190be37905",
            "next": "ac96d3b459d85cb0131119c81e6e48190be37905"
        },
        "commit_message": " fix 569 keep query name in meta, try unprotected first then protected\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ac96d3b459d85cb0131119c81e6e48190be37905": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudMeta.java": [
                    "public void org.simpleflatmapper.jdbc.impl.CrudMeta.appendTableName(StringBuilder sb)",
                    "public StringBuilder org.simpleflatmapper.jdbc.impl.CrudMeta.appendProtectedField(StringBuilder sb, String value)",
                    "private static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.getCrudMeta(Connection connection, String table, ColumnDefinitionProvider<JdbcColumnKey> columnDefinitionProvider, ResultSet resultSet, DatabaseMeta databaseMeta)",
                    "private static String org.simpleflatmapper.jdbc.impl.CrudMeta.selectProtected(String table, DatabaseMeta dm)",
                    "public static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.of(Connection connection, String table, ColumnDefinitionProvider<JdbcColumnKey> columnDefinitionProvider)",
                    "private static List<String> org.simpleflatmapper.jdbc.impl.CrudMeta.getPrimaryKeys(Connection connection, ResultSetMetaData resultSetMetaData, ColumnDefinitionProvider<JdbcColumnKey> columnDefinitionProvider)"
                ]
            },
            "64d24a2ceef868a529de59a6b95da8945a614e82": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudMeta.java": [
                    "public void org.simpleflatmapper.jdbc.impl.CrudMeta.appendTableName(StringBuilder sb)",
                    "public StringBuilder org.simpleflatmapper.jdbc.impl.CrudMeta.appendProtectedField(StringBuilder sb, String value)",
                    "private static String org.simpleflatmapper.jdbc.impl.CrudMeta.selectProtected(String table, DatabaseMeta dm)",
                    "public static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.of(Connection connection, String table, ColumnDefinitionProvider<JdbcColumnKey> columnDefinitionProvider)",
                    "private static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.getCrudMeta(Connection connection, String _table, ColumnDefinitionProvider<JdbcColumnKey> columnDefinitionProvider, ResultSet resultSet, DatabaseMeta databaseMeta)",
                    "private static List<String> org.simpleflatmapper.jdbc.impl.CrudMeta.getPrimaryKeys(Connection connection, ResultSetMetaData resultSetMetaData, ColumnDefinitionProvider<JdbcColumnKey> columnDefinitionProvider)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6ef7785ddd157a014f79af09ab8baa750a8e0049",
        "previous_commit": "64ca69e4e62347366968b71e3fec1b2f248d2211",
        "date": 1566913234,
        "releases": {
            "previous": "6ef7785ddd157a014f79af09ab8baa750a8e0049",
            "next": "6ef7785ddd157a014f79af09ab8baa750a8e0049"
        },
        "commit_message": "PR #678 better scoring to solve test issue, also speculative index don't stop eagerly\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6ef7785ddd157a014f79af09ab8baa750a8e0049": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "private int org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher._partialMatch(final CharSequence property)",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.partialMatch(final CharSequence property)",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.speculativeMatch()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(String property)"
                ]
            },
            "64ca69e4e62347366968b71e3fec1b2f248d2211": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "private int org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher._partialMatch(final CharSequence property)",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.partialMatch(final CharSequence property)",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.speculativeMatch()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(String property)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b1c1c3b7eb4d40ad827f9b9be23d18851080d6d8",
        "previous_commit": "64736047a29a58da1129f15048e21b258a937e71",
        "date": 1534843909,
        "releases": {
            "previous": "b1c1c3b7eb4d40ad827f9b9be23d18851080d6d8",
            "next": "b1c1c3b7eb4d40ad827f9b9be23d18851080d6d8"
        },
        "commit_message": " #545 keep full row in buffer\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b1c1c3b7eb4d40ad827f9b9be23d18851080d6d8": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "private boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.hasUnconsumedData()",
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.finish(CellConsumer cellConsumer)",
                    "public boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.next()"
                ],
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ReaderCharBuffer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ReaderCharBuffer.next()"
                ]
            },
            "64736047a29a58da1129f15048e21b258a937e71": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "private boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.hasUnconsumedData()",
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.finish(CellConsumer cellConsumer)",
                    "public boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.next()"
                ],
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ReaderCharBuffer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ReaderCharBuffer.next()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8c857e92d8940764680b945fa276e849287b91e7",
        "previous_commit": "6055280ee903956416169de0a586945f3db92da4",
        "date": 1522399666,
        "releases": {
            "previous": "8c857e92d8940764680b945fa276e849287b91e7",
            "next": "8c857e92d8940764680b945fa276e849287b91e7"
        },
        "commit_message": "#499 use intermediate buffer to read\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8c857e92d8940764680b945fa276e849287b91e7": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public int org.simpleflatmapper.util.RingBufferReader.read()",
                    "public void org.simpleflatmapper.util.RingBufferReader.run()",
                    "private int org.simpleflatmapper.util.RingBufferReader.read(long currentTail, long currentHead)",
                    "public int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read()"
                ]
            },
            "6055280ee903956416169de0a586945f3db92da4": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public int org.simpleflatmapper.util.ParallelReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read()",
                    "public void org.simpleflatmapper.util.ParallelReader.run()",
                    "private int org.simpleflatmapper.util.ParallelReader.read(long currentTail, long currentHead)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4829d56226146977e23dde18fd8440edb30d5c5f",
        "previous_commit": "88020e3b9b40beba44d41684e9c5be89d95bbcf6",
        "date": 1572887853,
        "releases": {
            "previous": "4829d56226146977e23dde18fd8440edb30d5c5f",
            "next": "4829d56226146977e23dde18fd8440edb30d5c5f"
        },
        "commit_message": " #679 fix multiple hierarchy on some root type, pass discriminatorId about\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4829d56226146977e23dde18fd8440edb30d5c5f": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorPropertyFinder.java": [
                    "public <C extends Consumer<DiscriminatorMatch>> C org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.forEachProperty(C consumer)",
                    "public void org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.lookForProperties(PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "public void org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.manualMatch(PropertyMeta<?, ?> prop)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.map.impl.DiscriminatorReflectionService.newClassMeta(Type target)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/InferNullProperty.java": [
                    "public boolean org.simpleflatmapper.map.property.InferNullProperty.test(PropertyMeta<?, ?> propertyMeta)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/KeyProperty.java": [
                    "public boolean org.simpleflatmapper.map.property.KeyProperty.test(PropertyMeta<?, ?> propertyMeta)"
                ]
            },
            "88020e3b9b40beba44d41684e9c5be89d95bbcf6": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorPropertyFinder.java": [
                    "public <C extends BiConsumer<Type, PropertyMeta<?, ?>>> C org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.forEachProperty(C consumer)",
                    "public void org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.lookForProperties(PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "public void org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.manualMatch(PropertyMeta<?, ?> prop)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.map.impl.DiscriminatorReflectionService.newClassMeta(Type target)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/InferNullProperty.java": [
                    "public boolean org.simpleflatmapper.map.property.InferNullProperty.test(PropertyMeta<?, ?> propertyMeta)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/KeyProperty.java": [
                    "public boolean org.simpleflatmapper.map.property.KeyProperty.test(PropertyMeta<?, ?> propertyMeta)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "36a96b7f692a8dd12742b7c44deccd120ae81bb6",
        "previous_commit": "96a199c5927142930f3885e05beb3bebcb5271c9",
        "date": 1459291556,
        "releases": {
            "previous": "36a96b7f692a8dd12742b7c44deccd120ae81bb6",
            "next": "36a96b7f692a8dd12742b7c44deccd120ae81bb6"
        },
        "commit_message": " #303 setters and primitives\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "36a96b7f692a8dd12742b7c44deccd120ae81bb6": {
                "sfm/src/main/java/org/sfm/csv/CsvMapperBuilder.java": [
                    "public void org.sfm.csv.CsvMapperBuilder<T>.handle(PropertyMapping<T, ?, CsvColumnKey, CsvColumnDefinition> propMapping)",
                    "private Instantiator<CsvMapperCellHandler<T>, T> org.sfm.csv.CsvMapperBuilder<T>.getInstantiator(Map<Parameter, Getter<? super CsvMapperCellHandler<T>, ?>> params)",
                    "public <P> Getter<CsvMapperCellHandler<T>, P> org.sfm.csv.CsvMapperBuilder<T>.newGetter(Type target, CsvColumnKey key, ColumnDefinition<?, ?> columnDefinition)",
                    "public void org.sfm.csv.CsvMapperBuilder<T>.accept(Predicate<? super CsvColumnKey> predicate, DefaultValueProperty columnProperty)",
                    "public final CsvMapper<T> org.sfm.csv.CsvMapperBuilder<T>.mapper()"
                ],
                "sfm/src/main/java/org/sfm/csv/impl/CellSetterFactory.java": [
                    "public <T, P> DelayedCellSetterFactory<T, P> org.sfm.csv.impl.CellSetterFactory.getDelayedCellSetter(PropertyMeta<T, P> prop, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ]
            },
            "96a199c5927142930f3885e05beb3bebcb5271c9": {
                "sfm/src/main/java/org/sfm/csv/CsvMapperBuilder.java": [
                    "public void org.sfm.csv.CsvMapperBuilder<T>.handle(PropertyMapping<T, ?, CsvColumnKey, CsvColumnDefinition> propMapping)",
                    "private Instantiator<CsvMapperCellHandler<T>, T> org.sfm.csv.CsvMapperBuilder<T>.getInstantiator(Map<Parameter, Getter<? super CsvMapperCellHandler<T>, ?>> params)",
                    "public <P> Getter<CsvMapperCellHandler<T>, P> org.sfm.csv.CsvMapperBuilder<T>.newGetter(Type target, CsvColumnKey key, ColumnDefinition<?, ?> columnDefinition)",
                    "public void org.sfm.csv.CsvMapperBuilder<T>.accept(Predicate<? super CsvColumnKey> predicate, DefaultValueProperty columnProperty)",
                    "public final CsvMapper<T> org.sfm.csv.CsvMapperBuilder<T>.mapper()"
                ],
                "sfm/src/main/java/org/sfm/csv/impl/CellSetterFactory.java": [
                    "public <T, P> DelayedCellSetterFactory<T, P> org.sfm.csv.impl.CellSetterFactory.getDelayedCellSetter(PropertyMeta<T, P> prop, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "695581242084e6562a50a92880bcc622fe3ddbd0",
        "previous_commit": "116ce133c19bc7c2355c8dcdd5f81b20cb0da43d",
        "date": 1522401818,
        "releases": {
            "previous": "695581242084e6562a50a92880bcc622fe3ddbd0",
            "next": "695581242084e6562a50a92880bcc622fe3ddbd0"
        },
        "commit_message": "#499 fix java7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "695581242084e6562a50a92880bcc622fe3ddbd0": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "protected DSLYamlComment org.simpleflatmapper.csv.DSLYamlComment.newDSL(char separatorChar, char quoteChar, char escapeChar, int bufferSize, int skip, int limit, int maxBufferSize, StringPostProcessing stringPostProcessing, org.simpleflatmapper.util.Function<? super CellConsumer, ? extends CellConsumer> cellConsumerWrapper, boolean yamlComment, boolean parallelReader)",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlCommentsAsCell()",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlComments()",
                    "public DSL org.simpleflatmapper.csv.DSL.trimSpaces()",
                    "protected DSL org.simpleflatmapper.csv.DSL.newDSL(char separatorChar, char quoteChar, char escapeChar, int bufferSize, int skip, int limit, int maxBufferSize, StringPostProcessing stringPostProcessing, org.simpleflatmapper.util.Function<? super CellConsumer, ? extends CellConsumer> cellConsumerWrapper, boolean yamlComment, boolean parallelReader)",
                    "public DSL org.simpleflatmapper.csv.DSL.disableUnescaping()"
                ]
            },
            "116ce133c19bc7c2355c8dcdd5f81b20cb0da43d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "protected DSLYamlComment org.simpleflatmapper.csv.DSLYamlComment.newDSL(char separatorChar, char quoteChar, char escapeChar, int bufferSize, int skip, int limit, int maxBufferSize, StringPostProcessing stringPostProcessing, org.simpleflatmapper.util.Function<? super CellConsumer, ? extends CellConsumer> cellConsumerWrapper, boolean yamlComment, boolean parallelReader)",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlCommentsAsCell()",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlComments()",
                    "public DSL org.simpleflatmapper.csv.DSL.trimSpaces()",
                    "protected DSL org.simpleflatmapper.csv.DSL.newDSL(char separatorChar, char quoteChar, char escapeChar, int bufferSize, int skip, int limit, int maxBufferSize, StringPostProcessing stringPostProcessing, org.simpleflatmapper.util.Function<? super CellConsumer, ? extends CellConsumer> cellConsumerWrapper, boolean yamlComment, boolean parallelReader)",
                    "public DSL org.simpleflatmapper.csv.DSL.disableUnescaping()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "df36db494298f17b09212ccb778d90f8b3d7451b",
        "previous_commit": "03028fff4db75a1e48352e29e2e57a5cc1572c8f",
        "date": 1487866236,
        "releases": {
            "previous": "df36db494298f17b09212ccb778d90f8b3d7451b",
            "next": "df36db494298f17b09212ccb778d90f8b3d7451b"
        },
        "commit_message": " #409 fix issues with list in list unordererd id\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "df36db494298f17b09212ccb778d90f8b3d7451b": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetector.java": [
                    "public boolean org.simpleflatmapper.map.context.impl.BreakDetector<S>.broke(S source)",
                    "private void org.simpleflatmapper.map.context.impl.BreakDetector<S>.markChildrenHasBroken(boolean root)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetectorMappingContext.java": [
                    "public void org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.markAsBroken()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/MultiValueKey.java": [
                    "public int org.simpleflatmapper.map.context.impl.MultiValueKey.hashCode()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/SingleValueKey.java": [
                    "public int org.simpleflatmapper.map.context.impl.SingleValueKey.hashCode()",
                    "public boolean org.simpleflatmapper.map.context.impl.SingleValueKey.equals(Object o)"
                ]
            },
            "03028fff4db75a1e48352e29e2e57a5cc1572c8f": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetector.java": [
                    "private void org.simpleflatmapper.map.context.impl.BreakDetector<S>.markChildrenHasBroken()",
                    "public boolean org.simpleflatmapper.map.context.impl.BreakDetector<S>.broke(S source)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetectorMappingContext.java": [
                    "public void org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.markAsBroken()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/MultiValueKey.java": [
                    "public int org.simpleflatmapper.map.context.impl.MultiValueKey.hashCode()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/SingleValueKey.java": [
                    "public int org.simpleflatmapper.map.context.impl.SingleValueKey.hashCode()",
                    "public boolean org.simpleflatmapper.map.context.impl.SingleValueKey.equals(Object o)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "65ef304a27c5296c05e98974ebfc1f1dcd3e0008",
        "previous_commit": "3db759e420382e95c9405e361a22823ac9757bd8",
        "date": 1530884051,
        "releases": {
            "previous": "65ef304a27c5296c05e98974ebfc1f1dcd3e0008",
            "next": "65ef304a27c5296c05e98974ebfc1f1dcd3e0008"
        },
        "commit_message": "refactor builder structure to allow for better builder composition\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "65ef304a27c5296c05e98974ebfc1f1dcd3e0008": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperBuilder.java": [
                    "public MappingContext<? super ResultSet> org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.newMappingContext(ResultSet resultSet)",
                    "public T org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.map(ResultSet source, MappingContext<? super ResultSet> context)",
                    "public T org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.map(ResultSet source)"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/impl/JoinSheetMapper.java": [
                    "public Iterator<T> org.simpleflatmapper.poi.impl.JoinSheetMapper<T>.iterator(int startRow, Sheet sheet)",
                    "public <RH extends CheckedConsumer<? super T>> RH org.simpleflatmapper.poi.impl.JoinSheetMapper<T>.forEach(int startRow, Sheet sheet, RH consumer)",
                    "public Stream<T> org.simpleflatmapper.poi.impl.JoinSheetMapper<T>.stream(int startRow, Sheet sheet)"
                ]
            },
            "3db759e420382e95c9405e361a22823ac9757bd8": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperBuilder.java": [
                    "public MappingContext<? super ResultSet> org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.newMappingContext(ResultSet resultSet)",
                    "public T org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.map(ResultSet source, MappingContext<? super ResultSet> context)",
                    "public T org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.map(ResultSet source)"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/impl/JoinSheetMapper.java": [
                    "public Iterator<T> org.simpleflatmapper.poi.impl.JoinSheetMapper<T>.iterator(int startRow, Sheet sheet)",
                    "public Stream<T> org.simpleflatmapper.poi.impl.JoinSheetMapper<T>.stream(int startRow, Sheet sheet)",
                    "public <RH extends CheckedConsumer<T>> RH org.simpleflatmapper.poi.impl.JoinSheetMapper<T>.forEach(int startRow, Sheet sheet, RH consumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "73e6d325c84394eea39a999eba4b4ffb17e000bc",
        "previous_commit": "3108dae7428584c0be884bb406d285af501c0a97",
        "date": 1521494308,
        "releases": {
            "previous": "73e6d325c84394eea39a999eba4b4ffb17e000bc",
            "next": "73e6d325c84394eea39a999eba4b4ffb17e000bc"
        },
        "commit_message": "fix #497\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "73e6d325c84394eea39a999eba4b4ffb17e000bc": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/AbstractBatchInsertQueryExecutor.java": [
                    "private void org.simpleflatmapper.jdbc.impl.AbstractBatchInsertQueryExecutor<T>.insertInto(StringBuilder sb)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudFactory.java": [
                    "private static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.CrudFactory.buildUpdate(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/MysqlBatchInsertQueryExecutor.java": [
                    "protected void org.simpleflatmapper.jdbc.impl.MysqlBatchInsertQueryExecutor<T>.onDuplicateKeys(StringBuilder sb)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/MysqlCrudFactory.java": [
                    "public static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.MysqlCrudFactory.buildUpsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PostgresqlBatchInsertQueryExecutor.java": [
                    "protected void org.simpleflatmapper.jdbc.impl.PostgresqlBatchInsertQueryExecutor<T>.onDuplicateKeys(StringBuilder sb)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PostgresqlCrudFactory.java": [
                    "public static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.PostgresqlCrudFactory.buildUpsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ]
            },
            "3108dae7428584c0be884bb406d285af501c0a97": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/AbstractBatchInsertQueryExecutor.java": [
                    "private void org.simpleflatmapper.jdbc.impl.AbstractBatchInsertQueryExecutor<T>.insertInto(StringBuilder sb)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudFactory.java": [
                    "private static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.CrudFactory.buildUpdate(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/MysqlBatchInsertQueryExecutor.java": [
                    "protected void org.simpleflatmapper.jdbc.impl.MysqlBatchInsertQueryExecutor<T>.onDuplicateKeys(StringBuilder sb)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/MysqlCrudFactory.java": [
                    "public static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.MysqlCrudFactory.buildUpsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PostgresqlBatchInsertQueryExecutor.java": [
                    "protected void org.simpleflatmapper.jdbc.impl.PostgresqlBatchInsertQueryExecutor<T>.onDuplicateKeys(StringBuilder sb)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PostgresqlCrudFactory.java": [
                    "public static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.PostgresqlCrudFactory.buildUpsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d72fb1b9bdb735c5e4b3f2244826395e72cce7ba",
        "previous_commit": "242d2e289e92c3558afd5746586ebbdb7f8fd558",
        "date": 1473623722,
        "releases": {
            "previous": "d72fb1b9bdb735c5e4b3f2244826395e72cce7ba",
            "next": "d72fb1b9bdb735c5e4b3f2244826395e72cce7ba"
        },
        "commit_message": "add discriminator builder\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d72fb1b9bdb735c5e4b3f2244826395e72cce7ba": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/DiscriminatorJdbcBuilder.java": [
                    "public DiscriminatorJdbcSubBuilder org.simpleflatmapper.jdbc.DiscriminatorJdbcBuilder<T>.when(String value, TypeReference<? extends T> type)",
                    "public String org.simpleflatmapper.jdbc.DiscriminatorJdbcBuilder<T>.toString()",
                    "public DiscriminatorJdbcSubBuilder org.simpleflatmapper.jdbc.DiscriminatorJdbcBuilder<T>.addMapping(String column, int index, FieldMapperColumnDefinition<JdbcColumnKey> columnDefinition)",
                    "public boolean org.simpleflatmapper.jdbc.DiscriminatorJdbcBuilder<T>.test(ResultSet resultSet)",
                    "public DiscriminatorJdbcSubBuilder org.simpleflatmapper.jdbc.DiscriminatorJdbcBuilder<T>.addMapping(String column, FieldMapperColumnDefinition<JdbcColumnKey> columnDefinition)",
                    "public DiscriminatorJdbcSubBuilder org.simpleflatmapper.jdbc.DiscriminatorJdbcBuilder<T>.when(String value, Class<? extends T> type)"
                ]
            },
            "242d2e289e92c3558afd5746586ebbdb7f8fd558": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/DiscriminatorJdbcBuilder.java": [
                    "public DiscriminatorJdbcSubBuilder org.simpleflatmapper.jdbc.DiscriminatorJdbcBuilder<T>.when(String value, TypeReference<? extends T> type)",
                    "public String org.simpleflatmapper.jdbc.DiscriminatorJdbcBuilder<T>.toString()",
                    "public DiscriminatorJdbcSubBuilder org.simpleflatmapper.jdbc.DiscriminatorJdbcBuilder<T>.addMapping(String column, int index, FieldMapperColumnDefinition<JdbcColumnKey> columnDefinition)",
                    "public boolean org.simpleflatmapper.jdbc.DiscriminatorJdbcBuilder<T>.test(ResultSet resultSet)",
                    "public DiscriminatorJdbcSubBuilder org.simpleflatmapper.jdbc.DiscriminatorJdbcBuilder<T>.addMapping(String column, FieldMapperColumnDefinition<JdbcColumnKey> columnDefinition)",
                    "public DiscriminatorJdbcSubBuilder org.simpleflatmapper.jdbc.DiscriminatorJdbcBuilder<T>.when(String value, Class<? extends T> type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ac1d7cd76b053eec2746af930a10b87309769df3",
        "previous_commit": "70a3b9cd8ca44af578593e7904dd2630d704ec5b",
        "date": 1543850239,
        "releases": {
            "previous": "ac1d7cd76b053eec2746af930a10b87309769df3",
            "next": "ac1d7cd76b053eec2746af930a10b87309769df3"
        },
        "commit_message": "inline all primitive constant source\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ac1d7cd76b053eec2746af930a10b87309769df3": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmBuilder.java": [
                    "public void org.simpleflatmapper.map.asm.MapperAsmBuilder.addMappingCall(MethodVisitor mv, String mapperClassType)",
                    "private static <S, T> MapperBuilder org.simpleflatmapper.map.asm.MapperAsmBuilder.newMapperBuilder(FieldMapper<? super S, ? super T> mapper, String fieldMapperPrefix, int i)",
                    "public void org.simpleflatmapper.map.asm.MapperAsmBuilder.addInit(MethodVisitor mv, String mapperClassType)",
                    "public void org.simpleflatmapper.map.asm.MapperAsmBuilder.addDeclaration(ClassWriter cw)"
                ]
            },
            "70a3b9cd8ca44af578593e7904dd2630d704ec5b": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmBuilder.java": [
                    "public void org.simpleflatmapper.map.asm.MapperAsmBuilder.addMappingCall(MethodVisitor mv, String mapperClassType)",
                    "private static <S, T> MapperBuilder org.simpleflatmapper.map.asm.MapperAsmBuilder.newMapperBuilder(FieldMapper<? super S, ? super T> mapper, String fieldMapperPrefix, int i)",
                    "public void org.simpleflatmapper.map.asm.MapperAsmBuilder.addInit(MethodVisitor mv, String mapperClassType)",
                    "public void org.simpleflatmapper.map.asm.MapperAsmBuilder.addDeclaration(ClassWriter cw)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e8f193ab649604163023e8fcdb636d00c7fdfa4f",
        "previous_commit": "c847105c7d867d36fea813f4fdb21055d337a69e",
        "date": 1542217412,
        "releases": {
            "previous": "e8f193ab649604163023e8fcdb636d00c7fdfa4f",
            "next": "e8f193ab649604163023e8fcdb636d00c7fdfa4f"
        },
        "commit_message": "some lgtm and codacy clean up\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e8f193ab649604163023e8fcdb636d00c7fdfa4f": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRow.java": [
                    "public void org.simpleflatmapper.csv.CsvRow.addValue(int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/getter/GetterHelper.java": [
                    "private static boolean org.simpleflatmapper.reflect.getter.GetterHelper.isClone(Method method)",
                    "private static boolean org.simpleflatmapper.reflect.getter.GetterHelper.isToString(Method method)",
                    "private static boolean org.simpleflatmapper.reflect.getter.GetterHelper.isHashcode(Method method)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/setter/SetterHelper.java": [
                    "private static boolean org.simpleflatmapper.reflect.setter.SetterHelper.isEquals(Method method)"
                ]
            },
            "c847105c7d867d36fea813f4fdb21055d337a69e": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRow.java": [
                    "public void org.simpleflatmapper.csv.CsvRow.addValue(int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/getter/GetterHelper.java": [
                    "private static boolean org.simpleflatmapper.reflect.getter.GetterHelper.isClone(Method method)",
                    "private static boolean org.simpleflatmapper.reflect.getter.GetterHelper.isToString(Method method)",
                    "private static boolean org.simpleflatmapper.reflect.getter.GetterHelper.isHashcode(Method method)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/setter/SetterHelper.java": [
                    "private static boolean org.simpleflatmapper.reflect.setter.SetterHelper.isEquals(Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fb95dd723214f56371c5c869ad659d1332c4ce97",
        "previous_commit": "d07ea01adf6fc2eca7d7e9d567fbc1fda5c66dc4",
        "date": 1459270722,
        "releases": {
            "previous": "fb95dd723214f56371c5c869ad659d1332c4ce97",
            "next": "fb95dd723214f56371c5c869ad659d1332c4ce97"
        },
        "commit_message": " #304 expose neutral dsl method\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fb95dd723214f56371c5c869ad659d1332c4ce97": {
                "sfm/src/main/java/org/sfm/csv/CsvParser.java": [
                    "public static <T> MapToDSL<T> org.sfm.csv.CsvParser.mapTo(Type type)",
                    "public static <T> MapToDSL<T> org.sfm.csv.CsvParser.mapTo(Class<T> type)",
                    "public static DSL org.sfm.csv.CsvParser.maxBufferSize(int size)",
                    "public static Stream<String[]> org.sfm.csv.CsvParser.stream(String content)",
                    "public static Stream<String[]> org.sfm.csv.CsvParser.stream(Reader r)",
                    "public static <T> MapToDSL<T> org.sfm.csv.CsvParser.mapTo(TypeReference<T> type)"
                ]
            },
            "d07ea01adf6fc2eca7d7e9d567fbc1fda5c66dc4": {
                "sfm/src/main/java/org/sfm/csv/CsvParser.java": [
                    "public static <T> MapToDSL<T> org.sfm.csv.CsvParser.mapTo(Type type)",
                    "public static <T> MapToDSL<T> org.sfm.csv.CsvParser.mapTo(Class<T> type)",
                    "public static DSL org.sfm.csv.CsvParser.maxBufferSize(int size)",
                    "public static Stream<String[]> org.sfm.csv.CsvParser.stream(String content)",
                    "public static Stream<String[]> org.sfm.csv.CsvParser.stream(Reader r)",
                    "public static <T> MapToDSL<T> org.sfm.csv.CsvParser.mapTo(TypeReference<T> type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5a9658bbf83480ce8dce2b856bc66fa36cc8667c",
        "previous_commit": "4099313fede76d263e81802d378786d9ad17c9bf",
        "date": 1522508907,
        "releases": {
            "previous": "5a9658bbf83480ce8dce2b856bc66fa36cc8667c",
            "next": "5a9658bbf83480ce8dce2b856bc66fa36cc8667c"
        },
        "commit_message": "reorder reading writing loop\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5a9658bbf83480ce8dce2b856bc66fa36cc8667c": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public int org.simpleflatmapper.util.RingBufferReader.read()",
                    "public void org.simpleflatmapper.util.RingBufferReader.run()",
                    "public int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read(char[] cbuf, int off, int len)",
                    "private int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len, long currentHead, long currentTail)",
                    "public int org.simpleflatmapper.util.ParallelReader.read()"
                ]
            },
            "4099313fede76d263e81802d378786d9ad17c9bf": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public int org.simpleflatmapper.util.RingBufferReader.read()",
                    "public void org.simpleflatmapper.util.RingBufferReader.run()",
                    "public int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read(char[] cbuf, int off, int len)",
                    "private int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len, long currentHead, long currentTail)",
                    "public int org.simpleflatmapper.util.ParallelReader.read()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8a029922d80a098a8ab1ebe4c07359716cf7fc8a",
        "previous_commit": "5ebb00ae680bbca531335dfd6df852b1622ef239",
        "date": 1573666408,
        "releases": {
            "previous": "8a029922d80a098a8ab1ebe4c07359716cf7fc8a",
            "next": "8a029922d80a098a8ab1ebe4c07359716cf7fc8a"
        },
        "commit_message": "#696 add exception translator\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8a029922d80a098a8ab1ebe4c07359716cf7fc8a": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SelectQueryMapper.java": [
                    "public <SET extends TableLike & ResultQuery, H extends CheckedConsumer<? super T>> H org.simpleflatmapper.jooq.SelectQueryMapper<T>.forEach(final SET source, final H handler)",
                    "public <SET extends TableLike & ResultQuery> AutoCloseableEnumerable<T> org.simpleflatmapper.jooq.SelectQueryMapper<T>.enumerate(SET source)",
                    "public <SET extends TableLike & ResultQuery> List<T> org.simpleflatmapper.jooq.SelectQueryMapper<T>.asList(final SET source)",
                    "private <SET extends TableLike & ResultQuery> SetRowMapper<ResultSet, ResultSet, T, SQLException> org.simpleflatmapper.jooq.SelectQueryMapper<T>.getMapper(SET source)",
                    "public <SET extends TableLike & ResultQuery> AutoCloseableIterator<T> org.simpleflatmapper.jooq.SelectQueryMapper<T>.iterator(SET source)",
                    "public <SET extends TableLike & ResultQuery> Stream<T> org.simpleflatmapper.jooq.SelectQueryMapper<T>.stream(SET source)"
                ]
            },
            "5ebb00ae680bbca531335dfd6df852b1622ef239": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SelectQueryMapper.java": [
                    "public <SET extends TableLike & ResultQuery, H extends CheckedConsumer<? super T>> H org.simpleflatmapper.jooq.SelectQueryMapper<T>.forEach(final SET source, final H handler)",
                    "public <SET extends TableLike & ResultQuery> AutoCloseableEnumerable<T> org.simpleflatmapper.jooq.SelectQueryMapper<T>.enumerate(SET source)",
                    "public <SET extends TableLike & ResultQuery> List<T> org.simpleflatmapper.jooq.SelectQueryMapper<T>.asList(final SET source)",
                    "private <SET extends TableLike & ResultQuery> SetRowMapper<ResultSet, ResultSet, T, SQLException> org.simpleflatmapper.jooq.SelectQueryMapper<T>.getMapper(SET source)",
                    "public <SET extends TableLike & ResultQuery> AutoCloseableIterator<T> org.simpleflatmapper.jooq.SelectQueryMapper<T>.iterator(SET source)",
                    "public <SET extends TableLike & ResultQuery> Stream<T> org.simpleflatmapper.jooq.SelectQueryMapper<T>.stream(SET source)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e00266e047133c3183b02189b4761e3181073a09",
        "previous_commit": "9a7992dfeb8ea58a80e18848774b140e440f5bda",
        "date": 1567026383,
        "releases": {
            "previous": "e00266e047133c3183b02189b4761e3181073a09",
            "next": "e00266e047133c3183b02189b4761e3181073a09"
        },
        "commit_message": "introduce score on matches call\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e00266e047133c3183b02189b4761e3181073a09": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/ExtendPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.ExtendPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final boolean allowSelfReference, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.partialMatch(final CharSequence property)",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.speculativeMatch()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ]
            },
            "9a7992dfeb8ea58a80e18848774b140e440f5bda": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/ExtendPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.ExtendPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final boolean allowSelfReference, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.partialMatch(final CharSequence property)",
                    "public PropertyNameMatch org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.speculativeMatch()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b82e130e13c4cda4665f4239026ca4e121b319f6",
        "previous_commit": "0556a57478bb00748c415e13521368a1d402ef59",
        "date": 1467823583,
        "releases": {
            "previous": "b82e130e13c4cda4665f4239026ca4e121b319f6",
            "next": "b82e130e13c4cda4665f4239026ca4e121b319f6"
        },
        "commit_message": "Parallel reader play about\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b82e130e13c4cda4665f4239026ca4e121b319f6": {
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/utils/ParallelReader.java": [
                    "public int org.sfm.utils.ParallelReader.read(char[] cbuf, int off, int len)",
                    "public void org.sfm.utils.ParallelReader.run()",
                    "public void org.sfm.utils.ParallelReader.close()",
                    "private void org.sfm.utils.ParallelReader.waitingStrategy()"
                ]
            },
            "0556a57478bb00748c415e13521368a1d402ef59": {
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)"
                ],
                "sfm/src/main/java/org/sfm/utils/ParallelReader.java": [
                    "public int org.sfm.utils.ParallelReader.read(char[] cbuf, int off, int len)",
                    "public void org.sfm.utils.ParallelReader.run()",
                    "public void org.sfm.utils.ParallelReader.close()",
                    "private void org.sfm.utils.ParallelReader.waitingStrategy()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "35d844a5584cbccfe5221bd8aedc2dd037a70ebf",
        "previous_commit": "6016ee8442c7ebd991b71f4bdb7813156d1011d3",
        "date": 1472660497,
        "releases": {
            "previous": "35d844a5584cbccfe5221bd8aedc2dd037a70ebf",
            "next": "35d844a5584cbccfe5221bd8aedc2dd037a70ebf"
        },
        "commit_message": "more refactoring of jdbc and error handlers\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "35d844a5584cbccfe5221bd8aedc2dd037a70ebf": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxBinder.java": [
                    "protected BoundStatementMapper<T> org.simpleflatmapper.datastax.DatastaxBinder<T>.createMapper(MapperKey<DatastaxColumnKey> mapperKey)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperFactory.java": [
                    "public <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilderFrom(ClassMeta<T> classMeta)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/TupleValueSettableDataSetter.java": [
                    "public static <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.impl.setter.TupleValueSettableDataSetter.newFieldMapperBuilder(MapperConfig<DatastaxColumnKey, FieldMapperColumnDefinition<DatastaxColumnKey>> config, ReflectionService reflectionService, Type target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/UDTObjectSettableDataSetter.java": [
                    "public static <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.impl.setter.UDTObjectSettableDataSetter<T>.newFieldMapperBuilder(MapperConfig<DatastaxColumnKey, FieldMapperColumnDefinition<DatastaxColumnKey>> config, ReflectionService reflectionService, Type target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperFactory.java": [
                    "public <T> PreparedStatementMapperBuilder<T> org.simpleflatmapper.jdbc.JdbcMapperFactory.buildFrom(final ClassMeta<T> classMeta)"
                ]
            },
            "6016ee8442c7ebd991b71f4bdb7813156d1011d3": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxBinder.java": [
                    "protected BoundStatementMapper<T> org.simpleflatmapper.datastax.DatastaxBinder<T>.createMapper(MapperKey<DatastaxColumnKey> mapperKey)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperFactory.java": [
                    "public <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilderFrom(ClassMeta<T> classMeta)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/TupleValueSettableDataSetter.java": [
                    "public static <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.impl.setter.TupleValueSettableDataSetter.newFieldMapperBuilder(MapperConfig<DatastaxColumnKey, FieldMapperColumnDefinition<DatastaxColumnKey>> config, ReflectionService reflectionService, Type target)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/UDTObjectSettableDataSetter.java": [
                    "public static <T> SettableDataMapperBuilder<T> org.simpleflatmapper.datastax.impl.setter.UDTObjectSettableDataSetter<T>.newFieldMapperBuilder(MapperConfig<DatastaxColumnKey, FieldMapperColumnDefinition<DatastaxColumnKey>> config, ReflectionService reflectionService, Type target)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperFactory.java": [
                    "public <T> PreparedStatementMapperBuilder<T> org.simpleflatmapper.jdbc.JdbcMapperFactory.buildFrom(final ClassMeta<T> classMeta)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9187f9d794ad053886ab89fbf7b74104b617704a",
        "previous_commit": "6042a508fca0333eb92407d7d3cb78562de710d9",
        "date": 1573490391,
        "releases": {
            "previous": "9187f9d794ad053886ab89fbf7b74104b617704a",
            "next": "9187f9d794ad053886ab89fbf7b74104b617704a"
        },
        "commit_message": "fix speculative on array, list, get list of fields from right place\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9187f9d794ad053886ab89fbf7b74104b617704a": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SelectQueryMapper.java": [
                    "private boolean org.simpleflatmapper.jooq.SelectQueryMapper<T>.isKey(Field<?> field)",
                    "private <SET extends TableLike & ResultQuery> SetRowMapper<ResultSet, ResultSet, T, SQLException> org.simpleflatmapper.jooq.SelectQueryMapper<T>.getMapper(SET source)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SelectQueryMapperFactory.java": [
                    "public static SelectQueryMapperFactory org.simpleflatmapper.jooq.SelectQueryMapperFactory.newInstance( AbstractMapperFactory<JooqFieldKey, ?, ResultSet> config)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private boolean org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.excludeSpeculation(PropertyMeta<T, ?> prop)",
                    "private boolean org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.tryPlural(PropertyMeta<T, ?> prop)"
                ]
            },
            "6042a508fca0333eb92407d7d3cb78562de710d9": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SelectQueryMapper.java": [
                    "private boolean org.simpleflatmapper.jooq.SelectQueryMapper<T>.isKey(Field<?> field)",
                    "private <SET extends TableLike & ResultQuery> SetRowMapper<ResultSet, ResultSet, T, SQLException> org.simpleflatmapper.jooq.SelectQueryMapper<T>.getMapper(SET source)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SelectQueryMapperFactory.java": [
                    "public static SelectQueryMapperFactory org.simpleflatmapper.jooq.SelectQueryMapperFactory.newInstance( AbstractMapperFactory<JooqFieldKey, ?, ResultSet> config)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private boolean org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.excludeSpeculation(PropertyMeta<T, ?> prop)",
                    "private boolean org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.tryPlural(PropertyMeta<T, ?> prop)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d89d6df4002fc2b4a0508d7567cc769399ada909",
        "previous_commit": "d8cded51932b8ddcad149ea7f0f11ec75a34bef2",
        "date": 1470573611,
        "releases": {
            "previous": "d89d6df4002fc2b4a0508d7567cc769399ada909",
            "next": "d89d6df4002fc2b4a0508d7567cc769399ada909"
        },
        "commit_message": "modularize converter to remove need for joda.time\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d89d6df4002fc2b4a0508d7567cc769399ada909": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/RowGetterFactory.java": [
                    "private Converter<?, ?> org.simpleflatmapper.datastax.impl.RowGetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "private Converter<?, ?> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt, ColumnDefinition<DatastaxColumnKey, ?> columnDefinition)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static Type org.simpleflatmapper.util.TypeHelper.resolveTypeVariable(Type type, TypeVariable t)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/date/time/JavaTimeHelper.java": [
                    "public static DateTimeFormatter[] org.simpleflatmapper.util.date.time.JavaTimeHelper.getDateTimeFormatters(Object... properties)",
                    "public static ZoneId org.simpleflatmapper.util.date.time.JavaTimeHelper.getZoneId(Object[] params)"
                ]
            },
            "d8cded51932b8ddcad149ea7f0f11ec75a34bef2": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/RowGetterFactory.java": [
                    "private Converter<?, ?> org.simpleflatmapper.datastax.impl.RowGetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "private Converter<?, ?> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt, ColumnDefinition<DatastaxColumnKey, ?> columnDefinition)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static Type org.simpleflatmapper.util.TypeHelper.resolveTypeVariable(Type type, TypeVariable t)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/date/time/JavaTimeHelper.java": [
                    "public static DateTimeFormatter[] org.simpleflatmapper.util.date.time.JavaTimeHelper.getDateTimeFormatters(Object... properties)",
                    "public static ZoneId org.simpleflatmapper.util.date.time.JavaTimeHelper.getZoneId(Object[] params)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "93d12fba84a8a9fc5fa976385016e69deefff917",
        "previous_commit": "74cbacaa47e90b18ff4ca059a1bbc9799d99369b",
        "date": 1553027701,
        "releases": {
            "previous": "93d12fba84a8a9fc5fa976385016e69deefff917",
            "next": "93d12fba84a8a9fc5fa976385016e69deefff917"
        },
        "commit_message": " #619 filter property along the path to avoid being sub property on a null setter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "93d12fba84a8a9fc5fa976385016e69deefff917": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers(final ContextFactoryBuilder contextFactoryBuilder)",
                    "private <P, C> MultiIndexFieldMapper<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey> pm)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties, FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ]
            },
            "74cbacaa47e90b18ff4ca059a1bbc9799d99369b": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers(final ContextFactoryBuilder contextFactoryBuilder)",
                    "private <P, C> MultiIndexFieldMapper<T> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey> pm)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, Predicate<PropertyMeta<?, ?>> propertyFilter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, Predicate<PropertyMeta<?, ?>> propertyFilter)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties, FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer, Predicate<PropertyMeta<?, ?>> propertyFilter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3124e8bb6adb10bf9dffca48c674b6fee9c2bbd9",
        "previous_commit": "c4e4cee51e29ece7da3c49aff9e5d7a8f333c9db",
        "date": 1487861147,
        "releases": {
            "previous": "3124e8bb6adb10bf9dffca48c674b6fee9c2bbd9",
            "next": "3124e8bb6adb10bf9dffca48c674b6fee9c2bbd9"
        },
        "commit_message": " #409 BreakDectector Hierachy with local key storage\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3124e8bb6adb10bf9dffca48c674b6fee9c2bbd9": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/MappingContext.java": [
                    "public Object org.simpleflatmapper.map.MappingContext<S>.getCurrentValue(int i)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetectorMappingContext.java": [
                    "public Object org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.getCurrentValue(int i)",
                    "public void org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.setCurrentValue(int i, Object value)",
                    "public void org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.markAsBroken()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetectorMappingContextFactory.java": [
                    "public MappingContext<S> org.simpleflatmapper.map.context.impl.BreakDetectorMappingContextFactory<S>.newContext()"
                ]
            },
            "c4e4cee51e29ece7da3c49aff9e5d7a8f333c9db": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/MappingContext.java": [
                    "public Object org.simpleflatmapper.map.MappingContext<S>.getCurrentValue(int i)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetectorMappingContext.java": [
                    "public Object org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.getCurrentValue(int i)",
                    "public void org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.setCurrentValue(int i, Object value)",
                    "public void org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.markAsBroken()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetectorMappingContextFactory.java": []
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2389fc7500b7a16e0df9c5a42349a4bd5f4cbe6d",
        "previous_commit": "8ca1f1da09c0762ab01509e74c8152db7f55ece1",
        "date": 1474230296,
        "releases": {
            "previous": "2389fc7500b7a16e0df9c5a42349a4bd5f4cbe6d",
            "next": "2389fc7500b7a16e0df9c5a42349a4bd5f4cbe6d"
        },
        "commit_message": "some refactoring of yaml handling\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2389fc7500b7a16e0df9c5a42349a4bd5f4cbe6d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public void org.simpleflatmapper.csv.DSLYamlComment.forEach(File file, CheckedConsumer<String[]> rowConsumer, CheckedConsumer<String> commentConsumer)",
                    "public CellConsumer org.simpleflatmapper.csv.DSL.apply(CellConsumer cellConsumer)",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlComments()",
                    "private void org.simpleflatmapper.csv.DSLYamlComment._forEach(CsvReader reader, CheckedConsumer<String[]> rowConsumer, CheckedConsumer<String> commentConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvReader.java": [
                    "private CellConsumer org.simpleflatmapper.csv.CsvReader.toCellConsumer(CheckedConsumer<String[]> consumer)"
                ]
            },
            "8ca1f1da09c0762ab01509e74c8152db7f55ece1": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public void org.simpleflatmapper.csv.DSLYamlComment.forEach(File file, CheckedConsumer<String[]> rowConsumer, CheckedConsumer<String> commentConsumer)",
                    "public CellConsumer org.simpleflatmapper.csv.DSL.apply(CellConsumer cellConsumer)",
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlComments()",
                    "private void org.simpleflatmapper.csv.DSLYamlComment._forEach(CsvReader reader, CheckedConsumer<String[]> rowConsumer, CheckedConsumer<String> commentConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvReader.java": [
                    "private CellConsumer org.simpleflatmapper.csv.CsvReader.toCellConsumer(CheckedConsumer<String[]> consumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1523f26c0ba7f1849487092defd68ee8c3a04449",
        "previous_commit": "45dab0ba1e230cf98fec5e6f878dc2d044211e56",
        "date": 1538472842,
        "releases": {
            "previous": "1523f26c0ba7f1849487092defd68ee8c3a04449",
            "next": "1523f26c0ba7f1849487092defd68ee8c3a04449"
        },
        "commit_message": "  #556 use ASM7 exp in java8 and up builds\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1523f26c0ba7f1849487092defd68ee8c3a04449": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/impl/AsmCharConsumerFactory.java": [
                    "public MethodVisitor org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.visitMethod(int access, String name, String desc, String signature, String[] exceptions)",
                    "private static Constructor<? extends AbstractCharConsumer> org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.generateSpecialisedCharConsumer(final SpecialisationKey key)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.extractDefinitions(final Type target)",
                    "public MethodVisitor org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.visitMethod(int access, final String methodName, String desc, String signature, String[] exceptions)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static List<String> org.simpleflatmapper.reflect.asm.AsmUtils.extractTypeNamesFromSignature(String sig)"
                ]
            },
            "45dab0ba1e230cf98fec5e6f878dc2d044211e56": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/impl/AsmCharConsumerFactory.java": [
                    "public MethodVisitor org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.visitMethod(int access, String name, String desc, String signature, String[] exceptions)",
                    "private static Constructor<? extends AbstractCharConsumer> org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.generateSpecialisedCharConsumer(final SpecialisationKey key)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.extractDefinitions(final Type target)",
                    "public MethodVisitor org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.visitMethod(int access, final String methodName, String desc, String signature, String[] exceptions)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static List<String> org.simpleflatmapper.reflect.asm.AsmUtils.extractTypeNamesFromSignature(String sig)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4d3cf03994ff934e579439f6acce0a8c0982500b",
        "previous_commit": "3e4e7913bacd94b805ece44e3ff767f451a4a04f",
        "date": 1542283669,
        "releases": {
            "previous": "4d3cf03994ff934e579439f6acce0a8c0982500b",
            "next": "4d3cf03994ff934e579439f6acce0a8c0982500b"
        },
        "commit_message": " fix #587 use columnClass as a fallback strategy first and as a primary one for alternative\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4d3cf03994ff934e579439f6acce0a8c0982500b": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcColumnKey.java": [
                    "public JdbcColumnKey org.simpleflatmapper.jdbc.JdbcColumnKey.alias(String alias)",
                    "public static JdbcColumnKey org.simpleflatmapper.jdbc.JdbcColumnKey.of(ResultSetMetaData metaData, int columnIndex)",
                    "public Type org.simpleflatmapper.jdbc.JdbcColumnKey.getType(Type targetType)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType, JdbcColumnKey key, Object... properties)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType,\t\t\t\t\t\t\t\t\t\t\t JdbcColumnKey key, Object... properties)"
                ]
            },
            "3e4e7913bacd94b805ece44e3ff767f451a4a04f": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcColumnKey.java": [
                    "public JdbcColumnKey org.simpleflatmapper.jdbc.JdbcColumnKey.alias(String alias)",
                    "public static JdbcColumnKey org.simpleflatmapper.jdbc.JdbcColumnKey.of(ResultSetMetaData metaData, int columnIndex)",
                    "public Type org.simpleflatmapper.jdbc.JdbcColumnKey.getType(Type targetType)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType, JdbcColumnKey key, Object... properties)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType,\t\t\t\t\t\t\t\t\t\t\t JdbcColumnKey key, Object... properties)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2ffd3444d301a81d58100c2eba76f6117a608448",
        "previous_commit": "6ce2f0238cf5fe1d76c3a6700c8388af4bbaa703",
        "date": 1522617419,
        "releases": {
            "previous": "2ffd3444d301a81d58100c2eba76f6117a608448",
            "next": "2ffd3444d301a81d58100c2eba76f6117a608448"
        },
        "commit_message": "more padding\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2ffd3444d301a81d58100c2eba76f6117a608448": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public int org.simpleflatmapper.util.RingBufferReader.read()",
                    "public void org.simpleflatmapper.util.RingBufferReader.run()",
                    "public int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read()"
                ]
            },
            "6ce2f0238cf5fe1d76c3a6700c8388af4bbaa703": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public int org.simpleflatmapper.util.RingBufferReader.read()",
                    "public void org.simpleflatmapper.util.RingBufferReader.run()",
                    "public int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "771c262c8c84987f0c6e851930e208cc56d21d09",
        "previous_commit": "4c8282d3510c5f4c21f154ea19322a896086c2f5",
        "date": 1531150767,
        "releases": {
            "previous": "771c262c8c84987f0c6e851930e208cc56d21d09",
            "next": "771c262c8c84987f0c6e851930e208cc56d21d09"
        },
        "commit_message": "fix bi instantiator\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "771c262c8c84987f0c6e851930e208cc56d21d09": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "public void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.accept(MethodVisitor mv)",
                    "public static <S1, S2> byte[] org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.createInstantiator(final String className, final Class<?> s1, final Class<?> s2, final Instantiator<Void, ?> builderInstantiator, final BuilderInstantiatorDefinition instantiatorDefinition, final Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injectionsMap, boolean ignoreNullValues)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstanceBuilder(Class<?> s1, Class<?> s2, BuilderInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Map<Parameter, Method> setters, boolean ignoreNullValues)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstance(Class<?> s1, Class<?> s2, ExecutableInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Parameter[] parameters)",
                    "private static void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.changeToPrimitiveIfNeeded(InjectionPoint injectionPoint, MethodVisitor mv, Class<?> wrapperClass, boolean ignoreNullValues)"
                ]
            },
            "4c8282d3510c5f4c21f154ea19322a896086c2f5": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "public void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.accept(MethodVisitor mv)",
                    "public static <S1, S2> byte[] org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.createInstantiator(final String className, final Class<?> s1, final Class<?> s2, final Instantiator<Void, ?> builderInstantiator, final BuilderInstantiatorDefinition instantiatorDefinition, final Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injectionsMap, boolean ignoreNullValues)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstanceBuilder(Class<?> s1, Class<?> s2, BuilderInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Map<Parameter, Method> setters, boolean ignoreNullValues)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstance(Class<?> s1, Class<?> s2, ExecutableInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Parameter[] parameters)",
                    "private static void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.changeToPrimitiveIfNeeded(InjectionPoint injectionPoint, MethodVisitor mv, Class<?> wrapperClass, boolean ignoreNullValues)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f4219eb74e41d83fd3a0ecc8443fcbf1c2d196ee",
        "previous_commit": "39c0dc25eda0a9828c0fcb36ecad463a634c2c81",
        "date": 1542111178,
        "releases": {
            "previous": "f4219eb74e41d83fd3a0ecc8443fcbf1c2d196ee",
            "next": "f4219eb74e41d83fd3a0ecc8443fcbf1c2d196ee"
        },
        "commit_message": "fix #580\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f4219eb74e41d83fd3a0ecc8443fcbf1c2d196ee": {
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/impl/SheetEnumerable.java": [
                    "public boolean org.simpleflatmapper.poi.impl.SheetEnumerable<T>.next()",
                    "public T org.simpleflatmapper.poi.impl.SheetEnumerable<T>.currentValue()"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/impl/StaticSheetMapper.java": [
                    "public <RH extends CheckedConsumer<? super T>> RH org.simpleflatmapper.poi.impl.StaticSheetMapper<T>.forEach(int startRow, Sheet sheet, RH consumer)",
                    "public Stream<T> org.simpleflatmapper.poi.impl.StaticSheetMapper<T>.stream(int startRow, Sheet sheet)",
                    "public Iterator<T> org.simpleflatmapper.poi.impl.StaticSheetMapper<T>.iterator(int startRow, Sheet sheet)"
                ]
            },
            "39c0dc25eda0a9828c0fcb36ecad463a634c2c81": {
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/impl/SheetEnumerable.java": [
                    "public boolean org.simpleflatmapper.poi.impl.SheetEnumerable<T>.next()",
                    "public T org.simpleflatmapper.poi.impl.SheetEnumerable<T>.currentValue()"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/impl/StaticSheetMapper.java": [
                    "public <RH extends CheckedConsumer<? super T>> RH org.simpleflatmapper.poi.impl.StaticSheetMapper<T>.forEach(int startRow, Sheet sheet, RH consumer)",
                    "public Stream<T> org.simpleflatmapper.poi.impl.StaticSheetMapper<T>.stream(int startRow, Sheet sheet)",
                    "public Iterator<T> org.simpleflatmapper.poi.impl.StaticSheetMapper<T>.iterator(int startRow, Sheet sheet)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b92bf463e7b4448ee980b45a0ed36e947c11cbe0",
        "previous_commit": "e3708054bb45df638d67227995af0dd8df3d45cf",
        "date": 1531155086,
        "releases": {
            "previous": "b92bf463e7b4448ee980b45a0ed36e947c11cbe0",
            "next": "b92bf463e7b4448ee980b45a0ed36e947c11cbe0"
        },
        "commit_message": "fix builder\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b92bf463e7b4448ee980b45a0ed36e947c11cbe0": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "public void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.accept(MethodVisitor mv)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.invokeBiFunction(String targetType, InjectionPoint injectionPoint, String classType, Class<?> s1, Class<?> s2, MethodVisitor mv, Consumer<MethodVisitor> consumer, boolean ignoreNullValues)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstanceBuilder(Class<?> s1, Class<?> s2, BuilderInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Map<Parameter, Method> setters, boolean ignoreNullValues)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstance(Class<?> s1, Class<?> s2, ExecutableInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Parameter[] parameters)",
                    "private static void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.changeToPrimitiveIfNeeded(InjectionPoint injectionPoint, MethodVisitor mv, Class<?> wrapperClass, boolean ignoreNullValues)"
                ]
            },
            "e3708054bb45df638d67227995af0dd8df3d45cf": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "public void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.accept(MethodVisitor mv)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.invokeBiFunction(String targetType, InjectionPoint injectionPoint, String classType, Class<?> s1, Class<?> s2, MethodVisitor mv, Consumer<MethodVisitor> consumer, boolean ignoreNullValues)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstanceBuilder(Class<?> s1, Class<?> s2, BuilderInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Map<Parameter, Method> setters, boolean ignoreNullValues)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstance(Class<?> s1, Class<?> s2, ExecutableInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Parameter[] parameters)",
                    "private static void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.changeToPrimitiveIfNeeded(InjectionPoint injectionPoint, MethodVisitor mv, Class<?> wrapperClass, boolean ignoreNullValues)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3419277ea4c672c39757ccf9b6bf1af4fb1311fd",
        "previous_commit": "d7ecde0a353ca8685813d6b54aad4e0cb4df30be",
        "date": 1517590889,
        "releases": {
            "previous": "3419277ea4c672c39757ccf9b6bf1af4fb1311fd",
            "next": "3419277ea4c672c39757ccf9b6bf1af4fb1311fd"
        },
        "commit_message": "fix #485 add converter in parameter source, and sqltype setting and resolve java 8 time\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3419277ea4c672c39757ccf9b6bf1af4fb1311fd": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, Object... params)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public Converter<? super CharSequence, ? extends Date> org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.newConverter(ConvertingTypes targetedTypes, Object... params)",
                    "public void org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public void org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.handle(PropertyMapping<T, ?, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "public PlaceHolderValueGetterSource<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.buildSource()"
                ]
            },
            "d7ecde0a353ca8685813d6b54aad4e0cb4df30be": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, Object... params)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public Converter<? super CharSequence, ? extends Date> org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.newConverter(ConvertingTypes targetedTypes, Object... params)",
                    "public void org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public void org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.handle(PropertyMapping<T, ?, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "public PlaceHolderValueGetterSource<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.buildSource()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "40a5b679f7e2475d80f4287cd21dd7824b33ef0f",
        "previous_commit": "60bad13b8a47b46d0ea48cd61dc4e72ad3a481e9",
        "date": 1572421298,
        "releases": {
            "previous": "40a5b679f7e2475d80f4287cd21dd7824b33ef0f",
            "next": "40a5b679f7e2475d80f4287cd21dd7824b33ef0f"
        },
        "commit_message": "better behaviour for mixed call\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "40a5b679f7e2475d80f4287cd21dd7824b33ef0f": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/CsvWriter.java": [
                    "public final CsvWriter org.simpleflatmapper.lightningcsv.CsvWriter.endOfRow()",
                    "public final CsvWriter org.simpleflatmapper.lightningcsv.CsvWriter.appendRow(CharSequence... values)",
                    "public final CsvWriter org.simpleflatmapper.lightningcsv.CsvWriter.appendCell(char[] chars, int start, int end)",
                    "public final CsvWriter org.simpleflatmapper.lightningcsv.CsvWriter.appendRow(Iterable<? extends CharSequence> values)",
                    "public final CsvWriter org.simpleflatmapper.lightningcsv.CsvWriter.appendCell(CharSequence charSequence, int start, int end)"
                ]
            },
            "60bad13b8a47b46d0ea48cd61dc4e72ad3a481e9": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/CsvWriter.java": [
                    "public final CsvWriter org.simpleflatmapper.lightningcsv.CsvWriter.endOfRow()",
                    "public final CsvWriter org.simpleflatmapper.lightningcsv.CsvWriter.appendRow(CharSequence... values)",
                    "public final CsvWriter org.simpleflatmapper.lightningcsv.CsvWriter.appendCell(char[] chars, int start, int end)",
                    "public final CsvWriter org.simpleflatmapper.lightningcsv.CsvWriter.appendRow(Iterable<? extends CharSequence> values)",
                    "public final CsvWriter org.simpleflatmapper.lightningcsv.CsvWriter.appendCell(CharSequence charSequence, int start, int end)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1b5d403abda0882aad80ec1f8a09c7edcaaedfc3",
        "previous_commit": "bb52d0df043d277424ca2059ca2d585c7c7868dc",
        "date": 1455224462,
        "releases": {
            "previous": "1b5d403abda0882aad80ec1f8a09c7edcaaedfc3",
            "next": "1b5d403abda0882aad80ec1f8a09c7edcaaedfc3"
        },
        "commit_message": "#287 asm for builder instantiator\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1b5d403abda0882aad80ec1f8a09c7edcaaedfc3": {
                "sfm/src/main/java/org/sfm/reflect/InstantiatorFactory.java": [
                    "public <S, T> Instantiator<S, T> org.sfm.reflect.InstantiatorFactory.getInstantiator(InstantiatorDefinition instantiatorDefinition, Class<?> source, Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled)"
                ],
                "sfm/src/main/java/org/sfm/reflect/asm/AsmFactory.java": [
                    "private String org.sfm.reflect.asm.AsmFactory.generateClassNameForInstantiator(final InstantiatorKey key)"
                ],
                "sfm/src/main/java/org/sfm/reflect/asm/AsmUtils.java": [
                    "public static byte[] org.sfm.reflect.asm.AsmUtils.writeClassToFileInDir(String className, byte[] bytes, File targetDir)"
                ],
                "sfm/src/main/java/org/sfm/reflect/asm/InstantiatorBuilder.java": [
                    "public static <S> byte[] org.sfm.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass, final ExecutableInstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)"
                ],
                "sfm/src/main/java/org/sfm/reflect/asm/InstantiatorKey.java": [
                    "public String[] org.sfm.reflect.asm.InstantiatorKey.getInjectedParams()"
                ]
            },
            "bb52d0df043d277424ca2059ca2d585c7c7868dc": {
                "sfm/src/main/java/org/sfm/reflect/InstantiatorFactory.java": [
                    "public <S, T> Instantiator<S, T> org.sfm.reflect.InstantiatorFactory.getInstantiator(InstantiatorDefinition instantiatorDefinition, Class<?> source, Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled)"
                ],
                "sfm/src/main/java/org/sfm/reflect/asm/AsmFactory.java": [
                    "private String org.sfm.reflect.asm.AsmFactory.generateClassNameForInstantiator(final InstantiatorKey key)"
                ],
                "sfm/src/main/java/org/sfm/reflect/asm/AsmUtils.java": [
                    "public static byte[] org.sfm.reflect.asm.AsmUtils.writeClassToFileInDir(String className, byte[] bytes, File targetDir)"
                ],
                "sfm/src/main/java/org/sfm/reflect/asm/InstantiatorBuilder.java": [
                    "public static <S> byte[] org.sfm.reflect.asm.InstantiatorBuilder.createInstantiator(final String className, final Class<?> sourceClass, final ExecutableInstantiatorDefinition instantiatorDefinition, final Map<Parameter, Getter<? super S, ?>> injections)"
                ],
                "sfm/src/main/java/org/sfm/reflect/asm/InstantiatorKey.java": [
                    "public String[] org.sfm.reflect.asm.InstantiatorKey.getInjectedParams()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7ad94222d031908d208f6767ecc93c34e9b60a2b",
        "previous_commit": "f74e2293158c0a3df48907faab4559717d40ef44",
        "date": 1468103288,
        "releases": {
            "previous": "7ad94222d031908d208f6767ecc93c34e9b60a2b",
            "next": "7ad94222d031908d208f6767ecc93c34e9b60a2b"
        },
        "commit_message": "better perf\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7ad94222d031908d208f6767ecc93c34e9b60a2b": {
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.unescape(final char[] chars, final int offset, final int end)",
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.handleEndOfLineLF(int currentIndex, int currentState, CellConsumer cellConsumer)",
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.consumeOneChar(CellConsumer cellConsumer, int currentIndex, int currentState, char character)",
                    "public boolean org.sfm.csv.parser.StandardCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.finish(CellConsumer cellConsumer)"
                ]
            },
            "f74e2293158c0a3df48907faab4559717d40ef44": {
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.unescape(final char[] chars, final int offset, final int end)",
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.handleEndOfLineLF(int currentIndex, int currentState, CellConsumer cellConsumer)",
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.consumeOneChar(CellConsumer cellConsumer, int currentIndex, int currentState, char character)",
                    "public boolean org.sfm.csv.parser.StandardCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.finish(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b4ac6c1a37c92d64ca58df0bcbf66a3147f2fc1d",
        "previous_commit": "33ec2e09b78284d5d0504a76da8fcb55f6d718d4",
        "date": 1522407884,
        "releases": {
            "previous": "b4ac6c1a37c92d64ca58df0bcbf66a3147f2fc1d",
            "next": "b4ac6c1a37c92d64ca58df0bcbf66a3147f2fc1d"
        },
        "commit_message": "#499 add param to waiting strategy like JCTools\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b4ac6c1a37c92d64ca58df0bcbf66a3147f2fc1d": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public int org.simpleflatmapper.util.RingBufferReader.read()",
                    "public void org.simpleflatmapper.util.RingBufferReader.run()",
                    "public int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read()"
                ]
            },
            "33ec2e09b78284d5d0504a76da8fcb55f6d718d4": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public int org.simpleflatmapper.util.RingBufferReader.read()",
                    "public void org.simpleflatmapper.util.RingBufferReader.run()",
                    "public int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2ae590823b2ca9bfb0200dfaf260a623f29388c5",
        "previous_commit": "212868442ae76164a113f90ac5a12475b33e549f",
        "date": 1478617443,
        "releases": {
            "previous": "2ae590823b2ca9bfb0200dfaf260a623f29388c5",
            "next": "2ae590823b2ca9bfb0200dfaf260a623f29388c5"
        },
        "commit_message": "Issue 346 (#360)\n\n*  #346 add read where\r\n\r\n*  #346 implements where on crud\r\n\r\n* #346 rollback only if not autocommit\r\n\r\n* #346 rollback only if not autocommit\r\n\r\n* #346 commit only if not autocommit\r\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2ae590823b2ca9bfb0200dfaf260a623f29388c5": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudFactory.java": [
                    "private static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.CrudFactory.buildInsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> Crud<T, K> org.simpleflatmapper.jdbc.impl.CrudFactory.createCrud(ClassMeta<T> target, ClassMeta<K> keyTarget, CrudMeta crudMeta, JdbcMapperFactory mapperFactory)",
                    "private static <T, K> QueryPreparer<K> org.simpleflatmapper.jdbc.impl.CrudFactory.buildSelect(ClassMeta<K> keyTarget, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.CrudFactory.buildUpdate(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> QueryPreparer<K> org.simpleflatmapper.jdbc.impl.CrudFactory.buildDelete(ClassMeta<K> keyTarget, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ]
            },
            "212868442ae76164a113f90ac5a12475b33e549f": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudFactory.java": [
                    "private static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.CrudFactory.buildInsert(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> Crud<T, K> org.simpleflatmapper.jdbc.impl.CrudFactory.createCrud(ClassMeta<T> target, ClassMeta<K> keyTarget, CrudMeta crudMeta, JdbcMapperFactory mapperFactory)",
                    "private static <T, K> QueryPreparer<K> org.simpleflatmapper.jdbc.impl.CrudFactory.buildSelect(ClassMeta<K> keyTarget, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> QueryPreparer<T> org.simpleflatmapper.jdbc.impl.CrudFactory.buildUpdate(ClassMeta<T> target, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)",
                    "private static <T, K> QueryPreparer<K> org.simpleflatmapper.jdbc.impl.CrudFactory.buildDelete(ClassMeta<K> keyTarget, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "033b6c21e47d880f02c69544f998c90c8e4afd1a",
        "previous_commit": "77e4a9988d8c9feeadef316609802c0f23996184",
        "date": 1511878844,
        "releases": {
            "previous": "033b6c21e47d880f02c69544f998c90c8e4afd1a",
            "next": "033b6c21e47d880f02c69544f998c90c8e4afd1a"
        },
        "commit_message": " #471 expose rowIterator and rowStream\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "033b6c21e47d880f02c69544f998c90c8e4afd1a": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvReader.java": [
                    "public Row org.simpleflatmapper.csv.CsvReader.next()",
                    "public void org.simpleflatmapper.csv.CsvReader.accept(String[] strings)",
                    "public Iterator<Row> org.simpleflatmapper.csv.CsvReader.rowIterator()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/Row.java": [
                    "public Set<Entry<String, String>> org.simpleflatmapper.csv.Row.entrySet()",
                    "public Collection<String> org.simpleflatmapper.csv.Row.values()"
                ]
            },
            "77e4a9988d8c9feeadef316609802c0f23996184": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvReader.java": [
                    "public Row org.simpleflatmapper.csv.CsvReader.next()",
                    "public void org.simpleflatmapper.csv.CsvReader.accept(String[] strings)",
                    "public Iterator<Row> org.simpleflatmapper.csv.CsvReader.rowIterator()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/Row.java": [
                    "public Set<Entry<String, String>> org.simpleflatmapper.csv.Row.entrySet()",
                    "public Collection<String> org.simpleflatmapper.csv.Row.values()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e23857865b6e54974234566acaa51460818e1b9c",
        "previous_commit": "e6ded31b4740e2bcd7e82cd3b0050ea86075f523",
        "date": 1487932403,
        "releases": {
            "previous": "e23857865b6e54974234566acaa51460818e1b9c",
            "next": "e23857865b6e54974234566acaa51460818e1b9c"
        },
        "commit_message": " #414 simplify logic\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e23857865b6e54974234566acaa51460818e1b9c": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetector.java": [
                    "public boolean org.simpleflatmapper.map.context.impl.BreakDetector<S>.broke(S source)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetectorMappingContext.java": [
                    "public boolean org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.broke(S source)",
                    "public void org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.setCurrentValue(int i, Object value)",
                    "private static <S> BreakDetector<S>[] org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.toBreakDetectors(KeyDefinition<S, ?>[] definitions)",
                    "public void org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.markAsBroken()"
                ]
            },
            "e6ded31b4740e2bcd7e82cd3b0050ea86075f523": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetector.java": [
                    "public boolean org.simpleflatmapper.map.context.impl.BreakDetector<S>.broke(S source)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetectorMappingContext.java": [
                    "private static <S> BreakDetector<S>[] org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.toKeyContext(KeyDefinition<S, ?>[] definitions)",
                    "public void org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.setCurrentValue(int i, Object value)",
                    "public boolean org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.broke(S source)",
                    "public void org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.markAsBroken()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4f10c3ccdbf7d080246bc40d0002ec779e17da56",
        "previous_commit": "08aa2036cbb03184468831ea6a3b9dc5f8b25224",
        "date": 1573222343,
        "releases": {
            "previous": "4f10c3ccdbf7d080246bc40d0002ec779e17da56",
            "next": "4f10c3ccdbf7d080246bc40d0002ec779e17da56"
        },
        "commit_message": " #479 speculate only on untaken path\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4f10c3ccdbf7d080246bc40d0002ec779e17da56": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private Runnable org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.propertiesRemoveNonMatchingCallBack(final ConstructorPropertyMeta<T, ?> prop)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties,\t\t\t\t\t\t\t\t FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer,\t\t\t\t\t\t\t\t PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForPropertySpeculative(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)"
                ]
            },
            "08aa2036cbb03184468831ea6a3b9dc5f8b25224": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private Runnable org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.propertiesRemoveNonMatchingCallBack(final ConstructorPropertyMeta<T, ?> prop)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties,\t\t\t\t\t\t\t\t FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer,\t\t\t\t\t\t\t\t PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForPropertySpeculative(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8e35a874be4d1858b1ff182c587b3373ff01eabe",
        "previous_commit": "515424ffb659896a1f351945a2b01610afedc783",
        "date": 1438721524,
        "releases": {
            "previous": "8e35a874be4d1858b1ff182c587b3373ff01eabe",
            "next": "8e35a874be4d1858b1ff182c587b3373ff01eabe"
        },
        "commit_message": " #198 use mapper for udt and tuple\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8e35a874be4d1858b1ff182c587b3373ff01eabe": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ],
                "sfm-poi/src/main/java/org/sfm/poi/impl/JoinSheetMapper.java": [
                    "public <RH extends RowHandler<T>> RH org.sfm.poi.impl.JoinSheetMapper<T>.forEach(int startRow, Sheet sheet, RH rowHandler)"
                ],
                "sfm-poi/src/main/java/org/sfm/poi/impl/SheetSpliterator.java": [
                    "public void org.sfm.poi.impl.SheetSpliterator<T>.forEachRemaining(Consumer<? super T> action)"
                ],
                "sfm-poi/src/main/java/org/sfm/poi/impl/StaticSheetMapper.java": [
                    "public <RH extends RowHandler<T>> RH org.sfm.poi.impl.StaticSheetMapper<T>.forEach(int startRow, Sheet sheet, RH rowHandler)"
                ]
            },
            "515424ffb659896a1f351945a2b01610afedc783": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ],
                "sfm-poi/src/main/java/org/sfm/poi/impl/JoinSheetMapper.java": [
                    "public <RH extends RowHandler<T>> RH org.sfm.poi.impl.JoinSheetMapper<T>.forEach(int startRow, Sheet sheet, RH rowHandler)"
                ],
                "sfm-poi/src/main/java/org/sfm/poi/impl/SheetSpliterator.java": [
                    "public void org.sfm.poi.impl.SheetSpliterator<T>.forEachRemaining(Consumer<? super T> action)"
                ],
                "sfm-poi/src/main/java/org/sfm/poi/impl/StaticSheetMapper.java": [
                    "public <RH extends RowHandler<T>> RH org.sfm.poi.impl.StaticSheetMapper<T>.forEach(int startRow, Sheet sheet, RH rowHandler)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b061727142a51ca99fad89578431919b6922e3ae",
        "previous_commit": "bf1dd31345fdbf45fa7e264733e42d613606c459",
        "date": 1473363713,
        "releases": {
            "previous": "b061727142a51ca99fad89578431919b6922e3ae",
            "next": "b061727142a51ca99fad89578431919b6922e3ae"
        },
        "commit_message": "add more coverage\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b061727142a51ca99fad89578431919b6922e3ae": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()",
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories(ServiceLoader<ConverterFactoryProducer> serviceLoader)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AliasProviderService.java": [
                    "private static AliasProvider org.simpleflatmapper.reflect.meta.AliasProviderService.findAliasProviders()",
                    "private static AliasProvider org.simpleflatmapper.reflect.meta.AliasProviderService.findAliasProviders(ServiceLoader<AliasProviderFactory> serviceLoader)"
                ]
            },
            "bf1dd31345fdbf45fa7e264733e42d613606c459": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AliasProviderService.java": [
                    "private static AliasProvider org.simpleflatmapper.reflect.meta.AliasProviderService.findAliasProviders()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "67f6593f5fb3086ae7cbf1c15934779f6bab14a4",
        "previous_commit": "ead0c8258a5c04beba1cb636588628c8f8710379",
        "date": 1573672009,
        "releases": {
            "previous": "67f6593f5fb3086ae7cbf1c15934779f6bab14a4",
            "next": "67f6593f5fb3086ae7cbf1c15934779f6bab14a4"
        },
        "commit_message": "java7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "67f6593f5fb3086ae7cbf1c15934779f6bab14a4": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SelectQueryMapper.java": [
                    "public T org.simpleflatmapper.jooq.SelectQueryMapper<T>.next()",
                    "public boolean org.simpleflatmapper.jooq.SelectQueryMapper<T>.hasNext()",
                    "public T org.simpleflatmapper.jooq.SelectQueryMapper<T>.currentValue()",
                    "public boolean org.simpleflatmapper.jooq.SelectQueryMapper<T>.next()"
                ]
            },
            "ead0c8258a5c04beba1cb636588628c8f8710379": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SelectQueryMapper.java": [
                    "public T org.simpleflatmapper.jooq.SelectQueryMapper<T>.next()",
                    "public boolean org.simpleflatmapper.jooq.SelectQueryMapper<T>.hasNext()",
                    "public T org.simpleflatmapper.jooq.SelectQueryMapper<T>.currentValue()",
                    "public boolean org.simpleflatmapper.jooq.SelectQueryMapper<T>.next()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "39562d41022b7e41c992dec3b2d1b9fd9bcc0974",
        "previous_commit": "0e453501034a97bf6c7dca4429a3a32796bc13fb",
        "date": 1568387376,
        "releases": {
            "previous": "39562d41022b7e41c992dec3b2d1b9fd9bcc0974",
            "next": "39562d41022b7e41c992dec3b2d1b9fd9bcc0974"
        },
        "commit_message": "use better scoring strategy ignoring separator char\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "39562d41022b7e41c992dec3b2d1b9fd9bcc0974": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "private int org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher._speculativeMatch()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(PropertyNameMatcher property)",
                    "public int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.compareTo(PropertyMatchingScore o)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(String property)"
                ]
            },
            "0e453501034a97bf6c7dca4429a3a32796bc13fb": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "private int org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher._speculativeMatch()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(PropertyNameMatcher property)",
                    "public int org.simpleflatmapper.reflect.meta.PropertyMatchingScore.compareTo(PropertyMatchingScore o)",
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.matches(String property)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9500089f8658d38041d56d0ee4b1809fb7979500",
        "previous_commit": "7c949308409611fcf06607251744f9f1050d71a4",
        "date": 1471029191,
        "releases": {
            "previous": "9500089f8658d38041d56d0ee4b1809fb7979500",
            "next": "9500089f8658d38041d56d0ee4b1809fb7979500"
        },
        "commit_message": "asm now always present\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9500089f8658d38041d56d0ee4b1809fb7979500": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "public List<InstantiatorDefinition> org.simpleflatmapper.reflect.ReflectionService.extractInstantiator(Type target, Member extraInstantiator)",
                    "public static ReflectionService org.simpleflatmapper.reflect.ReflectionService.newInstance()",
                    "public boolean org.simpleflatmapper.reflect.ReflectionService.isAsmActivated()",
                    "public static ReflectionService org.simpleflatmapper.reflect.ReflectionService.disableAsm()"
                ]
            },
            "7c949308409611fcf06607251744f9f1050d71a4": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "public List<InstantiatorDefinition> org.simpleflatmapper.reflect.ReflectionService.extractInstantiator(Type target, Member extraInstantiator)",
                    "public static ReflectionService org.simpleflatmapper.reflect.ReflectionService.newInstance()",
                    "public boolean org.simpleflatmapper.reflect.ReflectionService.isAsmActivated()",
                    "public static ReflectionService org.simpleflatmapper.reflect.ReflectionService.disableAsm()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "351c619acb778f2100a8034e7eb33d8db966518c",
        "previous_commit": "f0114917bd8255a4649add81e05341c12781809c",
        "date": 1539513347,
        "releases": {
            "previous": "351c619acb778f2100a8034e7eb33d8db966518c",
            "next": "351c619acb778f2100a8034e7eb33d8db966518c"
        },
        "commit_message": " #561 discriminator mapper forward target field mapper\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "351c619acb778f2100a8034e7eb33d8db966518c": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetector.java": [
                    "public Object org.simpleflatmapper.map.context.impl.BreakDetector<S>.getValue()",
                    "public void org.simpleflatmapper.map.context.impl.BreakDetector<S>.setValue(Object value)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/KeyProperty.java": [
                    "public boolean org.simpleflatmapper.map.property.KeyProperty.test(PropertyMeta<?, ?> propertyMeta)",
                    "public void org.simpleflatmapper.map.property.KeyProperty.accept(Type type, PropertyMeta<?, ?> propertyMeta)"
                ]
            },
            "f0114917bd8255a4649add81e05341c12781809c": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetector.java": [
                    "public Object org.simpleflatmapper.map.context.impl.BreakDetector<S>.getValue()",
                    "public void org.simpleflatmapper.map.context.impl.BreakDetector<S>.setValue(Object value)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/KeyProperty.java": [
                    "public boolean org.simpleflatmapper.map.property.KeyProperty.test(PropertyMeta<?, ?> propertyMeta)",
                    "public void org.simpleflatmapper.map.property.KeyProperty.accept(Type type, PropertyMeta<?, ?> propertyMeta)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "32eec85d174788267b2df0f242a5464b3b26c099",
        "previous_commit": "74e8c79e1403ff0e51f322b366afc80bb2d6e37b",
        "date": 1539345782,
        "releases": {
            "previous": "32eec85d174788267b2df0f242a5464b3b26c099",
            "next": "32eec85d174788267b2df0f242a5464b3b26c099"
        },
        "commit_message": " #560 change pom scope up to 12, catch exception on setAccessible call\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "32eec85d174788267b2df0f242a5464b3b26c099": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ObjectGetterFactory.java": [
                    "public <T, P> Getter<T, P> org.simpleflatmapper.reflect.ObjectGetterFactory.getMethodGetter(final Method method)",
                    "public <T, P> Getter<T, P> org.simpleflatmapper.reflect.ObjectGetterFactory.getFieldGetter(Field field)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ObjectSetterFactory.java": [
                    "public <T, P> Setter<T, P> org.simpleflatmapper.reflect.ObjectSetterFactory.getFieldSetter(Field field)",
                    "public <T, P> Setter<T, P> org.simpleflatmapper.reflect.ObjectSetterFactory.getMethodSetter(final Method method)"
                ]
            },
            "74e8c79e1403ff0e51f322b366afc80bb2d6e37b": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ObjectGetterFactory.java": [
                    "public <T, P> Getter<T, P> org.simpleflatmapper.reflect.ObjectGetterFactory.getMethodGetter(final Method method)",
                    "public <T, P> Getter<T, P> org.simpleflatmapper.reflect.ObjectGetterFactory.getFieldGetter(Field field)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ObjectSetterFactory.java": [
                    "public <T, P> Setter<T, P> org.simpleflatmapper.reflect.ObjectSetterFactory.getFieldSetter(Field field)",
                    "public <T, P> Setter<T, P> org.simpleflatmapper.reflect.ObjectSetterFactory.getMethodSetter(final Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4099313fede76d263e81802d378786d9ad17c9bf",
        "previous_commit": "a97bb5ec030097636d748bbb52bdf12bfce34c03",
        "date": 1522482706,
        "releases": {
            "previous": "4099313fede76d263e81802d378786d9ad17c9bf",
            "next": "4099313fede76d263e81802d378786d9ad17c9bf"
        },
        "commit_message": "#499 pad array\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4099313fede76d263e81802d378786d9ad17c9bf": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public int org.simpleflatmapper.util.RingBufferReader.read()",
                    "private int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len, long currentHead, long currentTail)",
                    "public int org.simpleflatmapper.util.ParallelReader.read()",
                    "public void org.simpleflatmapper.util.RingBufferReader.run()"
                ]
            },
            "a97bb5ec030097636d748bbb52bdf12bfce34c03": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public int org.simpleflatmapper.util.RingBufferReader.read()",
                    "private int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len, long currentHead, long currentTail)",
                    "public int org.simpleflatmapper.util.ParallelReader.read()",
                    "public void org.simpleflatmapper.util.RingBufferReader.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "70d71d723c1ff1e72eeb1e1416be0dd5220c8f23",
        "previous_commit": "36ffd4b5a857d751e99d07c461c19e5f2e0f0bc4",
        "date": 1470779671,
        "releases": {
            "previous": "70d71d723c1ff1e72eeb1e1416be0dd5220c8f23",
            "next": "70d71d723c1ff1e72eeb1e1416be0dd5220c8f23"
        },
        "commit_message": "user Number java base parsing\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "70d71d723c1ff1e72eeb1e1416be0dd5220c8f23": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/ByteCellValueReaderImpl.java": [
                    "public byte org.simpleflatmapper.csv.impl.cellreader.ByteCellValueReaderImpl.readByte(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/IntegerCellValueReaderImpl.java": [
                    "public static int org.simpleflatmapper.csv.impl.cellreader.IntegerCellValueReaderImpl.parseInt(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/LongCellValueReaderImpl.java": [
                    "public static long org.simpleflatmapper.csv.impl.cellreader.LongCellValueReaderImpl.parseLong(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/ShortCellValueReaderImpl.java": [
                    "public short org.simpleflatmapper.csv.impl.cellreader.ShortCellValueReaderImpl.readShort(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ]
            },
            "36ffd4b5a857d751e99d07c461c19e5f2e0f0bc4": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/ByteCellValueReaderImpl.java": [
                    "public byte org.simpleflatmapper.csv.impl.cellreader.ByteCellValueReaderImpl.readByte(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/IntegerCellValueReaderImpl.java": [
                    "public static int org.simpleflatmapper.csv.impl.cellreader.IntegerCellValueReaderImpl.parseInt(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/LongCellValueReaderImpl.java": [
                    "public static long org.simpleflatmapper.csv.impl.cellreader.LongCellValueReaderImpl.parseLong(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/ShortCellValueReaderImpl.java": [
                    "public short org.simpleflatmapper.csv.impl.cellreader.ShortCellValueReaderImpl.readShort(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ccf3e5973c58ad1b74e081def3edecd487e594ff",
        "previous_commit": "2367f69b7e3ba3acd54ff3362b0cdf8a1c6ff609",
        "date": 1518446710,
        "releases": {
            "previous": "ccf3e5973c58ad1b74e081def3edecd487e594ff",
            "next": "ccf3e5973c58ad1b74e081def3edecd487e594ff"
        },
        "commit_message": "fix #457\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ccf3e5973c58ad1b74e081def3edecd487e594ff": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "private byte[] org.simpleflatmapper.reflect.asm.AsmFactory.generateSetterByteCodes(final Field m, final String className)",
                    "private byte[] org.simpleflatmapper.reflect.asm.AsmFactory.generateGetterByteCodes(final Field m, final String className)",
                    "private byte[] org.simpleflatmapper.reflect.asm.AsmFactory.generateGetterByteCodes(final Method m, final String className)",
                    "private byte[] org.simpleflatmapper.reflect.asm.AsmFactory.generateSetterByteCodes(final Method m, final String className)"
                ]
            },
            "2367f69b7e3ba3acd54ff3362b0cdf8a1c6ff609": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "private byte[] org.simpleflatmapper.reflect.asm.AsmFactory.generateSetterByteCodes(final Field m, final String className)",
                    "private byte[] org.simpleflatmapper.reflect.asm.AsmFactory.generateGetterByteCodes(final Field m, final String className)",
                    "private byte[] org.simpleflatmapper.reflect.asm.AsmFactory.generateGetterByteCodes(final Method m, final String className)",
                    "private byte[] org.simpleflatmapper.reflect.asm.AsmFactory.generateSetterByteCodes(final Method m, final String className)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a78f111895ac24b9984d8f99e90a07ad3e8f93fe",
        "previous_commit": "7ad94222d031908d208f6767ecc93c34e9b60a2b",
        "date": 1468160540,
        "releases": {
            "previous": "a78f111895ac24b9984d8f99e90a07ad3e8f93fe",
            "next": "a78f111895ac24b9984d8f99e90a07ad3e8f93fe"
        },
        "commit_message": "stable non quote\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a78f111895ac24b9984d8f99e90a07ad3e8f93fe": {
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.handleEndOfLineLF(int currentIndex, int currentState, CellConsumer cellConsumer)",
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.unescape(final char[] chars, final int offset, final int end)",
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.consumeOneChar(CellConsumer cellConsumer, int currentIndex, int currentState, char character)",
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.newCell(int end, final CellConsumer cellConsumer)"
                ]
            },
            "7ad94222d031908d208f6767ecc93c34e9b60a2b": {
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.handleEndOfLineLF(int currentIndex, int currentState, CellConsumer cellConsumer)",
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.unescape(final char[] chars, final int offset, final int end)",
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.consumeOneChar(CellConsumer cellConsumer, int currentIndex, int currentState, char character)",
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.newCell(int end, final CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fbb114d854a2c7864b7b615be05fcb30959349ef",
        "previous_commit": "5e4441c2b95ae38250fdb5663fe7e6b2e91ff817",
        "date": 1536571070,
        "releases": {
            "previous": "fbb114d854a2c7864b7b615be05fcb30959349ef",
            "next": "fbb114d854a2c7864b7b615be05fcb30959349ef"
        },
        "commit_message": "better selection of instantiator when context is there\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fbb114d854a2c7864b7b615be05fcb30959349ef": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.getBiInstantiator(Type target, final Class<?> s1, final Class<?> s2, List<InstantiatorDefinition> constructors, Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getInstantiator(Type target, final Class<S> source, List<InstantiatorDefinition> constructors, Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getInstantiator(InstantiatorDefinition instantiatorDefinition, Class<S> source, Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/ParamNameDeductor.java": [
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.createValueFromInstantiator(Type type, boolean builderIgnoresNullValues)"
                ]
            },
            "5e4441c2b95ae38250fdb5663fe7e6b2e91ff817": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.getBiInstantiator(Type target, final Class<?> s1, final Class<?> s2, List<InstantiatorDefinition> constructors, Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getInstantiator(Type target, final Class<S> source, List<InstantiatorDefinition> constructors, Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getInstantiator(InstantiatorDefinition instantiatorDefinition, Class<S> source, Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/ParamNameDeductor.java": [
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.createValueFromInstantiator(Type type, boolean builderIgnoresNullValues)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8c693bf8ff4eb0d7b6fe5238b93dea4150eaac82",
        "previous_commit": "c280c177e8f4d5dd1aa8af5f28338a6e618f5ead",
        "date": 1544090462,
        "releases": {
            "previous": "8c693bf8ff4eb0d7b6fe5238b93dea4150eaac82",
            "next": "8c693bf8ff4eb0d7b6fe5238b93dea4150eaac82"
        },
        "commit_message": " fix #595\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8c693bf8ff4eb0d7b6fe5238b93dea4150eaac82": {
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/ArrayPlaceHolderValueGetterSource.java": [
                    "public PlaceHolderValueGetter<T> org.simpleflatmapper.jdbc.spring.ArrayPlaceHolderValueGetterSource<T>.getPlaceHolderValueGetter(String column)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public SqlParameterSourceBuilder<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.add(JdbcColumnKey key, FieldMapperColumnDefinition<JdbcColumnKey> columnDefinition)",
                    "public PlaceHolderValueGetterSource<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.buildSource()"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceImpl.java": [
                    "public boolean org.simpleflatmapper.jdbc.spring.SqlParameterSourceImpl<T>.hasValue(String column)"
                ]
            },
            "c280c177e8f4d5dd1aa8af5f28338a6e618f5ead": {
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/ArrayPlaceHolderValueGetterSource.java": [
                    "public PlaceHolderValueGetter<T> org.simpleflatmapper.jdbc.spring.ArrayPlaceHolderValueGetterSource<T>.getPlaceHolderValueGetter(String column)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public SqlParameterSourceBuilder<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.add(JdbcColumnKey key, FieldMapperColumnDefinition<JdbcColumnKey> columnDefinition)",
                    "public PlaceHolderValueGetterSource<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.buildSource()"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceImpl.java": [
                    "public boolean org.simpleflatmapper.jdbc.spring.SqlParameterSourceImpl<T>.hasValue(String column)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8b7af8855c2a26d1712c7a587ea8b52d93557c3c",
        "previous_commit": "e98cdb4f1ff8c45ade624abbf7eefe249849818e",
        "date": 1472505984,
        "releases": {
            "previous": "8b7af8855c2a26d1712c7a587ea8b52d93557c3c",
            "next": "8b7af8855c2a26d1712c7a587ea8b52d93557c3c"
        },
        "commit_message": "Generalise discriminator mapper\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8b7af8855c2a26d1712c7a587ea8b52d93557c3c": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/DiscriminatorJdbcBuilder.java": [
                    "public String org.simpleflatmapper.jdbc.DiscriminatorJdbcBuilder<T>.toString()",
                    "public String org.simpleflatmapper.jdbc.DiscriminatorJdbcBuilder<T>.convert(ResultSet in)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperBuilder.java": [
                    "protected JdbcMapper<T> org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.newJoinJdbcMapper(Mapper<ResultSet, T> mapper)",
                    "public MappingContext<? super ResultSet> org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.newMappingContext(ResultSet rs)"
                ]
            },
            "e98cdb4f1ff8c45ade624abbf7eefe249849818e": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/DiscriminatorJdbcBuilder.java": [
                    "public String org.simpleflatmapper.jdbc.impl.DiscriminatorJdbcMapper<T>.toString()",
                    "public String org.simpleflatmapper.jdbc.impl.DiscriminatorJdbcMapper<T>.convert(ResultSet in)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperBuilder.java": [
                    "protected JdbcMapper<T> org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.newJoinJdbcMapper(Mapper<ResultSet, T> mapper)",
                    "public MappingContext<? super ResultSet> org.simpleflatmapper.jdbc.JdbcMapperBuilder<T>.newMappingContext(ResultSet rs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ab28f50030101ddae269b4b199c3628173f89f79",
        "previous_commit": "599f83d1400da5032464d9c305c02268afeea57b",
        "date": 1467636655,
        "releases": {
            "previous": "ab28f50030101ddae269b4b199c3628173f89f79",
            "next": "ab28f50030101ddae269b4b199c3628173f89f79"
        },
        "commit_message": "clean up\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ab28f50030101ddae269b4b199c3628173f89f79": {
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableCsvCharConsumer.java": [
                    "public final boolean org.sfm.csv.parser.ConfigurableCsvCharConsumer.refillBuffer()"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableTrimCsvCharConsumer.java": [
                    "public final boolean org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.refillBuffer()"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "public final boolean org.sfm.csv.parser.StandardCsvCharConsumer.refillBuffer()",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.finish(CellConsumer cellConsumer)"
                ]
            },
            "599f83d1400da5032464d9c305c02268afeea57b": {
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableCsvCharConsumer.java": [
                    "public final boolean org.sfm.csv.parser.ConfigurableCsvCharConsumer.refillBuffer()"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableTrimCsvCharConsumer.java": [
                    "public final boolean org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.refillBuffer()"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "public final boolean org.sfm.csv.parser.StandardCsvCharConsumer.refillBuffer()",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.finish(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a3ba19fd293f92b710caf2a003b4503686dda026",
        "previous_commit": "35d844a5584cbccfe5221bd8aedc2dd037a70ebf",
        "date": 1472661622,
        "releases": {
            "previous": "a3ba19fd293f92b710caf2a003b4503686dda026",
            "next": "a3ba19fd293f92b710caf2a003b4503686dda026"
        },
        "commit_message": "fix java6\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a3ba19fd293f92b710caf2a003b4503686dda026": {
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/JdbcTemplateMapperFactory.java": [
                    "public <T> MappingSqlQuery<T> org.simpleflatmapper.jdbc.spring.JdbcTemplateMapperFactory.mappingSqlQuery(Type target, DataSource ds, String sql)",
                    "public <T> RowMapperImpl<T> org.simpleflatmapper.jdbc.spring.JdbcTemplateMapperFactory.newRowMapper(Type target)",
                    "public <T> ResultSetExtractorImpl<T> org.simpleflatmapper.jdbc.spring.JdbcTemplateMapperFactory.newResultSetExtractor(Type target)",
                    "public <T> PreparedStatementCallbackImpl<T> org.simpleflatmapper.jdbc.spring.JdbcTemplateMapperFactory.newPreparedStatementCallback(Type target)"
                ]
            },
            "35d844a5584cbccfe5221bd8aedc2dd037a70ebf": {
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/JdbcTemplateMapperFactory.java": [
                    "public <T> MappingSqlQuery<T> org.simpleflatmapper.jdbc.spring.JdbcTemplateMapperFactory.mappingSqlQuery(Type target, DataSource ds, String sql)",
                    "public <T> RowMapperImpl<T> org.simpleflatmapper.jdbc.spring.JdbcTemplateMapperFactory.newRowMapper(Type target)",
                    "public <T> ResultSetExtractorImpl<T> org.simpleflatmapper.jdbc.spring.JdbcTemplateMapperFactory.newResultSetExtractor(Type target)",
                    "public <T> PreparedStatementCallbackImpl<T> org.simpleflatmapper.jdbc.spring.JdbcTemplateMapperFactory.newPreparedStatementCallback(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a859c90db4d0fc1ed9a9ec2129c2252209c49c19",
        "previous_commit": "e371b838d23716e2fcf10a5a991ee966f7aa7393",
        "date": 1548270178,
        "releases": {
            "previous": "a859c90db4d0fc1ed9a9ec2129c2252209c49c19",
            "next": "a859c90db4d0fc1ed9a9ec2129c2252209c49c19"
        },
        "commit_message": "#606 try using the method declaring class\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a859c90db4d0fc1ed9a9ec2129c2252209c49c19": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmBuilder.java": [
                    "public void org.simpleflatmapper.map.asm.MapperAsmBuilder.addMappingCall(MethodVisitor mv, String mapperClassType)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static void org.simpleflatmapper.reflect.asm.AsmUtils.invoke(MethodVisitor mv, Method method)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.invokeBiFunction(String targetType, InjectionPoint injectionPoint, String classType, Class<?> s1, Class<?> s2, MethodVisitor mv, Consumer<MethodVisitor> consumer, boolean ignoreNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorBuilder.java": [
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.invokeGetter(Parameter p, Getter<? super S, ?> getter, String classType, Class<?> sourceClass, MethodVisitor mv, Consumer<MethodVisitor> consumer, boolean ignoreNullValues)"
                ]
            },
            "e371b838d23716e2fcf10a5a991ee966f7aa7393": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmBuilder.java": [
                    "public void org.simpleflatmapper.map.asm.MapperAsmBuilder.addMappingCall(MethodVisitor mv, String mapperClassType)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static void org.simpleflatmapper.reflect.asm.AsmUtils.invoke(MethodVisitor mv, Type target, Method method)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.invokeBiFunction(String targetType, InjectionPoint injectionPoint, String classType, Class<?> s1, Class<?> s2, MethodVisitor mv, Consumer<MethodVisitor> consumer, boolean ignoreNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorBuilder.java": [
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.invokeGetter(Parameter p, Getter<? super S, ?> getter, String classType, Class<?> sourceClass, MethodVisitor mv, Consumer<MethodVisitor> consumer, boolean ignoreNullValues)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "db1acdca7f51eae83021d8669e4c507770d375a2",
        "previous_commit": "a78f111895ac24b9984d8f99e90a07ad3e8f93fe",
        "date": 1468180453,
        "releases": {
            "previous": "db1acdca7f51eae83021d8669e4c507770d375a2",
            "next": "db1acdca7f51eae83021d8669e4c507770d375a2"
        },
        "commit_message": "more consistent perf\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "db1acdca7f51eae83021d8669e4c507770d375a2": {
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.StandardCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.finish(CellConsumer cellConsumer)",
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.newCell(int end, final CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)"
                ]
            },
            "a78f111895ac24b9984d8f99e90a07ad3e8f93fe": {
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "public boolean org.sfm.csv.parser.StandardCsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.finish(CellConsumer cellConsumer)",
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.newCell(int end, final CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4af8c2cd854173fd7bf1777385d200a26628e5cb",
        "previous_commit": "66485ae3df2c250db7058210d86dfd8cac5f4e89",
        "date": 1496926188,
        "releases": {
            "previous": "4af8c2cd854173fd7bf1777385d200a26628e5cb",
            "next": "4af8c2cd854173fd7bf1777385d200a26628e5cb"
        },
        "commit_message": " #440 use name and type to look property\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4af8c2cd854173fd7bf1777385d200a26628e5cb": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private List<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.listProperties(final ReflectionService reflectService, final Type targetType)",
                    "private <P> void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.register(String propertyName, Type type, ScoredGetter<T, P> getter, ScoredSetter<T, P> setter, Object[] defineProperties)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "private int org.simpleflatmapper.reflect.meta.PropertyFinder<T>.getterSetterCompare(PropertyMeta<?, ?> p1, PropertyMeta<?, ?> p2)",
                    "private int org.simpleflatmapper.reflect.meta.PropertyFinder<T>.nbGetterSetter(PropertyMeta<?, ?> p)"
                ]
            },
            "66485ae3df2c250db7058210d86dfd8cac5f4e89": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private List<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.listProperties(final ReflectionService reflectService, final Type targetType)",
                    "private <P> void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.register(String propertyName, Type type, ScoredGetter<T, P> getter, ScoredSetter<T, P> setter, Object[] defineProperties)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "private int org.simpleflatmapper.reflect.meta.PropertyFinder<T>.getterSetterCompare(PropertyMeta<?, ?> p1, PropertyMeta<?, ?> p2)",
                    "private int org.simpleflatmapper.reflect.meta.PropertyFinder<T>.nbGetterSetter(PropertyMeta<?, ?> p)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "538c3ce645948f829f61aa6c36edc92b4029fabf",
        "previous_commit": "bbb241bb4ea3f274ffa7f1aa84544c570895f113",
        "date": 1455224462,
        "releases": {
            "previous": "538c3ce645948f829f61aa6c36edc92b4029fabf",
            "next": "538c3ce645948f829f61aa6c36edc92b4029fabf"
        },
        "commit_message": "#287 name clean up\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "538c3ce645948f829f61aa6c36edc92b4029fabf": {
                "sfm/src/main/java/org/sfm/reflect/BuilderInstantiatorDefinitionFactory.java": [
                    "private static BuilderInstantiatorDefinition org.sfm.reflect.BuilderInstantiatorDefinitionFactory.getDefinitionForBuilder(ExecutableInstantiatorDefinition def, Type builderType, Type target)"
                ],
                "sfm/src/main/java/org/sfm/reflect/GetterHelper.java": [
                    "public static String org.sfm.reflect.GetterHelper.getPropertyNameFromMethodName(final String name)"
                ],
                "sfm/src/main/java/org/sfm/reflect/SetterHelper.java": [
                    "public static String org.sfm.reflect.SetterHelper.getPropertyNameFromMethodName(final String name)"
                ],
                "sfm/src/main/java/org/sfm/reflect/meta/ObjectClassMeta.java": [
                    "private Map<String, String> org.sfm.reflect.meta.ObjectClassMeta<T>.aliases(final ReflectionService reflectService, Class<T> target)"
                ]
            },
            "bbb241bb4ea3f274ffa7f1aa84544c570895f113": {
                "sfm/src/main/java/org/sfm/reflect/BuilderInstantiatorDefinitionFactory.java": [
                    "private static BuilderInstantiatorDefinition org.sfm.reflect.BuilderInstantiatorDefinitionFactory.getDefinitionForBuilder(ExecutableInstantiatorDefinition def, Type builderType, Type target)"
                ],
                "sfm/src/main/java/org/sfm/reflect/GetterHelper.java": [
                    "public static String org.sfm.reflect.GetterHelper.getPropertyNameFromMethodName(final String name)"
                ],
                "sfm/src/main/java/org/sfm/reflect/SetterHelper.java": [
                    "public static String org.sfm.reflect.SetterHelper.getPropertyNameFromMethodName(final String name)"
                ],
                "sfm/src/main/java/org/sfm/reflect/meta/ObjectClassMeta.java": [
                    "private Map<String, String> org.sfm.reflect.meta.ObjectClassMeta<T>.aliases(final ReflectionService reflectService, Class<T> target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a4b3c12a674fca2a1932cc066f8770a04498c19b",
        "previous_commit": "5a9658bbf83480ce8dce2b856bc66fa36cc8667c",
        "date": 1522509266,
        "releases": {
            "previous": "a4b3c12a674fca2a1932cc066f8770a04498c19b",
            "next": "a4b3c12a674fca2a1932cc066f8770a04498c19b"
        },
        "commit_message": "fix tail\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a4b3c12a674fca2a1932cc066f8770a04498c19b": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read()",
                    "public int org.simpleflatmapper.util.RingBufferReader.read()"
                ]
            },
            "5a9658bbf83480ce8dce2b856bc66fa36cc8667c": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read()",
                    "public int org.simpleflatmapper.util.RingBufferReader.read()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "44584426347bb1b1cad74dd2738029de10d2b88e",
        "previous_commit": "f2db0bcbd8f1c2f046da5cb279bf318046307ac9",
        "date": 1561666128,
        "releases": {
            "previous": "44584426347bb1b1cad74dd2738029de10d2b88e",
            "next": "44584426347bb1b1cad74dd2738029de10d2b88e"
        },
        "commit_message": "better handling of non mapped property and invalidation, fix datasax mapper from list\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "44584426347bb1b1cad74dd2738029de10d2b88e": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxBinder.java": [
                    "protected BoundStatementMapper<T> org.simpleflatmapper.datastax.DatastaxBinder<T>.createMapper(MapperKey<DatastaxColumnKey> mapperKey)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.found(final PropertyMeta propertyMeta, final Runnable selectionCallback, final PropertyMatchingScore score, TypeAffinityScorer typeAffinityScorer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties, FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ]
            },
            "f2db0bcbd8f1c2f046da5cb279bf318046307ac9": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxBinder.java": [
                    "protected BoundStatementMapper<T> org.simpleflatmapper.datastax.DatastaxBinder<T>.createMapper(MapperKey<DatastaxColumnKey> mapperKey)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)",
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.found(final PropertyMeta propertyMeta, final Runnable selectionCallback, final PropertyMatchingScore score, TypeAffinityScorer typeAffinityScorer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties, FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c195e2e606cdf28e4c7e819792394070db692e1e",
        "previous_commit": "a1e2d2a1185dfd15bacd5813f772afdca86cfcb4",
        "date": 1459364314,
        "releases": {
            "previous": "c195e2e606cdf28e4c7e819792394070db692e1e",
            "next": "c195e2e606cdf28e4c7e819792394070db692e1e"
        },
        "commit_message": " #305 move quoteChar as param\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c195e2e606cdf28e4c7e819792394070db692e1e": {
                "sfm/src/main/java/org/sfm/csv/parser/AbstractCsvCharConsumer.java": [
                    "protected void org.sfm.csv.parser.AbstractCsvCharConsumer.newCell(int currentIndex, CellConsumer cellConsumer)",
                    "protected int org.sfm.csv.parser.AbstractCsvCharConsumer.unescape(final char[] chars, final int offset, final int length, char quoteChar)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableTrimCsvCharConsumer.java": [
                    "protected int org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.unescape(final char[] chars, final int offset, final int length, char quoteChar)",
                    "protected void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.newCell(int currentIndex, CellConsumer cellConsumer)"
                ]
            },
            "a1e2d2a1185dfd15bacd5813f772afdca86cfcb4": {
                "sfm/src/main/java/org/sfm/csv/parser/AbstractCsvCharConsumer.java": [
                    "protected void org.sfm.csv.parser.AbstractCsvCharConsumer.newCell(int currentIndex, CellConsumer cellConsumer)",
                    "protected int org.sfm.csv.parser.AbstractCsvCharConsumer.unescape(final char[] chars, final int offset, final int length)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/ConfigurableTrimCsvCharConsumer.java": [
                    "protected int org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.unescape(final char[] chars, final int offset, final int length)",
                    "protected void org.sfm.csv.parser.ConfigurableTrimCsvCharConsumer.newCell(int currentIndex, CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b95b151d07f85d88a14ced4bb96d617c36f59623",
        "previous_commit": "f35faf2f8e0e70e899dcd6ce8bf8148cac4d5ff3",
        "date": 1553703964,
        "releases": {
            "previous": "b95b151d07f85d88a14ced4bb96d617c36f59623",
            "next": "b95b151d07f85d88a14ced4bb96d617c36f59623"
        },
        "commit_message": " #618 easier getter override\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b95b151d07f85d88a14ced4bb96d617c36f59623": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperFactory.java": [
                    "public <T> DatastaxMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilder(ClassMeta<T> classMeta)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperFactory.java": [
                    "public JdbcMapperFactory org.simpleflatmapper.jdbc.JdbcMapperFactory.getterFactory(final GetterFactory<ResultSet, JdbcColumnKey> getterFactory)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/RecordGetterFactory.java": [
                    "public <P> Getter<Record, P> org.simpleflatmapper.jooq.RecordGetterFactory.newGetter(Type genericType, JooqFieldKey key, Object... properties)"
                ],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/SheetMapperFactory.java": [
                    "public SheetMapperFactory org.simpleflatmapper.poi.SheetMapperFactory.getterFactory(GetterFactory<Row, CsvColumnKey> getterFactory)"
                ]
            },
            "f35faf2f8e0e70e899dcd6ce8bf8148cac4d5ff3": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperFactory.java": [
                    "public <T> DatastaxMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilder(ClassMeta<T> classMeta)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcMapperFactory.java": [
                    "public JdbcMapperFactory org.simpleflatmapper.jdbc.JdbcMapperFactory.getterFactory(final GetterFactory<ResultSet, JdbcColumnKey> getterFactory)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/RecordGetterFactory.java": [],
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/SheetMapperFactory.java": [
                    "public SheetMapperFactory org.simpleflatmapper.poi.SheetMapperFactory.getterFactory(GetterFactory<Row, CsvColumnKey> getterFactory)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "35a01bc0a1b9b3ffa55e411a58b2ff91c00353b0",
        "previous_commit": "d2cb9cc961fdc5060e1ee28f6c23e00bd83a341a",
        "date": 1488302742,
        "releases": {
            "previous": "35a01bc0a1b9b3ffa55e411a58b2ff91c00353b0",
            "next": "35a01bc0a1b9b3ffa55e411a58b2ff91c00353b0"
        },
        "commit_message": " #416 fix PropertyFinder not return propertly in List, Map, Optional\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "35a01bc0a1b9b3ffa55e411a58b2ff91c00353b0": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperBiInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> BiInstantiator<S, MappingContext<? super S>, T> org.simpleflatmapper.map.mapper.MapperBiInstantiatorFactory.getBiInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, BiFunction<? super S, ? super MappingContext<? super S>, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.found(final PropertyMeta propertyMeta, final Runnable selectionCallback, final PropertyMatchingScore score)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForSubProperty(\t\t\tfinal PropertyNameMatcher propertyNameMatcher,\t\t\tfinal PropertyMeta<T, ?> prop,\t\t\tfinal FoundProperty foundProperty,\t\t\tfinal PropertyMatchingScore score,\t\t\tfinal PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, final FoundProperty foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)"
                ]
            },
            "d2cb9cc961fdc5060e1ee28f6c23e00bd83a341a": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperBiInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> BiInstantiator<S, MappingContext<? super S>, T> org.simpleflatmapper.map.mapper.MapperBiInstantiatorFactory.getBiInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, BiFunction<? super S, ? super MappingContext<? super S>, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.found(final PropertyMeta propertyMeta, final Runnable selectionCallback, final PropertyMatchingScore score)",
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForSubProperty(\t\t\tfinal PropertyNameMatcher propertyNameMatcher,\t\t\tfinal PropertyMeta<T, ?> prop,\t\t\tfinal FoundProperty foundProperty,\t\t\tfinal PropertyMatchingScore score,\t\t\tfinal PropertyFinderTransformer propertyFinderTransformer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.extrapolateIndex(final PropertyNameMatcher propertyNameMatcher, final FoundProperty foundProperty, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0556a57478bb00748c415e13521368a1d402ef59",
        "previous_commit": "fbabb9ffa422d0b50052dfa0afdfc5bf1925e6cc",
        "date": 1467790627,
        "releases": {
            "previous": "0556a57478bb00748c415e13521368a1d402ef59",
            "next": "0556a57478bb00748c415e13521368a1d402ef59"
        },
        "commit_message": "refactor following point\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0556a57478bb00748c415e13521368a1d402ef59": {
                "sfm/src/main/java/org/sfm/utils/ParallelReader.java": [
                    "private int org.sfm.utils.ParallelReader.read(char[] cbuf, int off, int len, long lhead, long ltail)",
                    "public int org.sfm.utils.ParallelReader.read(char[] cbuf, int off, int len)",
                    "public void org.sfm.utils.ParallelReader.run()",
                    "private void org.sfm.utils.ParallelReader.waitingStrategy()"
                ]
            },
            "fbabb9ffa422d0b50052dfa0afdfc5bf1925e6cc": {
                "sfm/src/main/java/org/sfm/utils/ParallelReader.java": [
                    "private int org.sfm.utils.ParallelReader.read(char[] cbuf, int off, int len, long lhead, long ltail)",
                    "public int org.sfm.utils.ParallelReader.read(char[] cbuf, int off, int len)",
                    "public void org.sfm.utils.ParallelReader.run()",
                    "private void org.sfm.utils.ParallelReader.waitingStrategy()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6cd366502857119d0f5053825be2f6ea56ce5c91",
        "previous_commit": "70d71d723c1ff1e72eeb1e1416be0dd5220c8f23",
        "date": 1470780368,
        "releases": {
            "previous": "6cd366502857119d0f5053825be2f6ea56ce5c91",
            "next": "6cd366502857119d0f5053825be2f6ea56ce5c91"
        },
        "commit_message": "user Number java base parsing\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6cd366502857119d0f5053825be2f6ea56ce5c91": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/ByteCellValueReaderImpl.java": [
                    "public byte org.simpleflatmapper.csv.impl.cellreader.ByteCellValueReaderImpl.readByte(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/IntegerCellValueReaderImpl.java": [
                    "public static int org.simpleflatmapper.csv.impl.cellreader.IntegerCellValueReaderImpl.parseInt(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/LongCellValueReaderImpl.java": [
                    "public static long org.simpleflatmapper.csv.impl.cellreader.LongCellValueReaderImpl.parseLong(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/ShortCellValueReaderImpl.java": [
                    "public short org.simpleflatmapper.csv.impl.cellreader.ShortCellValueReaderImpl.readShort(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ]
            },
            "70d71d723c1ff1e72eeb1e1416be0dd5220c8f23": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/ByteCellValueReaderImpl.java": [
                    "public byte org.simpleflatmapper.csv.impl.cellreader.ByteCellValueReaderImpl.readByte(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/IntegerCellValueReaderImpl.java": [
                    "public static int org.simpleflatmapper.csv.impl.cellreader.IntegerCellValueReaderImpl.parseInt(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/LongCellValueReaderImpl.java": [
                    "public static long org.simpleflatmapper.csv.impl.cellreader.LongCellValueReaderImpl.parseLong(char[] chars, int offset, int length)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/ShortCellValueReaderImpl.java": [
                    "public short org.simpleflatmapper.csv.impl.cellreader.ShortCellValueReaderImpl.readShort(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bbb241bb4ea3f274ffa7f1aa84544c570895f113",
        "previous_commit": "af434e2ef0c1c70c2e513298f213826e4250f5c3",
        "date": 1455224462,
        "releases": {
            "previous": "bbb241bb4ea3f274ffa7f1aa84544c570895f113",
            "next": "bbb241bb4ea3f274ffa7f1aa84544c570895f113"
        },
        "commit_message": "#293 add doc url\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bbb241bb4ea3f274ffa7f1aa84544c570895f113": {
                "sfm/src/main/java/org/sfm/jdbc/PreparedStatementMapperBuilder.java": [
                    "public MultiIndexFieldMapper<T>[] org.sfm.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()",
                    "private <P, C> MultiIndexFieldMapper<T> org.sfm.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)"
                ],
                "sfm/src/main/java/org/sfm/map/error/LogMapperBuilderErrorHandler.java": [
                    "public void org.sfm.map.error.LogMapperBuilderErrorHandler.propertyNotFound(final Type target, final String property)"
                ],
                "sfm/src/main/java/org/sfm/map/error/RethrowMapperBuilderErrorHandler.java": [
                    "public void org.sfm.map.error.RethrowMapperBuilderErrorHandler.propertyNotFound(final Type target, final String property)"
                ]
            },
            "af434e2ef0c1c70c2e513298f213826e4250f5c3": {
                "sfm/src/main/java/org/sfm/jdbc/PreparedStatementMapperBuilder.java": [
                    "public MultiIndexFieldMapper<T>[] org.sfm.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()",
                    "private <P, C> MultiIndexFieldMapper<T> org.sfm.jdbc.PreparedStatementMapperBuilder<T>.newCollectionFieldMapper(PropertyMapping<T, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)"
                ],
                "sfm/src/main/java/org/sfm/map/error/LogMapperBuilderErrorHandler.java": [
                    "public void org.sfm.map.error.LogMapperBuilderErrorHandler.propertyNotFound(final Type target, final String property)"
                ],
                "sfm/src/main/java/org/sfm/map/error/RethrowMapperBuilderErrorHandler.java": [
                    "public void org.sfm.map.error.RethrowMapperBuilderErrorHandler.propertyNotFound(final Type target, final String property)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1ad193b6cefee45a6a42ba05a6165d27e63c4aa1",
        "previous_commit": "148be01ffe91fecf48ae8c3c204e80b9445f13ae",
        "date": 1510741841,
        "releases": {
            "previous": "1ad193b6cefee45a6a42ba05a6165d27e63c4aa1",
            "next": "1ad193b6cefee45a6a42ba05a6165d27e63c4aa1"
        },
        "commit_message": "keep track of the need to unescape or not\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1ad193b6cefee45a6a42ba05a6165d27e63c4aa1": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, int start, int end, CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.newCell(char[] chars, int start, int end, CellConsumer cellConsumer, int state)"
                ]
            },
            "148be01ffe91fecf48ae8c3c204e80b9445f13ae": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, int start, int end, CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.newCell(char[] chars, int start, int end, CellConsumer cellConsumer, int state)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3db50456f7cada08b7d59b14d6a5f85b65cf6b4f",
        "previous_commit": "0318c51ea2eb9afd8a5f8ac11b4af3b64dc687bf",
        "date": 1485881522,
        "releases": {
            "previous": "3db50456f7cada08b7d59b14d6a5f85b65cf6b4f",
            "next": "3db50456f7cada08b7d59b14d6a5f85b65cf6b4f"
        },
        "commit_message": " #399 use BiInstantiator to expose MappingContext to what use to be MapperGetterMapper\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3db50456f7cada08b7d59b14d6a5f85b65cf6b4f": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetectorMappingContext.java": [
                    "public void org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.handle(S source)",
                    "private BreakDetector<S> org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.getBreakDetector(int i)",
                    "public void org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.markAsBroken()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> Instantiator<S,T> org.simpleflatmapper.map.mapper.MapperInstantiatorFactory.getInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, Getter<? super S, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled)"
                ]
            },
            "0318c51ea2eb9afd8a5f8ac11b4af3b64dc687bf": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetectorMappingContext.java": [
                    "public void org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.handle(S source)",
                    "private BreakDetector<S> org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.getBreakDetector(int i)",
                    "public void org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.markAsBroken()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> Instantiator<S,T> org.simpleflatmapper.map.mapper.MapperInstantiatorFactory.getInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, Getter<? super S, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "675306966bb2f99acfbdbbb54b6ab20bb7049d2e",
        "previous_commit": "9e67a1ff05f24d2b8f383abdd1068f726be9816a",
        "date": 1468852648,
        "releases": {
            "previous": "675306966bb2f99acfbdbbb54b6ab20bb7049d2e",
            "next": "675306966bb2f99acfbdbbb54b6ab20bb7049d2e"
        },
        "commit_message": " #328 exclude junit from isolated classloader\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "675306966bb2f99acfbdbbb54b6ab20bb7049d2e": {
                "sfm-test/src/main/java/org/sfm/utils/LibrarySetClassLoader.java": [
                    "private static URL[] org.sfm.utils.LibrarySetClassLoader.getUrls(String[] libraries, Class<?>[] includes)",
                    "protected Class<?> org.sfm.utils.LibrarySetClassLoader.findClass(String name)",
                    "public Class<?> org.sfm.utils.LibrarySetClassLoader.loadClass(String name)"
                ]
            },
            "9e67a1ff05f24d2b8f383abdd1068f726be9816a": {
                "sfm-test/src/main/java/org/sfm/utils/LibrarySetClassLoader.java": [
                    "private static URL[] org.sfm.utils.LibrarySetClassLoader.getUrls(String[] libraries, Class<?>[] includes)",
                    "protected Class<?> org.sfm.utils.LibrarySetClassLoader.findClass(String name)",
                    "public Class<?> org.sfm.utils.LibrarySetClassLoader.loadClass(String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "171a1cfc4e0cb341589a62cff4e65001b14db410",
        "previous_commit": "d99d9b5367ee5c0a0035c4f8ddeb31873f2a6c6a",
        "date": 1456410377,
        "releases": {
            "previous": "171a1cfc4e0cb341589a62cff4e65001b14db410",
            "next": "171a1cfc4e0cb341589a62cff4e65001b14db410"
        },
        "commit_message": " remove unused tuple setter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "171a1cfc4e0cb341589a62cff4e65001b14db410": {
                "sfm-datastax/src/main/java/org/sfm/datastax/DatastaxMapperFactory.java": [
                    "public <T> SettableDataMapperBuilder<T> org.sfm.datastax.DatastaxMapperFactory.newBuilderFrom(Type type)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/SettableDataSetterFactory.java": [
                    "private Converter<?, ?> org.sfm.datastax.impl.SettableDataSetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt)",
                    "public <P> Setter<SettableByIndexData, P> org.sfm.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey, ? extends ColumnDefinition<DatastaxColumnKey, ?>> arg)"
                ]
            },
            "d99d9b5367ee5c0a0035c4f8ddeb31873f2a6c6a": {
                "sfm-datastax/src/main/java/org/sfm/datastax/DatastaxMapperFactory.java": [
                    "public <T> SettableDataMapperBuilder<T> org.sfm.datastax.DatastaxMapperFactory.newBuilderFrom(Type type)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/SettableDataSetterFactory.java": [
                    "private Converter<?, ?> org.sfm.datastax.impl.SettableDataSetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt)",
                    "public <P> Setter<SettableByIndexData, P> org.sfm.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey, ? extends ColumnDefinition<DatastaxColumnKey, ?>> arg)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b871c2d30943b11a5c2acc9233a154370ff84e58",
        "previous_commit": "538c3ce645948f829f61aa6c36edc92b4029fabf",
        "date": 1455226667,
        "releases": {
            "previous": "b871c2d30943b11a5c2acc9233a154370ff84e58",
            "next": "b871c2d30943b11a5c2acc9233a154370ff84e58"
        },
        "commit_message": "#287 handle void builder setter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b871c2d30943b11a5c2acc9233a154370ff84e58": {
                "sfm/src/main/java/org/sfm/reflect/BuilderInstantiatorDefinitionFactory.java": [
                    "private static BuilderInstantiatorDefinition org.sfm.reflect.BuilderInstantiatorDefinitionFactory.getDefinitionForBuilder(ExecutableInstantiatorDefinition def, Type builderType, Type target)"
                ],
                "sfm/src/main/java/org/sfm/reflect/InstantiatorFactory.java": [
                    "private <S, T> Instantiator<S, T> org.sfm.reflect.InstantiatorFactory.builderInstantiator(BuilderInstantiatorDefinition instantiatorDefinition,\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled)"
                ],
                "sfm/src/main/java/org/sfm/reflect/asm/InstantiatorBuilder.java": [
                    "private static <S> void org.sfm.reflect.asm.InstantiatorBuilder.appendNewInstance(Class<?> sourceClass, BuilderInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Map<Parameter, Method> setters)"
                ]
            },
            "538c3ce645948f829f61aa6c36edc92b4029fabf": {
                "sfm/src/main/java/org/sfm/reflect/BuilderInstantiatorDefinitionFactory.java": [
                    "private static BuilderInstantiatorDefinition org.sfm.reflect.BuilderInstantiatorDefinitionFactory.getDefinitionForBuilder(ExecutableInstantiatorDefinition def, Type builderType, Type target)"
                ],
                "sfm/src/main/java/org/sfm/reflect/InstantiatorFactory.java": [
                    "private <S, T> Instantiator<S, T> org.sfm.reflect.InstantiatorFactory.builderInstantiator(BuilderInstantiatorDefinition instantiatorDefinition,\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled)"
                ],
                "sfm/src/main/java/org/sfm/reflect/asm/InstantiatorBuilder.java": [
                    "private static <S> void org.sfm.reflect.asm.InstantiatorBuilder.appendNewInstance(Class<?> sourceClass, BuilderInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Map<Parameter, Method> setters)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8359a08abb3a321b3a47f91cd4046ca1a88590fd",
        "previous_commit": "207e3ae9fcf49687ba86abd770d3ed7e1d4ebfb7",
        "date": 1454863853,
        "releases": {
            "previous": "8359a08abb3a321b3a47f91cd4046ca1a88590fd",
            "next": "8359a08abb3a321b3a47f91cd4046ca1a88590fd"
        },
        "commit_message": "#282 look up for name\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8359a08abb3a321b3a47f91cd4046ca1a88590fd": {
                "sfm/src/main/java/org/sfm/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitions(Type target, ParameterBuilder parameterBuilder)",
                    "public static List<InstantiatorDefinition> org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitions(Type target)"
                ],
                "sfm/src/main/java/org/sfm/reflect/ReflectionService.java": [
                    "public List<InstantiatorDefinition> org.sfm.reflect.ReflectionService.extractConstructors(Type target)"
                ]
            },
            "207e3ae9fcf49687ba86abd770d3ed7e1d4ebfb7": {
                "sfm/src/main/java/org/sfm/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.sfm.reflect.ReflectionInstantiatorDefinitionFactory.extractDefinitions(Type target)"
                ],
                "sfm/src/main/java/org/sfm/reflect/ReflectionService.java": [
                    "public List<InstantiatorDefinition> org.sfm.reflect.ReflectionService.extractConstructors(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5d2ec6c76d78986562d11366d633e20e0117e6dc",
        "previous_commit": "10d3dfdc2dd993937eec6c3774ec3ee2e2c6c29a",
        "date": 1475352333,
        "releases": {
            "previous": "5d2ec6c76d78986562d11366d633e20e0117e6dc",
            "next": "5d2ec6c76d78986562d11366d633e20e0117e6dc"
        },
        "commit_message": " #345 extract service locator logic\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5d2ec6c76d78986562d11366d633e20e0117e6dc": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/AbstractConverterFactoryProducer.java": [
                    "protected <I, O> void org.simpleflatmapper.converter.AbstractConverterFactoryProducer.constantConverter( Consumer<? super ConverterFactory<?, ?>> consumer, Class<I> from, Class<O> to, Converter<I, O> converter)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AliasProviderService.java": [
                    "private static AliasProvider org.simpleflatmapper.reflect.meta.AliasProviderService.findAliasProviders()"
                ]
            },
            "10d3dfdc2dd993937eec6c3774ec3ee2e2c6c29a": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/AbstractConverterFactoryProducer.java": [
                    "protected <I, O> void org.simpleflatmapper.converter.AbstractConverterFactoryProducer.constantConverter( Consumer<ConverterFactory> consumer, Class<I> from, Class<O> to, Converter<I, O> converter)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AliasProviderService.java": [
                    "private static AliasProvider org.simpleflatmapper.reflect.meta.AliasProviderService.findAliasProviders()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0349c522afcc8a0fe2f2f53b51b3268382ae6a7d",
        "previous_commit": "f33699c072b8e589c00311f947ad7dd583ed374b",
        "date": 1539081990,
        "releases": {
            "previous": "0349c522afcc8a0fe2f2f53b51b3268382ae6a7d",
            "next": "0349c522afcc8a0fe2f2f53b51b3268382ae6a7d"
        },
        "commit_message": "more clean up\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0349c522afcc8a0fe2f2f53b51b3268382ae6a7d": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.lookForProperties(PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)",
                    "public Type org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.getPropertyType()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/KeyProperty.java": [
                    "public boolean org.simpleflatmapper.map.property.KeyProperty.test(PropertyMeta<?, ?> propertyMeta)"
                ]
            },
            "f33699c072b8e589c00311f947ad7dd583ed374b": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorPropertyFinder.java": [
                    "public void org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.lookForProperties(PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)",
                    "public Type org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.getPropertyType()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/KeyProperty.java": [
                    "public boolean org.simpleflatmapper.map.property.KeyProperty.test(PropertyMeta<?, ?> propertyMeta)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6e99418efcf72551eb9d2222fc3197cbc9168ec0",
        "previous_commit": "86914a8b429b53f71debbde2025bca2e7e429c0b",
        "date": 1542109068,
        "releases": {
            "previous": "6e99418efcf72551eb9d2222fc3197cbc9168ec0",
            "next": "6e99418efcf72551eb9d2222fc3197cbc9168ec0"
        },
        "commit_message": "Enable builder extends\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6e99418efcf72551eb9d2222fc3197cbc9168ec0": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "public void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.accept(MethodVisitor mv)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstanceBuilder(Class<?> s1, Class<?> s2, BuilderInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Map<Parameter, Method> setters, boolean ignoreNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/BuilderInstantiatorDefinitionFactory.java": [
                    "private static BuilderInstantiatorDefinition org.simpleflatmapper.reflect.impl.BuilderInstantiatorDefinitionFactory.getDefinitionForBuilder(ExecutableInstantiatorDefinition def, Type builderType, Type target)"
                ]
            },
            "86914a8b429b53f71debbde2025bca2e7e429c0b": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "public void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.accept(MethodVisitor mv)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstanceBuilder(Class<?> s1, Class<?> s2, BuilderInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Map<Parameter, Method> setters, boolean ignoreNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/BuilderInstantiatorDefinitionFactory.java": [
                    "private static BuilderInstantiatorDefinition org.simpleflatmapper.reflect.impl.BuilderInstantiatorDefinitionFactory.getDefinitionForBuilder(ExecutableInstantiatorDefinition def, Type builderType, Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7b1b7fca4f7a88b0859468b6be41f75fed0c9726",
        "previous_commit": "a80a9bc262e53cc423ab63c79d3fdba16b5f13d8",
        "date": 1528571610,
        "releases": {
            "previous": "7b1b7fca4f7a88b0859468b6be41f75fed0c9726",
            "next": "7b1b7fca4f7a88b0859468b6be41f75fed0c9726"
        },
        "commit_message": " #517 first hacky attempt at collecting parsing errors\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7b1b7fca4f7a88b0859468b6be41f75fed0c9726": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvMapperImpl.java": [
                    "protected CsvMapperCellConsumer<T> org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.newCellConsumer(final CheckedConsumer<? super T> handler, BreakDetector parentBreakDetector, boolean appendCollection)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvMapperCellHandler.java": [
                    "protected final void org.simpleflatmapper.csv.mapper.CsvMapperCellHandler<T>.fieldError(int cellIndex, Exception e)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ]
            },
            "a80a9bc262e53cc423ab63c79d3fdba16b5f13d8": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvMapperImpl.java": [
                    "protected CsvMapperCellConsumer<T> org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.newCellConsumer(final CheckedConsumer<? super T> handler, BreakDetector parentBreakDetector, boolean appendCollection)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvMapperCellHandler.java": [
                    "protected final void org.simpleflatmapper.csv.mapper.CsvMapperCellHandler<T>.fieldError(int cellIndex, Exception e)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "af434e2ef0c1c70c2e513298f213826e4250f5c3",
        "previous_commit": "1b5d403abda0882aad80ec1f8a09c7edcaaedfc3",
        "date": 1455224462,
        "releases": {
            "previous": "af434e2ef0c1c70c2e513298f213826e4250f5c3",
            "next": "af434e2ef0c1c70c2e513298f213826e4250f5c3"
        },
        "commit_message": "#288 fix factory method\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "af434e2ef0c1c70c2e513298f213826e4250f5c3": {
                "sfm/src/main/java/org/sfm/csv/CsvMapperFactory.java": [
                    "public <T> CsvMapper<T> org.sfm.csv.CsvMapperFactory.newMapper(final Type target)",
                    "public <T> CsvMapperBuilder<T> org.sfm.csv.CsvMapperFactory.newBuilder(final Type target)"
                ],
                "sfm/src/main/java/org/sfm/reflect/ReflectionService.java": [
                    "public List<InstantiatorDefinition> org.sfm.reflect.ReflectionService.extractInstantiator(Type target, Member extraInstantiator)"
                ]
            },
            "1b5d403abda0882aad80ec1f8a09c7edcaaedfc3": {
                "sfm/src/main/java/org/sfm/csv/CsvMapperFactory.java": [
                    "public <T> CsvMapper<T> org.sfm.csv.CsvMapperFactory.newMapper(final Type target)",
                    "public <T> CsvMapperBuilder<T> org.sfm.csv.CsvMapperFactory.newBuilder(final Type target)"
                ],
                "sfm/src/main/java/org/sfm/reflect/ReflectionService.java": [
                    "public List<InstantiatorDefinition> org.sfm.reflect.ReflectionService.extractInstantiator(Type target, Member extraInstantiator)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "eb32da8113970b2c5ae8e8ce9fbf92b6b757edf7",
        "previous_commit": "236b2db117072f163a587fa16103fe8e3bb7e1c1",
        "date": 1531501249,
        "releases": {
            "previous": "eb32da8113970b2c5ae8e8ce9fbf92b6b757edf7",
            "next": "eb32da8113970b2c5ae8e8ce9fbf92b6b757edf7"
        },
        "commit_message": "fix #538\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "eb32da8113970b2c5ae8e8ce9fbf92b6b757edf7": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getInstantiator(InstantiatorDefinition instantiatorDefinition, Class<S> source, Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "public List<InstantiatorDefinition> org.simpleflatmapper.reflect.ReflectionService.extractInstantiator(Type target, Member extraInstantiator)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorBuilder.java": [
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.invokeGetter(Parameter p, Getter<? super S, ?> getter, String classType, Class<?> sourceClass, MethodVisitor mv, Consumer<MethodVisitor> consumer, boolean ignoreNullValues)"
                ]
            },
            "236b2db117072f163a587fa16103fe8e3bb7e1c1": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getInstantiator(InstantiatorDefinition instantiatorDefinition, Class<S> source, Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "public List<InstantiatorDefinition> org.simpleflatmapper.reflect.ReflectionService.extractInstantiator(Type target, Member extraInstantiator)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorBuilder.java": [
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.invokeGetter(Parameter p, Getter<? super S, ?> getter, String classType, Class<?> sourceClass, MethodVisitor mv, Consumer<MethodVisitor> consumer, boolean ignoreNullValues)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a97bb5ec030097636d748bbb52bdf12bfce34c03",
        "previous_commit": "d213b445791fe221657bf820f6c4b8f79f46bb92",
        "date": 1522421278,
        "releases": {
            "previous": "a97bb5ec030097636d748bbb52bdf12bfce34c03",
            "next": "a97bb5ec030097636d748bbb52bdf12bfce34c03"
        },
        "commit_message": "Revert \"simplify reading\"\n\nThis reverts commit 47922f0d9ad794749a1d71b632ce0a9abacddaf0.\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a97bb5ec030097636d748bbb52bdf12bfce34c03": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read(char[] cbuf, int off, int len)",
                    "private int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len, long currentHead, long currentTail)"
                ]
            },
            "d213b445791fe221657bf820f6c4b8f79f46bb92": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read(char[] cbuf, int off, int len)",
                    "private int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len, long currentHead, long currentTail)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ab4e74daf5bb354006c6bcfc183b0b0f6450e1a2",
        "previous_commit": "779160fbe296e72633d6f8cd85815b536b1ac958",
        "date": 1536611590,
        "releases": {
            "previous": "ab4e74daf5bb354006c6bcfc183b0b0f6450e1a2",
            "next": "ab4e74daf5bb354006c6bcfc183b0b0f6450e1a2"
        },
        "commit_message": "fix #549  #548 after increase coverage\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ab4e74daf5bb354006c6bcfc183b0b0f6450e1a2": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/Row.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.Row.isEmpty()",
                    "public boolean org.simpleflatmapper.lightningcsv.Row.isEmpty()",
                    "public Collection<String> org.simpleflatmapper.lightningcsv.Row.values()"
                ]
            },
            "779160fbe296e72633d6f8cd85815b536b1ac958": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/Row.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.Row.isEmpty()",
                    "public boolean org.simpleflatmapper.lightningcsv.Row.isEmpty()",
                    "public Collection<String> org.simpleflatmapper.lightningcsv.Row.values()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e994c03625ff2cf56054e543998c3a54f5831a50",
        "previous_commit": "3af5d03048ea7a8923fa3b1bfcfb298b0c436b33",
        "date": 1534170586,
        "releases": {
            "previous": "e994c03625ff2cf56054e543998c3a54f5831a50",
            "next": "e994c03625ff2cf56054e543998c3a54f5831a50"
        },
        "commit_message": "add annotation to indicator class is modify injected values\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e994c03625ff2cf56054e543998c3a54f5831a50": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/JavaLangClassMetaFactoryProducer.java": [
                    "public ClassMeta<?> org.simpleflatmapper.reflect.impl.JavaLangClassMetaFactoryProducer.newInstance(ReflectionService reflectionService)",
                    "private <T> void org.simpleflatmapper.reflect.impl.JavaLangClassMetaFactoryProducer.predefined(final Class<T> target, Consumer<? super UnaryFactory<ReflectionService, ClassMeta<?>>> consumer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "public boolean org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.needTransformer()"
                ]
            },
            "3af5d03048ea7a8923fa3b1bfcfb298b0c436b33": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/JavaLangClassMetaFactoryProducer.java": [
                    "public ClassMeta<?> org.simpleflatmapper.reflect.impl.JavaLangClassMetaFactoryProducer.newInstance(ReflectionService reflectionService)",
                    "private <T> void org.simpleflatmapper.reflect.impl.JavaLangClassMetaFactoryProducer.predefined(final Class<T> target, Consumer<? super UnaryFactory<ReflectionService, ClassMeta<?>>> consumer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "public boolean org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.needTransformer()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "447c8b3f7c7876c7f94882bbd095869d12ac0eb2",
        "previous_commit": "68de0a041acca33d72850c7d947204a940eea7f4",
        "date": 1485884200,
        "releases": {
            "previous": "447c8b3f7c7876c7f94882bbd095869d12ac0eb2",
            "next": "447c8b3f7c7876c7f94882bbd095869d12ac0eb2"
        },
        "commit_message": " #399 increase coverage\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "447c8b3f7c7876c7f94882bbd095869d12ac0eb2": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendInitBuilder(Map<Parameter, BiFactory<? super S1, ? super S2, ?>> injections, ClassWriter cw, String s1, String s2, String classType, BuilderInstantiatorDefinition instantiatorDefinition)",
                    "public static <S1, S2> byte[] org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.createInstantiator(final String className, final Class<?> s1, final Class<?> s2, final Instantiator<Void, ?> builderInstantiator, final BuilderInstantiatorDefinition instantiatorDefinition, final Map<Parameter, BiFactory<? super S1, ? super S2, ?>> injections)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstance2(Class<?> s1, Class<?> s2, BuilderInstantiatorDefinition instantiatorDefinition, Map<Parameter, BiFactory<? super S1, ? super S2, ?>> injections, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Map<Parameter, Method> setters)"
                ]
            },
            "68de0a041acca33d72850c7d947204a940eea7f4": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendInitBuilder(Map<Parameter, BiFactory<? super S1, ? super S2, ?>> injections, ClassWriter cw, String s1, String s2, String classType, BuilderInstantiatorDefinition instantiatorDefinition)",
                    "public static <S1, S2> byte[] org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.createInstantiator(final String className, final Class<?> s1, final Class<?> s2, final Instantiator<Void, ?> builderInstantiator, final BuilderInstantiatorDefinition instantiatorDefinition, final Map<Parameter, BiFactory<? super S1, ? super S2, ?>> injections)",
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstance2(Class<?> s1, Class<?> s2, BuilderInstantiatorDefinition instantiatorDefinition, Map<Parameter, BiFactory<? super S1, ? super S2, ?>> injections, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Map<Parameter, Method> setters)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0fcc596c83567042d213caa4535058eb13631bcc",
        "previous_commit": "0e34f4216215c7f84a1d0844dbc8389866e7e350",
        "date": 1462444605,
        "releases": {
            "previous": "0fcc596c83567042d213caa4535058eb13631bcc",
            "next": "0fcc596c83567042d213caa4535058eb13631bcc"
        },
        "commit_message": "#314 remove printStackTrace\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0fcc596c83567042d213caa4535058eb13631bcc": {
                "sfm/src/main/java/org/sfm/reflect/impl/ParamNameDeductor.java": [
                    "public String org.sfm.reflect.impl.ParamNameDeductor<T>.findParamName(InstantiatorDefinition instantiatorDefinition, Parameter param)",
                    "public void org.sfm.reflect.impl.ParamNameDeductor<T>.method(Method method)",
                    "public void org.sfm.reflect.impl.ParamNameDeductor<T>.field(Field field)"
                ]
            },
            "0e34f4216215c7f84a1d0844dbc8389866e7e350": {
                "sfm/src/main/java/org/sfm/reflect/impl/ParamNameDeductor.java": [
                    "public String org.sfm.reflect.impl.ParamNameDeductor<T>.findParamName(InstantiatorDefinition instantiatorDefinition, Parameter param)",
                    "public void org.sfm.reflect.impl.ParamNameDeductor<T>.method(Method method)",
                    "public void org.sfm.reflect.impl.ParamNameDeductor<T>.field(Field field)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7f2d7f6c869c204ea1fe25b8c9d8406601ecf74b",
        "previous_commit": "7feb7ee56addcc0688a87a8b3cdc4ff621750ecc",
        "date": 1483465671,
        "releases": {
            "previous": "7f2d7f6c869c204ea1fe25b8c9d8406601ecf74b",
            "next": "7f2d7f6c869c204ea1fe25b8c9d8406601ecf74b"
        },
        "commit_message": " #391 add jdbi resultsetmapperfactory and SfmBind annotation\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7f2d7f6c869c204ea1fe25b8c9d8406601ecf74b": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/MultiIndexQueryPreparer.java": [
                    "private PreparedStatement org.simpleflatmapper.jdbc.impl.MultiIndexQueryPreparer<T>.createPreparedStatement(final T value)",
                    "public PreparedStatement org.simpleflatmapper.jdbc.impl.MultiIndexQueryPreparer<T>.bind(T value)",
                    "public int org.simpleflatmapper.jdbc.impl.MultiIndexQueryPreparer<T>.getSize(int columnIndex)"
                ]
            },
            "7feb7ee56addcc0688a87a8b3cdc4ff621750ecc": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/MultiIndexQueryPreparer.java": [
                    "public int org.simpleflatmapper.jdbc.impl.MultiIndexQueryBinder<T>.getSize(int columnIndex)",
                    "private PreparedStatement org.simpleflatmapper.jdbc.impl.MultiIndexQueryBinder<T>.createPreparedStatement(final T value)",
                    "public PreparedStatement org.simpleflatmapper.jdbc.impl.MultiIndexQueryBinder<T>.bind(T value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5d378fc286a8b5a99a73cf382c0737d7c43c5d1a",
        "previous_commit": "e23f19a6cbc47320c0767c835dd197c6b8bd1f4d",
        "date": 1573623073,
        "releases": {
            "previous": "5d378fc286a8b5a99a73cf382c0737d7c43c5d1a",
            "next": "5d378fc286a8b5a99a73cf382c0737d7c43c5d1a"
        },
        "commit_message": "add DSLContextProvider to decouple Jooq configuration\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5d378fc286a8b5a99a73cf382c0737d7c43c5d1a": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/RecordUnmapperBuilder.java": [
                    "public Record org.simpleflatmapper.jooq.RecordUnmapperBuilder<E>.newInstance(E e, MappingContext<? super E> mappingContext)",
                    "protected BiInstantiator<E, MappingContext<? super E>, Record> org.simpleflatmapper.jooq.RecordUnmapperBuilder<E>.getInstantiator()"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordUnmapperProvider.java": [
                    "public <E, R extends Record> RecordUnmapper<E, R> org.simpleflatmapper.jooq.SfmRecordUnmapperProvider.provide(Class<? extends E> type, RecordType<R> recordType)"
                ]
            },
            "e23f19a6cbc47320c0767c835dd197c6b8bd1f4d": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/RecordUnmapperBuilder.java": [
                    "public Record org.simpleflatmapper.jooq.RecordUnmapperBuilder<E>.newInstance(E e, MappingContext<? super E> mappingContext)",
                    "protected BiInstantiator<E, MappingContext<? super E>, Record> org.simpleflatmapper.jooq.RecordUnmapperBuilder<E>.getInstantiator()"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordUnmapperProvider.java": [
                    "public <E, R extends Record> RecordUnmapper<E, R> org.simpleflatmapper.jooq.SfmRecordUnmapperProvider.provide(Class<? extends E> type, RecordType<R> recordType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a1bdb8539fe7d6ba1b4bcc306eb6f835ff5e2f80",
        "previous_commit": "edf731b2595d8a7784584fae44ce87d418558f3b",
        "date": 1529008852,
        "releases": {
            "previous": "a1bdb8539fe7d6ba1b4bcc306eb6f835ff5e2f80",
            "next": "a1bdb8539fe7d6ba1b4bcc306eb6f835ff5e2f80"
        },
        "commit_message": " #517 tidy up handling\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a1bdb8539fe7d6ba1b4bcc306eb6f835ff5e2f80": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public <T> CsvMapper<Result<T,CsvColumnKey>> org.simpleflatmapper.csv.CsvMapperFactory.newErrorCollectingMapper(final Type target)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvMapperCellHandler.java": [
                    "protected final void org.simpleflatmapper.csv.mapper.CsvMapperCellHandler<T>.fieldError(int cellIndex, Exception e)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/ResultFieldMapperErrorHandler.java": [
                    "public void org.simpleflatmapper.map.ResultFieldMapperErrorHandler<K>.errorMappingField(K key, Object source, Object target, Exception error)"
                ]
            },
            "edf731b2595d8a7784584fae44ce87d418558f3b": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public <T> CsvMapper<Result<T,CsvColumnKey>> org.simpleflatmapper.csv.CsvMapperFactory.newErrorCollectingMapper(final Type target)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvMapperCellHandler.java": [
                    "protected final void org.simpleflatmapper.csv.mapper.CsvMapperCellHandler<T>.fieldError(int cellIndex, Exception e)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/ResultFieldMapperErrorHandler.java": [
                    "public void org.simpleflatmapper.map.ResultFieldMapperErrorHandler<K>.errorMappingField(K key, Object source, Object target, Exception error)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "36c92c9ae9feca262553ac4bfce2eeefb94f3a13",
        "previous_commit": "9b7d9fa37d4dd870a049400b3c64bb160e6c967a",
        "date": 1467872384,
        "releases": {
            "previous": "36c92c9ae9feca262553ac4bfce2eeefb94f3a13",
            "next": "36c92c9ae9feca262553ac4bfce2eeefb94f3a13"
        },
        "commit_message": "fix test, better behavior for parallel reader\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "36c92c9ae9feca262553ac4bfce2eeefb94f3a13": {
                "sfm/src/main/java/org/sfm/utils/ParallelReader.java": [
                    "public int org.sfm.utils.ParallelReader.read(char[] cbuf, int off, int len)",
                    "public void org.sfm.utils.ParallelReader.run()",
                    "public void org.sfm.utils.ParallelReader.close()"
                ]
            },
            "9b7d9fa37d4dd870a049400b3c64bb160e6c967a": {
                "sfm/src/main/java/org/sfm/utils/ParallelReader.java": [
                    "public int org.sfm.utils.ParallelReader.read(char[] cbuf, int off, int len)",
                    "public void org.sfm.utils.ParallelReader.run()",
                    "public void org.sfm.utils.ParallelReader.close()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f81eb335331194ad957dc02ab83a55efaa325178",
        "previous_commit": "343ba6ebab61780b19240263c7dfcca77542755a",
        "date": 1572186594,
        "releases": {
            "previous": "f81eb335331194ad957dc02ab83a55efaa325178",
            "next": "f81eb335331194ad957dc02ab83a55efaa325178"
        },
        "commit_message": "java7 fix\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f81eb335331194ad957dc02ab83a55efaa325178": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/CsvWriter.java": [
                    "public ClosableCsvWriter org.simpleflatmapper.lightningcsv.CsvWriter.to(File file, Charset charset)",
                    "public ClosableCsvWriter org.simpleflatmapper.lightningcsv.CsvWriter.to(Path path)",
                    "public ClosableCsvWriter org.simpleflatmapper.lightningcsv.CsvWriter.to(File file)"
                ]
            },
            "343ba6ebab61780b19240263c7dfcca77542755a": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/CsvWriter.java": [
                    "public ClosableCsvWriter org.simpleflatmapper.lightningcsv.CsvWriter.to(File file, Charset charset)",
                    "public ClosableCsvWriter org.simpleflatmapper.lightningcsv.CsvWriter.to(Path path)",
                    "public ClosableCsvWriter org.simpleflatmapper.lightningcsv.CsvWriter.to(File file)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0e437f4397bbb103b89c2609765a503077974109",
        "previous_commit": "95a2d98086129de6e967a85595854ecca12f6ccf",
        "date": 1557600470,
        "releases": {
            "previous": "0e437f4397bbb103b89c2609765a503077974109",
            "next": "0e437f4397bbb103b89c2609765a503077974109"
        },
        "commit_message": "does not create new string on empty string, specialised path for buffer resize\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0e437f4397bbb103b89c2609765a503077974109": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)"
                ],
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ReaderCharBuffer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ReaderCharBuffer.shiftAndRead(int shiftFrom)"
                ]
            },
            "95a2d98086129de6e967a85595854ecca12f6ccf": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)"
                ],
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ReaderCharBuffer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ReaderCharBuffer.shiftAndRead(int shiftFrom)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b22864d744d2660adbddebcb557a48ac273db923",
        "previous_commit": "144fb4216c7692a24937d97d1cbf461556c77f02",
        "date": 1481214571,
        "releases": {
            "previous": "b22864d744d2660adbddebcb557a48ac273db923",
            "next": "b22864d744d2660adbddebcb557a48ac273db923"
        },
        "commit_message": "clean up\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b22864d744d2660adbddebcb557a48ac273db923": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/ReaderCharBuffer.java": [
                    "public final boolean org.simpleflatmapper.csv.parser.ReaderCharBuffer.next()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, int start, int end, CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.newCell(char[] chars, int start, int end, CellConsumer cellConsumer, int state)"
                ]
            },
            "144fb4216c7692a24937d97d1cbf461556c77f02": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/ReaderCharBuffer.java": [
                    "public final boolean org.simpleflatmapper.csv.parser.ReaderCharBuffer.next()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, int start, int end, CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.newCell(char[] chars, int start, int end, CellConsumer cellConsumer, int state)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b773940682131674cb1fec9df482c4b0e572532c",
        "previous_commit": "14e60823e21884c5c09b595cd6347f6319b698a4",
        "date": 1536571070,
        "releases": {
            "previous": "b773940682131674cb1fec9df482c4b0e572532c",
            "next": "b773940682131674cb1fec9df482c4b0e572532c"
        },
        "commit_message": "fix 517 with new csv mapper\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b773940682131674cb1fec9df482c4b0e572532c": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public <T> CsvMapperBuilder<T> org.simpleflatmapper.csv.CsvMapperFactory.newBuilder(final ClassMeta<T> classMeta)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRowSet.java": [
                    "public boolean org.simpleflatmapper.csv.CsvRowSet.next()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/ResultFieldMapperErrorHandler.java": [
                    "public void org.simpleflatmapper.map.ResultFieldMapperErrorHandler<K>.errorMappingField(K key, Object source, Object target, Exception error, Context mappingContext)"
                ]
            },
            "14e60823e21884c5c09b595cd6347f6319b698a4": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public <T> CsvMapperBuilder<T> org.simpleflatmapper.csv.CsvMapperFactory.newBuilder(final ClassMeta<T> classMeta)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRowSet.java": [
                    "public boolean org.simpleflatmapper.csv.CsvRowSet.next()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/ResultFieldMapperErrorHandler.java": [
                    "public void org.simpleflatmapper.map.ResultFieldMapperErrorHandler<K>.errorMappingField(K key, Object source, Object target, Exception error, Context mappingContext)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "47922f0d9ad794749a1d71b632ce0a9abacddaf0",
        "previous_commit": "9092451e5b1462bc689b88fdbf24b1715466b102",
        "date": 1522420888,
        "releases": {
            "previous": "47922f0d9ad794749a1d71b632ce0a9abacddaf0",
            "next": "47922f0d9ad794749a1d71b632ce0a9abacddaf0"
        },
        "commit_message": "simplify reading\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "47922f0d9ad794749a1d71b632ce0a9abacddaf0": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read(char[] cbuf, int off, int len)",
                    "private int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len, long currentHead, long currentTail)"
                ]
            },
            "9092451e5b1462bc689b88fdbf24b1715466b102": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len)",
                    "public int org.simpleflatmapper.util.ParallelReader.read(char[] cbuf, int off, int len)",
                    "private int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len, long currentHead, long currentTail)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0a2b18269bc41d425796f4396d4a46cf61651a36",
        "previous_commit": "5c5ab66a149d36d997a8871065664d582cea9dbd",
        "date": 1481117967,
        "releases": {
            "previous": "0a2b18269bc41d425796f4396d4a46cf61651a36",
            "next": "0a2b18269bc41d425796f4396d4a46cf61651a36"
        },
        "commit_message": " #377 ensure all property add goes through upgrade (#383)\n\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0a2b18269bc41d425796f4396d4a46cf61651a36": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public MapToDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.columnDefinition(String column, CsvColumnDefinition columnDefinition)",
                    "public MapWithDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.addKeys(String... keys)",
                    "private CsvColumnDefinitionProviderImpl org.simpleflatmapper.csv.MapToDSL<T>.newColumnDefinitionProvider(Predicate<? super CsvColumnKey> predicate, CsvColumnDefinition columnDefinition)"
                ]
            },
            "5c5ab66a149d36d997a8871065664d582cea9dbd": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public MapToDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.columnDefinition(String column, CsvColumnDefinition columnDefinition)",
                    "public MapWithDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.addKeys(String... keys)",
                    "private CsvColumnDefinitionProviderImpl org.simpleflatmapper.csv.MapToDSL<T>.newColumnDefinitionProvider(Predicate<? super CsvColumnKey> predicate, CsvColumnDefinition columnDefinition)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "10183981a550201b1bd8e49a9236f9c85e7f81ad",
        "previous_commit": "38f46fe9ad3c98b3fbd0b2db3eff18c955c46d11",
        "date": 1467909890,
        "releases": {
            "previous": "10183981a550201b1bd8e49a9236f9c85e7f81ad",
            "next": "10183981a550201b1bd8e49a9236f9c85e7f81ad"
        },
        "commit_message": "update defaults\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "10183981a550201b1bd8e49a9236f9c85e7f81ad": {
                "sfm/src/main/java/org/sfm/csv/impl/cellreader/StringCellValueReader.java": [
                    "public static String org.sfm.csv.impl.cellreader.StringCellValueReader.readString(char[] chars, int offset, int length)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.newCell(int end, final CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)"
                ]
            },
            "38f46fe9ad3c98b3fbd0b2db3eff18c955c46d11": {
                "sfm/src/main/java/org/sfm/csv/impl/cellreader/StringCellValueReader.java": [
                    "public static String org.sfm.csv.impl.cellreader.StringCellValueReader.readString(char[] chars, int offset, int length)"
                ],
                "sfm/src/main/java/org/sfm/csv/parser/StandardCsvCharConsumer.java": [
                    "private int org.sfm.csv.parser.StandardCsvCharConsumer.newCell(int end, final CellConsumer cellConsumer)",
                    "public final void org.sfm.csv.parser.StandardCsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d22e6f2ccfb966c604c16afa9a46194c9ad6ef98",
        "previous_commit": "36e6c2b3b2f0cfe529e22795fe954c5f1cbb745d",
        "date": 1474493509,
        "releases": {
            "previous": "d22e6f2ccfb966c604c16afa9a46194c9ad6ef98",
            "next": "d22e6f2ccfb966c604c16afa9a46194c9ad6ef98"
        },
        "commit_message": " #82 look for all potential property\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d22e6f2ccfb966c604c16afa9a46194c9ad6ef98": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private boolean org.simpleflatmapper.reflect.ReflectionService.isDirectType(Type target)",
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public final <E> PropertyMeta<T, E> org.simpleflatmapper.reflect.meta.PropertyFinder<T>.findProperty(PropertyNameMatcher propertyNameMatcher)"
                ]
            },
            "36e6c2b3b2f0cfe529e22795fe954c5f1cbb745d": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private boolean org.simpleflatmapper.reflect.ReflectionService.isDirectType(Type target)",
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": []
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f5a132f47d663495d76fcde9b0254120feaab19c",
        "previous_commit": "21f894c874d872aec2e5a5373d23c73fa4eeca0d",
        "date": 1471109644,
        "releases": {
            "previous": "f5a132f47d663495d76fcde9b0254120feaab19c",
            "next": "f5a132f47d663495d76fcde9b0254120feaab19c"
        },
        "commit_message": "simplify column def, more test\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f5a132f47d663495d76fcde9b0254120feaab19c": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public MapWithDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.addKeys(String... keys)",
                    "private CsvColumnDefinitionProviderImpl org.simpleflatmapper.csv.MapToDSL<T>.newColumnDefinitionProvider(Predicate<? super CsvColumnKey> predicate, CsvColumnDefinition columnDefinition)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudMeta.java": [
                    "public void org.simpleflatmapper.jdbc.impl.CrudMeta.addColumnProperties(JdbcMapperFactory mapperFactory)"
                ]
            },
            "21f894c874d872aec2e5a5373d23c73fa4eeca0d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public MapWithDSL<T> org.simpleflatmapper.csv.MapToDSL<T>.addKeys(String... keys)",
                    "private CsvColumnDefinitionProviderImpl org.simpleflatmapper.csv.MapToDSL<T>.newColumnDefinitionProvider(Predicate<? super CsvColumnKey> predicate, CsvColumnDefinition columnDefinition)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudMeta.java": [
                    "public void org.simpleflatmapper.jdbc.impl.CrudMeta.addColumnProperties(JdbcMapperFactory mapperFactory)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2461b3a14e39d33c7c007d7b5a6f807ee587d896",
        "previous_commit": "e6cf63d8ba4778b96d30779728115634f23b3382",
        "date": 1496785208,
        "releases": {
            "previous": "2461b3a14e39d33c7c007d7b5a6f807ee587d896",
            "next": "2461b3a14e39d33c7c007d7b5a6f807ee587d896"
        },
        "commit_message": " #442 #441 #440 partial protobuf support fix csv mix setter/constructor and instantiator eligibility\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2461b3a14e39d33c7c007d7b5a6f807ee587d896": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "public void org.simpleflatmapper.csv.CsvMapperBuilder<T>.handle(PropertyMapping<T, ?, CsvColumnKey, CsvColumnDefinition> propMapping)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/BuilderInstantiatorDefinitionFactory.java": [
                    "private static BuilderInstantiatorDefinition org.simpleflatmapper.reflect.impl.BuilderInstantiatorDefinitionFactory.getDefinitionForBuilder(ExecutableInstantiatorDefinition def, Type builderType, Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "public PropertyFinder<?> org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.getSubPropertyFinder(PropertyMeta<?, ?> owner)"
                ]
            },
            "e6cf63d8ba4778b96d30779728115634f23b3382": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "public void org.simpleflatmapper.csv.CsvMapperBuilder<T>.handle(PropertyMapping<T, ?, CsvColumnKey, CsvColumnDefinition> propMapping)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/BuilderInstantiatorDefinitionFactory.java": [
                    "private static BuilderInstantiatorDefinition org.simpleflatmapper.reflect.impl.BuilderInstantiatorDefinitionFactory.getDefinitionForBuilder(ExecutableInstantiatorDefinition def, Type builderType, Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "public PropertyFinder<?> org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.getSubPropertyFinder(PropertyMeta<?, ?> owner)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "08f14cda8e160489a5afcb26f891611b70502e2b",
        "previous_commit": "b1b59f62dc74943eba0ce486f7690aae647d9b31",
        "date": 1469947719,
        "releases": {
            "previous": "08f14cda8e160489a5afcb26f891611b70502e2b",
            "next": "08f14cda8e160489a5afcb26f891611b70502e2b"
        },
        "commit_message": " #330 put default format in another property to add only if no other are presents\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "08f14cda8e160489a5afcb26f891611b70502e2b": {
                "sfm/src/main/java/org/sfm/csv/CsvColumnDefinition.java": [
                    "public String[] org.sfm.csv.CsvColumnDefinition.dateFormats()"
                ],
                "sfm/src/main/java/org/sfm/csv/CsvMapperBuilder.java": [
                    "private CsvColumnDefinition org.sfm.csv.CsvMapperBuilder<T>.getColumnDefinition(CsvColumnKey key)"
                ],
                "sfm/src/main/java/org/sfm/map/column/time/JavaTimeHelper.java": [
                    "public static DateTimeFormatter[] org.sfm.map.column.time.JavaTimeHelper.getDateTimeFormatters(ColumnDefinition<?, ?> columnDefinition)"
                ]
            },
            "b1b59f62dc74943eba0ce486f7690aae647d9b31": {
                "sfm/src/main/java/org/sfm/csv/CsvColumnDefinition.java": [
                    "public String[] org.sfm.csv.CsvColumnDefinition.dateFormats()"
                ],
                "sfm/src/main/java/org/sfm/csv/CsvMapperBuilder.java": [
                    "private CsvColumnDefinition org.sfm.csv.CsvMapperBuilder<T>.getColumnDefinition(CsvColumnKey key)"
                ],
                "sfm/src/main/java/org/sfm/map/column/time/JavaTimeHelper.java": [
                    "public static DateTimeFormatter[] org.sfm.map.column.time.JavaTimeHelper.getDateTimeFormatters(ColumnDefinition<?, ?> columnDefinition)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e96b310bf1f8d12f8ae1891f4a35f47b05b6e0a0",
        "previous_commit": "7a86c2cced25824142dce60d14ce64431cbca29b",
        "date": 1536571071,
        "releases": {
            "previous": "e96b310bf1f8d12f8ae1891f4a35f47b05b6e0a0",
            "next": "e96b310bf1f8d12f8ae1891f4a35f47b05b6e0a0"
        },
        "commit_message": "remove need for contextual adapter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e96b310bf1f8d12f8ae1891f4a35f47b05b6e0a0": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)",
                    "private <S, P> ContextualSetter<Appendable, ? super P> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.getSetter(PropertyMapping<S, P, CsvColumnKey> pm, CellWriter cellWriter)",
                    "private <S, P> ContextualSetter<Appendable, ? super P> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.setterFromFactory(PropertyMapping<S, P, CsvColumnKey> pm)"
                ]
            },
            "7a86c2cced25824142dce60d14ce64431cbca29b": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "private <S, P> Setter<Appendable, ? super P> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.getSetter(PropertyMapping<S, P, CsvColumnKey> pm, CellWriter cellWriter)",
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)",
                    "private <S, P> Setter<Appendable, ? super P> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.setterFromFactory(PropertyMapping<S, P, CsvColumnKey> pm)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cb0b7b93f36fe297040084ee0e2cddac5e429f31",
        "previous_commit": "0b7d4bde42f30b518e02bd892b8d8f43e767dbda",
        "date": 1475074311,
        "releases": {
            "previous": "cb0b7b93f36fe297040084ee0e2cddac5e429f31",
            "next": "cb0b7b93f36fe297040084ee0e2cddac5e429f31"
        },
        "commit_message": " #82 add test, move self multimatch logic to object prop finder\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "cb0b7b93f36fe297040084ee0e2cddac5e429f31": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/OptionalPropertyFinder.java": [
                    "public <P extends PropertyMeta<T, ?>> void org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.found(P propertyMeta, Runnable selectionCallback, PropertyMatchingScore score)",
                    "protected void org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, FoundProperty matchingProperties, PropertyMatchingScore score, boolean allowSelfReference)"
                ]
            },
            "0b7d4bde42f30b518e02bd892b8d8f43e767dbda": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/OptionalPropertyFinder.java": [
                    "public <P extends PropertyMeta<T, ?>> void org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.found(P propertyMeta, Runnable selectionCallback, PropertyMatchingScore score)",
                    "protected void org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, FoundProperty matchingProperties, PropertyMatchingScore score, boolean allowSelfReference)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f093e0330e134df230e816eefe9f9f9808acd75f",
        "previous_commit": "42a13b7196f81eb788f31cf967923ce969e03c5e",
        "date": 1490803514,
        "releases": {
            "previous": "f093e0330e134df230e816eefe9f9f9808acd75f",
            "next": "f093e0330e134df230e816eefe9f9f9808acd75f"
        },
        "commit_message": " #432 add path to all errors\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f093e0330e134df230e816eefe9f9f9808acd75f": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.getReader(PropertyMeta<?, P> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "private <P, C> IndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.getSetter(PropertyMapping<C, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()"
                ]
            },
            "42a13b7196f81eb788f31cf967923ce969e03c5e": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellSetterFactory.getReader(PropertyMeta<?, P> pm, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/PreparedStatementMapperBuilder.java": [
                    "private <P, C> IndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.getSetter(PropertyMapping<C, P, JdbcColumnKey, FieldMapperColumnDefinition<JdbcColumnKey>> pm)",
                    "public MultiIndexFieldMapper<T>[] org.simpleflatmapper.jdbc.PreparedStatementMapperBuilder<T>.buildIndexFieldMappers()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d3279a14f359d5eb56fb26bdaed0187572ba4d4b",
        "previous_commit": "e04d98e58e2249ae40288f3db3495e3b607117ba",
        "date": 1470867684,
        "releases": {
            "previous": "d3279a14f359d5eb56fb26bdaed0187572ba4d4b",
            "next": "d3279a14f359d5eb56fb26bdaed0187572ba4d4b"
        },
        "commit_message": "add pluginrepo and fix java6\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d3279a14f359d5eb56fb26bdaed0187572ba4d4b": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "public <T,P> CellSetter<T> org.simpleflatmapper.csv.impl.CellSetterFactory.getPrimitiveCellSetter(Class<?> clazz, CellValueReader<? extends P> reader, Setter<? super T, ? super P> setter)",
                    "public <T, P> DelayedCellSetterFactory<T, P> org.simpleflatmapper.csv.impl.CellSetterFactory.getDelayedCellSetter(PropertyMeta<T, P> prop, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ObjectSetterFactory.java": [
                    "private static boolean org.simpleflatmapper.reflect.ObjectSetterFactory.isNullSetter(Setter<?, ?> setter)"
                ]
            },
            "e04d98e58e2249ae40288f3db3495e3b607117ba": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "public <T,P> CellSetter<T> org.simpleflatmapper.csv.impl.CellSetterFactory.getPrimitiveCellSetter(Class<?> clazz, CellValueReader<? extends P> reader, Setter<? super T, ? super P> setter)",
                    "public <T, P> DelayedCellSetterFactory<T, P> org.simpleflatmapper.csv.impl.CellSetterFactory.getDelayedCellSetter(PropertyMeta<T, P> prop, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ObjectSetterFactory.java": [
                    "private static boolean org.simpleflatmapper.reflect.ObjectSetterFactory.isNullSetter(Setter<?, ?> setter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b94104b54b303c70b139aab0667286c0b0b73537",
        "previous_commit": "102e39ebe7b248b905384987068922c4abe789eb",
        "date": 1548160604,
        "releases": {
            "previous": "b94104b54b303c70b139aab0667286c0b0b73537",
            "next": "b94104b54b303c70b139aab0667286c0b0b73537"
        },
        "commit_message": " #604 implement unordered join\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b94104b54b303c70b139aab0667286c0b0b73537": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetector.java": [
                    "public Object org.simpleflatmapper.map.context.impl.BreakDetector<S>.getValue()",
                    "public void org.simpleflatmapper.map.context.impl.BreakDetector<S>.setValue(Object value)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetectorMappingContext.java": [
                    "public boolean org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.broke(S source)"
                ]
            },
            "102e39ebe7b248b905384987068922c4abe789eb": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetector.java": [
                    "public Object org.simpleflatmapper.map.context.impl.BreakDetector<S>.getValue()",
                    "public void org.simpleflatmapper.map.context.impl.BreakDetector<S>.setValue(Object value)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetectorMappingContext.java": [
                    "public boolean org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.broke(S source)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "35e127ba77a9a4d97298929523edcd22004dddea",
        "previous_commit": "4b2fa553c4174cf8c3a94b1d30cdf9495967cc16",
        "date": 1468859066,
        "releases": {
            "previous": "35e127ba77a9a4d97298929523edcd22004dddea",
            "next": "35e127ba77a9a4d97298929523edcd22004dddea"
        },
        "commit_message": " #328 add excludes, name and more getter number test\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "35e127ba77a9a4d97298929523edcd22004dddea": {
                "sfm-test/src/main/java/org/sfm/utils/LibrarySetClassLoader.java": [
                    "protected Class<?> org.sfm.utils.LibrarySetClassLoader.findClass(String name)",
                    "public Class<?> org.sfm.utils.LibrarySetClassLoader.loadClass(String name)"
                ],
                "sfm-test/src/main/java/org/sfm/utils/MultiClassLoaderJunitRunner.java": [
                    "protected String org.sfm.utils.MultiClassLoaderJunitRunner.getName()"
                ]
            },
            "4b2fa553c4174cf8c3a94b1d30cdf9495967cc16": {
                "sfm-test/src/main/java/org/sfm/utils/LibrarySetClassLoader.java": [
                    "protected Class<?> org.sfm.utils.LibrarySetClassLoader.findClass(String name)",
                    "public Class<?> org.sfm.utils.LibrarySetClassLoader.loadClass(String name)"
                ],
                "sfm-test/src/main/java/org/sfm/utils/MultiClassLoaderJunitRunner.java": [
                    "protected String org.sfm.utils.MultiClassLoaderJunitRunner.getName()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "207e9dc77af62efabe08ac7c734626b6acd9404a",
        "previous_commit": "f96449376531b8572bc94e70d7393250891abac9",
        "date": 1456098470,
        "releases": {
            "previous": "207e9dc77af62efabe08ac7c734626b6acd9404a",
            "next": "207e9dc77af62efabe08ac7c734626b6acd9404a"
        },
        "commit_message": " #297 joda/java time for datastax setter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "207e9dc77af62efabe08ac7c734626b6acd9404a": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/SettableDataSetterFactory.java": [
                    "public <P> Setter<SettableByIndexData, P> org.sfm.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey, ? extends ColumnDefinition<DatastaxColumnKey, ?>> pm)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/impl/setter/JodaTimePreparedStatementFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.sfm.jdbc.impl.setter.JodaTimePreparedStatementFactory.indexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ],
                "sfm/src/main/java/org/sfm/map/column/joda/JodaHelper.java": [
                    "public static DateTimeFormatter org.sfm.map.column.joda.JodaHelper.getDateTimeFormatter(ColumnDefinition<?, ?> columnDefinition)"
                ]
            },
            "f96449376531b8572bc94e70d7393250891abac9": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/SettableDataSetterFactory.java": [
                    "public <P> Setter<SettableByIndexData, P> org.sfm.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey, ? extends ColumnDefinition<DatastaxColumnKey, ?>> pm)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/impl/setter/JodaTimePreparedStatementFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.sfm.jdbc.impl.setter.JodaTimePreparedStatementFactory.indexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ],
                "sfm/src/main/java/org/sfm/map/column/joda/JodaHelper.java": [
                    "public static DateTimeFormatter org.sfm.map.column.joda.JodaHelper.getDateTimeFormatter(ColumnDefinition<?, ?> columnDefinition)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6c529c5cde1234185d203a250faf010a656ebe6d",
        "previous_commit": "08b124086d5e262c643f0f3d62fdee3b40678713",
        "date": 1470694401,
        "releases": {
            "previous": "6c529c5cde1234185d203a250faf010a656ebe6d",
            "next": "6c529c5cde1234185d203a250faf010a656ebe6d"
        },
        "commit_message": "fix osgi test\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6c529c5cde1234185d203a250faf010a656ebe6d": {
                "sfm-converter-joda-time/src/main/java/org/simpleflatmapper/converter/joda/impl/JodaTimeHelper.java": [
                    "public static DateTimeFormatter[] org.simpleflatmapper.converter.joda.impl.JodaTimeHelper.getDateTimeFormatters(Object... properties)",
                    "public static DateTimeFormatter org.simpleflatmapper.converter.joda.impl.JodaTimeHelper.getDateTimeFormatter(Object... properties)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ]
            },
            "08b124086d5e262c643f0f3d62fdee3b40678713": {
                "sfm-converter-joda-time/src/main/java/org/simpleflatmapper/converter/joda/impl/JodaTimeHelper.java": [
                    "public static DateTimeFormatter[] org.simpleflatmapper.converter.joda.impl.JodaTimeHelper.getDateTimeFormatters(Object... properties)",
                    "public static DateTimeFormatter org.simpleflatmapper.converter.joda.impl.JodaTimeHelper.getDateTimeFormatter(Object... properties)"
                ],
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d54829134b008c3a341ceabdd7b51cbeeb4b6787",
        "previous_commit": "4a68f00e2766888d957b72f9626f67d52365d5e1",
        "date": 1530046425,
        "releases": {
            "previous": "d54829134b008c3a341ceabdd7b51cbeeb4b6787",
            "next": "d54829134b008c3a341ceabdd7b51cbeeb4b6787"
        },
        "commit_message": " fix #531 special handling of boolean getter/constructor\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d54829134b008c3a341ceabdd7b51cbeeb4b6787": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "public String org.simpleflatmapper.reflect.asm.AsmFactory.getPackageName(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private List<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.listProperties(final ReflectionService reflectService, final Type targetType)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.method(Method method)"
                ]
            },
            "4a68f00e2766888d957b72f9626f67d52365d5e1": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "public String org.simpleflatmapper.reflect.asm.AsmFactory.getPackageName(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private List<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.listProperties(final ReflectionService reflectService, final Type targetType)",
                    "public void org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.method(Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c09a0bb45faac9ee250b271d04cd90be4b9e5c7b",
        "previous_commit": "2e2956681f3de360554d46faf13d08ac44a29535",
        "date": 1522706910,
        "releases": {
            "previous": "c09a0bb45faac9ee250b271d04cd90be4b9e5c7b",
            "next": "c09a0bb45faac9ee250b271d04cd90be4b9e5c7b"
        },
        "commit_message": "fix fix\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c09a0bb45faac9ee250b271d04cd90be4b9e5c7b": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/AbstractCharConsumer.java": [
                    "private String org.simpleflatmapper.csv.parser.AbstractCharConsumer.fix(String s)",
                    "public MethodVisitor org.simpleflatmapper.csv.parser.AbstractCharConsumer.visitMethod(int access, String name, String desc, String signature, String[] exceptions)",
                    "private static Constructor<? extends AbstractCharConsumer> org.simpleflatmapper.csv.parser.AbstractCharConsumer.generateSpecialisedCharConsumer(final SpecialisationKey key)"
                ]
            },
            "2e2956681f3de360554d46faf13d08ac44a29535": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/AbstractCharConsumer.java": [
                    "private String org.simpleflatmapper.csv.parser.AbstractCharConsumer.fix(String s)",
                    "public MethodVisitor org.simpleflatmapper.csv.parser.AbstractCharConsumer.visitMethod(int access, String name, String desc, String signature, String[] exceptions)",
                    "private static Constructor<? extends AbstractCharConsumer> org.simpleflatmapper.csv.parser.AbstractCharConsumer.generateSpecialisedCharConsumer(final SpecialisationKey key)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5cae620fdf187626cced3f050db91aaf7045007a",
        "previous_commit": "4e544d033440cc80b4f70261f134b0e3798ebe89",
        "date": 1511387912,
        "releases": {
            "previous": "5cae620fdf187626cced3f050db91aaf7045007a",
            "next": "5cae620fdf187626cced3f050db91aaf7045007a"
        },
        "commit_message": "fix issue #472 also fix some map key value issues\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5cae620fdf187626cced3f050db91aaf7045007a": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static List<String> org.simpleflatmapper.reflect.asm.AsmUtils.extractTypeNames(String sig)",
                    "public SignatureVisitor org.simpleflatmapper.reflect.asm.AsmUtils.visitTypeArgument(char wildcard)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public List<PropertyNameMatcherKeyValuePair> org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.keyValuePairs()"
                ]
            },
            "4e544d033440cc80b4f70261f134b0e3798ebe89": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static List<String> org.simpleflatmapper.reflect.asm.AsmUtils.extractTypeNames(String sig)",
                    "public SignatureVisitor org.simpleflatmapper.reflect.asm.AsmUtils.visitTypeArgument(char wildcard)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public List<PropertyNameMatcherKeyValuePair> org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.keyValuePairs()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "59bedc2e2cf531e72febe1905979976bbe098ca5",
        "previous_commit": "a0f53d15df46c3ab6f48e94d6c353515f98ab0b9",
        "date": 1568379007,
        "releases": {
            "previous": "59bedc2e2cf531e72febe1905979976bbe098ca5",
            "next": "59bedc2e2cf531e72febe1905979976bbe098ca5"
        },
        "commit_message": "use speculative index if index column was partial\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "59bedc2e2cf531e72febe1905979976bbe098ca5": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public IndexedColumn org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matchIndex()"
                ]
            },
            "a0f53d15df46c3ab6f48e94d6c353515f98ab0b9": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public IndexedColumn org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matchIndex()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "775dfbc8cedbd250c02078d8a8038e5cb7b404f1",
        "previous_commit": "08c8c2dc9128ec987f7170cc44913a5b041842de",
        "date": 1486487160,
        "releases": {
            "previous": "775dfbc8cedbd250c02078d8a8038e5cb7b404f1",
            "next": "775dfbc8cedbd250c02078d8a8038e5cb7b404f1"
        },
        "commit_message": " #403 use target class loader to instantiate class\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "775dfbc8cedbd250c02078d8a8038e5cb7b404f1": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static Type org.simpleflatmapper.reflect.asm.AsmUtils.toGenericType(String sig, List<String> genericTypeNames, Type target)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static <T> Class<T> org.simpleflatmapper.util.TypeHelper.toClass(Type target)"
                ]
            },
            "08c8c2dc9128ec987f7170cc44913a5b041842de": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static Type org.simpleflatmapper.reflect.asm.AsmUtils.toGenericType(String sig, List<String> genericTypeNames, Type target)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static <T> Class<T> org.simpleflatmapper.util.TypeHelper.toClass(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "dce387e61f22f3f662d8925de8611208cf3131f4",
        "previous_commit": "8e35a874be4d1858b1ff182c587b3373ff01eabe",
        "date": 1438721524,
        "releases": {
            "previous": "dce387e61f22f3f662d8925de8611208cf3131f4",
            "next": "dce387e61f22f3f662d8925de8611208cf3131f4"
        },
        "commit_message": "#196 add support for set and list type conversion\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "dce387e61f22f3f662d8925de8611208cf3131f4": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)",
                    "public <E extends Enum<E>> Getter<GettableByIndexData, E> org.sfm.datastax.impl.RowGetterFactory.enumGetter(DatastaxColumnKey key, Class<?> enumClass)"
                ]
            },
            "8e35a874be4d1858b1ff182c587b3373ff01eabe": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)",
                    "public <E extends Enum<E>> Getter<GettableByIndexData, E> org.sfm.datastax.impl.RowGetterFactory.enumGetter(DatastaxColumnKey key, Class<?> enumClass)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4d9898f49f09eef593c63a1ac25e8a27ff4b82ec",
        "previous_commit": "50ef8fea829eda1dae03adcec952a13cb6832460",
        "date": 1520529724,
        "releases": {
            "previous": "4d9898f49f09eef593c63a1ac25e8a27ff4b82ec",
            "next": "4d9898f49f09eef593c63a1ac25e8a27ff4b82ec"
        },
        "commit_message": "fix #494\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4d9898f49f09eef593c63a1ac25e8a27ff4b82ec": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/converter/JooqConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jooq.converter.JooqConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static Type org.simpleflatmapper.util.TypeHelper.resolveTypeVariable(Type type, TypeVariable t)"
                ]
            },
            "50ef8fea829eda1dae03adcec952a13cb6832460": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/converter/JooqConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jooq.converter.JooqConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static Type org.simpleflatmapper.util.TypeHelper.resolveTypeVariable(Type type, TypeVariable t)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cb1b2bab4f0cba9424b8dc7caa642c19d67f3342",
        "previous_commit": "d48f3281471ab095d684ebda3a6bfc534f863615",
        "date": 1496870507,
        "releases": {
            "previous": "cb1b2bab4f0cba9424b8dc7caa642c19d67f3342",
            "next": "cb1b2bab4f0cba9424b8dc7caa642c19d67f3342"
        },
        "commit_message": " #440 adjust property finder for fuller property to take precedence, add Date to protobuf timestamp comverter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "cb1b2bab4f0cba9424b8dc7caa642c19d67f3342": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public int org.simpleflatmapper.reflect.meta.PropertyFinder<T>.compareTo(MatchedProperty<T, ?> o)"
                ]
            },
            "d48f3281471ab095d684ebda3a6bfc534f863615": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyFinder.java": [
                    "public int org.simpleflatmapper.reflect.meta.PropertyFinder<T>.compareTo(MatchedProperty<T, ?> o)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "dfc9a6bc14af763690a4577ea77d87d0064a40cc",
        "previous_commit": "b813dda98b5895678afa54df32cb4b991229dc84",
        "date": 1470381143,
        "releases": {
            "previous": "dfc9a6bc14af763690a4577ea77d87d0064a40cc",
            "next": "dfc9a6bc14af763690a4577ea77d87d0064a40cc"
        },
        "commit_message": "fix datastax build\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "dfc9a6bc14af763690a4577ea77d87d0064a40cc": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, Object... properties)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "public <P> Setter<SettableByIndexData, P> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey, ? extends ColumnDefinition<DatastaxColumnKey, ?>> arg)"
                ]
            },
            "b813dda98b5895678afa54df32cb4b991229dc84": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.simpleflatmapper.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "public <P> Setter<SettableByIndexData, P> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey, ? extends ColumnDefinition<DatastaxColumnKey, ?>> arg)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6d649bae231b99b86ada608f972a1451098821db",
        "previous_commit": "d94a488fbf8dee7c662624eaa3b59f1cf47d5061",
        "date": 1481045937,
        "releases": {
            "previous": "6d649bae231b99b86ada608f972a1451098821db",
            "next": "6d649bae231b99b86ada608f972a1451098821db"
        },
        "commit_message": "improve perf\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6d649bae231b99b86ada608f972a1451098821db": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            },
            "d94a488fbf8dee7c662624eaa3b59f1cf47d5061": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a6695011e533182211da93cf538758f55c4f3194",
        "previous_commit": "c205fdab2b0c0bc3d733c14a5adc903159e7b7e1",
        "date": 1481108092,
        "releases": {
            "previous": "a6695011e533182211da93cf538758f55c4f3194",
            "next": "a6695011e533182211da93cf538758f55c4f3194"
        },
        "commit_message": "use look up for comment\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a6695011e533182211da93cf538758f55c4f3194": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            },
            "c205fdab2b0c0bc3d733c14a5adc903159e7b7e1": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6328922467ab17e264798a9f141321a3ad164170",
        "previous_commit": "87adeffe8d6e3b19e5b5bedc2d77a437dc58cf1e",
        "date": 1459406212,
        "releases": {
            "previous": "6328922467ab17e264798a9f141321a3ad164170",
            "next": "6328922467ab17e264798a9f141321a3ad164170"
        },
        "commit_message": " #309 no return on non present default value column\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6328922467ab17e264798a9f141321a3ad164170": {
                "sfm/src/main/java/org/sfm/csv/CsvMapperBuilder.java": [
                    "public void org.sfm.csv.CsvMapperBuilder<T>.accept(Predicate<? super CsvColumnKey> predicate, DefaultValueProperty columnProperty)",
                    "public final CsvMapper<T> org.sfm.csv.CsvMapperBuilder<T>.mapper()"
                ]
            },
            "87adeffe8d6e3b19e5b5bedc2d77a437dc58cf1e": {
                "sfm/src/main/java/org/sfm/csv/CsvMapperBuilder.java": [
                    "public void org.sfm.csv.CsvMapperBuilder<T>.accept(Predicate<? super CsvColumnKey> predicate, DefaultValueProperty columnProperty)",
                    "public final CsvMapper<T> org.sfm.csv.CsvMapperBuilder<T>.mapper()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ab081dbabbdf464589633d462d5e46f77a87de03",
        "previous_commit": "49d6425fe62c0541387f65299f081201a715fc2c",
        "date": 1544023527,
        "releases": {
            "previous": "ab081dbabbdf464589633d462d5e46f77a87de03",
            "next": "ab081dbabbdf464589633d462d5e46f77a87de03"
        },
        "commit_message": "fix #591\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ab081dbabbdf464589633d462d5e46f77a87de03": {
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/ArrayPlaceHolderValueGetterSource.java": [
                    "public PlaceHolderValueGetter<T> org.simpleflatmapper.jdbc.spring.ArrayPlaceHolderValueGetterSource<T>.getPlaceHolderValueGetter(String column)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public PlaceHolderValueGetterSource<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.buildSource()"
                ]
            },
            "49d6425fe62c0541387f65299f081201a715fc2c": {
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/ArrayPlaceHolderValueGetterSource.java": [
                    "public PlaceHolderValueGetter<T> org.simpleflatmapper.jdbc.spring.ArrayPlaceHolderValueGetterSource<T>.getPlaceHolderValueGetter(String column)"
                ],
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "public PlaceHolderValueGetterSource<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.buildSource()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4d41ee8de311f6312e07747fecc915f51a9c4210",
        "previous_commit": "fe6f7f32fd6925734e048f9676fe1228b930c9ac",
        "date": 1538740785,
        "releases": {
            "previous": "4d41ee8de311f6312e07747fecc915f51a9c4210",
            "next": "4d41ee8de311f6312e07747fecc915f51a9c4210"
        },
        "commit_message": " #559 add array to list converter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4d41ee8de311f6312e07747fecc915f51a9c4210": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.produce(Consumer<? super ContextualConverterFactory<?, ?>> consumer)",
                    "public ConvertingScore org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.score(ConvertingTypes targetedTypes)"
                ]
            },
            "fe6f7f32fd6925734e048f9676fe1228b930c9ac": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.produce(Consumer<? super ContextualConverterFactory<?, ?>> consumer)",
                    "public ConvertingScore org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.score(ConvertingTypes targetedTypes)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b1579a0fd14ff921294a3c053704ee17f6d591eb",
        "previous_commit": "5d728669d2af7013784197745473657ae5cdc875",
        "date": 1572639778,
        "releases": {
            "previous": "b1579a0fd14ff921294a3c053704ee17f6d591eb",
            "next": "b1579a0fd14ff921294a3c053704ee17f6d591eb"
        },
        "commit_message": "only add extra generic type for constructor\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b1579a0fd14ff921294a3c053704ee17f6d591eb": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.extractDefinitions(final Type target)",
                    "public MethodVisitor org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.visitMethod(int access, final String methodName, String desc, String signature, String[] exceptions)"
                ]
            },
            "5d728669d2af7013784197745473657ae5cdc875": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.extractDefinitions(final Type target)",
                    "public MethodVisitor org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.visitMethod(int access, final String methodName, String desc, String signature, String[] exceptions)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b148f7f18d052df2c3dbbdf9861bad3e5afe2234",
        "previous_commit": "3ecc5aed329700c9ced91621980327825aaba5e9",
        "date": 1486133510,
        "releases": {
            "previous": "b148f7f18d052df2c3dbbdf9861bad3e5afe2234",
            "next": "b148f7f18d052df2c3dbbdf9861bad3e5afe2234"
        },
        "commit_message": " #401 support Collection Iterable also fix primitive arrays\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b148f7f18d052df2c3dbbdf9861bad3e5afe2234": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static Type org.simpleflatmapper.util.TypeHelper.getComponentTypeOfListOrArray(Type outType)"
                ]
            },
            "3ecc5aed329700c9ced91621980327825aaba5e9": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ],
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static Type org.simpleflatmapper.util.TypeHelper.getComponentTypeOfListOrArray(Type outType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "18f33e58ea170e3f3e083762b30eac5da8ed7ccd",
        "previous_commit": "3f718da86ba9609c42d7309fd59b1ca612a0a861",
        "date": 1539356327,
        "releases": {
            "previous": "18f33e58ea170e3f3e083762b30eac5da8ed7ccd",
            "next": "18f33e58ea170e3f3e083762b30eac5da8ed7ccd"
        },
        "commit_message": " #561 step 1\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "18f33e58ea170e3f3e083762b30eac5da8ed7ccd": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperFactory.java": [
                    "public <T> DatastaxMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilder(ClassMeta<T> classMeta)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ]
            },
            "3f718da86ba9609c42d7309fd59b1ca612a0a861": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/DatastaxMapperFactory.java": [
                    "public <T> DatastaxMapperBuilder<T> org.simpleflatmapper.datastax.DatastaxMapperFactory.newBuilder(ClassMeta<T> classMeta)"
                ],
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "40441f58d26a5a0feaaf19e37a0d5a245b12763b",
        "previous_commit": "398a7554493929b5a6bd6e88db89eb136da9bd2b",
        "date": 1468494725,
        "releases": {
            "previous": "40441f58d26a5a0feaaf19e37a0d5a245b12763b",
            "next": "40441f58d26a5a0feaaf19e37a0d5a245b12763b"
        },
        "commit_message": " #325 fix buffer resize\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "40441f58d26a5a0feaaf19e37a0d5a245b12763b": {
                "sfm/src/main/java/org/sfm/csv/parser/ReaderCharBuffer.java": [
                    "public int org.sfm.csv.parser.ReaderCharBuffer.shiftBufferToMark()",
                    "private void org.sfm.csv.parser.ReaderCharBuffer.resize(int requireLength)"
                ]
            },
            "398a7554493929b5a6bd6e88db89eb136da9bd2b": {
                "sfm/src/main/java/org/sfm/csv/parser/ReaderCharBuffer.java": [
                    "public int org.sfm.csv.parser.ReaderCharBuffer.shiftBufferToMark()",
                    "private void org.sfm.csv.parser.ReaderCharBuffer.resize(int requireLength)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "728801337130c47a191341f060963ce878c6c631",
        "previous_commit": "30712706202d242ea54fcac595596d556df18a23",
        "date": 1586863138,
        "releases": {
            "previous": "728801337130c47a191341f060963ce878c6c631",
            "next": "728801337130c47a191341f060963ce878c6c631"
        },
        "commit_message": "propagate the underlying jdbc type when in select query mapper\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "728801337130c47a191341f060963ce878c6c631": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/JooqFieldKey.java": [
                    "public Type org.simpleflatmapper.jooq.JooqFieldKey.getType(Type targetType)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SelectQueryMapper.java": [
                    "private SetRowMapper<ResultSet, ResultSet, T, SQLException> org.simpleflatmapper.jooq.SelectQueryMapper<T>.buildMapper(Field[] fields)"
                ]
            },
            "30712706202d242ea54fcac595596d556df18a23": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/JooqFieldKey.java": [
                    "public Type org.simpleflatmapper.jooq.JooqFieldKey.getType(Type targetType)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SelectQueryMapper.java": [
                    "private SetRowMapper<ResultSet, ResultSet, T, SQLException> org.simpleflatmapper.jooq.SelectQueryMapper<T>.buildMapper(Field[] fields)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3ecc5aed329700c9ced91621980327825aaba5e9",
        "previous_commit": "6a2e5415ca1e942eec4fa81e372ee8a335079fa4",
        "date": 1486071683,
        "releases": {
            "previous": "3ecc5aed329700c9ced91621980327825aaba5e9",
            "next": "3ecc5aed329700c9ced91621980327825aaba5e9"
        },
        "commit_message": " #400 add param check on instantiator creation\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3ecc5aed329700c9ced91621980327825aaba5e9": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.getBiInstantiator(InstantiatorDefinition instantiatorDefinition, Class<?> s1, Class<?> s2, Map<org.simpleflatmapper.reflect.Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getInstantiator(InstantiatorDefinition instantiatorDefinition, Class<S> source, Map<org.simpleflatmapper.reflect.Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled)"
                ]
            },
            "6a2e5415ca1e942eec4fa81e372ee8a335079fa4": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.getBiInstantiator(InstantiatorDefinition instantiatorDefinition, Class<?> s1, Class<?> s2, Map<org.simpleflatmapper.reflect.Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled)",
                    "public <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.getInstantiator(InstantiatorDefinition instantiatorDefinition, Class<S> source, Map<org.simpleflatmapper.reflect.Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "90b68a388057d89ffbe5469f3c9717fb715f9bfb",
        "previous_commit": "2b8d9fd01e61712049267d7693dd670d1b93edaa",
        "date": 1720731287,
        "releases": {
            "previous": "90b68a388057d89ffbe5469f3c9717fb715f9bfb",
            "next": "90b68a388057d89ffbe5469f3c9717fb715f9bfb"
        },
        "commit_message": "optimise standard parser path\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "90b68a388057d89ffbe5469f3c9717fb715f9bfb": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/impl/AsmCharConsumerFactory.java": [
                    "public AbstractCharConsumer org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.newCharConsumer(TextFormat textFormat, CharBuffer charBuffer, CellPreProcessor cellTransformer, boolean specialisedCharConsumer)",
                    "private static Method org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.generateSpecialisedCharConsumer(final SpecialisationKey key)"
                ]
            },
            "2b8d9fd01e61712049267d7693dd670d1b93edaa": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/impl/AsmCharConsumerFactory.java": [
                    "public AbstractCharConsumer org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.newCharConsumer(TextFormat textFormat, CharBuffer charBuffer, CellPreProcessor cellTransformer, boolean specialisedCharConsumer)",
                    "private static Constructor<? extends AbstractCharConsumer> org.simpleflatmapper.lightningcsv.impl.AsmCharConsumerFactory.generateSpecialisedCharConsumer(final SpecialisationKey key)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "93563da857f4764d2b6673c2adb0aa380ec0658f",
        "previous_commit": "9757a550009bb4e79f50e93e68657d8b19ef772c",
        "date": 1539099508,
        "releases": {
            "previous": "93563da857f4764d2b6673c2adb0aa380ec0658f",
            "next": "93563da857f4764d2b6673c2adb0aa380ec0658f"
        },
        "commit_message": "java7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "93563da857f4764d2b6673c2adb0aa380ec0658f": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordMapperProviderFactory.java": [
                    "public <T> Getter<? super Record, ? extends T> org.simpleflatmapper.jooq.SfmRecordMapperProviderFactory.getGetter(final String discriminatorColumn, final Class<T> discriminatorType)",
                    "public T org.simpleflatmapper.jooq.SfmRecordMapperProviderFactory.get(Record target)"
                ]
            },
            "9757a550009bb4e79f50e93e68657d8b19ef772c": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordMapperProviderFactory.java": [
                    "public <T> Getter<? super Record, ? extends T> org.simpleflatmapper.jooq.SfmRecordMapperProviderFactory.getGetter(final String discriminatorColumn, final Class<T> discriminatorType)",
                    "public T org.simpleflatmapper.jooq.SfmRecordMapperProviderFactory.get(Record target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bd821ca6baae8c07eb4a1414f43a8b392df33d04",
        "previous_commit": "22a5f235884c735283041b645e4734a38d1320d5",
        "date": 1532535852,
        "releases": {
            "previous": "bd821ca6baae8c07eb4a1414f43a8b392df33d04",
            "next": "bd821ca6baae8c07eb4a1414f43a8b392df33d04"
        },
        "commit_message": "use non direct reference to ec\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bd821ca6baae8c07eb4a1414f43a8b392df33d04": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T, E> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newArrayMeta(Class<T> clazz)",
                    "private <T, E> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newCollectionMeta(Type type)"
                ]
            },
            "22a5f235884c735283041b645e4734a38d1320d5": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T, E> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newArrayMeta(Class<T> clazz)",
                    "private <T, E> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newCollectionMeta(Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a71312190565b569177bf092bd51bfe29d8e82aa",
        "previous_commit": "c645bf8610f408752648c6265ede0c517d2d3cb9",
        "date": 1510668553,
        "releases": {
            "previous": "a71312190565b569177bf092bd51bfe29d8e82aa",
            "next": "a71312190565b569177bf092bd51bfe29d8e82aa"
        },
        "commit_message": " #463 simple implemenation of mandatory column\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a71312190565b569177bf092bd51bfe29d8e82aa": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "public final CsvMapper<T> org.simpleflatmapper.csv.CsvMapperBuilder<T>.mapper()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvMapperImpl.java": [
                    "protected CsvMapperCellConsumer<T> org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.newCellConsumer(final CheckedConsumer<? super T> handler, BreakDetector parentBreakDetector, boolean appendCollection)"
                ]
            },
            "c645bf8610f408752648c6265ede0c517d2d3cb9": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "public final CsvMapper<T> org.simpleflatmapper.csv.CsvMapperBuilder<T>.mapper()"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvMapperImpl.java": [
                    "protected CsvMapperCellConsumer<T> org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.newCellConsumer(final CheckedConsumer<? super T> handler, BreakDetector parentBreakDetector, boolean appendCollection)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ba5f392251b955d12d0892987da4f50062d60da6",
        "previous_commit": "93563da857f4764d2b6673c2adb0aa380ec0658f",
        "date": 1539099892,
        "releases": {
            "previous": "ba5f392251b955d12d0892987da4f50062d60da6",
            "next": "ba5f392251b955d12d0892987da4f50062d60da6"
        },
        "commit_message": " user getValue as get is only recent for java 7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ba5f392251b955d12d0892987da4f50062d60da6": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordMapperProviderFactory.java": [
                    "public <T> Getter<? super Record, ? extends T> org.simpleflatmapper.jooq.SfmRecordMapperProviderFactory.getGetter(final String discriminatorColumn, final Class<T> discriminatorType)",
                    "public T org.simpleflatmapper.jooq.SfmRecordMapperProviderFactory.get(Record target)"
                ]
            },
            "93563da857f4764d2b6673c2adb0aa380ec0658f": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordMapperProviderFactory.java": [
                    "public <T> Getter<? super Record, ? extends T> org.simpleflatmapper.jooq.SfmRecordMapperProviderFactory.getGetter(final String discriminatorColumn, final Class<T> discriminatorType)",
                    "public T org.simpleflatmapper.jooq.SfmRecordMapperProviderFactory.get(Record target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "13a3cefcffaddf3c6be991ea7faf58c744ecbef7",
        "previous_commit": "5213ea1874ef5ddc28a477206581767b180a0aee",
        "date": 1539076592,
        "releases": {
            "previous": "13a3cefcffaddf3c6be991ea7faf58c744ecbef7",
            "next": "13a3cefcffaddf3c6be991ea7faf58c744ecbef7"
        },
        "commit_message": " #558 special reflection service that can handle multi impl\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "13a3cefcffaddf3c6be991ea7faf58c744ecbef7": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "public static ReflectionService org.simpleflatmapper.reflect.ReflectionService.newInstance(boolean useAsmGeneration)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/instantiator/InstantiatorDefinitions.java": [
                    "public static InstantiatorDefinition org.simpleflatmapper.reflect.instantiator.InstantiatorDefinitions.lookForCompatibleOneArgument(List<InstantiatorDefinition> col, CompatibilityScorer scorer)"
                ]
            },
            "5213ea1874ef5ddc28a477206581767b180a0aee": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "public ReflectionService org.simpleflatmapper.reflect.ReflectionService.withAliasProvider(AliasProvider aliasProvider)",
                    "public static ReflectionService org.simpleflatmapper.reflect.ReflectionService.newInstance(boolean useAsmGeneration)",
                    "public boolean org.simpleflatmapper.reflect.ReflectionService.isAsmActivated()",
                    "public <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.getClassMeta(Type target)",
                    "public <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.getClassMetaExtraInstantiator(Type target, Member builderInstantiator)",
                    "public InstantiatorFactory org.simpleflatmapper.reflect.ReflectionService.getInstantiatorFactory()",
                    "public String org.simpleflatmapper.reflect.ReflectionService.getColumnName(Method method)",
                    "public boolean org.simpleflatmapper.reflect.ReflectionService.selfScoreFullName()",
                    "public ReflectionService org.simpleflatmapper.reflect.ReflectionService.withBuilderIgnoresNullValues(boolean builderIgnoresNullValues)",
                    "public ReflectionService org.simpleflatmapper.reflect.ReflectionService.withSelfScoreFullName(boolean selfScoreFullName)",
                    "public AsmFactory org.simpleflatmapper.reflect.ReflectionService.getAsmFactory()",
                    "public ObjectGetterFactory org.simpleflatmapper.reflect.ReflectionService.getObjectGetterFactory()",
                    "public boolean org.simpleflatmapper.reflect.ReflectionService.hasAsmFactory()",
                    "public void org.simpleflatmapper.reflect.ReflectionService.registerBuilder(String name, DefaultBuilderSupplier defaultBuilderSupplier)",
                    "public void org.simpleflatmapper.reflect.ReflectionService.registerClassMeta(Type type, ClassMeta<?> classMeta)",
                    "public String org.simpleflatmapper.reflect.ReflectionService.getColumnName(Field field)",
                    "public ObjectSetterFactory org.simpleflatmapper.reflect.ReflectionService.getObjectSetterFactory()",
                    "public List<InstantiatorDefinition> org.simpleflatmapper.reflect.ReflectionService.extractInstantiator(Type target, Member extraInstantiator)",
                    "public boolean org.simpleflatmapper.reflect.ReflectionService.builderIgnoresNullValues()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/instantiator/InstantiatorDefinitions.java": [
                    "public static InstantiatorDefinition org.simpleflatmapper.reflect.instantiator.InstantiatorDefinitions.lookForCompatibleOneArgument(List<InstantiatorDefinition> col, CompatibilityScorer scorer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2e2ba8697049b69c7a8a3b326f8a314cf258ddb4",
        "previous_commit": "6d649bae231b99b86ada608f972a1451098821db",
        "date": 1481107376,
        "releases": {
            "previous": "2e2ba8697049b69c7a8a3b326f8a314cf258ddb4",
            "next": "2e2ba8697049b69c7a8a3b326f8a314cf258ddb4"
        },
        "commit_message": "restore quote lookup\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2e2ba8697049b69c7a8a3b326f8a314cf258ddb4": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            },
            "6d649bae231b99b86ada608f972a1451098821db": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cd2378754da69168d4f1f6bf994a6662dba4e7cf",
        "previous_commit": "b894c0bca2069092cfd34700cbe42185ad53a8ee",
        "date": 1438723466,
        "releases": {
            "previous": "cd2378754da69168d4f1f6bf994a6662dba4e7cf",
            "next": "cd2378754da69168d4f1f6bf994a6662dba4e7cf"
        },
        "commit_message": "#218 add tupe conversion to map\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "cd2378754da69168d4f1f6bf994a6662dba4e7cf": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ],
                "sfm/src/main/java/org/sfm/utils/conv/ConverterFactory.java": [
                    "public static <P, F> Converter<F, P> org.sfm.utils.conv.ConverterFactory.getConverter(Class<F> inType, Type outType)"
                ]
            },
            "b894c0bca2069092cfd34700cbe42185ad53a8ee": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ],
                "sfm/src/main/java/org/sfm/utils/conv/ConverterFactory.java": [
                    "public static <P, F> Converter<F, P> org.sfm.utils.conv.ConverterFactory.getConverter(Class<F> inType, Type outType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "25d1ed5f7ea750a1d3715ff2f4e483df2778f9d2",
        "previous_commit": "455cbbfa100146b1b17a51d17134e1d4bb79d792",
        "date": 1542381488,
        "releases": {
            "previous": "25d1ed5f7ea750a1d3715ff2f4e483df2778f9d2",
            "next": "25d1ed5f7ea750a1d3715ff2f4e483df2778f9d2"
        },
        "commit_message": "some codacy clean up\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "25d1ed5f7ea750a1d3715ff2f4e483df2778f9d2": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetector.java": [
                    "private static <S> KeyDefinition<S, ?> org.simpleflatmapper.map.context.impl.BreakDetector<S>.emptyToNull(KeyDefinition<S, ?> definition)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "private <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.builderInstantiator(BuilderInstantiatorDefinition instantiatorDefinition,\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)"
                ]
            },
            "455cbbfa100146b1b17a51d17134e1d4bb79d792": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetector.java": [
                    "private static <S> KeyDefinition<S, ?> org.simpleflatmapper.map.context.impl.BreakDetector<S>.emptyToNull(KeyDefinition<S, ?> definition)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "private <S, T> Instantiator<S, T> org.simpleflatmapper.reflect.InstantiatorFactory.builderInstantiator(BuilderInstantiatorDefinition instantiatorDefinition,\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c645bf8610f408752648c6265ede0c517d2d3cb9",
        "previous_commit": "3c74087172c24abc416df177eb7db55b96ad61f3",
        "date": 1510662103,
        "releases": {
            "previous": "c645bf8610f408752648c6265ede0c517d2d3cb9",
            "next": "c645bf8610f408752648c6265ede0c517d2d3cb9"
        },
        "commit_message": " #463 add max mandatory field, used it in hasData\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c645bf8610f408752648c6265ede0c517d2d3cb9": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvMapperImpl.java": [
                    "protected CsvMapperCellConsumer<T> org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.newCellConsumer(final CheckedConsumer<? super T> handler, BreakDetector parentBreakDetector, boolean appendCollection)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvMapperCellConsumer.java": [
                    "protected final boolean org.simpleflatmapper.csv.mapper.CsvMapperCellConsumer<T>.hasData()"
                ]
            },
            "3c74087172c24abc416df177eb7db55b96ad61f3": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvMapperImpl.java": [
                    "protected CsvMapperCellConsumer<T> org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.newCellConsumer(final CheckedConsumer<? super T> handler, BreakDetector parentBreakDetector, boolean appendCollection)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvMapperCellConsumer.java": [
                    "protected final boolean org.simpleflatmapper.csv.mapper.CsvMapperCellConsumer<T>.hasData()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f452eb64966212ecf350db744efece9bfab10cb8",
        "previous_commit": "8ba67cf6fb419f13cfd6b3bbf7970271416ebdbf",
        "date": 1438690252,
        "releases": {
            "previous": "f452eb64966212ecf350db744efece9bfab10cb8",
            "next": "f452eb64966212ecf350db744efece9bfab10cb8"
        },
        "commit_message": "#199 add sfm tuple support\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f452eb64966212ecf350db744efece9bfab10cb8": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <E extends Enum<E>> Getter<GettableByIndexData, E> org.sfm.datastax.impl.RowGetterFactory.enumGetter(DatastaxColumnKey key, Class<?> enumClass)"
                ],
                "sfm/src/main/java/org/sfm/tuples/Tuples.java": [
                    "public static boolean org.sfm.tuples.Tuples.isTuple(Type type)"
                ]
            },
            "8ba67cf6fb419f13cfd6b3bbf7970271416ebdbf": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <E extends Enum<E>> Getter<GettableData, E> org.sfm.datastax.impl.RowGetterFactory.enumGetter(DatastaxColumnKey key, Class<?> enumClass)"
                ],
                "sfm/src/main/java/org/sfm/tuples/Tuples.java": [
                    "public static boolean org.sfm.tuples.Tuples.isTuple(Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c3f8c821a8230c4e75234f3b19acd019b4a0e3ac",
        "previous_commit": "34f7275e3ea42c74f313bc106933f9f05b4ee209",
        "date": 1572640035,
        "releases": {
            "previous": "c3f8c821a8230c4e75234f3b19acd019b4a0e3ac",
            "next": "c3f8c821a8230c4e75234f3b19acd019b4a0e3ac"
        },
        "commit_message": "not static member class\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c3f8c821a8230c4e75234f3b19acd019b4a0e3ac": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.extractDefinitions(final Type target)",
                    "public MethodVisitor org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.visitMethod(int access, final String methodName, String desc, String signature, String[] exceptions)"
                ]
            },
            "34f7275e3ea42c74f313bc106933f9f05b4ee209": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.extractDefinitions(final Type target)",
                    "public MethodVisitor org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.visitMethod(int access, final String methodName, String desc, String signature, String[] exceptions)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "49d6425fe62c0541387f65299f081201a715fc2c",
        "previous_commit": "ec6da2693c82cfcb006c228a2fd98f533a8deb8e",
        "date": 1543967701,
        "releases": {
            "previous": "49d6425fe62c0541387f65299f081201a715fc2c",
            "next": "49d6425fe62c0541387f65299f081201a715fc2c"
        },
        "commit_message": "remove finger printing in nonquoted loop\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "49d6425fe62c0541387f65299f081201a715fc2c": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)"
                ]
            },
            "ec6da2693c82cfcb006c228a2fd98f533a8deb8e": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "829af5617e47804ef7df7d54e13058fac49bc9a5",
        "previous_commit": "7bf64f1a568cb2f2794b8d8c490525524fd4c510",
        "date": 1573469155,
        "releases": {
            "previous": "829af5617e47804ef7df7d54e13058fac49bc9a5",
            "next": "829af5617e47804ef7df7d54e13058fac49bc9a5"
        },
        "commit_message": " working #551\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "829af5617e47804ef7df7d54e13058fac49bc9a5": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/RecordMapperBuilder.java": [
                    "public <S, P> FieldMapper<S, Record> org.simpleflatmapper.jooq.RecordMapperBuilder<E>.newFieldMapper(PropertyMapping<S, P, JooqFieldKey> propertyMapping, MappingContextFactoryBuilder contextFactoryBuilder, MapperBuilderErrorHandler mappingErrorHandler)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordUnmapperProvider.java": [
                    "public <E, R extends Record> RecordUnmapper<E, R> org.simpleflatmapper.jooq.SfmRecordUnmapperProvider.provide(Class<? extends E> type, RecordType<R> recordType)"
                ]
            },
            "7bf64f1a568cb2f2794b8d8c490525524fd4c510": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/RecordMapperBuilder.java": [],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordUnmapperProvider.java": [
                    "public <E, R extends Record> RecordUnmapper<E, R> org.simpleflatmapper.jooq.SfmRecordUnmapperProvider.provide(Class<? extends E> type, RecordType<R> recordType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "75f98ea2606127a048632be5f0a5f67b660d4993",
        "previous_commit": "91d16ed6cd82d6ea63c8e9b2a469442bbba1d9eb",
        "date": 1529056704,
        "releases": {
            "previous": "75f98ea2606127a048632be5f0a5f67b660d4993",
            "next": "75f98ea2606127a048632be5f0a5f67b660d4993"
        },
        "commit_message": " implement #518\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "75f98ea2606127a048632be5f0a5f67b660d4993": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "public final CsvMapper<T> org.simpleflatmapper.csv.CsvMapperBuilder<T>.mapper()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/annotation/impl/MappingAnnotationToPropertyServiceProducer.java": [
                    "public void org.simpleflatmapper.map.annotation.impl.MappingAnnotationToPropertyServiceProducer.generateProperty(Annotation annotation, Consumer<Object> consumer)"
                ]
            },
            "91d16ed6cd82d6ea63c8e9b2a469442bbba1d9eb": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "public final CsvMapper<T> org.simpleflatmapper.csv.CsvMapperBuilder<T>.mapper()"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/annotation/impl/MappingAnnotationToPropertyServiceProducer.java": [
                    "public void org.simpleflatmapper.map.annotation.impl.MappingAnnotationToPropertyServiceProducer.generateProperty(Annotation annotation, Consumer<Object> consumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b813dda98b5895678afa54df32cb4b991229dc84",
        "previous_commit": "b796a5e2fe3f2da3175396694fedcea7f51e2c29",
        "date": 1470380536,
        "releases": {
            "previous": "b813dda98b5895678afa54df32cb4b991229dc84",
            "next": "b813dda98b5895678afa54df32cb4b991229dc84"
        },
        "commit_message": "fix sfm-jdbc\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b813dda98b5895678afa54df32cb4b991229dc84": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/setter/JodaTimePreparedStatementFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.setter.JodaTimePreparedStatementFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ]
            },
            "b796a5e2fe3f2da3175396694fedcea7f51e2c29": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/setter/JodaTimePreparedStatementFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.setter.JodaTimePreparedStatementFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "41a99fcf811d74f839728146f97ceaa57d085ba1",
        "previous_commit": "bebf57588d72debe6822a90e983f9ca6a49c23c5",
        "date": 1463344870,
        "releases": {
            "previous": "41a99fcf811d74f839728146f97ceaa57d085ba1",
            "next": "41a99fcf811d74f839728146f97ceaa57d085ba1"
        },
        "commit_message": "#308 implement\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "41a99fcf811d74f839728146f97ceaa57d085ba1": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> FieldMapperMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.sfm.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm/src/main/java/org/sfm/map/column/GetterProperty.java": [
                    "public Type org.sfm.map.column.GetterProperty.getReturnType()"
                ]
            },
            "bebf57588d72debe6822a90e983f9ca6a49c23c5": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> FieldMapperMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.sfm.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm/src/main/java/org/sfm/map/column/GetterProperty.java": [
                    "public Type org.sfm.map.column.GetterProperty.getReturnType()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b0cf6deb3f37c91216e8e26279e8845bc45e792c",
        "previous_commit": "06db05bc370aa7c21f765a074eccdf41a84e349a",
        "date": 1543965095,
        "releases": {
            "previous": "b0cf6deb3f37c91216e8e26279e8845bc45e792c",
            "next": "b0cf6deb3f37c91216e8e26279e8845bc45e792c"
        },
        "commit_message": "small optimisation of loop jump\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b0cf6deb3f37c91216e8e26279e8845bc45e792c": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)"
                ]
            },
            "06db05bc370aa7c21f765a074eccdf41a84e349a": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "60e199adbd13195e4c5ec4a3f6cca6c327949ed6",
        "previous_commit": "739191110f66b68af3e6323a5dedb447901bed2b",
        "date": 1522603819,
        "releases": {
            "previous": "60e199adbd13195e4c5ec4a3f6cca6c327949ed6",
            "next": "60e199adbd13195e4c5ec4a3f6cca6c327949ed6"
        },
        "commit_message": " fix #502\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "60e199adbd13195e4c5ec4a3f6cca6c327949ed6": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstance(Class<?> s1, Class<?> s2, ExecutableInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Parameter[] parameters)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorBuilder.java": [
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendNewInstanceBuilderOnMethod(Class<?> sourceClass, ExecutableInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Parameter[] parameters)"
                ]
            },
            "739191110f66b68af3e6323a5dedb447901bed2b": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstance(Class<?> s1, Class<?> s2, ExecutableInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Parameter[] parameters)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorBuilder.java": [
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendNewInstanceBuilderOnMethod(Class<?> sourceClass, ExecutableInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Parameter[] parameters)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "872f4cb5f511a4e894eab34adf3a1456cd624cbc",
        "previous_commit": "15bd9260a5c3ca189e15eddfdcbd1f067d66b6ce",
        "date": 1456504231,
        "releases": {
            "previous": "872f4cb5f511a4e894eab34adf3a1456cd624cbc",
            "next": "872f4cb5f511a4e894eab34adf3a1456cd624cbc"
        },
        "commit_message": "javatime settable data go through converter factory\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "872f4cb5f511a4e894eab34adf3a1456cd624cbc": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/SettableDataSetterFactory.java": [
                    "public <P> Setter<SettableByIndexData, P> org.sfm.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey, ? extends ColumnDefinition<DatastaxColumnKey, ?>> arg)"
                ],
                "sfm/src/main/java/org/sfm/utils/conv/ConverterFactory.java": [
                    "public static <P, F> Converter<F, P> org.sfm.utils.conv.ConverterFactory.getConverter(Class<F> inType, Type outType, Object... params)"
                ]
            },
            "15bd9260a5c3ca189e15eddfdcbd1f067d66b6ce": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/SettableDataSetterFactory.java": [
                    "public <P> Setter<SettableByIndexData, P> org.sfm.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey, ? extends ColumnDefinition<DatastaxColumnKey, ?>> arg)"
                ],
                "sfm/src/main/java/org/sfm/utils/conv/ConverterFactory.java": [
                    "public static <P, F> Converter<F, P> org.sfm.utils.conv.ConverterFactory.getConverter(Class<F> inType, Type outType, Object... params)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7ae317921b25fc227a7ac00ead2d76ad6ce67f82",
        "previous_commit": "60f24028fd93a5caaa894185240d44234e2898fb",
        "date": 1475010876,
        "releases": {
            "previous": "7ae317921b25fc227a7ac00ead2d76ad6ce67f82",
            "next": "7ae317921b25fc227a7ac00ead2d76ad6ce67f82"
        },
        "commit_message": " #82 fix test\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7ae317921b25fc227a7ac00ead2d76ad6ce67f82": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/OptionalPropertyFinder.java": [
                    "public <P extends PropertyMeta<T, ?>> void org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.found(P propertyMeta, Runnable selectionCallback, PropertyMatchingScore score)",
                    "protected void org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, FoundProperty matchingProperties, PropertyMatchingScore score, boolean allowSelfReference)"
                ]
            },
            "60f24028fd93a5caaa894185240d44234e2898fb": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/OptionalPropertyFinder.java": [
                    "public <P extends PropertyMeta<T, ?>> void org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.found(P propertyMeta, Runnable selectionCallback, PropertyMatchingScore score)",
                    "protected void org.simpleflatmapper.reflect.meta.OptionalPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, FoundProperty matchingProperties, PropertyMatchingScore score, boolean allowSelfReference)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f86300c8f70e5e3db30fb2c6670666cbd78ea34c",
        "previous_commit": "1a3147ecc35bbc2693997a68861dac669a8c6e9a",
        "date": 1558619473,
        "releases": {
            "previous": "f86300c8f70e5e3db30fb2c6670666cbd78ea34c",
            "next": "f86300c8f70e5e3db30fb2c6670666cbd78ea34c"
        },
        "commit_message": "java6\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f86300c8f70e5e3db30fb2c6670666cbd78ea34c": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/property/JdbcGetterFactoryProperty.java": [
                    "public static <T> GetterFactoryProperty org.simpleflatmapper.jdbc.property.JdbcGetterFactoryProperty.forType(Class<T> type, final ResultSetGetter<T> getter)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.property.JdbcGetterFactoryProperty.newGetter(Type target, JdbcColumnKey key, Object... properties)"
                ]
            },
            "1a3147ecc35bbc2693997a68861dac669a8c6e9a": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/property/JdbcGetterFactoryProperty.java": [
                    "public static <T> GetterFactoryProperty org.simpleflatmapper.jdbc.property.JdbcGetterFactoryProperty.forType(Class<T> type, final ResultSetGetter<T> getter)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.property.JdbcGetterFactoryProperty.newGetter(Type target, JdbcColumnKey key, Object... properties)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "986dbc0cb77ac5e6867cb181a13ba3dd340244f9",
        "previous_commit": "e1ec132ff3283b13a57990f46134c8da65bee265",
        "date": 1473449217,
        "releases": {
            "previous": "986dbc0cb77ac5e6867cb181a13ba3dd340244f9",
            "next": "986dbc0cb77ac5e6867cb181a13ba3dd340244f9"
        },
        "commit_message": "Optimize StringArrayConsumer\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "986dbc0cb77ac5e6867cb181a13ba3dd340244f9": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvReader.java": [
                    "public <RH extends RowHandler<String[]>> RH org.simpleflatmapper.csv.CsvReader.read(RH handler)",
                    "public <RH extends RowHandler<String[]>> RH org.simpleflatmapper.csv.CsvReader.read(RH handler, int limit)"
                ]
            },
            "e1ec132ff3283b13a57990f46134c8da65bee265": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvReader.java": [
                    "public <RH extends RowHandler<String[]>> RH org.simpleflatmapper.csv.CsvReader.read(RH handler)",
                    "public <RH extends RowHandler<String[]>> RH org.simpleflatmapper.csv.CsvReader.read(RH handler, int limit)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "724d6104311efaf8d23f4e0c7c77a4bed555880c",
        "previous_commit": "6b2ac6130e7eba1756375f16b594cc062c91167c",
        "date": 1522602767,
        "releases": {
            "previous": "724d6104311efaf8d23f4e0c7c77a4bed555880c",
            "next": "724d6104311efaf8d23f4e0c7c77a4bed555880c"
        },
        "commit_message": " fix #502\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "724d6104311efaf8d23f4e0c7c77a4bed555880c": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstance(Class<?> s1, Class<?> s2, ExecutableInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Parameter[] parameters)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorBuilder.java": [
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendNewInstanceBuilderOnMethod(Class<?> sourceClass, ExecutableInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Parameter[] parameters)"
                ]
            },
            "6b2ac6130e7eba1756375f16b594cc062c91167c": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstance(Class<?> s1, Class<?> s2, ExecutableInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Parameter[] parameters)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/InstantiatorBuilder.java": [
                    "private static <S> void org.simpleflatmapper.reflect.asm.InstantiatorBuilder.appendNewInstanceBuilderOnMethod(Class<?> sourceClass, ExecutableInstantiatorDefinition instantiatorDefinition, Map<Parameter, Getter<? super S, ?>> injections, ClassWriter cw, String targetType, String sourceType, String classType, Parameter[] parameters)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "693cf754572045bc27f1d16f7417d3ebdaf87fdb",
        "previous_commit": "823bbd4e4e4256eb8f656ce3028e95dc3cbd44ac",
        "date": 1531298421,
        "releases": {
            "previous": "693cf754572045bc27f1d16f7417d3ebdaf87fdb",
            "next": "693cf754572045bc27f1d16f7417d3ebdaf87fdb"
        },
        "commit_message": "immutable list\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "693cf754572045bc27f1d16f7417d3ebdaf87fdb": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static Type org.simpleflatmapper.util.TypeHelper.resolveTypeVariable(Type type, TypeVariable t)",
                    "private static Type org.simpleflatmapper.util.TypeHelper.getGenericInterface(Type t, Class<?> i)"
                ]
            },
            "823bbd4e4e4256eb8f656ce3028e95dc3cbd44ac": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static Type org.simpleflatmapper.util.TypeHelper.resolveTypeVariable(Type type, TypeVariable t)",
                    "private static Type org.simpleflatmapper.util.TypeHelper.getGenericInterface(Type t, Class<?> i)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9ac0241cbb1e719b481020cd3051ce46dc059ae8",
        "previous_commit": "d22e6f2ccfb966c604c16afa9a46194c9ad6ef98",
        "date": 1474494266,
        "releases": {
            "previous": "9ac0241cbb1e719b481020cd3051ce46dc059ae8",
            "next": "9ac0241cbb1e719b481020cd3051ce46dc059ae8"
        },
        "commit_message": " #82 fix java6\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9ac0241cbb1e719b481020cd3051ce46dc059ae8": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, MatchingProperties matchingProperties, PropertyMatchingScore score)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, PropertyFinder.MatchingProperties matchingProperties, PropertyMatchingScore score)"
                ]
            },
            "d22e6f2ccfb966c604c16afa9a46194c9ad6ef98": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, MatchingProperties matchingProperties, PropertyMatchingScore score)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForConstructor(final PropertyNameMatcher propertyNameMatcher, PropertyFinder.MatchingProperties matchingProperties, PropertyMatchingScore score)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "411171eacfcaa7ab5d32fdc243aa616b31340f2e",
        "previous_commit": "606ebc1b862fbd18177fd96096128a62b2acc89d",
        "date": 1519838073,
        "releases": {
            "previous": "411171eacfcaa7ab5d32fdc243aa616b31340f2e",
            "next": "411171eacfcaa7ab5d32fdc243aa616b31340f2e"
        },
        "commit_message": "fix #492\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "411171eacfcaa7ab5d32fdc243aa616b31340f2e": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/SetterBuilder.java": [
                    "private static void org.simpleflatmapper.reflect.asm.SetterBuilder.appendSet(Method method, ClassWriter cw, Class<?> target, String targetType, String propertyType, String classType)",
                    "public static byte[] org.simpleflatmapper.reflect.asm.SetterBuilder.createPrimitiveSetter(String className, Method method)"
                ]
            },
            "606ebc1b862fbd18177fd96096128a62b2acc89d": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/SetterBuilder.java": [
                    "private static void org.simpleflatmapper.reflect.asm.SetterBuilder.appendSet(Method method, ClassWriter cw, Class<?> target, String targetType, String propertyType, String classType)",
                    "public static byte[] org.simpleflatmapper.reflect.asm.SetterBuilder.createPrimitiveSetter(String className, Method method)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "87afc223bb6662e960551e513f3927c0b19cae3b",
        "previous_commit": "01d3d541529d98a5817abb5771def08514963b81",
        "date": 1469896529,
        "releases": {
            "previous": "87afc223bb6662e960551e513f3927c0b19cae3b",
            "next": "87afc223bb6662e960551e513f3927c0b19cae3b"
        },
        "commit_message": " #330 allow for multiple format definition\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "87afc223bb6662e960551e513f3927c0b19cae3b": {
                "sfm/src/main/java/org/sfm/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.sfm.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm/src/main/java/org/sfm/csv/impl/cellreader/CalendarCellValueReader.java": [
                    "public Object org.sfm.csv.impl.cellreader.CalendarCellValueReader.newContext()"
                ]
            },
            "01d3d541529d98a5817abb5771def08514963b81": {
                "sfm/src/main/java/org/sfm/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.sfm.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ],
                "sfm/src/main/java/org/sfm/csv/impl/cellreader/CalendarCellValueReader.java": [
                    "public Object org.sfm.csv.impl.cellreader.CalendarCellValueReader.newContext()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b30e6cba2f0a38d83a91342aacde4d62035dc0a3",
        "previous_commit": "d91cef8e42b4918d620a32669e0db83f7b8c5518",
        "date": 1556182312,
        "releases": {
            "previous": "b30e6cba2f0a38d83a91342aacde4d62035dc0a3",
            "next": "b30e6cba2f0a38d83a91342aacde4d62035dc0a3"
        },
        "commit_message": " #629 add sfm column annotation\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b30e6cba2f0a38d83a91342aacde4d62035dc0a3": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JpaAliasProviderFactory.java": [
                    "public void org.simpleflatmapper.jdbc.impl.JpaAliasProviderFactory.produce(Consumer<? super AliasProvider> consumer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ArrayAliasProvider.java": [
                    "public Table org.simpleflatmapper.reflect.meta.ArrayAliasProvider.getTable(Class<?> target)"
                ]
            },
            "d91cef8e42b4918d620a32669e0db83f7b8c5518": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JpaAliasProviderFactory.java": [
                    "public void org.simpleflatmapper.jdbc.impl.JpaAliasProviderFactory.produce(Consumer<? super AliasProvider> consumer)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ArrayAliasProvider.java": [
                    "public Table org.simpleflatmapper.reflect.meta.ArrayAliasProvider.getTable(Class<?> target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7618b7576ece77e5300ee591d7fa8bca59af74fb",
        "previous_commit": "5877ee80358d07e27902e41c57a6423c42d11126",
        "date": 1544434685,
        "releases": {
            "previous": "7618b7576ece77e5300ee591d7fa8bca59af74fb",
            "next": "7618b7576ece77e5300ee591d7fa8bca59af74fb"
        },
        "commit_message": "some minor opt\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7618b7576ece77e5300ee591d7fa8bca59af74fb": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)"
                ]
            },
            "5877ee80358d07e27902e41c57a6423c42d11126": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f27e72a9952f28dabb56a4fd3ee91927bc503c0e",
        "previous_commit": "ee4af1a0bd971b5618ce58ce9a131e962971bdaa",
        "date": 1531689090,
        "releases": {
            "previous": "f27e72a9952f28dabb56a4fd3ee91927bc503c0e",
            "next": "f27e72a9952f28dabb56a4fd3ee91927bc503c0e"
        },
        "commit_message": "expose api to register builder against class name, fix builder npe when instantiator cached\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f27e72a9952f28dabb56a4fd3ee91927bc503c0e": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.asm.AsmFactory.createBiInstantiator(final Class<?> s1, final Class<?> s2, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean builderIgnoresNullValues)"
                ]
            },
            "ee4af1a0bd971b5618ce58ce9a131e962971bdaa": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmFactory.java": [
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.asm.AsmFactory.createBiInstantiator(final Class<?> s1, final Class<?> s2, final InstantiatorDefinition instantiatorDefinition, final Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean builderIgnoresNullValues)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d08606571ce83502d5640f2812e6035557ed7d15",
        "previous_commit": "a1508ea8520ca292b7b6d05d62b021eda676c8f5",
        "date": 1572369788,
        "releases": {
            "previous": "d08606571ce83502d5640f2812e6035557ed7d15",
            "next": "d08606571ce83502d5640f2812e6035557ed7d15"
        },
        "commit_message": " #687 supper getting primitive arrays\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d08606571ce83502d5640f2812e6035557ed7d15": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType, JdbcColumnKey key, Object... properties)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType,\t\t\t\t\t\t\t\t\t\t\t JdbcColumnKey key, Object... properties)"
                ]
            },
            "a1508ea8520ca292b7b6d05d62b021eda676c8f5": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/ResultSetGetterFactory.java": [
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType, JdbcColumnKey key, Object... properties)",
                    "public <P> Getter<ResultSet, P> org.simpleflatmapper.jdbc.ResultSetGetterFactory.newGetter(Type genericType,\t\t\t\t\t\t\t\t\t\t\t JdbcColumnKey key, Object... properties)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7bcb2c570cd783b3ec231e442a798df458c9ed26",
        "previous_commit": "1ad193b6cefee45a6a42ba05a6165d27e63c4aa1",
        "date": 1510743035,
        "releases": {
            "previous": "7bcb2c570cd783b3ec231e442a798df458c9ed26",
            "next": "7bcb2c570cd783b3ec231e442a798df458c9ed26"
        },
        "commit_message": "inline end of quote loop\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7bcb2c570cd783b3ec231e442a798df458c9ed26": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            },
            "1ad193b6cefee45a6a42ba05a6165d27e63c4aa1": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b192a3b0b6918e8ddd11bd77222a64a7cf40a6cf",
        "previous_commit": "8ad58670835d130839ea5ad0c953a3fa51941e5e",
        "date": 1468674844,
        "releases": {
            "previous": "b192a3b0b6918e8ddd11bd77222a64a7cf40a6cf",
            "next": "b192a3b0b6918e8ddd11bd77222a64a7cf40a6cf"
        },
        "commit_message": " #328 Datatype asJavaClass datastax 3 test\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b192a3b0b6918e8ddd11bd77222a64a7cf40a6cf": {
                "sfm-datastax/src/main/java/org/sfm/datastax/DataTypeHelper.java": [
                    "public static Class<?> org.sfm.datastax.DataTypeHelper.asJavaClass(DataType dataType)",
                    "public static Class<?> org.sfm.datastax.DataTypeHelper.asJavaClass(DataType.Name name)"
                ]
            },
            "8ad58670835d130839ea5ad0c953a3fa51941e5e": {
                "sfm-datastax/src/main/java/org/sfm/datastax/DataTypeHelper.java": [
                    "public static Class<?> org.sfm.datastax.DataTypeHelper.asJavaClass(DataType dataType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "feed79c8f8f8a39c596942392bc7afe2274e1b3c",
        "previous_commit": "dd1719d870ef76da530471f0e36ef3773e515d54",
        "date": 1561057267,
        "releases": {
            "previous": "feed79c8f8f8a39c596942392bc7afe2274e1b3c",
            "next": "feed79c8f8f8a39c596942392bc7afe2274e1b3c"
        },
        "commit_message": "fix ref to RS\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "feed79c8f8f8a39c596942392bc7afe2274e1b3c": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/GetterFactoryProperty.java": [
                    "public <P> ContextualGetter<S, P> org.simpleflatmapper.map.property.GetterFactoryProperty.newGetter(Type target, K key, MappingContextFactoryBuilder<?, K> mappingContextFactoryBuilder, Object... properties)",
                    "public static <T, K extends FieldKey<K>, S> GetterFactoryProperty org.simpleflatmapper.map.property.GetterFactoryProperty.forType(final Class<T> type, final IndexedGetter<S, T> getter)"
                ]
            },
            "dd1719d870ef76da530471f0e36ef3773e515d54": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/GetterFactoryProperty.java": [
                    "public static <T, K extends FieldKey<K>, S> GetterFactoryProperty org.simpleflatmapper.map.property.GetterFactoryProperty.forType(final Class<T> type, final IndexedGetter<S, T> getter)",
                    "public <P> ContextualGetter<ResultSet, P> org.simpleflatmapper.map.property.GetterFactoryProperty.newGetter(Type target, K key, MappingContextFactoryBuilder<?, K> mappingContextFactoryBuilder, Object... properties)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b36ea32beaf090193816ecd1066cac9ae04d6790",
        "previous_commit": "7f2d7f6c869c204ea1fe25b8c9d8406601ecf74b",
        "date": 1483484652,
        "releases": {
            "previous": "b36ea32beaf090193816ecd1066cac9ae04d6790",
            "next": "b36ea32beaf090193816ecd1066cac9ae04d6790"
        },
        "commit_message": " #391 fix predicate, cache mapper on stmt context\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b36ea32beaf090193816ecd1066cac9ae04d6790": {
                "sfm-jdbi/src/main/java/org/simpleflatmapper/jdbi/SfmResultSetMapperFactory.java": [
                    "public boolean org.simpleflatmapper.jdbi.SfmResultSetMapperFactory.accepts(Class aClass, StatementContext statementContext)",
                    "public ResultSetMapper org.simpleflatmapper.jdbi.SfmResultSetMapperFactory.mapperFor(Class aClass, StatementContext statementContext)"
                ]
            },
            "7f2d7f6c869c204ea1fe25b8c9d8406601ecf74b": {
                "sfm-jdbi/src/main/java/org/simpleflatmapper/jdbi/SfmResultSetMapperFactory.java": [
                    "public boolean org.simpleflatmapper.jdbi.SfmResultSetMapperFactory.accepts(Class aClass, StatementContext statementContext)",
                    "public ResultSetMapper org.simpleflatmapper.jdbi.SfmResultSetMapperFactory.mapperFor(Class aClass, StatementContext statementContext)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c205fdab2b0c0bc3d733c14a5adc903159e7b7e1",
        "previous_commit": "2e2ba8697049b69c7a8a3b326f8a314cf258ddb4",
        "date": 1481107443,
        "releases": {
            "previous": "c205fdab2b0c0bc3d733c14a5adc903159e7b7e1",
            "next": "c205fdab2b0c0bc3d733c14a5adc903159e7b7e1"
        },
        "commit_message": "restore quote lookup\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c205fdab2b0c0bc3d733c14a5adc903159e7b7e1": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            },
            "2e2ba8697049b69c7a8a3b326f8a314cf258ddb4": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "79fdbd31e1ea699a754ad05ca26b8caaa8bca833",
        "previous_commit": "0f5edc92108b6256e332f4ad7c2f39fc1d53b18f",
        "date": 1543787576,
        "releases": {
            "previous": "79fdbd31e1ea699a754ad05ca26b8caaa8bca833",
            "next": "79fdbd31e1ea699a754ad05ca26b8caaa8bca833"
        },
        "commit_message": "add finger printing of separator\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "79fdbd31e1ea699a754ad05ca26b8caaa8bca833": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)"
                ]
            },
            "0f5edc92108b6256e332f4ad7c2f39fc1d53b18f": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "23bdefd74c531087b533c0ac1a5aa0ebba0f315a",
        "previous_commit": "4aa66b02d77c44c249ea2af71cecf6f021eee5c4",
        "date": 1565257743,
        "releases": {
            "previous": "23bdefd74c531087b533c0ac1a5aa0ebba0f315a",
            "next": "23bdefd74c531087b533c0ac1a5aa0ebba0f315a"
        },
        "commit_message": " #671 better array index handling\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "23bdefd74c531087b533c0ac1a5aa0ebba0f315a": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "private PropertyFinder<?> org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForPropertyFinder(PropertyMeta<?, ?> owner)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.accept(PropertyMeta<T, ?> propertyMeta)"
                ]
            },
            "4aa66b02d77c44c249ea2af71cecf6f021eee5c4": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "private PropertyFinder<?> org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForPropertyFinder(PropertyMeta<?, ?> owner)"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/TuplePropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.TuplePropertyFinder<T>.accept(PropertyMeta<T, ?> propertyMeta)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "098857a1fa6c51d58e99f85ce341baf4cde3f432",
        "previous_commit": "60e73a4a3088762a80e1e8b58f65f535a8bee7e3",
        "date": 1541157057,
        "releases": {
            "previous": "098857a1fa6c51d58e99f85ce341baf4cde3f432",
            "next": "098857a1fa6c51d58e99f85ce341baf4cde3f432"
        },
        "commit_message": "fix #577\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "098857a1fa6c51d58e99f85ce341baf4cde3f432": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public boolean org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matches(final CharSequence property)",
                    "private boolean org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.isSeparatorChar(char charColumn)"
                ]
            },
            "60e73a4a3088762a80e1e8b58f65f535a8bee7e3": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public boolean org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matches(final CharSequence property)",
                    "private boolean org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.isSeparatorChar(char charColumn)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "07fdfacfa6416b558e6ee08bc8439265c75bc5f2",
        "previous_commit": "cd2378754da69168d4f1f6bf994a6662dba4e7cf",
        "date": 1438725469,
        "releases": {
            "previous": "07fdfacfa6416b558e6ee08bc8439265c75bc5f2",
            "next": "07fdfacfa6416b558e6ee08bc8439265c75bc5f2"
        },
        "commit_message": "#218 tuple and udt\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "07fdfacfa6416b558e6ee08bc8439265c75bc5f2": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/DatastaxUDTGetter.java": [
                    "public static <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.DatastaxUDTGetter<T>.newInstance(DatastaxMapperFactory factory, Type target, UserType tt, int index)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ]
            },
            "cd2378754da69168d4f1f6bf994a6662dba4e7cf": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/DatastaxUDTGetter.java": [
                    "public static <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.DatastaxUDTGetter<T>.newInstance(DatastaxMapperFactory factory, Type target, UserType tt, int index)"
                ],
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "56d4e798e2bb6411d7dbe9505d74d77cb4aaf35d",
        "previous_commit": "8de4b217024ab639136f738a7dbcac932d16861d",
        "date": 1486590625,
        "releases": {
            "previous": "56d4e798e2bb6411d7dbe9505d74d77cb4aaf35d",
            "next": "56d4e798e2bb6411d7dbe9505d74d77cb4aaf35d"
        },
        "commit_message": " #405 implement not merge on np key for csv mapper\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "56d4e798e2bb6411d7dbe9505d74d77cb4aaf35d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvMapperImpl.java": [
                    "protected CsvMapperCellConsumer org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.newCellConsumer(final CheckedConsumer<? super T> handler)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvMapperCellConsumer.java": [
                    "private void org.simpleflatmapper.csv.mapper.CsvMapperCellConsumer<T>.updateBreakStatus(int cellIndex)"
                ]
            },
            "8de4b217024ab639136f738a7dbcac932d16861d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CsvMapperImpl.java": [
                    "protected CsvMapperCellConsumer org.simpleflatmapper.csv.impl.CsvMapperImpl<T>.newCellConsumer(final CheckedConsumer<? super T> handler)"
                ],
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvMapperCellConsumer.java": [
                    "private void org.simpleflatmapper.csv.mapper.CsvMapperCellConsumer<T>.updateBreakStatus(int cellIndex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "148be01ffe91fecf48ae8c3c204e80b9445f13ae",
        "previous_commit": "3ea1bf7dc4e4706c12a6cb3b716d9eaa9e994813",
        "date": 1510697545,
        "releases": {
            "previous": "148be01ffe91fecf48ae8c3c204e80b9445f13ae",
            "next": "148be01ffe91fecf48ae8c3c204e80b9445f13ae"
        },
        "commit_message": "opt non quoted path\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "148be01ffe91fecf48ae8c3c204e80b9445f13ae": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            },
            "3ea1bf7dc4e4706c12a6cb3b716d9eaa9e994813": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8ae9ff7029f62357611aadc02588c14d8060785a",
        "previous_commit": "d4724b53e10319538226aceb517a721dd1e2a7c4",
        "date": 1456327696,
        "releases": {
            "previous": "8ae9ff7029f62357611aadc02588c14d8060785a",
            "next": "8ae9ff7029f62357611aadc02588c14d8060785a"
        },
        "commit_message": " increase datastax java time coverage\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8ae9ff7029f62357611aadc02588c14d8060785a": {
                "sfm/src/main/java/org/sfm/jdbc/impl/convert/time/JavaYearToDateConverter.java": [
                    "public Date org.sfm.jdbc.impl.convert.time.JavaYearToDateConverter.convert(Year in)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/impl/convert/time/JavaYearTojuDateConverter.java": [
                    "public Date org.sfm.jdbc.impl.convert.time.JavaYearTojuDateConverter.convert(Year in)"
                ]
            },
            "d4724b53e10319538226aceb517a721dd1e2a7c4": {
                "sfm/src/main/java/org/sfm/jdbc/impl/convert/time/JavaYearToDateConverter.java": [
                    "public Date org.sfm.jdbc.impl.convert.time.JavaYearToDateConverter.convert(Year in)"
                ],
                "sfm/src/main/java/org/sfm/jdbc/impl/convert/time/JavaYearTojuDateConverter.java": [
                    "public Date org.sfm.jdbc.impl.convert.time.JavaYearTojuDateConverter.convert(Year in)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ca9967f2e29cd16703cd3d332811e22c9e51302a",
        "previous_commit": "35e127ba77a9a4d97298929523edcd22004dddea",
        "date": 1468860598,
        "releases": {
            "previous": "ca9967f2e29cd16703cd3d332811e22c9e51302a",
            "next": "ca9967f2e29cd16703cd3d332811e22c9e51302a"
        },
        "commit_message": "#328 fix conversion, add setter test\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ca9967f2e29cd16703cd3d332811e22c9e51302a": {
                "sfm/src/main/java/org/sfm/utils/conv/ConverterFactory.java": [
                    "public BigInteger org.sfm.utils.conv.ConverterFactory.convert(Number in)",
                    "public BigDecimal org.sfm.utils.conv.ConverterFactory.convert(Number in)"
                ]
            },
            "35e127ba77a9a4d97298929523edcd22004dddea": {
                "sfm/src/main/java/org/sfm/utils/conv/ConverterFactory.java": [
                    "public BigInteger org.sfm.utils.conv.ConverterFactory.convert(Number in)",
                    "public BigDecimal org.sfm.utils.conv.ConverterFactory.convert(Number in)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "479d9b0fa3f67d12b26da8e18a3de962c92e1f1b",
        "previous_commit": "9c66254f0e7ecc755aac913272e340b5a76977fc",
        "date": 1469909832,
        "releases": {
            "previous": "479d9b0fa3f67d12b26da8e18a3de962c92e1f1b",
            "next": "479d9b0fa3f67d12b26da8e18a3de962c92e1f1b"
        },
        "commit_message": " #330 multiple datetimeformatter for java time\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "479d9b0fa3f67d12b26da8e18a3de962c92e1f1b": {
                "sfm/src/main/java/org/sfm/csv/CsvColumnDefinition.java": [
                    "public String[] org.sfm.csv.CsvColumnDefinition.dateFormats()"
                ],
                "sfm/src/main/java/org/sfm/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.sfm.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ]
            },
            "9c66254f0e7ecc755aac913272e340b5a76977fc": {
                "sfm/src/main/java/org/sfm/csv/CsvColumnDefinition.java": [
                    "public String[] org.sfm.csv.CsvColumnDefinition.dateFormats()"
                ],
                "sfm/src/main/java/org/sfm/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.sfm.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2a8cca03193d39fde295ca7baf9c8ebe932d89b3",
        "previous_commit": "56d4e798e2bb6411d7dbe9505d74d77cb4aaf35d",
        "date": 1486591224,
        "releases": {
            "previous": "2a8cca03193d39fde295ca7baf9c8ebe932d89b3",
            "next": "2a8cca03193d39fde295ca7baf9c8ebe932d89b3"
        },
        "commit_message": " #407 endOfRow return true if handler was called\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2a8cca03193d39fde295ca7baf9c8ebe932d89b3": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvMapperCellConsumer.java": [
                    "protected final void org.simpleflatmapper.csv.mapper.CsvMapperCellConsumer<T>.callHandler()",
                    "public final boolean org.simpleflatmapper.csv.mapper.CsvMapperCellConsumer<T>.endOfRow()"
                ]
            },
            "56d4e798e2bb6411d7dbe9505d74d77cb4aaf35d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/CsvMapperCellConsumer.java": [
                    "protected final void org.simpleflatmapper.csv.mapper.CsvMapperCellConsumer<T>.callHandler()",
                    "public final boolean org.simpleflatmapper.csv.mapper.CsvMapperCellConsumer<T>.endOfRow()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "92dd5dc043c602e18b98e055092dc4858cffeef5",
        "previous_commit": "7abfcc6d60dba51331b51c343607506f5cf2c2b1",
        "date": 1539175917,
        "releases": {
            "previous": "92dd5dc043c602e18b98e055092dc4858cffeef5",
            "next": "92dd5dc043c602e18b98e055092dc4858cffeef5"
        },
        "commit_message": "better error reporting when resultset does not support getObject(String, Class)\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "92dd5dc043c602e18b98e055092dc4858cffeef5": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/NameBasedResultSetGetterFactory.java": [
                    "public T org.simpleflatmapper.jdbc.NameBasedResultSetGetterFactory.get(ResultSet target)",
                    "public <T> Getter<? super ResultSet, ? extends T> org.simpleflatmapper.jdbc.NameBasedResultSetGetterFactory.getGetter(final String discriminatorColumn, final Class<T> discriminatorType)"
                ]
            },
            "7abfcc6d60dba51331b51c343607506f5cf2c2b1": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/NameBasedResultSetGetterFactory.java": [
                    "public T org.simpleflatmapper.jdbc.NameBasedResultSetGetterFactory.get(ResultSet target)",
                    "public <T> Getter<? super ResultSet, ? extends T> org.simpleflatmapper.jdbc.NameBasedResultSetGetterFactory.getGetter(final String discriminatorColumn, final Class<T> discriminatorType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0f5edc92108b6256e332f4ad7c2f39fc1d53b18f",
        "previous_commit": "9fee07cae2f55566df51a3a773fb356b86363a75",
        "date": 1543787562,
        "releases": {
            "previous": "0f5edc92108b6256e332f4ad7c2f39fc1d53b18f",
            "next": "0f5edc92108b6256e332f4ad7c2f39fc1d53b18f"
        },
        "commit_message": "optimise for most common case number\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0f5edc92108b6256e332f4ad7c2f39fc1d53b18f": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRow.java": [
                    "public static long org.simpleflatmapper.csv.CsvRow.parseLong(char[] s, int beginIndex, int endIndex)",
                    "public static int org.simpleflatmapper.csv.CsvRow.parseInt(char[] s, int beginIndex, int endIndex)"
                ]
            },
            "9fee07cae2f55566df51a3a773fb356b86363a75": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRow.java": [
                    "public static long org.simpleflatmapper.csv.CsvRow.parseLong(char[] s, int beginIndex, int endIndex)",
                    "public static int org.simpleflatmapper.csv.CsvRow.parseInt(char[] s, int beginIndex, int endIndex)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "96a199c5927142930f3885e05beb3bebcb5271c9",
        "previous_commit": "fb95dd723214f56371c5c869ad659d1332c4ce97",
        "date": 1459286512,
        "releases": {
            "previous": "96a199c5927142930f3885e05beb3bebcb5271c9",
            "next": "96a199c5927142930f3885e05beb3bebcb5271c9"
        },
        "commit_message": " #303 works on constructor injected\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "96a199c5927142930f3885e05beb3bebcb5271c9": {
                "sfm/src/main/java/org/sfm/csv/CsvMapperBuilder.java": [
                    "public final CsvMapper<T> org.sfm.csv.CsvMapperBuilder<T>.mapper()"
                ],
                "sfm/src/main/java/org/sfm/csv/impl/CellSetterFactory.java": [
                    "public <T, P> DelayedCellSetterFactory<T, P> org.sfm.csv.impl.CellSetterFactory.getDelayedCellSetter(PropertyMeta<T, P> prop, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ]
            },
            "fb95dd723214f56371c5c869ad659d1332c4ce97": {
                "sfm/src/main/java/org/sfm/csv/CsvMapperBuilder.java": [
                    "public final CsvMapper<T> org.sfm.csv.CsvMapperBuilder<T>.mapper()"
                ],
                "sfm/src/main/java/org/sfm/csv/impl/CellSetterFactory.java": [
                    "public <T, P> DelayedCellSetterFactory<T, P> org.sfm.csv.impl.CellSetterFactory.getDelayedCellSetter(PropertyMeta<T, P> prop, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "242d2e289e92c3558afd5746586ebbdb7f8fd558",
        "previous_commit": "bf528f4936c328f2faf621d32003eda5d54b7122",
        "date": 1473539731,
        "releases": {
            "previous": "242d2e289e92c3558afd5746586ebbdb7f8fd558",
            "next": "242d2e289e92c3558afd5746586ebbdb7f8fd558"
        },
        "commit_message": "readd specialize csv consumer\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "242d2e289e92c3558afd5746586ebbdb7f8fd558": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CsvCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.csv.parser.CsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.csv.parser.CsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)"
                ]
            },
            "bf528f4936c328f2faf621d32003eda5d54b7122": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CsvCharConsumer.java": [
                    "public final boolean org.simpleflatmapper.csv.parser.CsvCharConsumer.consumeToNextRow(CellConsumer cellConsumer)",
                    "public final void org.simpleflatmapper.csv.parser.CsvCharConsumer.consumeAllBuffer(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f831cddfc3ac3ee48a7f027a6fc61b7c0c2568f1",
        "previous_commit": "a2b4e79a59cb6eb048df310ee38b1ff57ef2cab1",
        "date": 1475354308,
        "releases": {
            "previous": "f831cddfc3ac3ee48a7f027a6fc61b7c0c2568f1",
            "next": "f831cddfc3ac3ee48a7f027a6fc61b7c0c2568f1"
        },
        "commit_message": " #345 fix java6\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f831cddfc3ac3ee48a7f027a6fc61b7c0c2568f1": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private static UnaryFactory<ReflectionService, ClassMeta<?>>[] org.simpleflatmapper.reflect.ReflectionService.getPredifinedClassMetaFactory()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AliasProviderService.java": [
                    "private static AliasProvider org.simpleflatmapper.reflect.meta.AliasProviderService.findAliasProviders()"
                ]
            },
            "a2b4e79a59cb6eb048df310ee38b1ff57ef2cab1": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private static UnaryFactory<ReflectionService, ClassMeta<?>>[] org.simpleflatmapper.reflect.ReflectionService.getPredifinedClassMetaFactory()"
                ],
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AliasProviderService.java": [
                    "private static AliasProvider org.simpleflatmapper.reflect.meta.AliasProviderService.findAliasProviders()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b1efef1f6fb28bcba233d997761870d100b18d33",
        "previous_commit": "e4ac4210430c0ff16cd85e060a4d631a54aa950e",
        "date": 1475006677,
        "releases": {
            "previous": "b1efef1f6fb28bcba233d997761870d100b18d33",
            "next": "b1efef1f6fb28bcba233d997761870d100b18d33"
        },
        "commit_message": " #339 can add Function\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b1efef1f6fb28bcba233d997761870d100b18d33": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/RenameProperty.java": [
                    "public String org.simpleflatmapper.map.property.RenameProperty.toString()",
                    "public boolean org.simpleflatmapper.map.property.RenameProperty.equals(Object o)"
                ]
            },
            "e4ac4210430c0ff16cd85e060a4d631a54aa950e": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/RenameProperty.java": [
                    "public String org.simpleflatmapper.map.property.RenameProperty.toString()",
                    "public boolean org.simpleflatmapper.map.property.RenameProperty.equals(Object o)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6fc2602138d61da7589e03c642625fef5e8d0962",
        "previous_commit": "ae6cd7e558278656daaa35d1fcba30388a0175ef",
        "date": 1470696680,
        "releases": {
            "previous": "6fc2602138d61da7589e03c642625fef5e8d0962",
            "next": "6fc2602138d61da7589e03c642625fef5e8d0962"
        },
        "commit_message": "fix java6\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6fc2602138d61da7589e03c642625fef5e8d0962": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "private <P, I> IndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getSetterWithConvertion(Class<P> pclazz, Class<I> iclass, PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ]
            },
            "ae6cd7e558278656daaa35d1fcba30388a0175ef": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "private <P, I> IndexedSetter<PreparedStatement, P> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getSetterWithConvertion(Class<P> pclazz, Class<I> iclass, PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "489a47447deea9a8c064283ccc5b8cb9f6c150bd",
        "previous_commit": "facc32853766eac2a717eeaaa903f56a5b2c3c4b",
        "date": 1586868812,
        "releases": {
            "previous": "489a47447deea9a8c064283ccc5b8cb9f6c150bd",
            "next": "489a47447deea9a8c064283ccc5b8cb9f6c150bd"
        },
        "commit_message": "records\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "489a47447deea9a8c064283ccc5b8cb9f6c150bd": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordMapperProvider.java": [
                    "public <R extends org.jooq.Record, E> RecordMapper<R, E> org.simpleflatmapper.jooq.SfmRecordMapperProvider.provide(RecordType<R> recordType, Class<? extends E> type)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordUnmapperProvider.java": [
                    "public <E, R extends org.jooq.Record> RecordUnmapper<E, R> org.simpleflatmapper.jooq.SfmRecordUnmapperProvider.provide(Class<? extends E> type, RecordType<R> recordType)"
                ]
            },
            "facc32853766eac2a717eeaaa903f56a5b2c3c4b": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordMapperProvider.java": [
                    "public <R extends Record, E> RecordMapper<R, E> org.simpleflatmapper.jooq.SfmRecordMapperProvider.provide(RecordType<R> recordType, Class<? extends E> type)"
                ],
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordUnmapperProvider.java": [
                    "public <E, R extends Record> RecordUnmapper<E, R> org.simpleflatmapper.jooq.SfmRecordUnmapperProvider.provide(Class<? extends E> type, RecordType<R> recordType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f9edc8e3be396ced621599db1e67d7b23fd8b107",
        "previous_commit": "6431346f3f8171ecb16ae64758a26166eb57858a",
        "date": 1472587649,
        "releases": {
            "previous": "f9edc8e3be396ced621599db1e67d7b23fd8b107",
            "next": "f9edc8e3be396ced621599db1e67d7b23fd8b107"
        },
        "commit_message": "discriminator test\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f9edc8e3be396ced621599db1e67d7b23fd8b107": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JDBCTypeHelper.java": [
                    "public static Class<?> org.simpleflatmapper.jdbc.impl.JDBCTypeHelper.toJavaType(int sqlType, Type propertyType)"
                ]
            },
            "6431346f3f8171ecb16ae64758a26166eb57858a": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ],
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JDBCTypeHelper.java": [
                    "public static Class<?> org.simpleflatmapper.jdbc.impl.JDBCTypeHelper.toJavaType(int sqlType, Type propertyType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9c46788ec592703ca4c150ee941b68646ddb6ed9",
        "previous_commit": "a16947404b58d8faa6ca5526c5ff9218f3e1fc8a",
        "date": 1510765560,
        "releases": {
            "previous": "9c46788ec592703ca4c150ee941b68646ddb6ed9",
            "next": "9c46788ec592703ca4c150ee941b68646ddb6ed9"
        },
        "commit_message": "optimised for long non quoted string\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9c46788ec592703ca4c150ee941b68646ddb6ed9": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            },
            "a16947404b58d8faa6ca5526c5ff9218f3e1fc8a": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final void org.simpleflatmapper.csv.parser.CharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)",
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "adfdedcd571bb49ef7efdebbed5a4e09c6c5f8d5",
        "previous_commit": "b1cb60f998ebd76233f27f1bffdb5ccfd283e0a1",
        "date": 1511213728,
        "releases": {
            "previous": "adfdedcd571bb49ef7efdebbed5a4e09c6c5f8d5",
            "next": "adfdedcd571bb49ef7efdebbed5a4e09c6c5f8d5"
        },
        "commit_message": "java6 fix\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "adfdedcd571bb49ef7efdebbed5a4e09c6c5f8d5": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/Row.java": [
                    "public final Set<String> org.simpleflatmapper.csv.Row.keySet()",
                    "public Set<String> org.simpleflatmapper.csv.Row.keySet()"
                ]
            },
            "b1cb60f998ebd76233f27f1bffdb5ccfd283e0a1": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/Row.java": [
                    "public final Set<String> org.simpleflatmapper.csv.Row.keySet()",
                    "public Set<String> org.simpleflatmapper.csv.Row.keySet()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "54cf4dcc4b6c283819743837970e834c6e2936e5",
        "previous_commit": "2c13e65d7f3f7df0ac6cfd5cba80b0da62cb8109",
        "date": 1572628573,
        "releases": {
            "previous": "54cf4dcc4b6c283819743837970e834c6e2936e5",
            "next": "54cf4dcc4b6c283819743837970e834c6e2936e5"
        },
        "commit_message": " #667 support inner class\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "54cf4dcc4b6c283819743837970e834c6e2936e5": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.extractDefinitions(final Type target)",
                    "public MethodVisitor org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.visitMethod(int access, final String methodName, String desc, String signature, String[] exceptions)"
                ]
            },
            "2c13e65d7f3f7df0ac6cfd5cba80b0da62cb8109": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmInstantiatorDefinitionFactory.java": [
                    "public static List<InstantiatorDefinition> org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.extractDefinitions(final Type target)",
                    "public MethodVisitor org.simpleflatmapper.reflect.asm.AsmInstantiatorDefinitionFactory.visitMethod(int access, final String methodName, String desc, String signature, String[] exceptions)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "15bd9260a5c3ca189e15eddfdcbd1f067d66b6ce",
        "previous_commit": "bbcb4fa769202e40e11ce36162fddec0af1f9b2d",
        "date": 1456497764,
        "releases": {
            "previous": "15bd9260a5c3ca189e15eddfdcbd1f067d66b6ce",
            "next": "15bd9260a5c3ca189e15eddfdcbd1f067d66b6ce"
        },
        "commit_message": "jodatime settable data go through converter factory\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "15bd9260a5c3ca189e15eddfdcbd1f067d66b6ce": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/SettableDataSetterFactory.java": [
                    "private Converter<?, ?> org.sfm.datastax.impl.SettableDataSetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt, ColumnDefinition<DatastaxColumnKey, ?> columnDefinition)",
                    "public <P> Setter<SettableByIndexData, P> org.sfm.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey, ? extends ColumnDefinition<DatastaxColumnKey, ?>> arg)"
                ]
            },
            "bbcb4fa769202e40e11ce36162fddec0af1f9b2d": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/SettableDataSetterFactory.java": [
                    "private Converter<?, ?> org.sfm.datastax.impl.SettableDataSetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt)",
                    "public <P> Setter<SettableByIndexData, P> org.sfm.datastax.impl.SettableDataSetterFactory.getSetter(PropertyMapping<?, ?, DatastaxColumnKey, ? extends ColumnDefinition<DatastaxColumnKey, ?>> arg)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "273b0f94227c78bc9095bffda1f22e8ead9ec5b4",
        "previous_commit": "1fa949f5ec77318eb157142d5bf744c308e1892a",
        "date": 1522419720,
        "releases": {
            "previous": "273b0f94227c78bc9095bffda1f22e8ead9ec5b4",
            "next": "273b0f94227c78bc9095bffda1f22e8ead9ec5b4"
        },
        "commit_message": "remove need for temp buffer\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "273b0f94227c78bc9095bffda1f22e8ead9ec5b4": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public void org.simpleflatmapper.util.RingBufferReader.run()",
                    "private int org.simpleflatmapper.util.RingBufferReader.read(long currentTail, long currentHead)"
                ]
            },
            "1fa949f5ec77318eb157142d5bf744c308e1892a": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public void org.simpleflatmapper.util.RingBufferReader.run()",
                    "private int org.simpleflatmapper.util.RingBufferReader.read(long currentTail, long currentHead)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "46f9e7e1f6fc464aa39b74927f4f338800ee25c0",
        "previous_commit": "61e3f299a6ca2e1f779b7a0c83ae7d4a8790aa41",
        "date": 1543507222,
        "releases": {
            "previous": "46f9e7e1f6fc464aa39b74927f4f338800ee25c0",
            "next": "46f9e7e1f6fc464aa39b74927f4f338800ee25c0"
        },
        "commit_message": "optimised parseInt and parseLong to work directly on char[]\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "46f9e7e1f6fc464aa39b74927f4f338800ee25c0": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRow.java": [
                    "public int org.simpleflatmapper.csv.CsvRow.getInt(int i)",
                    "public long org.simpleflatmapper.csv.CsvRow.getLong(int i)"
                ]
            },
            "61e3f299a6ca2e1f779b7a0c83ae7d4a8790aa41": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRow.java": [
                    "public int org.simpleflatmapper.csv.CsvRow.getInt(int i)",
                    "public long org.simpleflatmapper.csv.CsvRow.getLong(int i)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "68de0a041acca33d72850c7d947204a940eea7f4",
        "previous_commit": "3db50456f7cada08b7d59b14d6a5f85b65cf6b4f",
        "date": 1485882795,
        "releases": {
            "previous": "68de0a041acca33d72850c7d947204a940eea7f4",
            "next": "68de0a041acca33d72850c7d947204a940eea7f4"
        },
        "commit_message": " #399 fix java7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "68de0a041acca33d72850c7d947204a940eea7f4": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> BiInstantiator<S, MappingContext<? super S>, T> org.simpleflatmapper.map.mapper.MapperInstantiatorFactory.getBiInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, BiFactory<? super S, ? super MappingContext<? super S>, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled)"
                ]
            },
            "3db50456f7cada08b7d59b14d6a5f85b65cf6b4f": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperInstantiatorFactory.java": [
                    "public <S, T, K extends FieldKey<K>, D extends ColumnDefinition<K, D>> BiInstantiator<S, MappingContext<? super S>, T> org.simpleflatmapper.map.mapper.MapperInstantiatorFactory.getBiInstantiator(Type source, Type target, PropertyMappingsBuilder<T, K, D> propertyMappingsBuilder, Map<Parameter, BiFactory<? super S, ? super MappingContext<? super S>, ?>> constructorParameterGetterMap, final GetterFactory<? super S, K> getterFactory, boolean useAsmIfEnabled)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "73f364e73c996d21f966a8adbf0297b0f5ebcf25",
        "previous_commit": "8c1b5a0c21d4c3a5cef7fadbd5d28325eb11f6c0",
        "date": 1498123015,
        "releases": {
            "previous": "73f364e73c996d21f966a8adbf0297b0f5ebcf25",
            "next": "73f364e73c996d21f966a8adbf0297b0f5ebcf25"
        },
        "commit_message": " #449 add CS to boolean converter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "73f364e73c996d21f966a8adbf0297b0f5ebcf25": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ]
            },
            "8c1b5a0c21d4c3a5cef7fadbd5d28325eb11f6c0": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3b561d28c2bb15b76d2a82d27ebd108ac408b523",
        "previous_commit": "4cf83f8cc1992efd728ba21120a601fb2c5f0906",
        "date": 1549922339,
        "releases": {
            "previous": "3b561d28c2bb15b76d2a82d27ebd108ac408b523",
            "next": "3b561d28c2bb15b76d2a82d27ebd108ac408b523"
        },
        "commit_message": " #574 when no instatiator found look in the enclosing class\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3b561d28c2bb15b76d2a82d27ebd108ac408b523": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/DefaultReflectionService.java": [
                    "public List<InstantiatorDefinition> org.simpleflatmapper.reflect.DefaultReflectionService.extractInstantiator(Type target, Member extraInstantiator)"
                ]
            },
            "4cf83f8cc1992efd728ba21120a601fb2c5f0906": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/DefaultReflectionService.java": [
                    "public List<InstantiatorDefinition> org.simpleflatmapper.reflect.DefaultReflectionService.extractInstantiator(Type target, Member extraInstantiator)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ca7c0b7c0abd4a53b8133556dd13265cc0f2e325",
        "previous_commit": "7552995ae9a34ebef69a8a336b529b3095252058",
        "date": 1561393072,
        "releases": {
            "previous": "ca7c0b7c0abd4a53b8133556dd13265cc0f2e325",
            "next": "ca7c0b7c0abd4a53b8133556dd13265cc0f2e325"
        },
        "commit_message": " implement #663 infer null property\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ca7c0b7c0abd4a53b8133556dd13265cc0f2e325": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ObjectGetterFactory.java": [
                    "public <T, P> Getter<T, P> org.simpleflatmapper.reflect.ObjectGetterFactory.getFieldGetter(Field field)"
                ]
            },
            "7552995ae9a34ebef69a8a336b529b3095252058": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ObjectGetterFactory.java": [
                    "public <T, P> Getter<T, P> org.simpleflatmapper.reflect.ObjectGetterFactory.getFieldGetter(Field field)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d630ebd35b261a2f8dcb2a9ac91e5e8d5185e77c",
        "previous_commit": "f27e72a9952f28dabb56a4fd3ee91927bc503c0e",
        "date": 1531689787,
        "releases": {
            "previous": "d630ebd35b261a2f8dcb2a9ac91e5e8d5185e77c",
            "next": "d630ebd35b261a2f8dcb2a9ac91e5e8d5185e77c"
        },
        "commit_message": "allow registration of builders and classMeta\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d630ebd35b261a2f8dcb2a9ac91e5e8d5185e77c": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private void org.simpleflatmapper.reflect.ReflectionService.initPredefined()"
                ]
            },
            "f27e72a9952f28dabb56a4fd3ee91927bc503c0e": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private void org.simpleflatmapper.reflect.ReflectionService.initPredefined()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9f5c61b33a47a7ad2967371c6d34a9cbc3296eaa",
        "previous_commit": "4b5ef0cfd9fb22ee5b72db848ba2bcbcc55e1423",
        "date": 1545581974,
        "releases": {
            "previous": "9f5c61b33a47a7ad2967371c6d34a9cbc3296eaa",
            "next": "9f5c61b33a47a7ad2967371c6d34a9cbc3296eaa"
        },
        "commit_message": "#572 fix stack overflow\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9f5c61b33a47a7ad2967371c6d34a9cbc3296eaa": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public List<ScoredConverterFactory> org.simpleflatmapper.converter.ConverterService.findConverterFactories(Type inType, Type outType, Object... params)"
                ]
            },
            "4b5ef0cfd9fb22ee5b72db848ba2bcbcc55e1423": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public List<ScoredConverterFactory> org.simpleflatmapper.converter.ConverterService.findConverterFactories(Type inType, Type outType, Object... params)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9a4aefb5109c47a2019ff5ebcbfa4ee0be8c2791",
        "previous_commit": "75d7304abcc714cd57fd47fa52e988fd2907dbdc",
        "date": 1490020797,
        "releases": {
            "previous": "9a4aefb5109c47a2019ff5ebcbfa4ee0be8c2791",
            "next": "9a4aefb5109c47a2019ff5ebcbfa4ee0be8c2791"
        },
        "commit_message": "java6\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9a4aefb5109c47a2019ff5ebcbfa4ee0be8c2791": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private static Reader org.simpleflatmapper.csv.CsvParser.newReaderJava6(File file, Charset charset)"
                ]
            },
            "75d7304abcc714cd57fd47fa52e988fd2907dbdc": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "private static Reader org.simpleflatmapper.csv.CsvParser.newReaderJava6(File file, Charset charset)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0c06e3ae2a3cb3faeab83b7d52073af361b798ef",
        "previous_commit": "eb32da8113970b2c5ae8e8ce9fbf92b6b757edf7",
        "date": 1531508238,
        "releases": {
            "previous": "0c06e3ae2a3cb3faeab83b7d52073af361b798ef",
            "next": "0c06e3ae2a3cb3faeab83b7d52073af361b798ef"
        },
        "commit_message": " fix #538 for jdbc\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0c06e3ae2a3cb3faeab83b7d52073af361b798ef": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.getBiInstantiator(InstantiatorDefinition instantiatorDefinition, Class<?> s1, Class<?> s2, Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)"
                ]
            },
            "eb32da8113970b2c5ae8e8ce9fbf92b6b757edf7": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/InstantiatorFactory.java": [
                    "public <S1, S2, T> BiInstantiator<S1, S2, T> org.simpleflatmapper.reflect.InstantiatorFactory.getBiInstantiator(InstantiatorDefinition instantiatorDefinition, Class<?> s1, Class<?> s2, Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections, boolean useAsmIfEnabled, boolean builderIgnoresNullValues)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "823bbd4e4e4256eb8f656ce3028e95dc3cbd44ac",
        "previous_commit": "b92bf463e7b4448ee980b45a0ed36e947c11cbe0",
        "date": 1531155811,
        "releases": {
            "previous": "823bbd4e4e4256eb8f656ce3028e95dc3cbd44ac",
            "next": "823bbd4e4e4256eb8f656ce3028e95dc3cbd44ac"
        },
        "commit_message": "java7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "823bbd4e4e4256eb8f656ce3028e95dc3cbd44ac": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstance(Class<?> s1, Class<?> s2, ExecutableInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Parameter[] parameters)"
                ]
            },
            "b92bf463e7b4448ee980b45a0ed36e947c11cbe0": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstance(Class<?> s1, Class<?> s2, ExecutableInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Parameter[] parameters)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bab03e58e7c9929664a13bc8ef283964bc7ef63d",
        "previous_commit": "450fb6892cfabdb240c16e35ce74ca0f6605b155",
        "date": 1510678519,
        "releases": {
            "previous": "bab03e58e7c9929664a13bc8ef283964bc7ef63d",
            "next": "bab03e58e7c9929664a13bc8ef283964bc7ef63d"
        },
        "commit_message": "make the findNextEscapeChar unrollable\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bab03e58e7c9929664a13bc8ef283964bc7ef63d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, int start, int end, CellConsumer cellConsumer)"
                ]
            },
            "450fb6892cfabdb240c16e35ce74ca0f6605b155": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, int start, int end, CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e0a12498c241f5e212ff22dc98a57c11ed1c3d84",
        "previous_commit": "bc35b7e43b0f739e8fffb8b109600c44a3b5ee92",
        "date": 1545169141,
        "releases": {
            "previous": "e0a12498c241f5e212ff22dc98a57c11ed1c3d84",
            "next": "e0a12498c241f5e212ff22dc98a57c11ed1c3d84"
        },
        "commit_message": "fix #599 ignore trailing empty headers\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e0a12498c241f5e212ff22dc98a57c11ed1c3d84": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRowSet.java": [
                    "public CsvColumnKey[] org.simpleflatmapper.csv.CsvRowSet.getKeys()"
                ]
            },
            "bc35b7e43b0f739e8fffb8b109600c44a3b5ee92": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRowSet.java": [
                    "public CsvColumnKey[] org.simpleflatmapper.csv.CsvRowSet.getKeys()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4aa66b02d77c44c249ea2af71cecf6f021eee5c4",
        "previous_commit": "5b915da1cfd42fbe25dda002c34b1bd3e8e8e83e",
        "date": 1564483443,
        "releases": {
            "previous": "4aa66b02d77c44c249ea2af71cecf6f021eee5c4",
            "next": "4aa66b02d77c44c249ea2af71cecf6f021eee5c4"
        },
        "commit_message": " #671 array index protection\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4aa66b02d77c44c249ea2af71cecf6f021eee5c4": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ]
            },
            "5b915da1cfd42fbe25dda002c34b1bd3e8e8e83e": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForAgainstColumn(IndexedColumn indexedColumn, Object[] properties, final FoundProperty<T> matchingProperties, PropertyMatchingScore score, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9cfa48465895b8291dbdccd7bd54d2beb25fc5b8",
        "previous_commit": "8359a08abb3a321b3a47f91cd4046ca1a88590fd",
        "date": 1454982317,
        "releases": {
            "previous": "9cfa48465895b8291dbdccd7bd54d2beb25fc5b8",
            "next": "9cfa48465895b8291dbdccd7bd54d2beb25fc5b8"
        },
        "commit_message": "#285 use JodaTimeClasses to check if jodatime in pssetterfactory\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9cfa48465895b8291dbdccd7bd54d2beb25fc5b8": {
                "sfm/src/main/java/org/sfm/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public PreparedStatementIndexSetter org.sfm.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg)"
                ]
            },
            "8359a08abb3a321b3a47f91cd4046ca1a88590fd": {
                "sfm/src/main/java/org/sfm/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public PreparedStatementIndexSetter org.sfm.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> arg)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4b5ef0cfd9fb22ee5b72db848ba2bcbcc55e1423",
        "previous_commit": "c84477fa78f03f49225e142ed585e77e3719d290",
        "date": 1545404128,
        "releases": {
            "previous": "4b5ef0cfd9fb22ee5b72db848ba2bcbcc55e1423",
            "next": "4b5ef0cfd9fb22ee5b72db848ba2bcbcc55e1423"
        },
        "commit_message": " #572 filter self property meta, would the filtering better somewhere else\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4b5ef0cfd9fb22ee5b72db848ba2bcbcc55e1423": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties, FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer, Predicate<PropertyMeta<?, ?>> propertyFilter)"
                ]
            },
            "c84477fa78f03f49225e142ed585e77e3719d290": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties, FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer, Predicate<PropertyMeta<?, ?>> propertyFilter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4848371eba4f1ab77ec5e2ae651f8d4bcc7c6aa2",
        "previous_commit": "dfe9401b13ff55ae9e523f3194b08930b41bb768",
        "date": 1473266474,
        "releases": {
            "previous": "4848371eba4f1ab77ec5e2ae651f8d4bcc7c6aa2",
            "next": "4848371eba4f1ab77ec5e2ae651f8d4bcc7c6aa2"
        },
        "commit_message": "refactor context factory\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4848371eba4f1ab77ec5e2ae651f8d4bcc7c6aa2": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetectorMappingContext.java": [
                    "public <T> T org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.context(int i)"
                ]
            },
            "dfe9401b13ff55ae9e523f3194b08930b41bb768": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetectorMappingContext.java": [
                    "public <T> T org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.context(int i)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "94f9272ef16ba56c2d6761a38d8e53c47e4d9f29",
        "previous_commit": "842813952bfbc302f44531a79d855934627954db",
        "date": 1522603932,
        "releases": {
            "previous": "94f9272ef16ba56c2d6761a38d8e53c47e4d9f29",
            "next": "94f9272ef16ba56c2d6761a38d8e53c47e4d9f29"
        },
        "commit_message": "read full length\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "94f9272ef16ba56c2d6761a38d8e53c47e4d9f29": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "private int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len, long currentHead, long currentTail)"
                ]
            },
            "842813952bfbc302f44531a79d855934627954db": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "private int org.simpleflatmapper.util.RingBufferReader.read(char[] cbuf, int off, int len, long currentHead, long currentTail)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b986acd77da551f72cbdd87b0f265a7d66fb22be",
        "previous_commit": "69993689273ff4ea6d62bed42800e3b3e76e37da",
        "date": 1468918649,
        "releases": {
            "previous": "b986acd77da551f72cbdd87b0f265a7d66fb22be",
            "next": "b986acd77da551f72cbdd87b0f265a7d66fb22be"
        },
        "commit_message": " #329 pass property type\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b986acd77da551f72cbdd87b0f265a7d66fb22be": {
                "sfm/src/main/java/org/sfm/csv/CsvMapperBuilder.java": [
                    "private <P> Getter<CsvMapperCellHandler<T>, P> org.sfm.csv.CsvMapperBuilder<T>.newDelayedGetter(CsvColumnKey key, Type propertyType, ColumnDefinition<?, ?> columnDefinition)"
                ]
            },
            "69993689273ff4ea6d62bed42800e3b3e76e37da": {
                "sfm/src/main/java/org/sfm/csv/CsvMapperBuilder.java": [
                    "private <P> Getter<CsvMapperCellHandler<T>, P> org.sfm.csv.CsvMapperBuilder<T>.newDelayedGetter(CsvColumnKey key, Type propertyType, ColumnDefinition<?, ?> columnDefinition)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "60f24028fd93a5caaa894185240d44234e2898fb",
        "previous_commit": "0e04a447b166672a5c6c19865f351edbe1b468f9",
        "date": 1475009854,
        "releases": {
            "previous": "60f24028fd93a5caaa894185240d44234e2898fb",
            "next": "60f24028fd93a5caaa894185240d44234e2898fb"
        },
        "commit_message": "#82 limit self property to root or child of collection\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "60f24028fd93a5caaa894185240d44234e2898fb": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference)"
                ]
            },
            "0e04a447b166672a5c6c19865f351edbe1b468f9": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "protected void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3ac1427001b70effc66fd1e46123ae5f2c32879d",
        "previous_commit": "43560a32267cb92fc7eb0f443feedc71bfef90c1",
        "date": 1552507890,
        "releases": {
            "previous": "3ac1427001b70effc66fd1e46123ae5f2c32879d",
            "next": "3ac1427001b70effc66fd1e46123ae5f2c32879d"
        },
        "commit_message": " #614 getPropertyType on discriminator prop meta return type of the all have the same type\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3ac1427001b70effc66fd1e46123ae5f2c32879d": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorPropertyFinder.java": [
                    "public Type org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.getPropertyType()"
                ]
            },
            "43560a32267cb92fc7eb0f443feedc71bfef90c1": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorPropertyFinder.java": [
                    "public Type org.simpleflatmapper.map.impl.DiscriminatorPropertyFinder<T>.getPropertyType()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "06f559cc12008de706b49bcb868c982ab2b75082",
        "previous_commit": "727982ca454554876a674bfbb7913d883809403f",
        "date": 1516901636,
        "releases": {
            "previous": "06f559cc12008de706b49bcb868c982ab2b75082",
            "next": "06f559cc12008de706b49bcb868c982ab2b75082"
        },
        "commit_message": " #482 quick try to add Pair and Triple as tuple\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "06f559cc12008de706b49bcb868c982ab2b75082": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/TupleHelper.java": [
                    "public static boolean org.simpleflatmapper.util.TupleHelper.isTuple(Type type)"
                ]
            },
            "727982ca454554876a674bfbb7913d883809403f": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/TupleHelper.java": [
                    "public static boolean org.simpleflatmapper.util.TupleHelper.isTuple(Type type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3f848804f9a4d22f0b35326540398e79024aa594",
        "previous_commit": "cac7393a57b475892889cae7a1339f6a0db68ea9",
        "date": 1473281182,
        "releases": {
            "previous": "3f848804f9a4d22f0b35326540398e79024aa594",
            "next": "3f848804f9a4d22f0b35326540398e79024aa594"
        },
        "commit_message": "add more test for builder\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3f848804f9a4d22f0b35326540398e79024aa594": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/IgnoreMapperBuilderErrorHandler.java": [
                    "public void org.simpleflatmapper.map.IgnoreMapperBuilderErrorHandler.customFieldError(FieldKey<?> key, String message)"
                ]
            },
            "cac7393a57b475892889cae7a1339f6a0db68ea9": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/IgnoreMapperBuilderErrorHandler.java": [
                    "public void org.simpleflatmapper.map.IgnoreMapperBuilderErrorHandler.customFieldError(FieldKey<?> key, String message)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d213b445791fe221657bf820f6c4b8f79f46bb92",
        "previous_commit": "bc3b9b1da8f92dba14be7b28b246cf9b497e2485",
        "date": 1522421276,
        "releases": {
            "previous": "d213b445791fe221657bf820f6c4b8f79f46bb92",
            "next": "d213b445791fe221657bf820f6c4b8f79f46bb92"
        },
        "commit_message": "Revert \"Revert \"inline\"\"\n\nThis reverts commit bc3b9b1da8f92dba14be7b28b246cf9b497e2485.\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d213b445791fe221657bf820f6c4b8f79f46bb92": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public void org.simpleflatmapper.util.RingBufferReader.run()"
                ]
            },
            "bc3b9b1da8f92dba14be7b28b246cf9b497e2485": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public void org.simpleflatmapper.util.RingBufferReader.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fbb3d20bb19edb3b2e07bb4e841ff52bba21b9a3",
        "previous_commit": "5d2ec6c76d78986562d11366d633e20e0117e6dc",
        "date": 1475353232,
        "releases": {
            "previous": "fbb3d20bb19edb3b2e07bb4e841ff52bba21b9a3",
            "next": "fbb3d20bb19edb3b2e07bb4e841ff52bba21b9a3"
        },
        "commit_message": " #345 add service loader for predefined meta\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fbb3d20bb19edb3b2e07bb4e841ff52bba21b9a3": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private void org.simpleflatmapper.reflect.ReflectionService.initPredefined()"
                ]
            },
            "5d2ec6c76d78986562d11366d633e20e0117e6dc": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private void org.simpleflatmapper.reflect.ReflectionService.initPredefined()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "05dbfb2010f8d50bf09f3a29d8cb932445f31053",
        "previous_commit": "4f464e5bbaf49c77720a6a0997bc5db58b0ae6bd",
        "date": 1490195195,
        "releases": {
            "previous": "05dbfb2010f8d50bf09f3a29d8cb932445f31053",
            "next": "05dbfb2010f8d50bf09f3a29d8cb932445f31053"
        },
        "commit_message": " #431 limit index search scope\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "05dbfb2010f8d50bf09f3a29d8cb932445f31053": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public IndexedColumn org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matchIndex()"
                ]
            },
            "4f464e5bbaf49c77720a6a0997bc5db58b0ae6bd": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public IndexedColumn org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matchIndex()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e8b0caef26881df2946c5ebbd5a4ebd744fc8cff",
        "previous_commit": "a368491079402eb165e38f24c63e507541fb4b07",
        "date": 1532445378,
        "releases": {
            "previous": "e8b0caef26881df2946c5ebbd5a4ebd744fc8cff",
            "next": "e8b0caef26881df2946c5ebbd5a4ebd744fc8cff"
        },
        "commit_message": "Immutable is working\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e8b0caef26881df2946c5ebbd5a4ebd744fc8cff": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ]
            },
            "a368491079402eb165e38f24c63e507541fb4b07": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bb8788911594bb5b3794518ad22070b69eae6825",
        "previous_commit": "83ebaf52e8523a746badf4dfcaeb08603d9ad140",
        "date": 1475103642,
        "releases": {
            "previous": "bb8788911594bb5b3794518ad22070b69eae6825",
            "next": "bb8788911594bb5b3794518ad22070b69eae6825"
        },
        "commit_message": " #343 dual strategy for heap or direct\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bb8788911594bb5b3794518ad22070b69eae6825": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/FastTupleClassMeta.java": [
                    "private static <T> ArrayList<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.FastTupleClassMeta<T>.getPropertyMetas(Type ownerType, ReflectionService reflectionService)"
                ]
            },
            "83ebaf52e8523a746badf4dfcaeb08603d9ad140": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/FastTupleClassMeta.java": [
                    "private static <T> ArrayList<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.FastTupleClassMeta<T>.getPropertyMetas(Type ownerType, ReflectionService reflectionService)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9bbf741b08b6a9e030feefe370cd5d29d1654a46",
        "previous_commit": "495a1e5be1a5f3e0fb39a37e13b27c3b9c9b3478",
        "date": 1539254415,
        "releases": {
            "previous": "9bbf741b08b6a9e030feefe370cd5d29d1654a46",
            "next": "9bbf741b08b6a9e030feefe370cd5d29d1654a46"
        },
        "commit_message": " #567 bypass discriminator meta when only one implementation\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9bbf741b08b6a9e030feefe370cd5d29d1654a46": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorReflectionService.java": [
                    "public <T> ClassMeta<T> org.simpleflatmapper.map.impl.DiscriminatorReflectionService.getClassMeta(Type target)"
                ]
            },
            "495a1e5be1a5f3e0fb39a37e13b27c3b9c9b3478": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorReflectionService.java": [
                    "public <T> ClassMeta<T> org.simpleflatmapper.map.impl.DiscriminatorReflectionService.getClassMeta(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5e9e3091de62c0252fe30058f1c95dcb98e751dd",
        "previous_commit": "bab03e58e7c9929664a13bc8ef283964bc7ef63d",
        "date": 1510678783,
        "releases": {
            "previous": "5e9e3091de62c0252fe30058f1c95dcb98e751dd",
            "next": "5e9e3091de62c0252fe30058f1c95dcb98e751dd"
        },
        "commit_message": "change currentState update\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5e9e3091de62c0252fe30058f1c95dcb98e751dd": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "private int org.simpleflatmapper.csv.parser.CharConsumer.findEndOfQuotedArea(char[] chars, int start, int end, char escapeChar, char quoteChar, int currentState)"
                ]
            },
            "bab03e58e7c9929664a13bc8ef283964bc7ef63d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "private int org.simpleflatmapper.csv.parser.CharConsumer.findEndOfQuotedArea(char[] chars, int start, int end, char escapeChar, char quoteChar, int currentState)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0318c51ea2eb9afd8a5f8ac11b4af3b64dc687bf",
        "previous_commit": "7a58dde81108aca63dea587b8d520078e7e12447",
        "date": 1485798274,
        "releases": {
            "previous": "0318c51ea2eb9afd8a5f8ac11b4af3b64dc687bf",
            "next": "0318c51ea2eb9afd8a5f8ac11b4af3b64dc687bf"
        },
        "commit_message": " #398 support set as array\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0318c51ea2eb9afd8a5f8ac11b4af3b64dc687bf": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ]
            },
            "7a58dde81108aca63dea587b8d520078e7e12447": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.ReflectionService.newClassMeta(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f1012cbdb4da69693513d6fef89cf1ef8ba35c73",
        "previous_commit": "38672e52df8d79727db2e8947d144d4c7f8ea2a9",
        "date": 1471554921,
        "releases": {
            "previous": "f1012cbdb4da69693513d6fef89cf1ef8ba35c73",
            "next": "f1012cbdb4da69693513d6fef89cf1ef8ba35c73"
        },
        "commit_message": "fix wrong index for reflection\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f1012cbdb4da69693513d6fef89cf1ef8ba35c73": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "private static Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.buildParameters(Type target, Class<?>[] parameterTypes, Type[] parameterGenericTypes, TypeVariable<Class<Object>>[] targetClassTypeParameters)"
                ]
            },
            "38672e52df8d79727db2e8947d144d4c7f8ea2a9": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "private static Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.buildParameters(Type target, Class<?>[] parameterTypes, Type[] parameterGenericTypes, TypeVariable<Class<Object>>[] targetClassTypeParameters)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "61e3f299a6ca2e1f779b7a0c83ae7d4a8790aa41",
        "previous_commit": "7d4720e003869abf570176bcfa44f94e192f8cb2",
        "date": 1542870298,
        "releases": {
            "previous": "61e3f299a6ca2e1f779b7a0c83ae7d4a8790aa41",
            "next": "61e3f299a6ca2e1f779b7a0c83ae7d4a8790aa41"
        },
        "commit_message": "add short cut for regular digit\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "61e3f299a6ca2e1f779b7a0c83ae7d4a8790aa41": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRow.java": [
                    "public static int org.simpleflatmapper.csv.CsvRow.parseInt(char[] chars, int from, int len)"
                ]
            },
            "7d4720e003869abf570176bcfa44f94e192f8cb2": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvRow.java": [
                    "public static int org.simpleflatmapper.csv.CsvRow.parseInt(char[] chars, int from, int len)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ae6cd7e558278656daaa35d1fcba30388a0175ef",
        "previous_commit": "6452d665fce295965eb7f8af8425647a70104973",
        "date": 1470696679,
        "releases": {
            "previous": "ae6cd7e558278656daaa35d1fcba30388a0175ef",
            "next": "ae6cd7e558278656daaa35d1fcba30388a0175ef"
        },
        "commit_message": "fix java7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ae6cd7e558278656daaa35d1fcba30388a0175ef": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ]
            },
            "6452d665fce295965eb7f8af8425647a70104973": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9077b4e4698c085b79580ba9d85148724f137587",
        "previous_commit": "59bedc2e2cf531e72febe1905979976bbe098ca5",
        "date": 1568379292,
        "releases": {
            "previous": "9077b4e4698c085b79580ba9d85148724f137587",
            "next": "9077b4e4698c085b79580ba9d85148724f137587"
        },
        "commit_message": " #668 fix end with text condition\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9077b4e4698c085b79580ba9d85148724f137587": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public IndexedColumn org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matchIndex()"
                ]
            },
            "59bedc2e2cf531e72febe1905979976bbe098ca5": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "public IndexedColumn org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.matchIndex()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "975db118a74a4718813b59aeebcb784ce54923ba",
        "previous_commit": "606554eb136ae9f9e868b5be9e3a3e212f7e5ffe",
        "date": 1561055489,
        "releases": {
            "previous": "975db118a74a4718813b59aeebcb784ce54923ba",
            "next": "975db118a74a4718813b59aeebcb784ce54923ba"
        },
        "commit_message": "getter factory prop is now contextual\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "975db118a74a4718813b59aeebcb784ce54923ba": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/property/JdbcGetterFactoryProperty.java": [
                    "public static <T> GetterFactoryProperty org.simpleflatmapper.jdbc.property.JdbcGetterFactoryProperty.forType(final Class<T> type, final ResultSetGetter<T> getter)"
                ]
            },
            "606554eb136ae9f9e868b5be9e3a3e212f7e5ffe": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/property/JdbcGetterFactoryProperty.java": [
                    "public static <T> GetterFactoryProperty org.simpleflatmapper.jdbc.property.JdbcGetterFactoryProperty.forType(final Class<T> type, final ResultSetGetter<T> getter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7dcb4ddb7c95b0821c48e8dbabba0e97c947f496",
        "previous_commit": "7618b7576ece77e5300ee591d7fa8bca59af74fb",
        "date": 1544721092,
        "releases": {
            "previous": "7dcb4ddb7c95b0821c48e8dbabba0e97c947f496",
            "next": "7dcb4ddb7c95b0821c48e8dbabba0e97c947f496"
        },
        "commit_message": "fix #597\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7dcb4ddb7c95b0821c48e8dbabba0e97c947f496": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/CharConsumerFactory.java": [
                    "public static CharConsumerFactory org.simpleflatmapper.lightningcsv.parser.CharConsumerFactory.newInstance()"
                ]
            },
            "7618b7576ece77e5300ee591d7fa8bca59af74fb": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/CharConsumerFactory.java": [
                    "public static CharConsumerFactory org.simpleflatmapper.lightningcsv.parser.CharConsumerFactory.newInstance()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "af561e4f6186d1a1da470a750154a34d5c7d1d04",
        "previous_commit": "51ab378d5c33644b8d2827beecb72c8a524deebc",
        "date": 1532679933,
        "releases": {
            "previous": "af561e4f6186d1a1da470a750154a34d5c7d1d04",
            "next": "af561e4f6186d1a1da470a750154a34d5c7d1d04"
        },
        "commit_message": "guava immutable List\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "af561e4f6186d1a1da470a750154a34d5c7d1d04": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstanceBuilder(Class<?> s1, Class<?> s2, BuilderInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Map<Parameter, Method> setters, boolean ignoreNullValues)"
                ]
            },
            "51ab378d5c33644b8d2827beecb72c8a524deebc": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorBuilder.java": [
                    "private static <S1, S2> void org.simpleflatmapper.reflect.asm.BiInstantiatorBuilder.appendNewInstanceBuilder(Class<?> s1, Class<?> s2, BuilderInstantiatorDefinition instantiatorDefinition, List<InjectionPoint> injectionPoints, ClassWriter cw, String targetType, String s1Type, String s2Type, String classType, Map<Parameter, Method> setters, boolean ignoreNullValues)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a16947404b58d8faa6ca5526c5ff9218f3e1fc8a",
        "previous_commit": "7bcb2c570cd783b3ec231e442a798df458c9ed26",
        "date": 1510746527,
        "releases": {
            "previous": "a16947404b58d8faa6ca5526c5ff9218f3e1fc8a",
            "next": "a16947404b58d8faa6ca5526c5ff9218f3e1fc8a"
        },
        "commit_message": "don't throw if no escape char on unescape\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a16947404b58d8faa6ca5526c5ff9218f3e1fc8a": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, int start, int end, CellConsumer cellConsumer)"
                ]
            },
            "7bcb2c570cd783b3ec231e442a798df458c9ed26": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, int start, int end, CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "968cdfb2fcb54aa49428892322754115d0adbc55",
        "previous_commit": "dbe6cc9b333cd97acff3afbfb08cd25bf4c0fcbb",
        "date": 1537217615,
        "releases": {
            "previous": "968cdfb2fcb54aa49428892322754115d0adbc55",
            "next": "968cdfb2fcb54aa49428892322754115d0adbc55"
        },
        "commit_message": " #550 ignore @column alias if other alias present, has both apply in different direction will conflict with each other\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "968cdfb2fcb54aa49428892322754115d0adbc55": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)"
                ]
            },
            "dbe6cc9b333cd97acff3afbfb08cd25bf4c0fcbb": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperty(final PropertyNameMatcher propertyNameMatcher, Object[] properties, final FoundProperty<T> matchingProperties, final PropertyMatchingScore score, final PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8f6e1fe45273747e755fda6ac82894eaa997c35a",
        "previous_commit": "c43b5af3149a64f3b96be7643327f25cb4cfcc8a",
        "date": 1558612048,
        "releases": {
            "previous": "8f6e1fe45273747e755fda6ac82894eaa997c35a",
            "next": "8f6e1fe45273747e755fda6ac82894eaa997c35a"
        },
        "commit_message": " easier way to add getter for jdbc, revert reader change\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8f6e1fe45273747e755fda6ac82894eaa997c35a": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ReaderCharBuffer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ReaderCharBuffer.shiftAndRead(int shiftFrom)"
                ]
            },
            "c43b5af3149a64f3b96be7643327f25cb4cfcc8a": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ReaderCharBuffer.java": [
                    "public final boolean org.simpleflatmapper.lightningcsv.parser.ReaderCharBuffer.shiftAndRead(int shiftFrom)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "be11b11b264d3fa5370898543c8b4e1340b3b32d",
        "previous_commit": "4dc6bf853c3016133e21d0a12b8423b5a0020455",
        "date": 1510596484,
        "releases": {
            "previous": "be11b11b264d3fa5370898543c8b4e1340b3b32d",
            "next": "be11b11b264d3fa5370898543c8b4e1340b3b32d"
        },
        "commit_message": " #459 small change in test\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "be11b11b264d3fa5370898543c8b4e1340b3b32d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "private int org.simpleflatmapper.csv.parser.CharConsumer.findEndOfQuotedArea(char[] chars, int start, int end, char escapeChar, char quoteChar, int currentState)"
                ]
            },
            "4dc6bf853c3016133e21d0a12b8423b5a0020455": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "private int org.simpleflatmapper.csv.parser.CharConsumer.findEndOfQuotedArea(char[] chars, int start, int end, char escapeChar, char quoteChar, int currentState)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2282cebc0a5d27d5c518fd67f945a3f7bc157a19",
        "previous_commit": "2016ad6fc1e6d2b0491db2657f5ef2f2740f8808",
        "date": 1573058344,
        "releases": {
            "previous": "2282cebc0a5d27d5c518fd67f945a3f7bc157a19",
            "next": "2282cebc0a5d27d5c518fd67f945a3f7bc157a19"
        },
        "commit_message": "java7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2282cebc0a5d27d5c518fd67f945a3f7bc157a19": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private boolean org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.excludeSpeculation(PropertyMeta<T, ?> prop)"
                ]
            },
            "2016ad6fc1e6d2b0491db2657f5ef2f2740f8808": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private boolean org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.excludeSpeculation(PropertyMeta<T, ?> prop)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "36ffd4b5a857d751e99d07c461c19e5f2e0f0bc4",
        "previous_commit": "989766fbe61ee613665d053eb924b779c289df54",
        "date": 1470779186,
        "releases": {
            "previous": "36ffd4b5a857d751e99d07c461c19e5f2e0f0bc4",
            "next": "36ffd4b5a857d751e99d07c461c19e5f2e0f0bc4"
        },
        "commit_message": "type with tz\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "36ffd4b5a857d751e99d07c461c19e5f2e0f0bc4": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(JdbcColumnKey key)"
                ]
            },
            "989766fbe61ee613665d053eb924b779c289df54": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <P> PreparedStatementIndexSetter<P> org.simpleflatmapper.jdbc.impl.PreparedStatementSetterFactory.getIndexedSetter(JdbcColumnKey key)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bc3b9b1da8f92dba14be7b28b246cf9b497e2485",
        "previous_commit": "47922f0d9ad794749a1d71b632ce0a9abacddaf0",
        "date": 1522421225,
        "releases": {
            "previous": "bc3b9b1da8f92dba14be7b28b246cf9b497e2485",
            "next": "bc3b9b1da8f92dba14be7b28b246cf9b497e2485"
        },
        "commit_message": "Revert \"inline\"\n\nThis reverts commit 9092451e5b1462bc689b88fdbf24b1715466b102.\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bc3b9b1da8f92dba14be7b28b246cf9b497e2485": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public void org.simpleflatmapper.util.RingBufferReader.run()"
                ]
            },
            "47922f0d9ad794749a1d71b632ce0a9abacddaf0": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public void org.simpleflatmapper.util.RingBufferReader.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "667fb81a7737c5d285019b6240d97eabb37005d6",
        "previous_commit": "12921bd91f3894dd2767e9692d41b877624b3c65",
        "date": 1568387214,
        "releases": {
            "previous": "667fb81a7737c5d285019b6240d97eabb37005d6",
            "next": "667fb81a7737c5d285019b6240d97eabb37005d6"
        },
        "commit_message": "converter service on building chain ignore ISE\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "667fb81a7737c5d285019b6240d97eabb37005d6": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private List<ScoredConverterFactory> org.simpleflatmapper.converter.ConverterService.findConverterFactories(Type inType, Type outType, Object[] params, Set<Type> loopDetector)"
                ]
            },
            "12921bd91f3894dd2767e9692d41b877624b3c65": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private List<ScoredConverterFactory> org.simpleflatmapper.converter.ConverterService.findConverterFactories(Type inType, Type outType, Object[] params, Set<Type> loopDetector)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fae0e678fef7610e6127affd5ee402529b202b7e",
        "previous_commit": "d72fb1b9bdb735c5e4b3f2244826395e72cce7ba",
        "date": 1473624833,
        "releases": {
            "previous": "fae0e678fef7610e6127affd5ee402529b202b7e",
            "next": "fae0e678fef7610e6127affd5ee402529b202b7e"
        },
        "commit_message": "add discriminator builder\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fae0e678fef7610e6127affd5ee402529b202b7e": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/DiscriminatorJdbcBuilder.java": [
                    "public boolean org.simpleflatmapper.jdbc.DiscriminatorJdbcBuilder<T>.test(ResultSet resultSet)"
                ]
            },
            "d72fb1b9bdb735c5e4b3f2244826395e72cce7ba": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/DiscriminatorJdbcBuilder.java": [
                    "public boolean org.simpleflatmapper.jdbc.DiscriminatorJdbcBuilder<T>.test(ResultSet resultSet)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "45d9bfc79e019e8847f6e4a27c580e3da65b7411",
        "previous_commit": "2c7a86eac8c534b8234958f972990dd20defa9d7",
        "date": 1511865881,
        "releases": {
            "previous": "45d9bfc79e019e8847f6e4a27c580e3da65b7411",
            "next": "45d9bfc79e019e8847f6e4a27c580e3da65b7411"
        },
        "commit_message": " #434  add CS to BigXXnumberXX\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "45d9bfc79e019e8847f6e4a27c580e3da65b7411": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ]
            },
            "2c7a86eac8c534b8234958f972990dd20defa9d7": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/impl/JavaBaseConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.converter.impl.JavaBaseConverterFactoryProducer.produce(Consumer<? super ConverterFactory<?, ?>> consumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6fe9c95746a9a16245ad8b6e341d1be57b04ceee",
        "previous_commit": "b1efef1f6fb28bcba233d997761870d100b18d33",
        "date": 1475006677,
        "releases": {
            "previous": "6fe9c95746a9a16245ad8b6e341d1be57b04ceee",
            "next": "6fe9c95746a9a16245ad8b6e341d1be57b04ceee"
        },
        "commit_message": " #341 add function callback with stream\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6fe9c95746a9a16245ad8b6e341d1be57b04ceee": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlComments()"
                ]
            },
            "b1efef1f6fb28bcba233d997761870d100b18d33": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "public DSLYamlComment org.simpleflatmapper.csv.DSL.withYamlComments()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "23109fae129db2cbdb0f8315d7fa9449a8ecd238",
        "previous_commit": "edc1a84529c1904a64f592f5b799b8d8daf30b10",
        "date": 1561025956,
        "releases": {
            "previous": "23109fae129db2cbdb0f8315d7fa9449a8ecd238",
            "next": "23109fae129db2cbdb0f8315d7fa9449a8ecd238"
        },
        "commit_message": "remove sout, fix java7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "23109fae129db2cbdb0f8315d7fa9449a8ecd238": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static Type org.simpleflatmapper.reflect.asm.AsmUtils.toGenericType(String sig, List<String> genericTypeNames, Type target)"
                ]
            },
            "edc1a84529c1904a64f592f5b799b8d8daf30b10": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static Type org.simpleflatmapper.reflect.asm.AsmUtils.toGenericType(String sig, List<String> genericTypeNames, Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2574d474d889d0be38c62852339c085280146224",
        "previous_commit": "f0fe0fc9081ab5601cf6a65a555f6def208d1f31",
        "date": 1529223871,
        "releases": {
            "previous": "2574d474d889d0be38c62852339c085280146224",
            "next": "2574d474d889d0be38c62852339c085280146224"
        },
        "commit_message": "fix #522 filter out empty aliases\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2574d474d889d0be38c62852339c085280146224": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private Map<String, String> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.aliases(final ReflectionService reflectService, Class<T> target)"
                ]
            },
            "f0fe0fc9081ab5601cf6a65a555f6def208d1f31": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectClassMeta.java": [
                    "private Map<String, String> org.simpleflatmapper.reflect.meta.ObjectClassMeta<T>.aliases(final ReflectionService reflectService, Class<T> target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e7c0fe033b2f238a13f913d09eeafd389b7e1747",
        "previous_commit": "2dc62a1991621ad1adaaeef3d4cc8fff0dccdbc6",
        "date": 1520701842,
        "releases": {
            "previous": "e7c0fe033b2f238a13f913d09eeafd389b7e1747",
            "next": "e7c0fe033b2f238a13f913d09eeafd389b7e1747"
        },
        "commit_message": "#495 only speculative index are vertical move\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e7c0fe033b2f238a13f913d09eeafd389b7e1747": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.arrayIndex(int i)"
                ]
            },
            "2dc62a1991621ad1adaaeef3d4cc8fff0dccdbc6": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/PropertyMatchingScore.java": [
                    "public PropertyMatchingScore org.simpleflatmapper.reflect.meta.PropertyMatchingScore.arrayIndex(int i)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8b71c2974f83fc7428b6045f8599e938d90a7f13",
        "previous_commit": "b192a3b0b6918e8ddd11bd77222a64a7cf40a6cf",
        "date": 1468736892,
        "releases": {
            "previous": "8b71c2974f83fc7428b6045f8599e938d90a7f13",
            "next": "8b71c2974f83fc7428b6045f8599e938d90a7f13"
        },
        "commit_message": " #328 datastax3 helper test\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8b71c2974f83fc7428b6045f8599e938d90a7f13": {
                "sfm-datastax/src/main/java/org/sfm/datastax/DataTypeHelper.java": [
                    "public static boolean org.sfm.datastax.DataTypeHelper.isNumber(DataType.Name name)"
                ]
            },
            "b192a3b0b6918e8ddd11bd77222a64a7cf40a6cf": {
                "sfm-datastax/src/main/java/org/sfm/datastax/DataTypeHelper.java": [
                    "public static boolean org.sfm.datastax.DataTypeHelper.isNumber(DataType.Name name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0c1d49ab7b12a1d89ea868624d4ba427ab608c62",
        "previous_commit": "2d2668937db512a4353bd1d81b4294038b2fea7d",
        "date": 1553639058,
        "releases": {
            "previous": "0c1d49ab7b12a1d89ea868624d4ba427ab608c62",
            "next": "0c1d49ab7b12a1d89ea868624d4ba427ab608c62"
        },
        "commit_message": "java7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0c1d49ab7b12a1d89ea868624d4ba427ab608c62": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmFactory.java": [
                    "public <S, T> AbstractMapper<S, T> org.simpleflatmapper.map.asm.MapperAsmFactory.createMapper(final FieldKey<?>[] keys, final FieldMapper<S, T>[] mappers, final FieldMapper<S, T>[] constructorMappers, final BiInstantiator<S, MappingContext<? super S>, T> instantiator, final Class<? super S> source, final Class<T> target)"
                ]
            },
            "2d2668937db512a4353bd1d81b4294038b2fea7d": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmFactory.java": [
                    "public <S, T> AbstractMapper<S, T> org.simpleflatmapper.map.asm.MapperAsmFactory.createMapper(final FieldKey<?>[] keys, final FieldMapper<S, T>[] mappers, final FieldMapper<S, T>[] constructorMappers, final BiInstantiator<S, MappingContext<? super S>, T> instantiator, final Class<? super S> source, final Class<T> target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ee5d3b0813402eb182015e698de05ba2262ca5a1",
        "previous_commit": "75f98ea2606127a048632be5f0a5f67b660d4993",
        "date": 1529095755,
        "releases": {
            "previous": "ee5d3b0813402eb182015e698de05ba2262ca5a1",
            "next": "ee5d3b0813402eb182015e698de05ba2262ca5a1"
        },
        "commit_message": "fix #461 disallow self ref for rename property\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ee5d3b0813402eb182015e698de05ba2262ca5a1": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties, FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform, TypeAffinityScorer typeAffinityScorer)"
                ]
            },
            "75f98ea2606127a048632be5f0a5f67b660d4993": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties, FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform, TypeAffinityScorer typeAffinityScorer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6b2ac6130e7eba1756375f16b594cc062c91167c",
        "previous_commit": "3ae3017b5b748736c140e8816b6282bea68badc3",
        "date": 1522602749,
        "releases": {
            "previous": "6b2ac6130e7eba1756375f16b594cc062c91167c",
            "next": "6b2ac6130e7eba1756375f16b594cc062c91167c"
        },
        "commit_message": " fix #501 NPE\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6b2ac6130e7eba1756375f16b594cc062c91167c": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static Class<?> org.simpleflatmapper.util.TypeHelper.toBoxedClass(Class<?> target)"
                ]
            },
            "3ae3017b5b748736c140e8816b6282bea68badc3": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static Class<?> org.simpleflatmapper.util.TypeHelper.toBoxedClass(Class<?> target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "edc1a84529c1904a64f592f5b799b8d8daf30b10",
        "previous_commit": "e2c2bf0d7f5dc08bcd719fdcd8b1858e098aa06c",
        "date": 1561022040,
        "releases": {
            "previous": "edc1a84529c1904a64f592f5b799b8d8daf30b10",
            "next": "edc1a84529c1904a64f592f5b799b8d8daf30b10"
        },
        "commit_message": " fix #662 rewrite sig reification\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "edc1a84529c1904a64f592f5b799b8d8daf30b10": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static Type org.simpleflatmapper.reflect.asm.AsmUtils.toGenericType(String sig, List<String> genericTypeNames, Type target)"
                ]
            },
            "e2c2bf0d7f5dc08bcd719fdcd8b1858e098aa06c": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static Type org.simpleflatmapper.reflect.asm.AsmUtils.toGenericType(String sig, List<String> genericTypeNames, Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6b5d660f57e351bf541eac66235bc3d02fb85052",
        "previous_commit": "d463b8067e07487805047b85849231e0a48817ca",
        "date": 1511968559,
        "releases": {
            "previous": "6b5d660f57e351bf541eac66235bc3d02fb85052",
            "next": "6b5d660f57e351bf541eac66235bc3d02fb85052"
        },
        "commit_message": " #475 fix OOME on headers capture\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6b5d660f57e351bf541eac66235bc3d02fb85052": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellConsumerCapture.java": [
                    "public void org.simpleflatmapper.csv.impl.CellConsumerCapture.newCell(char[] chars, int offset, int length)"
                ]
            },
            "d463b8067e07487805047b85849231e0a48817ca": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellConsumerCapture.java": [
                    "public void org.simpleflatmapper.csv.impl.CellConsumerCapture.newCell(char[] chars, int offset, int length)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "022107ebcdc34dd02593cadf214a96f646a1d91c",
        "previous_commit": "fdfb97e0a6df67ff58a8c8efc774817f38991256",
        "date": 1573485883,
        "releases": {
            "previous": "022107ebcdc34dd02593cadf214a96f646a1d91c",
            "next": "022107ebcdc34dd02593cadf214a96f646a1d91c"
        },
        "commit_message": " #690 first go at 690\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "022107ebcdc34dd02593cadf214a96f646a1d91c": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/GetterFactoryProperty.java": [
                    "public static <S, K extends FieldKey<K>, T> GetterFactoryProperty org.simpleflatmapper.map.property.GetterFactoryProperty.forType(final Type type, final IndexedGetter<S, T> getter)"
                ]
            },
            "fdfb97e0a6df67ff58a8c8efc774817f38991256": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/GetterFactoryProperty.java": [
                    "public static <S, K extends FieldKey<K>, T> GetterFactoryProperty org.simpleflatmapper.map.property.GetterFactoryProperty.forType(final Type type, final IndexedGetter<S, T> getter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8ba67cf6fb419f13cfd6b3bbf7970271416ebdbf",
        "previous_commit": "372e1b41acaafa0b46b09e181f0c6815d18423f7",
        "date": 1438682209,
        "releases": {
            "previous": "8ba67cf6fb419f13cfd6b3bbf7970271416ebdbf",
            "next": "8ba67cf6fb419f13cfd6b3bbf7970271416ebdbf"
        },
        "commit_message": "#196 add list/set/map support\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8ba67cf6fb419f13cfd6b3bbf7970271416ebdbf": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ]
            },
            "372e1b41acaafa0b46b09e181f0c6815d18423f7": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6a2e5415ca1e942eec4fa81e372ee8a335079fa4",
        "previous_commit": "c70d4af0c8ea20ea1f0850e12ee9d1e756bcf782",
        "date": 1486069405,
        "releases": {
            "previous": "6a2e5415ca1e942eec4fa81e372ee8a335079fa4",
            "next": "6a2e5415ca1e942eec4fa81e372ee8a335079fa4"
        },
        "commit_message": " #400 unwrap BiFunctionGetter in BiInstantiatorKey\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6a2e5415ca1e942eec4fa81e372ee8a335079fa4": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorKey.java": [
                    "private static <S1, S2> InjectedParam[] org.simpleflatmapper.reflect.asm.BiInstantiatorKey.paramAndBuilderFactoryClass(Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections)"
                ]
            },
            "c70d4af0c8ea20ea1f0850e12ee9d1e756bcf782": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/BiInstantiatorKey.java": [
                    "private static <S1, S2> InjectedParam[] org.simpleflatmapper.reflect.asm.BiInstantiatorKey.paramAndBuilderFactoryClass(Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1f57020eb66d9c6f81787199d882d75f7c991c38",
        "previous_commit": "e2b4ec32d8ae7936cb1fb506923d2fc9a624187a",
        "date": 1528572191,
        "releases": {
            "previous": "1f57020eb66d9c6f81787199d882d75f7c991c38",
            "next": "1f57020eb66d9c6f81787199d882d75f7c991c38"
        },
        "commit_message": "fix type\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1f57020eb66d9c6f81787199d882d75f7c991c38": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/ResultFieldMapperErrorHandler.java": [
                    "public void org.simpleflatmapper.map.ResultFieldMapperErrorHandler<K>.errorMappingField(K key, Object source, Object target, Exception error)"
                ]
            },
            "e2b4ec32d8ae7936cb1fb506923d2fc9a624187a": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/ResultFieldMapperErrorHandler.java": [
                    "public void org.simpleflatmapper.map.ResultFieldMapperErrorHandler<K>.errorMappingField(K key, Object source, Object target, Exception error)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "91d16ed6cd82d6ea63c8e9b2a469442bbba1d9eb",
        "previous_commit": "73a5705d43cebf372b8615aa51d5af864b41aac7",
        "date": 1529011510,
        "releases": {
            "previous": "91d16ed6cd82d6ea63c8e9b2a469442bbba1d9eb",
            "next": "91d16ed6cd82d6ea63c8e9b2a469442bbba1d9eb"
        },
        "commit_message": " #461 add mandatory prop and annotation\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "91d16ed6cd82d6ea63c8e9b2a469442bbba1d9eb": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/annotation/impl/MappingAnnotationToPropertyServiceProducer.java": [
                    "public void org.simpleflatmapper.map.annotation.impl.MappingAnnotationToPropertyServiceProducer.generateProperty(Annotation annotation, Consumer<Object> consumer)"
                ]
            },
            "73a5705d43cebf372b8615aa51d5af864b41aac7": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/annotation/impl/MappingAnnotationToPropertyServiceProducer.java": [
                    "public void org.simpleflatmapper.map.annotation.impl.MappingAnnotationToPropertyServiceProducer.generateProperty(Annotation annotation, Consumer<Object> consumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "30712706202d242ea54fcac595596d556df18a23",
        "previous_commit": "e186e14f0d7cc944c31ec0135a844fb7fd629bb9",
        "date": 1586795387,
        "releases": {
            "previous": "30712706202d242ea54fcac595596d556df18a23",
            "next": "30712706202d242ea54fcac595596d556df18a23"
        },
        "commit_message": "fix AuthorRecord and rebase JooqConverterFactoryProducer to previous\nversion",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "30712706202d242ea54fcac595596d556df18a23": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/converter/JooqConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jooq.converter.JooqConverterFactoryProducer.produce(Consumer<? super ContextualConverterFactory<?, ?>> consumer)"
                ]
            },
            "e186e14f0d7cc944c31ec0135a844fb7fd629bb9": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/converter/JooqConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jooq.converter.JooqConverterFactoryProducer.produce(Consumer<? super ContextualConverterFactory<?, ?>> consumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fcdab99001bfac88542ba507c3f6bedfd5ec1c1f",
        "previous_commit": "1635e5b50cc0516a61c77a9d9e0fd10d2d4532f7",
        "date": 1552599066,
        "releases": {
            "previous": "fcdab99001bfac88542ba507c3f6bedfd5ec1c1f",
            "next": "fcdab99001bfac88542ba507c3f6bedfd5ec1c1f"
        },
        "commit_message": " better fix for #616 do not use meta data column class if not java if not match targettype\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fcdab99001bfac88542ba507c3f6bedfd5ec1c1f": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcColumnKey.java": [
                    "public Type org.simpleflatmapper.jdbc.JdbcColumnKey.getType(Type targetType)"
                ]
            },
            "1635e5b50cc0516a61c77a9d9e0fd10d2d4532f7": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/JdbcColumnKey.java": [
                    "public Type org.simpleflatmapper.jdbc.JdbcColumnKey.getType(Type targetType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c71d7d6ee822cfae008471953c6fce3da76ade1e",
        "previous_commit": "078b40fa2f8ee8423d2d4d63e2ba29511be3af70",
        "date": 1544092008,
        "releases": {
            "previous": "c71d7d6ee822cfae008471953c6fce3da76ade1e",
            "next": "c71d7d6ee822cfae008471953c6fce3da76ade1e"
        },
        "commit_message": "java7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c71d7d6ee822cfae008471953c6fce3da76ade1e": {
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "private <P> PlaceHolderValueGetter<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.build(JdbcColumnKey key, PropertyMapping<T, P, JdbcColumnKey> pm)"
                ]
            },
            "078b40fa2f8ee8423d2d4d63e2ba29511be3af70": {
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "private <P> PlaceHolderValueGetter<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.build(JdbcColumnKey key, PropertyMapping<T, P, JdbcColumnKey> pm)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "382e2da206f6e1528bd8e3cf45300728057ad109",
        "previous_commit": "f5a0fe442d241a7c683bc597f290c926b7124996",
        "date": 1456043779,
        "releases": {
            "previous": "382e2da206f6e1528bd8e3cf45300728057ad109",
            "next": "382e2da206f6e1528bd8e3cf45300728057ad109"
        },
        "commit_message": " #295 resolve one arg object in constructor\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "382e2da206f6e1528bd8e3cf45300728057ad109": {
                "sfm/src/main/java/org/sfm/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.sfm.csv.impl.CellSetterFactory.getReader(ClassMeta<P> classMeta, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ]
            },
            "f5a0fe442d241a7c683bc597f290c926b7124996": {
                "sfm/src/main/java/org/sfm/csv/impl/CellSetterFactory.java": [
                    "private <P> CellValueReader<P> org.sfm.csv.impl.CellSetterFactory.getReader(ClassMeta<P> classMeta, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "dae6117b2c61d7e8a78df0144296e283eecee972",
        "previous_commit": "f4219eb74e41d83fd3a0ecc8443fcbf1c2d196ee",
        "date": 1542112021,
        "releases": {
            "previous": "dae6117b2c61d7e8a78df0144296e283eecee972",
            "next": "dae6117b2c61d7e8a78df0144296e283eecee972"
        },
        "commit_message": " #584 fix proto buf side effect\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "dae6117b2c61d7e8a78df0144296e283eecee972": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/BuilderInstantiatorDefinitionFactory.java": [
                    "private static BuilderInstantiatorDefinition org.simpleflatmapper.reflect.impl.BuilderInstantiatorDefinitionFactory.getDefinitionForBuilder(ExecutableInstantiatorDefinition def, Type builderType, Type target)"
                ]
            },
            "f4219eb74e41d83fd3a0ecc8443fcbf1c2d196ee": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/BuilderInstantiatorDefinitionFactory.java": [
                    "private static BuilderInstantiatorDefinition org.simpleflatmapper.reflect.impl.BuilderInstantiatorDefinitionFactory.getDefinitionForBuilder(ExecutableInstantiatorDefinition def, Type builderType, Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2da5210a75986fbe7d350ab689c35341d50fc5fe",
        "previous_commit": "2461b3a14e39d33c7c007d7b5a6f807ee587d896",
        "date": 1496785711,
        "releases": {
            "previous": "2da5210a75986fbe7d350ab689c35341d50fc5fe",
            "next": "2da5210a75986fbe7d350ab689c35341d50fc5fe"
        },
        "commit_message": "#440 addAll handling\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2da5210a75986fbe7d350ab689c35341d50fc5fe": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/BuilderInstantiatorDefinitionFactory.java": [
                    "private static BuilderInstantiatorDefinition org.simpleflatmapper.reflect.impl.BuilderInstantiatorDefinitionFactory.getDefinitionForBuilder(ExecutableInstantiatorDefinition def, Type builderType, Type target)"
                ]
            },
            "2461b3a14e39d33c7c007d7b5a6f807ee587d896": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/BuilderInstantiatorDefinitionFactory.java": [
                    "private static BuilderInstantiatorDefinition org.simpleflatmapper.reflect.impl.BuilderInstantiatorDefinitionFactory.getDefinitionForBuilder(ExecutableInstantiatorDefinition def, Type builderType, Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "515424ffb659896a1f351945a2b01610afedc783",
        "previous_commit": "f452eb64966212ecf350db744efece9bfab10cb8",
        "date": 1438690546,
        "releases": {
            "previous": "515424ffb659896a1f351945a2b01610afedc783",
            "next": "515424ffb659896a1f351945a2b01610afedc783"
        },
        "commit_message": "#199 add tuple value support\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "515424ffb659896a1f351945a2b01610afedc783": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ]
            },
            "f452eb64966212ecf350db744efece9bfab10cb8": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "54072d6521cca637801b840f37b7c7d0ec594f47",
        "previous_commit": "675306966bb2f99acfbdbbb54b6ab20bb7049d2e",
        "date": 1468855817,
        "releases": {
            "previous": "54072d6521cca637801b840f37b7c7d0ec594f47",
            "next": "54072d6521cca637801b840f37b7c7d0ec594f47"
        },
        "commit_message": " #328 use class loader trick to test again 3.0.3\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "54072d6521cca637801b840f37b7c7d0ec594f47": {
                "sfm-datastax/src/main/java/org/sfm/datastax/DataTypeHelper.java": [
                    "private static int org.sfm.datastax.DataTypeHelper.getOrdinal(String type)"
                ]
            },
            "675306966bb2f99acfbdbbb54b6ab20bb7049d2e": {
                "sfm-datastax/src/main/java/org/sfm/datastax/DataTypeHelper.java": [
                    "private static int org.sfm.datastax.DataTypeHelper.getOrdinal(String type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e98cdb4f1ff8c45ade624abbf7eefe249849818e",
        "previous_commit": "f1012cbdb4da69693513d6fef89cf1ef8ba35c73",
        "date": 1471636495,
        "releases": {
            "previous": "e98cdb4f1ff8c45ade624abbf7eefe249849818e",
            "next": "e98cdb4f1ff8c45ade624abbf7eefe249849818e"
        },
        "commit_message": "remove the need for unused property meta\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e98cdb4f1ff8c45ade624abbf7eefe249849818e": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "private static Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.buildParameters(Type target, Class<?>[] parameterTypes, Type[] parameterGenericTypes, TypeVariable<Class<Object>>[] targetClassTypeParameters)"
                ]
            },
            "f1012cbdb4da69693513d6fef89cf1ef8ba35c73": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionInstantiatorDefinitionFactory.java": [
                    "private static Parameter[] org.simpleflatmapper.reflect.ReflectionInstantiatorDefinitionFactory.buildParameters(Type target, Class<?>[] parameterTypes, Type[] parameterGenericTypes, TypeVariable<Class<Object>>[] targetClassTypeParameters)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9c66254f0e7ecc755aac913272e340b5a76977fc",
        "previous_commit": "87afc223bb6662e960551e513f3927c0b19cae3b",
        "date": 1469900997,
        "releases": {
            "previous": "9c66254f0e7ecc755aac913272e340b5a76977fc",
            "next": "9c66254f0e7ecc755aac913272e340b5a76977fc"
        },
        "commit_message": " #330 fix java7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9c66254f0e7ecc755aac913272e340b5a76977fc": {
                "sfm/src/main/java/org/sfm/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.sfm.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ]
            },
            "87afc223bb6662e960551e513f3927c0b19cae3b": {
                "sfm/src/main/java/org/sfm/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.sfm.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7a86c2cced25824142dce60d14ce64431cbca29b",
        "previous_commit": "ee111874431f1f1db79bd13d2786760dd315da67",
        "date": 1536571070,
        "releases": {
            "previous": "7a86c2cced25824142dce60d14ce64431cbca29b",
            "next": "7a86c2cced25824142dce60d14ce64431cbca29b"
        },
        "commit_message": "java7 generic issue\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7a86c2cced25824142dce60d14ce64431cbca29b": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/ParamNameDeductor.java": [
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.createValueFromInstantiator(Type type, boolean builderIgnoresNullValues)"
                ]
            },
            "ee111874431f1f1db79bd13d2786760dd315da67": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/ParamNameDeductor.java": [
                    "private <V> V org.simpleflatmapper.reflect.impl.ParamNameDeductor<T>.createValueFromInstantiator(Type type, boolean builderIgnoresNullValues)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "8012aa54aff73cdfb10d8627cd0c79c579d5f97d",
        "previous_commit": "720704e7321e706913956f34095647305a4004b3",
        "date": 1475105075,
        "releases": {
            "previous": "8012aa54aff73cdfb10d8627cd0c79c579d5f97d",
            "next": "8012aa54aff73cdfb10d8627cd0c79c579d5f97d"
        },
        "commit_message": " #343 add catch when no getter/setter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "8012aa54aff73cdfb10d8627cd0c79c579d5f97d": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/FastTupleClassMeta.java": [
                    "private static <T> ArrayList<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.FastTupleClassMeta<T>.getPropertyMetas(Type ownerType, ReflectionService reflectionService)"
                ]
            },
            "720704e7321e706913956f34095647305a4004b3": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/FastTupleClassMeta.java": [
                    "private static <T> ArrayList<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.FastTupleClassMeta<T>.getPropertyMetas(Type ownerType, ReflectionService reflectionService)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bd23ef49440dfc994b461f5fad8c10f24fedb722",
        "previous_commit": "fd93f9ce5681674449082e632d4bfd05454284fc",
        "date": 1541234659,
        "releases": {
            "previous": "bd23ef49440dfc994b461f5fad8c10f24fedb722",
            "next": "bd23ef49440dfc994b461f5fad8c10f24fedb722"
        },
        "commit_message": "fix #578\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bd23ef49440dfc994b461f5fad8c10f24fedb722": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/PredicatedEnumerable.java": [
                    "public boolean org.simpleflatmapper.util.PredicatedEnumerable<T>.next()"
                ]
            },
            "fd93f9ce5681674449082e632d4bfd05454284fc": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/PredicatedEnumerable.java": [
                    "public boolean org.simpleflatmapper.util.PredicatedEnumerable<T>.next()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "38f46fe9ad3c98b3fbd0b2db3eff18c955c46d11",
        "previous_commit": "7151d7a70d351460f1ee2610488c0137aeee54aa",
        "date": 1467874023,
        "releases": {
            "previous": "38f46fe9ad3c98b3fbd0b2db3eff18c955c46d11",
            "next": "38f46fe9ad3c98b3fbd0b2db3eff18c955c46d11"
        },
        "commit_message": "fix test, better behavior for parallel reader\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "38f46fe9ad3c98b3fbd0b2db3eff18c955c46d11": {
                "sfm/src/main/java/org/sfm/utils/ParallelReader.java": [
                    "private int org.sfm.utils.ParallelReader.read(long currentTail, long currentHead)"
                ]
            },
            "7151d7a70d351460f1ee2610488c0137aeee54aa": {
                "sfm/src/main/java/org/sfm/utils/ParallelReader.java": [
                    "private int org.sfm.utils.ParallelReader.read(long currentTail, long currentHead)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5d728669d2af7013784197745473657ae5cdc875",
        "previous_commit": "54cf4dcc4b6c283819743837970e834c6e2936e5",
        "date": 1572628573,
        "releases": {
            "previous": "5d728669d2af7013784197745473657ae5cdc875",
            "next": "5d728669d2af7013784197745473657ae5cdc875"
        },
        "commit_message": " fix #688\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5d728669d2af7013784197745473657ae5cdc875": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/getter/StringUUIDGetter.java": [
                    "public UUID org.simpleflatmapper.reflect.getter.StringUUIDGetter<R>.get(final R target)"
                ]
            },
            "54cf4dcc4b6c283819743837970e834c6e2936e5": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/getter/StringUUIDGetter.java": [
                    "public UUID org.simpleflatmapper.reflect.getter.StringUUIDGetter<R>.get(final R target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "be0fa289fec3ddc7c482e028c4ba8d47895ad5f1",
        "previous_commit": "dfc9a6bc14af763690a4577ea77d87d0064a40cc",
        "date": 1470396041,
        "releases": {
            "previous": "be0fa289fec3ddc7c482e028c4ba8d47895ad5f1",
            "next": "be0fa289fec3ddc7c482e028c4ba8d47895ad5f1"
        },
        "commit_message": "fix java8 build\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "be0fa289fec3ddc7c482e028c4ba8d47895ad5f1": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "private Converter<?, ?> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt, ColumnDefinition<DatastaxColumnKey, ?> columnDefinition)"
                ]
            },
            "dfc9a6bc14af763690a4577ea77d87d0064a40cc": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/SettableDataSetterFactory.java": [
                    "private Converter<?, ?> org.simpleflatmapper.datastax.impl.SettableDataSetterFactory.getConverter(Type elementType, Class<?> dataTypeElt, DataType dtElt, ColumnDefinition<DatastaxColumnKey, ?> columnDefinition)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3e4e7913bacd94b805ece44e3ff767f451a4a04f",
        "previous_commit": "42bc718c55ed70e74112d81eb58538a0c14127ec",
        "date": 1542275033,
        "releases": {
            "previous": "3e4e7913bacd94b805ece44e3ff767f451a4a04f",
            "next": "3e4e7913bacd94b805ece44e3ff767f451a4a04f"
        },
        "commit_message": "remove useless null check\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3e4e7913bacd94b805ece44e3ff767f451a4a04f": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ]
            },
            "42bc718c55ed70e74112d81eb58538a0c14127ec": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.simpleflatmapper.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e10a80c5f43c85064b2f347a6a2e34095fc96c0a",
        "previous_commit": "6cac8b968947ed410abcb144324b571c5ef58d6b",
        "date": 1539078390,
        "releases": {
            "previous": "e10a80c5f43c85064b2f347a6a2e34095fc96c0a",
            "next": "e10a80c5f43c85064b2f347a6a2e34095fc96c0a"
        },
        "commit_message": "java7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e10a80c5f43c85064b2f347a6a2e34095fc96c0a": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/FastTupleClassMeta.java": [
                    "public ClassMeta<T> org.simpleflatmapper.reflect.meta.FastTupleClassMeta<T>.withReflectionService(ReflectionService reflectionService)"
                ]
            },
            "6cac8b968947ed410abcb144324b571c5ef58d6b": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/FastTupleClassMeta.java": [
                    "public ClassMeta<T> org.simpleflatmapper.reflect.meta.FastTupleClassMeta<T>.withReflectionService(ReflectionService reflectionService)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e04d98e58e2249ae40288f3db3495e3b607117ba",
        "previous_commit": "de33a2384c0222f0875ae8e97a5776014033c7e3",
        "date": 1470864305,
        "releases": {
            "previous": "e04d98e58e2249ae40288f3db3495e3b607117ba",
            "next": "e04d98e58e2249ae40288f3db3495e3b607117ba"
        },
        "commit_message": "repackage ow2 asm\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e04d98e58e2249ae40288f3db3495e3b607117ba": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmHelper.java": [
                    "private static boolean org.simpleflatmapper.reflect.asm.AsmHelper._isAsmPresent()"
                ]
            },
            "de33a2384c0222f0875ae8e97a5776014033c7e3": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmHelper.java": [
                    "private static boolean org.simpleflatmapper.reflect.asm.AsmHelper._isAsmPresent()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4cfbf8ec7ed17f814e2c1452f47881547b2090e6",
        "previous_commit": "2e4717e5dbd712ce36e0ddd74a24fc1505b6db55",
        "date": 1573315086,
        "releases": {
            "previous": "4cfbf8ec7ed17f814e2c1452f47881547b2090e6",
            "next": "4cfbf8ec7ed17f814e2c1452f47881547b2090e6"
        },
        "commit_message": "#691 enable try plural for array on iterable\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4cfbf8ec7ed17f814e2c1452f47881547b2090e6": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private boolean org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.tryPlural(PropertyMeta<T, ?> prop)"
                ]
            },
            "2e4717e5dbd712ce36e0ddd74a24fc1505b6db55": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private boolean org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.tryPlural(PropertyMeta<T, ?> prop)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1e8baf29c378ffabcd7749c3160bd1a1d5cc2197",
        "previous_commit": "fd5dc9a8e2399ae655066da86aa9891d5cb2cc91",
        "date": 1467558433,
        "releases": {
            "previous": "1e8baf29c378ffabcd7749c3160bd1a1d5cc2197",
            "next": "1e8baf29c378ffabcd7749c3160bd1a1d5cc2197"
        },
        "commit_message": "fix build java7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1e8baf29c378ffabcd7749c3160bd1a1d5cc2197": {
                "sfm/src/main/java/org/sfm/jdbc/JdbcMapperFactory.java": [
                    "public <T, K> CrudDSL<T, K> org.sfm.jdbc.JdbcMapperFactory.crud(final Type target, final Type keyTarget)"
                ]
            },
            "fd5dc9a8e2399ae655066da86aa9891d5cb2cc91": {
                "sfm/src/main/java/org/sfm/jdbc/JdbcMapperFactory.java": [
                    "public <T, K> CrudDSL<T, K> org.sfm.jdbc.JdbcMapperFactory.crud(final Type target, final Type keyTarget)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "dafd823a267b586da7f9ba5d5347608b88c6e169",
        "previous_commit": "79d5256f9b3ca3fa0188130747c3397ca8ed4e49",
        "date": 1456560182,
        "releases": {
            "previous": "dafd823a267b586da7f9ba5d5347608b88c6e169",
            "next": "dafd823a267b586da7f9ba5d5347608b88c6e169"
        },
        "commit_message": "add tests\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "dafd823a267b586da7f9ba5d5347608b88c6e169": {
                "sfm-jooq/src/main/java/org/sfm/jooq/JooqFieldKey.java": [
                    "public boolean org.sfm.jooq.JooqFieldKey.equals(Object o)"
                ]
            },
            "79d5256f9b3ca3fa0188130747c3397ca8ed4e49": {
                "sfm-jooq/src/main/java/org/sfm/jooq/JooqFieldKey.java": [
                    "public boolean org.sfm.jooq.JooqFieldKey.equals(Object o)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3ac4a6d9412ea507f1604b55ad2521a8e30bf1d4",
        "previous_commit": "87519b9e58f3c8027f27689160987ea1e95d00fc",
        "date": 1554197673,
        "releases": {
            "previous": "3ac4a6d9412ea507f1604b55ad2521a8e30bf1d4",
            "next": "3ac4a6d9412ea507f1604b55ad2521a8e30bf1d4"
        },
        "commit_message": " #625 consider cr and ln as space\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3ac4a6d9412ea507f1604b55ad2521a8e30bf1d4": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/named/NamedSqlQueryParser.java": [
                    "private boolean org.simpleflatmapper.jdbc.named.NamedSqlQueryParser.isSpaceOrSymbol(char c)"
                ]
            },
            "87519b9e58f3c8027f27689160987ea1e95d00fc": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/named/NamedSqlQueryParser.java": [
                    "private boolean org.simpleflatmapper.jdbc.named.NamedSqlQueryParser.isSpaceOrSymbol(char c)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "450fb6892cfabdb240c16e35ce74ca0f6605b155",
        "previous_commit": "d9c17717af164c374115ad4717d4feb4b5fbcfad",
        "date": 1510675714,
        "releases": {
            "previous": "450fb6892cfabdb240c16e35ce74ca0f6605b155",
            "next": "450fb6892cfabdb240c16e35ce74ca0f6605b155"
        },
        "commit_message": "move char shifting in its own method\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "450fb6892cfabdb240c16e35ce74ca0f6605b155": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, int start, int end, CellConsumer cellConsumer)"
                ]
            },
            "d9c17717af164c374115ad4717d4feb4b5fbcfad": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, int start, int end, CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2a4767f2c9f27145207b1de4c79f2a2ac4896b50",
        "previous_commit": "3127273026b173a22586d75a36a69d7f9f335e2f",
        "date": 1497015276,
        "releases": {
            "previous": "2a4767f2c9f27145207b1de4c79f2a2ac4896b50",
            "next": "2a4767f2c9f27145207b1de4c79f2a2ac4896b50"
        },
        "commit_message": " #447 exclude non meaningfull builder method for proto\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2a4767f2c9f27145207b1de4c79f2a2ac4896b50": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/BuilderInstantiatorDefinitionFactory.java": [
                    "private static BuilderInstantiatorDefinition org.simpleflatmapper.reflect.impl.BuilderInstantiatorDefinitionFactory.getDefinitionForBuilder(ExecutableInstantiatorDefinition def, Type builderType, Type target)"
                ]
            },
            "3127273026b173a22586d75a36a69d7f9f335e2f": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/BuilderInstantiatorDefinitionFactory.java": [
                    "private static BuilderInstantiatorDefinition org.simpleflatmapper.reflect.impl.BuilderInstantiatorDefinitionFactory.getDefinitionForBuilder(ExecutableInstantiatorDefinition def, Type builderType, Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6042a508fca0333eb92407d7d3cb78562de710d9",
        "previous_commit": "022107ebcdc34dd02593cadf214a96f646a1d91c",
        "date": 1573485936,
        "releases": {
            "previous": "6042a508fca0333eb92407d7d3cb78562de710d9",
            "next": "6042a508fca0333eb92407d7d3cb78562de710d9"
        },
        "commit_message": " #690 enable speculative object mode\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6042a508fca0333eb92407d7d3cb78562de710d9": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SelectQueryMapperFactory.java": [
                    "public static SelectQueryMapperFactory org.simpleflatmapper.jooq.SelectQueryMapperFactory.newInstance( AbstractMapperFactory<JooqFieldKey, ?, ResultSet> config)"
                ]
            },
            "022107ebcdc34dd02593cadf214a96f646a1d91c": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SelectQueryMapperFactory.java": [
                    "public static SelectQueryMapperFactory org.simpleflatmapper.jooq.SelectQueryMapperFactory.newInstance( AbstractMapperFactory<JooqFieldKey, ?, ResultSet> config)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5b54ea55e29002b6b08fea0527143a382dd19a43",
        "previous_commit": "efc316c6cf59f470f9f27c74b01ba1ebbb53a1d9",
        "date": 1538996318,
        "releases": {
            "previous": "5b54ea55e29002b6b08fea0527143a382dd19a43",
            "next": "5b54ea55e29002b6b08fea0527143a382dd19a43"
        },
        "commit_message": " #558 first test pass\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5b54ea55e29002b6b08fea0527143a382dd19a43": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ]
            },
            "efc316c6cf59f470f9f27c74b01ba1ebbb53a1d9": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "110aa5597778e83cbc495a1dcd9733b4e9951480",
        "previous_commit": "f8b4957ed26385ab0297a7dabb1f912e227ec4f8",
        "date": 1550054523,
        "releases": {
            "previous": "110aa5597778e83cbc495a1dcd9733b4e9951480",
            "next": "110aa5597778e83cbc495a1dcd9733b4e9951480"
        },
        "commit_message": "  #609 very dirty impl for now, annotation only avail in byte code\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "110aa5597778e83cbc495a1dcd9733b4e9951480": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/DefaultReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.DefaultReflectionService.newClassMeta(Type target)"
                ]
            },
            "f8b4957ed26385ab0297a7dabb1f912e227ec4f8": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/DefaultReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.DefaultReflectionService.newClassMeta(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1df215a38748cdeab441582f38e4481c47f42134",
        "previous_commit": "fbc08180307ae9ad1a5343bafc5575bd9ad66c38",
        "date": 1696869361,
        "releases": {
            "previous": "1df215a38748cdeab441582f38e4481c47f42134",
            "next": "1df215a38748cdeab441582f38e4481c47f42134"
        },
        "commit_message": "no more java6/7/8 support 11, remove joda time, jdbi fast tuple\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1df215a38748cdeab441582f38e4481c47f42134": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/getter/UUIDUnspecifiedTypeGetter.java": [
                    "public UUID org.simpleflatmapper.reflect.getter.UUIDUnspecifiedTypeGetter<R>.get(final R target)"
                ]
            },
            "fbc08180307ae9ad1a5343bafc5575bd9ad66c38": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/getter/UUIDUnspecifiedTypeGetter.java": [
                    "public UUID org.simpleflatmapper.reflect.getter.UUIDUnspecifiedTypeGetter<R>.get(final R target)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "ef70d95d1ea3453feda7ee44648d3bf93745fb2a",
        "previous_commit": "cd35140c97c6e2c024f19ccf07c9028c2caffcd3",
        "date": 1514550376,
        "releases": {
            "previous": "ef70d95d1ea3453feda7ee44648d3bf93745fb2a",
            "next": "ef70d95d1ea3453feda7ee44648d3bf93745fb2a"
        },
        "commit_message": "fix #481\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ef70d95d1ea3453feda7ee44648d3bf93745fb2a": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, Object... params)"
                ]
            },
            "cd35140c97c6e2c024f19ccf07c9028c2caffcd3": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, Object... params)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6e7bccada594b470fe0f5a56e854db777a38e765",
        "previous_commit": "945cf6da6ce997ca1f85f30ff3d1a7e61b95af61",
        "date": 1459761503,
        "releases": {
            "previous": "6e7bccada594b470fe0f5a56e854db777a38e765",
            "next": "6e7bccada594b470fe0f5a56e854db777a38e765"
        },
        "commit_message": " #312 add provider factory to be able to customise the mapper\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6e7bccada594b470fe0f5a56e854db777a38e765": {
                "sfm-jooq/src/main/java/org/sfm/jooq/SfmRecordMapperProvider.java": [
                    "public <R extends Record, E> RecordMapper<R, E> org.sfm.jooq.SfmRecordMapperProvider.provide(RecordType<R> recordType, Class<? extends E> type)"
                ]
            },
            "945cf6da6ce997ca1f85f30ff3d1a7e61b95af61": {
                "sfm-jooq/src/main/java/org/sfm/jooq/SfmRecordMapperProvider.java": [
                    "public <R extends Record, E> RecordMapper<R, E> org.sfm.jooq.SfmRecordMapperProvider.provide(RecordType<R> recordType, Class<? extends E> type)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bfa535d5dc844c1e915f24340983199f671d7e3d",
        "previous_commit": "6328922467ab17e264798a9f141321a3ad164170",
        "date": 1459406286,
        "releases": {
            "previous": "bfa535d5dc844c1e915f24340983199f671d7e3d",
            "next": "bfa535d5dc844c1e915f24340983199f671d7e3d"
        },
        "commit_message": "make clone format a static class\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bfa535d5dc844c1e915f24340983199f671d7e3d": {
                "sfm/src/main/java/org/sfm/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.sfm.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ]
            },
            "6328922467ab17e264798a9f141321a3ad164170": {
                "sfm/src/main/java/org/sfm/csv/mapper/FieldMapperToAppendableFactory.java": [
                    "public <S, P> FieldMapper<S, Appendable> org.sfm.csv.mapper.FieldMapperToAppendableFactory.newFieldMapper(PropertyMapping<S, P, CsvColumnKey, FieldMapperColumnDefinition<CsvColumnKey>> pm, MappingContextFactoryBuilder builder, MapperBuilderErrorHandler mappingErrorHandler)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "83ebaf52e8523a746badf4dfcaeb08603d9ad140",
        "previous_commit": "11e3aacee4021627583397607be3edaa3a5ca925",
        "date": 1475103180,
        "releases": {
            "previous": "83ebaf52e8523a746badf4dfcaeb08603d9ad140",
            "next": "83ebaf52e8523a746badf4dfcaeb08603d9ad140"
        },
        "commit_message": " #343 use field to feed properpty\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "83ebaf52e8523a746badf4dfcaeb08603d9ad140": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/FastTupleClassMeta.java": [
                    "private static <T> ArrayList<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.FastTupleClassMeta<T>.getPropertyMetas(Type ownerType, ReflectionService reflectionService)"
                ]
            },
            "11e3aacee4021627583397607be3edaa3a5ca925": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/FastTupleClassMeta.java": [
                    "private static <T> ArrayList<PropertyMeta<T, ?>> org.simpleflatmapper.reflect.meta.FastTupleClassMeta<T>.getPropertyMetas(Type ownerType, ReflectionService reflectionService)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "394553029a51878b873feba18a4cb7dedafc25a2",
        "previous_commit": "fa401ef061729d2754bab45ad16f771a6400563e",
        "date": 1589129745,
        "releases": {
            "previous": "394553029a51878b873feba18a4cb7dedafc25a2",
            "next": "394553029a51878b873feba18a4cb7dedafc25a2"
        },
        "commit_message": "fix #710 classcastexception\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "394553029a51878b873feba18a4cb7dedafc25a2": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.map.impl.DiscriminatorReflectionService.newClassMeta(Type target)"
                ]
            },
            "fa401ef061729d2754bab45ad16f771a6400563e": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.map.impl.DiscriminatorReflectionService.newClassMeta(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b77121ec699cda21c9572aea7204f44f744bf0c7",
        "previous_commit": "d1041649e5ba78ea82018e4c1d48c968a2a4b055",
        "date": 1523198646,
        "releases": {
            "previous": "b77121ec699cda21c9572aea7204f44f744bf0c7",
            "next": "b77121ec699cda21c9572aea7204f44f744bf0c7"
        },
        "commit_message": " #506 add converter factory\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b77121ec699cda21c9572aea7204f44f744bf0c7": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ]
            },
            "d1041649e5ba78ea82018e4c1d48c968a2a4b055": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.simpleflatmapper.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "5c5ab66a149d36d997a8871065664d582cea9dbd",
        "previous_commit": "a6695011e533182211da93cf538758f55c4f3194",
        "date": 1481108322,
        "releases": {
            "previous": "5c5ab66a149d36d997a8871065664d582cea9dbd",
            "next": "5c5ab66a149d36d997a8871065664d582cea9dbd"
        },
        "commit_message": "use look up for comment\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "5c5ab66a149d36d997a8871065664d582cea9dbd": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            },
            "a6695011e533182211da93cf538758f55c4f3194": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/CharConsumer.java": [
                    "public final boolean org.simpleflatmapper.csv.parser.CharConsumer.consumeToNextRow(CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a44cb34b743ca43300e90b9b1221e02a49aa76e0",
        "previous_commit": "afe351bc2a5ca4769f4fd71bec2bce5d6fc7310e",
        "date": 1589126562,
        "releases": {
            "previous": "a44cb34b743ca43300e90b9b1221e02a49aa76e0",
            "next": "a44cb34b743ca43300e90b9b1221e02a49aa76e0"
        },
        "commit_message": " #720 exclude already match on first pass\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a44cb34b743ca43300e90b9b1221e02a49aa76e0": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties,\t\t\t\t\t\t\t\t FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer,\t\t\t\t\t\t\t\t PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)"
                ]
            },
            "afe351bc2a5ca4769f4fd71bec2bce5d6fc7310e": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties,\t\t\t\t\t\t\t\t FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer,\t\t\t\t\t\t\t\t PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7d365e6c852ff94842be7d9949cc626427d9e480",
        "previous_commit": "b871c2d30943b11a5c2acc9233a154370ff84e58",
        "date": 1455227070,
        "releases": {
            "previous": "7d365e6c852ff94842be7d9949cc626427d9e480",
            "next": "7d365e6c852ff94842be7d9949cc626427d9e480"
        },
        "commit_message": "#287 handle void builder setter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7d365e6c852ff94842be7d9949cc626427d9e480": {
                "sfm/src/main/java/org/sfm/reflect/InstantiatorFactory.java": [
                    "private <S, T> Instantiator<S, T> org.sfm.reflect.InstantiatorFactory.builderInstantiator(BuilderInstantiatorDefinition instantiatorDefinition,\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled)"
                ]
            },
            "b871c2d30943b11a5c2acc9233a154370ff84e58": {
                "sfm/src/main/java/org/sfm/reflect/InstantiatorFactory.java": [
                    "private <S, T> Instantiator<S, T> org.sfm.reflect.InstantiatorFactory.builderInstantiator(BuilderInstantiatorDefinition instantiatorDefinition,\t\t\t\t\t\t\t\t\t\t\t\t\t\t Map<Parameter, Getter<? super S, ?>> injections, boolean useAsmIfEnabled)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a6a4766ca9de9eb189fe488b05a153338264c450",
        "previous_commit": "d25b7eafbf8e83c075fb6e68a6a04775509b240d",
        "date": 1567371450,
        "releases": {
            "previous": "a6a4766ca9de9eb189fe488b05a153338264c450",
            "next": "a6a4766ca9de9eb189fe488b05a153338264c450"
        },
        "commit_message": "rename then delete\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a6a4766ca9de9eb189fe488b05a153338264c450": {
                "XsltTransform.java": [
                    "public static void XsltTransform.main(String[] args)"
                ]
            },
            "d25b7eafbf8e83c075fb6e68a6a04775509b240d": {
                "XsltTransform.java": [
                    "public static void XsltTransform.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "be374434dd7ae73bf477afc0ccc5888d1fae1b78",
        "previous_commit": "2da5210a75986fbe7d350ab689c35341d50fc5fe",
        "date": 1496787048,
        "releases": {
            "previous": "be374434dd7ae73bf477afc0ccc5888d1fae1b78",
            "next": "be374434dd7ae73bf477afc0ccc5888d1fae1b78"
        },
        "commit_message": " #443 isAssignableFrom\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "be374434dd7ae73bf477afc0ccc5888d1fae1b78": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/BuilderInstantiatorDefinitionFactory.java": [
                    "private static BuilderInstantiatorDefinition org.simpleflatmapper.reflect.impl.BuilderInstantiatorDefinitionFactory.getDefinitionForBuilder(ExecutableInstantiatorDefinition def, Type builderType, Type target)"
                ]
            },
            "2da5210a75986fbe7d350ab689c35341d50fc5fe": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/impl/BuilderInstantiatorDefinitionFactory.java": [
                    "private static BuilderInstantiatorDefinition org.simpleflatmapper.reflect.impl.BuilderInstantiatorDefinitionFactory.getDefinitionForBuilder(ExecutableInstantiatorDefinition def, Type builderType, Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1c77ef9d34e4107f835e5c70be33f9ce0d1cb8a7",
        "previous_commit": "723436fabe7e8f9371fbdca1326eb3b50fb75687",
        "date": 1456470616,
        "releases": {
            "previous": "1c77ef9d34e4107f835e5c70be33f9ce0d1cb8a7",
            "next": "1c77ef9d34e4107f835e5c70be33f9ce0d1cb8a7"
        },
        "commit_message": " fix unused boolean primitive type and return primitive/object setter if can\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1c77ef9d34e4107f835e5c70be33f9ce0d1cb8a7": {
                "sfm/src/main/java/org/sfm/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <P> Setter<PreparedStatement, P> org.sfm.jdbc.impl.PreparedStatementSetterFactory.getSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ]
            },
            "723436fabe7e8f9371fbdca1326eb3b50fb75687": {
                "sfm/src/main/java/org/sfm/jdbc/impl/PreparedStatementSetterFactory.java": [
                    "public <P> Setter<PreparedStatement, P> org.sfm.jdbc.impl.PreparedStatementSetterFactory.getSetter(PropertyMapping<?, ?, JdbcColumnKey, ? extends ColumnDefinition<JdbcColumnKey, ?>> pm)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c847105c7d867d36fea813f4fdb21055d337a69e",
        "previous_commit": "cb67abfbd2aeaf52bebd85b77529a7ab8709b45d",
        "date": 1542215758,
        "releases": {
            "previous": "c847105c7d867d36fea813f4fdb21055d337a69e",
            "next": "c847105c7d867d36fea813f4fdb21055d337a69e"
        },
        "commit_message": " #579 more general subbuilder optimization\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c847105c7d867d36fea813f4fdb21055d337a69e": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorReflectionService.java": [
                    "public <T> ClassMeta<T> org.simpleflatmapper.map.impl.DiscriminatorReflectionService.getClassMeta(Type target)"
                ]
            },
            "cb67abfbd2aeaf52bebd85b77529a7ab8709b45d": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorReflectionService.java": [
                    "public <T> ClassMeta<T> org.simpleflatmapper.map.impl.DiscriminatorReflectionService.getClassMeta(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6eca7eef6b6d46e06ec704b12a8808df46d0e929",
        "previous_commit": "47e1a855de9eede45c19ebc069140cedb3bb5b1e",
        "date": 1438893060,
        "releases": {
            "previous": "6eca7eef6b6d46e06ec704b12a8808df46d0e929",
            "next": "6eca7eef6b6d46e06ec704b12a8808df46d0e929"
        },
        "commit_message": "#222 UUID/String converter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "6eca7eef6b6d46e06ec704b12a8808df46d0e929": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ]
            },
            "47e1a855de9eede45c19ebc069140cedb3bb5b1e": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableByIndexData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0229239a1c403cd51d42533b58e327fb96a38ebb",
        "previous_commit": "87403817de9c046288ef19fe3cae02a9fd85eb59",
        "date": 1566624017,
        "releases": {
            "previous": "0229239a1c403cd51d42533b58e327fb96a38ebb",
            "next": "0229239a1c403cd51d42533b58e327fb96a38ebb"
        },
        "commit_message": "Allow partial match like column: abc_def_ghi -> prop: abcGhi.defGhi\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0229239a1c403cd51d42533b58e327fb96a38ebb": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "private int org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher._partialMatch(final CharSequence property)"
                ]
            },
            "87403817de9c046288ef19fe3cae02a9fd85eb59": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "private int org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher._partialMatch(final CharSequence property)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "141b30f3473e13ce17a4aff6074cdceae87dafdc",
        "previous_commit": "ada66d6d090d7b96f03b6fb4d52eb31f3eb3def6",
        "date": 1473861070,
        "releases": {
            "previous": "141b30f3473e13ce17a4aff6074cdceae87dafdc",
            "next": "141b30f3473e13ce17a4aff6074cdceae87dafdc"
        },
        "commit_message": " #335  mark UUID as direct meta\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "141b30f3473e13ce17a4aff6074cdceae87dafdc": {
                "sfm/src/main/java/org/sfm/reflect/ReflectionService.java": [
                    "private boolean org.sfm.reflect.ReflectionService.isDirectType(Type target)"
                ]
            },
            "ada66d6d090d7b96f03b6fb4d52eb31f3eb3def6": {
                "sfm/src/main/java/org/sfm/reflect/ReflectionService.java": [
                    "private boolean org.sfm.reflect.ReflectionService.isDirectType(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c98042460966f283a30c2b9adbf85f71bcab826f",
        "previous_commit": "ab712525eb3d00960ce0f97c347e1a4cbc7bc904",
        "date": 1528983383,
        "releases": {
            "previous": "c98042460966f283a30c2b9adbf85f71bcab826f",
            "next": "c98042460966f283a30c2b9adbf85f71bcab826f"
        },
        "commit_message": "#517 add error collecting mapper\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c98042460966f283a30c2b9adbf85f71bcab826f": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/ResultFieldMapperErrorHandler.java": [
                    "public void org.simpleflatmapper.map.ResultFieldMapperErrorHandler<K>.errorMappingField(K key, Object source, Object target, Exception error)"
                ]
            },
            "ab712525eb3d00960ce0f97c347e1a4cbc7bc904": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/ResultFieldMapperErrorHandler.java": [
                    "public void org.simpleflatmapper.map.ResultFieldMapperErrorHandler<K>.errorMappingField(K key, Object source, Object target, Exception error)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "07b98a2ba4d6d928d35082032a18e1d23d72b973",
        "previous_commit": "eabb3d10fe5a8f5e84b9ea1653db743506e1254e",
        "date": 1523458684,
        "releases": {
            "previous": "07b98a2ba4d6d928d35082032a18e1d23d72b973",
            "next": "07b98a2ba4d6d928d35082032a18e1d23d72b973"
        },
        "commit_message": " #508 csv parser work without asm\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "07b98a2ba4d6d928d35082032a18e1d23d72b973": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "protected final AbstractCharConsumer charConsumer(CharBuffer charBuffer)"
                ]
            },
            "eabb3d10fe5a8f5e84b9ea1653db743506e1254e": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvParser.java": [
                    "protected final AbstractCharConsumer charConsumer(CharBuffer charBuffer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d8376baedd1540dd471d3666228f62841c223e95",
        "previous_commit": "f2b50294886dd520d6e681271b4720dc932dcf50",
        "date": 1474027175,
        "releases": {
            "previous": "d8376baedd1540dd471d3666228f62841c223e95",
            "next": "d8376baedd1540dd471d3666228f62841c223e95"
        },
        "commit_message": " #337 add handling of generic array in type helper\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d8376baedd1540dd471d3666228f62841c223e95": {
                "sfm/src/main/java/org/sfm/reflect/TypeHelper.java": [
                    "public static <T> Class<T> org.sfm.reflect.TypeHelper.toClass(Type target)"
                ]
            },
            "f2b50294886dd520d6e681271b4720dc932dcf50": {
                "sfm/src/main/java/org/sfm/reflect/TypeHelper.java": [
                    "public static <T> Class<T> org.sfm.reflect.TypeHelper.toClass(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "990e1a97b2cc49bb8d2f5c34029e53d5ba3632cc",
        "previous_commit": "073b8b0c5facafa59e6c7b7b6168e5cd61097b9c",
        "date": 1573390836,
        "releases": {
            "previous": "990e1a97b2cc49bb8d2f5c34029e53d5ba3632cc",
            "next": "990e1a97b2cc49bb8d2f5c34029e53d5ba3632cc"
        },
        "commit_message": "#479 disable speculative object by default add property to enable\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "990e1a97b2cc49bb8d2f5c34029e53d5ba3632cc": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties,\t\t\t\t\t\t\t\t FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer,\t\t\t\t\t\t\t\t PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)"
                ]
            },
            "073b8b0c5facafa59e6c7b7b6168e5cd61097b9c": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.lookForProperties(final PropertyNameMatcher propertyNameMatcher,\t\t\t\t\t\t\t\t Object[] properties,\t\t\t\t\t\t\t\t FoundProperty<T> matchingProperties,\t\t\t\t\t\t\t\t PropertyMatchingScore score,\t\t\t\t\t\t\t\t boolean allowSelfReference,\t\t\t\t\t\t\t\t PropertyFinderTransformer propertyFinderTransform,\t\t\t\t\t\t\t\t TypeAffinityScorer typeAffinityScorer,\t\t\t\t\t\t\t\t PropertyFilter propertyFilter, ShortCircuiter shortCircuiter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "efc316c6cf59f470f9f27c74b01ba1ebbb53a1d9",
        "previous_commit": "44674c1038a88fe459ea9ff85f6f67b90959f57e",
        "date": 1538992893,
        "releases": {
            "previous": "efc316c6cf59f470f9f27c74b01ba1ebbb53a1d9",
            "next": "efc316c6cf59f470f9f27c74b01ba1ebbb53a1d9"
        },
        "commit_message": " #558 some preparation for the better discriminator, with some clean up of generic builder\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "efc316c6cf59f470f9f27c74b01ba1ebbb53a1d9": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/GenericBuilder.java": []
            },
            "44674c1038a88fe459ea9ff85f6f67b90959f57e": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/getter/DatastaxUDTGetter.java": [
                    "public static <P> ConstantSourceMapperBuilder<GettableByIndexData, P, DatastaxColumnKey> org.simpleflatmapper.datastax.impl.getter.DatastaxUDTGetter<T>.newFieldMapperBuilder(DatastaxMapperFactory factory, Type target)"
                ],
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/GenericBuilder.java": [
                    "public T org.simpleflatmapper.map.impl.GenericBuilder<T>.build()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "493af688c31cb3f5ac7ac55e83319baf8bc0ea95",
        "previous_commit": "9449927398f113692510083ba6101c343b32c135",
        "date": 1522745751,
        "releases": {
            "previous": "493af688c31cb3f5ac7ac55e83319baf8bc0ea95",
            "next": "493af688c31cb3f5ac7ac55e83319baf8bc0ea95"
        },
        "commit_message": "align reads\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "493af688c31cb3f5ac7ac55e83319baf8bc0ea95": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/ReaderCharBuffer.java": [
                    "public final boolean org.simpleflatmapper.csv.parser.ReaderCharBuffer.next()"
                ]
            },
            "9449927398f113692510083ba6101c343b32c135": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/ReaderCharBuffer.java": [
                    "public final boolean org.simpleflatmapper.csv.parser.ReaderCharBuffer.next()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e715e5f2d32398cde8c64e75495c112d964809d5",
        "previous_commit": "554e1dfaa78ae59f60cfb0324264be4112ba7186",
        "date": 1471120305,
        "releases": {
            "previous": "e715e5f2d32398cde8c64e75495c112d964809d5",
            "next": "e715e5f2d32398cde8c64e75495c112d964809d5"
        },
        "commit_message": "fix sig parsing\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e715e5f2d32398cde8c64e75495c112d964809d5": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static Type org.simpleflatmapper.reflect.asm.AsmUtils.toGenericType(String sig, List<String> genericTypeNames, Type target)"
                ]
            },
            "554e1dfaa78ae59f60cfb0324264be4112ba7186": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static Type org.simpleflatmapper.reflect.asm.AsmUtils.toGenericType(String sig, List<String> genericTypeNames, Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "60369521ff6777a4600f1e171fd9c60244101307",
        "previous_commit": "200d6616fa45270d1b204be653256c4648cbdcc6",
        "date": 1489838736,
        "releases": {
            "previous": "60369521ff6777a4600f1e171fd9c60244101307",
            "next": "60369521ff6777a4600f1e171fd9c60244101307"
        },
        "commit_message": " #428 fix version check\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "60369521ff6777a4600f1e171fd9c60244101307": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/DatabaseMeta.java": [
                    "public boolean org.simpleflatmapper.jdbc.impl.DatabaseMeta.isVersionMet(int major, int minor)"
                ]
            },
            "200d6616fa45270d1b204be653256c4648cbdcc6": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/DatabaseMeta.java": [
                    "public boolean org.simpleflatmapper.jdbc.impl.DatabaseMeta.isVersionMet(int major, int minor)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "995380dead8772cc8251ad7e9bdfd9cdf7f8f256",
        "previous_commit": "68622210ce7369a55b33997c810742e463968492",
        "date": 1573470421,
        "releases": {
            "previous": "995380dead8772cc8251ad7e9bdfd9cdf7f8f256",
            "next": "995380dead8772cc8251ad7e9bdfd9cdf7f8f256"
        },
        "commit_message": "fix java9\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "995380dead8772cc8251ad7e9bdfd9cdf7f8f256": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordUnmapperProvider.java": [
                    "public <E, R extends Record> RecordUnmapper<E, R> org.simpleflatmapper.jooq.SfmRecordUnmapperProvider.provide(Class<? extends E> type, RecordType<R> recordType)"
                ]
            },
            "68622210ce7369a55b33997c810742e463968492": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordUnmapperProvider.java": [
                    "public <E, R extends Record> RecordUnmapper<E, R> org.simpleflatmapper.jooq.SfmRecordUnmapperProvider.provide(Class<? extends E> type, RecordType<R> recordType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bc02863d9b9164c6b16f84977f84917d8d15b4bc",
        "previous_commit": "8c5639beb1decb3e76a2b5f9164a7d3e23ed1119",
        "date": 1481028168,
        "releases": {
            "previous": "bc02863d9b9164c6b16f84977f84917d8d15b4bc",
            "next": "bc02863d9b9164c6b16f84977f84917d8d15b4bc"
        },
        "commit_message": "fix build\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bc02863d9b9164c6b16f84977f84917d8d15b4bc": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/YamlCellPreProcessor.java": [
                    "public void org.simpleflatmapper.csv.parser.YamlCellPreProcessor.end()"
                ]
            },
            "8c5639beb1decb3e76a2b5f9164a7d3e23ed1119": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/YamlCellPreProcessor.java": [
                    "public void org.simpleflatmapper.csv.parser.YamlCellPreProcessor.end()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9f30d0daf1c523c04c8c62b91967f34ecfd4fb97",
        "previous_commit": "6852e423affaa875ea2d418d91586c3363e8764b",
        "date": 1537634897,
        "releases": {
            "previous": "9f30d0daf1c523c04c8c62b91967f34ecfd4fb97",
            "next": "9f30d0daf1c523c04c8c62b91967f34ecfd4fb97"
        },
        "commit_message": "fix #552\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9f30d0daf1c523c04c8c62b91967f34ecfd4fb97": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, Object... params)"
                ]
            },
            "6852e423affaa875ea2d418d91586c3363e8764b": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, Object... params)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "18d5c2b1622eaedf79e5b6f45f9c738330d76dc4",
        "previous_commit": "0229239a1c403cd51d42533b58e327fb96a38ebb",
        "date": 1566907306,
        "releases": {
            "previous": "18d5c2b1622eaedf79e5b6f45f9c738330d76dc4",
            "next": "18d5c2b1622eaedf79e5b6f45f9c738330d76dc4"
        },
        "commit_message": "clean skip ignorable character, and add test for PR #678\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "18d5c2b1622eaedf79e5b6f45f9c738330d76dc4": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "private int org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher._partialMatch(final CharSequence property)"
                ]
            },
            "0229239a1c403cd51d42533b58e327fb96a38ebb": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "private int org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher._partialMatch(final CharSequence property)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e9e19221f77d90ae22f2e33b338af223caec6634",
        "previous_commit": "be11b11b264d3fa5370898543c8b4e1340b3b32d",
        "date": 1510612066,
        "releases": {
            "previous": "e9e19221f77d90ae22f2e33b338af223caec6634",
            "next": "e9e19221f77d90ae22f2e33b338af223caec6634"
        },
        "commit_message": " #459 fix unescaping, add test with different escape char\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e9e19221f77d90ae22f2e33b338af223caec6634": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, int start, int end, CellConsumer cellConsumer)"
                ]
            },
            "be11b11b264d3fa5370898543c8b4e1340b3b32d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, int start, int end, CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0e453501034a97bf6c7dca4429a3a32796bc13fb",
        "previous_commit": "667fb81a7737c5d285019b6240d97eabb37005d6",
        "date": 1568387344,
        "releases": {
            "previous": "0e453501034a97bf6c7dca4429a3a32796bc13fb",
            "next": "0e453501034a97bf6c7dca4429a3a32796bc13fb"
        },
        "commit_message": "use direct index to avoid speculative\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0e453501034a97bf6c7dca4429a3a32796bc13fb": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/TupleValueSettableDataSetter.java": [
                    "public static <T extends Tuple2<?, ?>> FieldMapper<T, SettableByIndexData> org.simpleflatmapper.datastax.impl.setter.TupleValueSettableDataSetter.newTupleMapper(Type target, TupleType tt, MapperConfig<DatastaxColumnKey, ?> config, ReflectionService reflectionService)"
                ]
            },
            "667fb81a7737c5d285019b6240d97eabb37005d6": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/setter/TupleValueSettableDataSetter.java": [
                    "public static <T extends Tuple2<?, ?>> FieldMapper<T, SettableByIndexData> org.simpleflatmapper.datastax.impl.setter.TupleValueSettableDataSetter.newTupleMapper(Type target, TupleType tt, MapperConfig<DatastaxColumnKey, ?> config, ReflectionService reflectionService)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2e4717e5dbd712ce36e0ddd74a24fc1505b6db55",
        "previous_commit": "06c613a9cd609fe6920b9c813000b5a0fa2a7200",
        "date": 1573314658,
        "releases": {
            "previous": "2e4717e5dbd712ce36e0ddd74a24fc1505b6db55",
            "next": "2e4717e5dbd712ce36e0ddd74a24fc1505b6db55"
        },
        "commit_message": "#691 potato potatoes\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2e4717e5dbd712ce36e0ddd74a24fc1505b6db55": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "private int org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.isPlural(CharSequence property, int indexProperty, CharSequence column, int fromColumn, int indexColumn)"
                ]
            },
            "06c613a9cd609fe6920b9c813000b5a0fa2a7200": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "private int org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher.isPlural(CharSequence property, int indexProperty, CharSequence column, int fromColumn, int indexColumn)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "926f6da1a727d27285c7161c12a1c48978fdbbe9",
        "previous_commit": "5e6dd741f38cd7588a7d58344df4806db9d31e73",
        "date": 1519148670,
        "releases": {
            "previous": "926f6da1a727d27285c7161c12a1c48978fdbbe9",
            "next": "926f6da1a727d27285c7161c12a1c48978fdbbe9"
        },
        "commit_message": "fix #490\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "926f6da1a727d27285c7161c12a1c48978fdbbe9": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/setter/SetterHelper.java": [
                    "public static String org.simpleflatmapper.reflect.setter.SetterHelper.getPropertyNameFromBuilderMethodName(final String name)"
                ]
            },
            "5e6dd741f38cd7588a7d58344df4806db9d31e73": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/setter/SetterHelper.java": [
                    "public static String org.simpleflatmapper.reflect.setter.SetterHelper.getPropertyNameFromBuilderMethodName(final String name)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ad2fc2d42cdac43847140086f2cdc4f2c73c1b79",
        "previous_commit": "9bff0b7509bea751332fcbe7f3903a0bd201b186",
        "date": 1548255032,
        "releases": {
            "previous": "ad2fc2d42cdac43847140086f2cdc4f2c73c1b79",
            "next": "ad2fc2d42cdac43847140086f2cdc4f2c73c1b79"
        },
        "commit_message": " fix  #605\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ad2fc2d42cdac43847140086f2cdc4f2c73c1b79": {
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/SheetMapperBuilder.java": [
                    "public RowMapper<T> org.simpleflatmapper.poi.SheetMapperBuilder<T>.newUnorderedJoinMapper(ContextualSourceFieldMapper<Row, T> mapper, ConsumerErrorHandler consumerErrorHandler, MappingContextFactory<? super Row> mappingContextFactory, UnaryFactory<Sheet, Enumerable<Row>> enumerableFactory)"
                ]
            },
            "9bff0b7509bea751332fcbe7f3903a0bd201b186": {
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/SheetMapperBuilder.java": [
                    "public RowMapper<T> org.simpleflatmapper.poi.SheetMapperBuilder<T>.newUnorderedJoinMapper(ContextualSourceFieldMapper<Row, T> mapper, ConsumerErrorHandler consumerErrorHandler, MappingContextFactory<? super Row> mappingContextFactory, UnaryFactory<Sheet, Enumerable<Row>> enumerableFactory)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d25b7eafbf8e83c075fb6e68a6a04775509b240d",
        "previous_commit": "b5c2d40a5e22fb33b8014c67a58820106198face",
        "date": 1567371310,
        "releases": {
            "previous": "d25b7eafbf8e83c075fb6e68a6a04775509b240d",
            "next": "d25b7eafbf8e83c075fb6e68a6a04775509b240d"
        },
        "commit_message": "transform rename\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d25b7eafbf8e83c075fb6e68a6a04775509b240d": {
                "XsltTransform.java": [
                    "public static void XsltTransform.main(String[] args)"
                ]
            },
            "b5c2d40a5e22fb33b8014c67a58820106198face": {
                "XsltTransform.java": [
                    "public static void XsltTransform.main(String[] args)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2188942526d6c20498c7d712797405b5e25de378",
        "previous_commit": "d4d51bc2a7cf474791298952ed994fd46cc9fb3c",
        "date": 1471385528,
        "releases": {
            "previous": "2188942526d6c20498c7d712797405b5e25de378",
            "next": "2188942526d6c20498c7d712797405b5e25de378"
        },
        "commit_message": "fix java7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2188942526d6c20498c7d712797405b5e25de378": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static <T> Class<T> org.simpleflatmapper.util.TypeHelper.toClass(Type target)"
                ]
            },
            "d4d51bc2a7cf474791298952ed994fd46cc9fb3c": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static <T> Class<T> org.simpleflatmapper.util.TypeHelper.toClass(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "739191110f66b68af3e6323a5dedb447901bed2b",
        "previous_commit": "a4b3c12a674fca2a1932cc066f8770a04498c19b",
        "date": 1522603819,
        "releases": {
            "previous": "739191110f66b68af3e6323a5dedb447901bed2b",
            "next": "739191110f66b68af3e6323a5dedb447901bed2b"
        },
        "commit_message": " fix #501 NPE\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "739191110f66b68af3e6323a5dedb447901bed2b": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static Class<?> org.simpleflatmapper.util.TypeHelper.toBoxedClass(Class<?> target)"
                ]
            },
            "a4b3c12a674fca2a1932cc066f8770a04498c19b": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static Class<?> org.simpleflatmapper.util.TypeHelper.toBoxedClass(Class<?> target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2313d65bae268f8cc5104ab33fc1495067c58c54",
        "previous_commit": "812027d1849a8f42ea058e0c332aad70a4a76b70",
        "date": 1512736869,
        "releases": {
            "previous": "2313d65bae268f8cc5104ab33fc1495067c58c54",
            "next": "2313d65bae268f8cc5104ab33fc1495067c58c54"
        },
        "commit_message": " #477 change the default key predicate to allow sub property if not in array\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2313d65bae268f8cc5104ab33fc1495067c58c54": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/KeyProperty.java": [
                    "public boolean org.simpleflatmapper.map.property.KeyProperty.test(PropertyMeta<?, ?> propertyMeta)"
                ]
            },
            "812027d1849a8f42ea058e0c332aad70a4a76b70": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/property/KeyProperty.java": [
                    "public boolean org.simpleflatmapper.map.property.KeyProperty.test(PropertyMeta<?, ?> propertyMeta)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "0678db7cc874a5ed959d8382d6c8fca36ed4eec7",
        "previous_commit": "4da5ea89baab47d77d54ebe723201e666e9e761a",
        "date": 1471291973,
        "releases": {
            "previous": "0678db7cc874a5ed959d8382d6c8fca36ed4eec7",
            "next": "0678db7cc874a5ed959d8382d6c8fca36ed4eec7"
        },
        "commit_message": "add parameter detector test\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "0678db7cc874a5ed959d8382d6c8fca36ed4eec7": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static boolean org.simpleflatmapper.util.TypeHelper.isJavaLang(Type target)"
                ]
            },
            "4da5ea89baab47d77d54ebe723201e666e9e761a": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/TypeHelper.java": [
                    "public static boolean org.simpleflatmapper.util.TypeHelper.isJavaLang(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9b7d9fa37d4dd870a049400b3c64bb160e6c967a",
        "previous_commit": "b82e130e13c4cda4665f4239026ca4e121b319f6",
        "date": 1467823641,
        "releases": {
            "previous": "9b7d9fa37d4dd870a049400b3c64bb160e6c967a",
            "next": "9b7d9fa37d4dd870a049400b3c64bb160e6c967a"
        },
        "commit_message": "Parallel reader play about\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9b7d9fa37d4dd870a049400b3c64bb160e6c967a": {
                "sfm/src/main/java/org/sfm/utils/ParallelReader.java": [
                    "private int org.sfm.utils.ParallelReader.read(long ltail, long lhead)"
                ]
            },
            "b82e130e13c4cda4665f4239026ca4e121b319f6": {
                "sfm/src/main/java/org/sfm/utils/ParallelReader.java": [
                    "private int org.sfm.utils.ParallelReader.read(long ltail, long lhead)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "14a3c7c87c871975d239449dd4005120b9101b15",
        "previous_commit": "60776d9d20faedc1e7ebd1a6a37e739c3b5a355c",
        "date": 1522235129,
        "releases": {
            "previous": "14a3c7c87c871975d239449dd4005120b9101b15",
            "next": "14a3c7c87c871975d239449dd4005120b9101b15"
        },
        "commit_message": "fix #498\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "14a3c7c87c871975d239449dd4005120b9101b15": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/BigIntegerResultSetGetter.java": [
                    "public BigInteger org.simpleflatmapper.jdbc.impl.getter.BigIntegerResultSetGetter.get(final ResultSet target)"
                ]
            },
            "60776d9d20faedc1e7ebd1a6a37e739c3b5a355c": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/BigIntegerResultSetGetter.java": [
                    "public BigInteger org.simpleflatmapper.jdbc.impl.getter.BigIntegerResultSetGetter.get(final ResultSet target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "66b092665d8618a3997fc1453f8aa7cf42e4646a",
        "previous_commit": "445c0e1a2270bad944bfb2136ac787ff2f8a4a5d",
        "date": 1568381513,
        "releases": {
            "previous": "66b092665d8618a3997fc1453f8aa7cf42e4646a",
            "next": "66b092665d8618a3997fc1453f8aa7cf42e4646a"
        },
        "commit_message": " #668 support overide of array starting index\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "66b092665d8618a3997fc1453f8aa7cf42e4646a": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ]
            },
            "445c0e1a2270bad944bfb2136ac787ff2f8a4a5d": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/AbstractIndexPropertyFinder.java": [
                    "public void org.simpleflatmapper.reflect.meta.AbstractIndexPropertyFinder<T>.lookForProperties( PropertyNameMatcher propertyNameMatcher, Object[] properties, FoundProperty<T> matchingProperties, PropertyMatchingScore score, boolean allowSelfReference, PropertyFinderTransformer propertyFinderTransformer, TypeAffinityScorer typeAffinityScorer, PropertyFilter propertyFilter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "eef18f543e31c91f8745026c80f181ab0a79b8fa",
        "previous_commit": "4d3cf03994ff934e579439f6acce0a8c0982500b",
        "date": 1542284321,
        "releases": {
            "previous": "eef18f543e31c91f8745026c80f181ab0a79b8fa",
            "next": "eef18f543e31c91f8745026c80f181ab0a79b8fa"
        },
        "commit_message": "some codacy clean up\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "eef18f543e31c91f8745026c80f181ab0a79b8fa": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/converter/DatastaxConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.datastax.impl.converter.DatastaxConverterFactoryProducer.produce(Consumer<? super ContextualConverterFactory<?, ?>> consumer)"
                ]
            },
            "4d3cf03994ff934e579439f6acce0a8c0982500b": {
                "sfm-datastax/src/main/java/org/simpleflatmapper/datastax/impl/converter/DatastaxConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.datastax.impl.converter.DatastaxConverterFactoryProducer.produce(Consumer<? super ContextualConverterFactory<?, ?>> consumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "82da01ea12cb52cb01b19819a0fa30343d14e878",
        "previous_commit": "186e9cd0c9eb0dbd5cff82900c008d12cc63e6fc",
        "date": 1526462956,
        "releases": {
            "previous": "82da01ea12cb52cb01b19819a0fa30343d14e878",
            "next": "82da01ea12cb52cb01b19819a0fa30343d14e878"
        },
        "commit_message": "protect against IAE\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "82da01ea12cb52cb01b19819a0fa30343d14e878": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "public List<InstantiatorDefinition> org.simpleflatmapper.reflect.ReflectionService.extractInstantiator(Type target, Member extraInstantiator)"
                ]
            },
            "186e9cd0c9eb0dbd5cff82900c008d12cc63e6fc": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/ReflectionService.java": [
                    "public List<InstantiatorDefinition> org.simpleflatmapper.reflect.ReflectionService.extractInstantiator(Type target, Member extraInstantiator)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "372e1b41acaafa0b46b09e181f0c6815d18423f7",
        "previous_commit": "2dcc4e23a31ebac25212b5cc9c1ef72a825be9d2",
        "date": 1438637554,
        "releases": {
            "previous": "372e1b41acaafa0b46b09e181f0c6815d18423f7",
            "next": "372e1b41acaafa0b46b09e181f0c6815d18423f7"
        },
        "commit_message": "#196 add set support\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-benchmark",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "372e1b41acaafa0b46b09e181f0c6815d18423f7": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ]
            },
            "2dcc4e23a31ebac25212b5cc9c1ef72a825be9d2": {
                "sfm-datastax/src/main/java/org/sfm/datastax/impl/RowGetterFactory.java": [
                    "public <P> Getter<GettableData, P> org.sfm.datastax.impl.RowGetterFactory.newGetter(Type target, DatastaxColumnKey key, ColumnDefinition<?, ?> columnDefinition)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cd35140c97c6e2c024f19ccf07c9028c2caffcd3",
        "previous_commit": "929f243c5f3c3e58a77bc476c3ba3420430e5c5b",
        "date": 1514451849,
        "releases": {
            "previous": "cd35140c97c6e2c024f19ccf07c9028c2caffcd3",
            "next": "cd35140c97c6e2c024f19ccf07c9028c2caffcd3"
        },
        "commit_message": " fix #480\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "cd35140c97c6e2c024f19ccf07c9028c2caffcd3": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, Object... params)"
                ]
            },
            "929f243c5f3c3e58a77bc476c3ba3420430e5c5b": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, Object... params)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b8f4a03ff0f27b2060c23d32cbda2ef4d39ce827",
        "previous_commit": "62d327bcd84abd3320a7f1d7eaefea1067df5dd0",
        "date": 1572419478,
        "releases": {
            "previous": "b8f4a03ff0f27b2060c23d32cbda2ef4d39ce827",
            "next": "b8f4a03ff0f27b2060c23d32cbda2ef4d39ce827"
        },
        "commit_message": "add test to cover all primitives\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b8f4a03ff0f27b2060c23d32cbda2ef4d39ce827": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayCharacterResultSetGetter.java": [
                    "public char[] org.simpleflatmapper.jdbc.impl.getter.ArrayCharacterResultSetGetter.get(ResultSet target)"
                ]
            },
            "62d327bcd84abd3320a7f1d7eaefea1067df5dd0": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/getter/ArrayCharacterResultSetGetter.java": [
                    "public char[] org.simpleflatmapper.jdbc.impl.getter.ArrayCharacterResultSetGetter.get(ResultSet target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9ead99d51c206164f769fb886655a11d1ad62342",
        "previous_commit": "b3f9abc36363447476105f56a1eaadeed5ad1b59",
        "date": 1470176619,
        "releases": {
            "previous": "9ead99d51c206164f769fb886655a11d1ad62342",
            "next": "9ead99d51c206164f769fb886655a11d1ad62342"
        },
        "commit_message": "big package rename\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9ead99d51c206164f769fb886655a11d1ad62342": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/asm/CsvMapperCellHandlerBuilder.java": [
                    "private static <T> void org.simpleflatmapper.csv.impl.asm.CsvMapperCellHandlerBuilder.append_cellValue(final DelayedCellSetterFactory<T, ?>[] delayedCellSetters, final CellSetter<T>[] setters, ClassWriter cw, final String classType, final int maxMethodSize)"
                ]
            },
            "b3f9abc36363447476105f56a1eaadeed5ad1b59": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/asm/CsvMapperCellHandlerBuilder.java": [
                    "private static <T> void org.simpleflatmapper.csv.impl.asm.CsvMapperCellHandlerBuilder.append_cellValue(final DelayedCellSetterFactory<T, ?>[] delayedCellSetters, final CellSetter<T>[] setters, ClassWriter cw, final String classType, final int maxMethodSize)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cf230c9649f6ab48a657aaf97240603e75324d1d",
        "previous_commit": "f2b50294886dd520d6e681271b4720dc932dcf50",
        "date": 1474091847,
        "releases": {
            "previous": "cf230c9649f6ab48a657aaf97240603e75324d1d",
            "next": "cf230c9649f6ab48a657aaf97240603e75324d1d"
        },
        "commit_message": " #337 add handling of generic array in type helper\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "cf230c9649f6ab48a657aaf97240603e75324d1d": {
                "sfm/src/main/java/org/sfm/reflect/TypeHelper.java": [
                    "public static <T> Class<T> org.sfm.reflect.TypeHelper.toClass(Type target)"
                ]
            },
            "f2b50294886dd520d6e681271b4720dc932dcf50": {
                "sfm/src/main/java/org/sfm/reflect/TypeHelper.java": [
                    "public static <T> Class<T> org.sfm.reflect.TypeHelper.toClass(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6ed51734fa4ffd76505efcbd6561f644debd9541",
        "previous_commit": "6eca7eef6b6d46e06ec704b12a8808df46d0e929",
        "date": 1438893347,
        "releases": {
            "previous": "6ed51734fa4ffd76505efcbd6561f644debd9541",
            "next": "6ed51734fa4ffd76505efcbd6561f644debd9541"
        },
        "commit_message": "#221 rename ListHandler, add Set and immutable Collectors\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-benchmark",
            "benchmark_name": "unknown.jar"
        },
        "method_changes": {
            "6ed51734fa4ffd76505efcbd6561f644debd9541": {
                "sfm-springjdbc/src/main/java/org/sfm/jdbc/spring/JdbcTemplateMapper.java": [
                    "public List<T> org.sfm.jdbc.spring.JdbcTemplateMapper<T>.extractData(ResultSet rs)"
                ]
            },
            "6eca7eef6b6d46e06ec704b12a8808df46d0e929": {
                "sfm-springjdbc/src/main/java/org/sfm/jdbc/spring/JdbcTemplateMapper.java": [
                    "public List<T> org.sfm.jdbc.spring.JdbcTemplateMapper<T>.extractData(ResultSet rs)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "08c8c2dc9128ec987f7170cc44913a5b041842de",
        "previous_commit": "e6ada4dfd612641f448261ba666ddd3d2696e517",
        "date": 1486486492,
        "releases": {
            "previous": "08c8c2dc9128ec987f7170cc44913a5b041842de",
            "next": "08c8c2dc9128ec987f7170cc44913a5b041842de"
        },
        "commit_message": "handle nulls\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "08c8c2dc9128ec987f7170cc44913a5b041842de": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static Type org.simpleflatmapper.reflect.asm.AsmUtils.toGenericType(String sig, List<String> genericTypeNames, Type target)"
                ]
            },
            "e6ada4dfd612641f448261ba666ddd3d2696e517": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static Type org.simpleflatmapper.reflect.asm.AsmUtils.toGenericType(String sig, List<String> genericTypeNames, Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bc0d24021f2ce42204aec3183dc86760778df99d",
        "previous_commit": "e23857865b6e54974234566acaa51460818e1b9c",
        "date": 1487964658,
        "releases": {
            "previous": "bc0d24021f2ce42204aec3183dc86760778df99d",
            "next": "bc0d24021f2ce42204aec3183dc86760778df99d"
        },
        "commit_message": "  #413 add custom linear probing map\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bc0d24021f2ce42204aec3183dc86760778df99d": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetectorMappingContext.java": [
                    "public void org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.setCurrentValue(int i, Object value)"
                ]
            },
            "e23857865b6e54974234566acaa51460818e1b9c": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/context/impl/BreakDetectorMappingContext.java": [
                    "public void org.simpleflatmapper.map.context.impl.BreakDetectorMappingContext<S>.setCurrentValue(int i, Object value)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "3e8e2b01c698d599c6c0ba264bfa9fcfbc5914d0",
        "previous_commit": "8e27336563f93849011cb08108b133ec703c5be4",
        "date": 1469951147,
        "releases": {
            "previous": "3e8e2b01c698d599c6c0ba264bfa9fcfbc5914d0",
            "next": "3e8e2b01c698d599c6c0ba264bfa9fcfbc5914d0"
        },
        "commit_message": " #330 java6\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "3e8e2b01c698d599c6c0ba264bfa9fcfbc5914d0": {
                "sfm/src/main/java/org/sfm/map/column/joda/JodaHelper.java": [
                    "public static DateTimeFormatter[] org.sfm.map.column.joda.JodaHelper.getDateTimeFormatters(ColumnDefinition<?, ?> columnDefinition)"
                ]
            },
            "8e27336563f93849011cb08108b133ec703c5be4": {
                "sfm/src/main/java/org/sfm/map/column/joda/JodaHelper.java": [
                    "public static DateTimeFormatter[] org.sfm.map.column.joda.JodaHelper.getDateTimeFormatters(ColumnDefinition<?, ?> columnDefinition)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2d3d9098f3d71a354c5bcf2521fecfa993b160ac",
        "previous_commit": "ac1d7cd76b053eec2746af930a10b87309769df3",
        "date": 1543851685,
        "releases": {
            "previous": "2d3d9098f3d71a354c5bcf2521fecfa993b160ac",
            "next": "2d3d9098f3d71a354c5bcf2521fecfa993b160ac"
        },
        "commit_message": " use try finally for state save\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2d3d9098f3d71a354c5bcf2521fecfa993b160ac": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)"
                ]
            },
            "ac1d7cd76b053eec2746af930a10b87309769df3": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/parser/ConfigurableCharConsumer.java": [
                    "public final void org.simpleflatmapper.lightningcsv.parser.ConfigurableCharConsumer.consumeAllBuffer(final CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e6ada4dfd612641f448261ba666ddd3d2696e517",
        "previous_commit": "3454e5e474d7c77217d69a90af27ee5905afe685",
        "date": 1486485820,
        "releases": {
            "previous": "e6ada4dfd612641f448261ba666ddd3d2696e517",
            "next": "e6ada4dfd612641f448261ba666ddd3d2696e517"
        },
        "commit_message": " #403 use target class loader to instantiate class\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e6ada4dfd612641f448261ba666ddd3d2696e517": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static Type org.simpleflatmapper.reflect.asm.AsmUtils.toGenericType(String sig, List<String> genericTypeNames, Type target)"
                ]
            },
            "3454e5e474d7c77217d69a90af27ee5905afe685": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/asm/AsmUtils.java": [
                    "public static Type org.simpleflatmapper.reflect.asm.AsmUtils.toGenericType(String sig, List<String> genericTypeNames, Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9092451e5b1462bc689b88fdbf24b1715466b102",
        "previous_commit": "273b0f94227c78bc9095bffda1f22e8ead9ec5b4",
        "date": 1522420716,
        "releases": {
            "previous": "9092451e5b1462bc689b88fdbf24b1715466b102",
            "next": "9092451e5b1462bc689b88fdbf24b1715466b102"
        },
        "commit_message": "inline\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9092451e5b1462bc689b88fdbf24b1715466b102": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public void org.simpleflatmapper.util.RingBufferReader.run()"
                ]
            },
            "273b0f94227c78bc9095bffda1f22e8ead9ec5b4": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ParallelReader.java": [
                    "public void org.simpleflatmapper.util.RingBufferReader.run()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "a372f17ef1c8bf8bdc0c0c62659947a6c808f265",
        "previous_commit": "ca08e70b224782a11064322cdc772a35db707fb3",
        "date": 1573473859,
        "releases": {
            "previous": "a372f17ef1c8bf8bdc0c0c62659947a6c808f265",
            "next": "a372f17ef1c8bf8bdc0c0c62659947a6c808f265"
        },
        "commit_message": " #551 use standard field mapper factory\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "a372f17ef1c8bf8bdc0c0c62659947a6c808f265": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordUnmapperProvider.java": [
                    "public <E, R extends Record> RecordUnmapper<E, R> org.simpleflatmapper.jooq.SfmRecordUnmapperProvider.provide(Class<? extends E> type, RecordType<R> recordType)"
                ]
            },
            "ca08e70b224782a11064322cdc772a35db707fb3": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SfmRecordUnmapperProvider.java": [
                    "public <E, R extends Record> RecordUnmapper<E, R> org.simpleflatmapper.jooq.SfmRecordUnmapperProvider.provide(Class<? extends E> type, RecordType<R> recordType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "4cf83f8cc1992efd728ba21120a601fb2c5f0906",
        "previous_commit": "5f5275ce7a2f91faa3f29eb1074abb5bf38dbe0f",
        "date": 1549920515,
        "releases": {
            "previous": "4cf83f8cc1992efd728ba21120a601fb2c5f0906",
            "next": "4cf83f8cc1992efd728ba21120a601fb2c5f0906"
        },
        "commit_message": " #608 allow to provide your jdbc mapper factory\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "4cf83f8cc1992efd728ba21120a601fb2c5f0906": {
                "sfm-sql2o/src/main/java/org/simpleflatmapper/sql2o/SfmResultSetHandlerFactoryBuilder.java": [
                    "public <E> ResultSetHandlerFactory<E> org.simpleflatmapper.sql2o.SfmResultSetHandlerFactoryBuilder.newFactory(Class<E> aClass)"
                ]
            },
            "5f5275ce7a2f91faa3f29eb1074abb5bf38dbe0f": {
                "sfm-sql2o/src/main/java/org/simpleflatmapper/sql2o/SfmResultSetHandlerFactoryBuilder.java": [
                    "public <E> ResultSetHandlerFactory<E> org.simpleflatmapper.sql2o.SfmResultSetHandlerFactoryBuilder.newFactory(Class<E> aClass)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f8190b090f1d2b4e88c8d367a19b978f7e190aae",
        "previous_commit": "f5a132f47d663495d76fcde9b0254120feaab19c",
        "date": 1471117514,
        "releases": {
            "previous": "f8190b090f1d2b4e88c8d367a19b978f7e190aae",
            "next": "f8190b090f1d2b4e88c8d367a19b978f7e190aae"
        },
        "commit_message": "reverse conveter order\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f8190b090f1d2b4e88c8d367a19b978f7e190aae": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/DateMultiFormatCellValueReader.java": [
                    "public Date org.simpleflatmapper.csv.impl.cellreader.DateMultiFormatCellValueReader.read(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ]
            },
            "f5a132f47d663495d76fcde9b0254120feaab19c": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/cellreader/DateMultiFormatCellValueReader.java": [
                    "public Date org.simpleflatmapper.csv.impl.cellreader.DateMultiFormatCellValueReader.read(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "adf2ceb5252be06f2b4dbe25b1cd332b65f7f49e",
        "previous_commit": "cc068e1a2dc10afe28d704a93c821621ed1583c8",
        "date": 1535661463,
        "releases": {
            "previous": "adf2ceb5252be06f2b4dbe25b1cd332b65f7f49e",
            "next": "adf2ceb5252be06f2b4dbe25b1cd332b65f7f49e"
        },
        "commit_message": "fix proto issues, and converter lookup issues\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "adf2ceb5252be06f2b4dbe25b1cd332b65f7f49e": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public List<ScoredConverterFactory> org.simpleflatmapper.converter.ConverterService.findConverterFactories(Type inType, Type outType, Object... params)"
                ]
            },
            "cc068e1a2dc10afe28d704a93c821621ed1583c8": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public List<ScoredConverterFactory> org.simpleflatmapper.converter.ConverterService.findConverterFactories(Type inType, Type outType, Object... params)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d0397b1f3ee3762cd0e50cf8bac2cc9d4e15ade2",
        "previous_commit": "b64fc34917bad69e44e965a4b79112bb9d7885ff",
        "date": 1561470669,
        "releases": {
            "previous": "d0397b1f3ee3762cd0e50cf8bac2cc9d4e15ade2",
            "next": "d0397b1f3ee3762cd0e50cf8bac2cc9d4e15ade2"
        },
        "commit_message": " #665 disable speculative array index resolution by default, #664 only return non mapped key on eligible - ie key and infer null - prop\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d0397b1f3ee3762cd0e50cf8bac2cc9d4e15ade2": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/SelectQueryWhereFactory.java": [
                    "private <P> SelectQueryImpl<T, P> org.simpleflatmapper.jdbc.impl.SelectQueryWhereFactory<T>.newSelectQuery(String whereClause, Type paramClass)"
                ]
            },
            "b64fc34917bad69e44e965a4b79112bb9d7885ff": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/SelectQueryWhereFactory.java": [
                    "private <P> SelectQueryImpl<T, P> org.simpleflatmapper.jdbc.impl.SelectQueryWhereFactory<T>.newSelectQuery(String whereClause, Type paramClass)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d16172d3af3931dc7bb93cfcdf533998c1f81913",
        "previous_commit": "110aa5597778e83cbc495a1dcd9733b4e9951480",
        "date": 1550058865,
        "releases": {
            "previous": "d16172d3af3931dc7bb93cfcdf533998c1f81913",
            "next": "d16172d3af3931dc7bb93cfcdf533998c1f81913"
        },
        "commit_message": "#609 use asm to get annotation\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d16172d3af3931dc7bb93cfcdf533998c1f81913": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/DefaultReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.DefaultReflectionService.newClassMeta(Type target)"
                ]
            },
            "110aa5597778e83cbc495a1dcd9733b4e9951480": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/DefaultReflectionService.java": [
                    "private <T> ClassMeta<T> org.simpleflatmapper.reflect.DefaultReflectionService.newClassMeta(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "afe351bc2a5ca4769f4fd71bec2bce5d6fc7310e",
        "previous_commit": "a025e98ad7df8416f276e3f0c8cd1d3869c9ddc0",
        "date": 1586876464,
        "releases": {
            "previous": "afe351bc2a5ca4769f4fd71bec2bce5d6fc7310e",
            "next": "afe351bc2a5ca4769f4fd71bec2bce5d6fc7310e"
        },
        "commit_message": "avoid calling next on exhausted source #716\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "afe351bc2a5ca4769f4fd71bec2bce5d6fc7310e": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/ResultSetEnumerable.java": [
                    "public boolean org.simpleflatmapper.jdbc.ResultSetEnumerable.next()"
                ]
            },
            "a025e98ad7df8416f276e3f0c8cd1d3869c9ddc0": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/ResultSetEnumerable.java": [
                    "public boolean org.simpleflatmapper.jdbc.ResultSetEnumerable.next()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "54b37822d513d5fc5e5a9be0cf3160973d6e2c65",
        "previous_commit": "84613471a5ef1ecc8195799bb3f63c0748f7d15a",
        "date": 1467557799,
        "releases": {
            "previous": "54b37822d513d5fc5e5a9be0cf3160973d6e2c65",
            "next": "54b37822d513d5fc5e5a9be0cf3160973d6e2c65"
        },
        "commit_message": " #319 better primary key handling\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "54b37822d513d5fc5e5a9be0cf3160973d6e2c65": {
                "sfm/src/main/java/org/sfm/jdbc/impl/CrudMeta.java": [
                    "public static CrudMeta org.sfm.jdbc.impl.CrudMeta.of(Connection connection, String table, ColumnDefinitionProvider<FieldMapperColumnDefinition<JdbcColumnKey>, JdbcColumnKey> columnDefinitionProvider)"
                ]
            },
            "84613471a5ef1ecc8195799bb3f63c0748f7d15a": {
                "sfm/src/main/java/org/sfm/jdbc/impl/CrudMeta.java": []
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9fee07cae2f55566df51a3a773fb356b86363a75",
        "previous_commit": "46f9e7e1f6fc464aa39b74927f4f338800ee25c0",
        "date": 1543787543,
        "releases": {
            "previous": "9fee07cae2f55566df51a3a773fb356b86363a75",
            "next": "9fee07cae2f55566df51a3a773fb356b86363a75"
        },
        "commit_message": "unfold getter and setter for ConstantSourceFieldMapper\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9fee07cae2f55566df51a3a773fb356b86363a75": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmFactory.java": [
                    "public <S, T> AbstractMapper<S, T> org.simpleflatmapper.map.asm.MapperAsmFactory.createMapper(final FieldKey<?>[] keys, final FieldMapper<S, T>[] mappers, final FieldMapper<S, T>[] constructorMappers, final BiInstantiator<S, MappingContext<? super S>, T> instantiator, final Class<? super S> source, final Class<T> target)"
                ]
            },
            "46f9e7e1f6fc464aa39b74927f4f338800ee25c0": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/asm/MapperAsmFactory.java": [
                    "public <S, T> AbstractMapper<S, T> org.simpleflatmapper.map.asm.MapperAsmFactory.createMapper(final FieldKey<?>[] keys, final FieldMapper<S, T>[] mappers, final FieldMapper<S, T>[] constructorMappers, final BiInstantiator<S, MappingContext<? super S>, T> instantiator, final Class<? super S> source, final Class<T> target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b1816b8521eaf59e05bcb8e14f3f260c448df173",
        "previous_commit": "479d9b0fa3f67d12b26da8e18a3de962c92e1f1b",
        "date": 1469917404,
        "releases": {
            "previous": "b1816b8521eaf59e05bcb8e14f3f260c448df173",
            "next": "b1816b8521eaf59e05bcb8e14f3f260c448df173"
        },
        "commit_message": " #330 wrong ex catch\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b1816b8521eaf59e05bcb8e14f3f260c448df173": {
                "sfm/src/main/java/org/sfm/csv/impl/cellreader/joda/MultiFormaterCellValueReader.java": [
                    "public T org.sfm.csv.impl.cellreader.joda.MultiFormaterCellValueReader<T>.read(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ]
            },
            "479d9b0fa3f67d12b26da8e18a3de962c92e1f1b": {
                "sfm/src/main/java/org/sfm/csv/impl/cellreader/joda/MultiFormaterCellValueReader.java": [
                    "public T org.sfm.csv.impl.cellreader.joda.MultiFormaterCellValueReader<T>.read(char[] chars, int offset, int length, ParsingContext parsingContext)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "509d368dab0a7718042b61c873f87a609bf69249",
        "previous_commit": "8a55688a7bc6a82f5b171bb31791d9a4eb425b24",
        "date": 1573491981,
        "releases": {
            "previous": "509d368dab0a7718042b61c873f87a609bf69249",
            "next": "509d368dab0a7718042b61c873f87a609bf69249"
        },
        "commit_message": "java7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "509d368dab0a7718042b61c873f87a609bf69249": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SelectQueryMapper.java": [
                    "public <SET extends TableLike & ResultQuery> List<T> org.simpleflatmapper.jooq.SelectQueryMapper<T>.asList(final SET source)"
                ]
            },
            "8a55688a7bc6a82f5b171bb31791d9a4eb425b24": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/SelectQueryMapper.java": [
                    "public <SET extends TableLike & ResultQuery> List<T> org.simpleflatmapper.jooq.SelectQueryMapper<T>.asList(final SET source)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7feb7ee56addcc0688a87a8b3cdc4ff621750ecc",
        "previous_commit": "ae90e73648dcd1bc5da032273ed41050d3bc0e48",
        "date": 1483465670,
        "releases": {
            "previous": "7feb7ee56addcc0688a87a8b3cdc4ff621750ecc",
            "next": "7feb7ee56addcc0688a87a8b3cdc4ff621750ecc"
        },
        "commit_message": " #390 specify column\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7feb7ee56addcc0688a87a8b3cdc4ff621750ecc": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudFactory.java": [
                    "private static <T, K> QueryPreparer<K> org.simpleflatmapper.jdbc.impl.CrudFactory.buildSelect(ClassMeta<K> keyTarget, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ]
            },
            "ae90e73648dcd1bc5da032273ed41050d3bc0e48": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudFactory.java": [
                    "private static <T, K> QueryPreparer<K> org.simpleflatmapper.jdbc.impl.CrudFactory.buildSelect(ClassMeta<K> keyTarget, CrudMeta crudMeta, JdbcMapperFactory jdbcMapperFactory)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "d3ae487af3e1fd44a078190e5105715189dced1a",
        "previous_commit": "58e607cb0bce4bc16e022e1438fe9e62fdc9364f",
        "date": 1494335013,
        "releases": {
            "previous": "d3ae487af3e1fd44a078190e5105715189dced1a",
            "next": "d3ae487af3e1fd44a078190e5105715189dced1a"
        },
        "commit_message": " #437 delayed setter on constructor should not have a setter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "d3ae487af3e1fd44a078190e5105715189dced1a": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "public <T, P> DelayedCellSetterFactory<T, P> org.simpleflatmapper.csv.impl.CellSetterFactory.getDelayedCellSetter(PropertyMeta<T, P> prop, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ]
            },
            "58e607cb0bce4bc16e022e1438fe9e62fdc9364f": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/impl/CellSetterFactory.java": [
                    "public <T, P> DelayedCellSetterFactory<T, P> org.simpleflatmapper.csv.impl.CellSetterFactory.getDelayedCellSetter(PropertyMeta<T, P> prop, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "54cc55178b6c15e262fcde2a32585eb2ffaf9ffa",
        "previous_commit": "44584426347bb1b1cad74dd2738029de10d2b88e",
        "date": 1561722068,
        "releases": {
            "previous": "54cc55178b6c15e262fcde2a32585eb2ffaf9ffa",
            "next": "54cc55178b6c15e262fcde2a32585eb2ffaf9ffa"
        },
        "commit_message": "implement support for #661\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "54cc55178b6c15e262fcde2a32585eb2ffaf9ffa": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public <T> DiscriminatorNamedGetter<CsvRow, T> org.simpleflatmapper.csv.CsvMapperFactory.newGetter(final Class<T> discriminatorType)"
                ]
            },
            "44584426347bb1b1cad74dd2738029de10d2b88e": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public <T> Getter<? super CsvRow, ? extends T> org.simpleflatmapper.csv.CsvMapperFactory.getGetter(final String discriminatorColumn, final Class<T> discriminatorType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "addc29f66fabff0f20dbdaa024f28ab1db74dd41",
        "previous_commit": "08f14cda8e160489a5afcb26f891611b70502e2b",
        "date": 1469950128,
        "releases": {
            "previous": "addc29f66fabff0f20dbdaa024f28ab1db74dd41",
            "next": "addc29f66fabff0f20dbdaa024f28ab1db74dd41"
        },
        "commit_message": " #330 jodatime multi format support\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "addc29f66fabff0f20dbdaa024f28ab1db74dd41": {
                "sfm/src/main/java/org/sfm/csv/impl/cellreader/joda/JodaTimeCellValueReaderHelper.java": [
                    "public static CellValueReader<?> org.sfm.csv.impl.cellreader.joda.JodaTimeCellValueReaderHelper.getReader(Type type, CsvColumnDefinition columnDefinition)"
                ]
            },
            "08f14cda8e160489a5afcb26f891611b70502e2b": {
                "sfm/src/main/java/org/sfm/csv/impl/cellreader/joda/JodaTimeCellValueReaderHelper.java": [
                    "public static CellValueReader<?> org.sfm.csv.impl.cellreader.joda.JodaTimeCellValueReaderHelper.getReader(Type type, CsvColumnDefinition columnDefinition)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cf478480a2ca3349ee8d6ad5a02b8dcc892fff99",
        "previous_commit": "12e096be6c88dcebb9a2b7144c697d2dcef1f4f7",
        "date": 1475253314,
        "releases": {
            "previous": "cf478480a2ca3349ee8d6ad5a02b8dcc892fff99",
            "next": "cf478480a2ca3349ee8d6ad5a02b8dcc892fff99"
        },
        "commit_message": " #349 update libs\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "cf478480a2ca3349ee8d6ad5a02b8dcc892fff99": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/SizeAdjusterBatchQueryExecutor.java": [
                    "public void org.simpleflatmapper.jdbc.impl.SizeAdjusterBatchQueryExecutor<T>.insert(Connection connection, Collection<T> values, CheckedConsumer<PreparedStatement> postExecute)"
                ]
            },
            "12e096be6c88dcebb9a2b7144c697d2dcef1f4f7": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/SizeAdjusterBatchQueryExecutor.java": [
                    "public void org.simpleflatmapper.jdbc.impl.SizeAdjusterBatchQueryExecutor<T>.insert(Connection connection, Collection<T> values, CheckedConsumer<PreparedStatement> postExecute)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f3630dadeadbfe7888adb2a15302e60289b78dc4",
        "previous_commit": "9ac0241cbb1e719b481020cd3051ce46dc059ae8",
        "date": 1474495858,
        "releases": {
            "previous": "f3630dadeadbfe7888adb2a15302e60289b78dc4",
            "next": "f3630dadeadbfe7888adb2a15302e60289b78dc4"
        },
        "commit_message": " #82 fix npe on nameless partial match\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f3630dadeadbfe7888adb2a15302e60289b78dc4": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "private int org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher._partialMatch(final CharSequence property)"
                ]
            },
            "9ac0241cbb1e719b481020cd3051ce46dc059ae8": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/DefaultPropertyNameMatcher.java": [
                    "private int org.simpleflatmapper.reflect.meta.DefaultPropertyNameMatcher._partialMatch(final CharSequence property)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "63956ad8315cb8aaf9396ddba39cdc2a7dbc3782",
        "previous_commit": "d18a099a4eba7022b1cfa65849658e0ac37417c2",
        "date": 1456306705,
        "releases": {
            "previous": "63956ad8315cb8aaf9396ddba39cdc2a7dbc3782",
            "next": "63956ad8315cb8aaf9396ddba39cdc2a7dbc3782"
        },
        "commit_message": " #300 add test for split batch and fix resizing issue\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "63956ad8315cb8aaf9396ddba39cdc2a7dbc3782": {
                "sfm/src/main/java/org/sfm/jdbc/impl/SizeAdjusterBatchQueryExecutor.java": [
                    "public void org.sfm.jdbc.impl.SizeAdjusterBatchQueryExecutor<T>.insert(Connection connection, Collection<T> values, RowHandler<PreparedStatement> postExecute)"
                ]
            },
            "d18a099a4eba7022b1cfa65849658e0ac37417c2": {
                "sfm/src/main/java/org/sfm/jdbc/impl/SizeAdjusterBatchQueryExecutor.java": [
                    "public void org.sfm.jdbc.impl.SizeAdjusterBatchQueryExecutor<T>.insert(Connection connection, Collection<T> values, RowHandler<PreparedStatement> postExecute)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "46f8c5c5a5245b35e6bbb8ca5a6757b2247da555",
        "previous_commit": "d6227874160460a6ff2085c32748a9eb5790ef02",
        "date": 1485722668,
        "releases": {
            "previous": "46f8c5c5a5245b35e6bbb8ca5a6757b2247da555",
            "next": "46f8c5c5a5245b35e6bbb8ca5a6757b2247da555"
        },
        "commit_message": " #397 converter return identity if type are compatible\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "46f8c5c5a5245b35e6bbb8ca5a6757b2247da555": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, Object... params)"
                ]
            },
            "d6227874160460a6ff2085c32748a9eb5790ef02": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, Object... params)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c6456f3bbcbb41f60104ec2071ca6a2f6f7fbfb0",
        "previous_commit": "6362d85e1870cf4f8479318a18ba08e2c082c759",
        "date": 1536665085,
        "releases": {
            "previous": "c6456f3bbcbb41f60104ec2071ca6a2f6f7fbfb0",
            "next": "c6456f3bbcbb41f60104ec2071ca6a2f6f7fbfb0"
        },
        "commit_message": "fix constructor injection primitive npe when error intercepted\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c6456f3bbcbb41f60104ec2071ca6a2f6f7fbfb0": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperBiInstantiatorFactory.java": [
                    "public static <S> Map<Parameter, BiFunction<? super S, ? super MappingContext<?>, ?>> org.simpleflatmapper.map.mapper.MapperBiInstantiatorFactory.convertToBiInstantiator(Map<Parameter, ContextualGetter<? super S, ?>> constructorParameterGetterMap)"
                ]
            },
            "6362d85e1870cf4f8479318a18ba08e2c082c759": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/mapper/MapperBiInstantiatorFactory.java": [
                    "public static <S> Map<Parameter, BiFunction<? super S, ? super MappingContext<?>, ?>> org.simpleflatmapper.map.mapper.MapperBiInstantiatorFactory.convertToBiInstantiator(Map<Parameter, ContextualGetter<? super S, ?>> constructorParameterGetterMap)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "227e79a3637dc6c2b5c89110eff61ad1cec9c53b",
        "previous_commit": "23e214f932165211e164621f4268484a825b9213",
        "date": 1586160391,
        "releases": {
            "previous": "227e79a3637dc6c2b5c89110eff61ad1cec9c53b",
            "next": "227e79a3637dc6c2b5c89110eff61ad1cec9c53b"
        },
        "commit_message": "replacing Date with LocalDate",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "227e79a3637dc6c2b5c89110eff61ad1cec9c53b": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/converter/JooqConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jooq.converter.JooqConverterFactoryProducer.produce(Consumer<? super ContextualConverterFactory<?, ?>> consumer)"
                ]
            },
            "23e214f932165211e164621f4268484a825b9213": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/converter/JooqConverterFactoryProducer.java": [
                    "public void org.simpleflatmapper.jooq.converter.JooqConverterFactoryProducer.produce(Consumer<? super ContextualConverterFactory<?, ?>> consumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e186e14f0d7cc944c31ec0135a844fb7fd629bb9",
        "previous_commit": "3b9183aad9acf2ee9d279127fcc57938be3cc1d9",
        "date": 1586770289,
        "releases": {
            "previous": "e186e14f0d7cc944c31ec0135a844fb7fd629bb9",
            "next": "e186e14f0d7cc944c31ec0135a844fb7fd629bb9"
        },
        "commit_message": "here the mapped type shall be returned",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e186e14f0d7cc944c31ec0135a844fb7fd629bb9": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/JooqFieldKey.java": [
                    "public Type org.simpleflatmapper.jooq.JooqFieldKey.getType(Type targetType)"
                ]
            },
            "3b9183aad9acf2ee9d279127fcc57938be3cc1d9": {
                "sfm-jooq/src/main/java/org/simpleflatmapper/jooq/JooqFieldKey.java": [
                    "public Type org.simpleflatmapper.jooq.JooqFieldKey.getType(Type targetType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "e6a9f6eb25e0f23ebc29627d5fa39a9683256339",
        "previous_commit": "a426b12ccb9b7ced46448747ea1e223ea8f14a5c",
        "date": 1566209301,
        "releases": {
            "previous": "e6a9f6eb25e0f23ebc29627d5fa39a9683256339",
            "next": "e6a9f6eb25e0f23ebc29627d5fa39a9683256339"
        },
        "commit_message": " #675 paramter source can specify a converter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "e6a9f6eb25e0f23ebc29627d5fa39a9683256339": {
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "private <P> PlaceHolderValueGetter<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.build(JdbcColumnKey key, PropertyMapping<T, P, JdbcColumnKey> pm)"
                ]
            },
            "a426b12ccb9b7ced46448747ea1e223ea8f14a5c": {
                "sfm-springjdbc/src/main/java/org/simpleflatmapper/jdbc/spring/SqlParameterSourceBuilder.java": [
                    "private <P> PlaceHolderValueGetter<T> org.simpleflatmapper.jdbc.spring.SqlParameterSourceBuilder<T>.build(JdbcColumnKey key, PropertyMapping<T, P, JdbcColumnKey> pm)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "36c03b42e45f74b689d8e4f8704d60ae6491e4af",
        "previous_commit": "4a8a50c442ff4cbf8e5aac4e33f740ccd8766ca4",
        "date": 1548257105,
        "releases": {
            "previous": "36c03b42e45f74b689d8e4f8704d60ae6491e4af",
            "next": "36c03b42e45f74b689d8e4f8704d60ae6491e4af"
        },
        "commit_message": "#605 fix osgi visibility issue\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "36c03b42e45f74b689d8e4f8704d60ae6491e4af": {
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/impl/UnorderedJoinSheetMapper.java": [
                    "private Enumerable<T> org.simpleflatmapper.poi.impl.UnorderedJoinSheetMapper<T>.enumerable(int startRow, Sheet sheet, MappingContext<? super Row> mappingContext)"
                ]
            },
            "4a8a50c442ff4cbf8e5aac4e33f740ccd8766ca4": {
                "sfm-poi/src/main/java/org/simpleflatmapper/poi/impl/UnorderedJoinSheetMapper.java": [
                    "private Enumerable<T> org.simpleflatmapper.poi.impl.UnorderedJoinSheetMapper<T>.enumerable(int startRow, Sheet sheet, MappingContext<? super Row> mappingContext)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "16abe81fd50903fe4fea8e5732e52e7a84460494",
        "previous_commit": "0c06e3ae2a3cb3faeab83b7d52073af361b798ef",
        "date": 1531513615,
        "releases": {
            "previous": "16abe81fd50903fe4fea8e5732e52e7a84460494",
            "next": "16abe81fd50903fe4fea8e5732e52e7a84460494"
        },
        "commit_message": "fix java7\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "16abe81fd50903fe4fea8e5732e52e7a84460494": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/instantiator/KotlinDefaultConstructorInstantiatorDefinition.java": [
                    "public <S1, S2> void org.simpleflatmapper.reflect.instantiator.KotlinDefaultConstructorInstantiatorDefinition.addDefaultValueFlagBi(Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections)"
                ]
            },
            "0c06e3ae2a3cb3faeab83b7d52073af361b798ef": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/instantiator/KotlinDefaultConstructorInstantiatorDefinition.java": [
                    "public <S1, S2> void org.simpleflatmapper.reflect.instantiator.KotlinDefaultConstructorInstantiatorDefinition.addDefaultValueFlagBi(Map<Parameter, BiFunction<? super S1, ? super S2, ?>> injections)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "909931e5f9015afcf7cbcf5997ffdfdf1598f1e7",
        "previous_commit": "25ae1b33bac030a49add4a9d25d4d83d3b626f45",
        "date": 1539097306,
        "releases": {
            "previous": "909931e5f9015afcf7cbcf5997ffdfdf1598f1e7",
            "next": "909931e5f9015afcf7cbcf5997ffdfdf1598f1e7"
        },
        "commit_message": " #558 use jdbc internal convertion\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "909931e5f9015afcf7cbcf5997ffdfdf1598f1e7": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/NameBasedResultSetGetterFactory.java": [
                    "public <T> Getter<? super ResultSet, ? extends T> org.simpleflatmapper.jdbc.NameBasedResultSetGetterFactory.getGetter(String discriminatorColumn, Class<T> discriminatorType)"
                ]
            },
            "25ae1b33bac030a49add4a9d25d4d83d3b626f45": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/NameBasedResultSetGetterFactory.java": [
                    "public <T> Getter<? super ResultSet, ? extends T> org.simpleflatmapper.jdbc.NameBasedResultSetGetterFactory.getGetter(String discriminatorColumn, Class<T> discriminatorType)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "6011f5008c519e0892a12404d9828bb09f583eb2",
        "previous_commit": "156e1a74566001a80af97bbcf4d279d21f451d84",
        "date": 1539636269,
        "releases": {
            "previous": "6011f5008c519e0892a12404d9828bb09f583eb2",
            "next": "6011f5008c519e0892a12404d9828bb09f583eb2"
        },
        "commit_message": " fix #573\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "6011f5008c519e0892a12404d9828bb09f583eb2": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorReflectionService.java": [
                    "public <T> ClassMeta<T> org.simpleflatmapper.map.impl.DiscriminatorReflectionService.getClassMeta(Type target)"
                ]
            },
            "156e1a74566001a80af97bbcf4d279d21f451d84": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/impl/DiscriminatorReflectionService.java": [
                    "public <T> ClassMeta<T> org.simpleflatmapper.map.impl.DiscriminatorReflectionService.getClassMeta(Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "7151d7a70d351460f1ee2610488c0137aeee54aa",
        "previous_commit": "36c92c9ae9feca262553ac4bfce2eeefb94f3a13",
        "date": 1467872927,
        "releases": {
            "previous": "7151d7a70d351460f1ee2610488c0137aeee54aa",
            "next": "7151d7a70d351460f1ee2610488c0137aeee54aa"
        },
        "commit_message": "fix test, better behavior for parallel reader\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "7151d7a70d351460f1ee2610488c0137aeee54aa": {
                "sfm/src/main/java/org/sfm/utils/ParallelReader.java": [
                    "private int org.sfm.utils.ParallelReader.read(char[] cbuf, int off, int len, long currentHead, long currentTail)"
                ]
            },
            "36c92c9ae9feca262553ac4bfce2eeefb94f3a13": {
                "sfm/src/main/java/org/sfm/utils/ParallelReader.java": [
                    "private int org.sfm.utils.ParallelReader.read(char[] cbuf, int off, int len, long currentHead, long currentTail)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "23ec6d43005c8b4954b9cc8cc45bcc6795424e0f",
        "previous_commit": "dad1364ba6a57d6b49c6c47c5cbca16299155602",
        "date": 1553263449,
        "releases": {
            "previous": "23ec6d43005c8b4954b9cc8cc45bcc6795424e0f",
            "next": "23ec6d43005c8b4954b9cc8cc45bcc6795424e0f"
        },
        "commit_message": " #622  fix\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "23ec6d43005c8b4954b9cc8cc45bcc6795424e0f": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, Object... params)"
                ]
            },
            "dad1364ba6a57d6b49c6c47c5cbca16299155602": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "public <F, P> Converter<? super F, ? extends P> org.simpleflatmapper.converter.ConverterService.findConverter(Type inType, Type outType, Object... params)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "cab1909444a72e8f0b244486ddf82c2ac03d20ea",
        "previous_commit": "c6cbab8f15e34c9ead496b064700a7ab7ba40926",
        "date": 1455138630,
        "releases": {
            "previous": "cab1909444a72e8f0b244486ddf82c2ac03d20ea",
            "next": "cab1909444a72e8f0b244486ddf82c2ac03d20ea"
        },
        "commit_message": "#292 add UUID reader\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "cab1909444a72e8f0b244486ddf82c2ac03d20ea": {
                "sfm/src/main/java/org/sfm/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.sfm.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ]
            },
            "c6cbab8f15e34c9ead496b064700a7ab7ba40926": {
                "sfm/src/main/java/org/sfm/csv/impl/CellValueReaderFactoryImpl.java": [
                    "public <P> CellValueReader<P> org.sfm.csv.impl.CellValueReaderFactoryImpl.getReader(Type propertyType, int index, CsvColumnDefinition columnDefinition, ParsingContextFactoryBuilder parsingContextFactoryBuilder)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b38c63509bf9c92314a16901a46d519973f92d4f",
        "previous_commit": "e9e19221f77d90ae22f2e33b338af223caec6634",
        "date": 1510653429,
        "releases": {
            "previous": "b38c63509bf9c92314a16901a46d519973f92d4f",
            "next": "b38c63509bf9c92314a16901a46d519973f92d4f"
        },
        "commit_message": " #459 handle special character\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b38c63509bf9c92314a16901a46d519973f92d4f": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, int start, int end, CellConsumer cellConsumer)"
                ]
            },
            "e9e19221f77d90ae22f2e33b338af223caec6634": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/UnescapeCellPreProcessor.java": [
                    "private void org.simpleflatmapper.csv.parser.UnescapeCellPreProcessor.unescape(final char[] chars, int start, int end, CellConsumer cellConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "dd1719d870ef76da530471f0e36ef3773e515d54",
        "previous_commit": "975db118a74a4718813b59aeebcb784ce54923ba",
        "date": 1561056522,
        "releases": {
            "previous": "dd1719d870ef76da530471f0e36ef3773e515d54",
            "next": "dd1719d870ef76da530471f0e36ef3773e515d54"
        },
        "commit_message": "generalised JdbcGetterFactoryProperty\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "dd1719d870ef76da530471f0e36ef3773e515d54": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/property/JdbcGetterFactoryProperty.java": [
                    "public static <T> GetterFactoryProperty org.simpleflatmapper.jdbc.property.JdbcGetterFactoryProperty.forType(final Class<T> type, final ResultSetGetter<T> getter)"
                ]
            },
            "975db118a74a4718813b59aeebcb784ce54923ba": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/property/JdbcGetterFactoryProperty.java": [
                    "public static <T> GetterFactoryProperty org.simpleflatmapper.jdbc.property.JdbcGetterFactoryProperty.forType(final Class<T> type, final ResultSetGetter<T> getter)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "ec7c8715be59f16394a4ca0d9e3192d639dabd7d",
        "previous_commit": "d9849e0766cca7b8b75ddf490e87798274b161b0",
        "date": 1469529651,
        "releases": {
            "previous": "ec7c8715be59f16394a4ca0d9e3192d639dabd7d",
            "next": "ec7c8715be59f16394a4ca0d9e3192d639dabd7d"
        },
        "commit_message": "fix url discovery to not introspect classloader\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "ec7c8715be59f16394a4ca0d9e3192d639dabd7d": {
                "sfm-test/src/main/java/org/sfm/utils/LibrarySetsClassLoader.java": [
                    "private static URL org.sfm.utils.LibrarySetsClassLoader.findUrl(Class<?> includeClass, ClassLoader classLoader)"
                ]
            },
            "d9849e0766cca7b8b75ddf490e87798274b161b0": {
                "sfm-test/src/main/java/org/sfm/utils/LibrarySetsClassLoader.java": [
                    "private static URL org.sfm.utils.LibrarySetsClassLoader.findUrl(Class<?> includeClass, ClassLoader classLoader)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "20383832958f686c47a9e5d31d0dfe1d952f57d3",
        "previous_commit": "8a029922d80a098a8ab1ebe4c07359716cf7fc8a",
        "date": 1573668019,
        "releases": {
            "previous": "20383832958f686c47a9e5d31d0dfe1d952f57d3",
            "next": "20383832958f686c47a9e5d31d0dfe1d952f57d3"
        },
        "commit_message": "add InferNull prop #693\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "20383832958f686c47a9e5d31d0dfe1d952f57d3": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/annotation/impl/MappingAnnotationToPropertyServiceProducer.java": [
                    "public void org.simpleflatmapper.map.annotation.impl.MappingAnnotationToPropertyServiceProducer.generateProperty(Annotation annotation, Consumer<Object> consumer)"
                ]
            },
            "8a029922d80a098a8ab1ebe4c07359716cf7fc8a": {
                "sfm-map/src/main/java/org/simpleflatmapper/map/annotation/impl/MappingAnnotationToPropertyServiceProducer.java": [
                    "public void org.simpleflatmapper.map.annotation.impl.MappingAnnotationToPropertyServiceProducer.generateProperty(Annotation annotation, Consumer<Object> consumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "bf60ddf0ec98face9bfe8e6c3fe91c3aee22db5a",
        "previous_commit": "985010d87be5fd77d2a1afa599d2f0a2c65c09f0",
        "date": 1534326903,
        "releases": {
            "previous": "bf60ddf0ec98face9bfe8e6c3fe91c3aee22db5a",
            "next": "bf60ddf0ec98face9bfe8e6c3fe91c3aee22db5a"
        },
        "commit_message": "fix #544\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "bf60ddf0ec98face9bfe8e6c3fe91c3aee22db5a": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private boolean org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.disallowSelfReference(Object[] properties)"
                ]
            },
            "985010d87be5fd77d2a1afa599d2f0a2c65c09f0": {
                "sfm-reflect/src/main/java/org/simpleflatmapper/reflect/meta/ObjectPropertyFinder.java": [
                    "private boolean org.simpleflatmapper.reflect.meta.ObjectPropertyFinder<T>.disallowSelfReference(Object[] properties)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "9449927398f113692510083ba6101c343b32c135",
        "previous_commit": "c09a0bb45faac9ee250b271d04cd90be4b9e5c7b",
        "date": 1522736926,
        "releases": {
            "previous": "9449927398f113692510083ba6101c343b32c135",
            "next": "9449927398f113692510083ba6101c343b32c135"
        },
        "commit_message": "add size check outside lock\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "9449927398f113692510083ba6101c343b32c135": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/AbstractCharConsumer.java": [
                    "public static AbstractCharConsumer org.simpleflatmapper.csv.parser.AbstractCharConsumer.newCharConsumer(TextFormat textFormat, CharBuffer charBuffer, CellPreProcessor cellTransformer, boolean specialisedCharConsumer)"
                ]
            },
            "c09a0bb45faac9ee250b271d04cd90be4b9e5c7b": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/AbstractCharConsumer.java": [
                    "public static AbstractCharConsumer org.simpleflatmapper.csv.parser.AbstractCharConsumer.newCharConsumer(TextFormat textFormat, CharBuffer charBuffer, CellPreProcessor cellTransformer, boolean specialisedCharConsumer)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "f1fb1413b4c36c7fce4a8204d0d6b83be16410f3",
        "previous_commit": "83c9466bd75e6bc0ed6df12ba12f6cc7f05c774d",
        "date": 1470086695,
        "releases": {
            "previous": "f1fb1413b4c36c7fce4a8204d0d6b83be16410f3",
            "next": "f1fb1413b4c36c7fce4a8204d0d6b83be16410f3"
        },
        "commit_message": "sfm-csv compiles\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "f1fb1413b4c36c7fce4a8204d0d6b83be16410f3": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "private CsvMapperCellHandlerFactory<T> org.simpleflatmapper.csv.CsvMapperBuilder<T>.newCsvMapperCellHandlerFactory(ParsingContextFactoryBuilder parsingContextFactoryBuilder, Instantiator<CsvMapperCellHandler<T>, T> instantiator, CsvColumnKey[] keys, DelayedCellSetterFactory<T, ?>[] delayedCellSetterFactories, CellSetter<T>[] setters )"
                ]
            },
            "83c9466bd75e6bc0ed6df12ba12f6cc7f05c774d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperBuilder.java": [
                    "private CsvMapperCellHandlerFactory<T> org.simpleflatmapper.csv.CsvMapperBuilder<T>.newCsvMapperCellHandlerFactory(ParsingContextFactoryBuilder parsingContextFactoryBuilder, Instantiator<CsvMapperCellHandler<T>, T> instantiator, CsvColumnKey[] keys, DelayedCellSetterFactory<T, ?>[] delayedCellSetterFactories, CellSetter<T>[] setters )"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "fa78dcc768e10c01b3f7cea435098964213daaaa",
        "previous_commit": "82d6e31f51819f040d1199f1a79ea518d27c74f8",
        "date": 1471204087,
        "releases": {
            "previous": "fa78dcc768e10c01b3f7cea435098964213daaaa",
            "next": "fa78dcc768e10c01b3f7cea435098964213daaaa"
        },
        "commit_message": "fix enumarable\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "fa78dcc768e10c01b3f7cea435098964213daaaa": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ArrayEnumarable.java": [
                    "public boolean org.simpleflatmapper.util.ArrayEnumarable<T>.next()"
                ]
            },
            "82d6e31f51819f040d1199f1a79ea518d27c74f8": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/ArrayEnumarable.java": [
                    "public boolean org.simpleflatmapper.util.ArrayEnumarable<T>.next()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "2e2956681f3de360554d46faf13d08ac44a29535",
        "previous_commit": "0ac13c5df3656aae5e4ae7ef77179eeab383b9d8",
        "date": 1522706553,
        "releases": {
            "previous": "2e2956681f3de360554d46faf13d08ac44a29535",
            "next": "2e2956681f3de360554d46faf13d08ac44a29535"
        },
        "commit_message": "finally...\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "2e2956681f3de360554d46faf13d08ac44a29535": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/AbstractCharConsumer.java": [
                    "private static Constructor<? extends AbstractCharConsumer> org.simpleflatmapper.csv.parser.AbstractCharConsumer.generateSpecialisedCharConsumer(final SpecialisationKey key)"
                ]
            },
            "0ac13c5df3656aae5e4ae7ef77179eeab383b9d8": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/AbstractCharConsumer.java": [
                    "private static Constructor<? extends AbstractCharConsumer> org.simpleflatmapper.csv.parser.AbstractCharConsumer.generateSpecialisedCharConsumer(SpecialisationKey key)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "1b7a87f872f45bc02a5188504d13be0f1389a434",
        "previous_commit": "ce61c382f8108bc22274b281616d7f49c9937885",
        "date": 1489683398,
        "releases": {
            "previous": "1b7a87f872f45bc02a5188504d13be0f1389a434",
            "next": "1b7a87f872f45bc02a5188504d13be0f1389a434"
        },
        "commit_message": " #426 add property to mark column as autogenerated\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "1b7a87f872f45bc02a5188504d13be0f1389a434": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudMeta.java": [
                    "public static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.of(Connection connection, String table, ColumnDefinitionProvider<FieldMapperColumnDefinition<JdbcColumnKey>, JdbcColumnKey> columnDefinitionProvider)"
                ]
            },
            "ce61c382f8108bc22274b281616d7f49c9937885": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/CrudMeta.java": [
                    "public static CrudMeta org.simpleflatmapper.jdbc.impl.CrudMeta.of(Connection connection, String table, ColumnDefinitionProvider<FieldMapperColumnDefinition<JdbcColumnKey>, JdbcColumnKey> columnDefinitionProvider)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "60fff58dd25e29969008a2e149f5281cf36ff25b",
        "previous_commit": "6add45632ba2885f6aad86d585f6934dd2789639",
        "date": 1537267064,
        "releases": {
            "previous": "60fff58dd25e29969008a2e149f5281cf36ff25b",
            "next": "60fff58dd25e29969008a2e149f5281cf36ff25b"
        },
        "commit_message": "backward compatible with converter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "60fff58dd25e29969008a2e149f5281cf36ff25b": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ContextualConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ]
            },
            "6add45632ba2885f6aad86d585f6934dd2789639": {
                "sfm-converter/src/main/java/org/simpleflatmapper/converter/ConverterService.java": [
                    "private static List<ContextualConverterFactory> org.simpleflatmapper.converter.ConverterService.getConverterFactories()"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "509fcc64b795e4f4760c5cb17636d069364e3f3b",
        "previous_commit": "2fe689045e83feb04d7cfef9261022fcd813ae38",
        "date": 1710854533,
        "releases": {
            "previous": "509fcc64b795e4f4760c5cb17636d069364e3f3b",
            "next": "509fcc64b795e4f4760c5cb17636d069364e3f3b"
        },
        "commit_message": "add jakarta.persistence alias support\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "509fcc64b795e4f4760c5cb17636d069364e3f3b": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JpaAliasProviderFactory.java": [
                    "public void org.simpleflatmapper.jdbc.impl.JpaAliasProviderFactory.produce(Consumer<? super AliasProvider> consumer)"
                ]
            },
            "2fe689045e83feb04d7cfef9261022fcd813ae38": {
                "sfm-jdbc/src/main/java/org/simpleflatmapper/jdbc/impl/JpaAliasProviderFactory.java": [
                    "public void org.simpleflatmapper.jdbc.impl.JpaAliasProviderFactory.produce(Consumer<? super AliasProvider> consumer)"
                ]
            }
        },
        "java_version": {
            "version": "11",
            "should_update_pom": false
        }
    },
    {
        "commit": "292dc974608a333b792609d4f690681ed8147c0d",
        "previous_commit": "b66d0cf74b9089ec0a1085798a216390475d5d61",
        "date": 1522706169,
        "releases": {
            "previous": "292dc974608a333b792609d4f690681ed8147c0d",
            "next": "292dc974608a333b792609d4f690681ed8147c0d"
        },
        "commit_message": "diamond are for ever\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "292dc974608a333b792609d4f690681ed8147c0d": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/AbstractCharConsumer.java": [
                    "private static Constructor<? extends AbstractCharConsumer> org.simpleflatmapper.csv.parser.AbstractCharConsumer.generateSpecialisedCharConsumer(SpecialisationKey key)"
                ]
            },
            "b66d0cf74b9089ec0a1085798a216390475d5d61": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/parser/AbstractCharConsumer.java": [
                    "private static Constructor<? extends AbstractCharConsumer> org.simpleflatmapper.csv.parser.AbstractCharConsumer.generateSpecialisedCharConsumer(SpecialisationKey key)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "245273941617cf2019b6f8e9b63b0c750dbea244",
        "previous_commit": "ede0f21496736388f9352bba828e040bc699cf39",
        "date": 1456557061,
        "releases": {
            "previous": "245273941617cf2019b6f8e9b63b0c750dbea244",
            "next": "245273941617cf2019b6f8e9b63b0c750dbea244"
        },
        "commit_message": "add test for tz\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "245273941617cf2019b6f8e9b63b0c750dbea244": {
                "sfm/src/main/java/org/sfm/utils/conv/time/JavaTimeConverterFactory.java": [
                    "public static <F, P> Converter<F, P> org.sfm.utils.conv.time.JavaTimeConverterFactory.getConverterFrom(Class<F> inType, Type outType, Object[] params)"
                ]
            },
            "ede0f21496736388f9352bba828e040bc699cf39": {
                "sfm/src/main/java/org/sfm/utils/conv/time/JavaTimeConverterFactory.java": [
                    "public static <F, P> Converter<F, P> org.sfm.utils.conv.time.JavaTimeConverterFactory.getConverterFrom(Class<F> inType, Type outType, Object[] params)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "b9ba1ed894e7d5eabf610263070ce2f58c2c24de",
        "previous_commit": "5a8db9e149671555232bcb7138c124f7b52db113",
        "date": 1528985406,
        "releases": {
            "previous": "b9ba1ed894e7d5eabf610263070ce2f58c2c24de",
            "next": "b9ba1ed894e7d5eabf610263070ce2f58c2c24de"
        },
        "commit_message": "#517 add error collecting mapper\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "b9ba1ed894e7d5eabf610263070ce2f58c2c24de": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public <T> CsvMapper<Result<T,CsvColumnKey>> org.simpleflatmapper.csv.CsvMapperFactory.newErrorCollectingMapper(final Type target)"
                ]
            },
            "5a8db9e149671555232bcb7138c124f7b52db113": {
                "sfm-csv/src/main/java/org/simpleflatmapper/csv/CsvMapperFactory.java": [
                    "public <T> CsvMapper<Result<T,CsvColumnKey>> org.simpleflatmapper.csv.CsvMapperFactory.newErrorCollectingMapper(final Type target)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "343ba6ebab61780b19240263c7dfcca77542755a",
        "previous_commit": "3c820a1b4e28b80beed776866e6f8bca0d3cefdd",
        "date": 1572185775,
        "releases": {
            "previous": "343ba6ebab61780b19240263c7dfcca77542755a",
            "next": "343ba6ebab61780b19240263c7dfcca77542755a"
        },
        "commit_message": " #686 initial version of non mapped csv writer\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "343ba6ebab61780b19240263c7dfcca77542755a": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/CsvCellWriter.java": [
                    "public void org.simpleflatmapper.lightningcsv.CsvCellWriter.writeValue(CharSequence sequence, Appendable appendable)"
                ]
            },
            "3c820a1b4e28b80beed776866e6f8bca0d3cefdd": {
                "lightningcsv/src/main/java/org/simpleflatmapper/lightningcsv/CsvCellWriter.java": [
                    "public void org.simpleflatmapper.lightningcsv.CsvCellWriter.writeValue(CharSequence sequence, Appendable appendable)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "452550d7edffb546928f912fe88345a525a785b6",
        "previous_commit": "a5c8fae3b3105a8bf8c38e6d33b227d78f405153",
        "date": 1467393623,
        "releases": {
            "previous": "452550d7edffb546928f912fe88345a525a785b6",
            "next": "452550d7edffb546928f912fe88345a525a785b6"
        },
        "commit_message": " #318 add support for date to java data time converter\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "452550d7edffb546928f912fe88345a525a785b6": {
                "sfm/src/main/java/org/sfm/utils/conv/ConverterFactory.java": [
                    "public static <P, F> Converter<F, P> org.sfm.utils.conv.ConverterFactory.getConverter(Class<F> inType, Type outType, Object... params)"
                ]
            },
            "a5c8fae3b3105a8bf8c38e6d33b227d78f405153": {
                "sfm/src/main/java/org/sfm/utils/conv/ConverterFactory.java": [
                    "public static <P, F> Converter<F, P> org.sfm.utils.conv.ConverterFactory.getConverter(Class<F> inType, Type outType, Object... params)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    },
    {
        "commit": "c3a818f896102407538a146ddc097a1ed7a72aae",
        "previous_commit": "bff551b34690a392588533194264b2497aa6ebe9",
        "date": 1473799761,
        "releases": {
            "previous": "c3a818f896102407538a146ddc097a1ed7a72aae",
            "next": "c3a818f896102407538a146ddc097a1ed7a72aae"
        },
        "commit_message": "add checkedconsumer helper for java7, move toConsumer in java7 exclusion\n",
        "jmh_dependency": {
            "benchmark_directory": "sfm-jmh",
            "benchmark_name": "benchmarks.jar"
        },
        "method_changes": {
            "c3a818f896102407538a146ddc097a1ed7a72aae": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/CheckedConsumer.java": []
            },
            "bff551b34690a392588533194264b2497aa6ebe9": {
                "sfm-util/src/main/java/org/simpleflatmapper/util/CheckedConsumer.java": [
                    "public void org.simpleflatmapper.util..accept(T t)"
                ]
            }
        },
        "java_version": {
            "version": "1.8",
            "should_update_pom": false
        }
    }
]